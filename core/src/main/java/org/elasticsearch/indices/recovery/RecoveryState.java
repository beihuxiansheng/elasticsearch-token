begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.recovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RestoreSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Keeps track of state related to shard recovery.  */
end_comment

begin_class
DECL|class|RecoveryState
specifier|public
class|class
name|RecoveryState
implements|implements
name|ToXContent
implements|,
name|Streamable
block|{
DECL|enum|Stage
specifier|public
specifier|static
enum|enum
name|Stage
block|{
DECL|enum constant|INIT
name|INIT
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
block|,
comment|/**          * recovery of lucene files, either reusing local ones are copying new ones          */
DECL|enum constant|INDEX
name|INDEX
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
comment|/**          * potentially running check index          */
DECL|enum constant|VERIFY_INDEX
name|VERIFY_INDEX
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
block|,
comment|/**          * starting up the engine, replaying the translog          */
DECL|enum constant|TRANSLOG
name|TRANSLOG
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
block|,
comment|/**          * performing final task after all translog ops have been done          */
DECL|enum constant|FINALIZE
name|FINALIZE
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|)
block|,
DECL|enum constant|DONE
name|DONE
argument_list|(
operator|(
name|byte
operator|)
literal|5
argument_list|)
block|;
DECL|field|STAGES
specifier|private
specifier|static
specifier|final
name|Stage
index|[]
name|STAGES
init|=
operator|new
name|Stage
index|[
name|Stage
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
static|static
block|{
for|for
control|(
name|Stage
name|stage
range|:
name|Stage
operator|.
name|values
argument_list|()
control|)
block|{
assert|assert
name|stage
operator|.
name|id
argument_list|()
operator|<
name|STAGES
operator|.
name|length
operator|&&
name|stage
operator|.
name|id
argument_list|()
operator|>=
literal|0
assert|;
name|STAGES
index|[
name|stage
operator|.
name|id
index|]
operator|=
name|stage
expr_stmt|;
block|}
block|}
DECL|field|id
specifier|private
specifier|final
name|byte
name|id
decl_stmt|;
DECL|method|Stage
name|Stage
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|byte
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|fromId
specifier|public
specifier|static
name|Stage
name|fromId
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|<
literal|0
operator|||
name|id
operator|>=
name|STAGES
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No mapping for id ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|STAGES
index|[
name|id
index|]
return|;
block|}
block|}
DECL|enum|Type
specifier|public
specifier|static
enum|enum
name|Type
block|{
DECL|enum constant|STORE
name|STORE
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
block|,
DECL|enum constant|SNAPSHOT
name|SNAPSHOT
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
DECL|enum constant|REPLICA
name|REPLICA
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
block|,
DECL|enum constant|RELOCATION
name|RELOCATION
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
block|;
DECL|field|TYPES
specifier|private
specifier|static
specifier|final
name|Type
index|[]
name|TYPES
init|=
operator|new
name|Type
index|[
name|Type
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
static|static
block|{
for|for
control|(
name|Type
name|type
range|:
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
assert|assert
name|type
operator|.
name|id
argument_list|()
operator|<
name|TYPES
operator|.
name|length
operator|&&
name|type
operator|.
name|id
argument_list|()
operator|>=
literal|0
assert|;
name|TYPES
index|[
name|type
operator|.
name|id
index|]
operator|=
name|type
expr_stmt|;
block|}
block|}
DECL|field|id
specifier|private
specifier|final
name|byte
name|id
decl_stmt|;
DECL|method|Type
name|Type
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|byte
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|fromId
specifier|public
specifier|static
name|Type
name|fromId
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|<
literal|0
operator|||
name|id
operator|>=
name|TYPES
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No mapping for id ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|TYPES
index|[
name|id
index|]
return|;
block|}
block|}
DECL|field|stage
specifier|private
name|Stage
name|stage
decl_stmt|;
DECL|field|index
specifier|private
specifier|final
name|Index
name|index
init|=
operator|new
name|Index
argument_list|()
decl_stmt|;
DECL|field|translog
specifier|private
specifier|final
name|Translog
name|translog
init|=
operator|new
name|Translog
argument_list|()
decl_stmt|;
DECL|field|verifyIndex
specifier|private
specifier|final
name|VerifyIndex
name|verifyIndex
init|=
operator|new
name|VerifyIndex
argument_list|()
decl_stmt|;
DECL|field|timer
specifier|private
specifier|final
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
DECL|field|type
specifier|private
name|Type
name|type
decl_stmt|;
DECL|field|shardId
specifier|private
name|ShardId
name|shardId
decl_stmt|;
DECL|field|restoreSource
specifier|private
name|RestoreSource
name|restoreSource
decl_stmt|;
DECL|field|sourceNode
specifier|private
name|DiscoveryNode
name|sourceNode
decl_stmt|;
DECL|field|targetNode
specifier|private
name|DiscoveryNode
name|targetNode
decl_stmt|;
DECL|field|primary
specifier|private
name|boolean
name|primary
init|=
literal|false
decl_stmt|;
DECL|method|RecoveryState
specifier|private
name|RecoveryState
parameter_list|()
block|{     }
DECL|method|RecoveryState
specifier|public
name|RecoveryState
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|boolean
name|primary
parameter_list|,
name|Type
name|type
parameter_list|,
name|DiscoveryNode
name|sourceNode
parameter_list|,
name|DiscoveryNode
name|targetNode
parameter_list|)
block|{
name|this
argument_list|(
name|shardId
argument_list|,
name|primary
argument_list|,
name|type
argument_list|,
name|sourceNode
argument_list|,
literal|null
argument_list|,
name|targetNode
argument_list|)
expr_stmt|;
block|}
DECL|method|RecoveryState
specifier|public
name|RecoveryState
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|boolean
name|primary
parameter_list|,
name|Type
name|type
parameter_list|,
name|RestoreSource
name|restoreSource
parameter_list|,
name|DiscoveryNode
name|targetNode
parameter_list|)
block|{
name|this
argument_list|(
name|shardId
argument_list|,
name|primary
argument_list|,
name|type
argument_list|,
literal|null
argument_list|,
name|restoreSource
argument_list|,
name|targetNode
argument_list|)
expr_stmt|;
block|}
DECL|method|RecoveryState
specifier|private
name|RecoveryState
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|boolean
name|primary
parameter_list|,
name|Type
name|type
parameter_list|,
annotation|@
name|Nullable
name|DiscoveryNode
name|sourceNode
parameter_list|,
annotation|@
name|Nullable
name|RestoreSource
name|restoreSource
parameter_list|,
name|DiscoveryNode
name|targetNode
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|primary
operator|=
name|primary
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|sourceNode
operator|=
name|sourceNode
expr_stmt|;
name|this
operator|.
name|restoreSource
operator|=
name|restoreSource
expr_stmt|;
name|this
operator|.
name|targetNode
operator|=
name|targetNode
expr_stmt|;
name|stage
operator|=
name|Stage
operator|.
name|INIT
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|getShardId
specifier|public
name|ShardId
name|getShardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
DECL|method|getStage
specifier|public
specifier|synchronized
name|Stage
name|getStage
parameter_list|()
block|{
return|return
name|this
operator|.
name|stage
return|;
block|}
DECL|method|validateAndSetStage
specifier|private
name|void
name|validateAndSetStage
parameter_list|(
name|Stage
name|expected
parameter_list|,
name|Stage
name|next
parameter_list|)
block|{
if|if
condition|(
name|stage
operator|!=
name|expected
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"can't move recovery to stage ["
operator|+
name|next
operator|+
literal|"]. current stage: ["
operator|+
name|stage
operator|+
literal|"] (expected ["
operator|+
name|expected
operator|+
literal|"])"
argument_list|)
throw|;
block|}
name|stage
operator|=
name|next
expr_stmt|;
block|}
comment|// synchronized is strictly speaking not needed (this is called by a single thread), but just to be safe
DECL|method|setStage
specifier|public
specifier|synchronized
name|RecoveryState
name|setStage
parameter_list|(
name|Stage
name|stage
parameter_list|)
block|{
switch|switch
condition|(
name|stage
condition|)
block|{
case|case
name|INIT
case|:
comment|// reinitializing stop remove all state except for start time
name|this
operator|.
name|stage
operator|=
name|Stage
operator|.
name|INIT
expr_stmt|;
name|getIndex
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
name|getVerifyIndex
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
name|getTranslog
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
break|break;
case|case
name|INDEX
case|:
name|validateAndSetStage
argument_list|(
name|Stage
operator|.
name|INIT
argument_list|,
name|stage
argument_list|)
expr_stmt|;
name|getIndex
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
break|break;
case|case
name|VERIFY_INDEX
case|:
name|validateAndSetStage
argument_list|(
name|Stage
operator|.
name|INDEX
argument_list|,
name|stage
argument_list|)
expr_stmt|;
name|getIndex
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
name|getVerifyIndex
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
break|break;
case|case
name|TRANSLOG
case|:
name|validateAndSetStage
argument_list|(
name|Stage
operator|.
name|VERIFY_INDEX
argument_list|,
name|stage
argument_list|)
expr_stmt|;
name|getVerifyIndex
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
name|getTranslog
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
break|break;
case|case
name|FINALIZE
case|:
name|validateAndSetStage
argument_list|(
name|Stage
operator|.
name|TRANSLOG
argument_list|,
name|stage
argument_list|)
expr_stmt|;
name|getTranslog
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
break|break;
case|case
name|DONE
case|:
name|validateAndSetStage
argument_list|(
name|Stage
operator|.
name|FINALIZE
argument_list|,
name|stage
argument_list|)
expr_stmt|;
name|getTimer
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown RecoveryState.Stage ["
operator|+
name|stage
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
DECL|method|getIndex
specifier|public
name|Index
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
DECL|method|getVerifyIndex
specifier|public
name|VerifyIndex
name|getVerifyIndex
parameter_list|()
block|{
return|return
name|this
operator|.
name|verifyIndex
return|;
block|}
DECL|method|getTranslog
specifier|public
name|Translog
name|getTranslog
parameter_list|()
block|{
return|return
name|translog
return|;
block|}
DECL|method|getTimer
specifier|public
name|Timer
name|getTimer
parameter_list|()
block|{
return|return
name|timer
return|;
block|}
DECL|method|getType
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getSourceNode
specifier|public
name|DiscoveryNode
name|getSourceNode
parameter_list|()
block|{
return|return
name|sourceNode
return|;
block|}
DECL|method|getTargetNode
specifier|public
name|DiscoveryNode
name|getTargetNode
parameter_list|()
block|{
return|return
name|targetNode
return|;
block|}
DECL|method|getRestoreSource
specifier|public
name|RestoreSource
name|getRestoreSource
parameter_list|()
block|{
return|return
name|restoreSource
return|;
block|}
DECL|method|getPrimary
specifier|public
name|boolean
name|getPrimary
parameter_list|()
block|{
return|return
name|primary
return|;
block|}
DECL|method|readRecoveryState
specifier|public
specifier|static
name|RecoveryState
name|readRecoveryState
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|RecoveryState
name|recoveryState
init|=
operator|new
name|RecoveryState
argument_list|()
decl_stmt|;
name|recoveryState
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|recoveryState
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
specifier|synchronized
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|timer
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|type
operator|=
name|Type
operator|.
name|fromId
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|stage
operator|=
name|Stage
operator|.
name|fromId
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|shardId
operator|=
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|restoreSource
operator|=
name|RestoreSource
operator|.
name|readOptionalRestoreSource
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|targetNode
operator|=
name|DiscoveryNode
operator|.
name|readNode
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|sourceNode
operator|=
name|DiscoveryNode
operator|.
name|readNode
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|index
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|translog
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|verifyIndex
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|primary
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|timer
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|type
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|stage
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|shardId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalStreamable
argument_list|(
name|restoreSource
argument_list|)
expr_stmt|;
name|targetNode
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|sourceNode
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|sourceNode
operator|!=
literal|null
condition|)
block|{
name|sourceNode
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|index
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|translog
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|verifyIndex
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|primary
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|ID
argument_list|,
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TYPE
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|STAGE
argument_list|,
name|stage
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|PRIMARY
argument_list|,
name|primary
argument_list|)
expr_stmt|;
name|builder
operator|.
name|dateValueField
argument_list|(
name|Fields
operator|.
name|START_TIME_IN_MILLIS
argument_list|,
name|Fields
operator|.
name|START_TIME
argument_list|,
name|timer
operator|.
name|startTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|timer
operator|.
name|stopTime
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|dateValueField
argument_list|(
name|Fields
operator|.
name|STOP_TIME_IN_MILLIS
argument_list|,
name|Fields
operator|.
name|STOP_TIME
argument_list|,
name|timer
operator|.
name|stopTime
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|timeValueField
argument_list|(
name|Fields
operator|.
name|TOTAL_TIME_IN_MILLIS
argument_list|,
name|Fields
operator|.
name|TOTAL_TIME
argument_list|,
name|timer
operator|.
name|time
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|restoreSource
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|SOURCE
argument_list|)
expr_stmt|;
name|restoreSource
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|SOURCE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|ID
argument_list|,
name|sourceNode
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|HOST
argument_list|,
name|sourceNode
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TRANSPORT_ADDRESS
argument_list|,
name|sourceNode
operator|.
name|address
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|IP
argument_list|,
name|sourceNode
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|NAME
argument_list|,
name|sourceNode
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|TARGET
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|ID
argument_list|,
name|targetNode
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|HOST
argument_list|,
name|targetNode
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TRANSPORT_ADDRESS
argument_list|,
name|targetNode
operator|.
name|address
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|IP
argument_list|,
name|targetNode
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|NAME
argument_list|,
name|targetNode
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|INDEX
argument_list|)
expr_stmt|;
name|index
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|TRANSLOG
argument_list|)
expr_stmt|;
name|translog
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|VERIFY_INDEX
argument_list|)
expr_stmt|;
name|verifyIndex
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|ID
specifier|static
specifier|final
name|XContentBuilderString
name|ID
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
DECL|field|TYPE
specifier|static
specifier|final
name|XContentBuilderString
name|TYPE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
DECL|field|STAGE
specifier|static
specifier|final
name|XContentBuilderString
name|STAGE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"stage"
argument_list|)
decl_stmt|;
DECL|field|PRIMARY
specifier|static
specifier|final
name|XContentBuilderString
name|PRIMARY
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"primary"
argument_list|)
decl_stmt|;
DECL|field|START_TIME
specifier|static
specifier|final
name|XContentBuilderString
name|START_TIME
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"start_time"
argument_list|)
decl_stmt|;
DECL|field|START_TIME_IN_MILLIS
specifier|static
specifier|final
name|XContentBuilderString
name|START_TIME_IN_MILLIS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"start_time_in_millis"
argument_list|)
decl_stmt|;
DECL|field|STOP_TIME
specifier|static
specifier|final
name|XContentBuilderString
name|STOP_TIME
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"stop_time"
argument_list|)
decl_stmt|;
DECL|field|STOP_TIME_IN_MILLIS
specifier|static
specifier|final
name|XContentBuilderString
name|STOP_TIME_IN_MILLIS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"stop_time_in_millis"
argument_list|)
decl_stmt|;
DECL|field|TOTAL_TIME
specifier|static
specifier|final
name|XContentBuilderString
name|TOTAL_TIME
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"total_time"
argument_list|)
decl_stmt|;
DECL|field|TOTAL_TIME_IN_MILLIS
specifier|static
specifier|final
name|XContentBuilderString
name|TOTAL_TIME_IN_MILLIS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"total_time_in_millis"
argument_list|)
decl_stmt|;
DECL|field|SOURCE
specifier|static
specifier|final
name|XContentBuilderString
name|SOURCE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"source"
argument_list|)
decl_stmt|;
DECL|field|HOST
specifier|static
specifier|final
name|XContentBuilderString
name|HOST
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"host"
argument_list|)
decl_stmt|;
DECL|field|TRANSPORT_ADDRESS
specifier|static
specifier|final
name|XContentBuilderString
name|TRANSPORT_ADDRESS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"transport_address"
argument_list|)
decl_stmt|;
DECL|field|IP
specifier|static
specifier|final
name|XContentBuilderString
name|IP
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"ip"
argument_list|)
decl_stmt|;
DECL|field|NAME
specifier|static
specifier|final
name|XContentBuilderString
name|NAME
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
DECL|field|TARGET
specifier|static
specifier|final
name|XContentBuilderString
name|TARGET
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"target"
argument_list|)
decl_stmt|;
DECL|field|INDEX
specifier|static
specifier|final
name|XContentBuilderString
name|INDEX
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
DECL|field|TRANSLOG
specifier|static
specifier|final
name|XContentBuilderString
name|TRANSLOG
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"translog"
argument_list|)
decl_stmt|;
DECL|field|TOTAL_ON_START
specifier|static
specifier|final
name|XContentBuilderString
name|TOTAL_ON_START
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"total_on_start"
argument_list|)
decl_stmt|;
DECL|field|VERIFY_INDEX
specifier|static
specifier|final
name|XContentBuilderString
name|VERIFY_INDEX
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"verify_index"
argument_list|)
decl_stmt|;
DECL|field|RECOVERED
specifier|static
specifier|final
name|XContentBuilderString
name|RECOVERED
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"recovered"
argument_list|)
decl_stmt|;
DECL|field|RECOVERED_IN_BYTES
specifier|static
specifier|final
name|XContentBuilderString
name|RECOVERED_IN_BYTES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"recovered_in_bytes"
argument_list|)
decl_stmt|;
DECL|field|CHECK_INDEX_TIME
specifier|static
specifier|final
name|XContentBuilderString
name|CHECK_INDEX_TIME
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"check_index_time"
argument_list|)
decl_stmt|;
DECL|field|CHECK_INDEX_TIME_IN_MILLIS
specifier|static
specifier|final
name|XContentBuilderString
name|CHECK_INDEX_TIME_IN_MILLIS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"check_index_time_in_millis"
argument_list|)
decl_stmt|;
DECL|field|LENGTH
specifier|static
specifier|final
name|XContentBuilderString
name|LENGTH
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"length"
argument_list|)
decl_stmt|;
DECL|field|LENGTH_IN_BYTES
specifier|static
specifier|final
name|XContentBuilderString
name|LENGTH_IN_BYTES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"length_in_bytes"
argument_list|)
decl_stmt|;
DECL|field|FILES
specifier|static
specifier|final
name|XContentBuilderString
name|FILES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"files"
argument_list|)
decl_stmt|;
DECL|field|TOTAL
specifier|static
specifier|final
name|XContentBuilderString
name|TOTAL
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"total"
argument_list|)
decl_stmt|;
DECL|field|TOTAL_IN_BYTES
specifier|static
specifier|final
name|XContentBuilderString
name|TOTAL_IN_BYTES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"total_in_bytes"
argument_list|)
decl_stmt|;
DECL|field|REUSED
specifier|static
specifier|final
name|XContentBuilderString
name|REUSED
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"reused"
argument_list|)
decl_stmt|;
DECL|field|REUSED_IN_BYTES
specifier|static
specifier|final
name|XContentBuilderString
name|REUSED_IN_BYTES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"reused_in_bytes"
argument_list|)
decl_stmt|;
DECL|field|PERCENT
specifier|static
specifier|final
name|XContentBuilderString
name|PERCENT
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"percent"
argument_list|)
decl_stmt|;
DECL|field|DETAILS
specifier|static
specifier|final
name|XContentBuilderString
name|DETAILS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"details"
argument_list|)
decl_stmt|;
DECL|field|SIZE
specifier|static
specifier|final
name|XContentBuilderString
name|SIZE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
DECL|field|SOURCE_THROTTLE_TIME
specifier|static
specifier|final
name|XContentBuilderString
name|SOURCE_THROTTLE_TIME
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"source_throttle_time"
argument_list|)
decl_stmt|;
DECL|field|SOURCE_THROTTLE_TIME_IN_MILLIS
specifier|static
specifier|final
name|XContentBuilderString
name|SOURCE_THROTTLE_TIME_IN_MILLIS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"source_throttle_time_in_millis"
argument_list|)
decl_stmt|;
DECL|field|TARGET_THROTTLE_TIME
specifier|static
specifier|final
name|XContentBuilderString
name|TARGET_THROTTLE_TIME
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"target_throttle_time"
argument_list|)
decl_stmt|;
DECL|field|TARGET_THROTTLE_TIME_IN_MILLIS
specifier|static
specifier|final
name|XContentBuilderString
name|TARGET_THROTTLE_TIME_IN_MILLIS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"target_throttle_time_in_millis"
argument_list|)
decl_stmt|;
block|}
DECL|class|Timer
specifier|public
specifier|static
class|class
name|Timer
implements|implements
name|Streamable
block|{
DECL|field|startTime
specifier|protected
name|long
name|startTime
init|=
literal|0
decl_stmt|;
DECL|field|time
specifier|protected
name|long
name|time
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|stopTime
specifier|protected
name|long
name|stopTime
init|=
literal|0
decl_stmt|;
DECL|method|start
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
assert|assert
name|startTime
operator|==
literal|0
operator|:
literal|"already started"
assert|;
name|startTime
operator|=
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Returns start time in millis */
DECL|method|startTime
specifier|public
specifier|synchronized
name|long
name|startTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
comment|/** Returns elapsed time in millis, or 0 if timer was not started */
DECL|method|time
specifier|public
specifier|synchronized
name|long
name|time
parameter_list|()
block|{
if|if
condition|(
name|startTime
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|time
operator|>=
literal|0
condition|)
block|{
return|return
name|time
return|;
block|}
return|return
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
operator|-
name|startTime
argument_list|)
return|;
block|}
comment|/** Returns stop time in millis */
DECL|method|stopTime
specifier|public
specifier|synchronized
name|long
name|stopTime
parameter_list|()
block|{
return|return
name|stopTime
return|;
block|}
DECL|method|stop
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
assert|assert
name|stopTime
operator|==
literal|0
operator|:
literal|"already stopped"
assert|;
name|stopTime
operator|=
name|Math
operator|.
name|max
argument_list|(
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|time
operator|=
name|stopTime
operator|-
name|startTime
expr_stmt|;
assert|assert
name|time
operator|>=
literal|0
assert|;
block|}
DECL|method|reset
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
name|startTime
operator|=
literal|0
expr_stmt|;
name|time
operator|=
operator|-
literal|1
expr_stmt|;
name|stopTime
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
specifier|synchronized
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|startTime
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|stopTime
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|time
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
specifier|synchronized
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|stopTime
argument_list|)
expr_stmt|;
comment|// write a snapshot of current time, which is not per se the time field
name|out
operator|.
name|writeVLong
argument_list|(
name|time
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|VerifyIndex
specifier|public
specifier|static
class|class
name|VerifyIndex
extends|extends
name|Timer
implements|implements
name|ToXContent
implements|,
name|Streamable
block|{
DECL|field|checkIndexTime
specifier|private
specifier|volatile
name|long
name|checkIndexTime
decl_stmt|;
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checkIndexTime
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|checkIndexTime
specifier|public
name|long
name|checkIndexTime
parameter_list|()
block|{
return|return
name|checkIndexTime
return|;
block|}
DECL|method|checkIndexTime
specifier|public
name|void
name|checkIndexTime
parameter_list|(
name|long
name|checkIndexTime
parameter_list|)
block|{
name|this
operator|.
name|checkIndexTime
operator|=
name|checkIndexTime
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|checkIndexTime
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|checkIndexTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|timeValueField
argument_list|(
name|Fields
operator|.
name|CHECK_INDEX_TIME_IN_MILLIS
argument_list|,
name|Fields
operator|.
name|CHECK_INDEX_TIME
argument_list|,
name|checkIndexTime
argument_list|)
expr_stmt|;
name|builder
operator|.
name|timeValueField
argument_list|(
name|Fields
operator|.
name|TOTAL_TIME_IN_MILLIS
argument_list|,
name|Fields
operator|.
name|TOTAL_TIME
argument_list|,
name|time
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
DECL|class|Translog
specifier|public
specifier|static
class|class
name|Translog
extends|extends
name|Timer
implements|implements
name|ToXContent
implements|,
name|Streamable
block|{
DECL|field|UNKNOWN
specifier|public
specifier|static
specifier|final
name|int
name|UNKNOWN
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|recovered
specifier|private
name|int
name|recovered
decl_stmt|;
DECL|field|total
specifier|private
name|int
name|total
init|=
name|UNKNOWN
decl_stmt|;
DECL|field|totalOnStart
specifier|private
name|int
name|totalOnStart
init|=
name|UNKNOWN
decl_stmt|;
DECL|method|reset
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|recovered
operator|=
literal|0
expr_stmt|;
name|total
operator|=
name|UNKNOWN
expr_stmt|;
name|totalOnStart
operator|=
name|UNKNOWN
expr_stmt|;
block|}
DECL|method|incrementRecoveredOperations
specifier|public
specifier|synchronized
name|void
name|incrementRecoveredOperations
parameter_list|()
block|{
name|recovered
operator|++
expr_stmt|;
assert|assert
name|total
operator|==
name|UNKNOWN
operator|||
name|total
operator|>=
name|recovered
operator|:
literal|"total, if known, should be> recovered. total ["
operator|+
name|total
operator|+
literal|"], recovered ["
operator|+
name|recovered
operator|+
literal|"]"
assert|;
block|}
DECL|method|decrementRecoveredOperations
specifier|public
specifier|synchronized
name|void
name|decrementRecoveredOperations
parameter_list|(
name|int
name|ops
parameter_list|)
block|{
name|recovered
operator|-=
name|ops
expr_stmt|;
assert|assert
name|recovered
operator|>=
literal|0
operator|:
literal|"recovered operations must be non-negative. Because ["
operator|+
name|recovered
operator|+
literal|"] after decrementing ["
operator|+
name|ops
operator|+
literal|"]"
assert|;
assert|assert
name|total
operator|==
name|UNKNOWN
operator|||
name|total
operator|>=
name|recovered
operator|:
literal|"total, if known, should be> recovered. total ["
operator|+
name|total
operator|+
literal|"], recovered ["
operator|+
name|recovered
operator|+
literal|"]"
assert|;
block|}
comment|/**          * returns the total number of translog operations recovered so far          */
DECL|method|recoveredOperations
specifier|public
specifier|synchronized
name|int
name|recoveredOperations
parameter_list|()
block|{
return|return
name|recovered
return|;
block|}
comment|/**          * returns the total number of translog operations needed to be recovered at this moment.          * Note that this can change as the number of operations grows during recovery.          *<p/>          * A value of -1 ({@link RecoveryState.Translog#UNKNOWN} is return if this is unknown (typically a gateway recovery)          */
DECL|method|totalOperations
specifier|public
specifier|synchronized
name|int
name|totalOperations
parameter_list|()
block|{
return|return
name|total
return|;
block|}
DECL|method|totalOperations
specifier|public
specifier|synchronized
name|void
name|totalOperations
parameter_list|(
name|int
name|total
parameter_list|)
block|{
name|this
operator|.
name|total
operator|=
name|total
expr_stmt|;
assert|assert
name|total
operator|==
name|UNKNOWN
operator|||
name|total
operator|>=
name|recovered
operator|:
literal|"total, if known, should be> recovered. total ["
operator|+
name|total
operator|+
literal|"], recovered ["
operator|+
name|recovered
operator|+
literal|"]"
assert|;
block|}
comment|/**          * returns the total number of translog operations to recovered, on the start of the recovery. Unlike {@link #totalOperations}          * this does change during recovery.          *<p/>          * A value of -1 ({@link RecoveryState.Translog#UNKNOWN} is return if this is unknown (typically a gateway recovery)          */
DECL|method|totalOperationsOnStart
specifier|public
specifier|synchronized
name|int
name|totalOperationsOnStart
parameter_list|()
block|{
return|return
name|this
operator|.
name|totalOnStart
return|;
block|}
DECL|method|totalOperationsOnStart
specifier|public
specifier|synchronized
name|void
name|totalOperationsOnStart
parameter_list|(
name|int
name|total
parameter_list|)
block|{
name|this
operator|.
name|totalOnStart
operator|=
name|total
expr_stmt|;
block|}
DECL|method|recoveredPercent
specifier|public
specifier|synchronized
name|float
name|recoveredPercent
parameter_list|()
block|{
if|if
condition|(
name|total
operator|==
name|UNKNOWN
condition|)
block|{
return|return
operator|-
literal|1.f
return|;
block|}
if|if
condition|(
name|total
operator|==
literal|0
condition|)
block|{
return|return
literal|100.f
return|;
block|}
return|return
name|recovered
operator|*
literal|100.0f
operator|/
name|total
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|recovered
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|total
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|totalOnStart
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|recovered
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|total
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|totalOnStart
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
specifier|synchronized
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|RECOVERED
argument_list|,
name|recovered
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TOTAL
argument_list|,
name|total
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|PERCENT
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%1.1f%%"
argument_list|,
name|recoveredPercent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TOTAL_ON_START
argument_list|,
name|totalOnStart
argument_list|)
expr_stmt|;
name|builder
operator|.
name|timeValueField
argument_list|(
name|Fields
operator|.
name|TOTAL_TIME_IN_MILLIS
argument_list|,
name|Fields
operator|.
name|TOTAL_TIME
argument_list|,
name|time
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
DECL|class|File
specifier|public
specifier|static
class|class
name|File
implements|implements
name|ToXContent
implements|,
name|Streamable
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|length
specifier|private
name|long
name|length
decl_stmt|;
DECL|field|recovered
specifier|private
name|long
name|recovered
decl_stmt|;
DECL|field|reused
specifier|private
name|boolean
name|reused
decl_stmt|;
DECL|method|File
specifier|public
name|File
parameter_list|()
block|{         }
DECL|method|File
specifier|public
name|File
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|length
parameter_list|,
name|boolean
name|reused
parameter_list|)
block|{
assert|assert
name|name
operator|!=
literal|null
assert|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|reused
operator|=
name|reused
expr_stmt|;
block|}
DECL|method|addRecoveredBytes
name|void
name|addRecoveredBytes
parameter_list|(
name|long
name|bytes
parameter_list|)
block|{
assert|assert
name|reused
operator|==
literal|false
operator|:
literal|"file is marked as reused, can't update recovered bytes"
assert|;
assert|assert
name|bytes
operator|>=
literal|0
operator|:
literal|"can't recovered negative bytes. got ["
operator|+
name|bytes
operator|+
literal|"]"
assert|;
name|recovered
operator|+=
name|bytes
expr_stmt|;
block|}
comment|/**          * file name *          */
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**          * file length *          */
DECL|method|length
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|length
return|;
block|}
comment|/**          * number of bytes recovered for this file (so far). 0 if the file is reused *          */
DECL|method|recovered
specifier|public
name|long
name|recovered
parameter_list|()
block|{
return|return
name|recovered
return|;
block|}
comment|/**          * returns true if the file is reused from a local copy          */
DECL|method|reused
specifier|public
name|boolean
name|reused
parameter_list|()
block|{
return|return
name|reused
return|;
block|}
DECL|method|fullyRecovered
name|boolean
name|fullyRecovered
parameter_list|()
block|{
return|return
name|reused
operator|==
literal|false
operator|&&
name|length
operator|==
name|recovered
return|;
block|}
DECL|method|readFile
specifier|public
specifier|static
name|File
name|readFile
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|()
decl_stmt|;
name|file
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|length
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|recovered
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|reused
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|recovered
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|reused
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|LENGTH_IN_BYTES
argument_list|,
name|Fields
operator|.
name|LENGTH
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|REUSED
argument_list|,
name|reused
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|RECOVERED_IN_BYTES
argument_list|,
name|Fields
operator|.
name|RECOVERED
argument_list|,
name|recovered
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|File
condition|)
block|{
name|File
name|other
init|=
operator|(
name|File
operator|)
name|obj
decl_stmt|;
return|return
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
operator|&&
name|length
operator|==
name|other
operator|.
name|length
argument_list|()
operator|&&
name|reused
operator|==
name|other
operator|.
name|reused
argument_list|()
operator|&&
name|recovered
operator|==
name|other
operator|.
name|recovered
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|name
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|length
operator|^
operator|(
name|length
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|recovered
operator|^
operator|(
name|recovered
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|reused
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file (name ["
operator|+
name|name
operator|+
literal|"], reused ["
operator|+
name|reused
operator|+
literal|"], length ["
operator|+
name|length
operator|+
literal|"], recovered ["
operator|+
name|recovered
operator|+
literal|"])"
return|;
block|}
block|}
DECL|class|Index
specifier|public
specifier|static
class|class
name|Index
extends|extends
name|Timer
implements|implements
name|ToXContent
implements|,
name|Streamable
block|{
DECL|field|fileDetails
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|fileDetails
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|UNKNOWN
specifier|public
specifier|final
specifier|static
name|long
name|UNKNOWN
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
init|=
name|UNKNOWN
decl_stmt|;
DECL|field|sourceThrottlingInNanos
specifier|private
name|long
name|sourceThrottlingInNanos
init|=
name|UNKNOWN
decl_stmt|;
DECL|field|targetThrottleTimeInNanos
specifier|private
name|long
name|targetThrottleTimeInNanos
init|=
name|UNKNOWN
decl_stmt|;
DECL|method|fileDetails
specifier|public
specifier|synchronized
name|List
argument_list|<
name|File
argument_list|>
name|fileDetails
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|fileDetails
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
DECL|method|reset
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|version
operator|=
name|UNKNOWN
expr_stmt|;
name|fileDetails
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sourceThrottlingInNanos
operator|=
name|UNKNOWN
expr_stmt|;
name|targetThrottleTimeInNanos
operator|=
name|UNKNOWN
expr_stmt|;
block|}
DECL|method|addFileDetail
specifier|public
specifier|synchronized
name|void
name|addFileDetail
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|length
parameter_list|,
name|boolean
name|reused
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|,
name|length
argument_list|,
name|reused
argument_list|)
decl_stmt|;
name|File
name|existing
init|=
name|fileDetails
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|file
argument_list|)
decl_stmt|;
assert|assert
name|existing
operator|==
literal|null
operator|:
literal|"file ["
operator|+
name|name
operator|+
literal|"] is already reported"
assert|;
block|}
DECL|method|addRecoveredBytesToFile
specifier|public
specifier|synchronized
name|void
name|addRecoveredBytesToFile
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|bytes
parameter_list|)
block|{
name|File
name|file
init|=
name|fileDetails
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|file
operator|.
name|addRecoveredBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
DECL|method|version
specifier|public
specifier|synchronized
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|addSourceThrottling
specifier|public
specifier|synchronized
name|void
name|addSourceThrottling
parameter_list|(
name|long
name|timeInNanos
parameter_list|)
block|{
if|if
condition|(
name|sourceThrottlingInNanos
operator|==
name|UNKNOWN
condition|)
block|{
name|sourceThrottlingInNanos
operator|=
name|timeInNanos
expr_stmt|;
block|}
else|else
block|{
name|sourceThrottlingInNanos
operator|+=
name|timeInNanos
expr_stmt|;
block|}
block|}
DECL|method|addTargetThrottling
specifier|public
specifier|synchronized
name|void
name|addTargetThrottling
parameter_list|(
name|long
name|timeInNanos
parameter_list|)
block|{
if|if
condition|(
name|targetThrottleTimeInNanos
operator|==
name|UNKNOWN
condition|)
block|{
name|targetThrottleTimeInNanos
operator|=
name|timeInNanos
expr_stmt|;
block|}
else|else
block|{
name|targetThrottleTimeInNanos
operator|+=
name|timeInNanos
expr_stmt|;
block|}
block|}
DECL|method|sourceThrottling
specifier|public
specifier|synchronized
name|TimeValue
name|sourceThrottling
parameter_list|()
block|{
return|return
name|TimeValue
operator|.
name|timeValueNanos
argument_list|(
name|sourceThrottlingInNanos
argument_list|)
return|;
block|}
DECL|method|targetThrottling
specifier|public
specifier|synchronized
name|TimeValue
name|targetThrottling
parameter_list|()
block|{
return|return
name|TimeValue
operator|.
name|timeValueNanos
argument_list|(
name|targetThrottleTimeInNanos
argument_list|)
return|;
block|}
comment|/**          * total number of files that are part of this recovery, both re-used and recovered          */
DECL|method|totalFileCount
specifier|public
specifier|synchronized
name|int
name|totalFileCount
parameter_list|()
block|{
return|return
name|fileDetails
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**          * total number of files to be recovered (potentially not yet done)          */
DECL|method|totalRecoverFiles
specifier|public
specifier|synchronized
name|int
name|totalRecoverFiles
parameter_list|()
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|fileDetails
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|reused
argument_list|()
operator|==
literal|false
condition|)
block|{
name|total
operator|++
expr_stmt|;
block|}
block|}
return|return
name|total
return|;
block|}
comment|/**          * number of file that were recovered (excluding on ongoing files)          */
DECL|method|recoveredFileCount
specifier|public
specifier|synchronized
name|int
name|recoveredFileCount
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|fileDetails
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|fullyRecovered
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
comment|/**          * percent of recovered (i.e., not reused) files out of the total files to be recovered          */
DECL|method|recoveredFilesPercent
specifier|public
specifier|synchronized
name|float
name|recoveredFilesPercent
parameter_list|()
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
name|int
name|recovered
init|=
literal|0
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|fileDetails
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|reused
argument_list|()
operator|==
literal|false
condition|)
block|{
name|total
operator|++
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|fullyRecovered
argument_list|()
condition|)
block|{
name|recovered
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|total
operator|==
literal|0
operator|&&
name|fileDetails
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// indicates we are still in init phase
return|return
literal|0.0f
return|;
block|}
if|if
condition|(
name|total
operator|==
name|recovered
condition|)
block|{
return|return
literal|100.0f
return|;
block|}
else|else
block|{
name|float
name|result
init|=
literal|100.0f
operator|*
operator|(
name|recovered
operator|/
operator|(
name|float
operator|)
name|total
operator|)
decl_stmt|;
return|return
name|result
return|;
block|}
block|}
comment|/**          * total number of bytes in th shard          */
DECL|method|totalBytes
specifier|public
specifier|synchronized
name|long
name|totalBytes
parameter_list|()
block|{
name|long
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|fileDetails
operator|.
name|values
argument_list|()
control|)
block|{
name|total
operator|+=
name|file
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
comment|/**          * total number of bytes recovered so far, including both existing and reused          */
DECL|method|recoveredBytes
specifier|public
specifier|synchronized
name|long
name|recoveredBytes
parameter_list|()
block|{
name|long
name|recovered
init|=
literal|0
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|fileDetails
operator|.
name|values
argument_list|()
control|)
block|{
name|recovered
operator|+=
name|file
operator|.
name|recovered
argument_list|()
expr_stmt|;
block|}
return|return
name|recovered
return|;
block|}
comment|/**          * total bytes of files to be recovered (potentially not yet done)          */
DECL|method|totalRecoverBytes
specifier|public
specifier|synchronized
name|long
name|totalRecoverBytes
parameter_list|()
block|{
name|long
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|fileDetails
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|reused
argument_list|()
operator|==
literal|false
condition|)
block|{
name|total
operator|+=
name|file
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|total
return|;
block|}
DECL|method|totalReuseBytes
specifier|public
specifier|synchronized
name|long
name|totalReuseBytes
parameter_list|()
block|{
name|long
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|fileDetails
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|reused
argument_list|()
condition|)
block|{
name|total
operator|+=
name|file
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|total
return|;
block|}
comment|/**          * percent of bytes recovered out of total files bytes *to be* recovered          */
DECL|method|recoveredBytesPercent
specifier|public
specifier|synchronized
name|float
name|recoveredBytesPercent
parameter_list|()
block|{
name|long
name|total
init|=
literal|0
decl_stmt|;
name|long
name|recovered
init|=
literal|0
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|fileDetails
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|reused
argument_list|()
operator|==
literal|false
condition|)
block|{
name|total
operator|+=
name|file
operator|.
name|length
argument_list|()
expr_stmt|;
name|recovered
operator|+=
name|file
operator|.
name|recovered
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|total
operator|==
literal|0
operator|&&
name|fileDetails
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// indicates we are still in init phase
return|return
literal|0.0f
return|;
block|}
if|if
condition|(
name|total
operator|==
name|recovered
condition|)
block|{
return|return
literal|100.0f
return|;
block|}
else|else
block|{
return|return
literal|100.0f
operator|*
name|recovered
operator|/
name|total
return|;
block|}
block|}
DECL|method|reusedFileCount
specifier|public
specifier|synchronized
name|int
name|reusedFileCount
parameter_list|()
block|{
name|int
name|reused
init|=
literal|0
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|fileDetails
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|reused
argument_list|()
condition|)
block|{
name|reused
operator|++
expr_stmt|;
block|}
block|}
return|return
name|reused
return|;
block|}
DECL|method|reusedBytes
specifier|public
specifier|synchronized
name|long
name|reusedBytes
parameter_list|()
block|{
name|long
name|reused
init|=
literal|0
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|fileDetails
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|reused
argument_list|()
condition|)
block|{
name|reused
operator|+=
name|file
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|reused
return|;
block|}
DECL|method|updateVersion
specifier|public
specifier|synchronized
name|void
name|updateVersion
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
specifier|synchronized
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|File
operator|.
name|readFile
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|fileDetails
operator|.
name|put
argument_list|(
name|file
operator|.
name|name
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
name|sourceThrottlingInNanos
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|targetThrottleTimeInNanos
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
specifier|synchronized
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
specifier|final
name|File
index|[]
name|files
init|=
name|fileDetails
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|File
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|file
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeLong
argument_list|(
name|sourceThrottlingInNanos
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|targetThrottleTimeInNanos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
specifier|synchronized
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
comment|// stream size first, as it matters more and the files section can be long
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|TOTAL_IN_BYTES
argument_list|,
name|Fields
operator|.
name|TOTAL
argument_list|,
name|totalBytes
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|REUSED_IN_BYTES
argument_list|,
name|Fields
operator|.
name|REUSED
argument_list|,
name|totalBytes
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|RECOVERED_IN_BYTES
argument_list|,
name|Fields
operator|.
name|RECOVERED
argument_list|,
name|recoveredBytes
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|PERCENT
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%1.1f%%"
argument_list|,
name|recoveredBytesPercent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|FILES
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TOTAL
argument_list|,
name|totalFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|REUSED
argument_list|,
name|reusedFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|RECOVERED
argument_list|,
name|recoveredFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|PERCENT
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%1.1f%%"
argument_list|,
name|recoveredFilesPercent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|paramAsBoolean
argument_list|(
literal|"details"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|DETAILS
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|file
range|:
name|fileDetails
operator|.
name|values
argument_list|()
control|)
block|{
name|file
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|timeValueField
argument_list|(
name|Fields
operator|.
name|TOTAL_TIME_IN_MILLIS
argument_list|,
name|Fields
operator|.
name|TOTAL_TIME
argument_list|,
name|time
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|timeValueField
argument_list|(
name|Fields
operator|.
name|SOURCE_THROTTLE_TIME_IN_MILLIS
argument_list|,
name|Fields
operator|.
name|SOURCE_THROTTLE_TIME
argument_list|,
name|sourceThrottling
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|timeValueField
argument_list|(
name|Fields
operator|.
name|TARGET_THROTTLE_TIME_IN_MILLIS
argument_list|,
name|Fields
operator|.
name|TARGET_THROTTLE_TIME
argument_list|,
name|targetThrottling
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|prettyPrint
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|"{ \"error\" : \""
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\"}"
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

