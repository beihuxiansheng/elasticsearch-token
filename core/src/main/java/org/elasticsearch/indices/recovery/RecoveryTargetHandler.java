begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.recovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|StoreFileMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_interface
DECL|interface|RecoveryTargetHandler
specifier|public
interface|interface
name|RecoveryTargetHandler
block|{
comment|/**      * Prepares the tranget to receive translog operations, after all file have been copied      *      * @param totalTranslogOps total translog operations expected to be sent      */
DECL|method|prepareForTranslogOperations
name|void
name|prepareForTranslogOperations
parameter_list|(
name|int
name|totalTranslogOps
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * The finalize request clears unreferenced translog files, refreshes the engine now that      * new segments are available, and enables garbage collection of      * tombstone files. The shard is also moved to the POST_RECOVERY phase during this time      **/
DECL|method|finalizeRecovery
name|FinalizeResponse
name|finalizeRecovery
parameter_list|()
function_decl|;
comment|/**      * Index a set of translog operations on the target      * @param operations operations to index      * @param totalTranslogOps current number of total operations expected to be indexed      */
DECL|method|indexTranslogOperations
name|void
name|indexTranslogOperations
parameter_list|(
name|List
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|operations
parameter_list|,
name|int
name|totalTranslogOps
parameter_list|)
function_decl|;
comment|/**      * Notifies the target of the files it is going to receive      */
DECL|method|receiveFileInfo
name|void
name|receiveFileInfo
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|phase1FileNames
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|phase1FileSizes
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|phase1ExistingFileNames
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|phase1ExistingFileSizes
parameter_list|,
name|int
name|totalTranslogOps
parameter_list|)
function_decl|;
comment|/**      * After all source files has been sent over, this command is sent to the target so it can clean any local      * files that are not part of the source store      * @param totalTranslogOps an update number of translog operations that will be replayed later on      * @param sourceMetaData meta data of the source store      */
DECL|method|cleanFiles
name|void
name|cleanFiles
parameter_list|(
name|int
name|totalTranslogOps
parameter_list|,
name|Store
operator|.
name|MetadataSnapshot
name|sourceMetaData
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** writes a partial file chunk to the target store */
DECL|method|writeFileChunk
name|void
name|writeFileChunk
parameter_list|(
name|StoreFileMetaData
name|fileMetaData
parameter_list|,
name|long
name|position
parameter_list|,
name|BytesReference
name|content
parameter_list|,
name|boolean
name|lastChunk
parameter_list|,
name|int
name|totalTranslogOps
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|class|FinalizeResponse
class|class
name|FinalizeResponse
extends|extends
name|TransportResponse
block|{
DECL|field|localCheckpoint
specifier|private
name|long
name|localCheckpoint
decl_stmt|;
DECL|field|allocationId
specifier|private
name|String
name|allocationId
decl_stmt|;
DECL|method|FinalizeResponse
specifier|public
name|FinalizeResponse
parameter_list|(
name|String
name|allocationId
parameter_list|,
name|long
name|localCheckpoint
parameter_list|)
block|{
name|this
operator|.
name|localCheckpoint
operator|=
name|localCheckpoint
expr_stmt|;
name|this
operator|.
name|allocationId
operator|=
name|allocationId
expr_stmt|;
block|}
DECL|method|FinalizeResponse
name|FinalizeResponse
parameter_list|()
block|{          }
DECL|method|getLocalCheckpoint
specifier|public
name|long
name|getLocalCheckpoint
parameter_list|()
block|{
return|return
name|localCheckpoint
return|;
block|}
DECL|method|getAllocationId
specifier|public
name|String
name|getAllocationId
parameter_list|()
block|{
return|return
name|allocationId
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeZLong
argument_list|(
name|localCheckpoint
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|allocationId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|localCheckpoint
operator|=
name|in
operator|.
name|readZLong
argument_list|()
expr_stmt|;
name|allocationId
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_interface

end_unit

