begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.recovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RateLimiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|CancellableThreads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|RecoveryEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IllegalIndexShardStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|TranslogRecoveryPerformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|FutureTransportResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueMillis
import|;
end_import

begin_comment
comment|/**  * The recovery target handles recoveries of peer shards of the shard+node to recover to.  *<p>  * Note, it can be safely assumed that there will only be a single recovery per shard (index+id) and  * not several of them (since we don't allocate several shard replicas to the same node).  */
end_comment

begin_class
DECL|class|PeerRecoveryTargetService
specifier|public
class|class
name|PeerRecoveryTargetService
extends|extends
name|AbstractComponent
implements|implements
name|IndexEventListener
block|{
DECL|class|Actions
specifier|public
specifier|static
class|class
name|Actions
block|{
DECL|field|FILES_INFO
specifier|public
specifier|static
specifier|final
name|String
name|FILES_INFO
init|=
literal|"internal:index/shard/recovery/filesInfo"
decl_stmt|;
DECL|field|FILE_CHUNK
specifier|public
specifier|static
specifier|final
name|String
name|FILE_CHUNK
init|=
literal|"internal:index/shard/recovery/file_chunk"
decl_stmt|;
DECL|field|CLEAN_FILES
specifier|public
specifier|static
specifier|final
name|String
name|CLEAN_FILES
init|=
literal|"internal:index/shard/recovery/clean_files"
decl_stmt|;
DECL|field|TRANSLOG_OPS
specifier|public
specifier|static
specifier|final
name|String
name|TRANSLOG_OPS
init|=
literal|"internal:index/shard/recovery/translog_ops"
decl_stmt|;
DECL|field|PREPARE_TRANSLOG
specifier|public
specifier|static
specifier|final
name|String
name|PREPARE_TRANSLOG
init|=
literal|"internal:index/shard/recovery/prepare_translog"
decl_stmt|;
DECL|field|FINALIZE
specifier|public
specifier|static
specifier|final
name|String
name|FINALIZE
init|=
literal|"internal:index/shard/recovery/finalize"
decl_stmt|;
DECL|field|WAIT_CLUSTERSTATE
specifier|public
specifier|static
specifier|final
name|String
name|WAIT_CLUSTERSTATE
init|=
literal|"internal:index/shard/recovery/wait_clusterstate"
decl_stmt|;
block|}
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|recoverySettings
specifier|private
specifier|final
name|RecoverySettings
name|recoverySettings
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|onGoingRecoveries
specifier|private
specifier|final
name|RecoveriesCollection
name|onGoingRecoveries
decl_stmt|;
DECL|method|PeerRecoveryTargetService
specifier|public
name|PeerRecoveryTargetService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|RecoverySettings
name|recoverySettings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|recoverySettings
operator|=
name|recoverySettings
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|onGoingRecoveries
operator|=
operator|new
name|RecoveriesCollection
argument_list|(
name|logger
argument_list|,
name|threadPool
argument_list|,
name|this
operator|::
name|waitForClusterState
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|Actions
operator|.
name|FILES_INFO
argument_list|,
name|RecoveryFilesInfoRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|FilesInfoRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|Actions
operator|.
name|FILE_CHUNK
argument_list|,
name|RecoveryFileChunkRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|FileChunkTransportRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|Actions
operator|.
name|CLEAN_FILES
argument_list|,
name|RecoveryCleanFilesRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|CleanFilesRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|Actions
operator|.
name|PREPARE_TRANSLOG
argument_list|,
name|RecoveryPrepareForTranslogOperationsRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|PrepareForTranslogOperationsRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|Actions
operator|.
name|TRANSLOG_OPS
argument_list|,
name|RecoveryTranslogOperationsRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|TranslogOperationsRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|Actions
operator|.
name|FINALIZE
argument_list|,
name|RecoveryFinalizeRecoveryRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|FinalizeRecoveryRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|Actions
operator|.
name|WAIT_CLUSTERSTATE
argument_list|,
name|RecoveryWaitForClusterStateRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|WaitForClusterStateRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeIndexShardClosed
specifier|public
name|void
name|beforeIndexShardClosed
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|Nullable
name|IndexShard
name|indexShard
parameter_list|,
name|Settings
name|indexSettings
parameter_list|)
block|{
if|if
condition|(
name|indexShard
operator|!=
literal|null
condition|)
block|{
name|onGoingRecoveries
operator|.
name|cancelRecoveriesForShard
argument_list|(
name|shardId
argument_list|,
literal|"shard closed"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * cancel all ongoing recoveries for the given shard, if their status match a predicate      *      * @param reason       reason for cancellation      * @param shardId      shardId for which to cancel recoveries      * @return true if a recovery was cancelled      */
DECL|method|cancelRecoveriesForShard
specifier|public
name|boolean
name|cancelRecoveriesForShard
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
return|return
name|onGoingRecoveries
operator|.
name|cancelRecoveriesForShard
argument_list|(
name|shardId
argument_list|,
name|reason
argument_list|)
return|;
block|}
DECL|method|startRecovery
specifier|public
name|void
name|startRecovery
parameter_list|(
specifier|final
name|IndexShard
name|indexShard
parameter_list|,
specifier|final
name|DiscoveryNode
name|sourceNode
parameter_list|,
specifier|final
name|RecoveryListener
name|listener
parameter_list|)
block|{
comment|// create a new recovery status, and process...
specifier|final
name|long
name|recoveryId
init|=
name|onGoingRecoveries
operator|.
name|startRecovery
argument_list|(
name|indexShard
argument_list|,
name|sourceNode
argument_list|,
name|listener
argument_list|,
name|recoverySettings
operator|.
name|activityTimeout
argument_list|()
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|RecoveryRunner
argument_list|(
name|recoveryId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|retryRecovery
specifier|protected
name|void
name|retryRecovery
parameter_list|(
specifier|final
name|RecoveryTarget
name|recoveryTarget
parameter_list|,
specifier|final
name|Throwable
name|reason
parameter_list|,
name|TimeValue
name|retryAfter
parameter_list|,
specifier|final
name|StartRecoveryRequest
name|currentRequest
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"will retry recovery with id [{}] in [{}]"
argument_list|,
name|recoveryTarget
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|retryAfter
argument_list|)
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|retryRecovery
argument_list|(
name|recoveryTarget
argument_list|,
name|retryAfter
argument_list|,
name|currentRequest
argument_list|)
expr_stmt|;
block|}
DECL|method|retryRecovery
specifier|protected
name|void
name|retryRecovery
parameter_list|(
specifier|final
name|RecoveryTarget
name|recoveryTarget
parameter_list|,
specifier|final
name|String
name|reason
parameter_list|,
name|TimeValue
name|retryAfter
parameter_list|,
specifier|final
name|StartRecoveryRequest
name|currentRequest
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"will retry recovery with id [{}] in [{}] (reason [{}])"
argument_list|,
name|recoveryTarget
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|retryAfter
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|retryRecovery
argument_list|(
name|recoveryTarget
argument_list|,
name|retryAfter
argument_list|,
name|currentRequest
argument_list|)
expr_stmt|;
block|}
DECL|method|retryRecovery
specifier|private
name|void
name|retryRecovery
parameter_list|(
specifier|final
name|RecoveryTarget
name|recoveryTarget
parameter_list|,
name|TimeValue
name|retryAfter
parameter_list|,
specifier|final
name|StartRecoveryRequest
name|currentRequest
parameter_list|)
block|{
try|try
block|{
name|onGoingRecoveries
operator|.
name|resetRecovery
argument_list|(
name|recoveryTarget
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|recoveryTarget
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|onGoingRecoveries
operator|.
name|failRecovery
argument_list|(
name|recoveryTarget
operator|.
name|recoveryId
argument_list|()
argument_list|,
operator|new
name|RecoveryFailedException
argument_list|(
name|currentRequest
argument_list|,
name|e
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|threadPool
operator|.
name|schedule
argument_list|(
name|retryAfter
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|RecoveryRunner
argument_list|(
name|recoveryTarget
operator|.
name|recoveryId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doRecovery
specifier|private
name|void
name|doRecovery
parameter_list|(
specifier|final
name|RecoveryTarget
name|recoveryTarget
parameter_list|)
block|{
assert|assert
name|recoveryTarget
operator|.
name|sourceNode
argument_list|()
operator|!=
literal|null
operator|:
literal|"can't do a recovery without a source node"
assert|;
name|logger
operator|.
name|trace
argument_list|(
literal|"collecting local files for {}"
argument_list|,
name|recoveryTarget
argument_list|)
expr_stmt|;
name|Store
operator|.
name|MetadataSnapshot
name|metadataSnapshot
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|recoveryTarget
operator|.
name|indexShard
argument_list|()
operator|.
name|indexSettings
argument_list|()
operator|.
name|isOnSharedFilesystem
argument_list|()
condition|)
block|{
comment|// we are not going to copy any files, so don't bother listing files, potentially running
comment|// into concurrency issues with the primary changing files underneath us.
name|metadataSnapshot
operator|=
name|Store
operator|.
name|MetadataSnapshot
operator|.
name|EMPTY
expr_stmt|;
block|}
else|else
block|{
name|metadataSnapshot
operator|=
name|recoveryTarget
operator|.
name|indexShard
argument_list|()
operator|.
name|snapshotStoreMetadata
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexNotFoundException
name|e
parameter_list|)
block|{
comment|// happens on an empty folder. no need to log
name|metadataSnapshot
operator|=
name|Store
operator|.
name|MetadataSnapshot
operator|.
name|EMPTY
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"error while listing local files, recover as if there are none"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|metadataSnapshot
operator|=
name|Store
operator|.
name|MetadataSnapshot
operator|.
name|EMPTY
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// this will be logged as warning later on...
name|logger
operator|.
name|trace
argument_list|(
literal|"unexpected error while listing local files, failing recovery"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|onGoingRecoveries
operator|.
name|failRecovery
argument_list|(
name|recoveryTarget
operator|.
name|recoveryId
argument_list|()
argument_list|,
operator|new
name|RecoveryFailedException
argument_list|(
name|recoveryTarget
operator|.
name|state
argument_list|()
argument_list|,
literal|"failed to list local files"
argument_list|,
name|e
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"{} local file count: [{}]"
argument_list|,
name|recoveryTarget
argument_list|,
name|metadataSnapshot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|StartRecoveryRequest
name|request
init|=
operator|new
name|StartRecoveryRequest
argument_list|(
name|recoveryTarget
operator|.
name|shardId
argument_list|()
argument_list|,
name|recoveryTarget
operator|.
name|sourceNode
argument_list|()
argument_list|,
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|,
name|metadataSnapshot
argument_list|,
name|recoveryTarget
operator|.
name|state
argument_list|()
operator|.
name|getPrimary
argument_list|()
argument_list|,
name|recoveryTarget
operator|.
name|recoveryId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|RecoveryResponse
argument_list|>
name|responseHolder
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}][{}] starting recovery from {}"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|sourceNode
argument_list|()
argument_list|)
expr_stmt|;
name|recoveryTarget
operator|.
name|indexShard
argument_list|()
operator|.
name|prepareForIndexRecovery
argument_list|()
expr_stmt|;
name|recoveryTarget
operator|.
name|CancellableThreads
argument_list|()
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|responseHolder
operator|.
name|set
argument_list|(
name|transportService
operator|.
name|submitRequest
argument_list|(
name|request
operator|.
name|sourceNode
argument_list|()
argument_list|,
name|PeerRecoverySourceService
operator|.
name|Actions
operator|.
name|START_RECOVERY
argument_list|,
name|request
argument_list|,
operator|new
name|FutureTransportResponseHandler
argument_list|<
name|RecoveryResponse
argument_list|>
argument_list|()
block|{
block|@Override                                 public RecoveryResponse newInstance(
argument_list|)
block|{
return|return
operator|new
name|RecoveryResponse
argument_list|()
return|;
block|}
block|}
block|)
function|.txGet
parameter_list|()
block|)
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_decl_stmt
specifier|final
name|RecoveryResponse
name|recoveryResponse
init|=
name|responseHolder
operator|.
name|get
argument_list|()
decl_stmt|;
end_decl_stmt

begin_assert
assert|assert
name|responseHolder
operator|!=
literal|null
assert|;
end_assert

begin_decl_stmt
specifier|final
name|TimeValue
name|recoveryTime
init|=
operator|new
name|TimeValue
argument_list|(
name|recoveryTarget
operator|.
name|state
argument_list|()
operator|.
name|getTimer
argument_list|()
operator|.
name|time
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// do this through ongoing recoveries to remove it from the collection
end_comment

begin_expr_stmt
name|onGoingRecoveries
operator|.
name|markRecoveryAsDone
argument_list|(
name|recoveryTarget
operator|.
name|recoveryId
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"recovery completed from "
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|sourceNode
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", took["
argument_list|)
operator|.
name|append
argument_list|(
name|recoveryTime
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"   phase1: recovered_files ["
argument_list|)
operator|.
name|append
argument_list|(
name|recoveryResponse
operator|.
name|phase1FileNames
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|" with "
operator|+
literal|"total_size of ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|ByteSizeValue
argument_list|(
name|recoveryResponse
operator|.
name|phase1TotalSize
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|", took ["
argument_list|)
operator|.
name|append
argument_list|(
name|timeValueMillis
argument_list|(
name|recoveryResponse
operator|.
name|phase1Time
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"], throttling_wait ["
argument_list|)
operator|.
name|append
argument_list|(
name|timeValueMillis
argument_list|(
name|recoveryResponse
operator|.
name|phase1ThrottlingWaitTime
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"         : reusing_files   ["
argument_list|)
operator|.
name|append
argument_list|(
name|recoveryResponse
operator|.
name|phase1ExistingFileNames
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] with "
operator|+
literal|"total_size of ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|ByteSizeValue
argument_list|(
name|recoveryResponse
operator|.
name|phase1ExistingTotalSize
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"   phase2: start took ["
argument_list|)
operator|.
name|append
argument_list|(
name|timeValueMillis
argument_list|(
name|recoveryResponse
operator|.
name|startTime
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"         : recovered ["
argument_list|)
operator|.
name|append
argument_list|(
name|recoveryResponse
operator|.
name|phase2Operations
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|" transaction log "
operator|+
literal|"operations"
argument_list|)
operator|.
name|append
argument_list|(
literal|", took ["
argument_list|)
operator|.
name|append
argument_list|(
name|timeValueMillis
argument_list|(
name|recoveryResponse
operator|.
name|phase2Time
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{}"
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} recovery done from [{}], took [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|recoveryTarget
operator|.
name|sourceNode
argument_list|()
argument_list|,
name|recoveryTime
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
unit|} catch
operator|(
name|CancellableThreads
operator|.
name|ExecutionCancelledException
name|e
operator|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"recovery cancelled"
argument_list|,
name|e
argument_list|)
block|;         }
end_expr_stmt

begin_catch
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"[{}][{}] Got exception on recovery"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Throwable
name|cause
init|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|CancellableThreads
operator|.
name|ExecutionCancelledException
condition|)
block|{
comment|// this can also come from the source wrapped in a RemoteTransportException
name|onGoingRecoveries
operator|.
name|failRecovery
argument_list|(
name|recoveryTarget
operator|.
name|recoveryId
argument_list|()
argument_list|,
operator|new
name|RecoveryFailedException
argument_list|(
name|request
argument_list|,
literal|"source has canceled the"
operator|+
literal|" recovery"
argument_list|,
name|cause
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|RecoveryEngineException
condition|)
block|{
comment|// unwrap an exception that was thrown as part of the recovery
name|cause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
comment|// do it twice, in case we have double transport exception
name|cause
operator|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|cause
argument_list|)
expr_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|RecoveryEngineException
condition|)
block|{
comment|// unwrap an exception that was thrown as part of the recovery
name|cause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
comment|// here, we would add checks against exception that need to be retried (and not removeAndClean in this case)
if|if
condition|(
name|cause
operator|instanceof
name|IllegalIndexShardStateException
operator|||
name|cause
operator|instanceof
name|IndexNotFoundException
operator|||
name|cause
operator|instanceof
name|ShardNotFoundException
condition|)
block|{
comment|// if the target is not ready yet, retry
name|retryRecovery
argument_list|(
name|recoveryTarget
argument_list|,
literal|"remote shard not ready"
argument_list|,
name|recoverySettings
operator|.
name|retryDelayStateSync
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|DelayRecoveryException
condition|)
block|{
name|retryRecovery
argument_list|(
name|recoveryTarget
argument_list|,
name|cause
argument_list|,
name|recoverySettings
operator|.
name|retryDelayStateSync
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|ConnectTransportException
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"delaying recovery of {} for [{}] due to networking error [{}]"
argument_list|,
name|recoveryTarget
operator|.
name|shardId
argument_list|()
argument_list|,
name|recoverySettings
operator|.
name|retryDelayNetwork
argument_list|()
argument_list|,
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|retryRecovery
argument_list|(
name|recoveryTarget
argument_list|,
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|,
name|recoverySettings
operator|.
name|retryDelayNetwork
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|AlreadyClosedException
condition|)
block|{
name|onGoingRecoveries
operator|.
name|failRecovery
argument_list|(
name|recoveryTarget
operator|.
name|recoveryId
argument_list|()
argument_list|,
operator|new
name|RecoveryFailedException
argument_list|(
name|request
argument_list|,
literal|"source shard is "
operator|+
literal|"closed"
argument_list|,
name|cause
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|onGoingRecoveries
operator|.
name|failRecovery
argument_list|(
name|recoveryTarget
operator|.
name|recoveryId
argument_list|()
argument_list|,
operator|new
name|RecoveryFailedException
argument_list|(
name|request
argument_list|,
name|e
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_catch

begin_interface
unit|}      public
DECL|interface|RecoveryListener
interface|interface
name|RecoveryListener
block|{
DECL|method|onRecoveryDone
name|void
name|onRecoveryDone
parameter_list|(
name|RecoveryState
name|state
parameter_list|)
function_decl|;
DECL|method|onRecoveryFailure
name|void
name|onRecoveryFailure
parameter_list|(
name|RecoveryState
name|state
parameter_list|,
name|RecoveryFailedException
name|e
parameter_list|,
name|boolean
name|sendShardFailure
parameter_list|)
function_decl|;
block|}
end_interface

begin_class
DECL|class|PrepareForTranslogOperationsRequestHandler
class|class
name|PrepareForTranslogOperationsRequestHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|RecoveryPrepareForTranslogOperationsRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|RecoveryPrepareForTranslogOperationsRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|RecoveriesCollection
operator|.
name|RecoveryRef
name|recoveryRef
init|=
name|onGoingRecoveries
operator|.
name|getRecoverySafe
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
init|)
block|{
name|recoveryRef
operator|.
name|status
argument_list|()
operator|.
name|prepareForTranslogOperations
argument_list|(
name|request
operator|.
name|totalTranslogOps
argument_list|()
argument_list|,
name|request
operator|.
name|getMaxUnsafeAutoIdTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|FinalizeRecoveryRequestHandler
class|class
name|FinalizeRecoveryRequestHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|RecoveryFinalizeRecoveryRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|RecoveryFinalizeRecoveryRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|RecoveriesCollection
operator|.
name|RecoveryRef
name|recoveryRef
init|=
name|onGoingRecoveries
operator|.
name|getRecoverySafe
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
init|)
block|{
name|recoveryRef
operator|.
name|status
argument_list|()
operator|.
name|finalizeRecovery
argument_list|(
name|request
operator|.
name|globalCheckpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|WaitForClusterStateRequestHandler
class|class
name|WaitForClusterStateRequestHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|RecoveryWaitForClusterStateRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|RecoveryWaitForClusterStateRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|RecoveriesCollection
operator|.
name|RecoveryRef
name|recoveryRef
init|=
name|onGoingRecoveries
operator|.
name|getRecoverySafe
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
init|)
block|{
name|recoveryRef
operator|.
name|status
argument_list|()
operator|.
name|ensureClusterStateVersion
argument_list|(
name|request
operator|.
name|clusterStateVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|TranslogOperationsRequestHandler
class|class
name|TranslogOperationsRequestHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|RecoveryTranslogOperationsRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
specifier|final
name|RecoveryTranslogOperationsRequest
name|request
parameter_list|,
specifier|final
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|RecoveriesCollection
operator|.
name|RecoveryRef
name|recoveryRef
init|=
name|onGoingRecoveries
operator|.
name|getRecoverySafe
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|ClusterStateObserver
name|observer
init|=
operator|new
name|ClusterStateObserver
argument_list|(
name|clusterService
argument_list|,
literal|null
argument_list|,
name|logger
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RecoveryTarget
name|recoveryTarget
init|=
name|recoveryRef
operator|.
name|status
argument_list|()
decl_stmt|;
try|try
block|{
name|recoveryTarget
operator|.
name|indexTranslogOperations
argument_list|(
name|request
operator|.
name|operations
argument_list|()
argument_list|,
name|request
operator|.
name|totalTranslogOps
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TranslogRecoveryPerformer
operator|.
name|BatchOperationException
name|exception
parameter_list|)
block|{
name|MapperException
name|mapperException
init|=
operator|(
name|MapperException
operator|)
name|ExceptionsHelper
operator|.
name|unwrap
argument_list|(
name|exception
argument_list|,
name|MapperException
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapperException
operator|==
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
comment|// in very rare cases a translog replay from primary is processed before a mapping update on this node
comment|// which causes local mapping changes since the mapping (clusterstate) might not have arrived on this node.
comment|// we want to wait until these mappings are processed but also need to do some maintenance and roll back the
comment|// number of processed (completed) operations in this batch to ensure accounting is correct.
name|logger
operator|.
name|trace
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"delaying recovery due to missing mapping changes (rolling back stats for [{}] ops)"
argument_list|,
name|exception
operator|.
name|completedOperations
argument_list|()
argument_list|)
argument_list|,
name|exception
argument_list|)
expr_stmt|;
specifier|final
name|RecoveryState
operator|.
name|Translog
name|translog
init|=
name|recoveryTarget
operator|.
name|state
argument_list|()
operator|.
name|getTranslog
argument_list|()
decl_stmt|;
name|translog
operator|.
name|decrementRecoveredOperations
argument_list|(
name|exception
operator|.
name|completedOperations
argument_list|()
argument_list|)
expr_stmt|;
comment|// do the maintainance and rollback competed ops
comment|// we do not need to use a timeout here since the entire recovery mechanism has an inactivity protection (it will be
comment|// canceled)
name|observer
operator|.
name|waitForNextChange
argument_list|(
operator|new
name|ClusterStateObserver
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
try|try
block|{
name|messageReceived
argument_list|(
name|request
argument_list|,
name|channel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to send error back to recovery source"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onClusterServiceClose
parameter_list|()
block|{
name|onFailure
argument_list|(
operator|new
name|ElasticsearchException
argument_list|(
literal|"cluster service was closed while waiting for mapping updates"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onTimeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
comment|// note that we do not use a timeout (see comment above)
name|onFailure
argument_list|(
operator|new
name|ElasticsearchTimeoutException
argument_list|(
literal|"timed out waiting for mapping updates (timeout ["
operator|+
name|timeout
operator|+
literal|"])"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_function
DECL|method|waitForClusterState
specifier|private
name|void
name|waitForClusterState
parameter_list|(
name|long
name|clusterStateVersion
parameter_list|)
block|{
specifier|final
name|ClusterState
name|clusterState
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
name|ClusterStateObserver
name|observer
init|=
operator|new
name|ClusterStateObserver
argument_list|(
name|clusterState
argument_list|,
name|clusterService
argument_list|,
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|,
name|logger
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusterState
operator|.
name|getVersion
argument_list|()
operator|>=
name|clusterStateVersion
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"node has cluster state with version higher than {} (current: {})"
argument_list|,
name|clusterStateVersion
argument_list|,
name|clusterState
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"waiting for cluster state version {} (current: {})"
argument_list|,
name|clusterStateVersion
argument_list|,
name|clusterState
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|PlainActionFuture
argument_list|<
name|Long
argument_list|>
name|future
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|observer
operator|.
name|waitForNextChange
argument_list|(
operator|new
name|ClusterStateObserver
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|future
operator|.
name|onResponse
argument_list|(
name|state
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onClusterServiceClose
parameter_list|()
block|{
name|future
operator|.
name|onFailure
argument_list|(
operator|new
name|NodeClosedException
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onTimeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
name|future
operator|.
name|onFailure
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"cluster state never updated to version "
operator|+
name|clusterStateVersion
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|newState
lambda|->
name|newState
operator|.
name|getVersion
argument_list|()
operator|>=
name|clusterStateVersion
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|currentVersion
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"successfully waited for cluster state with version {} (current: {})"
argument_list|,
name|clusterStateVersion
argument_list|,
name|currentVersion
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed waiting for cluster state with version {} (current: {})"
argument_list|,
name|clusterStateVersion
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionsHelper
operator|.
name|convertToRuntime
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_function

begin_class
DECL|class|FilesInfoRequestHandler
class|class
name|FilesInfoRequestHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|RecoveryFilesInfoRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|RecoveryFilesInfoRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|RecoveriesCollection
operator|.
name|RecoveryRef
name|recoveryRef
init|=
name|onGoingRecoveries
operator|.
name|getRecoverySafe
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
init|)
block|{
name|recoveryRef
operator|.
name|status
argument_list|()
operator|.
name|receiveFileInfo
argument_list|(
name|request
operator|.
name|phase1FileNames
argument_list|,
name|request
operator|.
name|phase1FileSizes
argument_list|,
name|request
operator|.
name|phase1ExistingFileNames
argument_list|,
name|request
operator|.
name|phase1ExistingFileSizes
argument_list|,
name|request
operator|.
name|totalTranslogOps
argument_list|)
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|CleanFilesRequestHandler
class|class
name|CleanFilesRequestHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|RecoveryCleanFilesRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|RecoveryCleanFilesRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|RecoveriesCollection
operator|.
name|RecoveryRef
name|recoveryRef
init|=
name|onGoingRecoveries
operator|.
name|getRecoverySafe
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
init|)
block|{
name|recoveryRef
operator|.
name|status
argument_list|()
operator|.
name|cleanFiles
argument_list|(
name|request
operator|.
name|totalTranslogOps
argument_list|()
argument_list|,
name|request
operator|.
name|sourceMetaSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|FileChunkTransportRequestHandler
class|class
name|FileChunkTransportRequestHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|RecoveryFileChunkRequest
argument_list|>
block|{
comment|// How many bytes we've copied since we last called RateLimiter.pause
DECL|field|bytesSinceLastPause
specifier|final
name|AtomicLong
name|bytesSinceLastPause
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
specifier|final
name|RecoveryFileChunkRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|RecoveriesCollection
operator|.
name|RecoveryRef
name|recoveryRef
init|=
name|onGoingRecoveries
operator|.
name|getRecoverySafe
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|RecoveryTarget
name|status
init|=
name|recoveryRef
operator|.
name|status
argument_list|()
decl_stmt|;
specifier|final
name|RecoveryState
operator|.
name|Index
name|indexState
init|=
name|status
operator|.
name|state
argument_list|()
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|sourceThrottleTimeInNanos
argument_list|()
operator|!=
name|RecoveryState
operator|.
name|Index
operator|.
name|UNKNOWN
condition|)
block|{
name|indexState
operator|.
name|addSourceThrottling
argument_list|(
name|request
operator|.
name|sourceThrottleTimeInNanos
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RateLimiter
name|rateLimiter
init|=
name|recoverySettings
operator|.
name|rateLimiter
argument_list|()
decl_stmt|;
if|if
condition|(
name|rateLimiter
operator|!=
literal|null
condition|)
block|{
name|long
name|bytes
init|=
name|bytesSinceLastPause
operator|.
name|addAndGet
argument_list|(
name|request
operator|.
name|content
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|>
name|rateLimiter
operator|.
name|getMinPauseCheckBytes
argument_list|()
condition|)
block|{
comment|// Time to pause
name|bytesSinceLastPause
operator|.
name|addAndGet
argument_list|(
operator|-
name|bytes
argument_list|)
expr_stmt|;
name|long
name|throttleTimeInNanos
init|=
name|rateLimiter
operator|.
name|pause
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|indexState
operator|.
name|addTargetThrottling
argument_list|(
name|throttleTimeInNanos
argument_list|)
expr_stmt|;
name|status
operator|.
name|indexShard
argument_list|()
operator|.
name|recoveryStats
argument_list|()
operator|.
name|addThrottleTime
argument_list|(
name|throttleTimeInNanos
argument_list|)
expr_stmt|;
block|}
block|}
name|status
operator|.
name|writeFileChunk
argument_list|(
name|request
operator|.
name|metadata
argument_list|()
argument_list|,
name|request
operator|.
name|position
argument_list|()
argument_list|,
name|request
operator|.
name|content
argument_list|()
argument_list|,
name|request
operator|.
name|lastChunk
argument_list|()
argument_list|,
name|request
operator|.
name|totalTranslogOps
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|RecoveryRunner
class|class
name|RecoveryRunner
extends|extends
name|AbstractRunnable
block|{
DECL|field|recoveryId
specifier|final
name|long
name|recoveryId
decl_stmt|;
DECL|method|RecoveryRunner
name|RecoveryRunner
parameter_list|(
name|long
name|recoveryId
parameter_list|)
block|{
name|this
operator|.
name|recoveryId
operator|=
name|recoveryId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
init|(
name|RecoveriesCollection
operator|.
name|RecoveryRef
name|recoveryRef
init|=
name|onGoingRecoveries
operator|.
name|getRecovery
argument_list|(
name|recoveryId
argument_list|)
init|)
block|{
if|if
condition|(
name|recoveryRef
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"unexpected error during recovery [{}], failing shard"
argument_list|,
name|recoveryId
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|onGoingRecoveries
operator|.
name|failRecovery
argument_list|(
name|recoveryId
argument_list|,
operator|new
name|RecoveryFailedException
argument_list|(
name|recoveryRef
operator|.
name|status
argument_list|()
operator|.
name|state
argument_list|()
argument_list|,
literal|"unexpected error"
argument_list|,
name|e
argument_list|)
argument_list|,
literal|true
comment|// be safe
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"unexpected error during recovery, but recovery id [{}] is finished"
argument_list|,
name|recoveryId
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doRun
specifier|public
name|void
name|doRun
parameter_list|()
block|{
name|RecoveriesCollection
operator|.
name|RecoveryRef
name|recoveryRef
init|=
name|onGoingRecoveries
operator|.
name|getRecovery
argument_list|(
name|recoveryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|recoveryRef
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"not running recovery with id [{}] - can't find it (probably finished)"
argument_list|,
name|recoveryId
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|doRecovery
argument_list|(
name|recoveryRef
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|recoveryRef
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

unit|}
end_unit

