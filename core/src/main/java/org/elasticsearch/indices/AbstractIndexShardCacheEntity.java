begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|request
operator|.
name|ShardRequestCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Abstract base class for the an {@link IndexShard} level {@linkplain IndicesRequestCache.CacheEntity}.  */
end_comment

begin_class
DECL|class|AbstractIndexShardCacheEntity
specifier|abstract
class|class
name|AbstractIndexShardCacheEntity
implements|implements
name|IndicesRequestCache
operator|.
name|CacheEntity
block|{
annotation|@
name|FunctionalInterface
DECL|interface|Loader
specifier|public
interface|interface
name|Loader
block|{
DECL|method|load
name|void
name|load
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|field|loader
specifier|private
specifier|final
name|Loader
name|loader
decl_stmt|;
DECL|field|loadedFromCache
specifier|private
name|boolean
name|loadedFromCache
init|=
literal|true
decl_stmt|;
DECL|method|AbstractIndexShardCacheEntity
specifier|protected
name|AbstractIndexShardCacheEntity
parameter_list|(
name|Loader
name|loader
parameter_list|)
block|{
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
block|}
comment|/**      * When called after passing this through      * {@link IndicesRequestCache#getOrCompute(IndicesRequestCache.CacheEntity, DirectoryReader, BytesReference)} this will return whether      * or not the result was loaded from the cache.      */
DECL|method|loadedFromCache
specifier|public
specifier|final
name|boolean
name|loadedFromCache
parameter_list|()
block|{
return|return
name|loadedFromCache
return|;
block|}
comment|/**      * Get the {@linkplain ShardRequestCache} used to track cache statistics.      */
DECL|method|stats
specifier|protected
specifier|abstract
name|ShardRequestCache
name|stats
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|loadValue
specifier|public
specifier|final
name|IndicesRequestCache
operator|.
name|Value
name|loadValue
parameter_list|()
throws|throws
name|IOException
block|{
comment|/* BytesStreamOutput allows to pass the expected size but by default uses          * BigArrays.PAGE_SIZE_IN_BYTES which is 16k. A common cached result ie.          * a date histogram with 3 buckets is ~100byte so 16k might be very wasteful          * since we don't shrink to the actual size once we are done serializing.          * By passing 512 as the expected size we will resize the byte array in the stream          * slowly until we hit the page size and don't waste too much memory for small query          * results.*/
specifier|final
name|int
name|expectedSizeInBytes
init|=
literal|512
decl_stmt|;
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|(
name|expectedSizeInBytes
argument_list|)
init|)
block|{
name|loader
operator|.
name|load
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// for now, keep the paged data structure, which might have unused bytes to fill a page, but better to keep
comment|// the memory properly paged instead of having varied sized bytes
specifier|final
name|BytesReference
name|reference
init|=
name|out
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|loadedFromCache
operator|=
literal|false
expr_stmt|;
return|return
operator|new
name|IndicesRequestCache
operator|.
name|Value
argument_list|(
name|reference
argument_list|,
name|out
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|onCached
specifier|public
specifier|final
name|void
name|onCached
parameter_list|(
name|IndicesRequestCache
operator|.
name|Key
name|key
parameter_list|,
name|IndicesRequestCache
operator|.
name|Value
name|value
parameter_list|)
block|{
name|stats
argument_list|()
operator|.
name|onCached
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onHit
specifier|public
specifier|final
name|void
name|onHit
parameter_list|()
block|{
name|stats
argument_list|()
operator|.
name|onHit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMiss
specifier|public
specifier|final
name|void
name|onMiss
parameter_list|()
block|{
name|stats
argument_list|()
operator|.
name|onMiss
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onRemoval
specifier|public
specifier|final
name|void
name|onRemoval
parameter_list|(
name|RemovalNotification
argument_list|<
name|IndicesRequestCache
operator|.
name|Key
argument_list|,
name|IndicesRequestCache
operator|.
name|Value
argument_list|>
name|notification
parameter_list|)
block|{
name|stats
argument_list|()
operator|.
name|onRemoval
argument_list|(
name|notification
operator|.
name|getKey
argument_list|()
argument_list|,
name|notification
operator|.
name|getValue
argument_list|()
argument_list|,
name|notification
operator|.
name|getRemovalReason
argument_list|()
operator|==
name|RemovalNotification
operator|.
name|RemovalReason
operator|.
name|EVICTED
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

