begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest.action
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|FailedNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|nodes
operator|.
name|BaseNodeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|nodes
operator|.
name|BaseNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
operator|.
name|Params
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryStringQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|BytesRestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|RestActions
specifier|public
class|class
name|RestActions
block|{
DECL|method|parseVersion
specifier|public
specifier|static
name|long
name|parseVersion
parameter_list|(
name|RestRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|hasParam
argument_list|(
literal|"version"
argument_list|)
condition|)
block|{
return|return
name|request
operator|.
name|paramAsLong
argument_list|(
literal|"version"
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
return|;
block|}
name|String
name|ifMatch
init|=
name|request
operator|.
name|header
argument_list|(
literal|"If-Match"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ifMatch
operator|!=
literal|null
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|ifMatch
argument_list|)
return|;
block|}
return|return
name|Versions
operator|.
name|MATCH_ANY
return|;
block|}
DECL|method|parseVersion
specifier|public
specifier|static
name|long
name|parseVersion
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|long
name|defaultVersion
parameter_list|)
block|{
name|long
name|version
init|=
name|parseVersion
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
operator|(
name|version
operator|==
name|Versions
operator|.
name|MATCH_ANY
operator|)
condition|?
name|defaultVersion
else|:
name|version
return|;
block|}
DECL|method|buildBroadcastShardsHeader
specifier|public
specifier|static
name|void
name|buildBroadcastShardsHeader
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|,
name|BroadcastResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|buildBroadcastShardsHeader
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|response
operator|.
name|getTotalShards
argument_list|()
argument_list|,
name|response
operator|.
name|getSuccessfulShards
argument_list|()
argument_list|,
name|response
operator|.
name|getFailedShards
argument_list|()
argument_list|,
name|response
operator|.
name|getShardFailures
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|buildBroadcastShardsHeader
specifier|public
specifier|static
name|void
name|buildBroadcastShardsHeader
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|,
name|int
name|total
parameter_list|,
name|int
name|successful
parameter_list|,
name|int
name|failed
parameter_list|,
name|ShardOperationFailedException
index|[]
name|shardFailures
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"_shards"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"total"
argument_list|,
name|total
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"successful"
argument_list|,
name|successful
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"failed"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardFailures
operator|!=
literal|null
operator|&&
name|shardFailures
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"failures"
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|group
init|=
name|params
operator|.
name|paramAsBoolean
argument_list|(
literal|"group_shard_failures"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// we group by default
for|for
control|(
name|ShardOperationFailedException
name|shardFailure
range|:
name|group
condition|?
name|ExceptionsHelper
operator|.
name|groupBy
argument_list|(
name|shardFailures
argument_list|)
else|:
name|shardFailures
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|shardFailure
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
comment|/**      * Create the XContent header for any {@link BaseNodesResponse}.      *      * @param builder XContent builder.      * @param params XContent parameters.      * @param response The response containing individual, node-level responses.      * @see #buildNodesHeader(XContentBuilder, Params, int, int, int, List)      */
DECL|method|buildNodesHeader
specifier|public
specifier|static
parameter_list|<
name|NodeResponse
extends|extends
name|BaseNodeResponse
parameter_list|>
name|void
name|buildNodesHeader
parameter_list|(
specifier|final
name|XContentBuilder
name|builder
parameter_list|,
specifier|final
name|Params
name|params
parameter_list|,
specifier|final
name|BaseNodesResponse
argument_list|<
name|NodeResponse
argument_list|>
name|response
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|successful
init|=
name|response
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|int
name|failed
init|=
name|response
operator|.
name|failures
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|buildNodesHeader
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|successful
operator|+
name|failed
argument_list|,
name|successful
argument_list|,
name|failed
argument_list|,
name|response
operator|.
name|failures
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create the XContent header for any {@link BaseNodesResponse}. This looks like:      *<code>      * "_nodes" : {      *   "total" : 3,      *   "successful" : 1,      *   "failed" : 2,      *   "failures" : [ { ... }, { ... } ]      * }      *</code>      * Prefer the overload that properly invokes this method to calling this directly.      *      * @param builder XContent builder.      * @param params XContent parameters.      * @param total The total number of nodes touched.      * @param successful The successful number of responses received.      * @param failed The number of failures (effectively {@code total - successful}).      * @param failures The failure exceptions related to {@code failed}.      * @see #buildNodesHeader(XContentBuilder, Params, BaseNodesResponse)      */
DECL|method|buildNodesHeader
specifier|public
specifier|static
name|void
name|buildNodesHeader
parameter_list|(
specifier|final
name|XContentBuilder
name|builder
parameter_list|,
specifier|final
name|Params
name|params
parameter_list|,
specifier|final
name|int
name|total
parameter_list|,
specifier|final
name|int
name|successful
parameter_list|,
specifier|final
name|int
name|failed
parameter_list|,
specifier|final
name|List
argument_list|<
name|FailedNodeException
argument_list|>
name|failures
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"_nodes"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"total"
argument_list|,
name|total
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"successful"
argument_list|,
name|successful
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"failed"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
if|if
condition|(
name|failures
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"failures"
argument_list|)
expr_stmt|;
for|for
control|(
name|FailedNodeException
name|failure
range|:
name|failures
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|failure
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
comment|/**      * Automatically transform the {@link ToXContent}-compatible, nodes-level {@code response} into a a {@link BytesRestResponse}.      *<p>      * This looks like:      *<code>      * {      *   "_nodes" : { ... },      *   "cluster_name" : "...",      *   ...      * }      *</code>      *      * @param builder XContent builder.      * @param params XContent parameters.      * @param response The nodes-level (plural) response.      * @return Never {@code null}.      * @throws IOException if building the response causes an issue      */
DECL|method|nodesResponse
specifier|public
specifier|static
parameter_list|<
name|NodesResponse
extends|extends
name|BaseNodesResponse
operator|&
name|ToXContent
parameter_list|>
name|BytesRestResponse
name|nodesResponse
parameter_list|(
specifier|final
name|XContentBuilder
name|builder
parameter_list|,
specifier|final
name|Params
name|params
parameter_list|,
specifier|final
name|NodesResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|RestActions
operator|.
name|buildNodesHeader
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"cluster_name"
argument_list|,
name|response
operator|.
name|getClusterName
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
operator|new
name|BytesRestResponse
argument_list|(
name|RestStatus
operator|.
name|OK
argument_list|,
name|builder
argument_list|)
return|;
block|}
DECL|method|urlParamsToQueryBuilder
specifier|public
specifier|static
name|QueryBuilder
name|urlParamsToQueryBuilder
parameter_list|(
name|RestRequest
name|request
parameter_list|)
block|{
name|String
name|queryString
init|=
name|request
operator|.
name|param
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryString
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|QueryStringQueryBuilder
name|queryBuilder
init|=
name|QueryBuilders
operator|.
name|queryStringQuery
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
name|queryBuilder
operator|.
name|defaultField
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"df"
argument_list|)
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|analyzer
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"analyzer"
argument_list|)
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|analyzeWildcard
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"analyze_wildcard"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|lenient
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"lenient"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|defaultOperator
init|=
name|request
operator|.
name|param
argument_list|(
literal|"default_operator"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultOperator
operator|!=
literal|null
condition|)
block|{
name|queryBuilder
operator|.
name|defaultOperator
argument_list|(
name|Operator
operator|.
name|fromString
argument_list|(
name|defaultOperator
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|queryBuilder
return|;
block|}
DECL|method|getQueryContent
specifier|public
specifier|static
name|QueryBuilder
name|getQueryContent
parameter_list|(
name|XContentParser
name|requestParser
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|)
block|{
name|QueryParseContext
name|context
init|=
operator|new
name|QueryParseContext
argument_list|(
name|requestParser
argument_list|,
name|parseFieldMatcher
argument_list|)
decl_stmt|;
return|return
name|context
operator|.
name|parseTopLevelQueryBuilder
argument_list|()
return|;
block|}
comment|/**      * {@code NodesResponseRestBuilderListener} automatically translates any {@link BaseNodesResponse} (multi-node) response that is      * {@link ToXContent}-compatible into a {@link RestResponse} with the necessary header info (e.g., "cluster_name").      *<p>      * This is meant to avoid a slew of anonymous classes doing (or worse):      *<code>      * client.admin().cluster().request(nodesRequest, new RestBuilderListener&lt;NodesResponse&gt;(channel) {      *     public RestResponse buildResponse(NodesResponse response, XContentBuilder builder) throws Exception {      *         return RestActions.nodesResponse(builder, ToXContent.EMPTY_PARAMS, response);      *     }      * });      *</code>      */
DECL|class|NodesResponseRestListener
specifier|public
specifier|static
class|class
name|NodesResponseRestListener
parameter_list|<
name|NodesResponse
extends|extends
name|BaseNodesResponse
operator|&
name|ToXContent
parameter_list|>
extends|extends
name|RestBuilderListener
argument_list|<
name|NodesResponse
argument_list|>
block|{
DECL|method|NodesResponseRestListener
specifier|public
name|NodesResponseRestListener
parameter_list|(
name|RestChannel
name|channel
parameter_list|)
block|{
name|super
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|buildResponse
specifier|public
name|RestResponse
name|buildResponse
parameter_list|(
name|NodesResponse
name|response
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|RestActions
operator|.
name|nodesResponse
argument_list|(
name|builder
argument_list|,
name|channel
operator|.
name|request
argument_list|()
argument_list|,
name|response
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

