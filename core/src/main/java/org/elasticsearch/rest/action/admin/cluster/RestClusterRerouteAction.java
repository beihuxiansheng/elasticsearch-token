begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest.action.admin.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|reroute
operator|.
name|ClusterRerouteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|reroute
operator|.
name|ClusterRerouteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|node
operator|.
name|NodeClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocationCommandRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocationCommands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcherSupplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SettingsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
operator|.
name|ValueType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|BaseRestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|AcknowledgedRestListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|RestClusterRerouteAction
specifier|public
class|class
name|RestClusterRerouteAction
extends|extends
name|BaseRestHandler
block|{
DECL|field|PARSER
specifier|private
specifier|static
specifier|final
name|ObjectParser
argument_list|<
name|ClusterRerouteRequest
argument_list|,
name|ParseContext
argument_list|>
name|PARSER
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"cluster_reroute"
argument_list|)
decl_stmt|;
static|static
block|{
name|PARSER
operator|.
name|declareField
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
lambda|->
name|v
operator|.
name|commands
argument_list|(
name|AllocationCommands
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
name|c
operator|.
name|getParseFieldMatcher
argument_list|()
argument_list|,
name|c
operator|.
name|registry
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"commands"
argument_list|)
argument_list|,
name|ValueType
operator|.
name|OBJECT_ARRAY
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareBoolean
argument_list|(
name|ClusterRerouteRequest
operator|::
name|dryRun
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"dry_run"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|DEFAULT_METRICS
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_METRICS
init|=
name|Strings
operator|.
name|arrayToCommaDelimitedString
argument_list|(
name|EnumSet
operator|.
name|complementOf
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|ClusterState
operator|.
name|Metric
operator|.
name|METADATA
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|settingsFilter
specifier|private
specifier|final
name|SettingsFilter
name|settingsFilter
decl_stmt|;
DECL|field|registry
specifier|private
specifier|final
name|AllocationCommandRegistry
name|registry
decl_stmt|;
annotation|@
name|Inject
DECL|method|RestClusterRerouteAction
specifier|public
name|RestClusterRerouteAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|RestController
name|controller
parameter_list|,
name|SettingsFilter
name|settingsFilter
parameter_list|,
name|AllocationCommandRegistry
name|registry
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|settingsFilter
operator|=
name|settingsFilter
expr_stmt|;
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|POST
argument_list|,
literal|"/_cluster/reroute"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepareRequest
specifier|public
name|RestChannelConsumer
name|prepareRequest
parameter_list|(
specifier|final
name|RestRequest
name|request
parameter_list|,
specifier|final
name|NodeClient
name|client
parameter_list|)
throws|throws
name|IOException
block|{
name|ClusterRerouteRequest
name|clusterRerouteRequest
init|=
name|createRequest
argument_list|(
name|request
argument_list|,
name|registry
argument_list|,
name|parseFieldMatcher
argument_list|)
decl_stmt|;
comment|// by default, return everything but metadata
specifier|final
name|String
name|metric
init|=
name|request
operator|.
name|param
argument_list|(
literal|"metric"
argument_list|)
decl_stmt|;
if|if
condition|(
name|metric
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|params
argument_list|()
operator|.
name|put
argument_list|(
literal|"metric"
argument_list|,
name|DEFAULT_METRICS
argument_list|)
expr_stmt|;
block|}
return|return
name|channel
lambda|->
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|reroute
argument_list|(
name|clusterRerouteRequest
argument_list|,
operator|new
name|AcknowledgedRestListener
argument_list|<
name|ClusterRerouteResponse
argument_list|>
argument_list|(
name|channel
argument_list|)
block|{
block|@Override                 protected void addCustomFields(XContentBuilder builder
operator|,
name|ClusterRerouteResponse
name|response
block|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"state"
argument_list|)
expr_stmt|;
name|settingsFilter
operator|.
name|addFilterSettingParams
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|response
operator|.
name|getState
argument_list|()
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|clusterRerouteRequest
operator|.
name|explain
argument_list|()
condition|)
block|{
assert|assert
name|response
operator|.
name|getExplanations
argument_list|()
operator|!=
literal|null
assert|;
name|response
operator|.
name|getExplanations
argument_list|()
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_decl_stmt
unit|}      private
DECL|field|RESPONSE_PARAMS
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|RESPONSE_PARAMS
decl_stmt|;
end_decl_stmt

begin_static
static|static
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|responseParams
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|responseParams
operator|.
name|add
argument_list|(
literal|"metric"
argument_list|)
expr_stmt|;
name|responseParams
operator|.
name|addAll
argument_list|(
name|Settings
operator|.
name|FORMAT_PARAMS
argument_list|)
expr_stmt|;
name|RESPONSE_PARAMS
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|responseParams
argument_list|)
expr_stmt|;
block|}
end_static

begin_function
annotation|@
name|Override
DECL|method|responseParams
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|responseParams
parameter_list|()
block|{
return|return
name|RESPONSE_PARAMS
return|;
block|}
end_function

begin_function
DECL|method|createRequest
specifier|public
specifier|static
name|ClusterRerouteRequest
name|createRequest
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|AllocationCommandRegistry
name|registry
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|)
throws|throws
name|IOException
block|{
name|ClusterRerouteRequest
name|clusterRerouteRequest
init|=
name|Requests
operator|.
name|clusterRerouteRequest
argument_list|()
decl_stmt|;
name|clusterRerouteRequest
operator|.
name|dryRun
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"dry_run"
argument_list|,
name|clusterRerouteRequest
operator|.
name|dryRun
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clusterRerouteRequest
operator|.
name|explain
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"explain"
argument_list|,
name|clusterRerouteRequest
operator|.
name|explain
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clusterRerouteRequest
operator|.
name|timeout
argument_list|(
name|request
operator|.
name|paramAsTime
argument_list|(
literal|"timeout"
argument_list|,
name|clusterRerouteRequest
operator|.
name|timeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clusterRerouteRequest
operator|.
name|setRetryFailed
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"retry_failed"
argument_list|,
name|clusterRerouteRequest
operator|.
name|isRetryFailed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clusterRerouteRequest
operator|.
name|masterNodeTimeout
argument_list|(
name|request
operator|.
name|paramAsTime
argument_list|(
literal|"master_timeout"
argument_list|,
name|clusterRerouteRequest
operator|.
name|masterNodeTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasContent
argument_list|()
condition|)
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|request
operator|.
name|content
argument_list|()
argument_list|)
init|)
block|{
name|PARSER
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|clusterRerouteRequest
argument_list|,
operator|new
name|ParseContext
argument_list|(
name|registry
argument_list|,
name|parseFieldMatcher
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|clusterRerouteRequest
return|;
block|}
end_function

begin_class
DECL|class|ParseContext
specifier|private
specifier|static
class|class
name|ParseContext
implements|implements
name|ParseFieldMatcherSupplier
block|{
DECL|field|registry
specifier|private
specifier|final
name|AllocationCommandRegistry
name|registry
decl_stmt|;
DECL|field|parseFieldMatcher
specifier|private
specifier|final
name|ParseFieldMatcher
name|parseFieldMatcher
decl_stmt|;
DECL|method|ParseContext
specifier|private
name|ParseContext
parameter_list|(
name|AllocationCommandRegistry
name|registry
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|)
block|{
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
name|this
operator|.
name|parseFieldMatcher
operator|=
name|parseFieldMatcher
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getParseFieldMatcher
specifier|public
name|ParseFieldMatcher
name|getParseFieldMatcher
parameter_list|()
block|{
return|return
name|parseFieldMatcher
return|;
block|}
block|}
end_class

unit|}
end_unit

