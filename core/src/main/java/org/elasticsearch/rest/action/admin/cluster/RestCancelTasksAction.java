begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest.action.admin.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|cancel
operator|.
name|CancelTasksRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|node
operator|.
name|NodeClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|BaseRestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
operator|.
name|Method
operator|.
name|POST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|RestListTasksAction
operator|.
name|listTasksResponseListener
import|;
end_import

begin_class
DECL|class|RestCancelTasksAction
specifier|public
class|class
name|RestCancelTasksAction
extends|extends
name|BaseRestHandler
block|{
DECL|field|nodesInCluster
specifier|private
specifier|final
name|Supplier
argument_list|<
name|DiscoveryNodes
argument_list|>
name|nodesInCluster
decl_stmt|;
DECL|method|RestCancelTasksAction
specifier|public
name|RestCancelTasksAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|RestController
name|controller
parameter_list|,
name|Supplier
argument_list|<
name|DiscoveryNodes
argument_list|>
name|nodesInCluster
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodesInCluster
operator|=
name|nodesInCluster
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|POST
argument_list|,
literal|"/_tasks/_cancel"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|POST
argument_list|,
literal|"/_tasks/{task_id}/_cancel"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepareRequest
specifier|public
name|RestChannelConsumer
name|prepareRequest
parameter_list|(
specifier|final
name|RestRequest
name|request
parameter_list|,
specifier|final
name|NodeClient
name|client
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
index|[]
name|nodesIds
init|=
name|Strings
operator|.
name|splitStringByCommaToArray
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"nodes"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|TaskId
name|taskId
init|=
operator|new
name|TaskId
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"task_id"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|actions
init|=
name|Strings
operator|.
name|splitStringByCommaToArray
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"actions"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|TaskId
name|parentTaskId
init|=
operator|new
name|TaskId
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"parent_task_id"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|groupBy
init|=
name|request
operator|.
name|param
argument_list|(
literal|"group_by"
argument_list|,
literal|"nodes"
argument_list|)
decl_stmt|;
name|CancelTasksRequest
name|cancelTasksRequest
init|=
operator|new
name|CancelTasksRequest
argument_list|()
decl_stmt|;
name|cancelTasksRequest
operator|.
name|setTaskId
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
name|cancelTasksRequest
operator|.
name|setNodes
argument_list|(
name|nodesIds
argument_list|)
expr_stmt|;
name|cancelTasksRequest
operator|.
name|setActions
argument_list|(
name|actions
argument_list|)
expr_stmt|;
name|cancelTasksRequest
operator|.
name|setParentTaskId
argument_list|(
name|parentTaskId
argument_list|)
expr_stmt|;
return|return
name|channel
lambda|->
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|cancelTasks
argument_list|(
name|cancelTasksRequest
argument_list|,
name|listTasksResponseListener
argument_list|(
name|nodesInCluster
argument_list|,
name|groupBy
argument_list|,
name|channel
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|canTripCircuitBreaker
specifier|public
name|boolean
name|canTripCircuitBreaker
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

