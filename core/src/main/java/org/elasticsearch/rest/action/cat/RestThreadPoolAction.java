begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest.action.cat
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|cat
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodesInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodesInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|stats
operator|.
name|NodeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|stats
operator|.
name|NodesStatsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|stats
operator|.
name|NodesStatsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|node
operator|.
name|NodeClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|RestActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|RestResponseListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPoolStats
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
operator|.
name|Method
operator|.
name|GET
import|;
end_import

begin_class
DECL|class|RestThreadPoolAction
specifier|public
class|class
name|RestThreadPoolAction
extends|extends
name|AbstractCatAction
block|{
DECL|method|RestThreadPoolAction
specifier|public
name|RestThreadPoolAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|RestController
name|controller
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|GET
argument_list|,
literal|"/_cat/thread_pool"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|GET
argument_list|,
literal|"/_cat/thread_pool/{thread_pool_patterns}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|documentation
specifier|protected
name|void
name|documentation
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"/_cat/thread_pool\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"/_cat/thread_pool/{thread_pools}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doCatRequest
specifier|public
name|RestChannelConsumer
name|doCatRequest
parameter_list|(
specifier|final
name|RestRequest
name|request
parameter_list|,
specifier|final
name|NodeClient
name|client
parameter_list|)
block|{
specifier|final
name|ClusterStateRequest
name|clusterStateRequest
init|=
operator|new
name|ClusterStateRequest
argument_list|()
decl_stmt|;
name|clusterStateRequest
operator|.
name|clear
argument_list|()
operator|.
name|nodes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|clusterStateRequest
operator|.
name|local
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"local"
argument_list|,
name|clusterStateRequest
operator|.
name|local
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clusterStateRequest
operator|.
name|masterNodeTimeout
argument_list|(
name|request
operator|.
name|paramAsTime
argument_list|(
literal|"master_timeout"
argument_list|,
name|clusterStateRequest
operator|.
name|masterNodeTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|channel
lambda|->
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|state
argument_list|(
name|clusterStateRequest
argument_list|,
operator|new
name|RestActionListener
argument_list|<
name|ClusterStateResponse
argument_list|>
argument_list|(
name|channel
argument_list|)
block|{
block|@Override             public void processResponse(final ClusterStateResponse clusterStateResponse
block|)
block|{
name|NodesInfoRequest
name|nodesInfoRequest
init|=
operator|new
name|NodesInfoRequest
argument_list|()
decl_stmt|;
name|nodesInfoRequest
operator|.
name|clear
argument_list|()
operator|.
name|process
argument_list|(
literal|true
argument_list|)
operator|.
name|threadPool
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|nodesInfo
argument_list|(
name|nodesInfoRequest
argument_list|,
operator|new
name|RestActionListener
argument_list|<
name|NodesInfoResponse
argument_list|>
argument_list|(
name|channel
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|processResponse
parameter_list|(
specifier|final
name|NodesInfoResponse
name|nodesInfoResponse
parameter_list|)
block|{
name|NodesStatsRequest
name|nodesStatsRequest
init|=
operator|new
name|NodesStatsRequest
argument_list|()
decl_stmt|;
name|nodesStatsRequest
operator|.
name|clear
argument_list|()
operator|.
name|threadPool
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|nodesStats
argument_list|(
name|nodesStatsRequest
argument_list|,
operator|new
name|RestResponseListener
argument_list|<
name|NodesStatsResponse
argument_list|>
argument_list|(
name|channel
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RestResponse
name|buildResponse
parameter_list|(
name|NodesStatsResponse
name|nodesStatsResponse
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|RestTable
operator|.
name|buildResponse
argument_list|(
name|buildTable
argument_list|(
name|request
argument_list|,
name|clusterStateResponse
argument_list|,
name|nodesInfoResponse
argument_list|,
name|nodesStatsResponse
argument_list|)
argument_list|,
name|channel
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_decl_stmt
unit|}      private
DECL|field|RESPONSE_PARAMS
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|RESPONSE_PARAMS
decl_stmt|;
end_decl_stmt

begin_static
static|static
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|responseParams
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|responseParams
operator|.
name|addAll
argument_list|(
name|AbstractCatAction
operator|.
name|RESPONSE_PARAMS
argument_list|)
expr_stmt|;
name|responseParams
operator|.
name|add
argument_list|(
literal|"thread_pool_patterns"
argument_list|)
expr_stmt|;
name|RESPONSE_PARAMS
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|responseParams
argument_list|)
expr_stmt|;
block|}
end_static

begin_function
annotation|@
name|Override
DECL|method|responseParams
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|responseParams
parameter_list|()
block|{
return|return
name|RESPONSE_PARAMS
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getTableWithHeader
specifier|protected
name|Table
name|getTableWithHeader
parameter_list|(
specifier|final
name|RestRequest
name|request
parameter_list|)
block|{
specifier|final
name|Table
name|table
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|table
operator|.
name|startHeaders
argument_list|()
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"node_name"
argument_list|,
literal|"default:true;alias:nn;desc:node name"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"node_id"
argument_list|,
literal|"default:false;alias:id;desc:persistent node id"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"ephemeral_node_id"
argument_list|,
literal|"default:false;alias:eid;desc:ephemeral node id"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"pid"
argument_list|,
literal|"default:false;alias:p;desc:process id"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"host"
argument_list|,
literal|"default:false;alias:h;desc:host name"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"ip"
argument_list|,
literal|"default:false;alias:i;desc:ip address"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"port"
argument_list|,
literal|"default:false;alias:po;desc:bound transport port"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"name"
argument_list|,
literal|"default:true;alias:n;desc:thread pool name"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"type"
argument_list|,
literal|"alias:t;default:false;desc:thread pool type"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"active"
argument_list|,
literal|"alias:a;default:true;text-align:right;desc:number of active threads"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"size"
argument_list|,
literal|"alias:s;default:false;text-align:right;desc:number of threads"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"queue"
argument_list|,
literal|"alias:q;default:true;text-align:right;desc:number of tasks currently in queue"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"queue_size"
argument_list|,
literal|"alias:qs;default:false;text-align:right;desc:maximum number of tasks permitted in queue"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"rejected"
argument_list|,
literal|"alias:r;default:true;text-align:right;desc:number of rejected tasks"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"largest"
argument_list|,
literal|"alias:l;default:false;text-align:right;desc:highest number of seen active threads"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"completed"
argument_list|,
literal|"alias:c;default:false;text-align:right;desc:number of completed tasks"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"min"
argument_list|,
literal|"alias:mi;default:false;text-align:right;desc:minimum number of threads"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"max"
argument_list|,
literal|"alias:ma;default:false;text-align:right;desc:maximum number of threads"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"keep_alive"
argument_list|,
literal|"alias:ka;default:false;text-align:right;desc:thread keep alive time"
argument_list|)
expr_stmt|;
name|table
operator|.
name|endHeaders
argument_list|()
expr_stmt|;
return|return
name|table
return|;
block|}
end_function

begin_function
DECL|method|buildTable
specifier|private
name|Table
name|buildTable
parameter_list|(
name|RestRequest
name|req
parameter_list|,
name|ClusterStateResponse
name|state
parameter_list|,
name|NodesInfoResponse
name|nodesInfo
parameter_list|,
name|NodesStatsResponse
name|nodesStats
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|threadPools
init|=
name|req
operator|.
name|paramAsStringArray
argument_list|(
literal|"thread_pool_patterns"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
decl_stmt|;
specifier|final
name|DiscoveryNodes
name|nodes
init|=
name|state
operator|.
name|getState
argument_list|()
operator|.
name|nodes
argument_list|()
decl_stmt|;
specifier|final
name|Table
name|table
init|=
name|getTableWithHeader
argument_list|(
name|req
argument_list|)
decl_stmt|;
comment|// collect all thread pool names that we see across the nodes
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|candidates
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|NodeStats
name|nodeStats
range|:
name|nodesStats
operator|.
name|getNodes
argument_list|()
control|)
block|{
for|for
control|(
specifier|final
name|ThreadPoolStats
operator|.
name|Stats
name|threadPoolStats
range|:
name|nodeStats
operator|.
name|getThreadPool
argument_list|()
control|)
block|{
name|candidates
operator|.
name|add
argument_list|(
name|threadPoolStats
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// collect all thread pool names that match the specified thread pool patterns
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|included
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|candidate
range|:
name|candidates
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|threadPools
argument_list|,
name|candidate
argument_list|)
condition|)
block|{
name|included
operator|.
name|add
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|DiscoveryNode
name|node
range|:
name|nodes
control|)
block|{
specifier|final
name|NodeInfo
name|info
init|=
name|nodesInfo
operator|.
name|getNodesMap
argument_list|()
operator|.
name|get
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|NodeStats
name|stats
init|=
name|nodesStats
operator|.
name|getNodesMap
argument_list|()
operator|.
name|get
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ThreadPoolStats
operator|.
name|Stats
argument_list|>
name|poolThreadStats
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ThreadPool
operator|.
name|Info
argument_list|>
name|poolThreadInfo
decl_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
condition|)
block|{
name|poolThreadStats
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|poolThreadInfo
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// we use a sorted map to ensure that thread pools are sorted by name
name|poolThreadStats
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
name|poolThreadInfo
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|ThreadPoolStats
name|threadPoolStats
init|=
name|stats
operator|.
name|getThreadPool
argument_list|()
decl_stmt|;
for|for
control|(
name|ThreadPoolStats
operator|.
name|Stats
name|threadPoolStat
range|:
name|threadPoolStats
control|)
block|{
name|poolThreadStats
operator|.
name|put
argument_list|(
name|threadPoolStat
operator|.
name|getName
argument_list|()
argument_list|,
name|threadPoolStat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ThreadPool
operator|.
name|Info
name|threadPoolInfo
range|:
name|info
operator|.
name|getThreadPool
argument_list|()
control|)
block|{
name|poolThreadInfo
operator|.
name|put
argument_list|(
name|threadPoolInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|threadPoolInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ThreadPoolStats
operator|.
name|Stats
argument_list|>
name|entry
range|:
name|poolThreadStats
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|included
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
name|table
operator|.
name|startRow
argument_list|()
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|node
operator|.
name|getEphemeralId
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|info
operator|==
literal|null
condition|?
literal|null
else|:
name|info
operator|.
name|getProcess
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|node
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|node
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|node
operator|.
name|getAddress
argument_list|()
operator|.
name|address
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ThreadPoolStats
operator|.
name|Stats
name|poolStats
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|ThreadPool
operator|.
name|Info
name|poolInfo
init|=
name|poolThreadInfo
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|maxQueueSize
init|=
literal|null
decl_stmt|;
name|String
name|keepAlive
init|=
literal|null
decl_stmt|;
name|Integer
name|minThreads
init|=
literal|null
decl_stmt|;
name|Integer
name|maxThreads
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|poolInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|poolInfo
operator|.
name|getQueueSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|maxQueueSize
operator|=
name|poolInfo
operator|.
name|getQueueSize
argument_list|()
operator|.
name|singles
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|poolInfo
operator|.
name|getKeepAlive
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keepAlive
operator|=
name|poolInfo
operator|.
name|getKeepAlive
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|poolInfo
operator|.
name|getMin
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|minThreads
operator|=
name|poolInfo
operator|.
name|getMin
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|poolInfo
operator|.
name|getMax
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|maxThreads
operator|=
name|poolInfo
operator|.
name|getMax
argument_list|()
expr_stmt|;
block|}
block|}
name|table
operator|.
name|addCell
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|poolInfo
operator|==
literal|null
condition|?
literal|null
else|:
name|poolInfo
operator|.
name|getThreadPoolType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|poolStats
operator|==
literal|null
condition|?
literal|null
else|:
name|poolStats
operator|.
name|getActive
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|poolStats
operator|==
literal|null
condition|?
literal|null
else|:
name|poolStats
operator|.
name|getThreads
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|poolStats
operator|==
literal|null
condition|?
literal|null
else|:
name|poolStats
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|maxQueueSize
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|maxQueueSize
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|poolStats
operator|==
literal|null
condition|?
literal|null
else|:
name|poolStats
operator|.
name|getRejected
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|poolStats
operator|==
literal|null
condition|?
literal|null
else|:
name|poolStats
operator|.
name|getLargest
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|poolStats
operator|==
literal|null
condition|?
literal|null
else|:
name|poolStats
operator|.
name|getCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|minThreads
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|maxThreads
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|keepAlive
argument_list|)
expr_stmt|;
name|table
operator|.
name|endRow
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|table
return|;
block|}
end_function

unit|}
end_unit

