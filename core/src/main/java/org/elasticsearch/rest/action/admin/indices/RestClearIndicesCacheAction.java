begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest.action.admin.indices
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|cache
operator|.
name|clear
operator|.
name|ClearIndicesCacheRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|cache
operator|.
name|clear
operator|.
name|ClearIndicesCacheResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|node
operator|.
name|NodeClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|BaseRestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|BytesRestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|RestBuilderListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
operator|.
name|Method
operator|.
name|GET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
operator|.
name|Method
operator|.
name|POST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
operator|.
name|OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|RestActions
operator|.
name|buildBroadcastShardsHeader
import|;
end_import

begin_class
DECL|class|RestClearIndicesCacheAction
specifier|public
class|class
name|RestClearIndicesCacheAction
extends|extends
name|BaseRestHandler
block|{
DECL|method|RestClearIndicesCacheAction
specifier|public
name|RestClearIndicesCacheAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|RestController
name|controller
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|POST
argument_list|,
literal|"/_cache/clear"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|POST
argument_list|,
literal|"/{index}/_cache/clear"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|GET
argument_list|,
literal|"/_cache/clear"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|GET
argument_list|,
literal|"/{index}/_cache/clear"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepareRequest
specifier|public
name|RestChannelConsumer
name|prepareRequest
parameter_list|(
specifier|final
name|RestRequest
name|request
parameter_list|,
specifier|final
name|NodeClient
name|client
parameter_list|)
throws|throws
name|IOException
block|{
name|ClearIndicesCacheRequest
name|clearIndicesCacheRequest
init|=
operator|new
name|ClearIndicesCacheRequest
argument_list|(
name|Strings
operator|.
name|splitStringByCommaToArray
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"index"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|clearIndicesCacheRequest
operator|.
name|indicesOptions
argument_list|(
name|IndicesOptions
operator|.
name|fromRequest
argument_list|(
name|request
argument_list|,
name|clearIndicesCacheRequest
operator|.
name|indicesOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fromRequest
argument_list|(
name|request
argument_list|,
name|clearIndicesCacheRequest
argument_list|)
expr_stmt|;
return|return
name|channel
lambda|->
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|clearCache
argument_list|(
name|clearIndicesCacheRequest
argument_list|,
operator|new
name|RestBuilderListener
argument_list|<
name|ClearIndicesCacheResponse
argument_list|>
argument_list|(
name|channel
argument_list|)
block|{
block|@Override             public RestResponse buildResponse(ClearIndicesCacheResponse response
operator|,
name|XContentBuilder
name|builder
block|)
throws|throws
name|Exception
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|buildBroadcastShardsHeader
argument_list|(
name|builder
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
operator|new
name|BytesRestResponse
argument_list|(
name|OK
argument_list|,
name|builder
argument_list|)
return|;
block|}
block|}
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      @
name|Override
DECL|method|canTripCircuitBreaker
specifier|public
name|boolean
name|canTripCircuitBreaker
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
end_function

begin_function
DECL|method|fromRequest
specifier|public
specifier|static
name|ClearIndicesCacheRequest
name|fromRequest
parameter_list|(
specifier|final
name|RestRequest
name|request
parameter_list|,
name|ClearIndicesCacheRequest
name|clearIndicesCacheRequest
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|request
operator|.
name|params
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Fields
operator|.
name|QUERY
operator|.
name|match
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|clearIndicesCacheRequest
operator|.
name|queryCache
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|clearIndicesCacheRequest
operator|.
name|queryCache
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Fields
operator|.
name|REQUEST_CACHE
operator|.
name|match
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|clearIndicesCacheRequest
operator|.
name|requestCache
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|clearIndicesCacheRequest
operator|.
name|requestCache
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Fields
operator|.
name|FIELD_DATA
operator|.
name|match
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|clearIndicesCacheRequest
operator|.
name|fieldDataCache
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|clearIndicesCacheRequest
operator|.
name|fieldDataCache
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Fields
operator|.
name|RECYCLER
operator|.
name|match
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|clearIndicesCacheRequest
operator|.
name|recycler
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|clearIndicesCacheRequest
operator|.
name|recycler
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Fields
operator|.
name|FIELDS
operator|.
name|match
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|clearIndicesCacheRequest
operator|.
name|fields
argument_list|(
name|request
operator|.
name|paramAsStringArray
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|clearIndicesCacheRequest
operator|.
name|fields
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|clearIndicesCacheRequest
return|;
block|}
end_function

begin_class
DECL|class|Fields
specifier|public
specifier|static
class|class
name|Fields
block|{
DECL|field|QUERY
specifier|public
specifier|static
specifier|final
name|ParseField
name|QUERY
init|=
operator|new
name|ParseField
argument_list|(
literal|"query"
argument_list|,
literal|"filter"
argument_list|,
literal|"filter_cache"
argument_list|)
decl_stmt|;
DECL|field|REQUEST_CACHE
specifier|public
specifier|static
specifier|final
name|ParseField
name|REQUEST_CACHE
init|=
operator|new
name|ParseField
argument_list|(
literal|"request_cache"
argument_list|)
decl_stmt|;
DECL|field|FIELD_DATA
specifier|public
specifier|static
specifier|final
name|ParseField
name|FIELD_DATA
init|=
operator|new
name|ParseField
argument_list|(
literal|"field_data"
argument_list|,
literal|"fielddata"
argument_list|)
decl_stmt|;
DECL|field|RECYCLER
specifier|public
specifier|static
specifier|final
name|ParseField
name|RECYCLER
init|=
operator|new
name|ParseField
argument_list|(
literal|"recycler"
argument_list|)
decl_stmt|;
DECL|field|FIELDS
specifier|public
specifier|static
specifier|final
name|ParseField
name|FIELDS
init|=
operator|new
name|ParseField
argument_list|(
literal|"fields"
argument_list|)
decl_stmt|;
block|}
end_class

unit|}
end_unit

