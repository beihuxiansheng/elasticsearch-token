begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SetOnce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Booleans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|CheckedConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|DeprecationLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
operator|.
name|parseBytesSizeValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|parseTimeValue
import|;
end_import

begin_class
DECL|class|RestRequest
specifier|public
specifier|abstract
class|class
name|RestRequest
implements|implements
name|ToXContent
operator|.
name|Params
block|{
DECL|field|DEPRECATION_LOGGER
specifier|private
specifier|static
specifier|final
name|DeprecationLogger
name|DEPRECATION_LOGGER
init|=
operator|new
name|DeprecationLogger
argument_list|(
name|Loggers
operator|.
name|getLogger
argument_list|(
name|RestRequest
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
comment|// tchar pattern as defined by RFC7230 section 3.2.6
DECL|field|TCHAR_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|TCHAR_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[a-zA-z0-9!#$%&'*+\\-.\\^_`|~]+"
argument_list|)
decl_stmt|;
DECL|field|xContentRegistry
specifier|private
specifier|final
name|NamedXContentRegistry
name|xContentRegistry
decl_stmt|;
DECL|field|params
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
decl_stmt|;
DECL|field|headers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
decl_stmt|;
DECL|field|rawPath
specifier|private
specifier|final
name|String
name|rawPath
decl_stmt|;
DECL|field|consumedParams
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|consumedParams
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|xContentType
specifier|private
specifier|final
name|SetOnce
argument_list|<
name|XContentType
argument_list|>
name|xContentType
init|=
operator|new
name|SetOnce
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Creates a new RestRequest      * @param xContentRegistry the xContentRegistry to use when parsing XContent      * @param uri the URI of the request that potentially contains request parameters      * @param headers a map of the headers. This map should implement a Case-Insensitive hashing for keys as HTTP header names are case      *                insensitive      */
DECL|method|RestRequest
specifier|public
name|RestRequest
parameter_list|(
name|NamedXContentRegistry
name|xContentRegistry
parameter_list|,
name|String
name|uri
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|)
block|{
name|this
operator|.
name|xContentRegistry
operator|=
name|xContentRegistry
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|pathEndPos
init|=
name|uri
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathEndPos
operator|<
literal|0
condition|)
block|{
name|this
operator|.
name|rawPath
operator|=
name|uri
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|rawPath
operator|=
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pathEndPos
argument_list|)
expr_stmt|;
name|RestUtils
operator|.
name|decodeQueryString
argument_list|(
name|uri
argument_list|,
name|pathEndPos
operator|+
literal|1
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|this
operator|.
name|headers
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|headers
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|contentType
init|=
name|getAllHeaderValues
argument_list|(
literal|"Content-Type"
argument_list|)
decl_stmt|;
specifier|final
name|XContentType
name|xContentType
init|=
name|parseContentType
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
if|if
condition|(
name|xContentType
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|xContentType
operator|.
name|set
argument_list|(
name|xContentType
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a new RestRequest      * @param xContentRegistry the xContentRegistry to use when parsing XContent      * @param params the parameters of the request      * @param path the path of the request. This should not contain request parameters      * @param headers a map of the headers. This map should implement a Case-Insensitive hashing for keys as HTTP header names are case      *                insensitive      */
DECL|method|RestRequest
specifier|public
name|RestRequest
parameter_list|(
name|NamedXContentRegistry
name|xContentRegistry
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|String
name|path
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|)
block|{
name|this
operator|.
name|xContentRegistry
operator|=
name|xContentRegistry
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|this
operator|.
name|rawPath
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|headers
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|headers
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|contentType
init|=
name|getAllHeaderValues
argument_list|(
literal|"Content-Type"
argument_list|)
decl_stmt|;
specifier|final
name|XContentType
name|xContentType
init|=
name|parseContentType
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
if|if
condition|(
name|xContentType
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|xContentType
operator|.
name|set
argument_list|(
name|xContentType
argument_list|)
expr_stmt|;
block|}
block|}
DECL|enum|Method
specifier|public
enum|enum
name|Method
block|{
DECL|enum constant|GET
DECL|enum constant|POST
DECL|enum constant|PUT
DECL|enum constant|DELETE
DECL|enum constant|OPTIONS
DECL|enum constant|HEAD
name|GET
block|,
name|POST
block|,
name|PUT
block|,
name|DELETE
block|,
name|OPTIONS
block|,
name|HEAD
block|}
DECL|method|method
specifier|public
specifier|abstract
name|Method
name|method
parameter_list|()
function_decl|;
comment|/**      * The uri of the rest request, with the query string.      */
DECL|method|uri
specifier|public
specifier|abstract
name|String
name|uri
parameter_list|()
function_decl|;
comment|/**      * The non decoded, raw path provided.      */
DECL|method|rawPath
specifier|public
name|String
name|rawPath
parameter_list|()
block|{
return|return
name|rawPath
return|;
block|}
comment|/**      * The path part of the URI (without the query string), decoded.      */
DECL|method|path
specifier|public
specifier|final
name|String
name|path
parameter_list|()
block|{
return|return
name|RestUtils
operator|.
name|decodeComponent
argument_list|(
name|rawPath
argument_list|()
argument_list|)
return|;
block|}
DECL|method|hasContent
specifier|public
specifier|abstract
name|boolean
name|hasContent
parameter_list|()
function_decl|;
DECL|method|content
specifier|public
specifier|abstract
name|BytesReference
name|content
parameter_list|()
function_decl|;
comment|/**      * Get the value of the header or {@code null} if not found. This method only retrieves the first header value if multiple values are      * sent. Use of {@link #getAllHeaderValues(String)} should be preferred      */
DECL|method|header
specifier|public
specifier|final
name|String
name|header
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|headers
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Get all values for the header or {@code null} if the header was not found      */
DECL|method|getAllHeaderValues
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|getAllHeaderValues
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|headers
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|values
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Get all of the headers and values associated with the headers. Modifications of this map are not supported.      */
DECL|method|getHeaders
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getHeaders
parameter_list|()
block|{
return|return
name|headers
return|;
block|}
comment|/**      * The {@link XContentType} that was parsed from the {@code Content-Type} header. This value will be {@code null} in the case of      * a request without a valid {@code Content-Type} header, a request without content ({@link #hasContent()}, or a plain text request      */
annotation|@
name|Nullable
DECL|method|getXContentType
specifier|public
specifier|final
name|XContentType
name|getXContentType
parameter_list|()
block|{
return|return
name|xContentType
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Sets the {@link XContentType}      */
DECL|method|setXContentType
specifier|final
name|void
name|setXContentType
parameter_list|(
name|XContentType
name|xContentType
parameter_list|)
block|{
name|this
operator|.
name|xContentType
operator|.
name|set
argument_list|(
name|xContentType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nullable
DECL|method|getRemoteAddress
specifier|public
name|SocketAddress
name|getRemoteAddress
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Nullable
DECL|method|getLocalAddress
specifier|public
name|SocketAddress
name|getLocalAddress
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|hasParam
specifier|public
specifier|final
name|boolean
name|hasParam
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|params
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|param
specifier|public
specifier|final
name|String
name|param
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|consumedParams
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|param
specifier|public
specifier|final
name|String
name|param
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|consumedParams
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
return|return
name|value
return|;
block|}
DECL|method|params
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|()
block|{
return|return
name|params
return|;
block|}
comment|/**      * Returns a list of parameters that have been consumed. This method returns a copy, callers      * are free to modify the returned list.      *      * @return the list of currently consumed parameters.      */
DECL|method|consumedParams
name|List
argument_list|<
name|String
argument_list|>
name|consumedParams
parameter_list|()
block|{
return|return
name|consumedParams
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns a list of parameters that have not yet been consumed. This method returns a copy,      * callers are free to modify the returned list.      *      * @return the list of currently unconsumed parameters.      */
DECL|method|unconsumedParams
name|List
argument_list|<
name|String
argument_list|>
name|unconsumedParams
parameter_list|()
block|{
return|return
name|params
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
operator|!
name|consumedParams
operator|.
name|contains
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|paramAsFloat
specifier|public
name|float
name|paramAsFloat
parameter_list|(
name|String
name|key
parameter_list|,
name|float
name|defaultValue
parameter_list|)
block|{
name|String
name|sValue
init|=
name|param
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|sValue
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
try|try
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|sValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse float parameter ["
operator|+
name|key
operator|+
literal|"] with value ["
operator|+
name|sValue
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|paramAsInt
specifier|public
name|int
name|paramAsInt
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|String
name|sValue
init|=
name|param
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|sValue
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|sValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse int parameter ["
operator|+
name|key
operator|+
literal|"] with value ["
operator|+
name|sValue
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|paramAsLong
specifier|public
name|long
name|paramAsLong
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
name|String
name|sValue
init|=
name|param
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|sValue
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|sValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse long parameter ["
operator|+
name|key
operator|+
literal|"] with value ["
operator|+
name|sValue
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|paramAsBoolean
specifier|public
name|boolean
name|paramAsBoolean
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
name|String
name|rawParam
init|=
name|param
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// Treat empty string as true because that allows the presence of the url parameter to mean "turn this on"
if|if
condition|(
name|rawParam
operator|!=
literal|null
operator|&&
name|rawParam
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|Booleans
operator|.
name|parseBoolean
argument_list|(
name|rawParam
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|paramAsBoolean
specifier|public
name|Boolean
name|paramAsBoolean
parameter_list|(
name|String
name|key
parameter_list|,
name|Boolean
name|defaultValue
parameter_list|)
block|{
return|return
name|Booleans
operator|.
name|parseBoolean
argument_list|(
name|param
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
DECL|method|paramAsTime
specifier|public
name|TimeValue
name|paramAsTime
parameter_list|(
name|String
name|key
parameter_list|,
name|TimeValue
name|defaultValue
parameter_list|)
block|{
return|return
name|parseTimeValue
argument_list|(
name|param
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultValue
argument_list|,
name|key
argument_list|)
return|;
block|}
DECL|method|paramAsSize
specifier|public
name|ByteSizeValue
name|paramAsSize
parameter_list|(
name|String
name|key
parameter_list|,
name|ByteSizeValue
name|defaultValue
parameter_list|)
block|{
return|return
name|parseBytesSizeValue
argument_list|(
name|param
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultValue
argument_list|,
name|key
argument_list|)
return|;
block|}
DECL|method|paramAsStringArray
specifier|public
name|String
index|[]
name|paramAsStringArray
parameter_list|(
name|String
name|key
parameter_list|,
name|String
index|[]
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|param
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
return|return
name|Strings
operator|.
name|splitStringByCommaToArray
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|paramAsStringArrayOrEmptyIfAll
specifier|public
name|String
index|[]
name|paramAsStringArrayOrEmptyIfAll
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
index|[]
name|params
init|=
name|paramAsStringArray
argument_list|(
name|key
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isAllOrWildcard
argument_list|(
name|params
argument_list|)
condition|)
block|{
return|return
name|Strings
operator|.
name|EMPTY_ARRAY
return|;
block|}
return|return
name|params
return|;
block|}
comment|/**      * Get the {@link NamedXContentRegistry} that should be used to create parsers from this request.      */
DECL|method|getXContentRegistry
specifier|public
name|NamedXContentRegistry
name|getXContentRegistry
parameter_list|()
block|{
return|return
name|xContentRegistry
return|;
block|}
comment|/**      * A parser for the contents of this request if there is a body, otherwise throws an {@link ElasticsearchParseException}. Use      * {@link #applyContentParser(CheckedConsumer)} if you want to gracefully handle when the request doesn't have any contents. Use      * {@link #contentOrSourceParamParser()} for requests that support specifying the request body in the {@code source} param.      */
DECL|method|contentParser
specifier|public
specifier|final
name|XContentParser
name|contentParser
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesReference
name|content
init|=
name|content
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"Body required"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|xContentType
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unknown content type"
argument_list|)
throw|;
block|}
return|return
name|xContentType
operator|.
name|get
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|xContentRegistry
argument_list|,
name|content
argument_list|)
return|;
block|}
comment|/**      * If there is any content then call {@code applyParser} with the parser, otherwise do nothing.      */
DECL|method|applyContentParser
specifier|public
specifier|final
name|void
name|applyContentParser
parameter_list|(
name|CheckedConsumer
argument_list|<
name|XContentParser
argument_list|,
name|IOException
argument_list|>
name|applyParser
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasContent
argument_list|()
condition|)
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|contentParser
argument_list|()
init|)
block|{
name|applyParser
operator|.
name|accept
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Does this request have content or a {@code source} parameter? Use this instead of {@link #hasContent()} if this      * {@linkplain RestHandler} treats the {@code source} parameter like the body content.      */
DECL|method|hasContentOrSourceParam
specifier|public
specifier|final
name|boolean
name|hasContentOrSourceParam
parameter_list|()
block|{
return|return
name|hasContent
argument_list|()
operator|||
name|hasParam
argument_list|(
literal|"source"
argument_list|)
return|;
block|}
comment|/**      * A parser for the contents of this request if it has contents, otherwise a parser for the {@code source} parameter if there is one,      * otherwise throws an {@link ElasticsearchParseException}. Use {@link #withContentOrSourceParamParserOrNull(CheckedConsumer)} instead      * if you need to handle the absence request content gracefully.      */
DECL|method|contentOrSourceParamParser
specifier|public
specifier|final
name|XContentParser
name|contentOrSourceParamParser
parameter_list|()
throws|throws
name|IOException
block|{
name|Tuple
argument_list|<
name|XContentType
argument_list|,
name|BytesReference
argument_list|>
name|tuple
init|=
name|contentOrSourceParam
argument_list|()
decl_stmt|;
name|BytesReference
name|content
init|=
name|tuple
operator|.
name|v2
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"Body required"
argument_list|)
throw|;
block|}
return|return
name|tuple
operator|.
name|v1
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|xContentRegistry
argument_list|,
name|content
argument_list|)
return|;
block|}
comment|/**      * Call a consumer with the parser for the contents of this request if it has contents, otherwise with a parser for the {@code source}      * parameter if there is one, otherwise with {@code null}. Use {@link #contentOrSourceParamParser()} if you should throw an exception      * back to the user when there isn't request content.      */
DECL|method|withContentOrSourceParamParserOrNull
specifier|public
specifier|final
name|void
name|withContentOrSourceParamParserOrNull
parameter_list|(
name|CheckedConsumer
argument_list|<
name|XContentParser
argument_list|,
name|IOException
argument_list|>
name|withParser
parameter_list|)
throws|throws
name|IOException
block|{
name|Tuple
argument_list|<
name|XContentType
argument_list|,
name|BytesReference
argument_list|>
name|tuple
init|=
name|contentOrSourceParam
argument_list|()
decl_stmt|;
name|BytesReference
name|content
init|=
name|tuple
operator|.
name|v2
argument_list|()
decl_stmt|;
name|XContentType
name|xContentType
init|=
name|tuple
operator|.
name|v1
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|xContentType
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|xContentRegistry
argument_list|,
name|content
argument_list|)
init|)
block|{
name|withParser
operator|.
name|accept
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|withParser
operator|.
name|accept
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get the content of the request or the contents of the {@code source} param. Prefer {@link #contentOrSourceParamParser()} or      * {@link #withContentOrSourceParamParserOrNull(CheckedConsumer)} if you need a parser.      */
DECL|method|contentOrSourceParam
specifier|public
specifier|final
name|Tuple
argument_list|<
name|XContentType
argument_list|,
name|BytesReference
argument_list|>
name|contentOrSourceParam
parameter_list|()
block|{
if|if
condition|(
name|hasContent
argument_list|()
condition|)
block|{
if|if
condition|(
name|xContentType
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unknown content type"
argument_list|)
throw|;
block|}
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|xContentType
operator|.
name|get
argument_list|()
argument_list|,
name|content
argument_list|()
argument_list|)
return|;
block|}
name|String
name|source
init|=
name|param
argument_list|(
literal|"source"
argument_list|)
decl_stmt|;
name|String
name|typeParam
init|=
name|param
argument_list|(
literal|"source_content_type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|BytesArray
name|bytes
init|=
operator|new
name|BytesArray
argument_list|(
name|source
argument_list|)
decl_stmt|;
specifier|final
name|XContentType
name|xContentType
decl_stmt|;
if|if
condition|(
name|typeParam
operator|!=
literal|null
condition|)
block|{
name|xContentType
operator|=
name|parseContentType
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|typeParam
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DEPRECATION_LOGGER
operator|.
name|deprecated
argument_list|(
literal|"Deprecated use of the [source] parameter without the [source_content_type] parameter. Use "
operator|+
literal|"the [source_content_type] parameter to specify the content type of the source such as [application/json]"
argument_list|)
expr_stmt|;
name|xContentType
operator|=
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|xContentType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"could not determine source content type"
argument_list|)
throw|;
block|}
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|xContentType
argument_list|,
name|bytes
argument_list|)
return|;
block|}
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
name|BytesArray
operator|.
name|EMPTY
argument_list|)
return|;
block|}
comment|/**      * Call a consumer with the parser for the contents of this request if it has contents, otherwise with a parser for the {@code source}      * parameter if there is one, otherwise with {@code null}. Use {@link #contentOrSourceParamParser()} if you should throw an exception      * back to the user when there isn't request content. This version allows for plain text content      */
annotation|@
name|Deprecated
DECL|method|withContentOrSourceParamParserOrNullLenient
specifier|public
specifier|final
name|void
name|withContentOrSourceParamParserOrNullLenient
parameter_list|(
name|CheckedConsumer
argument_list|<
name|XContentParser
argument_list|,
name|IOException
argument_list|>
name|withParser
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasContent
argument_list|()
operator|&&
name|xContentType
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|withParser
operator|.
name|accept
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|Tuple
argument_list|<
name|XContentType
argument_list|,
name|BytesReference
argument_list|>
name|tuple
init|=
name|contentOrSourceParam
argument_list|()
decl_stmt|;
name|BytesReference
name|content
init|=
name|tuple
operator|.
name|v2
argument_list|()
decl_stmt|;
name|XContentType
name|xContentType
init|=
name|tuple
operator|.
name|v1
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|xContentType
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|xContentRegistry
argument_list|,
name|content
argument_list|)
init|)
block|{
name|withParser
operator|.
name|accept
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|withParser
operator|.
name|accept
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get the content of the request or the contents of the {@code source} param without the xcontent type. This is useful the request can      * accept non xcontent values.      * @deprecated we should only take xcontent      */
annotation|@
name|Deprecated
DECL|method|getContentOrSourceParamOnly
specifier|public
specifier|final
name|BytesReference
name|getContentOrSourceParamOnly
parameter_list|()
block|{
if|if
condition|(
name|hasContent
argument_list|()
condition|)
block|{
return|return
name|content
argument_list|()
return|;
block|}
name|String
name|source
init|=
name|param
argument_list|(
literal|"source"
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|BytesArray
argument_list|(
name|source
argument_list|)
return|;
block|}
return|return
name|BytesArray
operator|.
name|EMPTY
return|;
block|}
comment|/**      * Parses the given content type string for the media type. This method currently ignores parameters.      */
comment|// TODO stop ignoring parameters such as charset...
DECL|method|parseContentType
specifier|private
specifier|static
name|XContentType
name|parseContentType
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|header
parameter_list|)
block|{
if|if
condition|(
name|header
operator|==
literal|null
operator|||
name|header
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|header
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"only one Content-Type header should be provided"
argument_list|)
throw|;
block|}
name|String
name|rawContentType
init|=
name|header
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|elements
init|=
name|rawContentType
operator|.
name|split
argument_list|(
literal|"[ \t]*;"
argument_list|)
decl_stmt|;
if|if
condition|(
name|elements
operator|.
name|length
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
index|[]
name|splitMediaType
init|=
name|elements
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitMediaType
operator|.
name|length
operator|==
literal|2
operator|&&
name|TCHAR_PATTERN
operator|.
name|matcher
argument_list|(
name|splitMediaType
index|[
literal|0
index|]
argument_list|)
operator|.
name|matches
argument_list|()
operator|&&
name|TCHAR_PATTERN
operator|.
name|matcher
argument_list|(
name|splitMediaType
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|XContentType
operator|.
name|fromMediaType
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid Content-Type header ["
operator|+
name|rawContentType
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"empty Content-Type header"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

