begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A channel used to construct bytes / builder based outputs, and send responses.  */
end_comment

begin_interface
DECL|interface|RestChannel
specifier|public
interface|interface
name|RestChannel
block|{
DECL|method|newBuilder
name|XContentBuilder
name|newBuilder
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|newErrorBuilder
name|XContentBuilder
name|newErrorBuilder
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|newBuilder
name|XContentBuilder
name|newBuilder
parameter_list|(
annotation|@
name|Nullable
name|XContentType
name|xContentType
parameter_list|,
name|boolean
name|useFiltering
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|bytesOutput
name|BytesStreamOutput
name|bytesOutput
parameter_list|()
function_decl|;
DECL|method|request
name|RestRequest
name|request
parameter_list|()
function_decl|;
comment|/**      * @return true iff an error response should contain additional details like exception traces.      */
DECL|method|detailedErrorsEnabled
name|boolean
name|detailedErrorsEnabled
parameter_list|()
function_decl|;
DECL|method|sendResponse
name|void
name|sendResponse
parameter_list|(
name|RestResponse
name|response
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

