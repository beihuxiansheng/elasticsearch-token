begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A channel used to construct bytes / builder based outputs, and send responses.  */
end_comment

begin_class
DECL|class|RestChannel
specifier|public
specifier|abstract
class|class
name|RestChannel
block|{
DECL|field|request
specifier|protected
specifier|final
name|RestRequest
name|request
decl_stmt|;
DECL|field|detailedErrorsEnabled
specifier|protected
specifier|final
name|boolean
name|detailedErrorsEnabled
decl_stmt|;
DECL|field|bytesOut
specifier|private
name|BytesStreamOutput
name|bytesOut
decl_stmt|;
DECL|method|RestChannel
specifier|protected
name|RestChannel
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|boolean
name|detailedErrorsEnabled
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|detailedErrorsEnabled
operator|=
name|detailedErrorsEnabled
expr_stmt|;
block|}
DECL|method|newBuilder
specifier|public
name|XContentBuilder
name|newBuilder
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|newBuilder
argument_list|(
name|request
operator|.
name|hasContent
argument_list|()
condition|?
name|request
operator|.
name|content
argument_list|()
else|:
literal|null
argument_list|,
name|request
operator|.
name|hasParam
argument_list|(
literal|"filter_path"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newErrorBuilder
specifier|public
name|XContentBuilder
name|newErrorBuilder
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Disable filtering when building error responses
return|return
name|newBuilder
argument_list|(
name|request
operator|.
name|hasContent
argument_list|()
condition|?
name|request
operator|.
name|content
argument_list|()
else|:
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|newBuilder
specifier|public
name|XContentBuilder
name|newBuilder
parameter_list|(
annotation|@
name|Nullable
name|BytesReference
name|autoDetectSource
parameter_list|,
name|boolean
name|useFiltering
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentType
name|contentType
init|=
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"format"
argument_list|,
name|request
operator|.
name|header
argument_list|(
literal|"Accept"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
comment|// try and guess it from the auto detect source
if|if
condition|(
name|autoDetectSource
operator|!=
literal|null
condition|)
block|{
name|contentType
operator|=
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|autoDetectSource
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
comment|// default to JSON
name|contentType
operator|=
name|XContentType
operator|.
name|JSON
expr_stmt|;
block|}
name|String
index|[]
name|filters
init|=
name|useFiltering
condition|?
name|request
operator|.
name|paramAsStringArrayOrEmptyIfAll
argument_list|(
literal|"filter_path"
argument_list|)
else|:
literal|null
decl_stmt|;
name|XContentBuilder
name|builder
init|=
operator|new
name|XContentBuilder
argument_list|(
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|contentType
argument_list|)
argument_list|,
name|bytesOutput
argument_list|()
argument_list|,
name|filters
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"pretty"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|builder
operator|.
name|prettyPrint
argument_list|()
operator|.
name|lfAtEnd
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|humanReadable
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"human"
argument_list|,
name|builder
operator|.
name|humanReadable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|casing
init|=
name|request
operator|.
name|param
argument_list|(
literal|"case"
argument_list|)
decl_stmt|;
if|if
condition|(
name|casing
operator|!=
literal|null
operator|&&
literal|"camelCase"
operator|.
name|equals
argument_list|(
name|casing
argument_list|)
condition|)
block|{
name|builder
operator|.
name|fieldCaseConversion
argument_list|(
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|CAMELCASE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we expect all REST interfaces to write results in underscore casing, so
comment|// no need for double casing
name|builder
operator|.
name|fieldCaseConversion
argument_list|(
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
comment|/**      * A channel level bytes output that can be reused. It gets reset on each call to this      * method.      */
DECL|method|bytesOutput
specifier|public
specifier|final
name|BytesStreamOutput
name|bytesOutput
parameter_list|()
block|{
if|if
condition|(
name|bytesOut
operator|==
literal|null
condition|)
block|{
name|bytesOut
operator|=
name|newBytesOutput
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bytesOut
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
return|return
name|bytesOut
return|;
block|}
DECL|method|newBytesOutput
specifier|protected
name|BytesStreamOutput
name|newBytesOutput
parameter_list|()
block|{
return|return
operator|new
name|BytesStreamOutput
argument_list|()
return|;
block|}
DECL|method|request
specifier|public
name|RestRequest
name|request
parameter_list|()
block|{
return|return
name|this
operator|.
name|request
return|;
block|}
DECL|method|detailedErrorsEnabled
specifier|public
name|boolean
name|detailedErrorsEnabled
parameter_list|()
block|{
return|return
name|detailedErrorsEnabled
return|;
block|}
DECL|method|sendResponse
specifier|public
specifier|abstract
name|void
name|sendResponse
parameter_list|(
name|RestResponse
name|response
parameter_list|)
function_decl|;
block|}
end_class

end_unit

