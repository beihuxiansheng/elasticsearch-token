begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|LevensteinDistance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|node
operator|.
name|NodeClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|ActionPlugin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Base handler for REST requests.  *<p>  * This handler makes sure that the headers&amp; context of the handled {@link RestRequest requests} are copied over to  * the transport requests executed by the associated client. While the context is fully copied over, not all the headers  * are copied, but a selected few. It is possible to control what headers are copied over by returning them in  * {@link ActionPlugin#getRestHeaders()}.  */
end_comment

begin_class
DECL|class|BaseRestHandler
specifier|public
specifier|abstract
class|class
name|BaseRestHandler
extends|extends
name|AbstractComponent
implements|implements
name|RestHandler
block|{
DECL|field|MULTI_ALLOW_EXPLICIT_INDEX
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|MULTI_ALLOW_EXPLICIT_INDEX
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"rest.action.multi.allow_explicit_index"
argument_list|,
literal|true
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|parseFieldMatcher
specifier|protected
specifier|final
name|ParseFieldMatcher
name|parseFieldMatcher
decl_stmt|;
DECL|method|BaseRestHandler
specifier|protected
name|BaseRestHandler
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|parseFieldMatcher
operator|=
operator|new
name|ParseFieldMatcher
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleRequest
specifier|public
specifier|final
name|void
name|handleRequest
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|,
name|NodeClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
comment|// prepare the request for execution; has the side effect of touching the request parameters
specifier|final
name|RestChannelConsumer
name|action
init|=
name|prepareRequest
argument_list|(
name|request
argument_list|,
name|client
argument_list|)
decl_stmt|;
comment|// validate unconsumed params, but we must exclude params used to format the response
comment|// use a sorted set so the unconsumed parameters appear in a reliable sorted order
specifier|final
name|SortedSet
argument_list|<
name|String
argument_list|>
name|unconsumedParams
init|=
name|request
operator|.
name|unconsumedParams
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
operator|!
name|responseParams
argument_list|()
operator|.
name|contains
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toCollection
argument_list|(
name|TreeSet
operator|::
operator|new
argument_list|)
argument_list|)
decl_stmt|;
comment|// validate the non-response params
if|if
condition|(
operator|!
name|unconsumedParams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"request [%s] contains unrecognized parameter%s: "
argument_list|,
name|request
operator|.
name|path
argument_list|()
argument_list|,
name|unconsumedParams
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|"s"
else|:
literal|""
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|unconsumedParam
range|:
name|unconsumedParams
control|)
block|{
specifier|final
name|LevensteinDistance
name|ld
init|=
operator|new
name|LevensteinDistance
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Tuple
argument_list|<
name|Float
argument_list|,
name|String
argument_list|>
argument_list|>
name|scoredParams
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|consumedParam
range|:
name|request
operator|.
name|consumedParams
argument_list|()
control|)
block|{
specifier|final
name|float
name|distance
init|=
name|ld
operator|.
name|getDistance
argument_list|(
name|unconsumedParam
argument_list|,
name|consumedParam
argument_list|)
decl_stmt|;
if|if
condition|(
name|distance
operator|>
literal|0.5f
condition|)
block|{
name|scoredParams
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|distance
argument_list|,
name|consumedParam
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|scoredParams
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
block|{
comment|// sort by distance in reverse order, then parameter name for equal distances
name|int
name|compare
init|=
name|a
operator|.
name|v1
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|v1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|compare
operator|!=
literal|0
condition|)
return|return
operator|-
name|compare
return|;
else|else
return|return
name|a
operator|.
name|v2
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|v2
argument_list|()
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
operator|==
literal|false
condition|)
block|{
name|message
operator|+=
literal|", "
expr_stmt|;
block|}
name|message
operator|+=
literal|"["
operator|+
name|unconsumedParam
operator|+
literal|"]"
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|scoredParams
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Tuple
operator|::
name|v2
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|keys
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|message
operator|+=
literal|" -> did you mean "
operator|+
operator|(
name|keys
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
literal|"["
operator|+
name|keys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|"]"
else|:
literal|"any of "
operator|+
name|keys
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|"?"
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// execute the action
name|action
operator|.
name|accept
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
comment|/**      * REST requests are handled by preparing a channel consumer that represents the execution of      * the request against a channel.      */
annotation|@
name|FunctionalInterface
DECL|interface|RestChannelConsumer
specifier|protected
interface|interface
name|RestChannelConsumer
block|{
comment|/**          * Executes a request against the given channel.          *          * @param channel the channel for sending the response          * @throws Exception if an exception occurred executing the request          */
DECL|method|accept
name|void
name|accept
parameter_list|(
name|RestChannel
name|channel
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
comment|/**      * Prepare the request for execution. Implementations should consume all request params before      * returning the runnable for actual execution. Unconsumed params will immediately terminate      * execution of the request. However, some params are only used in processing the response;      * implementations can override {@link BaseRestHandler#responseParams()} to indicate such      * params.      *      * @param request the request to execute      * @param client  client for executing actions on the local node      * @return the action to execute      * @throws IOException if an I/O exception occurred parsing the request and preparing for      *                     execution      */
DECL|method|prepareRequest
specifier|protected
specifier|abstract
name|RestChannelConsumer
name|prepareRequest
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|NodeClient
name|client
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Parameters used for controlling the response and thus might not be consumed during      * preparation of the request execution in      * {@link BaseRestHandler#prepareRequest(RestRequest, NodeClient)}.      *      * @return a set of parameters used to control the response and thus should not trip strict      * URL parameter checks.      */
DECL|method|responseParams
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|responseParams
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
block|}
end_class

end_unit

