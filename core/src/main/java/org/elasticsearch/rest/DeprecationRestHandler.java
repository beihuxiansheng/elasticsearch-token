begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|node
operator|.
name|NodeClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|DeprecationLogger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * {@code DeprecationRestHandler} provides a proxy for any existing {@link RestHandler} so that usage of the handler can be  * logged using the {@link DeprecationLogger}.  */
end_comment

begin_class
DECL|class|DeprecationRestHandler
specifier|public
class|class
name|DeprecationRestHandler
implements|implements
name|RestHandler
block|{
DECL|field|handler
specifier|private
specifier|final
name|RestHandler
name|handler
decl_stmt|;
DECL|field|deprecationMessage
specifier|private
specifier|final
name|String
name|deprecationMessage
decl_stmt|;
DECL|field|deprecationLogger
specifier|private
specifier|final
name|DeprecationLogger
name|deprecationLogger
decl_stmt|;
comment|/**      * Create a {@link DeprecationRestHandler} that encapsulates the {@code handler} using the {@code deprecationLogger} to log      * deprecation {@code warning}.      *      * @param handler The rest handler to deprecate (it's possible that the handler is reused with a different name!)      * @param deprecationMessage The message to warn users with when they use the {@code handler}      * @param deprecationLogger The deprecation logger      * @throws NullPointerException if any parameter except {@code deprecationMessage} is {@code null}      * @throws IllegalArgumentException if {@code deprecationMessage} is not a valid header      */
DECL|method|DeprecationRestHandler
specifier|public
name|DeprecationRestHandler
parameter_list|(
name|RestHandler
name|handler
parameter_list|,
name|String
name|deprecationMessage
parameter_list|,
name|DeprecationLogger
name|deprecationLogger
parameter_list|)
block|{
name|this
operator|.
name|handler
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|this
operator|.
name|deprecationMessage
operator|=
name|requireValidHeader
argument_list|(
name|deprecationMessage
argument_list|)
expr_stmt|;
name|this
operator|.
name|deprecationLogger
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|deprecationLogger
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      *<p>      * Usage is logged via the {@link DeprecationLogger} so that the actual response can be notified of deprecation as well.      */
annotation|@
name|Override
DECL|method|handleRequest
specifier|public
name|void
name|handleRequest
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|,
name|NodeClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
name|deprecationLogger
operator|.
name|deprecated
argument_list|(
name|deprecationMessage
argument_list|)
expr_stmt|;
name|handler
operator|.
name|handleRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
comment|/**      * This does a very basic pass at validating that a header's value contains only expected characters according to RFC-5987, and those      * that it references.      *<p>      * https://tools.ietf.org/html/rfc5987      *<p>      * This is only expected to be used for assertions. The idea is that only readable US-ASCII characters are expected; the rest must be      * encoded with percent encoding, which makes checking for a valid character range very simple.      *      * @param value The header value to check      * @return {@code true} if the {@code value} is not obviously wrong.      */
DECL|method|validHeaderValue
specifier|public
specifier|static
name|boolean
name|validHeaderValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|value
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// 32 = ' ' (31 = unit separator); 126 = '~' (127 = DEL)
if|if
condition|(
name|c
argument_list|<
literal|32
operator|||
name|c
argument_list|>
literal|126
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Throw an exception if the {@code value} is not a {@link #validHeaderValue(String) valid header}.      *      * @param value The header value to check      * @return Always {@code value}.      * @throws IllegalArgumentException if {@code value} is not a {@link #validHeaderValue(String) valid header}.      */
DECL|method|requireValidHeader
specifier|public
specifier|static
name|String
name|requireValidHeader
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|validHeaderValue
argument_list|(
name|value
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"header value must contain only US ASCII text"
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

