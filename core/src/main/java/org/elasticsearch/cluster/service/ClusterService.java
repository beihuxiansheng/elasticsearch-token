begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.service
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateApplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|LocalNodeMasterListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|NodeConnectionsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|TimeoutClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|OperationRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ClusterService
specifier|public
class|class
name|ClusterService
extends|extends
name|AbstractLifecycleComponent
block|{
DECL|field|masterService
specifier|private
specifier|final
name|MasterService
name|masterService
decl_stmt|;
DECL|field|clusterApplierService
specifier|private
specifier|final
name|ClusterApplierService
name|clusterApplierService
decl_stmt|;
DECL|field|CLUSTER_SERVICE_SLOW_TASK_LOGGING_THRESHOLD_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|CLUSTER_SERVICE_SLOW_TASK_LOGGING_THRESHOLD_SETTING
init|=
name|Setting
operator|.
name|positiveTimeSetting
argument_list|(
literal|"cluster.service.slow_task_logging_threshold"
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|30
argument_list|)
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|clusterName
specifier|private
specifier|final
name|ClusterName
name|clusterName
decl_stmt|;
DECL|field|operationRouting
specifier|private
specifier|final
name|OperationRouting
name|operationRouting
decl_stmt|;
DECL|field|clusterSettings
specifier|private
specifier|final
name|ClusterSettings
name|clusterSettings
decl_stmt|;
DECL|method|ClusterService
specifier|public
name|ClusterService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterSettings
name|clusterSettings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterApplierService
operator|=
operator|new
name|ClusterApplierService
argument_list|(
name|settings
argument_list|,
name|clusterSettings
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
name|this
operator|.
name|masterService
operator|=
operator|new
name|MasterService
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
name|this
operator|.
name|operationRouting
operator|=
operator|new
name|OperationRouting
argument_list|(
name|settings
argument_list|,
name|clusterSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterSettings
operator|=
name|clusterSettings
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterSettings
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|CLUSTER_SERVICE_SLOW_TASK_LOGGING_THRESHOLD_SETTING
argument_list|,
name|this
operator|::
name|setSlowTaskLoggingThreshold
argument_list|)
expr_stmt|;
block|}
DECL|method|setSlowTaskLoggingThreshold
specifier|private
name|void
name|setSlowTaskLoggingThreshold
parameter_list|(
name|TimeValue
name|slowTaskLoggingThreshold
parameter_list|)
block|{
name|masterService
operator|.
name|setSlowTaskLoggingThreshold
argument_list|(
name|slowTaskLoggingThreshold
argument_list|)
expr_stmt|;
name|clusterApplierService
operator|.
name|setSlowTaskLoggingThreshold
argument_list|(
name|slowTaskLoggingThreshold
argument_list|)
expr_stmt|;
block|}
DECL|method|setNodeConnectionsService
specifier|public
specifier|synchronized
name|void
name|setNodeConnectionsService
parameter_list|(
name|NodeConnectionsService
name|nodeConnectionsService
parameter_list|)
block|{
name|clusterApplierService
operator|.
name|setNodeConnectionsService
argument_list|(
name|nodeConnectionsService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
specifier|synchronized
name|void
name|doStart
parameter_list|()
block|{
name|clusterApplierService
operator|.
name|start
argument_list|()
expr_stmt|;
name|masterService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop
specifier|protected
specifier|synchronized
name|void
name|doStop
parameter_list|()
block|{
name|masterService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|clusterApplierService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
specifier|synchronized
name|void
name|doClose
parameter_list|()
block|{
name|masterService
operator|.
name|close
argument_list|()
expr_stmt|;
name|clusterApplierService
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * The local node.      */
DECL|method|localNode
specifier|public
name|DiscoveryNode
name|localNode
parameter_list|()
block|{
name|DiscoveryNode
name|localNode
init|=
name|state
argument_list|()
operator|.
name|getNodes
argument_list|()
operator|.
name|getLocalNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|localNode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No local node found. Is the node started?"
argument_list|)
throw|;
block|}
return|return
name|localNode
return|;
block|}
DECL|method|operationRouting
specifier|public
name|OperationRouting
name|operationRouting
parameter_list|()
block|{
return|return
name|operationRouting
return|;
block|}
comment|/**      * The currently applied cluster state.      * TODO: Should be renamed to appliedState / appliedClusterState      */
DECL|method|state
specifier|public
name|ClusterState
name|state
parameter_list|()
block|{
return|return
name|clusterApplierService
operator|.
name|state
argument_list|()
return|;
block|}
comment|/**      * Adds a high priority applier of updated cluster states.      */
DECL|method|addHighPriorityApplier
specifier|public
name|void
name|addHighPriorityApplier
parameter_list|(
name|ClusterStateApplier
name|applier
parameter_list|)
block|{
name|clusterApplierService
operator|.
name|addHighPriorityApplier
argument_list|(
name|applier
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an applier which will be called after all high priority and normal appliers have been called.      */
DECL|method|addLowPriorityApplier
specifier|public
name|void
name|addLowPriorityApplier
parameter_list|(
name|ClusterStateApplier
name|applier
parameter_list|)
block|{
name|clusterApplierService
operator|.
name|addLowPriorityApplier
argument_list|(
name|applier
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a applier of updated cluster states.      */
DECL|method|addStateApplier
specifier|public
name|void
name|addStateApplier
parameter_list|(
name|ClusterStateApplier
name|applier
parameter_list|)
block|{
name|clusterApplierService
operator|.
name|addStateApplier
argument_list|(
name|applier
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes an applier of updated cluster states.      */
DECL|method|removeApplier
specifier|public
name|void
name|removeApplier
parameter_list|(
name|ClusterStateApplier
name|applier
parameter_list|)
block|{
name|clusterApplierService
operator|.
name|removeApplier
argument_list|(
name|applier
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a listener for updated cluster states      */
DECL|method|addListener
specifier|public
name|void
name|addListener
parameter_list|(
name|ClusterStateListener
name|listener
parameter_list|)
block|{
name|clusterApplierService
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes a listener for updated cluster states.      */
DECL|method|removeListener
specifier|public
name|void
name|removeListener
parameter_list|(
name|ClusterStateListener
name|listener
parameter_list|)
block|{
name|clusterApplierService
operator|.
name|removeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes a timeout listener for updated cluster states.      */
DECL|method|removeTimeoutListener
specifier|public
name|void
name|removeTimeoutListener
parameter_list|(
name|TimeoutClusterStateListener
name|listener
parameter_list|)
block|{
name|clusterApplierService
operator|.
name|removeTimeoutListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a listener for on/off local node master events      */
DECL|method|addLocalNodeMasterListener
specifier|public
name|void
name|addLocalNodeMasterListener
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|clusterApplierService
operator|.
name|addLocalNodeMasterListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove the given listener for on/off local master events      */
DECL|method|removeLocalNodeMasterListener
specifier|public
name|void
name|removeLocalNodeMasterListener
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|clusterApplierService
operator|.
name|removeLocalNodeMasterListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a cluster state listener that is expected to be removed during a short period of time.      * If provided, the listener will be notified once a specific time has elapsed.      *      * NOTE: the listener is not removed on timeout. This is the responsibility of the caller.      */
DECL|method|addTimeoutListener
specifier|public
name|void
name|addTimeoutListener
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|TimeValue
name|timeout
parameter_list|,
specifier|final
name|TimeoutClusterStateListener
name|listener
parameter_list|)
block|{
name|clusterApplierService
operator|.
name|addTimeoutListener
argument_list|(
name|timeout
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|getMasterService
specifier|public
name|MasterService
name|getMasterService
parameter_list|()
block|{
return|return
name|masterService
return|;
block|}
DECL|method|getClusterApplierService
specifier|public
name|ClusterApplierService
name|getClusterApplierService
parameter_list|()
block|{
return|return
name|clusterApplierService
return|;
block|}
DECL|method|assertClusterOrMasterStateThread
specifier|public
specifier|static
name|boolean
name|assertClusterOrMasterStateThread
parameter_list|()
block|{
assert|assert
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|ClusterApplierService
operator|.
name|CLUSTER_UPDATE_THREAD_NAME
argument_list|)
operator|||
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|MasterService
operator|.
name|MASTER_UPDATE_THREAD_NAME
argument_list|)
operator|:
literal|"not called from the master/cluster state update thread"
assert|;
return|return
literal|true
return|;
block|}
DECL|method|getClusterName
specifier|public
name|ClusterName
name|getClusterName
parameter_list|()
block|{
return|return
name|clusterName
return|;
block|}
DECL|method|getClusterSettings
specifier|public
name|ClusterSettings
name|getClusterSettings
parameter_list|()
block|{
return|return
name|clusterSettings
return|;
block|}
DECL|method|getSettings
specifier|public
name|Settings
name|getSettings
parameter_list|()
block|{
return|return
name|settings
return|;
block|}
comment|/**      * Submits a cluster state update task; unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,      * ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.      *      * @param source     the source of the cluster state update task      * @param updateTask the full context for the cluster state update      *                   task      *      */
specifier|public
parameter_list|<
name|T
extends|extends
name|ClusterStateTaskConfig
operator|&
name|ClusterStateTaskExecutor
argument_list|<
name|T
argument_list|>
operator|&
name|ClusterStateTaskListener
parameter_list|>
DECL|method|submitStateUpdateTask
name|void
name|submitStateUpdateTask
parameter_list|(
name|String
name|source
parameter_list|,
name|T
name|updateTask
parameter_list|)
block|{
name|submitStateUpdateTask
argument_list|(
name|source
argument_list|,
name|updateTask
argument_list|,
name|updateTask
argument_list|,
name|updateTask
argument_list|,
name|updateTask
argument_list|)
expr_stmt|;
block|}
comment|/**      * Submits a cluster state update task; submitted updates will be      * batched across the same instance of executor. The exact batching      * semantics depend on the underlying implementation but a rough      * guideline is that if the update task is submitted while there      * are pending update tasks for the same executor, these update      * tasks will all be executed on the executor in a single batch      *      * @param source   the source of the cluster state update task      * @param task     the state needed for the cluster state update task      * @param config   the cluster state update task configuration      * @param executor the cluster state update task executor; tasks      *                 that share the same executor will be executed      *                 batches on this executor      * @param listener callback after the cluster state update task      *                 completes      * @param<T>      the type of the cluster state update task state      *      */
DECL|method|submitStateUpdateTask
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|submitStateUpdateTask
parameter_list|(
name|String
name|source
parameter_list|,
name|T
name|task
parameter_list|,
name|ClusterStateTaskConfig
name|config
parameter_list|,
name|ClusterStateTaskExecutor
argument_list|<
name|T
argument_list|>
name|executor
parameter_list|,
name|ClusterStateTaskListener
name|listener
parameter_list|)
block|{
name|submitStateUpdateTasks
argument_list|(
name|source
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|task
argument_list|,
name|listener
argument_list|)
argument_list|,
name|config
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Submits a batch of cluster state update tasks; submitted updates are guaranteed to be processed together,      * potentially with more tasks of the same executor.      *      * @param source   the source of the cluster state update task      * @param tasks    a map of update tasks and their corresponding listeners      * @param config   the cluster state update task configuration      * @param executor the cluster state update task executor; tasks      *                 that share the same executor will be executed      *                 batches on this executor      * @param<T>      the type of the cluster state update task state      *      */
DECL|method|submitStateUpdateTasks
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|submitStateUpdateTasks
parameter_list|(
specifier|final
name|String
name|source
parameter_list|,
specifier|final
name|Map
argument_list|<
name|T
argument_list|,
name|ClusterStateTaskListener
argument_list|>
name|tasks
parameter_list|,
specifier|final
name|ClusterStateTaskConfig
name|config
parameter_list|,
specifier|final
name|ClusterStateTaskExecutor
argument_list|<
name|T
argument_list|>
name|executor
parameter_list|)
block|{
name|masterService
operator|.
name|submitStateUpdateTasks
argument_list|(
name|source
argument_list|,
name|tasks
argument_list|,
name|config
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

