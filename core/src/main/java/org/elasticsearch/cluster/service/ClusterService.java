begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.service
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|AckedClusterStateTaskListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|LocalNodeMasterListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|NodeConnectionsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|TimeoutClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|ProcessClusterEventTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|OperationRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDown
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PrioritizedEsThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PrioritizedRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|iterable
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
operator|.
name|daemonThreadFactory
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ClusterService
specifier|public
class|class
name|ClusterService
extends|extends
name|AbstractLifecycleComponent
block|{
DECL|field|CLUSTER_SERVICE_SLOW_TASK_LOGGING_THRESHOLD_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|CLUSTER_SERVICE_SLOW_TASK_LOGGING_THRESHOLD_SETTING
init|=
name|Setting
operator|.
name|positiveTimeSetting
argument_list|(
literal|"cluster.service.slow_task_logging_threshold"
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|30
argument_list|)
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
DECL|field|UPDATE_THREAD_NAME
specifier|public
specifier|static
specifier|final
name|String
name|UPDATE_THREAD_NAME
init|=
literal|"clusterService#updateTask"
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|clusterName
specifier|private
specifier|final
name|ClusterName
name|clusterName
decl_stmt|;
DECL|field|clusterStatePublisher
specifier|private
name|BiConsumer
argument_list|<
name|ClusterChangedEvent
argument_list|,
name|Discovery
operator|.
name|AckListener
argument_list|>
name|clusterStatePublisher
decl_stmt|;
DECL|field|operationRouting
specifier|private
specifier|final
name|OperationRouting
name|operationRouting
decl_stmt|;
DECL|field|clusterSettings
specifier|private
specifier|final
name|ClusterSettings
name|clusterSettings
decl_stmt|;
DECL|field|slowTaskLoggingThreshold
specifier|private
name|TimeValue
name|slowTaskLoggingThreshold
decl_stmt|;
DECL|field|updateTasksExecutor
specifier|private
specifier|volatile
name|PrioritizedEsThreadPoolExecutor
name|updateTasksExecutor
decl_stmt|;
comment|/**      * Those 3 state listeners are changing infrequently - CopyOnWriteArrayList is just fine      */
DECL|field|priorityClusterStateListeners
specifier|private
specifier|final
name|Collection
argument_list|<
name|ClusterStateListener
argument_list|>
name|priorityClusterStateListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|clusterStateListeners
specifier|private
specifier|final
name|Collection
argument_list|<
name|ClusterStateListener
argument_list|>
name|clusterStateListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|lastClusterStateListeners
specifier|private
specifier|final
name|Collection
argument_list|<
name|ClusterStateListener
argument_list|>
name|lastClusterStateListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|updateTasksPerExecutor
specifier|private
specifier|final
name|Map
argument_list|<
name|ClusterStateTaskExecutor
argument_list|,
name|List
argument_list|<
name|UpdateTask
argument_list|>
argument_list|>
name|updateTasksPerExecutor
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// TODO this is rather frequently changing I guess a Synced Set would be better here and a dedicated remove API
DECL|field|postAppliedListeners
specifier|private
specifier|final
name|Collection
argument_list|<
name|ClusterStateListener
argument_list|>
name|postAppliedListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|preAppliedListeners
specifier|private
specifier|final
name|Iterable
argument_list|<
name|ClusterStateListener
argument_list|>
name|preAppliedListeners
init|=
name|Iterables
operator|.
name|concat
argument_list|(
name|priorityClusterStateListeners
argument_list|,
name|clusterStateListeners
argument_list|,
name|lastClusterStateListeners
argument_list|)
decl_stmt|;
DECL|field|localNodeMasterListeners
specifier|private
specifier|final
name|LocalNodeMasterListeners
name|localNodeMasterListeners
decl_stmt|;
DECL|field|onGoingTimeouts
specifier|private
specifier|final
name|Queue
argument_list|<
name|NotifyTimeout
argument_list|>
name|onGoingTimeouts
init|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
decl_stmt|;
DECL|field|clusterState
specifier|private
specifier|volatile
name|ClusterState
name|clusterState
decl_stmt|;
DECL|field|initialBlocks
specifier|private
specifier|final
name|ClusterBlocks
operator|.
name|Builder
name|initialBlocks
decl_stmt|;
DECL|field|nodeConnectionsService
specifier|private
name|NodeConnectionsService
name|nodeConnectionsService
decl_stmt|;
DECL|method|ClusterService
specifier|public
name|ClusterService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterSettings
name|clusterSettings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|operationRouting
operator|=
operator|new
name|OperationRouting
argument_list|(
name|settings
argument_list|,
name|clusterSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|clusterSettings
operator|=
name|clusterSettings
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// will be replaced on doStart.
name|this
operator|.
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterName
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|clusterSettings
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|CLUSTER_SERVICE_SLOW_TASK_LOGGING_THRESHOLD_SETTING
argument_list|,
name|this
operator|::
name|setSlowTaskLoggingThreshold
argument_list|)
expr_stmt|;
name|this
operator|.
name|slowTaskLoggingThreshold
operator|=
name|CLUSTER_SERVICE_SLOW_TASK_LOGGING_THRESHOLD_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|localNodeMasterListeners
operator|=
operator|new
name|LocalNodeMasterListeners
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
name|initialBlocks
operator|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
expr_stmt|;
block|}
DECL|method|setSlowTaskLoggingThreshold
specifier|private
name|void
name|setSlowTaskLoggingThreshold
parameter_list|(
name|TimeValue
name|slowTaskLoggingThreshold
parameter_list|)
block|{
name|this
operator|.
name|slowTaskLoggingThreshold
operator|=
name|slowTaskLoggingThreshold
expr_stmt|;
block|}
DECL|method|setClusterStatePublisher
specifier|public
specifier|synchronized
name|void
name|setClusterStatePublisher
parameter_list|(
name|BiConsumer
argument_list|<
name|ClusterChangedEvent
argument_list|,
name|Discovery
operator|.
name|AckListener
argument_list|>
name|publisher
parameter_list|)
block|{
name|clusterStatePublisher
operator|=
name|publisher
expr_stmt|;
block|}
DECL|method|setLocalNode
specifier|public
specifier|synchronized
name|void
name|setLocalNode
parameter_list|(
name|DiscoveryNode
name|localNode
parameter_list|)
block|{
assert|assert
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|getLocalNodeId
argument_list|()
operator|==
literal|null
operator|:
literal|"local node is already set"
assert|;
name|DiscoveryNodes
operator|.
name|Builder
name|nodeBuilder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|localNode
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|localNode
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodeBuilder
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|setNodeConnectionsService
specifier|public
specifier|synchronized
name|void
name|setNodeConnectionsService
parameter_list|(
name|NodeConnectionsService
name|nodeConnectionsService
parameter_list|)
block|{
assert|assert
name|this
operator|.
name|nodeConnectionsService
operator|==
literal|null
operator|:
literal|"nodeConnectionsService is already set"
assert|;
name|this
operator|.
name|nodeConnectionsService
operator|=
name|nodeConnectionsService
expr_stmt|;
block|}
comment|/**      * Adds an initial block to be set on the first cluster state created.      */
DECL|method|addInitialStateBlock
specifier|public
specifier|synchronized
name|void
name|addInitialStateBlock
parameter_list|(
name|ClusterBlock
name|block
parameter_list|)
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"can't set initial block when started"
argument_list|)
throw|;
block|}
name|initialBlocks
operator|.
name|addGlobalBlock
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove an initial block to be set on the first cluster state created.      */
DECL|method|removeInitialStateBlock
specifier|public
specifier|synchronized
name|void
name|removeInitialStateBlock
parameter_list|(
name|ClusterBlock
name|block
parameter_list|)
throws|throws
name|IllegalStateException
block|{
name|removeInitialStateBlock
argument_list|(
name|block
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove an initial block to be set on the first cluster state created.      */
DECL|method|removeInitialStateBlock
specifier|public
specifier|synchronized
name|void
name|removeInitialStateBlock
parameter_list|(
name|int
name|blockId
parameter_list|)
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"can't set initial block when started"
argument_list|)
throw|;
block|}
name|initialBlocks
operator|.
name|removeGlobalBlock
argument_list|(
name|blockId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
specifier|synchronized
name|void
name|doStart
parameter_list|()
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|clusterStatePublisher
argument_list|,
literal|"please set a cluster state publisher before starting"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|getLocalNode
argument_list|()
argument_list|,
literal|"please set the local node before starting"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|nodeConnectionsService
argument_list|,
literal|"please set the node connection service before starting"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|localNodeMasterListeners
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|blocks
argument_list|(
name|initialBlocks
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|updateTasksExecutor
operator|=
name|EsExecutors
operator|.
name|newSinglePrioritizing
argument_list|(
name|UPDATE_THREAD_NAME
argument_list|,
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
name|UPDATE_THREAD_NAME
argument_list|)
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|blocks
argument_list|(
name|initialBlocks
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop
specifier|protected
specifier|synchronized
name|void
name|doStop
parameter_list|()
block|{
for|for
control|(
name|NotifyTimeout
name|onGoingTimeout
range|:
name|onGoingTimeouts
control|)
block|{
name|onGoingTimeout
operator|.
name|cancel
argument_list|()
expr_stmt|;
try|try
block|{
name|onGoingTimeout
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|onGoingTimeout
operator|.
name|listener
operator|.
name|onClose
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to notify listeners on shutdown"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|updateTasksExecutor
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// close timeout listeners that did not have an ongoing timeout
name|postAppliedListeners
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|listener
lambda|->
name|listener
operator|instanceof
name|TimeoutClusterStateListener
argument_list|)
operator|.
name|map
argument_list|(
name|listener
lambda|->
operator|(
name|TimeoutClusterStateListener
operator|)
name|listener
argument_list|)
operator|.
name|forEach
argument_list|(
name|TimeoutClusterStateListener
operator|::
name|onClose
argument_list|)
expr_stmt|;
name|remove
argument_list|(
name|localNodeMasterListeners
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
specifier|synchronized
name|void
name|doClose
parameter_list|()
block|{     }
comment|/**      * The local node.      */
DECL|method|localNode
specifier|public
name|DiscoveryNode
name|localNode
parameter_list|()
block|{
name|DiscoveryNode
name|localNode
init|=
name|clusterState
operator|.
name|getNodes
argument_list|()
operator|.
name|getLocalNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|localNode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No local node found. Is the node started?"
argument_list|)
throw|;
block|}
return|return
name|localNode
return|;
block|}
DECL|method|operationRouting
specifier|public
name|OperationRouting
name|operationRouting
parameter_list|()
block|{
return|return
name|operationRouting
return|;
block|}
comment|/**      * The current state.      */
DECL|method|state
specifier|public
name|ClusterState
name|state
parameter_list|()
block|{
return|return
name|this
operator|.
name|clusterState
return|;
block|}
comment|/**      * Adds a priority listener for updated cluster states.      */
DECL|method|addFirst
specifier|public
name|void
name|addFirst
parameter_list|(
name|ClusterStateListener
name|listener
parameter_list|)
block|{
name|priorityClusterStateListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds last listener.      */
DECL|method|addLast
specifier|public
name|void
name|addLast
parameter_list|(
name|ClusterStateListener
name|listener
parameter_list|)
block|{
name|lastClusterStateListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a listener for updated cluster states.      */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|ClusterStateListener
name|listener
parameter_list|)
block|{
name|clusterStateListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes a listener for updated cluster states.      */
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|(
name|ClusterStateListener
name|listener
parameter_list|)
block|{
name|clusterStateListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|priorityClusterStateListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|lastClusterStateListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|postAppliedListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|NotifyTimeout
argument_list|>
name|it
init|=
name|onGoingTimeouts
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NotifyTimeout
name|timeout
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeout
operator|.
name|listener
operator|.
name|equals
argument_list|(
name|listener
argument_list|)
condition|)
block|{
name|timeout
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Add a listener for on/off local node master events      */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|localNodeMasterListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove the given listener for on/off local master events      */
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|localNodeMasterListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a cluster state listener that will timeout after the provided timeout,      * and is executed after the clusterstate has been successfully applied ie. is      * in state {@link org.elasticsearch.cluster.ClusterState.ClusterStateStatus#APPLIED}      * NOTE: a {@code null} timeout means that the listener will never be removed      * automatically      */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|TimeValue
name|timeout
parameter_list|,
specifier|final
name|TimeoutClusterStateListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onClose
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// call the post added notification on the same event thread
try|try
block|{
name|updateTasksExecutor
operator|.
name|execute
argument_list|(
operator|new
name|SourcePrioritizedRunnable
argument_list|(
name|Priority
operator|.
name|HIGH
argument_list|,
literal|"_add_listener_"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
name|NotifyTimeout
name|notifyTimeout
init|=
operator|new
name|NotifyTimeout
argument_list|(
name|listener
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
name|notifyTimeout
operator|.
name|future
operator|=
name|threadPool
operator|.
name|schedule
argument_list|(
name|timeout
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
name|notifyTimeout
argument_list|)
expr_stmt|;
name|onGoingTimeouts
operator|.
name|add
argument_list|(
name|notifyTimeout
argument_list|)
expr_stmt|;
block|}
name|postAppliedListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|listener
operator|.
name|postAdded
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EsRejectedExecutionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onClose
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/**      * Submits a cluster state update task; unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,      * ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.      *      * @param source     the source of the cluster state update task      * @param updateTask the full context for the cluster state update      *                   task      */
DECL|method|submitStateUpdateTask
specifier|public
name|void
name|submitStateUpdateTask
parameter_list|(
specifier|final
name|String
name|source
parameter_list|,
specifier|final
name|ClusterStateUpdateTask
name|updateTask
parameter_list|)
block|{
name|submitStateUpdateTask
argument_list|(
name|source
argument_list|,
name|updateTask
argument_list|,
name|updateTask
argument_list|,
name|updateTask
argument_list|,
name|updateTask
argument_list|)
expr_stmt|;
block|}
comment|/**      * Submits a cluster state update task; submitted updates will be      * batched across the same instance of executor. The exact batching      * semantics depend on the underlying implementation but a rough      * guideline is that if the update task is submitted while there      * are pending update tasks for the same executor, these update      * tasks will all be executed on the executor in a single batch      *      * @param source   the source of the cluster state update task      * @param task     the state needed for the cluster state update task      * @param config   the cluster state update task configuration      * @param executor the cluster state update task executor; tasks      *                 that share the same executor will be executed      *                 batches on this executor      * @param listener callback after the cluster state update task      *                 completes      * @param<T>      the type of the cluster state update task state      */
DECL|method|submitStateUpdateTask
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|submitStateUpdateTask
parameter_list|(
specifier|final
name|String
name|source
parameter_list|,
specifier|final
name|T
name|task
parameter_list|,
specifier|final
name|ClusterStateTaskConfig
name|config
parameter_list|,
specifier|final
name|ClusterStateTaskExecutor
argument_list|<
name|T
argument_list|>
name|executor
parameter_list|,
specifier|final
name|ClusterStateTaskListener
name|listener
parameter_list|)
block|{
name|submitStateUpdateTasks
argument_list|(
name|source
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|task
argument_list|,
name|listener
argument_list|)
argument_list|,
name|config
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Submits a batch of cluster state update tasks; submitted updates are guaranteed to be processed together,      * potentially with more tasks of the same executor.      *      * @param source   the source of the cluster state update task      * @param tasks    a map of update tasks and their corresponding listeners      * @param config   the cluster state update task configuration      * @param executor the cluster state update task executor; tasks      *                 that share the same executor will be executed      *                 batches on this executor      * @param<T>      the type of the cluster state update task state      */
DECL|method|submitStateUpdateTasks
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|submitStateUpdateTasks
parameter_list|(
specifier|final
name|String
name|source
parameter_list|,
specifier|final
name|Map
argument_list|<
name|T
argument_list|,
name|ClusterStateTaskListener
argument_list|>
name|tasks
parameter_list|,
specifier|final
name|ClusterStateTaskConfig
name|config
parameter_list|,
specifier|final
name|ClusterStateTaskExecutor
argument_list|<
name|T
argument_list|>
name|executor
parameter_list|)
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|tasks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
comment|// convert to an identity map to check for dups based on update tasks semantics of using identity instead of equal
specifier|final
name|IdentityHashMap
argument_list|<
name|T
argument_list|,
name|ClusterStateTaskListener
argument_list|>
name|tasksIdentity
init|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|(
name|tasks
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|UpdateTask
argument_list|<
name|T
argument_list|>
argument_list|>
name|updateTasks
init|=
name|tasksIdentity
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|entry
lambda|->
operator|new
name|UpdateTask
argument_list|<>
argument_list|(
name|source
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|config
argument_list|,
name|executor
argument_list|,
name|safe
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|logger
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|updateTasksPerExecutor
init|)
block|{
name|List
argument_list|<
name|UpdateTask
argument_list|>
name|existingTasks
init|=
name|updateTasksPerExecutor
operator|.
name|computeIfAbsent
argument_list|(
name|executor
argument_list|,
name|k
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|UpdateTask
argument_list|<
name|T
argument_list|>
name|existing
range|:
name|existingTasks
control|)
block|{
if|if
condition|(
name|tasksIdentity
operator|.
name|containsKey
argument_list|(
name|existing
operator|.
name|task
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"task ["
operator|+
name|existing
operator|.
name|task
operator|+
literal|"] is already queued"
argument_list|)
throw|;
block|}
block|}
name|existingTasks
operator|.
name|addAll
argument_list|(
name|updateTasks
argument_list|)
expr_stmt|;
block|}
specifier|final
name|UpdateTask
argument_list|<
name|T
argument_list|>
name|firstTask
init|=
name|updateTasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|timeout
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|updateTasksExecutor
operator|.
name|execute
argument_list|(
name|firstTask
argument_list|,
name|threadPool
operator|.
name|scheduler
argument_list|()
argument_list|,
name|config
operator|.
name|timeout
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
block|for (UpdateTask<T> task : updateTasks
argument_list|)
block|{
if|if
condition|(
name|task
operator|.
name|processed
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"cluster state update task [{}] timed out after [{}]"
argument_list|,
name|source
argument_list|,
name|config
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|listener
operator|.
name|onFailure
argument_list|(
name|source
argument_list|,
operator|new
name|ProcessClusterEventTimeoutException
argument_list|(
name|config
operator|.
name|timeout
argument_list|()
argument_list|,
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|)
block|)
function|;
block|}
end_class

begin_else
else|else
block|{
name|updateTasksExecutor
operator|.
name|execute
argument_list|(
name|firstTask
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|} catch
operator|(
name|EsRejectedExecutionException
name|e
operator|)
block|{
comment|// ignore cases where we are shutting down..., there is really nothing interesting
comment|// to be done here...
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
end_expr_stmt

begin_comment
unit|}     }
comment|/**      * Returns the tasks that are pending.      */
end_comment

begin_function
DECL|method|pendingTasks
specifier|public
name|List
argument_list|<
name|PendingClusterTask
argument_list|>
name|pendingTasks
parameter_list|()
block|{
name|PrioritizedEsThreadPoolExecutor
operator|.
name|Pending
index|[]
name|pendings
init|=
name|updateTasksExecutor
operator|.
name|getPending
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PendingClusterTask
argument_list|>
name|pendingClusterTasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|pendings
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|PrioritizedEsThreadPoolExecutor
operator|.
name|Pending
name|pending
range|:
name|pendings
control|)
block|{
specifier|final
name|String
name|source
decl_stmt|;
specifier|final
name|long
name|timeInQueue
decl_stmt|;
comment|// we have to capture the task as it will be nulled after execution and we don't want to change while we check things here.
specifier|final
name|Object
name|task
init|=
name|pending
operator|.
name|task
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|task
operator|instanceof
name|SourcePrioritizedRunnable
condition|)
block|{
name|SourcePrioritizedRunnable
name|runnable
init|=
operator|(
name|SourcePrioritizedRunnable
operator|)
name|task
decl_stmt|;
name|source
operator|=
name|runnable
operator|.
name|source
argument_list|()
expr_stmt|;
name|timeInQueue
operator|=
name|runnable
operator|.
name|getAgeInMillis
argument_list|()
expr_stmt|;
block|}
else|else
block|{
assert|assert
literal|false
operator|:
literal|"expected SourcePrioritizedRunnable got "
operator|+
name|task
operator|.
name|getClass
argument_list|()
assert|;
name|source
operator|=
literal|"unknown ["
operator|+
name|task
operator|.
name|getClass
argument_list|()
operator|+
literal|"]"
expr_stmt|;
name|timeInQueue
operator|=
literal|0
expr_stmt|;
block|}
name|pendingClusterTasks
operator|.
name|add
argument_list|(
operator|new
name|PendingClusterTask
argument_list|(
name|pending
operator|.
name|insertionOrder
argument_list|,
name|pending
operator|.
name|priority
argument_list|,
operator|new
name|Text
argument_list|(
name|source
argument_list|)
argument_list|,
name|timeInQueue
argument_list|,
name|pending
operator|.
name|executing
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|pendingClusterTasks
return|;
block|}
end_function

begin_comment
comment|/**      * Returns the number of currently pending tasks.      */
end_comment

begin_function
DECL|method|numberOfPendingTasks
specifier|public
name|int
name|numberOfPendingTasks
parameter_list|()
block|{
return|return
name|updateTasksExecutor
operator|.
name|getNumberOfPendingTasks
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**      * Returns the maximum wait time for tasks in the queue      *      * @return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue      */
end_comment

begin_function
DECL|method|getMaxTaskWaitTime
specifier|public
name|TimeValue
name|getMaxTaskWaitTime
parameter_list|()
block|{
return|return
name|updateTasksExecutor
operator|.
name|getMaxTaskWaitTime
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/** asserts that the current thread is the cluster state update thread */
end_comment

begin_function
DECL|method|assertClusterStateThread
specifier|public
specifier|static
name|boolean
name|assertClusterStateThread
parameter_list|()
block|{
assert|assert
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|ClusterService
operator|.
name|UPDATE_THREAD_NAME
argument_list|)
operator|:
literal|"not called from the cluster state update thread"
assert|;
return|return
literal|true
return|;
block|}
end_function

begin_function
DECL|method|getClusterName
specifier|public
name|ClusterName
name|getClusterName
parameter_list|()
block|{
return|return
name|clusterName
return|;
block|}
end_function

begin_class
DECL|class|SourcePrioritizedRunnable
specifier|abstract
specifier|static
class|class
name|SourcePrioritizedRunnable
extends|extends
name|PrioritizedRunnable
block|{
DECL|field|source
specifier|protected
specifier|final
name|String
name|source
decl_stmt|;
DECL|method|SourcePrioritizedRunnable
specifier|public
name|SourcePrioritizedRunnable
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|String
name|source
parameter_list|)
block|{
name|super
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
DECL|method|source
specifier|public
name|String
name|source
parameter_list|()
block|{
return|return
name|source
return|;
block|}
block|}
end_class

begin_function
DECL|method|runTasksForExecutor
parameter_list|<
name|T
parameter_list|>
name|void
name|runTasksForExecutor
parameter_list|(
name|ClusterStateTaskExecutor
argument_list|<
name|T
argument_list|>
name|executor
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|UpdateTask
argument_list|<
name|T
argument_list|>
argument_list|>
name|toExecute
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|>
name|processTasksBySource
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|updateTasksPerExecutor
init|)
block|{
name|List
argument_list|<
name|UpdateTask
argument_list|>
name|pending
init|=
name|updateTasksPerExecutor
operator|.
name|remove
argument_list|(
name|executor
argument_list|)
decl_stmt|;
if|if
condition|(
name|pending
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|UpdateTask
argument_list|<
name|T
argument_list|>
name|task
range|:
name|pending
control|)
block|{
if|if
condition|(
name|task
operator|.
name|processed
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"will process [{}[{}]]"
argument_list|,
name|task
operator|.
name|source
argument_list|,
name|task
operator|.
name|task
argument_list|)
expr_stmt|;
name|toExecute
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|processTasksBySource
operator|.
name|computeIfAbsent
argument_list|(
name|task
operator|.
name|source
argument_list|,
name|s
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|task
operator|.
name|task
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"skipping [{}[{}]], already processed"
argument_list|,
name|task
operator|.
name|source
argument_list|,
name|task
operator|.
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|toExecute
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|String
name|tasksSummary
init|=
name|processTasksBySource
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|entry
lambda|->
block|{
name|String
name|tasks
init|=
name|executor
operator|.
name|describeTasks
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|tasks
operator|.
name|isEmpty
argument_list|()
condition|?
name|entry
operator|.
name|getKey
argument_list|()
else|:
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"["
operator|+
name|tasks
operator|+
literal|"]"
return|;
block|}
argument_list|)
operator|.
name|reduce
argument_list|(
parameter_list|(
name|s1
parameter_list|,
name|s2
parameter_list|)
lambda|->
name|s1
operator|+
literal|", "
operator|+
name|s2
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"processing [{}]: ignoring, cluster_service not started"
argument_list|,
name|tasksSummary
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"processing [{}]: execute"
argument_list|,
name|tasksSummary
argument_list|)
expr_stmt|;
name|ClusterState
name|previousClusterState
init|=
name|clusterState
decl_stmt|;
if|if
condition|(
operator|!
name|previousClusterState
operator|.
name|nodes
argument_list|()
operator|.
name|isLocalNodeElectedMaster
argument_list|()
operator|&&
name|executor
operator|.
name|runOnlyOnMaster
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failing [{}]: local node is no longer master"
argument_list|,
name|tasksSummary
argument_list|)
expr_stmt|;
name|toExecute
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|task
lambda|->
name|task
operator|.
name|listener
operator|.
name|onNoLongerMaster
argument_list|(
name|task
operator|.
name|source
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|ClusterStateTaskExecutor
operator|.
name|BatchResult
argument_list|<
name|T
argument_list|>
name|batchResult
decl_stmt|;
name|long
name|startTimeNS
init|=
name|currentTimeInNanos
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|T
argument_list|>
name|inputs
init|=
name|toExecute
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|tUpdateTask
lambda|->
name|tUpdateTask
operator|.
name|task
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|batchResult
operator|=
name|executor
operator|.
name|execute
argument_list|(
name|previousClusterState
argument_list|,
name|inputs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|TimeValue
name|executionTime
init|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|currentTimeInNanos
argument_list|()
operator|-
name|startTimeNS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"failed to execute cluster state update in [{}], state:\nversion [{}], source [{}]\n{}{}{}"
argument_list|,
name|e
argument_list|,
name|executionTime
argument_list|,
name|previousClusterState
operator|.
name|version
argument_list|()
argument_list|,
name|tasksSummary
argument_list|,
name|previousClusterState
operator|.
name|nodes
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|previousClusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|previousClusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|warnAboutSlowTaskIfNeeded
argument_list|(
name|executionTime
argument_list|,
name|tasksSummary
argument_list|)
expr_stmt|;
name|batchResult
operator|=
name|ClusterStateTaskExecutor
operator|.
name|BatchResult
operator|.
expr|<
name|T
operator|>
name|builder
argument_list|()
operator|.
name|failures
argument_list|(
name|toExecute
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|updateTask
lambda|->
name|updateTask
operator|.
name|task
argument_list|)
operator|::
name|iterator
argument_list|,
name|e
argument_list|)
operator|.
name|build
argument_list|(
name|previousClusterState
argument_list|)
expr_stmt|;
block|}
assert|assert
name|batchResult
operator|.
name|executionResults
operator|!=
literal|null
assert|;
assert|assert
name|batchResult
operator|.
name|executionResults
operator|.
name|size
argument_list|()
operator|==
name|toExecute
operator|.
name|size
argument_list|()
operator|:
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"expected [%d] task result%s but was [%d]"
argument_list|,
name|toExecute
operator|.
name|size
argument_list|()
argument_list|,
name|toExecute
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
literal|""
else|:
literal|"s"
argument_list|,
name|batchResult
operator|.
name|executionResults
operator|.
name|size
argument_list|()
argument_list|)
assert|;
name|boolean
name|assertsEnabled
init|=
literal|false
decl_stmt|;
assert|assert
operator|(
name|assertsEnabled
operator|=
literal|true
operator|)
assert|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
for|for
control|(
name|UpdateTask
argument_list|<
name|T
argument_list|>
name|updateTask
range|:
name|toExecute
control|)
block|{
assert|assert
name|batchResult
operator|.
name|executionResults
operator|.
name|containsKey
argument_list|(
name|updateTask
operator|.
name|task
argument_list|)
operator|:
literal|"missing task result for ["
operator|+
name|updateTask
operator|.
name|task
operator|+
literal|"]"
assert|;
block|}
block|}
name|ClusterState
name|newClusterState
init|=
name|batchResult
operator|.
name|resultingState
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|UpdateTask
argument_list|<
name|T
argument_list|>
argument_list|>
name|proccessedListeners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// fail all tasks that have failed and extract those that are waiting for results
for|for
control|(
name|UpdateTask
argument_list|<
name|T
argument_list|>
name|updateTask
range|:
name|toExecute
control|)
block|{
assert|assert
name|batchResult
operator|.
name|executionResults
operator|.
name|containsKey
argument_list|(
name|updateTask
operator|.
name|task
argument_list|)
operator|:
literal|"missing "
operator|+
name|updateTask
operator|.
name|task
operator|.
name|toString
argument_list|()
assert|;
specifier|final
name|ClusterStateTaskExecutor
operator|.
name|TaskResult
name|executionResult
init|=
name|batchResult
operator|.
name|executionResults
operator|.
name|get
argument_list|(
name|updateTask
operator|.
name|task
argument_list|)
decl_stmt|;
name|executionResult
operator|.
name|handle
argument_list|(
parameter_list|()
lambda|->
name|proccessedListeners
operator|.
name|add
argument_list|(
name|updateTask
argument_list|)
argument_list|,
name|ex
lambda|->
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"cluster state update task [{}] failed"
argument_list|,
name|ex
argument_list|,
name|updateTask
operator|.
name|source
argument_list|)
argument_list|;
name|updateTask
operator|.
name|listener
operator|.
name|onFailure
argument_list|(
name|updateTask
operator|.
name|source
argument_list|,
name|ex
argument_list|)
argument_list|;
block|}
block|)
function|;
end_function

begin_expr_stmt
unit|}          if
operator|(
name|previousClusterState
operator|==
name|newClusterState
operator|)
block|{
for|for
control|(
name|UpdateTask
argument_list|<
name|T
argument_list|>
name|task
range|:
name|proccessedListeners
control|)
block|{
if|if
condition|(
name|task
operator|.
name|listener
operator|instanceof
name|AckedClusterStateTaskListener
condition|)
block|{
comment|//no need to wait for ack if nothing changed, the update can be counted as acknowledged
operator|(
operator|(
name|AckedClusterStateTaskListener
operator|)
name|task
operator|.
name|listener
operator|)
operator|.
name|onAllNodesAcked
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|task
operator|.
name|listener
operator|.
name|clusterStateProcessed
argument_list|(
name|task
operator|.
name|source
argument_list|,
name|previousClusterState
argument_list|,
name|newClusterState
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}             TimeValue
name|executionTime
operator|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|currentTimeInNanos
argument_list|()
operator|-
name|startTimeNS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|logger
operator|.
name|debug
argument_list|(
literal|"processing [{}]: took [{}] no change in cluster_state"
argument_list|,
name|tasksSummary
argument_list|,
name|executionTime
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|warnAboutSlowTaskIfNeeded
argument_list|(
name|executionTime
argument_list|,
name|tasksSummary
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return;
end_return

begin_block
unit|}          try
block|{
name|ArrayList
argument_list|<
name|Discovery
operator|.
name|AckListener
argument_list|>
name|ackListeners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|newClusterState
operator|.
name|nodes
argument_list|()
operator|.
name|isLocalNodeElectedMaster
argument_list|()
condition|)
block|{
comment|// only the master controls the version numbers
name|Builder
name|builder
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|newClusterState
argument_list|)
operator|.
name|incrementVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|previousClusterState
operator|.
name|routingTable
argument_list|()
operator|!=
name|newClusterState
operator|.
name|routingTable
argument_list|()
condition|)
block|{
name|builder
operator|.
name|routingTable
argument_list|(
name|RoutingTable
operator|.
name|builder
argument_list|(
name|newClusterState
operator|.
name|routingTable
argument_list|()
argument_list|)
operator|.
name|version
argument_list|(
name|newClusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|previousClusterState
operator|.
name|metaData
argument_list|()
operator|!=
name|newClusterState
operator|.
name|metaData
argument_list|()
condition|)
block|{
name|builder
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|(
name|newClusterState
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|version
argument_list|(
name|newClusterState
operator|.
name|metaData
argument_list|()
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newClusterState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
for|for
control|(
name|UpdateTask
argument_list|<
name|T
argument_list|>
name|task
range|:
name|proccessedListeners
control|)
block|{
if|if
condition|(
name|task
operator|.
name|listener
operator|instanceof
name|AckedClusterStateTaskListener
condition|)
block|{
specifier|final
name|AckedClusterStateTaskListener
name|ackedListener
init|=
operator|(
name|AckedClusterStateTaskListener
operator|)
name|task
operator|.
name|listener
decl_stmt|;
if|if
condition|(
name|ackedListener
operator|.
name|ackTimeout
argument_list|()
operator|==
literal|null
operator|||
name|ackedListener
operator|.
name|ackTimeout
argument_list|()
operator|.
name|millis
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ackedListener
operator|.
name|onAckTimeout
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|ackListeners
operator|.
name|add
argument_list|(
operator|new
name|AckCountDownListener
argument_list|(
name|ackedListener
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|,
name|newClusterState
operator|.
name|nodes
argument_list|()
argument_list|,
name|threadPool
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EsRejectedExecutionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Couldn't schedule timeout thread - node might be shutting down"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
comment|//timeout straightaway, otherwise we could wait forever as the timeout thread has not started
name|ackedListener
operator|.
name|onAckTimeout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|final
name|Discovery
operator|.
name|AckListener
name|ackListener
init|=
operator|new
name|DelegetingAckListener
argument_list|(
name|ackListeners
argument_list|)
decl_stmt|;
name|newClusterState
operator|.
name|status
argument_list|(
name|ClusterState
operator|.
name|ClusterStateStatus
operator|.
name|BEING_APPLIED
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"cluster state updated, source [{}]\n{}"
argument_list|,
name|tasksSummary
argument_list|,
name|newClusterState
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"cluster state updated, version [{}], source [{}]"
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|,
name|tasksSummary
argument_list|)
expr_stmt|;
block|}
name|ClusterChangedEvent
name|clusterChangedEvent
init|=
operator|new
name|ClusterChangedEvent
argument_list|(
name|tasksSummary
argument_list|,
name|newClusterState
argument_list|,
name|previousClusterState
argument_list|)
decl_stmt|;
comment|// new cluster state, notify all listeners
specifier|final
name|DiscoveryNodes
operator|.
name|Delta
name|nodesDelta
init|=
name|clusterChangedEvent
operator|.
name|nodesDelta
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodesDelta
operator|.
name|hasChanges
argument_list|()
operator|&&
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|String
name|summary
init|=
name|nodesDelta
operator|.
name|shortSummary
argument_list|()
decl_stmt|;
if|if
condition|(
name|summary
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"{}, reason: {}"
argument_list|,
name|summary
argument_list|,
name|tasksSummary
argument_list|)
expr_stmt|;
block|}
block|}
name|nodeConnectionsService
operator|.
name|connectToAddedNodes
argument_list|(
name|clusterChangedEvent
argument_list|)
expr_stmt|;
comment|// if we are the master, publish the new state to all nodes
comment|// we publish here before we send a notification to all the listeners, since if it fails
comment|// we don't want to notify
if|if
condition|(
name|newClusterState
operator|.
name|nodes
argument_list|()
operator|.
name|isLocalNodeElectedMaster
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"publishing cluster state version [{}]"
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|clusterStatePublisher
operator|.
name|accept
argument_list|(
name|clusterChangedEvent
argument_list|,
name|ackListener
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Discovery
operator|.
name|FailedToCommitClusterStateException
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failing [{}]: failed to commit cluster state version [{}]"
argument_list|,
name|t
argument_list|,
name|tasksSummary
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|proccessedListeners
operator|.
name|forEach
argument_list|(
name|task
lambda|->
name|task
operator|.
name|listener
operator|.
name|onFailure
argument_list|(
name|task
operator|.
name|source
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// update the current cluster state
name|clusterState
operator|=
name|newClusterState
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"set local cluster state to version {}"
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// nothing to do until we actually recover from the gateway or any other block indicates we need to disable persistency
if|if
condition|(
name|clusterChangedEvent
operator|.
name|state
argument_list|()
operator|.
name|blocks
argument_list|()
operator|.
name|disableStatePersistence
argument_list|()
operator|==
literal|false
operator|&&
name|clusterChangedEvent
operator|.
name|metaDataChanged
argument_list|()
condition|)
block|{
specifier|final
name|Settings
name|incomingSettings
init|=
name|clusterChangedEvent
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|settings
argument_list|()
decl_stmt|;
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|incomingSettings
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to apply cluster settings"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ClusterStateListener
name|listener
range|:
name|preAppliedListeners
control|)
block|{
try|try
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"calling [{}] with change to version [{}]"
argument_list|,
name|listener
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|clusterChanged
argument_list|(
name|clusterChangedEvent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to notify ClusterStateListener"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|nodeConnectionsService
operator|.
name|disconnectFromRemovedNodes
argument_list|(
name|clusterChangedEvent
argument_list|)
expr_stmt|;
name|newClusterState
operator|.
name|status
argument_list|(
name|ClusterState
operator|.
name|ClusterStateStatus
operator|.
name|APPLIED
argument_list|)
expr_stmt|;
for|for
control|(
name|ClusterStateListener
name|listener
range|:
name|postAppliedListeners
control|)
block|{
try|try
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"calling [{}] with change to version [{}]"
argument_list|,
name|listener
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|clusterChanged
argument_list|(
name|clusterChangedEvent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to notify ClusterStateListener"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|//manual ack only from the master at the end of the publish
if|if
condition|(
name|newClusterState
operator|.
name|nodes
argument_list|()
operator|.
name|isLocalNodeElectedMaster
argument_list|()
condition|)
block|{
try|try
block|{
name|ackListener
operator|.
name|onNodeAck
argument_list|(
name|newClusterState
operator|.
name|nodes
argument_list|()
operator|.
name|getLocalNode
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"error while processing ack for master node [{}]"
argument_list|,
name|e
argument_list|,
name|newClusterState
operator|.
name|nodes
argument_list|()
operator|.
name|getLocalNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|UpdateTask
argument_list|<
name|T
argument_list|>
name|task
range|:
name|proccessedListeners
control|)
block|{
name|task
operator|.
name|listener
operator|.
name|clusterStateProcessed
argument_list|(
name|task
operator|.
name|source
argument_list|,
name|previousClusterState
argument_list|,
name|newClusterState
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|executor
operator|.
name|clusterStatePublished
argument_list|(
name|clusterChangedEvent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"exception thrown while notifying executor of new cluster state publication [{}]"
argument_list|,
name|e
argument_list|,
name|tasksSummary
argument_list|)
expr_stmt|;
block|}
name|TimeValue
name|executionTime
init|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|currentTimeInNanos
argument_list|()
operator|-
name|startTimeNS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"processing [{}]: took [{}] done applying updated cluster_state (version: {}, uuid: {})"
argument_list|,
name|tasksSummary
argument_list|,
name|executionTime
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|,
name|newClusterState
operator|.
name|stateUUID
argument_list|()
argument_list|)
expr_stmt|;
name|warnAboutSlowTaskIfNeeded
argument_list|(
name|executionTime
argument_list|,
name|tasksSummary
argument_list|)
expr_stmt|;
block|}
end_block

begin_catch
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|TimeValue
name|executionTime
init|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|currentTimeInNanos
argument_list|()
operator|-
name|startTimeNS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to apply updated cluster state in [{}]:\nversion [{}], uuid [{}], source [{}]\n{}"
argument_list|,
name|e
argument_list|,
name|executionTime
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|,
name|newClusterState
operator|.
name|stateUUID
argument_list|()
argument_list|,
name|tasksSummary
argument_list|,
name|newClusterState
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: do we want to call updateTask.onFailure here?
block|}
end_catch

begin_comment
unit|}
comment|// this one is overridden in tests so we can control time
end_comment

begin_function
DECL|method|currentTimeInNanos
unit|protected
name|long
name|currentTimeInNanos
parameter_list|()
block|{
return|return
name|System
operator|.
name|nanoTime
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|safe
specifier|private
specifier|static
name|SafeClusterStateTaskListener
name|safe
parameter_list|(
name|ClusterStateTaskListener
name|listener
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|instanceof
name|AckedClusterStateTaskListener
condition|)
block|{
return|return
operator|new
name|SafeAckedClusterStateTaskListener
argument_list|(
operator|(
name|AckedClusterStateTaskListener
operator|)
name|listener
argument_list|,
name|logger
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SafeClusterStateTaskListener
argument_list|(
name|listener
argument_list|,
name|logger
argument_list|)
return|;
block|}
block|}
end_function

begin_class
DECL|class|SafeClusterStateTaskListener
specifier|private
specifier|static
class|class
name|SafeClusterStateTaskListener
implements|implements
name|ClusterStateTaskListener
block|{
DECL|field|listener
specifier|private
specifier|final
name|ClusterStateTaskListener
name|listener
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|method|SafeClusterStateTaskListener
specifier|public
name|SafeClusterStateTaskListener
parameter_list|(
name|ClusterStateTaskListener
name|listener
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|source
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|inner
parameter_list|)
block|{
name|inner
operator|.
name|addSuppressed
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"exception thrown by listener notifying of failure from [{}]"
argument_list|,
name|inner
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onNoLongerMaster
specifier|public
name|void
name|onNoLongerMaster
parameter_list|(
name|String
name|source
parameter_list|)
block|{
try|try
block|{
name|listener
operator|.
name|onNoLongerMaster
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"exception thrown by listener while notifying no longer master from [{}]"
argument_list|,
name|e
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|clusterStateProcessed
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
try|try
block|{
name|listener
operator|.
name|clusterStateProcessed
argument_list|(
name|source
argument_list|,
name|oldState
argument_list|,
name|newState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"exception thrown by listener while notifying of cluster state processed from [{}], old cluster state:\n"
operator|+
literal|"{}\nnew cluster state:\n{}"
argument_list|,
name|e
argument_list|,
name|source
argument_list|,
name|oldState
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|newState
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|SafeAckedClusterStateTaskListener
specifier|private
specifier|static
class|class
name|SafeAckedClusterStateTaskListener
extends|extends
name|SafeClusterStateTaskListener
implements|implements
name|AckedClusterStateTaskListener
block|{
DECL|field|listener
specifier|private
specifier|final
name|AckedClusterStateTaskListener
name|listener
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|method|SafeAckedClusterStateTaskListener
specifier|public
name|SafeAckedClusterStateTaskListener
parameter_list|(
name|AckedClusterStateTaskListener
name|listener
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
name|super
argument_list|(
name|listener
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|mustAck
specifier|public
name|boolean
name|mustAck
parameter_list|(
name|DiscoveryNode
name|discoveryNode
parameter_list|)
block|{
return|return
name|listener
operator|.
name|mustAck
argument_list|(
name|discoveryNode
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|onAllNodesAcked
specifier|public
name|void
name|onAllNodesAcked
parameter_list|(
annotation|@
name|Nullable
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|listener
operator|.
name|onAllNodesAcked
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|inner
parameter_list|)
block|{
name|inner
operator|.
name|addSuppressed
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"exception thrown by listener while notifying on all nodes acked"
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onAckTimeout
specifier|public
name|void
name|onAckTimeout
parameter_list|()
block|{
try|try
block|{
name|listener
operator|.
name|onAckTimeout
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"exception thrown by listener while notifying on ack timeout"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|ackTimeout
specifier|public
name|TimeValue
name|ackTimeout
parameter_list|()
block|{
return|return
name|listener
operator|.
name|ackTimeout
argument_list|()
return|;
block|}
block|}
end_class

begin_class
DECL|class|UpdateTask
class|class
name|UpdateTask
parameter_list|<
name|T
parameter_list|>
extends|extends
name|SourcePrioritizedRunnable
block|{
DECL|field|task
specifier|public
specifier|final
name|T
name|task
decl_stmt|;
DECL|field|config
specifier|public
specifier|final
name|ClusterStateTaskConfig
name|config
decl_stmt|;
DECL|field|executor
specifier|public
specifier|final
name|ClusterStateTaskExecutor
argument_list|<
name|T
argument_list|>
name|executor
decl_stmt|;
DECL|field|listener
specifier|public
specifier|final
name|ClusterStateTaskListener
name|listener
decl_stmt|;
DECL|field|processed
specifier|public
specifier|final
name|AtomicBoolean
name|processed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|method|UpdateTask
name|UpdateTask
parameter_list|(
name|String
name|source
parameter_list|,
name|T
name|task
parameter_list|,
name|ClusterStateTaskConfig
name|config
parameter_list|,
name|ClusterStateTaskExecutor
argument_list|<
name|T
argument_list|>
name|executor
parameter_list|,
name|ClusterStateTaskListener
name|listener
parameter_list|)
block|{
name|super
argument_list|(
name|config
operator|.
name|priority
argument_list|()
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|runTasksForExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_function
DECL|method|warnAboutSlowTaskIfNeeded
specifier|private
name|void
name|warnAboutSlowTaskIfNeeded
parameter_list|(
name|TimeValue
name|executionTime
parameter_list|,
name|String
name|source
parameter_list|)
block|{
if|if
condition|(
name|executionTime
operator|.
name|getMillis
argument_list|()
operator|>
name|slowTaskLoggingThreshold
operator|.
name|getMillis
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"cluster state update task [{}] took [{}] above the warn threshold of {}"
argument_list|,
name|source
argument_list|,
name|executionTime
argument_list|,
name|slowTaskLoggingThreshold
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_class
DECL|class|NotifyTimeout
class|class
name|NotifyTimeout
implements|implements
name|Runnable
block|{
DECL|field|listener
specifier|final
name|TimeoutClusterStateListener
name|listener
decl_stmt|;
DECL|field|timeout
specifier|final
name|TimeValue
name|timeout
decl_stmt|;
DECL|field|future
specifier|volatile
name|ScheduledFuture
name|future
decl_stmt|;
DECL|method|NotifyTimeout
name|NotifyTimeout
parameter_list|(
name|TimeoutClusterStateListener
name|listener
parameter_list|,
name|TimeValue
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
DECL|method|cancel
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|FutureUtils
operator|.
name|cancel
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|future
operator|!=
literal|null
operator|&&
name|future
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onClose
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onTimeout
argument_list|(
name|this
operator|.
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|// note, we rely on the listener to remove itself in case of timeout if needed
block|}
block|}
end_class

begin_class
DECL|class|LocalNodeMasterListeners
specifier|private
specifier|static
class|class
name|LocalNodeMasterListeners
implements|implements
name|ClusterStateListener
block|{
DECL|field|listeners
specifier|private
specifier|final
name|List
argument_list|<
name|LocalNodeMasterListener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|master
specifier|private
specifier|volatile
name|boolean
name|master
init|=
literal|false
decl_stmt|;
DECL|method|LocalNodeMasterListeners
specifier|private
name|LocalNodeMasterListeners
parameter_list|(
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clusterChanged
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|master
operator|&&
name|event
operator|.
name|localNodeMaster
argument_list|()
condition|)
block|{
name|master
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|LocalNodeMasterListener
name|listener
range|:
name|listeners
control|)
block|{
name|Executor
name|executor
init|=
name|threadPool
operator|.
name|executor
argument_list|(
name|listener
operator|.
name|executorName
argument_list|()
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|OnMasterRunnable
argument_list|(
name|listener
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|master
operator|&&
operator|!
name|event
operator|.
name|localNodeMaster
argument_list|()
condition|)
block|{
name|master
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|LocalNodeMasterListener
name|listener
range|:
name|listeners
control|)
block|{
name|Executor
name|executor
init|=
name|threadPool
operator|.
name|executor
argument_list|(
name|listener
operator|.
name|executorName
argument_list|()
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|OffMasterRunnable
argument_list|(
name|listener
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|add
specifier|private
name|void
name|add
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|remove
specifier|private
name|void
name|remove
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|clear
specifier|private
name|void
name|clear
parameter_list|()
block|{
name|listeners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|OnMasterRunnable
specifier|private
specifier|static
class|class
name|OnMasterRunnable
implements|implements
name|Runnable
block|{
DECL|field|listener
specifier|private
specifier|final
name|LocalNodeMasterListener
name|listener
decl_stmt|;
DECL|method|OnMasterRunnable
specifier|private
name|OnMasterRunnable
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|listener
operator|.
name|onMaster
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|OffMasterRunnable
specifier|private
specifier|static
class|class
name|OffMasterRunnable
implements|implements
name|Runnable
block|{
DECL|field|listener
specifier|private
specifier|final
name|LocalNodeMasterListener
name|listener
decl_stmt|;
DECL|method|OffMasterRunnable
specifier|private
name|OffMasterRunnable
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|listener
operator|.
name|offMaster
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|DelegetingAckListener
specifier|private
specifier|static
class|class
name|DelegetingAckListener
implements|implements
name|Discovery
operator|.
name|AckListener
block|{
DECL|field|listeners
specifier|private
specifier|final
name|List
argument_list|<
name|Discovery
operator|.
name|AckListener
argument_list|>
name|listeners
decl_stmt|;
DECL|method|DelegetingAckListener
specifier|private
name|DelegetingAckListener
parameter_list|(
name|List
argument_list|<
name|Discovery
operator|.
name|AckListener
argument_list|>
name|listeners
parameter_list|)
block|{
name|this
operator|.
name|listeners
operator|=
name|listeners
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onNodeAck
specifier|public
name|void
name|onNodeAck
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
annotation|@
name|Nullable
name|Exception
name|e
parameter_list|)
block|{
for|for
control|(
name|Discovery
operator|.
name|AckListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onNodeAck
argument_list|(
name|node
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onTimeout
specifier|public
name|void
name|onTimeout
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"no timeout delegation"
argument_list|)
throw|;
block|}
block|}
end_class

begin_class
DECL|class|AckCountDownListener
specifier|private
specifier|static
class|class
name|AckCountDownListener
implements|implements
name|Discovery
operator|.
name|AckListener
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|AckCountDownListener
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ackedTaskListener
specifier|private
specifier|final
name|AckedClusterStateTaskListener
name|ackedTaskListener
decl_stmt|;
DECL|field|countDown
specifier|private
specifier|final
name|CountDown
name|countDown
decl_stmt|;
DECL|field|nodes
specifier|private
specifier|final
name|DiscoveryNodes
name|nodes
decl_stmt|;
DECL|field|clusterStateVersion
specifier|private
specifier|final
name|long
name|clusterStateVersion
decl_stmt|;
DECL|field|ackTimeoutCallback
specifier|private
specifier|final
name|Future
argument_list|<
name|?
argument_list|>
name|ackTimeoutCallback
decl_stmt|;
DECL|field|lastFailure
specifier|private
name|Exception
name|lastFailure
decl_stmt|;
DECL|method|AckCountDownListener
name|AckCountDownListener
parameter_list|(
name|AckedClusterStateTaskListener
name|ackedTaskListener
parameter_list|,
name|long
name|clusterStateVersion
parameter_list|,
name|DiscoveryNodes
name|nodes
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|this
operator|.
name|ackedTaskListener
operator|=
name|ackedTaskListener
expr_stmt|;
name|this
operator|.
name|clusterStateVersion
operator|=
name|clusterStateVersion
expr_stmt|;
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
name|int
name|countDown
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|ackedTaskListener
operator|.
name|mustAck
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|countDown
operator|++
expr_stmt|;
block|}
block|}
comment|//we always wait for at least 1 node (the master)
name|countDown
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|countDown
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"expecting {} acknowledgements for cluster_state update (version: {})"
argument_list|,
name|countDown
argument_list|,
name|clusterStateVersion
argument_list|)
expr_stmt|;
name|this
operator|.
name|countDown
operator|=
operator|new
name|CountDown
argument_list|(
name|countDown
argument_list|)
expr_stmt|;
name|this
operator|.
name|ackTimeoutCallback
operator|=
name|threadPool
operator|.
name|schedule
argument_list|(
name|ackedTaskListener
operator|.
name|ackTimeout
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|onTimeout
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onNodeAck
specifier|public
name|void
name|onNodeAck
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
annotation|@
name|Nullable
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ackedTaskListener
operator|.
name|mustAck
argument_list|(
name|node
argument_list|)
condition|)
block|{
comment|//we always wait for the master ack anyway
if|if
condition|(
operator|!
name|node
operator|.
name|equals
argument_list|(
name|nodes
operator|.
name|getMasterNode
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"ack received from node [{}], cluster_state update (version: {})"
argument_list|,
name|node
argument_list|,
name|clusterStateVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|lastFailure
operator|=
name|e
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"ack received from node [{}], cluster_state update (version: {})"
argument_list|,
name|e
argument_list|,
name|node
argument_list|,
name|clusterStateVersion
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|countDown
operator|.
name|countDown
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"all expected nodes acknowledged cluster_state update (version: {})"
argument_list|,
name|clusterStateVersion
argument_list|)
expr_stmt|;
name|FutureUtils
operator|.
name|cancel
argument_list|(
name|ackTimeoutCallback
argument_list|)
expr_stmt|;
name|ackedTaskListener
operator|.
name|onAllNodesAcked
argument_list|(
name|lastFailure
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onTimeout
specifier|public
name|void
name|onTimeout
parameter_list|()
block|{
if|if
condition|(
name|countDown
operator|.
name|fastForward
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"timeout waiting for acknowledgement for cluster_state update (version: {})"
argument_list|,
name|clusterStateVersion
argument_list|)
expr_stmt|;
name|ackedTaskListener
operator|.
name|onAckTimeout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_function
DECL|method|getClusterSettings
specifier|public
name|ClusterSettings
name|getClusterSettings
parameter_list|()
block|{
return|return
name|clusterSettings
return|;
block|}
end_function

begin_function
DECL|method|getSettings
specifier|public
name|Settings
name|getSettings
parameter_list|()
block|{
return|return
name|settings
return|;
block|}
end_function

unit|}
end_unit

