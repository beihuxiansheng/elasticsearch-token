begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.service
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|AckedClusterStateTaskListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskExecutor
operator|.
name|ClusterTasksResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|ProcessClusterEventTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDown
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PrioritizedEsThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
operator|.
name|CLUSTER_SERVICE_SLOW_TASK_LOGGING_THRESHOLD_SETTING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
operator|.
name|daemonThreadFactory
import|;
end_import

begin_class
DECL|class|MasterService
specifier|public
class|class
name|MasterService
extends|extends
name|AbstractLifecycleComponent
block|{
DECL|field|MASTER_UPDATE_THREAD_NAME
specifier|public
specifier|static
specifier|final
name|String
name|MASTER_UPDATE_THREAD_NAME
init|=
literal|"masterService#updateTask"
decl_stmt|;
DECL|field|clusterStatePublisher
specifier|private
name|BiConsumer
argument_list|<
name|ClusterChangedEvent
argument_list|,
name|Discovery
operator|.
name|AckListener
argument_list|>
name|clusterStatePublisher
decl_stmt|;
DECL|field|clusterStateSupplier
specifier|private
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
argument_list|<
name|ClusterState
argument_list|>
name|clusterStateSupplier
decl_stmt|;
DECL|field|slowTaskLoggingThreshold
specifier|private
specifier|volatile
name|TimeValue
name|slowTaskLoggingThreshold
decl_stmt|;
DECL|field|threadPool
specifier|protected
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|threadPoolExecutor
specifier|private
specifier|volatile
name|PrioritizedEsThreadPoolExecutor
name|threadPoolExecutor
decl_stmt|;
DECL|field|taskBatcher
specifier|private
specifier|volatile
name|Batcher
name|taskBatcher
decl_stmt|;
DECL|method|MasterService
specifier|public
name|MasterService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// TODO: introduce a dedicated setting for master service
name|this
operator|.
name|slowTaskLoggingThreshold
operator|=
name|CLUSTER_SERVICE_SLOW_TASK_LOGGING_THRESHOLD_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
block|}
DECL|method|setSlowTaskLoggingThreshold
specifier|public
name|void
name|setSlowTaskLoggingThreshold
parameter_list|(
name|TimeValue
name|slowTaskLoggingThreshold
parameter_list|)
block|{
name|this
operator|.
name|slowTaskLoggingThreshold
operator|=
name|slowTaskLoggingThreshold
expr_stmt|;
block|}
DECL|method|setClusterStatePublisher
specifier|public
specifier|synchronized
name|void
name|setClusterStatePublisher
parameter_list|(
name|BiConsumer
argument_list|<
name|ClusterChangedEvent
argument_list|,
name|Discovery
operator|.
name|AckListener
argument_list|>
name|publisher
parameter_list|)
block|{
name|clusterStatePublisher
operator|=
name|publisher
expr_stmt|;
block|}
DECL|method|setClusterStateSupplier
specifier|public
specifier|synchronized
name|void
name|setClusterStateSupplier
parameter_list|(
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
argument_list|<
name|ClusterState
argument_list|>
name|clusterStateSupplier
parameter_list|)
block|{
name|this
operator|.
name|clusterStateSupplier
operator|=
name|clusterStateSupplier
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
specifier|synchronized
name|void
name|doStart
parameter_list|()
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|clusterStatePublisher
argument_list|,
literal|"please set a cluster state publisher before starting"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|clusterStateSupplier
argument_list|,
literal|"please set a cluster state supplier before starting"
argument_list|)
expr_stmt|;
name|threadPoolExecutor
operator|=
name|EsExecutors
operator|.
name|newSinglePrioritizing
argument_list|(
name|MASTER_UPDATE_THREAD_NAME
argument_list|,
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
name|MASTER_UPDATE_THREAD_NAME
argument_list|)
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|,
name|threadPool
operator|.
name|scheduler
argument_list|()
argument_list|)
expr_stmt|;
name|taskBatcher
operator|=
operator|new
name|Batcher
argument_list|(
name|logger
argument_list|,
name|threadPoolExecutor
argument_list|)
expr_stmt|;
block|}
DECL|class|Batcher
class|class
name|Batcher
extends|extends
name|TaskBatcher
block|{
DECL|method|Batcher
name|Batcher
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|PrioritizedEsThreadPoolExecutor
name|threadExecutor
parameter_list|)
block|{
name|super
argument_list|(
name|logger
argument_list|,
name|threadExecutor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onTimeout
specifier|protected
name|void
name|onTimeout
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|BatchedTask
argument_list|>
name|tasks
parameter_list|,
name|TimeValue
name|timeout
parameter_list|)
block|{
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|tasks
operator|.
name|forEach
argument_list|(
name|task
lambda|->
operator|(
operator|(
name|UpdateTask
operator|)
name|task
operator|)
operator|.
name|listener
operator|.
name|onFailure
argument_list|(
name|task
operator|.
name|source
argument_list|,
operator|new
name|ProcessClusterEventTimeoutException
argument_list|(
name|timeout
argument_list|,
name|task
operator|.
name|source
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|protected
name|void
name|run
parameter_list|(
name|Object
name|batchingKey
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|BatchedTask
argument_list|>
name|tasks
parameter_list|,
name|String
name|tasksSummary
parameter_list|)
block|{
name|ClusterStateTaskExecutor
argument_list|<
name|Object
argument_list|>
name|taskExecutor
init|=
operator|(
name|ClusterStateTaskExecutor
argument_list|<
name|Object
argument_list|>
operator|)
name|batchingKey
decl_stmt|;
name|List
argument_list|<
name|UpdateTask
argument_list|>
name|updateTasks
init|=
operator|(
name|List
argument_list|<
name|UpdateTask
argument_list|>
operator|)
name|tasks
decl_stmt|;
name|runTasks
argument_list|(
operator|new
name|TaskInputs
argument_list|(
name|taskExecutor
argument_list|,
name|updateTasks
argument_list|,
name|tasksSummary
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|UpdateTask
class|class
name|UpdateTask
extends|extends
name|BatchedTask
block|{
DECL|field|listener
specifier|final
name|ClusterStateTaskListener
name|listener
decl_stmt|;
DECL|method|UpdateTask
name|UpdateTask
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|String
name|source
parameter_list|,
name|Object
name|task
parameter_list|,
name|ClusterStateTaskListener
name|listener
parameter_list|,
name|ClusterStateTaskExecutor
argument_list|<
name|?
argument_list|>
name|executor
parameter_list|)
block|{
name|super
argument_list|(
name|priority
argument_list|,
name|source
argument_list|,
name|executor
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|describeTasks
specifier|public
name|String
name|describeTasks
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|BatchedTask
argument_list|>
name|tasks
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ClusterStateTaskExecutor
argument_list|<
name|Object
argument_list|>
operator|)
name|batchingKey
operator|)
operator|.
name|describeTasks
argument_list|(
name|tasks
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|BatchedTask
operator|::
name|getTask
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doStop
specifier|protected
specifier|synchronized
name|void
name|doStop
parameter_list|()
block|{
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|threadPoolExecutor
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
specifier|synchronized
name|void
name|doClose
parameter_list|()
block|{     }
comment|/**      * The current cluster state exposed by the discovery layer. Package-visible for tests.      */
DECL|method|state
name|ClusterState
name|state
parameter_list|()
block|{
return|return
name|clusterStateSupplier
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|assertMasterUpdateThread
specifier|public
specifier|static
name|boolean
name|assertMasterUpdateThread
parameter_list|()
block|{
assert|assert
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|MASTER_UPDATE_THREAD_NAME
argument_list|)
operator|:
literal|"not called from the master service thread"
assert|;
return|return
literal|true
return|;
block|}
DECL|method|assertNotMasterUpdateThread
specifier|public
specifier|static
name|boolean
name|assertNotMasterUpdateThread
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
assert|assert
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|MASTER_UPDATE_THREAD_NAME
argument_list|)
operator|==
literal|false
operator|:
literal|"Expected current thread ["
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|+
literal|"] to not be the master service thread. Reason: ["
operator|+
name|reason
operator|+
literal|"]"
assert|;
return|return
literal|true
return|;
block|}
DECL|method|runTasks
specifier|protected
name|void
name|runTasks
parameter_list|(
name|TaskInputs
name|taskInputs
parameter_list|)
block|{
specifier|final
name|String
name|summary
init|=
name|taskInputs
operator|.
name|summary
decl_stmt|;
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"processing [{}]: ignoring, master service not started"
argument_list|,
name|summary
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"processing [{}]: execute"
argument_list|,
name|summary
argument_list|)
expr_stmt|;
specifier|final
name|ClusterState
name|previousClusterState
init|=
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|previousClusterState
operator|.
name|nodes
argument_list|()
operator|.
name|isLocalNodeElectedMaster
argument_list|()
operator|&&
name|taskInputs
operator|.
name|runOnlyWhenMaster
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failing [{}]: local node is no longer master"
argument_list|,
name|summary
argument_list|)
expr_stmt|;
name|taskInputs
operator|.
name|onNoLongerMaster
argument_list|()
expr_stmt|;
return|return;
block|}
name|long
name|startTimeNS
init|=
name|currentTimeInNanos
argument_list|()
decl_stmt|;
name|TaskOutputs
name|taskOutputs
init|=
name|calculateTaskOutputs
argument_list|(
name|taskInputs
argument_list|,
name|previousClusterState
argument_list|,
name|startTimeNS
argument_list|)
decl_stmt|;
name|taskOutputs
operator|.
name|notifyFailedTasks
argument_list|()
expr_stmt|;
if|if
condition|(
name|taskOutputs
operator|.
name|clusterStateUnchanged
argument_list|()
condition|)
block|{
name|taskOutputs
operator|.
name|notifySuccessfulTasksOnUnchangedClusterState
argument_list|()
expr_stmt|;
name|TimeValue
name|executionTime
init|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|currentTimeInNanos
argument_list|()
operator|-
name|startTimeNS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"processing [{}]: took [{}] no change in cluster state"
argument_list|,
name|summary
argument_list|,
name|executionTime
argument_list|)
expr_stmt|;
name|warnAboutSlowTaskIfNeeded
argument_list|(
name|executionTime
argument_list|,
name|summary
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ClusterState
name|newClusterState
init|=
name|taskOutputs
operator|.
name|newClusterState
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"cluster state updated, source [{}]\n{}"
argument_list|,
name|summary
argument_list|,
name|newClusterState
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"cluster state updated, version [{}], source [{}]"
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|,
name|summary
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ClusterChangedEvent
name|clusterChangedEvent
init|=
operator|new
name|ClusterChangedEvent
argument_list|(
name|summary
argument_list|,
name|newClusterState
argument_list|,
name|previousClusterState
argument_list|)
decl_stmt|;
comment|// new cluster state, notify all listeners
specifier|final
name|DiscoveryNodes
operator|.
name|Delta
name|nodesDelta
init|=
name|clusterChangedEvent
operator|.
name|nodesDelta
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodesDelta
operator|.
name|hasChanges
argument_list|()
operator|&&
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|String
name|nodeSummary
init|=
name|nodesDelta
operator|.
name|shortSummary
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeSummary
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"{}, reason: {}"
argument_list|,
name|summary
argument_list|,
name|nodeSummary
argument_list|)
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"publishing cluster state version [{}]"
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|clusterStatePublisher
operator|.
name|accept
argument_list|(
name|clusterChangedEvent
argument_list|,
name|taskOutputs
operator|.
name|createAckListener
argument_list|(
name|threadPool
argument_list|,
name|newClusterState
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Discovery
operator|.
name|FailedToCommitClusterStateException
name|t
parameter_list|)
block|{
specifier|final
name|long
name|version
init|=
name|newClusterState
operator|.
name|version
argument_list|()
decl_stmt|;
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failing [{}]: failed to commit cluster state version [{}]"
argument_list|,
name|summary
argument_list|,
name|version
argument_list|)
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|taskOutputs
operator|.
name|publishingFailed
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return;
block|}
name|taskOutputs
operator|.
name|processedDifferentClusterState
argument_list|(
name|previousClusterState
argument_list|,
name|newClusterState
argument_list|)
expr_stmt|;
try|try
block|{
name|taskOutputs
operator|.
name|clusterStatePublished
argument_list|(
name|clusterChangedEvent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"exception thrown while notifying executor of new cluster state publication [{}]"
argument_list|,
name|summary
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|TimeValue
name|executionTime
init|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|currentTimeInNanos
argument_list|()
operator|-
name|startTimeNS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"processing [{}]: took [{}] done publishing updated cluster state (version: {}, uuid: {})"
argument_list|,
name|summary
argument_list|,
name|executionTime
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|,
name|newClusterState
operator|.
name|stateUUID
argument_list|()
argument_list|)
expr_stmt|;
name|warnAboutSlowTaskIfNeeded
argument_list|(
name|executionTime
argument_list|,
name|summary
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|TimeValue
name|executionTime
init|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|currentTimeInNanos
argument_list|()
operator|-
name|startTimeNS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|version
init|=
name|newClusterState
operator|.
name|version
argument_list|()
decl_stmt|;
specifier|final
name|String
name|stateUUID
init|=
name|newClusterState
operator|.
name|stateUUID
argument_list|()
decl_stmt|;
specifier|final
name|String
name|fullState
init|=
name|newClusterState
operator|.
name|toString
argument_list|()
decl_stmt|;
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed to publish updated cluster state in [{}]:\nversion [{}], uuid [{}], source [{}]\n{}"
argument_list|,
name|executionTime
argument_list|,
name|version
argument_list|,
name|stateUUID
argument_list|,
name|summary
argument_list|,
name|fullState
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// TODO: do we want to call updateTask.onFailure here?
block|}
block|}
block|}
DECL|method|calculateTaskOutputs
specifier|public
name|TaskOutputs
name|calculateTaskOutputs
parameter_list|(
name|TaskInputs
name|taskInputs
parameter_list|,
name|ClusterState
name|previousClusterState
parameter_list|,
name|long
name|startTimeNS
parameter_list|)
block|{
name|ClusterTasksResult
argument_list|<
name|Object
argument_list|>
name|clusterTasksResult
init|=
name|executeTasks
argument_list|(
name|taskInputs
argument_list|,
name|startTimeNS
argument_list|,
name|previousClusterState
argument_list|)
decl_stmt|;
name|ClusterState
name|newClusterState
init|=
name|patchVersions
argument_list|(
name|previousClusterState
argument_list|,
name|clusterTasksResult
argument_list|)
decl_stmt|;
return|return
operator|new
name|TaskOutputs
argument_list|(
name|taskInputs
argument_list|,
name|previousClusterState
argument_list|,
name|newClusterState
argument_list|,
name|getNonFailedTasks
argument_list|(
name|taskInputs
argument_list|,
name|clusterTasksResult
argument_list|)
argument_list|,
name|clusterTasksResult
operator|.
name|executionResults
argument_list|)
return|;
block|}
DECL|method|patchVersions
specifier|private
name|ClusterState
name|patchVersions
parameter_list|(
name|ClusterState
name|previousClusterState
parameter_list|,
name|ClusterTasksResult
argument_list|<
name|?
argument_list|>
name|executionResult
parameter_list|)
block|{
name|ClusterState
name|newClusterState
init|=
name|executionResult
operator|.
name|resultingState
decl_stmt|;
if|if
condition|(
name|previousClusterState
operator|!=
name|newClusterState
condition|)
block|{
comment|// only the master controls the version numbers
name|Builder
name|builder
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|newClusterState
argument_list|)
operator|.
name|incrementVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|previousClusterState
operator|.
name|routingTable
argument_list|()
operator|!=
name|newClusterState
operator|.
name|routingTable
argument_list|()
condition|)
block|{
name|builder
operator|.
name|routingTable
argument_list|(
name|RoutingTable
operator|.
name|builder
argument_list|(
name|newClusterState
operator|.
name|routingTable
argument_list|()
argument_list|)
operator|.
name|version
argument_list|(
name|newClusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|previousClusterState
operator|.
name|metaData
argument_list|()
operator|!=
name|newClusterState
operator|.
name|metaData
argument_list|()
condition|)
block|{
name|builder
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|(
name|newClusterState
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|version
argument_list|(
name|newClusterState
operator|.
name|metaData
argument_list|()
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newClusterState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|newClusterState
return|;
block|}
comment|/**      * Submits a cluster state update task; unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,      * ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.      *      * @param source     the source of the cluster state update task      * @param updateTask the full context for the cluster state update      *                   task      *      */
specifier|public
parameter_list|<
name|T
extends|extends
name|ClusterStateTaskConfig
operator|&
name|ClusterStateTaskExecutor
argument_list|<
name|T
argument_list|>
operator|&
name|ClusterStateTaskListener
parameter_list|>
DECL|method|submitStateUpdateTask
name|void
name|submitStateUpdateTask
parameter_list|(
name|String
name|source
parameter_list|,
name|T
name|updateTask
parameter_list|)
block|{
name|submitStateUpdateTask
argument_list|(
name|source
argument_list|,
name|updateTask
argument_list|,
name|updateTask
argument_list|,
name|updateTask
argument_list|,
name|updateTask
argument_list|)
expr_stmt|;
block|}
comment|/**      * Submits a cluster state update task; submitted updates will be      * batched across the same instance of executor. The exact batching      * semantics depend on the underlying implementation but a rough      * guideline is that if the update task is submitted while there      * are pending update tasks for the same executor, these update      * tasks will all be executed on the executor in a single batch      *      * @param source   the source of the cluster state update task      * @param task     the state needed for the cluster state update task      * @param config   the cluster state update task configuration      * @param executor the cluster state update task executor; tasks      *                 that share the same executor will be executed      *                 batches on this executor      * @param listener callback after the cluster state update task      *                 completes      * @param<T>      the type of the cluster state update task state      *      */
DECL|method|submitStateUpdateTask
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|submitStateUpdateTask
parameter_list|(
name|String
name|source
parameter_list|,
name|T
name|task
parameter_list|,
name|ClusterStateTaskConfig
name|config
parameter_list|,
name|ClusterStateTaskExecutor
argument_list|<
name|T
argument_list|>
name|executor
parameter_list|,
name|ClusterStateTaskListener
name|listener
parameter_list|)
block|{
name|submitStateUpdateTasks
argument_list|(
name|source
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|task
argument_list|,
name|listener
argument_list|)
argument_list|,
name|config
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Output created by executing a set of tasks provided as TaskInputs      */
DECL|class|TaskOutputs
class|class
name|TaskOutputs
block|{
DECL|field|taskInputs
specifier|public
specifier|final
name|TaskInputs
name|taskInputs
decl_stmt|;
DECL|field|previousClusterState
specifier|public
specifier|final
name|ClusterState
name|previousClusterState
decl_stmt|;
DECL|field|newClusterState
specifier|public
specifier|final
name|ClusterState
name|newClusterState
decl_stmt|;
DECL|field|nonFailedTasks
specifier|public
specifier|final
name|List
argument_list|<
name|Batcher
operator|.
name|UpdateTask
argument_list|>
name|nonFailedTasks
decl_stmt|;
DECL|field|executionResults
specifier|public
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|ClusterStateTaskExecutor
operator|.
name|TaskResult
argument_list|>
name|executionResults
decl_stmt|;
DECL|method|TaskOutputs
name|TaskOutputs
parameter_list|(
name|TaskInputs
name|taskInputs
parameter_list|,
name|ClusterState
name|previousClusterState
parameter_list|,
name|ClusterState
name|newClusterState
parameter_list|,
name|List
argument_list|<
name|Batcher
operator|.
name|UpdateTask
argument_list|>
name|nonFailedTasks
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|ClusterStateTaskExecutor
operator|.
name|TaskResult
argument_list|>
name|executionResults
parameter_list|)
block|{
name|this
operator|.
name|taskInputs
operator|=
name|taskInputs
expr_stmt|;
name|this
operator|.
name|previousClusterState
operator|=
name|previousClusterState
expr_stmt|;
name|this
operator|.
name|newClusterState
operator|=
name|newClusterState
expr_stmt|;
name|this
operator|.
name|nonFailedTasks
operator|=
name|nonFailedTasks
expr_stmt|;
name|this
operator|.
name|executionResults
operator|=
name|executionResults
expr_stmt|;
block|}
DECL|method|publishingFailed
specifier|public
name|void
name|publishingFailed
parameter_list|(
name|Discovery
operator|.
name|FailedToCommitClusterStateException
name|t
parameter_list|)
block|{
name|nonFailedTasks
operator|.
name|forEach
argument_list|(
name|task
lambda|->
name|task
operator|.
name|listener
operator|.
name|onFailure
argument_list|(
name|task
operator|.
name|source
argument_list|()
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|processedDifferentClusterState
specifier|public
name|void
name|processedDifferentClusterState
parameter_list|(
name|ClusterState
name|previousClusterState
parameter_list|,
name|ClusterState
name|newClusterState
parameter_list|)
block|{
name|nonFailedTasks
operator|.
name|forEach
argument_list|(
name|task
lambda|->
name|task
operator|.
name|listener
operator|.
name|clusterStateProcessed
argument_list|(
name|task
operator|.
name|source
argument_list|()
argument_list|,
name|previousClusterState
argument_list|,
name|newClusterState
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|clusterStatePublished
specifier|public
name|void
name|clusterStatePublished
parameter_list|(
name|ClusterChangedEvent
name|clusterChangedEvent
parameter_list|)
block|{
name|taskInputs
operator|.
name|executor
operator|.
name|clusterStatePublished
argument_list|(
name|clusterChangedEvent
argument_list|)
expr_stmt|;
block|}
DECL|method|createAckListener
specifier|public
name|Discovery
operator|.
name|AckListener
name|createAckListener
parameter_list|(
name|ThreadPool
name|threadPool
parameter_list|,
name|ClusterState
name|newClusterState
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Discovery
operator|.
name|AckListener
argument_list|>
name|ackListeners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//timeout straightaway, otherwise we could wait forever as the timeout thread has not started
name|nonFailedTasks
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|task
lambda|->
name|task
operator|.
name|listener
operator|instanceof
name|AckedClusterStateTaskListener
argument_list|)
operator|.
name|forEach
argument_list|(
name|task
lambda|->
block|{
name|final
name|AckedClusterStateTaskListener
name|ackedListener
operator|=
operator|(
name|AckedClusterStateTaskListener
operator|)
name|task
operator|.
name|listener
argument_list|;                 if
operator|(
name|ackedListener
operator|.
name|ackTimeout
argument_list|()
operator|==
literal|null
operator|||
name|ackedListener
operator|.
name|ackTimeout
argument_list|()
operator|.
name|millis
argument_list|()
operator|==
literal|0
operator|)
block|{
name|ackedListener
operator|.
name|onAckTimeout
argument_list|()
block|;                 }
else|else
block|{
try|try
block|{
name|ackListeners
operator|.
name|add
argument_list|(
operator|new
name|AckCountDownListener
argument_list|(
name|ackedListener
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|,
name|newClusterState
operator|.
name|nodes
argument_list|()
argument_list|,
name|threadPool
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EsRejectedExecutionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Couldn't schedule timeout thread - node might be shutting down"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
comment|//timeout straightaway, otherwise we could wait forever as the timeout thread has not started
name|ackedListener
operator|.
name|onAckTimeout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|)
class|;
return|return
operator|new
name|DelegetingAckListener
argument_list|(
name|ackListeners
argument_list|)
return|;
block|}
end_class

begin_function
DECL|method|clusterStateUnchanged
specifier|public
name|boolean
name|clusterStateUnchanged
parameter_list|()
block|{
return|return
name|previousClusterState
operator|==
name|newClusterState
return|;
block|}
end_function

begin_function
DECL|method|notifyFailedTasks
specifier|public
name|void
name|notifyFailedTasks
parameter_list|()
block|{
comment|// fail all tasks that have failed
for|for
control|(
name|Batcher
operator|.
name|UpdateTask
name|updateTask
range|:
name|taskInputs
operator|.
name|updateTasks
control|)
block|{
assert|assert
name|executionResults
operator|.
name|containsKey
argument_list|(
name|updateTask
operator|.
name|task
argument_list|)
operator|:
literal|"missing "
operator|+
name|updateTask
assert|;
specifier|final
name|ClusterStateTaskExecutor
operator|.
name|TaskResult
name|taskResult
init|=
name|executionResults
operator|.
name|get
argument_list|(
name|updateTask
operator|.
name|task
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskResult
operator|.
name|isSuccess
argument_list|()
operator|==
literal|false
condition|)
block|{
name|updateTask
operator|.
name|listener
operator|.
name|onFailure
argument_list|(
name|updateTask
operator|.
name|source
argument_list|()
argument_list|,
name|taskResult
operator|.
name|getFailure
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|notifySuccessfulTasksOnUnchangedClusterState
specifier|public
name|void
name|notifySuccessfulTasksOnUnchangedClusterState
parameter_list|()
block|{
name|nonFailedTasks
operator|.
name|forEach
argument_list|(
name|task
lambda|->
block|{
if|if
condition|(
name|task
operator|.
name|listener
operator|instanceof
name|AckedClusterStateTaskListener
condition|)
block|{
comment|//no need to wait for ack if nothing changed, the update can be counted as acknowledged
operator|(
operator|(
name|AckedClusterStateTaskListener
operator|)
name|task
operator|.
name|listener
operator|)
operator|.
name|onAllNodesAcked
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|task
operator|.
name|listener
operator|.
name|clusterStateProcessed
argument_list|(
name|task
operator|.
name|source
argument_list|()
argument_list|,
name|newClusterState
argument_list|,
name|newClusterState
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
unit|}
comment|/**      * Returns the tasks that are pending.      */
end_comment

begin_function
DECL|method|pendingTasks
unit|public
name|List
argument_list|<
name|PendingClusterTask
argument_list|>
name|pendingTasks
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|threadPoolExecutor
operator|.
name|getPending
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|pending
lambda|->
block|{
assert|assert
name|pending
operator|.
name|task
operator|instanceof
name|SourcePrioritizedRunnable
operator|:
literal|"thread pool executor should only use SourcePrioritizedRunnable instances but found: "
operator|+
name|pending
operator|.
name|task
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
assert|;
name|SourcePrioritizedRunnable
name|task
init|=
operator|(
name|SourcePrioritizedRunnable
operator|)
name|pending
operator|.
name|task
decl_stmt|;
return|return
operator|new
name|PendingClusterTask
argument_list|(
name|pending
operator|.
name|insertionOrder
argument_list|,
name|pending
operator|.
name|priority
argument_list|,
operator|new
name|Text
argument_list|(
name|task
operator|.
name|source
argument_list|()
argument_list|)
argument_list|,
name|task
operator|.
name|getAgeInMillis
argument_list|()
argument_list|,
name|pending
operator|.
name|executing
argument_list|)
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Returns the number of currently pending tasks.      */
end_comment

begin_function
DECL|method|numberOfPendingTasks
specifier|public
name|int
name|numberOfPendingTasks
parameter_list|()
block|{
return|return
name|threadPoolExecutor
operator|.
name|getNumberOfPendingTasks
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**      * Returns the maximum wait time for tasks in the queue      *      * @return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue      */
end_comment

begin_function
DECL|method|getMaxTaskWaitTime
specifier|public
name|TimeValue
name|getMaxTaskWaitTime
parameter_list|()
block|{
return|return
name|threadPoolExecutor
operator|.
name|getMaxTaskWaitTime
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|safe
specifier|private
name|SafeClusterStateTaskListener
name|safe
parameter_list|(
name|ClusterStateTaskListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|instanceof
name|AckedClusterStateTaskListener
condition|)
block|{
return|return
operator|new
name|SafeAckedClusterStateTaskListener
argument_list|(
operator|(
name|AckedClusterStateTaskListener
operator|)
name|listener
argument_list|,
name|logger
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SafeClusterStateTaskListener
argument_list|(
name|listener
argument_list|,
name|logger
argument_list|)
return|;
block|}
block|}
end_function

begin_class
DECL|class|SafeClusterStateTaskListener
specifier|private
specifier|static
class|class
name|SafeClusterStateTaskListener
implements|implements
name|ClusterStateTaskListener
block|{
DECL|field|listener
specifier|private
specifier|final
name|ClusterStateTaskListener
name|listener
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
decl_stmt|;
DECL|method|SafeClusterStateTaskListener
name|SafeClusterStateTaskListener
parameter_list|(
name|ClusterStateTaskListener
name|listener
parameter_list|,
name|Logger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|source
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|inner
parameter_list|)
block|{
name|inner
operator|.
name|addSuppressed
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"exception thrown by listener notifying of failure from [{}]"
argument_list|,
name|source
argument_list|)
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onNoLongerMaster
specifier|public
name|void
name|onNoLongerMaster
parameter_list|(
name|String
name|source
parameter_list|)
block|{
try|try
block|{
name|listener
operator|.
name|onNoLongerMaster
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"exception thrown by listener while notifying no longer master from [{}]"
argument_list|,
name|source
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|clusterStateProcessed
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
try|try
block|{
name|listener
operator|.
name|clusterStateProcessed
argument_list|(
name|source
argument_list|,
name|oldState
argument_list|,
name|newState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"exception thrown by listener while notifying of cluster state processed from [{}], old cluster state:\n"
operator|+
literal|"{}\nnew cluster state:\n{}"
argument_list|,
name|source
argument_list|,
name|oldState
argument_list|,
name|newState
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|SafeAckedClusterStateTaskListener
specifier|private
specifier|static
class|class
name|SafeAckedClusterStateTaskListener
extends|extends
name|SafeClusterStateTaskListener
implements|implements
name|AckedClusterStateTaskListener
block|{
DECL|field|listener
specifier|private
specifier|final
name|AckedClusterStateTaskListener
name|listener
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
decl_stmt|;
DECL|method|SafeAckedClusterStateTaskListener
name|SafeAckedClusterStateTaskListener
parameter_list|(
name|AckedClusterStateTaskListener
name|listener
parameter_list|,
name|Logger
name|logger
parameter_list|)
block|{
name|super
argument_list|(
name|listener
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|mustAck
specifier|public
name|boolean
name|mustAck
parameter_list|(
name|DiscoveryNode
name|discoveryNode
parameter_list|)
block|{
return|return
name|listener
operator|.
name|mustAck
argument_list|(
name|discoveryNode
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|onAllNodesAcked
specifier|public
name|void
name|onAllNodesAcked
parameter_list|(
annotation|@
name|Nullable
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|listener
operator|.
name|onAllNodesAcked
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|inner
parameter_list|)
block|{
name|inner
operator|.
name|addSuppressed
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"exception thrown by listener while notifying on all nodes acked"
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onAckTimeout
specifier|public
name|void
name|onAckTimeout
parameter_list|()
block|{
try|try
block|{
name|listener
operator|.
name|onAckTimeout
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"exception thrown by listener while notifying on ack timeout"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|ackTimeout
specifier|public
name|TimeValue
name|ackTimeout
parameter_list|()
block|{
return|return
name|listener
operator|.
name|ackTimeout
argument_list|()
return|;
block|}
block|}
end_class

begin_function
DECL|method|warnAboutSlowTaskIfNeeded
specifier|protected
name|void
name|warnAboutSlowTaskIfNeeded
parameter_list|(
name|TimeValue
name|executionTime
parameter_list|,
name|String
name|source
parameter_list|)
block|{
if|if
condition|(
name|executionTime
operator|.
name|getMillis
argument_list|()
operator|>
name|slowTaskLoggingThreshold
operator|.
name|getMillis
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"cluster state update task [{}] took [{}] above the warn threshold of {}"
argument_list|,
name|source
argument_list|,
name|executionTime
argument_list|,
name|slowTaskLoggingThreshold
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_class
DECL|class|DelegetingAckListener
specifier|private
specifier|static
class|class
name|DelegetingAckListener
implements|implements
name|Discovery
operator|.
name|AckListener
block|{
DECL|field|listeners
specifier|private
specifier|final
name|List
argument_list|<
name|Discovery
operator|.
name|AckListener
argument_list|>
name|listeners
decl_stmt|;
DECL|method|DelegetingAckListener
specifier|private
name|DelegetingAckListener
parameter_list|(
name|List
argument_list|<
name|Discovery
operator|.
name|AckListener
argument_list|>
name|listeners
parameter_list|)
block|{
name|this
operator|.
name|listeners
operator|=
name|listeners
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onNodeAck
specifier|public
name|void
name|onNodeAck
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
annotation|@
name|Nullable
name|Exception
name|e
parameter_list|)
block|{
for|for
control|(
name|Discovery
operator|.
name|AckListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onNodeAck
argument_list|(
name|node
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onTimeout
specifier|public
name|void
name|onTimeout
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"no timeout delegation"
argument_list|)
throw|;
block|}
block|}
end_class

begin_class
DECL|class|AckCountDownListener
specifier|private
specifier|static
class|class
name|AckCountDownListener
implements|implements
name|Discovery
operator|.
name|AckListener
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|AckCountDownListener
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ackedTaskListener
specifier|private
specifier|final
name|AckedClusterStateTaskListener
name|ackedTaskListener
decl_stmt|;
DECL|field|countDown
specifier|private
specifier|final
name|CountDown
name|countDown
decl_stmt|;
DECL|field|nodes
specifier|private
specifier|final
name|DiscoveryNodes
name|nodes
decl_stmt|;
DECL|field|clusterStateVersion
specifier|private
specifier|final
name|long
name|clusterStateVersion
decl_stmt|;
DECL|field|ackTimeoutCallback
specifier|private
specifier|final
name|Future
argument_list|<
name|?
argument_list|>
name|ackTimeoutCallback
decl_stmt|;
DECL|field|lastFailure
specifier|private
name|Exception
name|lastFailure
decl_stmt|;
DECL|method|AckCountDownListener
name|AckCountDownListener
parameter_list|(
name|AckedClusterStateTaskListener
name|ackedTaskListener
parameter_list|,
name|long
name|clusterStateVersion
parameter_list|,
name|DiscoveryNodes
name|nodes
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|this
operator|.
name|ackedTaskListener
operator|=
name|ackedTaskListener
expr_stmt|;
name|this
operator|.
name|clusterStateVersion
operator|=
name|clusterStateVersion
expr_stmt|;
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
name|int
name|countDown
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|ackedTaskListener
operator|.
name|mustAck
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|countDown
operator|++
expr_stmt|;
block|}
block|}
comment|//we always wait for at least 1 node (the master)
name|countDown
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|countDown
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"expecting {} acknowledgements for cluster_state update (version: {})"
argument_list|,
name|countDown
argument_list|,
name|clusterStateVersion
argument_list|)
expr_stmt|;
name|this
operator|.
name|countDown
operator|=
operator|new
name|CountDown
argument_list|(
name|countDown
argument_list|)
expr_stmt|;
name|this
operator|.
name|ackTimeoutCallback
operator|=
name|threadPool
operator|.
name|schedule
argument_list|(
name|ackedTaskListener
operator|.
name|ackTimeout
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
parameter_list|()
lambda|->
name|onTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onNodeAck
specifier|public
name|void
name|onNodeAck
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
annotation|@
name|Nullable
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ackedTaskListener
operator|.
name|mustAck
argument_list|(
name|node
argument_list|)
condition|)
block|{
comment|//we always wait for the master ack anyway
if|if
condition|(
operator|!
name|node
operator|.
name|equals
argument_list|(
name|nodes
operator|.
name|getMasterNode
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"ack received from node [{}], cluster_state update (version: {})"
argument_list|,
name|node
argument_list|,
name|clusterStateVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|lastFailure
operator|=
name|e
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"ack received from node [{}], cluster_state update (version: {})"
argument_list|,
name|node
argument_list|,
name|clusterStateVersion
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|countDown
operator|.
name|countDown
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"all expected nodes acknowledged cluster_state update (version: {})"
argument_list|,
name|clusterStateVersion
argument_list|)
expr_stmt|;
name|FutureUtils
operator|.
name|cancel
argument_list|(
name|ackTimeoutCallback
argument_list|)
expr_stmt|;
name|ackedTaskListener
operator|.
name|onAllNodesAcked
argument_list|(
name|lastFailure
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onTimeout
specifier|public
name|void
name|onTimeout
parameter_list|()
block|{
if|if
condition|(
name|countDown
operator|.
name|fastForward
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"timeout waiting for acknowledgement for cluster_state update (version: {})"
argument_list|,
name|clusterStateVersion
argument_list|)
expr_stmt|;
name|ackedTaskListener
operator|.
name|onAckTimeout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_function
DECL|method|executeTasks
specifier|protected
name|ClusterTasksResult
argument_list|<
name|Object
argument_list|>
name|executeTasks
parameter_list|(
name|TaskInputs
name|taskInputs
parameter_list|,
name|long
name|startTimeNS
parameter_list|,
name|ClusterState
name|previousClusterState
parameter_list|)
block|{
name|ClusterTasksResult
argument_list|<
name|Object
argument_list|>
name|clusterTasksResult
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|inputs
init|=
name|taskInputs
operator|.
name|updateTasks
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|tUpdateTask
lambda|->
name|tUpdateTask
operator|.
name|task
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|clusterTasksResult
operator|=
name|taskInputs
operator|.
name|executor
operator|.
name|execute
argument_list|(
name|previousClusterState
argument_list|,
name|inputs
argument_list|)
expr_stmt|;
if|if
condition|(
name|previousClusterState
operator|!=
name|clusterTasksResult
operator|.
name|resultingState
operator|&&
name|previousClusterState
operator|.
name|nodes
argument_list|()
operator|.
name|isLocalNodeElectedMaster
argument_list|()
operator|&&
operator|(
name|clusterTasksResult
operator|.
name|resultingState
operator|.
name|nodes
argument_list|()
operator|.
name|isLocalNodeElectedMaster
argument_list|()
operator|==
literal|false
operator|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"update task submitted to MasterService cannot remove master"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|TimeValue
name|executionTime
init|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|currentTimeInNanos
argument_list|()
operator|-
name|startTimeNS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed to execute cluster state update in [{}], state:\nversion [{}], source [{}]\n{}{}{}"
argument_list|,
name|executionTime
argument_list|,
name|previousClusterState
operator|.
name|version
argument_list|()
argument_list|,
name|taskInputs
operator|.
name|summary
argument_list|,
name|previousClusterState
operator|.
name|nodes
argument_list|()
argument_list|,
name|previousClusterState
operator|.
name|routingTable
argument_list|()
argument_list|,
name|previousClusterState
operator|.
name|getRoutingNodes
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|warnAboutSlowTaskIfNeeded
argument_list|(
name|executionTime
argument_list|,
name|taskInputs
operator|.
name|summary
argument_list|)
expr_stmt|;
name|clusterTasksResult
operator|=
name|ClusterTasksResult
operator|.
name|builder
argument_list|()
operator|.
name|failures
argument_list|(
name|taskInputs
operator|.
name|updateTasks
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|updateTask
lambda|->
name|updateTask
operator|.
name|task
argument_list|)
operator|::
name|iterator
argument_list|,
name|e
argument_list|)
operator|.
name|build
argument_list|(
name|previousClusterState
argument_list|)
expr_stmt|;
block|}
assert|assert
name|clusterTasksResult
operator|.
name|executionResults
operator|!=
literal|null
assert|;
assert|assert
name|clusterTasksResult
operator|.
name|executionResults
operator|.
name|size
argument_list|()
operator|==
name|taskInputs
operator|.
name|updateTasks
operator|.
name|size
argument_list|()
operator|:
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"expected [%d] task result%s but was [%d]"
argument_list|,
name|taskInputs
operator|.
name|updateTasks
operator|.
name|size
argument_list|()
argument_list|,
name|taskInputs
operator|.
name|updateTasks
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
literal|""
else|:
literal|"s"
argument_list|,
name|clusterTasksResult
operator|.
name|executionResults
operator|.
name|size
argument_list|()
argument_list|)
assert|;
if|if
condition|(
name|Assertions
operator|.
name|ENABLED
condition|)
block|{
name|ClusterTasksResult
argument_list|<
name|Object
argument_list|>
name|finalClusterTasksResult
init|=
name|clusterTasksResult
decl_stmt|;
name|taskInputs
operator|.
name|updateTasks
operator|.
name|forEach
argument_list|(
name|updateTask
lambda|->
block|{
assert|assert
name|finalClusterTasksResult
operator|.
name|executionResults
operator|.
name|containsKey
argument_list|(
name|updateTask
operator|.
name|task
argument_list|)
operator|:
literal|"missing task result for "
operator|+
name|updateTask
assert|;
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|clusterTasksResult
return|;
block|}
end_function

begin_function
DECL|method|getNonFailedTasks
specifier|public
name|List
argument_list|<
name|Batcher
operator|.
name|UpdateTask
argument_list|>
name|getNonFailedTasks
parameter_list|(
name|TaskInputs
name|taskInputs
parameter_list|,
name|ClusterTasksResult
argument_list|<
name|Object
argument_list|>
name|clusterTasksResult
parameter_list|)
block|{
return|return
name|taskInputs
operator|.
name|updateTasks
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|updateTask
lambda|->
block|{
assert|assert
name|clusterTasksResult
operator|.
name|executionResults
operator|.
name|containsKey
argument_list|(
name|updateTask
operator|.
name|task
argument_list|)
operator|:
literal|"missing "
operator|+
name|updateTask
assert|;
specifier|final
name|ClusterStateTaskExecutor
operator|.
name|TaskResult
name|taskResult
init|=
name|clusterTasksResult
operator|.
name|executionResults
operator|.
name|get
argument_list|(
name|updateTask
operator|.
name|task
argument_list|)
decl_stmt|;
return|return
name|taskResult
operator|.
name|isSuccess
argument_list|()
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Represents a set of tasks to be processed together with their executor      */
end_comment

begin_class
DECL|class|TaskInputs
specifier|protected
class|class
name|TaskInputs
block|{
DECL|field|summary
specifier|public
specifier|final
name|String
name|summary
decl_stmt|;
DECL|field|updateTasks
specifier|public
specifier|final
name|List
argument_list|<
name|Batcher
operator|.
name|UpdateTask
argument_list|>
name|updateTasks
decl_stmt|;
DECL|field|executor
specifier|public
specifier|final
name|ClusterStateTaskExecutor
argument_list|<
name|Object
argument_list|>
name|executor
decl_stmt|;
DECL|method|TaskInputs
name|TaskInputs
parameter_list|(
name|ClusterStateTaskExecutor
argument_list|<
name|Object
argument_list|>
name|executor
parameter_list|,
name|List
argument_list|<
name|Batcher
operator|.
name|UpdateTask
argument_list|>
name|updateTasks
parameter_list|,
name|String
name|summary
parameter_list|)
block|{
name|this
operator|.
name|summary
operator|=
name|summary
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|updateTasks
operator|=
name|updateTasks
expr_stmt|;
block|}
DECL|method|runOnlyWhenMaster
specifier|public
name|boolean
name|runOnlyWhenMaster
parameter_list|()
block|{
return|return
name|executor
operator|.
name|runOnlyOnMaster
argument_list|()
return|;
block|}
DECL|method|onNoLongerMaster
specifier|public
name|void
name|onNoLongerMaster
parameter_list|()
block|{
name|updateTasks
operator|.
name|forEach
argument_list|(
name|task
lambda|->
name|task
operator|.
name|listener
operator|.
name|onNoLongerMaster
argument_list|(
name|task
operator|.
name|source
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**      * Submits a batch of cluster state update tasks; submitted updates are guaranteed to be processed together,      * potentially with more tasks of the same executor.      *      * @param source   the source of the cluster state update task      * @param tasks    a map of update tasks and their corresponding listeners      * @param config   the cluster state update task configuration      * @param executor the cluster state update task executor; tasks      *                 that share the same executor will be executed      *                 batches on this executor      * @param<T>      the type of the cluster state update task state      *      */
end_comment

begin_function
DECL|method|submitStateUpdateTasks
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|submitStateUpdateTasks
parameter_list|(
specifier|final
name|String
name|source
parameter_list|,
specifier|final
name|Map
argument_list|<
name|T
argument_list|,
name|ClusterStateTaskListener
argument_list|>
name|tasks
parameter_list|,
specifier|final
name|ClusterStateTaskConfig
name|config
parameter_list|,
specifier|final
name|ClusterStateTaskExecutor
argument_list|<
name|T
argument_list|>
name|executor
parameter_list|)
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
name|List
argument_list|<
name|Batcher
operator|.
name|UpdateTask
argument_list|>
name|safeTasks
init|=
name|tasks
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|taskBatcher
operator|.
block|new UpdateTask(config.priority(
argument_list|)
decl_stmt|,
name|source
decl_stmt|,
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|,
name|safe
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|,
name|executor
decl_stmt|)
block|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|taskBatcher
operator|.
name|submitTasks
argument_list|(
name|safeTasks
argument_list|,
name|config
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_catch
catch|catch
parameter_list|(
name|EsRejectedExecutionException
name|e
parameter_list|)
block|{
comment|// ignore cases where we are shutting down..., there is really nothing interesting
comment|// to be done here...
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
end_catch

begin_comment
unit|}
comment|// this one is overridden in tests so we can control time
end_comment

begin_function
DECL|method|currentTimeInNanos
unit|protected
name|long
name|currentTimeInNanos
parameter_list|()
block|{
return|return
name|System
operator|.
name|nanoTime
argument_list|()
return|;
block|}
end_function

unit|}
end_unit

