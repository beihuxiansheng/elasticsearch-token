begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.service
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateApplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|LocalNodeMasterListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|NodeConnectionsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|TimeoutClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|ProcessClusterEventTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PrioritizedEsThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|iterable
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
operator|.
name|CLUSTER_SERVICE_SLOW_TASK_LOGGING_THRESHOLD_SETTING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
operator|.
name|daemonThreadFactory
import|;
end_import

begin_class
DECL|class|ClusterApplierService
specifier|public
class|class
name|ClusterApplierService
extends|extends
name|AbstractLifecycleComponent
implements|implements
name|ClusterApplier
block|{
DECL|field|CLUSTER_UPDATE_THREAD_NAME
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER_UPDATE_THREAD_NAME
init|=
literal|"clusterApplierService#updateTask"
decl_stmt|;
DECL|field|clusterSettings
specifier|private
specifier|final
name|ClusterSettings
name|clusterSettings
decl_stmt|;
DECL|field|threadPool
specifier|protected
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|slowTaskLoggingThreshold
specifier|private
specifier|volatile
name|TimeValue
name|slowTaskLoggingThreshold
decl_stmt|;
DECL|field|threadPoolExecutor
specifier|private
specifier|volatile
name|PrioritizedEsThreadPoolExecutor
name|threadPoolExecutor
decl_stmt|;
comment|/**      * Those 3 state listeners are changing infrequently - CopyOnWriteArrayList is just fine      */
DECL|field|highPriorityStateAppliers
specifier|private
specifier|final
name|Collection
argument_list|<
name|ClusterStateApplier
argument_list|>
name|highPriorityStateAppliers
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|normalPriorityStateAppliers
specifier|private
specifier|final
name|Collection
argument_list|<
name|ClusterStateApplier
argument_list|>
name|normalPriorityStateAppliers
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|lowPriorityStateAppliers
specifier|private
specifier|final
name|Collection
argument_list|<
name|ClusterStateApplier
argument_list|>
name|lowPriorityStateAppliers
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|clusterStateAppliers
specifier|private
specifier|final
name|Iterable
argument_list|<
name|ClusterStateApplier
argument_list|>
name|clusterStateAppliers
init|=
name|Iterables
operator|.
name|concat
argument_list|(
name|highPriorityStateAppliers
argument_list|,
name|normalPriorityStateAppliers
argument_list|,
name|lowPriorityStateAppliers
argument_list|)
decl_stmt|;
DECL|field|clusterStateListeners
specifier|private
specifier|final
name|Collection
argument_list|<
name|ClusterStateListener
argument_list|>
name|clusterStateListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|timeoutClusterStateListeners
specifier|private
specifier|final
name|Collection
argument_list|<
name|TimeoutClusterStateListener
argument_list|>
name|timeoutClusterStateListeners
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|TimeoutClusterStateListener
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|localNodeMasterListeners
specifier|private
specifier|final
name|LocalNodeMasterListeners
name|localNodeMasterListeners
decl_stmt|;
DECL|field|onGoingTimeouts
specifier|private
specifier|final
name|Queue
argument_list|<
name|NotifyTimeout
argument_list|>
name|onGoingTimeouts
init|=
name|ConcurrentCollections
operator|.
name|newQueue
argument_list|()
decl_stmt|;
DECL|field|state
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|ClusterState
argument_list|>
name|state
decl_stmt|;
comment|// last applied state
DECL|field|nodeConnectionsService
specifier|private
name|NodeConnectionsService
name|nodeConnectionsService
decl_stmt|;
DECL|method|ClusterApplierService
specifier|public
name|ClusterApplierService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterSettings
name|clusterSettings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterSettings
operator|=
name|clusterSettings
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|state
operator|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|slowTaskLoggingThreshold
operator|=
name|CLUSTER_SERVICE_SLOW_TASK_LOGGING_THRESHOLD_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|localNodeMasterListeners
operator|=
operator|new
name|LocalNodeMasterListeners
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
DECL|method|setSlowTaskLoggingThreshold
specifier|public
name|void
name|setSlowTaskLoggingThreshold
parameter_list|(
name|TimeValue
name|slowTaskLoggingThreshold
parameter_list|)
block|{
name|this
operator|.
name|slowTaskLoggingThreshold
operator|=
name|slowTaskLoggingThreshold
expr_stmt|;
block|}
DECL|method|setNodeConnectionsService
specifier|public
specifier|synchronized
name|void
name|setNodeConnectionsService
parameter_list|(
name|NodeConnectionsService
name|nodeConnectionsService
parameter_list|)
block|{
assert|assert
name|this
operator|.
name|nodeConnectionsService
operator|==
literal|null
operator|:
literal|"nodeConnectionsService is already set"
assert|;
name|this
operator|.
name|nodeConnectionsService
operator|=
name|nodeConnectionsService
expr_stmt|;
block|}
DECL|method|setInitialState
specifier|public
name|void
name|setInitialState
parameter_list|(
name|ClusterState
name|initialState
parameter_list|)
block|{
if|if
condition|(
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"can't set initial state when started"
argument_list|)
throw|;
block|}
assert|assert
name|state
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|:
literal|"state is already set"
assert|;
name|state
operator|.
name|set
argument_list|(
name|initialState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
specifier|synchronized
name|void
name|doStart
parameter_list|()
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|nodeConnectionsService
argument_list|,
literal|"please set the node connection service before starting"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|state
operator|.
name|get
argument_list|()
argument_list|,
literal|"please set initial state before starting"
argument_list|)
expr_stmt|;
name|addListener
argument_list|(
name|localNodeMasterListeners
argument_list|)
expr_stmt|;
name|threadPoolExecutor
operator|=
name|EsExecutors
operator|.
name|newSinglePrioritizing
argument_list|(
name|CLUSTER_UPDATE_THREAD_NAME
argument_list|,
name|daemonThreadFactory
argument_list|(
name|settings
argument_list|,
name|CLUSTER_UPDATE_THREAD_NAME
argument_list|)
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|,
name|threadPool
operator|.
name|scheduler
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|UpdateTask
class|class
name|UpdateTask
extends|extends
name|SourcePrioritizedRunnable
implements|implements
name|Function
argument_list|<
name|ClusterState
argument_list|,
name|ClusterState
argument_list|>
block|{
DECL|field|listener
specifier|final
name|ClusterStateTaskListener
name|listener
decl_stmt|;
DECL|field|updateFunction
specifier|final
name|Function
argument_list|<
name|ClusterState
argument_list|,
name|ClusterState
argument_list|>
name|updateFunction
decl_stmt|;
DECL|method|UpdateTask
name|UpdateTask
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|String
name|source
parameter_list|,
name|ClusterStateTaskListener
name|listener
parameter_list|,
name|Function
argument_list|<
name|ClusterState
argument_list|,
name|ClusterState
argument_list|>
name|updateFunction
parameter_list|)
block|{
name|super
argument_list|(
name|priority
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|updateFunction
operator|=
name|updateFunction
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|ClusterState
name|apply
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
return|return
name|updateFunction
operator|.
name|apply
argument_list|(
name|clusterState
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|runTask
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop
specifier|protected
specifier|synchronized
name|void
name|doStop
parameter_list|()
block|{
for|for
control|(
name|NotifyTimeout
name|onGoingTimeout
range|:
name|onGoingTimeouts
control|)
block|{
name|onGoingTimeout
operator|.
name|cancel
argument_list|()
expr_stmt|;
try|try
block|{
name|onGoingTimeout
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|onGoingTimeout
operator|.
name|listener
operator|.
name|onClose
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to notify listeners on shutdown"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|threadPoolExecutor
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// close timeout listeners that did not have an ongoing timeout
name|timeoutClusterStateListeners
operator|.
name|forEach
argument_list|(
name|TimeoutClusterStateListener
operator|::
name|onClose
argument_list|)
expr_stmt|;
name|removeListener
argument_list|(
name|localNodeMasterListeners
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
specifier|synchronized
name|void
name|doClose
parameter_list|()
block|{     }
comment|/**      * The current cluster state.      * Should be renamed to appliedClusterState      */
DECL|method|state
specifier|public
name|ClusterState
name|state
parameter_list|()
block|{
assert|assert
name|assertNotCalledFromClusterStateApplier
argument_list|(
literal|"the applied cluster state is not yet available"
argument_list|)
assert|;
name|ClusterState
name|clusterState
init|=
name|this
operator|.
name|state
operator|.
name|get
argument_list|()
decl_stmt|;
assert|assert
name|clusterState
operator|!=
literal|null
operator|:
literal|"initial cluster state not set yet"
assert|;
return|return
name|clusterState
return|;
block|}
comment|/**      * Adds a high priority applier of updated cluster states.      */
DECL|method|addHighPriorityApplier
specifier|public
name|void
name|addHighPriorityApplier
parameter_list|(
name|ClusterStateApplier
name|applier
parameter_list|)
block|{
name|highPriorityStateAppliers
operator|.
name|add
argument_list|(
name|applier
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an applier which will be called after all high priority and normal appliers have been called.      */
DECL|method|addLowPriorityApplier
specifier|public
name|void
name|addLowPriorityApplier
parameter_list|(
name|ClusterStateApplier
name|applier
parameter_list|)
block|{
name|lowPriorityStateAppliers
operator|.
name|add
argument_list|(
name|applier
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a applier of updated cluster states.      */
DECL|method|addStateApplier
specifier|public
name|void
name|addStateApplier
parameter_list|(
name|ClusterStateApplier
name|applier
parameter_list|)
block|{
name|normalPriorityStateAppliers
operator|.
name|add
argument_list|(
name|applier
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes an applier of updated cluster states.      */
DECL|method|removeApplier
specifier|public
name|void
name|removeApplier
parameter_list|(
name|ClusterStateApplier
name|applier
parameter_list|)
block|{
name|normalPriorityStateAppliers
operator|.
name|remove
argument_list|(
name|applier
argument_list|)
expr_stmt|;
name|highPriorityStateAppliers
operator|.
name|remove
argument_list|(
name|applier
argument_list|)
expr_stmt|;
name|lowPriorityStateAppliers
operator|.
name|remove
argument_list|(
name|applier
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a listener for updated cluster states      */
DECL|method|addListener
specifier|public
name|void
name|addListener
parameter_list|(
name|ClusterStateListener
name|listener
parameter_list|)
block|{
name|clusterStateListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes a listener for updated cluster states.      */
DECL|method|removeListener
specifier|public
name|void
name|removeListener
parameter_list|(
name|ClusterStateListener
name|listener
parameter_list|)
block|{
name|clusterStateListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes a timeout listener for updated cluster states.      */
DECL|method|removeTimeoutListener
specifier|public
name|void
name|removeTimeoutListener
parameter_list|(
name|TimeoutClusterStateListener
name|listener
parameter_list|)
block|{
name|timeoutClusterStateListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|NotifyTimeout
argument_list|>
name|it
init|=
name|onGoingTimeouts
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NotifyTimeout
name|timeout
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeout
operator|.
name|listener
operator|.
name|equals
argument_list|(
name|listener
argument_list|)
condition|)
block|{
name|timeout
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Add a listener for on/off local node master events      */
DECL|method|addLocalNodeMasterListener
specifier|public
name|void
name|addLocalNodeMasterListener
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|localNodeMasterListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove the given listener for on/off local master events      */
DECL|method|removeLocalNodeMasterListener
specifier|public
name|void
name|removeLocalNodeMasterListener
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|localNodeMasterListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a cluster state listener that is expected to be removed during a short period of time.      * If provided, the listener will be notified once a specific time has elapsed.      *      * NOTE: the listener is not removed on timeout. This is the responsibility of the caller.      */
DECL|method|addTimeoutListener
specifier|public
name|void
name|addTimeoutListener
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|TimeValue
name|timeout
parameter_list|,
specifier|final
name|TimeoutClusterStateListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onClose
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// call the post added notification on the same event thread
try|try
block|{
name|threadPoolExecutor
operator|.
name|execute
argument_list|(
operator|new
name|SourcePrioritizedRunnable
argument_list|(
name|Priority
operator|.
name|HIGH
argument_list|,
literal|"_add_listener_"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
name|NotifyTimeout
name|notifyTimeout
init|=
operator|new
name|NotifyTimeout
argument_list|(
name|listener
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
name|notifyTimeout
operator|.
name|future
operator|=
name|threadPool
operator|.
name|schedule
argument_list|(
name|timeout
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
name|notifyTimeout
argument_list|)
expr_stmt|;
name|onGoingTimeouts
operator|.
name|add
argument_list|(
name|notifyTimeout
argument_list|)
expr_stmt|;
block|}
name|timeoutClusterStateListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|listener
operator|.
name|postAdded
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EsRejectedExecutionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onClose
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|runOnApplierThread
specifier|public
name|void
name|runOnApplierThread
parameter_list|(
specifier|final
name|String
name|source
parameter_list|,
name|Consumer
argument_list|<
name|ClusterState
argument_list|>
name|clusterStateConsumer
parameter_list|,
specifier|final
name|ClusterStateTaskListener
name|listener
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|submitStateUpdateTask
argument_list|(
name|source
argument_list|,
name|ClusterStateTaskConfig
operator|.
name|build
argument_list|(
name|priority
argument_list|)
argument_list|,
parameter_list|(
name|clusterState
parameter_list|)
lambda|->
block|{
name|clusterStateConsumer
operator|.
name|accept
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
return|return
name|clusterState
return|;
block|}
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|runOnApplierThread
specifier|public
name|void
name|runOnApplierThread
parameter_list|(
specifier|final
name|String
name|source
parameter_list|,
name|Consumer
argument_list|<
name|ClusterState
argument_list|>
name|clusterStateConsumer
parameter_list|,
specifier|final
name|ClusterStateTaskListener
name|listener
parameter_list|)
block|{
name|runOnApplierThread
argument_list|(
name|source
argument_list|,
name|clusterStateConsumer
argument_list|,
name|listener
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onNewClusterState
specifier|public
name|void
name|onNewClusterState
parameter_list|(
specifier|final
name|String
name|source
parameter_list|,
specifier|final
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
argument_list|<
name|ClusterState
argument_list|>
name|clusterStateSupplier
parameter_list|,
specifier|final
name|ClusterStateTaskListener
name|listener
parameter_list|)
block|{
name|Function
argument_list|<
name|ClusterState
argument_list|,
name|ClusterState
argument_list|>
name|applyFunction
init|=
name|currentState
lambda|->
block|{
name|ClusterState
name|nextState
init|=
name|clusterStateSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextState
operator|!=
literal|null
condition|)
block|{
return|return
name|nextState
return|;
block|}
else|else
block|{
return|return
name|currentState
return|;
block|}
block|}
decl_stmt|;
name|submitStateUpdateTask
argument_list|(
name|source
argument_list|,
name|ClusterStateTaskConfig
operator|.
name|build
argument_list|(
name|Priority
operator|.
name|HIGH
argument_list|)
argument_list|,
name|applyFunction
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|submitStateUpdateTask
specifier|private
name|void
name|submitStateUpdateTask
parameter_list|(
specifier|final
name|String
name|source
parameter_list|,
specifier|final
name|ClusterStateTaskConfig
name|config
parameter_list|,
specifier|final
name|Function
argument_list|<
name|ClusterState
argument_list|,
name|ClusterState
argument_list|>
name|executor
parameter_list|,
specifier|final
name|ClusterStateTaskListener
name|listener
parameter_list|)
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
name|UpdateTask
name|updateTask
init|=
operator|new
name|UpdateTask
argument_list|(
name|config
operator|.
name|priority
argument_list|()
argument_list|,
name|source
argument_list|,
operator|new
name|SafeClusterStateTaskListener
argument_list|(
name|listener
argument_list|,
name|logger
argument_list|)
argument_list|,
name|executor
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|timeout
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|threadPoolExecutor
operator|.
name|execute
argument_list|(
name|updateTask
argument_list|,
name|config
operator|.
name|timeout
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|listener
operator|.
name|onFailure
argument_list|(
name|source
argument_list|,
operator|new
name|ProcessClusterEventTimeoutException
argument_list|(
name|config
operator|.
name|timeout
argument_list|()
argument_list|,
name|source
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|threadPoolExecutor
operator|.
name|execute
argument_list|(
name|updateTask
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EsRejectedExecutionException
name|e
parameter_list|)
block|{
comment|// ignore cases where we are shutting down..., there is really nothing interesting
comment|// to be done here...
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/** asserts that the current thread is the cluster state update thread */
DECL|method|assertClusterStateUpdateThread
specifier|public
specifier|static
name|boolean
name|assertClusterStateUpdateThread
parameter_list|()
block|{
assert|assert
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|ClusterApplierService
operator|.
name|CLUSTER_UPDATE_THREAD_NAME
argument_list|)
operator|:
literal|"not called from the cluster state update thread"
assert|;
return|return
literal|true
return|;
block|}
comment|/** asserts that the current thread is<b>NOT</b> the cluster state update thread */
DECL|method|assertNotClusterStateUpdateThread
specifier|public
specifier|static
name|boolean
name|assertNotClusterStateUpdateThread
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
assert|assert
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|CLUSTER_UPDATE_THREAD_NAME
argument_list|)
operator|==
literal|false
operator|:
literal|"Expected current thread ["
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|+
literal|"] to not be the cluster state update thread. Reason: ["
operator|+
name|reason
operator|+
literal|"]"
assert|;
return|return
literal|true
return|;
block|}
comment|/** asserts that the current stack trace does<b>NOT</b> involve a cluster state applier */
DECL|method|assertNotCalledFromClusterStateApplier
specifier|private
specifier|static
name|boolean
name|assertNotCalledFromClusterStateApplier
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|CLUSTER_UPDATE_THREAD_NAME
argument_list|)
condition|)
block|{
for|for
control|(
name|StackTraceElement
name|element
range|:
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
specifier|final
name|String
name|className
init|=
name|element
operator|.
name|getClassName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|methodName
init|=
name|element
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|ClusterStateObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// people may start an observer from an applier
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|ClusterApplierService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|methodName
operator|.
name|equals
argument_list|(
literal|"callClusterStateAppliers"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"should not be called by a cluster state applier. reason ["
operator|+
name|reason
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|runTask
specifier|protected
name|void
name|runTask
parameter_list|(
name|UpdateTask
name|task
parameter_list|)
block|{
if|if
condition|(
operator|!
name|lifecycle
operator|.
name|started
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"processing [{}]: ignoring, cluster applier service not started"
argument_list|,
name|task
operator|.
name|source
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"processing [{}]: execute"
argument_list|,
name|task
operator|.
name|source
argument_list|)
expr_stmt|;
specifier|final
name|ClusterState
name|previousClusterState
init|=
name|state
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|startTimeNS
init|=
name|currentTimeInNanos
argument_list|()
decl_stmt|;
specifier|final
name|ClusterState
name|newClusterState
decl_stmt|;
try|try
block|{
name|newClusterState
operator|=
name|task
operator|.
name|apply
argument_list|(
name|previousClusterState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|TimeValue
name|executionTime
init|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|currentTimeInNanos
argument_list|()
operator|-
name|startTimeNS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed to execute cluster state applier in [{}], state:\nversion [{}], source [{}]\n{}{}{}"
argument_list|,
name|executionTime
argument_list|,
name|previousClusterState
operator|.
name|version
argument_list|()
argument_list|,
name|task
operator|.
name|source
argument_list|,
name|previousClusterState
operator|.
name|nodes
argument_list|()
argument_list|,
name|previousClusterState
operator|.
name|routingTable
argument_list|()
argument_list|,
name|previousClusterState
operator|.
name|getRoutingNodes
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|warnAboutSlowTaskIfNeeded
argument_list|(
name|executionTime
argument_list|,
name|task
operator|.
name|source
argument_list|)
expr_stmt|;
name|task
operator|.
name|listener
operator|.
name|onFailure
argument_list|(
name|task
operator|.
name|source
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|previousClusterState
operator|==
name|newClusterState
condition|)
block|{
name|task
operator|.
name|listener
operator|.
name|clusterStateProcessed
argument_list|(
name|task
operator|.
name|source
argument_list|,
name|newClusterState
argument_list|,
name|newClusterState
argument_list|)
expr_stmt|;
name|TimeValue
name|executionTime
init|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|currentTimeInNanos
argument_list|()
operator|-
name|startTimeNS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"processing [{}]: took [{}] no change in cluster state"
argument_list|,
name|task
operator|.
name|source
argument_list|,
name|executionTime
argument_list|)
expr_stmt|;
name|warnAboutSlowTaskIfNeeded
argument_list|(
name|executionTime
argument_list|,
name|task
operator|.
name|source
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"cluster state updated, source [{}]\n{}"
argument_list|,
name|task
operator|.
name|source
argument_list|,
name|newClusterState
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"cluster state updated, version [{}], source [{}]"
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|,
name|task
operator|.
name|source
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|applyChanges
argument_list|(
name|task
argument_list|,
name|previousClusterState
argument_list|,
name|newClusterState
argument_list|)
expr_stmt|;
name|TimeValue
name|executionTime
init|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|currentTimeInNanos
argument_list|()
operator|-
name|startTimeNS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"processing [{}]: took [{}] done applying updated cluster state (version: {}, uuid: {})"
argument_list|,
name|task
operator|.
name|source
argument_list|,
name|executionTime
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|,
name|newClusterState
operator|.
name|stateUUID
argument_list|()
argument_list|)
expr_stmt|;
name|warnAboutSlowTaskIfNeeded
argument_list|(
name|executionTime
argument_list|,
name|task
operator|.
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|TimeValue
name|executionTime
init|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|TimeValue
operator|.
name|nsecToMSec
argument_list|(
name|currentTimeInNanos
argument_list|()
operator|-
name|startTimeNS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|version
init|=
name|newClusterState
operator|.
name|version
argument_list|()
decl_stmt|;
specifier|final
name|String
name|stateUUID
init|=
name|newClusterState
operator|.
name|stateUUID
argument_list|()
decl_stmt|;
specifier|final
name|String
name|fullState
init|=
name|newClusterState
operator|.
name|toString
argument_list|()
decl_stmt|;
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed to apply updated cluster state in [{}]:\nversion [{}], uuid [{}], source [{}]\n{}"
argument_list|,
name|executionTime
argument_list|,
name|version
argument_list|,
name|stateUUID
argument_list|,
name|task
operator|.
name|source
argument_list|,
name|fullState
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// TODO: do we want to call updateTask.onFailure here?
block|}
block|}
block|}
DECL|method|applyChanges
specifier|private
name|void
name|applyChanges
parameter_list|(
name|UpdateTask
name|task
parameter_list|,
name|ClusterState
name|previousClusterState
parameter_list|,
name|ClusterState
name|newClusterState
parameter_list|)
block|{
name|ClusterChangedEvent
name|clusterChangedEvent
init|=
operator|new
name|ClusterChangedEvent
argument_list|(
name|task
operator|.
name|source
argument_list|,
name|newClusterState
argument_list|,
name|previousClusterState
argument_list|)
decl_stmt|;
comment|// new cluster state, notify all listeners
specifier|final
name|DiscoveryNodes
operator|.
name|Delta
name|nodesDelta
init|=
name|clusterChangedEvent
operator|.
name|nodesDelta
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodesDelta
operator|.
name|hasChanges
argument_list|()
operator|&&
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|String
name|summary
init|=
name|nodesDelta
operator|.
name|shortSummary
argument_list|()
decl_stmt|;
if|if
condition|(
name|summary
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"{}, reason: {}"
argument_list|,
name|summary
argument_list|,
name|task
operator|.
name|source
argument_list|)
expr_stmt|;
block|}
block|}
name|nodeConnectionsService
operator|.
name|connectToNodes
argument_list|(
name|newClusterState
operator|.
name|nodes
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"applying cluster state version {}"
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// nothing to do until we actually recover from the gateway or any other block indicates we need to disable persistency
if|if
condition|(
name|clusterChangedEvent
operator|.
name|state
argument_list|()
operator|.
name|blocks
argument_list|()
operator|.
name|disableStatePersistence
argument_list|()
operator|==
literal|false
operator|&&
name|clusterChangedEvent
operator|.
name|metaDataChanged
argument_list|()
condition|)
block|{
specifier|final
name|Settings
name|incomingSettings
init|=
name|clusterChangedEvent
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|settings
argument_list|()
decl_stmt|;
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|incomingSettings
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to apply cluster settings"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"apply cluster state with version {}"
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|callClusterStateAppliers
argument_list|(
name|clusterChangedEvent
argument_list|)
expr_stmt|;
name|nodeConnectionsService
operator|.
name|disconnectFromNodesExcept
argument_list|(
name|newClusterState
operator|.
name|nodes
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"set locally applied cluster state to version {}"
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|.
name|set
argument_list|(
name|newClusterState
argument_list|)
expr_stmt|;
name|callClusterStateListeners
argument_list|(
name|clusterChangedEvent
argument_list|)
expr_stmt|;
name|task
operator|.
name|listener
operator|.
name|clusterStateProcessed
argument_list|(
name|task
operator|.
name|source
argument_list|,
name|previousClusterState
argument_list|,
name|newClusterState
argument_list|)
expr_stmt|;
block|}
DECL|method|callClusterStateAppliers
specifier|private
name|void
name|callClusterStateAppliers
parameter_list|(
name|ClusterChangedEvent
name|clusterChangedEvent
parameter_list|)
block|{
name|clusterStateAppliers
operator|.
name|forEach
argument_list|(
name|applier
lambda|->
block|{
try|try
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"calling [{}] with change to version [{}]"
argument_list|,
name|applier
argument_list|,
name|clusterChangedEvent
operator|.
name|state
argument_list|()
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|applier
operator|.
name|applyClusterState
argument_list|(
name|clusterChangedEvent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to notify ClusterStateApplier"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|callClusterStateListeners
specifier|private
name|void
name|callClusterStateListeners
parameter_list|(
name|ClusterChangedEvent
name|clusterChangedEvent
parameter_list|)
block|{
name|Stream
operator|.
name|concat
argument_list|(
name|clusterStateListeners
operator|.
name|stream
argument_list|()
argument_list|,
name|timeoutClusterStateListeners
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|listener
lambda|->
block|{
try|try
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"calling [{}] with change to version [{}]"
argument_list|,
name|listener
argument_list|,
name|clusterChangedEvent
operator|.
name|state
argument_list|()
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|clusterChanged
argument_list|(
name|clusterChangedEvent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to notify ClusterStateListener"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|class|SafeClusterStateTaskListener
specifier|private
specifier|static
class|class
name|SafeClusterStateTaskListener
implements|implements
name|ClusterStateTaskListener
block|{
DECL|field|listener
specifier|private
specifier|final
name|ClusterStateTaskListener
name|listener
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
decl_stmt|;
DECL|method|SafeClusterStateTaskListener
name|SafeClusterStateTaskListener
parameter_list|(
name|ClusterStateTaskListener
name|listener
parameter_list|,
name|Logger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|source
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|inner
parameter_list|)
block|{
name|inner
operator|.
name|addSuppressed
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"exception thrown by listener notifying of failure from [{}]"
argument_list|,
name|source
argument_list|)
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|clusterStateProcessed
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
try|try
block|{
name|listener
operator|.
name|clusterStateProcessed
argument_list|(
name|source
argument_list|,
name|oldState
argument_list|,
name|newState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"exception thrown by listener while notifying of cluster state processed from [{}], old cluster state:\n"
operator|+
literal|"{}\nnew cluster state:\n{}"
argument_list|,
name|source
argument_list|,
name|oldState
argument_list|,
name|newState
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|warnAboutSlowTaskIfNeeded
specifier|protected
name|void
name|warnAboutSlowTaskIfNeeded
parameter_list|(
name|TimeValue
name|executionTime
parameter_list|,
name|String
name|source
parameter_list|)
block|{
if|if
condition|(
name|executionTime
operator|.
name|getMillis
argument_list|()
operator|>
name|slowTaskLoggingThreshold
operator|.
name|getMillis
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"cluster state applier task [{}] took [{}] above the warn threshold of {}"
argument_list|,
name|source
argument_list|,
name|executionTime
argument_list|,
name|slowTaskLoggingThreshold
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NotifyTimeout
class|class
name|NotifyTimeout
implements|implements
name|Runnable
block|{
DECL|field|listener
specifier|final
name|TimeoutClusterStateListener
name|listener
decl_stmt|;
DECL|field|timeout
specifier|final
name|TimeValue
name|timeout
decl_stmt|;
DECL|field|future
specifier|volatile
name|ScheduledFuture
name|future
decl_stmt|;
DECL|method|NotifyTimeout
name|NotifyTimeout
parameter_list|(
name|TimeoutClusterStateListener
name|listener
parameter_list|,
name|TimeValue
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
DECL|method|cancel
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|FutureUtils
operator|.
name|cancel
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|future
operator|!=
literal|null
operator|&&
name|future
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onClose
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onTimeout
argument_list|(
name|this
operator|.
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|// note, we rely on the listener to remove itself in case of timeout if needed
block|}
block|}
DECL|class|LocalNodeMasterListeners
specifier|private
specifier|static
class|class
name|LocalNodeMasterListeners
implements|implements
name|ClusterStateListener
block|{
DECL|field|listeners
specifier|private
specifier|final
name|List
argument_list|<
name|LocalNodeMasterListener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|master
specifier|private
specifier|volatile
name|boolean
name|master
init|=
literal|false
decl_stmt|;
DECL|method|LocalNodeMasterListeners
specifier|private
name|LocalNodeMasterListeners
parameter_list|(
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clusterChanged
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|master
operator|&&
name|event
operator|.
name|localNodeMaster
argument_list|()
condition|)
block|{
name|master
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|LocalNodeMasterListener
name|listener
range|:
name|listeners
control|)
block|{
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
name|executor
init|=
name|threadPool
operator|.
name|executor
argument_list|(
name|listener
operator|.
name|executorName
argument_list|()
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|OnMasterRunnable
argument_list|(
name|listener
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|master
operator|&&
operator|!
name|event
operator|.
name|localNodeMaster
argument_list|()
condition|)
block|{
name|master
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|LocalNodeMasterListener
name|listener
range|:
name|listeners
control|)
block|{
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
name|executor
init|=
name|threadPool
operator|.
name|executor
argument_list|(
name|listener
operator|.
name|executorName
argument_list|()
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|OffMasterRunnable
argument_list|(
name|listener
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|add
specifier|private
name|void
name|add
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|remove
specifier|private
name|void
name|remove
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|clear
specifier|private
name|void
name|clear
parameter_list|()
block|{
name|listeners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|OnMasterRunnable
specifier|private
specifier|static
class|class
name|OnMasterRunnable
implements|implements
name|Runnable
block|{
DECL|field|listener
specifier|private
specifier|final
name|LocalNodeMasterListener
name|listener
decl_stmt|;
DECL|method|OnMasterRunnable
specifier|private
name|OnMasterRunnable
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|listener
operator|.
name|onMaster
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|OffMasterRunnable
specifier|private
specifier|static
class|class
name|OffMasterRunnable
implements|implements
name|Runnable
block|{
DECL|field|listener
specifier|private
specifier|final
name|LocalNodeMasterListener
name|listener
decl_stmt|;
DECL|method|OffMasterRunnable
specifier|private
name|OffMasterRunnable
parameter_list|(
name|LocalNodeMasterListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|listener
operator|.
name|offMaster
argument_list|()
expr_stmt|;
block|}
block|}
comment|// this one is overridden in tests so we can control time
DECL|method|currentTimeInNanos
specifier|protected
name|long
name|currentTimeInNanos
parameter_list|()
block|{
return|return
name|System
operator|.
name|nanoTime
argument_list|()
return|;
block|}
block|}
end_class

end_unit

