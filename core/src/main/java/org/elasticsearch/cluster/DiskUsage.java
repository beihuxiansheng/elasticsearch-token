begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
operator|.
name|Params
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Encapsulation class used to represent the amount of disk used on a node.  */
end_comment

begin_class
DECL|class|DiskUsage
specifier|public
class|class
name|DiskUsage
implements|implements
name|ToXContent
implements|,
name|Writeable
block|{
DECL|field|nodeId
specifier|final
name|String
name|nodeId
decl_stmt|;
DECL|field|nodeName
specifier|final
name|String
name|nodeName
decl_stmt|;
DECL|field|path
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|totalBytes
specifier|final
name|long
name|totalBytes
decl_stmt|;
DECL|field|freeBytes
specifier|final
name|long
name|freeBytes
decl_stmt|;
comment|/**      * Create a new DiskUsage, if {@code totalBytes} is 0, {@link #getFreeDiskAsPercentage()}      * will always return 100.0% free      */
DECL|method|DiskUsage
specifier|public
name|DiskUsage
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|String
name|path
parameter_list|,
name|long
name|totalBytes
parameter_list|,
name|long
name|freeBytes
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
name|this
operator|.
name|freeBytes
operator|=
name|freeBytes
expr_stmt|;
name|this
operator|.
name|totalBytes
operator|=
name|totalBytes
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
DECL|method|DiskUsage
specifier|public
name|DiskUsage
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|nodeId
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|totalBytes
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|freeBytes
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|nodeId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|nodeName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|path
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|this
operator|.
name|totalBytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|this
operator|.
name|freeBytes
argument_list|)
expr_stmt|;
block|}
DECL|method|truncatePercent
specifier|private
specifier|static
name|double
name|truncatePercent
parameter_list|(
name|double
name|pct
parameter_list|)
block|{
return|return
name|Math
operator|.
name|round
argument_list|(
name|pct
operator|*
literal|10.0
argument_list|)
operator|/
literal|10.0
return|;
block|}
DECL|method|toShortXContent
specifier|public
name|XContentBuilder
name|toShortXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
name|this
operator|.
name|path
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
literal|"total_bytes"
argument_list|,
literal|"total"
argument_list|,
name|this
operator|.
name|totalBytes
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
literal|"used_bytes"
argument_list|,
literal|"used"
argument_list|,
name|this
operator|.
name|getUsedBytes
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
literal|"free_bytes"
argument_list|,
literal|"free"
argument_list|,
name|this
operator|.
name|freeBytes
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"free_disk_percent"
argument_list|,
name|truncatePercent
argument_list|(
name|this
operator|.
name|getFreeDiskAsPercentage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"used_disk_percent"
argument_list|,
name|truncatePercent
argument_list|(
name|this
operator|.
name|getUsedDiskAsPercentage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"node_id"
argument_list|,
name|this
operator|.
name|nodeId
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"node_name"
argument_list|,
name|this
operator|.
name|nodeName
argument_list|)
expr_stmt|;
name|builder
operator|=
name|toShortXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|getNodeId
specifier|public
name|String
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
DECL|method|getNodeName
specifier|public
name|String
name|getNodeName
parameter_list|()
block|{
return|return
name|nodeName
return|;
block|}
DECL|method|getPath
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|getFreeDiskAsPercentage
specifier|public
name|double
name|getFreeDiskAsPercentage
parameter_list|()
block|{
comment|// We return 100.0% in order to fail "open", in that if we have invalid
comment|// numbers for the total bytes, it's as if we don't know disk usage.
if|if
condition|(
name|totalBytes
operator|==
literal|0
condition|)
block|{
return|return
literal|100.0
return|;
block|}
return|return
literal|100.0
operator|*
operator|(
operator|(
name|double
operator|)
name|freeBytes
operator|/
name|totalBytes
operator|)
return|;
block|}
DECL|method|getUsedDiskAsPercentage
specifier|public
name|double
name|getUsedDiskAsPercentage
parameter_list|()
block|{
return|return
literal|100.0
operator|-
name|getFreeDiskAsPercentage
argument_list|()
return|;
block|}
DECL|method|getFreeBytes
specifier|public
name|long
name|getFreeBytes
parameter_list|()
block|{
return|return
name|freeBytes
return|;
block|}
DECL|method|getTotalBytes
specifier|public
name|long
name|getTotalBytes
parameter_list|()
block|{
return|return
name|totalBytes
return|;
block|}
DECL|method|getUsedBytes
specifier|public
name|long
name|getUsedBytes
parameter_list|()
block|{
return|return
name|getTotalBytes
argument_list|()
operator|-
name|getFreeBytes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|nodeId
operator|+
literal|"]["
operator|+
name|nodeName
operator|+
literal|"]["
operator|+
name|path
operator|+
literal|"] free: "
operator|+
operator|new
name|ByteSizeValue
argument_list|(
name|getFreeBytes
argument_list|()
argument_list|)
operator|+
literal|"["
operator|+
name|Strings
operator|.
name|format1Decimals
argument_list|(
name|getFreeDiskAsPercentage
argument_list|()
argument_list|,
literal|"%"
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

