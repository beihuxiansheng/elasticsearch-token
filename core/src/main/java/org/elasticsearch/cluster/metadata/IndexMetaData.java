begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|LongArrayList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|IntObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|Diffable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|DiffableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodeFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenIntMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|loader
operator|.
name|SettingsLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|FromXContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodeFilters
operator|.
name|OpType
operator|.
name|AND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodeFilters
operator|.
name|OpType
operator|.
name|OR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|readSettingsFromStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|writeSettingsToStream
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|IndexMetaData
specifier|public
class|class
name|IndexMetaData
implements|implements
name|Diffable
argument_list|<
name|IndexMetaData
argument_list|>
implements|,
name|FromXContentBuilder
argument_list|<
name|IndexMetaData
argument_list|>
implements|,
name|ToXContent
block|{
DECL|interface|Custom
specifier|public
interface|interface
name|Custom
extends|extends
name|Diffable
argument_list|<
name|Custom
argument_list|>
extends|,
name|ToXContent
block|{
DECL|method|type
name|String
name|type
parameter_list|()
function_decl|;
DECL|method|fromMap
name|Custom
name|fromMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|fromXContent
name|Custom
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**          * Merges from this to another, with this being more important, i.e., if something exists in this and another,          * this will prevail.          */
DECL|method|mergeWith
name|Custom
name|mergeWith
parameter_list|(
name|Custom
name|another
parameter_list|)
function_decl|;
block|}
DECL|field|customPrototypes
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customPrototypes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Register a custom index meta data factory. Make sure to call it from a static block.      */
DECL|method|registerPrototype
specifier|public
specifier|static
name|void
name|registerPrototype
parameter_list|(
name|String
name|type
parameter_list|,
name|Custom
name|proto
parameter_list|)
block|{
name|customPrototypes
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|proto
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nullable
DECL|method|lookupPrototype
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Custom
parameter_list|>
name|T
name|lookupPrototype
parameter_list|(
name|String
name|type
parameter_list|)
block|{
comment|//noinspection unchecked
return|return
operator|(
name|T
operator|)
name|customPrototypes
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|lookupPrototypeSafe
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Custom
parameter_list|>
name|T
name|lookupPrototypeSafe
parameter_list|(
name|String
name|type
parameter_list|)
block|{
comment|//noinspection unchecked
name|T
name|proto
init|=
operator|(
name|T
operator|)
name|customPrototypes
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No custom metadata prototype registered for type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|proto
return|;
block|}
DECL|field|INDEX_READ_ONLY_BLOCK
specifier|public
specifier|static
specifier|final
name|ClusterBlock
name|INDEX_READ_ONLY_BLOCK
init|=
operator|new
name|ClusterBlock
argument_list|(
literal|5
argument_list|,
literal|"index read-only (api)"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|RestStatus
operator|.
name|FORBIDDEN
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ClusterBlockLevel
operator|.
name|WRITE
argument_list|,
name|ClusterBlockLevel
operator|.
name|METADATA_WRITE
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|INDEX_READ_BLOCK
specifier|public
specifier|static
specifier|final
name|ClusterBlock
name|INDEX_READ_BLOCK
init|=
operator|new
name|ClusterBlock
argument_list|(
literal|7
argument_list|,
literal|"index read (api)"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|RestStatus
operator|.
name|FORBIDDEN
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ClusterBlockLevel
operator|.
name|READ
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|INDEX_WRITE_BLOCK
specifier|public
specifier|static
specifier|final
name|ClusterBlock
name|INDEX_WRITE_BLOCK
init|=
operator|new
name|ClusterBlock
argument_list|(
literal|8
argument_list|,
literal|"index write (api)"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|RestStatus
operator|.
name|FORBIDDEN
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ClusterBlockLevel
operator|.
name|WRITE
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|INDEX_METADATA_BLOCK
specifier|public
specifier|static
specifier|final
name|ClusterBlock
name|INDEX_METADATA_BLOCK
init|=
operator|new
name|ClusterBlock
argument_list|(
literal|9
argument_list|,
literal|"index metadata (api)"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|RestStatus
operator|.
name|FORBIDDEN
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ClusterBlockLevel
operator|.
name|METADATA_WRITE
argument_list|,
name|ClusterBlockLevel
operator|.
name|METADATA_READ
argument_list|)
argument_list|)
decl_stmt|;
DECL|enum|State
specifier|public
specifier|static
enum|enum
name|State
block|{
DECL|enum constant|OPEN
name|OPEN
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
block|,
DECL|enum constant|CLOSE
name|CLOSE
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|;
DECL|field|id
specifier|private
specifier|final
name|byte
name|id
decl_stmt|;
DECL|method|State
name|State
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|byte
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
DECL|method|fromId
specifier|public
specifier|static
name|State
name|fromId
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|0
condition|)
block|{
return|return
name|OPEN
return|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
literal|1
condition|)
block|{
return|return
name|CLOSE
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No state match for id ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
DECL|method|fromString
specifier|public
specifier|static
name|State
name|fromString
parameter_list|(
name|String
name|state
parameter_list|)
block|{
if|if
condition|(
literal|"open"
operator|.
name|equals
argument_list|(
name|state
argument_list|)
condition|)
block|{
return|return
name|OPEN
return|;
block|}
elseif|else
if|if
condition|(
literal|"close"
operator|.
name|equals
argument_list|(
name|state
argument_list|)
condition|)
block|{
return|return
name|CLOSE
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No state match for ["
operator|+
name|state
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|field|INDEX_SETTING_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_SETTING_PREFIX
init|=
literal|"index."
decl_stmt|;
DECL|field|SETTING_NUMBER_OF_SHARDS
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_NUMBER_OF_SHARDS
init|=
literal|"index.number_of_shards"
decl_stmt|;
DECL|field|INDEX_NUMBER_OF_SHARDS_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|INDEX_NUMBER_OF_SHARDS_SETTING
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|INDEX
argument_list|)
decl_stmt|;
DECL|field|SETTING_NUMBER_OF_REPLICAS
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_NUMBER_OF_REPLICAS
init|=
literal|"index.number_of_replicas"
decl_stmt|;
DECL|field|INDEX_NUMBER_OF_REPLICAS_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|INDEX_NUMBER_OF_REPLICAS_SETTING
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|INDEX
argument_list|)
decl_stmt|;
DECL|field|SETTING_SHADOW_REPLICAS
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_SHADOW_REPLICAS
init|=
literal|"index.shadow_replicas"
decl_stmt|;
DECL|field|INDEX_SHADOW_REPLICAS_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|INDEX_SHADOW_REPLICAS_SETTING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
name|SETTING_SHADOW_REPLICAS
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|INDEX
argument_list|)
decl_stmt|;
DECL|field|SETTING_SHARED_FILESYSTEM
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_SHARED_FILESYSTEM
init|=
literal|"index.shared_filesystem"
decl_stmt|;
DECL|field|INDEX_SHARED_FILESYSTEM_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|INDEX_SHARED_FILESYSTEM_SETTING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
name|SETTING_SHARED_FILESYSTEM
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|INDEX
argument_list|)
decl_stmt|;
DECL|field|SETTING_AUTO_EXPAND_REPLICAS
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_AUTO_EXPAND_REPLICAS
init|=
literal|"index.auto_expand_replicas"
decl_stmt|;
DECL|field|INDEX_AUTO_EXPAND_REPLICAS_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|AutoExpandReplicas
argument_list|>
name|INDEX_AUTO_EXPAND_REPLICAS_SETTING
init|=
name|AutoExpandReplicas
operator|.
name|SETTING
decl_stmt|;
DECL|field|SETTING_READ_ONLY
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_READ_ONLY
init|=
literal|"index.blocks.read_only"
decl_stmt|;
DECL|field|INDEX_READ_ONLY_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|INDEX_READ_ONLY_SETTING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
name|SETTING_READ_ONLY
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|INDEX
argument_list|)
decl_stmt|;
DECL|field|SETTING_BLOCKS_READ
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_BLOCKS_READ
init|=
literal|"index.blocks.read"
decl_stmt|;
DECL|field|INDEX_BLOCKS_READ_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|INDEX_BLOCKS_READ_SETTING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
name|SETTING_BLOCKS_READ
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|INDEX
argument_list|)
decl_stmt|;
DECL|field|SETTING_BLOCKS_WRITE
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_BLOCKS_WRITE
init|=
literal|"index.blocks.write"
decl_stmt|;
DECL|field|INDEX_BLOCKS_WRITE_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|INDEX_BLOCKS_WRITE_SETTING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
name|SETTING_BLOCKS_WRITE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|INDEX
argument_list|)
decl_stmt|;
DECL|field|SETTING_BLOCKS_METADATA
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_BLOCKS_METADATA
init|=
literal|"index.blocks.metadata"
decl_stmt|;
DECL|field|INDEX_BLOCKS_METADATA_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|INDEX_BLOCKS_METADATA_SETTING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
name|SETTING_BLOCKS_METADATA
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|INDEX
argument_list|)
decl_stmt|;
DECL|field|SETTING_VERSION_CREATED
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_VERSION_CREATED
init|=
literal|"index.version.created"
decl_stmt|;
DECL|field|SETTING_VERSION_CREATED_STRING
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_VERSION_CREATED_STRING
init|=
literal|"index.version.created_string"
decl_stmt|;
DECL|field|SETTING_VERSION_UPGRADED
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_VERSION_UPGRADED
init|=
literal|"index.version.upgraded"
decl_stmt|;
DECL|field|SETTING_VERSION_UPGRADED_STRING
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_VERSION_UPGRADED_STRING
init|=
literal|"index.version.upgraded_string"
decl_stmt|;
DECL|field|SETTING_VERSION_MINIMUM_COMPATIBLE
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_VERSION_MINIMUM_COMPATIBLE
init|=
literal|"index.version.minimum_compatible"
decl_stmt|;
DECL|field|SETTING_CREATION_DATE
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_CREATION_DATE
init|=
literal|"index.creation_date"
decl_stmt|;
DECL|field|SETTING_PRIORITY
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_PRIORITY
init|=
literal|"index.priority"
decl_stmt|;
DECL|field|INDEX_PRIORITY_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Integer
argument_list|>
name|INDEX_PRIORITY_SETTING
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"index.priority"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|INDEX
argument_list|)
decl_stmt|;
DECL|field|SETTING_CREATION_DATE_STRING
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_CREATION_DATE_STRING
init|=
literal|"index.creation_date_string"
decl_stmt|;
DECL|field|SETTING_INDEX_UUID
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_INDEX_UUID
init|=
literal|"index.uuid"
decl_stmt|;
DECL|field|SETTING_DATA_PATH
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_DATA_PATH
init|=
literal|"index.data_path"
decl_stmt|;
DECL|field|INDEX_DATA_PATH_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|INDEX_DATA_PATH_SETTING
init|=
operator|new
name|Setting
argument_list|<>
argument_list|(
name|SETTING_DATA_PATH
argument_list|,
literal|""
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|INDEX
argument_list|)
decl_stmt|;
DECL|field|SETTING_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE
init|=
literal|"index.shared_filesystem.recover_on_any_node"
decl_stmt|;
DECL|field|INDEX_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|INDEX_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE_SETTING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
name|SETTING_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|INDEX
argument_list|)
decl_stmt|;
DECL|field|INDEX_UUID_NA_VALUE
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_UUID_NA_VALUE
init|=
literal|"_na_"
decl_stmt|;
DECL|field|INDEX_ROUTING_REQUIRE_GROUP_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Settings
argument_list|>
name|INDEX_ROUTING_REQUIRE_GROUP_SETTING
init|=
name|Setting
operator|.
name|groupSetting
argument_list|(
literal|"index.routing.allocation.require."
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|INDEX
argument_list|)
decl_stmt|;
DECL|field|INDEX_ROUTING_INCLUDE_GROUP_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Settings
argument_list|>
name|INDEX_ROUTING_INCLUDE_GROUP_SETTING
init|=
name|Setting
operator|.
name|groupSetting
argument_list|(
literal|"index.routing.allocation.include."
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|INDEX
argument_list|)
decl_stmt|;
DECL|field|INDEX_ROUTING_EXCLUDE_GROUP_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Settings
argument_list|>
name|INDEX_ROUTING_EXCLUDE_GROUP_SETTING
init|=
name|Setting
operator|.
name|groupSetting
argument_list|(
literal|"index.routing.allocation.exclude."
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|INDEX
argument_list|)
decl_stmt|;
DECL|field|PROTO
specifier|public
specifier|static
specifier|final
name|IndexMetaData
name|PROTO
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|""
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|KEY_ACTIVE_ALLOCATIONS
specifier|public
specifier|static
specifier|final
name|String
name|KEY_ACTIVE_ALLOCATIONS
init|=
literal|"active_allocations"
decl_stmt|;
DECL|field|KEY_VERSION
specifier|static
specifier|final
name|String
name|KEY_VERSION
init|=
literal|"version"
decl_stmt|;
DECL|field|KEY_SETTINGS
specifier|static
specifier|final
name|String
name|KEY_SETTINGS
init|=
literal|"settings"
decl_stmt|;
DECL|field|KEY_STATE
specifier|static
specifier|final
name|String
name|KEY_STATE
init|=
literal|"state"
decl_stmt|;
DECL|field|KEY_MAPPINGS
specifier|static
specifier|final
name|String
name|KEY_MAPPINGS
init|=
literal|"mappings"
decl_stmt|;
DECL|field|KEY_ALIASES
specifier|static
specifier|final
name|String
name|KEY_ALIASES
init|=
literal|"aliases"
decl_stmt|;
DECL|field|KEY_PRIMARY_TERMS
specifier|static
specifier|final
name|String
name|KEY_PRIMARY_TERMS
init|=
literal|"primary_terms"
decl_stmt|;
DECL|field|numberOfShards
specifier|private
specifier|final
name|int
name|numberOfShards
decl_stmt|;
DECL|field|numberOfReplicas
specifier|private
specifier|final
name|int
name|numberOfReplicas
decl_stmt|;
DECL|field|index
specifier|private
specifier|final
name|Index
name|index
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|long
name|version
decl_stmt|;
DECL|field|primaryTerms
specifier|private
specifier|final
name|long
index|[]
name|primaryTerms
decl_stmt|;
DECL|field|state
specifier|private
specifier|final
name|State
name|state
decl_stmt|;
DECL|field|aliases
specifier|private
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|aliases
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|field|mappings
specifier|private
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|mappings
decl_stmt|;
DECL|field|customs
specifier|private
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
decl_stmt|;
DECL|field|activeAllocationIds
specifier|private
specifier|final
name|ImmutableOpenIntMap
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|activeAllocationIds
decl_stmt|;
DECL|field|totalNumberOfShards
specifier|private
specifier|transient
specifier|final
name|int
name|totalNumberOfShards
decl_stmt|;
DECL|field|requireFilters
specifier|private
specifier|final
name|DiscoveryNodeFilters
name|requireFilters
decl_stmt|;
DECL|field|includeFilters
specifier|private
specifier|final
name|DiscoveryNodeFilters
name|includeFilters
decl_stmt|;
DECL|field|excludeFilters
specifier|private
specifier|final
name|DiscoveryNodeFilters
name|excludeFilters
decl_stmt|;
DECL|field|indexCreatedVersion
specifier|private
specifier|final
name|Version
name|indexCreatedVersion
decl_stmt|;
DECL|field|indexUpgradedVersion
specifier|private
specifier|final
name|Version
name|indexUpgradedVersion
decl_stmt|;
DECL|field|minimumCompatibleLuceneVersion
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
name|minimumCompatibleLuceneVersion
decl_stmt|;
DECL|method|IndexMetaData
specifier|private
name|IndexMetaData
parameter_list|(
name|Index
name|index
parameter_list|,
name|long
name|version
parameter_list|,
name|long
index|[]
name|primaryTerms
parameter_list|,
name|State
name|state
parameter_list|,
name|int
name|numberOfShards
parameter_list|,
name|int
name|numberOfReplicas
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|mappings
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|aliases
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
parameter_list|,
name|ImmutableOpenIntMap
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|activeAllocationIds
parameter_list|,
name|DiscoveryNodeFilters
name|requireFilters
parameter_list|,
name|DiscoveryNodeFilters
name|includeFilters
parameter_list|,
name|DiscoveryNodeFilters
name|excludeFilters
parameter_list|,
name|Version
name|indexCreatedVersion
parameter_list|,
name|Version
name|indexUpgradedVersion
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
name|minimumCompatibleLuceneVersion
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|primaryTerms
operator|=
name|primaryTerms
expr_stmt|;
assert|assert
name|primaryTerms
operator|.
name|length
operator|==
name|numberOfShards
assert|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|numberOfShards
operator|=
name|numberOfShards
expr_stmt|;
name|this
operator|.
name|numberOfReplicas
operator|=
name|numberOfReplicas
expr_stmt|;
name|this
operator|.
name|totalNumberOfShards
operator|=
name|numberOfShards
operator|*
operator|(
name|numberOfReplicas
operator|+
literal|1
operator|)
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|this
operator|.
name|mappings
operator|=
name|mappings
expr_stmt|;
name|this
operator|.
name|customs
operator|=
name|customs
expr_stmt|;
name|this
operator|.
name|aliases
operator|=
name|aliases
expr_stmt|;
name|this
operator|.
name|activeAllocationIds
operator|=
name|activeAllocationIds
expr_stmt|;
name|this
operator|.
name|requireFilters
operator|=
name|requireFilters
expr_stmt|;
name|this
operator|.
name|includeFilters
operator|=
name|includeFilters
expr_stmt|;
name|this
operator|.
name|excludeFilters
operator|=
name|excludeFilters
expr_stmt|;
name|this
operator|.
name|indexCreatedVersion
operator|=
name|indexCreatedVersion
expr_stmt|;
name|this
operator|.
name|indexUpgradedVersion
operator|=
name|indexUpgradedVersion
expr_stmt|;
name|this
operator|.
name|minimumCompatibleLuceneVersion
operator|=
name|minimumCompatibleLuceneVersion
expr_stmt|;
block|}
DECL|method|getIndex
specifier|public
name|Index
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
DECL|method|getIndexUUID
specifier|public
name|String
name|getIndexUUID
parameter_list|()
block|{
return|return
name|index
operator|.
name|getUUID
argument_list|()
return|;
block|}
comment|/**      * Test whether the current index UUID is the same as the given one. Returns true if either are _na_      */
DECL|method|isSameUUID
specifier|public
name|boolean
name|isSameUUID
parameter_list|(
name|String
name|otherUUID
parameter_list|)
block|{
assert|assert
name|otherUUID
operator|!=
literal|null
assert|;
assert|assert
name|getIndexUUID
argument_list|()
operator|!=
literal|null
assert|;
if|if
condition|(
name|INDEX_UUID_NA_VALUE
operator|.
name|equals
argument_list|(
name|otherUUID
argument_list|)
operator|||
name|INDEX_UUID_NA_VALUE
operator|.
name|equals
argument_list|(
name|getIndexUUID
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|otherUUID
operator|.
name|equals
argument_list|(
name|getIndexUUID
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getVersion
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
comment|/**      * The term of the current selected primary. This is a non-negative number incremented when      * a primary shard is assigned after a full cluster restart (see {@link ShardRouting#initialize(java.lang.String, java.lang.String, long)}      * or a replica shard is promoted to a primary (see {@link ShardRouting#moveToPrimary()}).      **/
DECL|method|primaryTerm
specifier|public
name|long
name|primaryTerm
parameter_list|(
name|int
name|shardId
parameter_list|)
block|{
return|return
name|this
operator|.
name|primaryTerms
index|[
name|shardId
index|]
return|;
block|}
comment|/**      * Return the {@link Version} on which this index has been created. This      * information is typically useful for backward compatibility.      */
DECL|method|getCreationVersion
specifier|public
name|Version
name|getCreationVersion
parameter_list|()
block|{
return|return
name|indexCreatedVersion
return|;
block|}
comment|/**      * Return the {@link Version} on which this index has been upgraded. This      * information is typically useful for backward compatibility.      */
DECL|method|getUpgradedVersion
specifier|public
name|Version
name|getUpgradedVersion
parameter_list|()
block|{
return|return
name|indexUpgradedVersion
return|;
block|}
comment|/**      * Return the {@link org.apache.lucene.util.Version} of the oldest lucene segment in the index      */
DECL|method|getMinimumCompatibleVersion
specifier|public
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
name|getMinimumCompatibleVersion
parameter_list|()
block|{
return|return
name|minimumCompatibleLuceneVersion
return|;
block|}
DECL|method|getCreationDate
specifier|public
name|long
name|getCreationDate
parameter_list|()
block|{
return|return
name|settings
operator|.
name|getAsLong
argument_list|(
name|SETTING_CREATION_DATE
argument_list|,
operator|-
literal|1L
argument_list|)
return|;
block|}
DECL|method|getState
specifier|public
name|State
name|getState
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
return|;
block|}
DECL|method|getNumberOfShards
specifier|public
name|int
name|getNumberOfShards
parameter_list|()
block|{
return|return
name|numberOfShards
return|;
block|}
DECL|method|getNumberOfReplicas
specifier|public
name|int
name|getNumberOfReplicas
parameter_list|()
block|{
return|return
name|numberOfReplicas
return|;
block|}
DECL|method|getTotalNumberOfShards
specifier|public
name|int
name|getTotalNumberOfShards
parameter_list|()
block|{
return|return
name|totalNumberOfShards
return|;
block|}
DECL|method|getSettings
specifier|public
name|Settings
name|getSettings
parameter_list|()
block|{
return|return
name|settings
return|;
block|}
DECL|method|getAliases
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|getAliases
parameter_list|()
block|{
return|return
name|this
operator|.
name|aliases
return|;
block|}
DECL|method|getMappings
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|getMappings
parameter_list|()
block|{
return|return
name|mappings
return|;
block|}
annotation|@
name|Nullable
DECL|method|mapping
specifier|public
name|MappingMetaData
name|mapping
parameter_list|(
name|String
name|mappingType
parameter_list|)
block|{
return|return
name|mappings
operator|.
name|get
argument_list|(
name|mappingType
argument_list|)
return|;
block|}
comment|/**      * Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),      * in this case, we want to return the default mapping in case it has some default mapping definitions.      *<p>      * Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,      * setting its routing, timestamp, and so on if needed.      */
annotation|@
name|Nullable
DECL|method|mappingOrDefault
specifier|public
name|MappingMetaData
name|mappingOrDefault
parameter_list|(
name|String
name|mappingType
parameter_list|)
block|{
name|MappingMetaData
name|mapping
init|=
name|mappings
operator|.
name|get
argument_list|(
name|mappingType
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
return|return
name|mapping
return|;
block|}
return|return
name|mappings
operator|.
name|get
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|)
return|;
block|}
DECL|method|getCustoms
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|getCustoms
parameter_list|()
block|{
return|return
name|this
operator|.
name|customs
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|custom
specifier|public
parameter_list|<
name|T
extends|extends
name|Custom
parameter_list|>
name|T
name|custom
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|customs
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|getActiveAllocationIds
specifier|public
name|ImmutableOpenIntMap
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|getActiveAllocationIds
parameter_list|()
block|{
return|return
name|activeAllocationIds
return|;
block|}
DECL|method|activeAllocationIds
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|activeAllocationIds
parameter_list|(
name|int
name|shardId
parameter_list|)
block|{
assert|assert
name|shardId
operator|>=
literal|0
operator|&&
name|shardId
operator|<
name|numberOfShards
assert|;
return|return
name|activeAllocationIds
operator|.
name|get
argument_list|(
name|shardId
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|requireFilters
specifier|public
name|DiscoveryNodeFilters
name|requireFilters
parameter_list|()
block|{
return|return
name|requireFilters
return|;
block|}
annotation|@
name|Nullable
DECL|method|includeFilters
specifier|public
name|DiscoveryNodeFilters
name|includeFilters
parameter_list|()
block|{
return|return
name|includeFilters
return|;
block|}
annotation|@
name|Nullable
DECL|method|excludeFilters
specifier|public
name|DiscoveryNodeFilters
name|excludeFilters
parameter_list|()
block|{
return|return
name|excludeFilters
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|IndexMetaData
name|that
init|=
operator|(
name|IndexMetaData
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|version
operator|!=
name|that
operator|.
name|version
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|aliases
operator|.
name|equals
argument_list|(
name|that
operator|.
name|aliases
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|index
operator|.
name|equals
argument_list|(
name|that
operator|.
name|index
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|mappings
operator|.
name|equals
argument_list|(
name|that
operator|.
name|mappings
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|settings
operator|.
name|equals
argument_list|(
name|that
operator|.
name|settings
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|state
operator|!=
name|that
operator|.
name|state
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|customs
operator|.
name|equals
argument_list|(
name|that
operator|.
name|customs
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|primaryTerms
argument_list|,
name|that
operator|.
name|primaryTerms
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|activeAllocationIds
operator|.
name|equals
argument_list|(
name|that
operator|.
name|activeAllocationIds
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|index
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|Long
operator|.
name|hashCode
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|state
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|aliases
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|settings
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|mappings
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|customs
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|primaryTerms
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|activeAllocationIds
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|diff
specifier|public
name|Diff
argument_list|<
name|IndexMetaData
argument_list|>
name|diff
parameter_list|(
name|IndexMetaData
name|previousState
parameter_list|)
block|{
return|return
operator|new
name|IndexMetaDataDiff
argument_list|(
name|previousState
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readDiffFrom
specifier|public
name|Diff
argument_list|<
name|IndexMetaData
argument_list|>
name|readDiffFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|IndexMetaDataDiff
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fromXContent
specifier|public
name|IndexMetaData
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Builder
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|Builder
operator|.
name|toXContent
argument_list|(
name|this
argument_list|,
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|class|IndexMetaDataDiff
specifier|private
specifier|static
class|class
name|IndexMetaDataDiff
implements|implements
name|Diff
argument_list|<
name|IndexMetaData
argument_list|>
block|{
DECL|field|index
specifier|private
specifier|final
name|String
name|index
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|long
name|version
decl_stmt|;
DECL|field|primaryTerms
specifier|private
specifier|final
name|long
index|[]
name|primaryTerms
decl_stmt|;
DECL|field|state
specifier|private
specifier|final
name|State
name|state
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|field|mappings
specifier|private
specifier|final
name|Diff
argument_list|<
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
argument_list|>
name|mappings
decl_stmt|;
DECL|field|aliases
specifier|private
specifier|final
name|Diff
argument_list|<
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
argument_list|>
name|aliases
decl_stmt|;
DECL|field|customs
specifier|private
specifier|final
name|Diff
argument_list|<
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
argument_list|>
name|customs
decl_stmt|;
DECL|field|activeAllocationIds
specifier|private
specifier|final
name|Diff
argument_list|<
name|ImmutableOpenIntMap
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|activeAllocationIds
decl_stmt|;
DECL|method|IndexMetaDataDiff
specifier|public
name|IndexMetaDataDiff
parameter_list|(
name|IndexMetaData
name|before
parameter_list|,
name|IndexMetaData
name|after
parameter_list|)
block|{
name|index
operator|=
name|after
operator|.
name|index
operator|.
name|getName
argument_list|()
expr_stmt|;
name|version
operator|=
name|after
operator|.
name|version
expr_stmt|;
name|state
operator|=
name|after
operator|.
name|state
expr_stmt|;
name|settings
operator|=
name|after
operator|.
name|settings
expr_stmt|;
name|primaryTerms
operator|=
name|after
operator|.
name|primaryTerms
expr_stmt|;
name|mappings
operator|=
name|DiffableUtils
operator|.
name|diff
argument_list|(
name|before
operator|.
name|mappings
argument_list|,
name|after
operator|.
name|mappings
argument_list|,
name|DiffableUtils
operator|.
name|getStringKeySerializer
argument_list|()
argument_list|)
expr_stmt|;
name|aliases
operator|=
name|DiffableUtils
operator|.
name|diff
argument_list|(
name|before
operator|.
name|aliases
argument_list|,
name|after
operator|.
name|aliases
argument_list|,
name|DiffableUtils
operator|.
name|getStringKeySerializer
argument_list|()
argument_list|)
expr_stmt|;
name|customs
operator|=
name|DiffableUtils
operator|.
name|diff
argument_list|(
name|before
operator|.
name|customs
argument_list|,
name|after
operator|.
name|customs
argument_list|,
name|DiffableUtils
operator|.
name|getStringKeySerializer
argument_list|()
argument_list|)
expr_stmt|;
name|activeAllocationIds
operator|=
name|DiffableUtils
operator|.
name|diff
argument_list|(
name|before
operator|.
name|activeAllocationIds
argument_list|,
name|after
operator|.
name|activeAllocationIds
argument_list|,
name|DiffableUtils
operator|.
name|getVIntKeySerializer
argument_list|()
argument_list|,
name|DiffableUtils
operator|.
name|StringSetValueSerializer
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|IndexMetaDataDiff
specifier|public
name|IndexMetaDataDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|index
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|fromId
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|=
name|Settings
operator|.
name|readSettingsFromStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|primaryTerms
operator|=
name|in
operator|.
name|readVLongArray
argument_list|()
expr_stmt|;
name|mappings
operator|=
name|DiffableUtils
operator|.
name|readImmutableOpenMapDiff
argument_list|(
name|in
argument_list|,
name|DiffableUtils
operator|.
name|getStringKeySerializer
argument_list|()
argument_list|,
name|MappingMetaData
operator|.
name|PROTO
argument_list|)
expr_stmt|;
name|aliases
operator|=
name|DiffableUtils
operator|.
name|readImmutableOpenMapDiff
argument_list|(
name|in
argument_list|,
name|DiffableUtils
operator|.
name|getStringKeySerializer
argument_list|()
argument_list|,
name|AliasMetaData
operator|.
name|PROTO
argument_list|)
expr_stmt|;
name|customs
operator|=
name|DiffableUtils
operator|.
name|readImmutableOpenMapDiff
argument_list|(
name|in
argument_list|,
name|DiffableUtils
operator|.
name|getStringKeySerializer
argument_list|()
argument_list|,
operator|new
name|DiffableUtils
operator|.
name|DiffableValueSerializer
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Custom
name|read
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|lookupPrototypeSafe
argument_list|(
name|key
argument_list|)
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Diff
argument_list|<
name|Custom
argument_list|>
name|readDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|lookupPrototypeSafe
argument_list|(
name|key
argument_list|)
operator|.
name|readDiffFrom
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|activeAllocationIds
operator|=
name|DiffableUtils
operator|.
name|readImmutableOpenIntMapDiff
argument_list|(
name|in
argument_list|,
name|DiffableUtils
operator|.
name|getVIntKeySerializer
argument_list|()
argument_list|,
name|DiffableUtils
operator|.
name|StringSetValueSerializer
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|state
operator|.
name|id
argument_list|)
expr_stmt|;
name|Settings
operator|.
name|writeSettingsToStream
argument_list|(
name|settings
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLongArray
argument_list|(
name|primaryTerms
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|aliases
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|customs
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|activeAllocationIds
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|IndexMetaData
name|apply
parameter_list|(
name|IndexMetaData
name|part
parameter_list|)
block|{
name|Builder
name|builder
init|=
name|builder
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|builder
operator|.
name|version
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|builder
operator|.
name|state
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|builder
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|builder
operator|.
name|primaryTerms
argument_list|(
name|primaryTerms
argument_list|)
expr_stmt|;
name|builder
operator|.
name|mappings
operator|.
name|putAll
argument_list|(
name|mappings
operator|.
name|apply
argument_list|(
name|part
operator|.
name|mappings
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|aliases
operator|.
name|putAll
argument_list|(
name|aliases
operator|.
name|apply
argument_list|(
name|part
operator|.
name|aliases
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|customs
operator|.
name|putAll
argument_list|(
name|customs
operator|.
name|apply
argument_list|(
name|part
operator|.
name|customs
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|activeAllocationIds
operator|.
name|putAll
argument_list|(
name|activeAllocationIds
operator|.
name|apply
argument_list|(
name|part
operator|.
name|activeAllocationIds
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|IndexMetaData
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|version
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|state
argument_list|(
name|State
operator|.
name|fromId
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|settings
argument_list|(
name|readSettingsFromStream
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|primaryTerms
argument_list|(
name|in
operator|.
name|readVLongArray
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|mappingsSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mappingsSize
condition|;
name|i
operator|++
control|)
block|{
name|MappingMetaData
name|mappingMd
init|=
name|MappingMetaData
operator|.
name|PROTO
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|builder
operator|.
name|putMapping
argument_list|(
name|mappingMd
argument_list|)
expr_stmt|;
block|}
name|int
name|aliasesSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aliasesSize
condition|;
name|i
operator|++
control|)
block|{
name|AliasMetaData
name|aliasMd
init|=
name|AliasMetaData
operator|.
name|Builder
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|builder
operator|.
name|putAlias
argument_list|(
name|aliasMd
argument_list|)
expr_stmt|;
block|}
name|int
name|customSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|customSize
condition|;
name|i
operator|++
control|)
block|{
name|String
name|type
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|Custom
name|customIndexMetaData
init|=
name|lookupPrototypeSafe
argument_list|(
name|type
argument_list|)
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|builder
operator|.
name|putCustom
argument_list|(
name|type
argument_list|,
name|customIndexMetaData
argument_list|)
expr_stmt|;
block|}
name|int
name|activeAllocationIdsSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|activeAllocationIdsSize
condition|;
name|i
operator|++
control|)
block|{
name|int
name|key
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allocationIds
init|=
name|DiffableUtils
operator|.
name|StringSetValueSerializer
operator|.
name|getInstance
argument_list|()
operator|.
name|read
argument_list|(
name|in
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|builder
operator|.
name|putActiveAllocationIds
argument_list|(
name|key
argument_list|,
name|allocationIds
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// uuid will come as part of settings
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|state
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|writeSettingsToStream
argument_list|(
name|settings
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLongArray
argument_list|(
name|primaryTerms
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|mappings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|MappingMetaData
argument_list|>
name|cursor
range|:
name|mappings
operator|.
name|values
argument_list|()
control|)
block|{
name|cursor
operator|.
name|value
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|aliases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|AliasMetaData
argument_list|>
name|cursor
range|:
name|aliases
operator|.
name|values
argument_list|()
control|)
block|{
name|cursor
operator|.
name|value
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|customs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|cursor
range|:
name|customs
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|value
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|activeAllocationIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|IntObjectCursor
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|cursor
range|:
name|activeAllocationIds
control|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
expr_stmt|;
name|DiffableUtils
operator|.
name|StringSetValueSerializer
operator|.
name|getInstance
argument_list|()
operator|.
name|write
argument_list|(
name|cursor
operator|.
name|value
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|indexMetaData
argument_list|)
return|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|index
specifier|private
name|String
name|index
decl_stmt|;
DECL|field|state
specifier|private
name|State
name|state
init|=
name|State
operator|.
name|OPEN
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
init|=
literal|1
decl_stmt|;
DECL|field|primaryTerms
specifier|private
name|long
index|[]
name|primaryTerms
init|=
literal|null
decl_stmt|;
DECL|field|settings
specifier|private
name|Settings
name|settings
init|=
name|Settings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
decl_stmt|;
DECL|field|mappings
specifier|private
specifier|final
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|mappings
decl_stmt|;
DECL|field|aliases
specifier|private
specifier|final
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|aliases
decl_stmt|;
DECL|field|customs
specifier|private
specifier|final
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
decl_stmt|;
DECL|field|activeAllocationIds
specifier|private
specifier|final
name|ImmutableOpenIntMap
operator|.
name|Builder
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|activeAllocationIds
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|mappings
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
expr_stmt|;
name|this
operator|.
name|aliases
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
expr_stmt|;
name|this
operator|.
name|customs
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
expr_stmt|;
name|this
operator|.
name|activeAllocationIds
operator|=
name|ImmutableOpenIntMap
operator|.
name|builder
argument_list|()
expr_stmt|;
block|}
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|indexMetaData
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|indexMetaData
operator|.
name|state
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|indexMetaData
operator|.
name|version
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|indexMetaData
operator|.
name|getSettings
argument_list|()
expr_stmt|;
name|this
operator|.
name|primaryTerms
operator|=
name|indexMetaData
operator|.
name|primaryTerms
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|mappings
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|indexMetaData
operator|.
name|mappings
argument_list|)
expr_stmt|;
name|this
operator|.
name|aliases
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|indexMetaData
operator|.
name|aliases
argument_list|)
expr_stmt|;
name|this
operator|.
name|customs
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|indexMetaData
operator|.
name|customs
argument_list|)
expr_stmt|;
name|this
operator|.
name|activeAllocationIds
operator|=
name|ImmutableOpenIntMap
operator|.
name|builder
argument_list|(
name|indexMetaData
operator|.
name|activeAllocationIds
argument_list|)
expr_stmt|;
block|}
DECL|method|index
specifier|public
name|String
name|index
parameter_list|()
block|{
return|return
name|index
return|;
block|}
DECL|method|index
specifier|public
name|Builder
name|index
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|numberOfShards
specifier|public
name|Builder
name|numberOfShards
parameter_list|(
name|int
name|numberOfShards
parameter_list|)
block|{
name|settings
operator|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|numberOfShards
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|numberOfShards
specifier|public
name|int
name|numberOfShards
parameter_list|()
block|{
return|return
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|numberOfReplicas
specifier|public
name|Builder
name|numberOfReplicas
parameter_list|(
name|int
name|numberOfReplicas
parameter_list|)
block|{
name|settings
operator|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|numberOfReplicas
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|numberOfReplicas
specifier|public
name|int
name|numberOfReplicas
parameter_list|()
block|{
return|return
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|creationDate
specifier|public
name|Builder
name|creationDate
parameter_list|(
name|long
name|creationDate
parameter_list|)
block|{
name|settings
operator|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_CREATION_DATE
argument_list|,
name|creationDate
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|settings
specifier|public
name|Builder
name|settings
parameter_list|(
name|Settings
operator|.
name|Builder
name|settings
parameter_list|)
block|{
return|return
name|settings
argument_list|(
name|settings
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|settings
specifier|public
name|Builder
name|settings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|mapping
specifier|public
name|MappingMetaData
name|mapping
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|mappings
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|putMapping
specifier|public
name|Builder
name|putMapping
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|source
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|source
argument_list|)
operator|.
name|createParser
argument_list|(
name|source
argument_list|)
init|)
block|{
name|putMapping
argument_list|(
operator|new
name|MappingMetaData
argument_list|(
name|type
argument_list|,
name|parser
operator|.
name|mapOrdered
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|putMapping
specifier|public
name|Builder
name|putMapping
parameter_list|(
name|MappingMetaData
name|mappingMd
parameter_list|)
block|{
name|mappings
operator|.
name|put
argument_list|(
name|mappingMd
operator|.
name|type
argument_list|()
argument_list|,
name|mappingMd
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|state
specifier|public
name|Builder
name|state
parameter_list|(
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|putAlias
specifier|public
name|Builder
name|putAlias
parameter_list|(
name|AliasMetaData
name|aliasMetaData
parameter_list|)
block|{
name|aliases
operator|.
name|put
argument_list|(
name|aliasMetaData
operator|.
name|alias
argument_list|()
argument_list|,
name|aliasMetaData
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|putAlias
specifier|public
name|Builder
name|putAlias
parameter_list|(
name|AliasMetaData
operator|.
name|Builder
name|aliasMetaData
parameter_list|)
block|{
name|aliases
operator|.
name|put
argument_list|(
name|aliasMetaData
operator|.
name|alias
argument_list|()
argument_list|,
name|aliasMetaData
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|removeAlias
specifier|public
name|Builder
name|removeAlias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|aliases
operator|.
name|remove
argument_list|(
name|alias
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|removeAllAliases
specifier|public
name|Builder
name|removeAllAliases
parameter_list|()
block|{
name|aliases
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|putCustom
specifier|public
name|Builder
name|putCustom
parameter_list|(
name|String
name|type
parameter_list|,
name|Custom
name|customIndexMetaData
parameter_list|)
block|{
name|this
operator|.
name|customs
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|customIndexMetaData
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|putActiveAllocationIds
specifier|public
name|Builder
name|putActiveAllocationIds
parameter_list|(
name|int
name|shardId
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allocationIds
parameter_list|)
block|{
name|activeAllocationIds
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
operator|new
name|HashSet
argument_list|(
name|allocationIds
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|version
specifier|public
name|Builder
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * returns the primary term for the given shard.          * See {@link IndexMetaData#primaryTerm(int)} for more information.          */
DECL|method|primaryTerm
specifier|public
name|long
name|primaryTerm
parameter_list|(
name|int
name|shardId
parameter_list|)
block|{
if|if
condition|(
name|primaryTerms
operator|==
literal|null
condition|)
block|{
name|initializePrimaryTerms
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|primaryTerms
index|[
name|shardId
index|]
return|;
block|}
comment|/**          * sets the primary term for the given shard.          * See {@link IndexMetaData#primaryTerm(int)} for more information.          */
DECL|method|primaryTerm
specifier|public
name|Builder
name|primaryTerm
parameter_list|(
name|int
name|shardId
parameter_list|,
name|long
name|primaryTerm
parameter_list|)
block|{
if|if
condition|(
name|primaryTerms
operator|==
literal|null
condition|)
block|{
name|initializePrimaryTerms
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|primaryTerms
index|[
name|shardId
index|]
operator|=
name|primaryTerm
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|primaryTerms
specifier|private
name|void
name|primaryTerms
parameter_list|(
name|long
index|[]
name|primaryTerms
parameter_list|)
block|{
name|this
operator|.
name|primaryTerms
operator|=
name|primaryTerms
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
DECL|method|initializePrimaryTerms
specifier|private
name|void
name|initializePrimaryTerms
parameter_list|()
block|{
assert|assert
name|primaryTerms
operator|==
literal|null
assert|;
if|if
condition|(
name|numberOfShards
argument_list|()
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"you must set the number of shards before setting/reading primary terms"
argument_list|)
throw|;
block|}
name|primaryTerms
operator|=
operator|new
name|long
index|[
name|numberOfShards
argument_list|()
index|]
expr_stmt|;
block|}
DECL|method|build
specifier|public
name|IndexMetaData
name|build
parameter_list|()
block|{
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|tmpAliases
init|=
name|aliases
decl_stmt|;
name|Settings
name|tmpSettings
init|=
name|settings
decl_stmt|;
comment|// update default mapping on the MappingMetaData
if|if
condition|(
name|mappings
operator|.
name|containsKey
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|)
condition|)
block|{
name|MappingMetaData
name|defaultMapping
init|=
name|mappings
operator|.
name|get
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|MappingMetaData
argument_list|>
name|cursor
range|:
name|mappings
operator|.
name|values
argument_list|()
control|)
block|{
name|cursor
operator|.
name|value
operator|.
name|updateDefaultMapping
argument_list|(
name|defaultMapping
argument_list|)
expr_stmt|;
block|}
block|}
name|Integer
name|maybeNumberOfShards
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|maybeNumberOfShards
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"must specify numberOfShards for index ["
operator|+
name|index
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|int
name|numberOfShards
init|=
name|maybeNumberOfShards
decl_stmt|;
if|if
condition|(
name|numberOfShards
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"must specify positive number of shards for index ["
operator|+
name|index
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Integer
name|maybeNumberOfReplicas
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|maybeNumberOfReplicas
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"must specify numberOfReplicas for index ["
operator|+
name|index
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|int
name|numberOfReplicas
init|=
name|maybeNumberOfReplicas
decl_stmt|;
if|if
condition|(
name|numberOfReplicas
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"must specify non-negative number of shards for index ["
operator|+
name|index
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|// fill missing slots in activeAllocationIds with empty set if needed and make all entries immutable
name|ImmutableOpenIntMap
operator|.
name|Builder
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|filledActiveAllocationIds
init|=
name|ImmutableOpenIntMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfShards
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|activeAllocationIds
operator|.
name|containsKey
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|filledActiveAllocationIds
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|activeAllocationIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filledActiveAllocationIds
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requireMap
init|=
name|INDEX_ROUTING_REQUIRE_GROUP_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
specifier|final
name|DiscoveryNodeFilters
name|requireFilters
decl_stmt|;
if|if
condition|(
name|requireMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|requireFilters
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|requireFilters
operator|=
name|DiscoveryNodeFilters
operator|.
name|buildFromKeyValue
argument_list|(
name|AND
argument_list|,
name|requireMap
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|includeMap
init|=
name|INDEX_ROUTING_INCLUDE_GROUP_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
specifier|final
name|DiscoveryNodeFilters
name|includeFilters
decl_stmt|;
if|if
condition|(
name|includeMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|includeFilters
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|includeFilters
operator|=
name|DiscoveryNodeFilters
operator|.
name|buildFromKeyValue
argument_list|(
name|OR
argument_list|,
name|includeMap
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|excludeMap
init|=
name|INDEX_ROUTING_EXCLUDE_GROUP_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
specifier|final
name|DiscoveryNodeFilters
name|excludeFilters
decl_stmt|;
if|if
condition|(
name|excludeMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|excludeFilters
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|excludeFilters
operator|=
name|DiscoveryNodeFilters
operator|.
name|buildFromKeyValue
argument_list|(
name|OR
argument_list|,
name|excludeMap
argument_list|)
expr_stmt|;
block|}
name|Version
name|indexCreatedVersion
init|=
name|Version
operator|.
name|indexCreated
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|Version
name|indexUpgradedVersion
init|=
name|settings
operator|.
name|getAsVersion
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_UPGRADED
argument_list|,
name|indexCreatedVersion
argument_list|)
decl_stmt|;
name|String
name|stringLuceneVersion
init|=
name|settings
operator|.
name|get
argument_list|(
name|SETTING_VERSION_MINIMUM_COMPATIBLE
argument_list|)
decl_stmt|;
specifier|final
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
name|minimumCompatibleLuceneVersion
decl_stmt|;
if|if
condition|(
name|stringLuceneVersion
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|minimumCompatibleLuceneVersion
operator|=
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
operator|.
name|parse
argument_list|(
name|stringLuceneVersion
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot parse lucene version ["
operator|+
name|stringLuceneVersion
operator|+
literal|"] in the ["
operator|+
name|SETTING_VERSION_MINIMUM_COMPATIBLE
operator|+
literal|"] setting"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|minimumCompatibleLuceneVersion
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|primaryTerms
operator|==
literal|null
condition|)
block|{
name|initializePrimaryTerms
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|primaryTerms
operator|.
name|length
operator|!=
name|numberOfShards
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"primaryTerms length is ["
operator|+
name|primaryTerms
operator|.
name|length
operator|+
literal|"] but should be equal to number of shards ["
operator|+
name|numberOfShards
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|uuid
init|=
name|settings
operator|.
name|get
argument_list|(
name|SETTING_INDEX_UUID
argument_list|,
name|INDEX_UUID_NA_VALUE
argument_list|)
decl_stmt|;
return|return
operator|new
name|IndexMetaData
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|,
name|uuid
argument_list|)
argument_list|,
name|version
argument_list|,
name|primaryTerms
argument_list|,
name|state
argument_list|,
name|numberOfShards
argument_list|,
name|numberOfReplicas
argument_list|,
name|tmpSettings
argument_list|,
name|mappings
operator|.
name|build
argument_list|()
argument_list|,
name|tmpAliases
operator|.
name|build
argument_list|()
argument_list|,
name|customs
operator|.
name|build
argument_list|()
argument_list|,
name|filledActiveAllocationIds
operator|.
name|build
argument_list|()
argument_list|,
name|requireFilters
argument_list|,
name|includeFilters
argument_list|,
name|excludeFilters
argument_list|,
name|indexCreatedVersion
argument_list|,
name|indexUpgradedVersion
argument_list|,
name|minimumCompatibleLuceneVersion
argument_list|)
return|;
block|}
DECL|method|toXContent
specifier|public
specifier|static
name|void
name|toXContent
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|KEY_VERSION
argument_list|,
name|indexMetaData
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|KEY_STATE
argument_list|,
name|indexMetaData
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|binary
init|=
name|params
operator|.
name|paramAsBoolean
argument_list|(
literal|"binary"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|KEY_SETTINGS
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|indexMetaData
operator|.
name|getSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|KEY_MAPPINGS
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|cursor
range|:
name|indexMetaData
operator|.
name|getMappings
argument_list|()
control|)
block|{
if|if
condition|(
name|binary
condition|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|cursor
operator|.
name|value
operator|.
name|source
argument_list|()
operator|.
name|compressed
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|data
init|=
name|cursor
operator|.
name|value
operator|.
name|source
argument_list|()
operator|.
name|uncompressed
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|data
argument_list|)
operator|.
name|createParser
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapping
init|=
name|parser
operator|.
name|mapOrdered
argument_list|()
decl_stmt|;
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|cursor
range|:
name|indexMetaData
operator|.
name|getCustoms
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|cursor
operator|.
name|key
argument_list|,
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|value
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|startObject
argument_list|(
name|KEY_ALIASES
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|AliasMetaData
argument_list|>
name|cursor
range|:
name|indexMetaData
operator|.
name|getAliases
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|AliasMetaData
operator|.
name|Builder
operator|.
name|toXContent
argument_list|(
name|cursor
operator|.
name|value
argument_list|,
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|KEY_PRIMARY_TERMS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexMetaData
operator|.
name|getNumberOfShards
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|indexMetaData
operator|.
name|primaryTerm
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|KEY_ACTIVE_ALLOCATIONS
argument_list|)
expr_stmt|;
for|for
control|(
name|IntObjectCursor
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|cursor
range|:
name|indexMetaData
operator|.
name|activeAllocationIds
control|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|allocationId
range|:
name|cursor
operator|.
name|value
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|allocationId
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|IndexMetaData
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// fresh parser? move to the first token
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
comment|// on a start object move to next token
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"expected field name but got a "
operator|+
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
throw|;
block|}
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"expected object but got a "
operator|+
name|token
argument_list|)
throw|;
block|}
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
name|KEY_SETTINGS
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|SettingsLoader
operator|.
name|Helper
operator|.
name|loadNestedFromMap
argument_list|(
name|parser
operator|.
name|mapOrdered
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|KEY_MAPPINGS
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|String
name|mappingType
init|=
name|currentFieldName
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mappingSource
init|=
name|MapBuilder
operator|.
expr|<
name|String
decl_stmt|,
name|Object
decl|>
name|newMapBuilder
argument_list|()
decl|.
name|put
argument_list|(
name|mappingType
argument_list|,
name|parser
operator|.
name|mapOrdered
argument_list|()
argument_list|)
decl|.
name|map
argument_list|()
decl_stmt|;
name|builder
operator|.
name|putMapping
argument_list|(
operator|new
name|MappingMetaData
argument_list|(
name|mappingType
argument_list|,
name|mappingSource
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected token: "
operator|+
name|token
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|KEY_ALIASES
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|builder
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|Builder
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|KEY_ACTIVE_ALLOCATIONS
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|String
name|shardId
init|=
name|currentFieldName
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allocationIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|allocationIds
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|putActiveAllocationIds
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|shardId
argument_list|)
argument_list|,
name|allocationIds
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected token: "
operator|+
name|token
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
literal|"warmers"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
comment|// TODO: do this in 6.0:
comment|// throw new IllegalArgumentException("Warmers are not supported anymore - are you upgrading from 1.x?");
comment|// ignore: warmers have been removed in 5.0 and are
comment|// simply ignored when upgrading from 2.x
assert|assert
name|Version
operator|.
name|CURRENT
operator|.
name|major
operator|<=
literal|5
assert|;
name|parser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// check if its a custom index metadata
name|Custom
name|proto
init|=
name|lookupPrototype
argument_list|(
name|currentFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
block|{
comment|//TODO warn
name|parser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Custom
name|custom
init|=
name|proto
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|builder
operator|.
name|putCustom
argument_list|(
name|custom
operator|.
name|type
argument_list|()
argument_list|,
name|custom
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
name|KEY_MAPPINGS
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_EMBEDDED_OBJECT
condition|)
block|{
name|builder
operator|.
name|putMapping
argument_list|(
operator|new
name|MappingMetaData
argument_list|(
operator|new
name|CompressedXContent
argument_list|(
name|parser
operator|.
name|binaryValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapping
init|=
name|parser
operator|.
name|mapOrdered
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapping
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|mappingType
init|=
name|mapping
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|builder
operator|.
name|putMapping
argument_list|(
operator|new
name|MappingMetaData
argument_list|(
name|mappingType
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|KEY_PRIMARY_TERMS
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|LongArrayList
name|list
init|=
operator|new
name|LongArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|parser
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"found a non-numeric value under ["
operator|+
name|KEY_PRIMARY_TERMS
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
name|builder
operator|.
name|primaryTerms
argument_list|(
name|list
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected field for an array "
operator|+
name|currentFieldName
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|KEY_STATE
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|state
argument_list|(
name|State
operator|.
name|fromString
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|KEY_VERSION
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|version
argument_list|(
name|parser
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected field ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected token "
operator|+
name|token
argument_list|)
throw|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|readFrom
specifier|public
specifier|static
name|IndexMetaData
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|PROTO
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns<code>true</code> iff the given settings indicate that the index      * associated with these settings allocates it's shards on a shared      * filesystem. Otherwise<code>false</code>. The default setting for this      * is the returned value from      * {@link #isIndexUsingShadowReplicas(org.elasticsearch.common.settings.Settings)}.      */
DECL|method|isOnSharedFilesystem
specifier|public
specifier|static
name|boolean
name|isOnSharedFilesystem
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
return|return
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|SETTING_SHARED_FILESYSTEM
argument_list|,
name|isIndexUsingShadowReplicas
argument_list|(
name|settings
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns<code>true</code> iff the given settings indicate that the index associated      * with these settings uses shadow replicas. Otherwise<code>false</code>. The default      * setting for this is<code>false</code>.      */
DECL|method|isIndexUsingShadowReplicas
specifier|public
specifier|static
name|boolean
name|isIndexUsingShadowReplicas
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
return|return
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|SETTING_SHADOW_REPLICAS
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Adds human readable version and creation date settings.      * This method is used to display the settings in a human readable format in REST API      */
DECL|method|addHumanReadableSettings
specifier|public
specifier|static
name|Settings
name|addHumanReadableSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|Version
name|version
init|=
name|settings
operator|.
name|getAsVersion
argument_list|(
name|SETTING_VERSION_CREATED
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|SETTING_VERSION_CREATED_STRING
argument_list|,
name|version
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Version
name|versionUpgraded
init|=
name|settings
operator|.
name|getAsVersion
argument_list|(
name|SETTING_VERSION_UPGRADED
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionUpgraded
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|SETTING_VERSION_UPGRADED_STRING
argument_list|,
name|versionUpgraded
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Long
name|creationDate
init|=
name|settings
operator|.
name|getAsLong
argument_list|(
name|SETTING_CREATION_DATE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|creationDate
operator|!=
literal|null
condition|)
block|{
name|DateTime
name|creationDateTime
init|=
operator|new
name|DateTime
argument_list|(
name|creationDate
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|SETTING_CREATION_DATE_STRING
argument_list|,
name|creationDateTime
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

