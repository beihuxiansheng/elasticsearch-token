begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|delete
operator|.
name|DeleteIndexClusterStateUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|AckedClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|RestoreInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ack
operator|.
name|ClusterStateUpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|RestoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotsService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_comment
comment|/**  * Deletes indices.  */
end_comment

begin_class
DECL|class|MetaDataDeleteIndexService
specifier|public
class|class
name|MetaDataDeleteIndexService
extends|extends
name|AbstractComponent
block|{
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|allocationService
specifier|private
specifier|final
name|AllocationService
name|allocationService
decl_stmt|;
annotation|@
name|Inject
DECL|method|MetaDataDeleteIndexService
specifier|public
name|MetaDataDeleteIndexService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|AllocationService
name|allocationService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|allocationService
operator|=
name|allocationService
expr_stmt|;
block|}
DECL|method|deleteIndices
specifier|public
name|void
name|deleteIndices
parameter_list|(
specifier|final
name|DeleteIndexClusterStateUpdateRequest
name|request
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|ClusterStateUpdateResponse
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|indices
argument_list|()
operator|==
literal|null
operator|||
name|request
operator|.
name|indices
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Index name is required"
argument_list|)
throw|;
block|}
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"delete-index "
operator|+
name|request
operator|.
name|indices
argument_list|()
argument_list|,
operator|new
name|AckedClusterStateUpdateTask
argument_list|<
name|ClusterStateUpdateResponse
argument_list|>
argument_list|(
name|Priority
operator|.
name|URGENT
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ClusterStateUpdateResponse
name|newResponse
parameter_list|(
name|boolean
name|acknowledged
parameter_list|)
block|{
return|return
operator|new
name|ClusterStateUpdateResponse
argument_list|(
name|acknowledged
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
specifier|final
name|ClusterState
name|currentState
parameter_list|)
block|{
return|return
name|deleteIndices
argument_list|(
name|currentState
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|request
operator|.
name|indices
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Delete some indices from the cluster state.      */
DECL|method|deleteIndices
specifier|public
name|ClusterState
name|deleteIndices
parameter_list|(
name|ClusterState
name|currentState
parameter_list|,
name|Set
argument_list|<
name|Index
argument_list|>
name|indices
parameter_list|)
block|{
specifier|final
name|MetaData
name|meta
init|=
name|currentState
operator|.
name|metaData
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|IndexMetaData
argument_list|>
name|metaDatas
init|=
name|indices
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|i
lambda|->
name|meta
operator|.
name|getIndexSafe
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check if index deletion conflicts with any running snapshots
name|SnapshotsService
operator|.
name|checkIndexDeletion
argument_list|(
name|currentState
argument_list|,
name|metaDatas
argument_list|)
expr_stmt|;
name|RoutingTable
operator|.
name|Builder
name|routingTableBuilder
init|=
name|RoutingTable
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|routingTable
argument_list|()
argument_list|)
decl_stmt|;
name|MetaData
operator|.
name|Builder
name|metaDataBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|meta
argument_list|)
decl_stmt|;
name|ClusterBlocks
operator|.
name|Builder
name|clusterBlocksBuilder
init|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|blocks
argument_list|(
name|currentState
operator|.
name|blocks
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|IndexGraveyard
operator|.
name|Builder
name|graveyardBuilder
init|=
name|IndexGraveyard
operator|.
name|builder
argument_list|(
name|metaDataBuilder
operator|.
name|indexGraveyard
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|previousGraveyardSize
init|=
name|graveyardBuilder
operator|.
name|tombstones
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Index
name|index
range|:
name|indices
control|)
block|{
name|String
name|indexName
init|=
name|index
operator|.
name|getName
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] deleting index"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|routingTableBuilder
operator|.
name|remove
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|clusterBlocksBuilder
operator|.
name|removeIndexBlocks
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|metaDataBuilder
operator|.
name|remove
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
block|}
comment|// add tombstones to the cluster state for each deleted index
specifier|final
name|IndexGraveyard
name|currentGraveyard
init|=
name|graveyardBuilder
operator|.
name|addTombstones
argument_list|(
name|indices
argument_list|)
operator|.
name|build
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|metaDataBuilder
operator|.
name|indexGraveyard
argument_list|(
name|currentGraveyard
argument_list|)
expr_stmt|;
comment|// the new graveyard set on the metadata
name|logger
operator|.
name|trace
argument_list|(
literal|"{} tombstones purged from the cluster state. Previous tombstone size: {}. Current tombstone size: {}."
argument_list|,
name|graveyardBuilder
operator|.
name|getNumPurged
argument_list|()
argument_list|,
name|previousGraveyardSize
argument_list|,
name|currentGraveyard
operator|.
name|getTombstones
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MetaData
name|newMetaData
init|=
name|metaDataBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterBlocks
name|blocks
init|=
name|clusterBlocksBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// update snapshot restore entries
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|ClusterState
operator|.
name|Custom
argument_list|>
name|customs
init|=
name|currentState
operator|.
name|getCustoms
argument_list|()
decl_stmt|;
specifier|final
name|RestoreInProgress
name|restoreInProgress
init|=
name|currentState
operator|.
name|custom
argument_list|(
name|RestoreInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|restoreInProgress
operator|!=
literal|null
condition|)
block|{
name|RestoreInProgress
name|updatedRestoreInProgress
init|=
name|RestoreService
operator|.
name|updateRestoreStateWithDeletedIndices
argument_list|(
name|restoreInProgress
argument_list|,
name|indices
argument_list|)
decl_stmt|;
if|if
condition|(
name|updatedRestoreInProgress
operator|!=
name|restoreInProgress
condition|)
block|{
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|ClusterState
operator|.
name|Custom
argument_list|>
name|builder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|customs
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|RestoreInProgress
operator|.
name|TYPE
argument_list|,
name|updatedRestoreInProgress
argument_list|)
expr_stmt|;
name|customs
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|allocationService
operator|.
name|reroute
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTableBuilder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|metaData
argument_list|(
name|newMetaData
argument_list|)
operator|.
name|blocks
argument_list|(
name|blocks
argument_list|)
operator|.
name|customs
argument_list|(
name|customs
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|"deleted indices ["
operator|+
name|indices
operator|+
literal|"]"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

