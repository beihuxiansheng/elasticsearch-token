begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Encapsulates the  {@link IndexMetaData} instances of a concrete index or indices an alias is pointing to.  */
end_comment

begin_interface
DECL|interface|AliasOrIndex
specifier|public
interface|interface
name|AliasOrIndex
block|{
comment|/**      * @return whether this an alias or concrete index      */
DECL|method|isAlias
name|boolean
name|isAlias
parameter_list|()
function_decl|;
comment|/**      * @return All {@link IndexMetaData} of all concrete indices this alias is referring to or if this is a concrete index its {@link IndexMetaData}      */
DECL|method|getIndices
name|List
argument_list|<
name|IndexMetaData
argument_list|>
name|getIndices
parameter_list|()
function_decl|;
comment|/**      * Represents an concrete index and encapsulates its {@link IndexMetaData}      */
DECL|class|Index
class|class
name|Index
implements|implements
name|AliasOrIndex
block|{
DECL|field|concreteIndex
specifier|private
specifier|final
name|IndexMetaData
name|concreteIndex
decl_stmt|;
DECL|method|Index
specifier|public
name|Index
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
name|this
operator|.
name|concreteIndex
operator|=
name|indexMetaData
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isAlias
specifier|public
name|boolean
name|isAlias
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getIndices
specifier|public
name|List
argument_list|<
name|IndexMetaData
argument_list|>
name|getIndices
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|concreteIndex
argument_list|)
return|;
block|}
comment|/**          * @return If this is an concrete index, its {@link IndexMetaData}          */
DECL|method|getIndex
specifier|public
name|IndexMetaData
name|getIndex
parameter_list|()
block|{
return|return
name|concreteIndex
return|;
block|}
block|}
comment|/**      * Represents an alias and groups all {@link IndexMetaData} instances sharing the same alias name together.      */
DECL|class|Alias
class|class
name|Alias
implements|implements
name|AliasOrIndex
block|{
DECL|field|aliasName
specifier|private
specifier|final
name|String
name|aliasName
decl_stmt|;
DECL|field|referenceIndexMetaDatas
specifier|private
specifier|final
name|List
argument_list|<
name|IndexMetaData
argument_list|>
name|referenceIndexMetaDatas
decl_stmt|;
DECL|method|Alias
specifier|public
name|Alias
parameter_list|(
name|AliasMetaData
name|aliasMetaData
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
name|this
operator|.
name|aliasName
operator|=
name|aliasMetaData
operator|.
name|getAlias
argument_list|()
expr_stmt|;
name|this
operator|.
name|referenceIndexMetaDatas
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|referenceIndexMetaDatas
operator|.
name|add
argument_list|(
name|indexMetaData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isAlias
specifier|public
name|boolean
name|isAlias
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getIndices
specifier|public
name|List
argument_list|<
name|IndexMetaData
argument_list|>
name|getIndices
parameter_list|()
block|{
return|return
name|referenceIndexMetaDatas
return|;
block|}
comment|/**          * Returns the unique alias metadata per concrete index.          *          * (note that although alias can point to the same concrete indices, each alias reference may have its own routing          * and filters)          */
DECL|method|getConcreteIndexAndAliasMetaDatas
specifier|public
name|Iterable
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
argument_list|>
name|getConcreteIndexAndAliasMetaDatas
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
argument_list|>
argument_list|()
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|index
operator|<
name|referenceIndexMetaDatas
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tuple
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|next
parameter_list|()
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|referenceIndexMetaDatas
operator|.
name|get
argument_list|(
name|index
operator|++
argument_list|)
decl_stmt|;
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|,
name|indexMetaData
operator|.
name|getAliases
argument_list|()
operator|.
name|get
argument_list|(
name|aliasName
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
DECL|method|getFirstAliasMetaData
specifier|public
name|AliasMetaData
name|getFirstAliasMetaData
parameter_list|()
block|{
return|return
name|referenceIndexMetaDatas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAliases
argument_list|()
operator|.
name|get
argument_list|(
name|aliasName
argument_list|)
return|;
block|}
DECL|method|addIndex
name|void
name|addIndex
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
name|this
operator|.
name|referenceIndexMetaDatas
operator|.
name|add
argument_list|(
name|indexMetaData
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_interface

end_unit

