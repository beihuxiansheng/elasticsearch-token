begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|IndicesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|DateMathParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|FormatDateTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_class
DECL|class|IndexNameExpressionResolver
specifier|public
class|class
name|IndexNameExpressionResolver
extends|extends
name|AbstractComponent
block|{
DECL|field|expressionResolvers
specifier|private
specifier|final
name|List
argument_list|<
name|ExpressionResolver
argument_list|>
name|expressionResolvers
decl_stmt|;
DECL|field|dateMathExpressionResolver
specifier|private
specifier|final
name|DateMathExpressionResolver
name|dateMathExpressionResolver
decl_stmt|;
DECL|method|IndexNameExpressionResolver
specifier|public
name|IndexNameExpressionResolver
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|expressionResolvers
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|dateMathExpressionResolver
operator|=
operator|new
name|DateMathExpressionResolver
argument_list|(
name|settings
argument_list|)
argument_list|,
operator|new
name|WildcardExpressionResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Same as {@link #concreteIndexNames(ClusterState, IndicesOptions, String...)}, but the index expressions and options      * are encapsulated in the specified request.      */
DECL|method|concreteIndexNames
specifier|public
name|String
index|[]
name|concreteIndexNames
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|IndicesRequest
name|request
parameter_list|)
block|{
name|Context
name|context
init|=
operator|new
name|Context
argument_list|(
name|state
argument_list|,
name|request
operator|.
name|indicesOptions
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|request
operator|.
name|indices
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Same as {@link #concreteIndices(ClusterState, IndicesOptions, String...)}, but the index expressions and options      * are encapsulated in the specified request.      */
DECL|method|concreteIndices
specifier|public
name|Index
index|[]
name|concreteIndices
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|IndicesRequest
name|request
parameter_list|)
block|{
name|Context
name|context
init|=
operator|new
name|Context
argument_list|(
name|state
argument_list|,
name|request
operator|.
name|indicesOptions
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|concreteIndices
argument_list|(
name|context
argument_list|,
name|request
operator|.
name|indices
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Translates the provided index expression into actual concrete indices, properly deduplicated.      *      * @param state             the cluster state containing all the data to resolve to expressions to concrete indices      * @param options           defines how the aliases or indices need to be resolved to concrete indices      * @param indexExpressions  expressions that can be resolved to alias or index names.      * @return the resolved concrete indices based on the cluster state, indices options and index expressions      * @throws IndexNotFoundException if one of the index expressions is pointing to a missing index or alias and the      * provided indices options in the context don't allow such a case, or if the final result of the indices resolution      * contains no indices and the indices options in the context don't allow such a case.      * @throws IllegalArgumentException if one of the aliases resolve to multiple indices and the provided      * indices options in the context don't allow such a case.      */
DECL|method|concreteIndexNames
specifier|public
name|String
index|[]
name|concreteIndexNames
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|IndicesOptions
name|options
parameter_list|,
name|String
modifier|...
name|indexExpressions
parameter_list|)
block|{
name|Context
name|context
init|=
operator|new
name|Context
argument_list|(
name|state
argument_list|,
name|options
argument_list|)
decl_stmt|;
return|return
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|indexExpressions
argument_list|)
return|;
block|}
comment|/**      * Translates the provided index expression into actual concrete indices, properly deduplicated.      *      * @param state             the cluster state containing all the data to resolve to expressions to concrete indices      * @param options           defines how the aliases or indices need to be resolved to concrete indices      * @param indexExpressions  expressions that can be resolved to alias or index names.      * @return the resolved concrete indices based on the cluster state, indices options and index expressions      * @throws IndexNotFoundException if one of the index expressions is pointing to a missing index or alias and the      * provided indices options in the context don't allow such a case, or if the final result of the indices resolution      * contains no indices and the indices options in the context don't allow such a case.      * @throws IllegalArgumentException if one of the aliases resolve to multiple indices and the provided      * indices options in the context don't allow such a case.      */
DECL|method|concreteIndices
specifier|public
name|Index
index|[]
name|concreteIndices
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|IndicesOptions
name|options
parameter_list|,
name|String
modifier|...
name|indexExpressions
parameter_list|)
block|{
name|Context
name|context
init|=
operator|new
name|Context
argument_list|(
name|state
argument_list|,
name|options
argument_list|)
decl_stmt|;
return|return
name|concreteIndices
argument_list|(
name|context
argument_list|,
name|indexExpressions
argument_list|)
return|;
block|}
comment|/**      * Translates the provided index expression into actual concrete indices, properly deduplicated.      *      * @param state             the cluster state containing all the data to resolve to expressions to concrete indices      * @param options           defines how the aliases or indices need to be resolved to concrete indices      * @param startTime         The start of the request where concrete indices is being invoked for      * @param indexExpressions  expressions that can be resolved to alias or index names.      * @return the resolved concrete indices based on the cluster state, indices options and index expressions      * provided indices options in the context don't allow such a case, or if the final result of the indices resolution      * contains no indices and the indices options in the context don't allow such a case.      * @throws IllegalArgumentException if one of the aliases resolve to multiple indices and the provided      * indices options in the context don't allow such a case.      */
DECL|method|concreteIndexNames
specifier|public
name|String
index|[]
name|concreteIndexNames
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|IndicesOptions
name|options
parameter_list|,
name|long
name|startTime
parameter_list|,
name|String
modifier|...
name|indexExpressions
parameter_list|)
block|{
name|Context
name|context
init|=
operator|new
name|Context
argument_list|(
name|state
argument_list|,
name|options
argument_list|,
name|startTime
argument_list|)
decl_stmt|;
return|return
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|indexExpressions
argument_list|)
return|;
block|}
DECL|method|concreteIndexNames
name|String
index|[]
name|concreteIndexNames
parameter_list|(
name|Context
name|context
parameter_list|,
name|String
modifier|...
name|indexExpressions
parameter_list|)
block|{
name|Index
index|[]
name|indexes
init|=
name|concreteIndices
argument_list|(
name|context
argument_list|,
name|indexExpressions
argument_list|)
decl_stmt|;
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[
name|indexes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|names
index|[
name|i
index|]
operator|=
name|indexes
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
DECL|method|concreteIndices
name|Index
index|[]
name|concreteIndices
parameter_list|(
name|Context
name|context
parameter_list|,
name|String
modifier|...
name|indexExpressions
parameter_list|)
block|{
if|if
condition|(
name|indexExpressions
operator|==
literal|null
operator|||
name|indexExpressions
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|indexExpressions
operator|=
operator|new
name|String
index|[]
block|{
name|MetaData
operator|.
name|ALL
block|}
expr_stmt|;
block|}
name|MetaData
name|metaData
init|=
name|context
operator|.
name|getState
argument_list|()
operator|.
name|metaData
argument_list|()
decl_stmt|;
name|IndicesOptions
name|options
init|=
name|context
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|boolean
name|failClosed
init|=
name|options
operator|.
name|forbidClosedIndices
argument_list|()
operator|&&
name|options
operator|.
name|ignoreUnavailable
argument_list|()
operator|==
literal|false
decl_stmt|;
name|boolean
name|failNoIndices
init|=
name|options
operator|.
name|ignoreUnavailable
argument_list|()
operator|==
literal|false
decl_stmt|;
comment|// If only one index is specified then whether we fail a request if an index is missing depends on the allow_no_indices
comment|// option. At some point we should change this, because there shouldn't be a reason why whether a single index
comment|// or multiple indices are specified yield different behaviour.
if|if
condition|(
name|indexExpressions
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|failNoIndices
operator|=
name|options
operator|.
name|allowNoIndices
argument_list|()
operator|==
literal|false
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|expressions
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|indexExpressions
argument_list|)
decl_stmt|;
for|for
control|(
name|ExpressionResolver
name|expressionResolver
range|:
name|expressionResolvers
control|)
block|{
name|expressions
operator|=
name|expressionResolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|expressions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expressions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|options
operator|.
name|allowNoIndices
argument_list|()
condition|)
block|{
name|IndexNotFoundException
name|infe
init|=
operator|new
name|IndexNotFoundException
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
name|infe
operator|.
name|setResources
argument_list|(
literal|"index_expression"
argument_list|,
name|indexExpressions
argument_list|)
expr_stmt|;
throw|throw
name|infe
throw|;
block|}
else|else
block|{
return|return
name|Index
operator|.
name|EMPTY_ARRAY
return|;
block|}
block|}
specifier|final
name|Set
argument_list|<
name|Index
argument_list|>
name|concreteIndices
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|expressions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|expression
range|:
name|expressions
control|)
block|{
name|AliasOrIndex
name|aliasOrIndex
init|=
name|metaData
operator|.
name|getAliasAndIndexLookup
argument_list|()
operator|.
name|get
argument_list|(
name|expression
argument_list|)
decl_stmt|;
if|if
condition|(
name|aliasOrIndex
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|failNoIndices
condition|)
block|{
name|IndexNotFoundException
name|infe
init|=
operator|new
name|IndexNotFoundException
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|infe
operator|.
name|setResources
argument_list|(
literal|"index_expression"
argument_list|,
name|expression
argument_list|)
expr_stmt|;
throw|throw
name|infe
throw|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
name|Collection
argument_list|<
name|IndexMetaData
argument_list|>
name|resolvedIndices
init|=
name|aliasOrIndex
operator|.
name|getIndices
argument_list|()
decl_stmt|;
if|if
condition|(
name|resolvedIndices
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
operator|!
name|options
operator|.
name|allowAliasesToMultipleIndices
argument_list|()
condition|)
block|{
name|String
index|[]
name|indexNames
init|=
operator|new
name|String
index|[
name|resolvedIndices
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|resolvedIndices
control|)
block|{
name|indexNames
index|[
name|i
operator|++
index|]
operator|=
name|indexMetaData
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Alias ["
operator|+
name|expression
operator|+
literal|"] has more than one indices associated with it ["
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|indexNames
argument_list|)
operator|+
literal|"], can't execute a single index op"
argument_list|)
throw|;
block|}
for|for
control|(
name|IndexMetaData
name|index
range|:
name|resolvedIndices
control|)
block|{
if|if
condition|(
name|index
operator|.
name|getState
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
condition|)
block|{
if|if
condition|(
name|failClosed
condition|)
block|{
throw|throw
operator|new
name|IndexClosedException
argument_list|(
name|index
operator|.
name|getIndex
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
name|options
operator|.
name|forbidClosedIndices
argument_list|()
operator|==
literal|false
condition|)
block|{
name|concreteIndices
operator|.
name|add
argument_list|(
name|index
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|index
operator|.
name|getState
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
condition|)
block|{
name|concreteIndices
operator|.
name|add
argument_list|(
name|index
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"index state ["
operator|+
name|index
operator|.
name|getState
argument_list|()
operator|+
literal|"] not supported"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|options
operator|.
name|allowNoIndices
argument_list|()
operator|==
literal|false
operator|&&
name|concreteIndices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|IndexNotFoundException
name|infe
init|=
operator|new
name|IndexNotFoundException
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
name|infe
operator|.
name|setResources
argument_list|(
literal|"index_expression"
argument_list|,
name|indexExpressions
argument_list|)
expr_stmt|;
throw|throw
name|infe
throw|;
block|}
return|return
name|concreteIndices
operator|.
name|toArray
argument_list|(
operator|new
name|Index
index|[
name|concreteIndices
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Utility method that allows to resolve an index expression to its corresponding single concrete index.      * Callers should make sure they provide proper {@link org.elasticsearch.action.support.IndicesOptions}      * that require a single index as a result. The indices resolution must in fact return a single index when      * using this method, an {@link IllegalArgumentException} gets thrown otherwise.      *      * @param state             the cluster state containing all the data to resolve to expression to a concrete index      * @param request           The request that defines how the an alias or an index need to be resolved to a concrete index      *                          and the expression that can be resolved to an alias or an index name.      * @throws IllegalArgumentException if the index resolution lead to more than one index      * @return the concrete index obtained as a result of the index resolution      */
DECL|method|concreteSingleIndex
specifier|public
name|Index
name|concreteSingleIndex
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|IndicesRequest
name|request
parameter_list|)
block|{
name|String
name|indexExpression
init|=
name|request
operator|.
name|indices
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|indices
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|?
name|request
operator|.
name|indices
argument_list|()
index|[
literal|0
index|]
else|:
literal|null
decl_stmt|;
name|Index
index|[]
name|indices
init|=
name|concreteIndices
argument_list|(
name|state
argument_list|,
name|request
operator|.
name|indicesOptions
argument_list|()
argument_list|,
name|indexExpression
argument_list|)
decl_stmt|;
if|if
condition|(
name|indices
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unable to return a single index as the index and options provided got resolved to multiple indices"
argument_list|)
throw|;
block|}
return|return
name|indices
index|[
literal|0
index|]
return|;
block|}
comment|/**      * @return whether the specified alias or index exists. If the alias or index contains datemath then that is resolved too.      */
DECL|method|hasIndexOrAlias
specifier|public
name|boolean
name|hasIndexOrAlias
parameter_list|(
name|String
name|aliasOrIndex
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
name|Context
name|context
init|=
operator|new
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|resolvedAliasOrIndex
init|=
name|dateMathExpressionResolver
operator|.
name|resolveExpression
argument_list|(
name|aliasOrIndex
argument_list|,
name|context
argument_list|)
decl_stmt|;
return|return
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|getAliasAndIndexLookup
argument_list|()
operator|.
name|containsKey
argument_list|(
name|resolvedAliasOrIndex
argument_list|)
return|;
block|}
comment|/**      * @return If the specified string is data math expression then this method returns the resolved expression.      */
DECL|method|resolveDateMathExpression
specifier|public
name|String
name|resolveDateMathExpression
parameter_list|(
name|String
name|dateExpression
parameter_list|)
block|{
comment|// The data math expression resolver doesn't rely on cluster state or indices options, because
comment|// it just resolves the date math to an actual date.
return|return
name|dateMathExpressionResolver
operator|.
name|resolveExpression
argument_list|(
name|dateExpression
argument_list|,
operator|new
name|Context
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Iterates through the list of indices and selects the effective list of filtering aliases for the      * given index.      *<p>Only aliases with filters are returned. If the indices list contains a non-filtering reference to      * the index itself - null is returned. Returns<tt>null</tt> if no filtering is required.      */
DECL|method|filteringAliases
specifier|public
name|String
index|[]
name|filteringAliases
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|String
name|index
parameter_list|,
name|String
modifier|...
name|expressions
parameter_list|)
block|{
comment|// expand the aliases wildcard
name|List
argument_list|<
name|String
argument_list|>
name|resolvedExpressions
init|=
name|expressions
operator|!=
literal|null
condition|?
name|Arrays
operator|.
name|asList
argument_list|(
name|expressions
argument_list|)
else|:
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
operator|new
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|ExpressionResolver
name|expressionResolver
range|:
name|expressionResolvers
control|)
block|{
name|resolvedExpressions
operator|=
name|expressionResolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|resolvedExpressions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAllIndices
argument_list|(
name|resolvedExpressions
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// optimize for the most common single index/alias scenario
if|if
condition|(
name|resolvedExpressions
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|alias
init|=
name|resolvedExpressions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|IndexMetaData
name|indexMetaData
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|getIndices
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|==
literal|null
condition|)
block|{
comment|// Shouldn't happen
throw|throw
operator|new
name|IndexNotFoundException
argument_list|(
name|index
argument_list|)
throw|;
block|}
name|AliasMetaData
name|aliasMetaData
init|=
name|indexMetaData
operator|.
name|getAliases
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
name|boolean
name|filteringRequired
init|=
name|aliasMetaData
operator|!=
literal|null
operator|&&
name|aliasMetaData
operator|.
name|filteringRequired
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|filteringRequired
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|String
index|[]
block|{
name|alias
block|}
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|filteringAliases
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|resolvedExpressions
control|)
block|{
if|if
condition|(
name|alias
operator|.
name|equals
argument_list|(
name|index
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|IndexMetaData
name|indexMetaData
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|getIndices
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|==
literal|null
condition|)
block|{
comment|// Shouldn't happen
throw|throw
operator|new
name|IndexNotFoundException
argument_list|(
name|index
argument_list|)
throw|;
block|}
name|AliasMetaData
name|aliasMetaData
init|=
name|indexMetaData
operator|.
name|getAliases
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
comment|// Check that this is an alias for the current index
comment|// Otherwise - skip it
if|if
condition|(
name|aliasMetaData
operator|!=
literal|null
condition|)
block|{
name|boolean
name|filteringRequired
init|=
name|aliasMetaData
operator|.
name|filteringRequired
argument_list|()
decl_stmt|;
if|if
condition|(
name|filteringRequired
condition|)
block|{
comment|// If filtering required - add it to the list of filters
if|if
condition|(
name|filteringAliases
operator|==
literal|null
condition|)
block|{
name|filteringAliases
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|filteringAliases
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If not, we have a non filtering alias for this index - no filtering needed
return|return
literal|null
return|;
block|}
block|}
block|}
if|if
condition|(
name|filteringAliases
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|filteringAliases
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|filteringAliases
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Resolves the search routing if in the expression aliases are used. If expressions point to concrete indices      * or aliases with no routing defined the specified routing is used.      *      * @return routing values grouped by concrete index      */
DECL|method|resolveSearchRouting
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|resolveSearchRouting
parameter_list|(
name|ClusterState
name|state
parameter_list|,
annotation|@
name|Nullable
name|String
name|routing
parameter_list|,
name|String
modifier|...
name|expressions
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|resolvedExpressions
init|=
name|expressions
operator|!=
literal|null
condition|?
name|Arrays
operator|.
name|asList
argument_list|(
name|expressions
argument_list|)
else|:
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
operator|new
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ExpressionResolver
name|expressionResolver
range|:
name|expressionResolvers
control|)
block|{
name|resolvedExpressions
operator|=
name|expressionResolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|resolvedExpressions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAllIndices
argument_list|(
name|resolvedExpressions
argument_list|)
condition|)
block|{
return|return
name|resolveSearchRoutingAllIndices
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
argument_list|,
name|routing
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|routings
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|paramRouting
init|=
literal|null
decl_stmt|;
comment|// List of indices that don't require any routing
name|Set
argument_list|<
name|String
argument_list|>
name|norouting
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|routing
operator|!=
literal|null
condition|)
block|{
name|paramRouting
operator|=
name|Strings
operator|.
name|splitStringByCommaToSet
argument_list|(
name|routing
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|expression
range|:
name|resolvedExpressions
control|)
block|{
name|AliasOrIndex
name|aliasOrIndex
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|getAliasAndIndexLookup
argument_list|()
operator|.
name|get
argument_list|(
name|expression
argument_list|)
decl_stmt|;
if|if
condition|(
name|aliasOrIndex
operator|!=
literal|null
operator|&&
name|aliasOrIndex
operator|.
name|isAlias
argument_list|()
condition|)
block|{
name|AliasOrIndex
operator|.
name|Alias
name|alias
init|=
operator|(
name|AliasOrIndex
operator|.
name|Alias
operator|)
name|aliasOrIndex
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|item
range|:
name|alias
operator|.
name|getConcreteIndexAndAliasMetaDatas
argument_list|()
control|)
block|{
name|String
name|concreteIndex
init|=
name|item
operator|.
name|v1
argument_list|()
decl_stmt|;
name|AliasMetaData
name|aliasMetaData
init|=
name|item
operator|.
name|v2
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|norouting
operator|.
name|contains
argument_list|(
name|concreteIndex
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|aliasMetaData
operator|.
name|searchRoutingValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Routing alias
if|if
condition|(
name|routings
operator|==
literal|null
condition|)
block|{
name|routings
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
name|routings
operator|.
name|get
argument_list|(
name|concreteIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|r
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|routings
operator|.
name|put
argument_list|(
name|concreteIndex
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|addAll
argument_list|(
name|aliasMetaData
operator|.
name|searchRoutingValues
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|paramRouting
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|retainAll
argument_list|(
name|paramRouting
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|routings
operator|.
name|remove
argument_list|(
name|concreteIndex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Non-routing alias
if|if
condition|(
operator|!
name|norouting
operator|.
name|contains
argument_list|(
name|concreteIndex
argument_list|)
condition|)
block|{
name|norouting
operator|.
name|add
argument_list|(
name|concreteIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|paramRouting
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|paramRouting
argument_list|)
decl_stmt|;
if|if
condition|(
name|routings
operator|==
literal|null
condition|)
block|{
name|routings
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|routings
operator|.
name|put
argument_list|(
name|concreteIndex
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|routings
operator|!=
literal|null
condition|)
block|{
name|routings
operator|.
name|remove
argument_list|(
name|concreteIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
else|else
block|{
comment|// Index
if|if
condition|(
operator|!
name|norouting
operator|.
name|contains
argument_list|(
name|expression
argument_list|)
condition|)
block|{
name|norouting
operator|.
name|add
argument_list|(
name|expression
argument_list|)
expr_stmt|;
if|if
condition|(
name|paramRouting
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|paramRouting
argument_list|)
decl_stmt|;
if|if
condition|(
name|routings
operator|==
literal|null
condition|)
block|{
name|routings
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|routings
operator|.
name|put
argument_list|(
name|expression
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|routings
operator|!=
literal|null
condition|)
block|{
name|routings
operator|.
name|remove
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|routings
operator|==
literal|null
operator|||
name|routings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|routings
return|;
block|}
comment|/**      * Sets the same routing for all indices      */
DECL|method|resolveSearchRoutingAllIndices
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|resolveSearchRoutingAllIndices
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|String
name|routing
parameter_list|)
block|{
if|if
condition|(
name|routing
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|r
init|=
name|Strings
operator|.
name|splitStringByCommaToSet
argument_list|(
name|routing
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|routings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|concreteIndices
init|=
name|metaData
operator|.
name|getConcreteAllIndices
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|concreteIndices
control|)
block|{
name|routings
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|routings
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Identifies whether the array containing index names given as argument refers to all indices      * The empty or null array identifies all indices      *      * @param aliasesOrIndices the array containing index names      * @return true if the provided array maps to all indices, false otherwise      */
DECL|method|isAllIndices
specifier|public
specifier|static
name|boolean
name|isAllIndices
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|aliasesOrIndices
parameter_list|)
block|{
return|return
name|aliasesOrIndices
operator|==
literal|null
operator|||
name|aliasesOrIndices
operator|.
name|isEmpty
argument_list|()
operator|||
name|isExplicitAllPattern
argument_list|(
name|aliasesOrIndices
argument_list|)
return|;
block|}
comment|/**      * Identifies whether the array containing index names given as argument explicitly refers to all indices      * The empty or null array doesn't explicitly map to all indices      *      * @param aliasesOrIndices the array containing index names      * @return true if the provided array explicitly maps to all indices, false otherwise      */
DECL|method|isExplicitAllPattern
specifier|static
name|boolean
name|isExplicitAllPattern
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|aliasesOrIndices
parameter_list|)
block|{
return|return
name|aliasesOrIndices
operator|!=
literal|null
operator|&&
name|aliasesOrIndices
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|MetaData
operator|.
name|ALL
operator|.
name|equals
argument_list|(
name|aliasesOrIndices
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Identifies whether the first argument (an array containing index names) is a pattern that matches all indices      *      * @param indicesOrAliases the array containing index names      * @param concreteIndices  array containing the concrete indices that the first argument refers to      * @return true if the first argument is a pattern that maps to all available indices, false otherwise      */
DECL|method|isPatternMatchingAllIndices
name|boolean
name|isPatternMatchingAllIndices
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|String
index|[]
name|indicesOrAliases
parameter_list|,
name|String
index|[]
name|concreteIndices
parameter_list|)
block|{
comment|// if we end up matching on all indices, check, if its a wildcard parameter, or a "-something" structure
if|if
condition|(
name|concreteIndices
operator|.
name|length
operator|==
name|metaData
operator|.
name|getConcreteAllIndices
argument_list|()
operator|.
name|length
operator|&&
name|indicesOrAliases
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|//we might have something like /-test1,+test1 that would identify all indices
comment|//or something like /-test1 with test1 index missing and IndicesOptions.lenient()
if|if
condition|(
name|indicesOrAliases
index|[
literal|0
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|//otherwise we check if there's any simple regex
for|for
control|(
name|String
name|indexOrAlias
range|:
name|indicesOrAliases
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|isSimpleMatchPattern
argument_list|(
name|indexOrAlias
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|class|Context
specifier|static
specifier|final
class|class
name|Context
block|{
DECL|field|state
specifier|private
specifier|final
name|ClusterState
name|state
decl_stmt|;
DECL|field|options
specifier|private
specifier|final
name|IndicesOptions
name|options
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|preserveAliases
specifier|private
specifier|final
name|boolean
name|preserveAliases
decl_stmt|;
DECL|method|Context
name|Context
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|IndicesOptions
name|options
parameter_list|)
block|{
name|this
argument_list|(
name|state
argument_list|,
name|options
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|Context
name|Context
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|IndicesOptions
name|options
parameter_list|,
name|boolean
name|preserveAliases
parameter_list|)
block|{
name|this
argument_list|(
name|state
argument_list|,
name|options
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|preserveAliases
argument_list|)
expr_stmt|;
block|}
DECL|method|Context
specifier|public
name|Context
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|IndicesOptions
name|options
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|this
argument_list|(
name|state
argument_list|,
name|options
argument_list|,
name|startTime
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|Context
specifier|public
name|Context
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|IndicesOptions
name|options
parameter_list|,
name|long
name|startTime
parameter_list|,
name|boolean
name|preserveAliases
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|preserveAliases
operator|=
name|preserveAliases
expr_stmt|;
block|}
DECL|method|getState
specifier|public
name|ClusterState
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
DECL|method|getOptions
specifier|public
name|IndicesOptions
name|getOptions
parameter_list|()
block|{
return|return
name|options
return|;
block|}
DECL|method|getStartTime
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
comment|/**          * This is used to prevent resolving aliases to concrete indices but this also means          * that we might return aliases that point to a closed index. This is currently only used          * by {@link #filteringAliases(ClusterState, String, String...)} since it's the only one that needs aliases          */
DECL|method|isPreserveAliases
name|boolean
name|isPreserveAliases
parameter_list|()
block|{
return|return
name|preserveAliases
return|;
block|}
block|}
DECL|interface|ExpressionResolver
specifier|private
interface|interface
name|ExpressionResolver
block|{
comment|/**          * Resolves the list of expressions into other expressions if possible (possible concrete indices and aliases, but          * that isn't required). The provided implementations can also be left untouched.          *          * @return a new list with expressions based on the provided expressions          */
DECL|method|resolve
name|List
argument_list|<
name|String
argument_list|>
name|resolve
parameter_list|(
name|Context
name|context
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|expressions
parameter_list|)
function_decl|;
block|}
comment|/**      * Resolves alias/index name expressions with wildcards into the corresponding concrete indices/aliases      */
DECL|class|WildcardExpressionResolver
specifier|static
specifier|final
class|class
name|WildcardExpressionResolver
implements|implements
name|ExpressionResolver
block|{
annotation|@
name|Override
DECL|method|resolve
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|resolve
parameter_list|(
name|Context
name|context
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|expressions
parameter_list|)
block|{
name|IndicesOptions
name|options
init|=
name|context
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|context
operator|.
name|getState
argument_list|()
operator|.
name|metaData
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|expandWildcardsClosed
argument_list|()
operator|==
literal|false
operator|&&
name|options
operator|.
name|expandWildcardsOpen
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
name|expressions
return|;
block|}
if|if
condition|(
name|isEmptyOrTrivialWildcard
argument_list|(
name|expressions
argument_list|)
condition|)
block|{
return|return
name|resolveEmptyOrTrivialWildcard
argument_list|(
name|options
argument_list|,
name|metaData
argument_list|,
literal|true
argument_list|)
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
name|innerResolve
argument_list|(
name|context
argument_list|,
name|expressions
argument_list|,
name|options
argument_list|,
name|metaData
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
name|expressions
return|;
block|}
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|options
operator|.
name|allowNoIndices
argument_list|()
condition|)
block|{
name|IndexNotFoundException
name|infe
init|=
operator|new
name|IndexNotFoundException
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
name|infe
operator|.
name|setResources
argument_list|(
literal|"index_or_alias"
argument_list|,
name|expressions
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|infe
throw|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|result
argument_list|)
return|;
block|}
DECL|method|innerResolve
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|innerResolve
parameter_list|(
name|Context
name|context
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|expressions
parameter_list|,
name|IndicesOptions
name|options
parameter_list|,
name|MetaData
name|metaData
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expressions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|expression
init|=
name|expressions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|aliasOrIndexExists
argument_list|(
name|metaData
argument_list|,
name|expression
argument_list|)
condition|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|Strings
operator|.
name|isEmpty
argument_list|(
name|expression
argument_list|)
condition|)
block|{
throw|throw
name|infe
argument_list|(
name|expression
argument_list|)
throw|;
block|}
name|boolean
name|add
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|expression
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'+'
condition|)
block|{
comment|// if its the first, add empty result set
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|result
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|expression
operator|=
name|expression
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expression
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
condition|)
block|{
comment|// if its the first, fill it with all the indices...
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|concreteIndices
init|=
name|resolveEmptyOrTrivialWildcard
argument_list|(
name|options
argument_list|,
name|metaData
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|concreteIndices
argument_list|)
expr_stmt|;
block|}
name|add
operator|=
literal|false
expr_stmt|;
name|expression
operator|=
name|expression
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
comment|// add all the previous ones...
name|result
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|expressions
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Regex
operator|.
name|isSimpleMatchPattern
argument_list|(
name|expression
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|unavailableIgnoredOrExists
argument_list|(
name|options
argument_list|,
name|metaData
argument_list|,
name|expression
argument_list|)
condition|)
block|{
throw|throw
name|infe
argument_list|(
name|expression
argument_list|)
throw|;
block|}
if|if
condition|(
name|add
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|remove
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
specifier|final
name|IndexMetaData
operator|.
name|State
name|excludeState
init|=
name|excludeState
argument_list|(
name|options
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AliasOrIndex
argument_list|>
name|matches
init|=
name|matches
argument_list|(
name|metaData
argument_list|,
name|expression
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expand
init|=
name|expand
argument_list|(
name|context
argument_list|,
name|excludeState
argument_list|,
name|matches
argument_list|)
decl_stmt|;
if|if
condition|(
name|add
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|expand
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|removeAll
argument_list|(
name|expand
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|noIndicesAllowedOrMatches
argument_list|(
name|options
argument_list|,
name|matches
argument_list|)
condition|)
block|{
throw|throw
name|infe
argument_list|(
name|expression
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|noIndicesAllowedOrMatches
specifier|private
name|boolean
name|noIndicesAllowedOrMatches
parameter_list|(
name|IndicesOptions
name|options
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AliasOrIndex
argument_list|>
name|matches
parameter_list|)
block|{
return|return
name|options
operator|.
name|allowNoIndices
argument_list|()
operator|||
operator|!
name|matches
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|unavailableIgnoredOrExists
specifier|private
name|boolean
name|unavailableIgnoredOrExists
parameter_list|(
name|IndicesOptions
name|options
parameter_list|,
name|MetaData
name|metaData
parameter_list|,
name|String
name|expression
parameter_list|)
block|{
return|return
name|options
operator|.
name|ignoreUnavailable
argument_list|()
operator|||
name|aliasOrIndexExists
argument_list|(
name|metaData
argument_list|,
name|expression
argument_list|)
return|;
block|}
DECL|method|aliasOrIndexExists
specifier|private
name|boolean
name|aliasOrIndexExists
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|String
name|expression
parameter_list|)
block|{
return|return
name|metaData
operator|.
name|getAliasAndIndexLookup
argument_list|()
operator|.
name|containsKey
argument_list|(
name|expression
argument_list|)
return|;
block|}
DECL|method|infe
specifier|private
specifier|static
name|IndexNotFoundException
name|infe
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|IndexNotFoundException
name|infe
init|=
operator|new
name|IndexNotFoundException
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|infe
operator|.
name|setResources
argument_list|(
literal|"index_or_alias"
argument_list|,
name|expression
argument_list|)
expr_stmt|;
return|return
name|infe
return|;
block|}
DECL|method|excludeState
specifier|private
specifier|static
name|IndexMetaData
operator|.
name|State
name|excludeState
parameter_list|(
name|IndicesOptions
name|options
parameter_list|)
block|{
specifier|final
name|IndexMetaData
operator|.
name|State
name|excludeState
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|expandWildcardsOpen
argument_list|()
operator|&&
name|options
operator|.
name|expandWildcardsClosed
argument_list|()
condition|)
block|{
name|excludeState
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|options
operator|.
name|expandWildcardsOpen
argument_list|()
operator|&&
name|options
operator|.
name|expandWildcardsClosed
argument_list|()
operator|==
literal|false
condition|)
block|{
name|excludeState
operator|=
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|options
operator|.
name|expandWildcardsClosed
argument_list|()
operator|&&
name|options
operator|.
name|expandWildcardsOpen
argument_list|()
operator|==
literal|false
condition|)
block|{
name|excludeState
operator|=
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
expr_stmt|;
block|}
else|else
block|{
assert|assert
literal|false
operator|:
literal|"this shouldn't get called if wildcards expand to none"
assert|;
name|excludeState
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|excludeState
return|;
block|}
DECL|method|matches
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|AliasOrIndex
argument_list|>
name|matches
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|String
name|expression
parameter_list|)
block|{
if|if
condition|(
name|Regex
operator|.
name|isMatchAllPattern
argument_list|(
name|expression
argument_list|)
condition|)
block|{
comment|// Can only happen if the expressions was initially: '-*'
return|return
name|metaData
operator|.
name|getAliasAndIndexLookup
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|expression
operator|.
name|indexOf
argument_list|(
literal|"*"
argument_list|)
operator|==
name|expression
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return
name|suffixWildcard
argument_list|(
name|metaData
argument_list|,
name|expression
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|otherWildcard
argument_list|(
name|metaData
argument_list|,
name|expression
argument_list|)
return|;
block|}
block|}
DECL|method|suffixWildcard
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|AliasOrIndex
argument_list|>
name|suffixWildcard
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|String
name|expression
parameter_list|)
block|{
assert|assert
name|expression
operator|.
name|length
argument_list|()
operator|>=
literal|2
operator|:
literal|"expression ["
operator|+
name|expression
operator|+
literal|"] should have at least a length of 2"
assert|;
name|String
name|fromPrefix
init|=
name|expression
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|expression
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|char
index|[]
name|toPrefixCharArr
init|=
name|fromPrefix
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|toPrefixCharArr
index|[
name|toPrefixCharArr
operator|.
name|length
operator|-
literal|1
index|]
operator|++
expr_stmt|;
name|String
name|toPrefix
init|=
operator|new
name|String
argument_list|(
name|toPrefixCharArr
argument_list|)
decl_stmt|;
return|return
name|metaData
operator|.
name|getAliasAndIndexLookup
argument_list|()
operator|.
name|subMap
argument_list|(
name|fromPrefix
argument_list|,
name|toPrefix
argument_list|)
return|;
block|}
DECL|method|otherWildcard
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|AliasOrIndex
argument_list|>
name|otherWildcard
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|String
name|expression
parameter_list|)
block|{
specifier|final
name|String
name|pattern
init|=
name|expression
decl_stmt|;
return|return
name|metaData
operator|.
name|getAliasAndIndexLookup
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getKey
argument_list|,
name|Map
operator|.
name|Entry
operator|::
name|getValue
argument_list|)
argument_list|)
return|;
block|}
DECL|method|expand
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|expand
parameter_list|(
name|Context
name|context
parameter_list|,
name|IndexMetaData
operator|.
name|State
name|excludeState
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AliasOrIndex
argument_list|>
name|matches
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|expand
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AliasOrIndex
argument_list|>
name|entry
range|:
name|matches
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|AliasOrIndex
name|aliasOrIndex
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isPreserveAliases
argument_list|()
operator|&&
name|aliasOrIndex
operator|.
name|isAlias
argument_list|()
condition|)
block|{
name|expand
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|IndexMetaData
name|meta
range|:
name|aliasOrIndex
operator|.
name|getIndices
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeState
operator|==
literal|null
operator|||
name|meta
operator|.
name|getState
argument_list|()
operator|!=
name|excludeState
condition|)
block|{
name|expand
operator|.
name|add
argument_list|(
name|meta
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|expand
return|;
block|}
DECL|method|isEmptyOrTrivialWildcard
specifier|private
name|boolean
name|isEmptyOrTrivialWildcard
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|expressions
parameter_list|)
block|{
return|return
name|expressions
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|expressions
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|(
name|MetaData
operator|.
name|ALL
operator|.
name|equals
argument_list|(
name|expressions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
name|Regex
operator|.
name|isMatchAllPattern
argument_list|(
name|expressions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
operator|)
return|;
block|}
DECL|method|resolveEmptyOrTrivialWildcard
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|resolveEmptyOrTrivialWildcard
parameter_list|(
name|IndicesOptions
name|options
parameter_list|,
name|MetaData
name|metaData
parameter_list|,
name|boolean
name|assertEmpty
parameter_list|)
block|{
if|if
condition|(
name|options
operator|.
name|expandWildcardsOpen
argument_list|()
operator|&&
name|options
operator|.
name|expandWildcardsClosed
argument_list|()
condition|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|metaData
operator|.
name|getConcreteAllIndices
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|options
operator|.
name|expandWildcardsOpen
argument_list|()
condition|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|metaData
operator|.
name|getConcreteAllOpenIndices
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|options
operator|.
name|expandWildcardsClosed
argument_list|()
condition|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|metaData
operator|.
name|getConcreteAllClosedIndices
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
assert|assert
name|assertEmpty
operator|:
literal|"Shouldn't end up here"
assert|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
block|}
DECL|class|DateMathExpressionResolver
specifier|static
specifier|final
class|class
name|DateMathExpressionResolver
implements|implements
name|ExpressionResolver
block|{
DECL|field|EXPRESSION_LEFT_BOUND
specifier|private
specifier|static
specifier|final
name|String
name|EXPRESSION_LEFT_BOUND
init|=
literal|"<"
decl_stmt|;
DECL|field|EXPRESSION_RIGHT_BOUND
specifier|private
specifier|static
specifier|final
name|String
name|EXPRESSION_RIGHT_BOUND
init|=
literal|">"
decl_stmt|;
DECL|field|LEFT_BOUND
specifier|private
specifier|static
specifier|final
name|char
name|LEFT_BOUND
init|=
literal|'{'
decl_stmt|;
DECL|field|RIGHT_BOUND
specifier|private
specifier|static
specifier|final
name|char
name|RIGHT_BOUND
init|=
literal|'}'
decl_stmt|;
DECL|field|ESCAPE_CHAR
specifier|private
specifier|static
specifier|final
name|char
name|ESCAPE_CHAR
init|=
literal|'\\'
decl_stmt|;
DECL|field|TIME_ZONE_BOUND
specifier|private
specifier|static
specifier|final
name|char
name|TIME_ZONE_BOUND
init|=
literal|'|'
decl_stmt|;
DECL|field|defaultTimeZone
specifier|private
specifier|final
name|DateTimeZone
name|defaultTimeZone
decl_stmt|;
DECL|field|defaultDateFormatterPattern
specifier|private
specifier|final
name|String
name|defaultDateFormatterPattern
decl_stmt|;
DECL|field|defaultDateFormatter
specifier|private
specifier|final
name|DateTimeFormatter
name|defaultDateFormatter
decl_stmt|;
DECL|method|DateMathExpressionResolver
specifier|public
name|DateMathExpressionResolver
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|String
name|defaultTimeZoneId
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"date_math_expression_resolver.default_time_zone"
argument_list|,
literal|"UTC"
argument_list|)
decl_stmt|;
name|this
operator|.
name|defaultTimeZone
operator|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
name|defaultTimeZoneId
argument_list|)
expr_stmt|;
name|defaultDateFormatterPattern
operator|=
name|settings
operator|.
name|get
argument_list|(
literal|"date_math_expression_resolver.default_date_format"
argument_list|,
literal|"YYYY.MM.dd"
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultDateFormatter
operator|=
name|DateTimeFormat
operator|.
name|forPattern
argument_list|(
name|defaultDateFormatterPattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resolve
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|resolve
parameter_list|(
specifier|final
name|Context
name|context
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|expressions
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|expressions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|expression
range|:
name|expressions
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|resolveExpression
argument_list|(
name|expression
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"fallthrough"
argument_list|)
DECL|method|resolveExpression
name|String
name|resolveExpression
parameter_list|(
name|String
name|expression
parameter_list|,
specifier|final
name|Context
name|context
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|.
name|startsWith
argument_list|(
name|EXPRESSION_LEFT_BOUND
argument_list|)
operator|==
literal|false
operator|||
name|expression
operator|.
name|endsWith
argument_list|(
name|EXPRESSION_RIGHT_BOUND
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
name|expression
return|;
block|}
name|boolean
name|escape
init|=
literal|false
decl_stmt|;
name|boolean
name|inDateFormat
init|=
literal|false
decl_stmt|;
name|boolean
name|inPlaceHolder
init|=
literal|false
decl_stmt|;
specifier|final
name|StringBuilder
name|beforePlaceHolderSb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|inPlaceHolderSb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|char
index|[]
name|text
init|=
name|expression
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
specifier|final
name|int
name|from
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|text
operator|.
name|length
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|from
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|escapedChar
init|=
name|escape
decl_stmt|;
if|if
condition|(
name|escape
condition|)
block|{
name|escape
operator|=
literal|false
expr_stmt|;
block|}
name|char
name|c
init|=
name|text
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|ESCAPE_CHAR
condition|)
block|{
if|if
condition|(
name|escapedChar
condition|)
block|{
name|beforePlaceHolderSb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|escape
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|escape
operator|=
literal|true
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|inPlaceHolder
condition|)
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
name|LEFT_BOUND
case|:
if|if
condition|(
name|inDateFormat
operator|&&
name|escapedChar
condition|)
block|{
name|inPlaceHolderSb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|inDateFormat
condition|)
block|{
name|inDateFormat
operator|=
literal|true
expr_stmt|;
name|inPlaceHolderSb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"invalid dynamic name expression [{}]. invalid character in placeholder at position [{}]"
argument_list|,
operator|new
name|String
argument_list|(
name|text
argument_list|,
name|from
argument_list|,
name|length
argument_list|)
argument_list|,
name|i
argument_list|)
throw|;
block|}
break|break;
case|case
name|RIGHT_BOUND
case|:
if|if
condition|(
name|inDateFormat
operator|&&
name|escapedChar
condition|)
block|{
name|inPlaceHolderSb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inDateFormat
condition|)
block|{
name|inDateFormat
operator|=
literal|false
expr_stmt|;
name|inPlaceHolderSb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|inPlaceHolderString
init|=
name|inPlaceHolderSb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|dateTimeFormatLeftBoundIndex
init|=
name|inPlaceHolderString
operator|.
name|indexOf
argument_list|(
name|LEFT_BOUND
argument_list|)
decl_stmt|;
name|String
name|mathExpression
decl_stmt|;
name|String
name|dateFormatterPattern
decl_stmt|;
name|DateTimeFormatter
name|dateFormatter
decl_stmt|;
specifier|final
name|DateTimeZone
name|timeZone
decl_stmt|;
if|if
condition|(
name|dateTimeFormatLeftBoundIndex
operator|<
literal|0
condition|)
block|{
name|mathExpression
operator|=
name|inPlaceHolderString
expr_stmt|;
name|dateFormatterPattern
operator|=
name|defaultDateFormatterPattern
expr_stmt|;
name|dateFormatter
operator|=
name|defaultDateFormatter
expr_stmt|;
name|timeZone
operator|=
name|defaultTimeZone
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|inPlaceHolderString
operator|.
name|lastIndexOf
argument_list|(
name|RIGHT_BOUND
argument_list|)
operator|!=
name|inPlaceHolderString
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"invalid dynamic name expression [{}]. missing closing `}` for date math format"
argument_list|,
name|inPlaceHolderString
argument_list|)
throw|;
block|}
if|if
condition|(
name|dateTimeFormatLeftBoundIndex
operator|==
name|inPlaceHolderString
operator|.
name|length
argument_list|()
operator|-
literal|2
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"invalid dynamic name expression [{}]. missing date format"
argument_list|,
name|inPlaceHolderString
argument_list|)
throw|;
block|}
name|mathExpression
operator|=
name|inPlaceHolderString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dateTimeFormatLeftBoundIndex
argument_list|)
expr_stmt|;
name|String
name|dateFormatterPatternAndTimeZoneId
init|=
name|inPlaceHolderString
operator|.
name|substring
argument_list|(
name|dateTimeFormatLeftBoundIndex
operator|+
literal|1
argument_list|,
name|inPlaceHolderString
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|formatPatternTimeZoneSeparatorIndex
init|=
name|dateFormatterPatternAndTimeZoneId
operator|.
name|indexOf
argument_list|(
name|TIME_ZONE_BOUND
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatPatternTimeZoneSeparatorIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|dateFormatterPattern
operator|=
name|dateFormatterPatternAndTimeZoneId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|formatPatternTimeZoneSeparatorIndex
argument_list|)
expr_stmt|;
name|timeZone
operator|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
name|dateFormatterPatternAndTimeZoneId
operator|.
name|substring
argument_list|(
name|formatPatternTimeZoneSeparatorIndex
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dateFormatterPattern
operator|=
name|dateFormatterPatternAndTimeZoneId
expr_stmt|;
name|timeZone
operator|=
name|defaultTimeZone
expr_stmt|;
block|}
name|dateFormatter
operator|=
name|DateTimeFormat
operator|.
name|forPattern
argument_list|(
name|dateFormatterPattern
argument_list|)
expr_stmt|;
block|}
name|DateTimeFormatter
name|parser
init|=
name|dateFormatter
operator|.
name|withZone
argument_list|(
name|timeZone
argument_list|)
decl_stmt|;
name|FormatDateTimeFormatter
name|formatter
init|=
operator|new
name|FormatDateTimeFormatter
argument_list|(
name|dateFormatterPattern
argument_list|,
name|parser
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|DateMathParser
name|dateMathParser
init|=
operator|new
name|DateMathParser
argument_list|(
name|formatter
argument_list|)
decl_stmt|;
name|long
name|millis
init|=
name|dateMathParser
operator|.
name|parse
argument_list|(
name|mathExpression
argument_list|,
operator|new
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|context
operator|.
name|getStartTime
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|false
argument_list|,
name|timeZone
argument_list|)
decl_stmt|;
name|String
name|time
init|=
name|formatter
operator|.
name|printer
argument_list|()
operator|.
name|print
argument_list|(
name|millis
argument_list|)
decl_stmt|;
name|beforePlaceHolderSb
operator|.
name|append
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|inPlaceHolderSb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|inPlaceHolder
operator|=
literal|false
expr_stmt|;
block|}
break|break;
default|default:
name|inPlaceHolderSb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
name|LEFT_BOUND
case|:
if|if
condition|(
name|escapedChar
condition|)
block|{
name|beforePlaceHolderSb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inPlaceHolder
operator|=
literal|true
expr_stmt|;
block|}
break|break;
case|case
name|RIGHT_BOUND
case|:
if|if
condition|(
operator|!
name|escapedChar
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"invalid dynamic name expression [{}]. invalid character at position [{}]. "
operator|+
literal|"`{` and `}` are reserved characters and should be escaped when used as part of the index name using `\\` (e.g. `\\{text\\}`)"
argument_list|,
operator|new
name|String
argument_list|(
name|text
argument_list|,
name|from
argument_list|,
name|length
argument_list|)
argument_list|,
name|i
argument_list|)
throw|;
block|}
default|default:
name|beforePlaceHolderSb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|inPlaceHolder
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"invalid dynamic name expression [{}]. date math placeholder is open ended"
argument_list|,
operator|new
name|String
argument_list|(
name|text
argument_list|,
name|from
argument_list|,
name|length
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|beforePlaceHolderSb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"nothing captured"
argument_list|)
throw|;
block|}
return|return
name|beforePlaceHolderSb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Returns<code>true</code> iff the given expression resolves to the given index name otherwise<code>false</code>      */
DECL|method|matchesIndex
specifier|public
specifier|final
name|boolean
name|matchesIndex
parameter_list|(
name|String
name|indexName
parameter_list|,
name|String
name|expression
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|concreteIndices
init|=
name|concreteIndexNames
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|,
name|expression
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|concreteIndices
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|index
argument_list|,
name|indexName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
name|indexName
operator|.
name|equals
argument_list|(
name|expression
argument_list|)
return|;
block|}
block|}
end_class

end_unit

