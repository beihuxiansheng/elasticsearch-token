begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|alias
operator|.
name|Alias
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexClusterStateUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActiveShardCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActiveShardsObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|AckedClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ack
operator|.
name|ClusterStateUpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ack
operator|.
name|CreateIndexClusterStateUpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|Custom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|IndexScopedSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|NodeServicesProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidIndexNameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_AUTO_EXPAND_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_CREATION_DATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_INDEX_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
import|;
end_import

begin_comment
comment|/**  * Service responsible for submitting create index requests  */
end_comment

begin_class
DECL|class|MetaDataCreateIndexService
specifier|public
class|class
name|MetaDataCreateIndexService
extends|extends
name|AbstractComponent
block|{
DECL|field|MAX_INDEX_NAME_BYTES
specifier|public
specifier|static
specifier|final
name|int
name|MAX_INDEX_NAME_BYTES
init|=
literal|255
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|allocationService
specifier|private
specifier|final
name|AllocationService
name|allocationService
decl_stmt|;
DECL|field|aliasValidator
specifier|private
specifier|final
name|AliasValidator
name|aliasValidator
decl_stmt|;
DECL|field|env
specifier|private
specifier|final
name|Environment
name|env
decl_stmt|;
DECL|field|nodeServicesProvider
specifier|private
specifier|final
name|NodeServicesProvider
name|nodeServicesProvider
decl_stmt|;
DECL|field|indexScopedSettings
specifier|private
specifier|final
name|IndexScopedSettings
name|indexScopedSettings
decl_stmt|;
DECL|field|activeShardsObserver
specifier|private
specifier|final
name|ActiveShardsObserver
name|activeShardsObserver
decl_stmt|;
annotation|@
name|Inject
DECL|method|MetaDataCreateIndexService
specifier|public
name|MetaDataCreateIndexService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|AllocationService
name|allocationService
parameter_list|,
name|AliasValidator
name|aliasValidator
parameter_list|,
name|Environment
name|env
parameter_list|,
name|NodeServicesProvider
name|nodeServicesProvider
parameter_list|,
name|IndexScopedSettings
name|indexScopedSettings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|allocationService
operator|=
name|allocationService
expr_stmt|;
name|this
operator|.
name|aliasValidator
operator|=
name|aliasValidator
expr_stmt|;
name|this
operator|.
name|env
operator|=
name|env
expr_stmt|;
name|this
operator|.
name|nodeServicesProvider
operator|=
name|nodeServicesProvider
expr_stmt|;
name|this
operator|.
name|indexScopedSettings
operator|=
name|indexScopedSettings
expr_stmt|;
name|this
operator|.
name|activeShardsObserver
operator|=
operator|new
name|ActiveShardsObserver
argument_list|(
name|settings
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
block|}
DECL|method|validateIndexName
specifier|public
specifier|static
name|void
name|validateIndexName
parameter_list|(
name|String
name|index
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IndexAlreadyExistsException
argument_list|(
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IndexAlreadyExistsException
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|validFileName
argument_list|(
name|index
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
name|index
argument_list|,
literal|"must not contain the following characters "
operator|+
name|Strings
operator|.
name|INVALID_FILENAME_CHARS
argument_list|)
throw|;
block|}
if|if
condition|(
name|index
operator|.
name|contains
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
name|index
argument_list|,
literal|"must not contain '#'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|index
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'_'
operator|||
name|index
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
operator|||
name|index
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'+'
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
name|index
argument_list|,
literal|"must not start with '_', '-', or '+'"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|index
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|equals
argument_list|(
name|index
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
name|index
argument_list|,
literal|"must be lowercase"
argument_list|)
throw|;
block|}
name|int
name|byteCount
init|=
literal|0
decl_stmt|;
try|try
block|{
name|byteCount
operator|=
name|index
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|length
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|// UTF-8 should always be supported, but rethrow this if it is not for some reason
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Unable to determine length of index name"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|byteCount
operator|>
name|MAX_INDEX_NAME_BYTES
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
name|index
argument_list|,
literal|"index name is too long, ("
operator|+
name|byteCount
operator|+
literal|"> "
operator|+
name|MAX_INDEX_NAME_BYTES
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|hasAlias
argument_list|(
name|index
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
name|index
argument_list|,
literal|"already exists as alias"
argument_list|)
throw|;
block|}
if|if
condition|(
name|index
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
name|index
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidIndexNameException
argument_list|(
name|index
argument_list|,
literal|"must not be '.' or '..'"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates an index in the cluster state and waits for the specified number of shard copies to      * become active (as specified in {@link CreateIndexClusterStateUpdateRequest#waitForActiveShards()})      * before sending the response on the listener. If the index creation was successfully applied on      * the cluster state, then {@link CreateIndexClusterStateUpdateResponse#isAcknowledged()} will return      * true, otherwise it will return false and no waiting will occur for started shards      * ({@link CreateIndexClusterStateUpdateResponse#isShardsAcked()} will also be false).  If the index      * creation in the cluster state was successful and the requisite shard copies were started before      * the timeout, then {@link CreateIndexClusterStateUpdateResponse#isShardsAcked()} will      * return true, otherwise if the operation timed out, then it will return false.      *      * @param request the index creation cluster state update request      * @param listener the listener on which to send the index creation cluster state update response      */
DECL|method|createIndex
specifier|public
name|void
name|createIndex
parameter_list|(
specifier|final
name|CreateIndexClusterStateUpdateRequest
name|request
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|CreateIndexClusterStateUpdateResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|onlyCreateIndex
argument_list|(
name|request
argument_list|,
name|ActionListener
operator|.
name|wrap
argument_list|(
name|response
lambda|->
block|{
if|if
condition|(
name|response
operator|.
name|isAcknowledged
argument_list|()
condition|)
block|{
name|activeShardsObserver
operator|.
name|waitForActiveShards
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|request
operator|.
name|waitForActiveShards
argument_list|()
argument_list|,
name|request
operator|.
name|ackTimeout
argument_list|()
argument_list|,
name|shardsAcked
lambda|->
block|{
if|if
condition|(
name|shardsAcked
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] index created, but the operation timed out while waiting for "
operator|+
literal|"enough shards to be started."
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|CreateIndexClusterStateUpdateResponse
argument_list|(
name|response
operator|.
name|isAcknowledged
argument_list|()
argument_list|,
name|shardsAcked
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|,
name|listener
operator|::
name|onFailure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|CreateIndexClusterStateUpdateResponse
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|listener
operator|::
name|onFailure
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|onlyCreateIndex
specifier|private
name|void
name|onlyCreateIndex
parameter_list|(
specifier|final
name|CreateIndexClusterStateUpdateRequest
name|request
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|ClusterStateUpdateResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|Settings
operator|.
name|Builder
name|updatedSettingsBuilder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|updatedSettingsBuilder
operator|.
name|put
argument_list|(
name|request
operator|.
name|settings
argument_list|()
argument_list|)
operator|.
name|normalizePrefix
argument_list|(
name|IndexMetaData
operator|.
name|INDEX_SETTING_PREFIX
argument_list|)
expr_stmt|;
name|indexScopedSettings
operator|.
name|validate
argument_list|(
name|updatedSettingsBuilder
argument_list|)
expr_stmt|;
name|request
operator|.
name|settings
argument_list|(
name|updatedSettingsBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"create-index ["
operator|+
name|request
operator|.
name|index
argument_list|()
operator|+
literal|"], cause ["
operator|+
name|request
operator|.
name|cause
argument_list|()
operator|+
literal|"]"
argument_list|,
operator|new
name|AckedClusterStateUpdateTask
argument_list|<
name|ClusterStateUpdateResponse
argument_list|>
argument_list|(
name|Priority
operator|.
name|URGENT
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ClusterStateUpdateResponse
name|newResponse
parameter_list|(
name|boolean
name|acknowledged
parameter_list|)
block|{
return|return
operator|new
name|ClusterStateUpdateResponse
argument_list|(
name|acknowledged
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
name|Index
name|createdIndex
init|=
literal|null
decl_stmt|;
name|String
name|removalReason
init|=
literal|null
decl_stmt|;
try|try
block|{
name|validate
argument_list|(
name|request
argument_list|,
name|currentState
argument_list|)
expr_stmt|;
for|for
control|(
name|Alias
name|alias
range|:
name|request
operator|.
name|aliases
argument_list|()
control|)
block|{
name|aliasValidator
operator|.
name|validateAlias
argument_list|(
name|alias
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// we only find a template when its an API call (a new index)
comment|// find templates, highest order are better matching
name|List
argument_list|<
name|IndexTemplateMetaData
argument_list|>
name|templates
init|=
name|findTemplates
argument_list|(
name|request
argument_list|,
name|currentState
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// add the request mapping
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|mappings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|templatesAliases
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|templateNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|request
operator|.
name|mappings
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mappings
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|MapperService
operator|.
name|parseMapping
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|entry
range|:
name|request
operator|.
name|customs
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|customs
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// apply templates, merging the mappings into the request mapping if exists
for|for
control|(
name|IndexTemplateMetaData
name|template
range|:
name|templates
control|)
block|{
name|templateNames
operator|.
name|add
argument_list|(
name|template
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|CompressedXContent
argument_list|>
name|cursor
range|:
name|template
operator|.
name|mappings
argument_list|()
control|)
block|{
if|if
condition|(
name|mappings
operator|.
name|containsKey
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
condition|)
block|{
name|XContentHelper
operator|.
name|mergeDefaults
argument_list|(
name|mappings
operator|.
name|get
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
argument_list|,
name|MapperService
operator|.
name|parseMapping
argument_list|(
name|cursor
operator|.
name|value
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mappings
operator|.
name|put
argument_list|(
name|cursor
operator|.
name|key
argument_list|,
name|MapperService
operator|.
name|parseMapping
argument_list|(
name|cursor
operator|.
name|value
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// handle custom
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|cursor
range|:
name|template
operator|.
name|customs
argument_list|()
control|)
block|{
name|String
name|type
init|=
name|cursor
operator|.
name|key
decl_stmt|;
name|IndexMetaData
operator|.
name|Custom
name|custom
init|=
name|cursor
operator|.
name|value
decl_stmt|;
name|IndexMetaData
operator|.
name|Custom
name|existing
init|=
name|customs
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
name|customs
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|custom
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IndexMetaData
operator|.
name|Custom
name|merged
init|=
name|existing
operator|.
name|mergeWith
argument_list|(
name|custom
argument_list|)
decl_stmt|;
name|customs
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|merged
argument_list|)
expr_stmt|;
block|}
block|}
comment|//handle aliases
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|cursor
range|:
name|template
operator|.
name|aliases
argument_list|()
control|)
block|{
name|AliasMetaData
name|aliasMetaData
init|=
name|cursor
operator|.
name|value
decl_stmt|;
comment|//if an alias with same name came with the create index request itself,
comment|// ignore this one taken from the index template
if|if
condition|(
name|request
operator|.
name|aliases
argument_list|()
operator|.
name|contains
argument_list|(
operator|new
name|Alias
argument_list|(
name|aliasMetaData
operator|.
name|alias
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|//if an alias with same name was already processed, ignore this one
if|if
condition|(
name|templatesAliases
operator|.
name|containsKey
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|//Allow templatesAliases to be templated by replacing a token with the name of the index that we are applying it to
if|if
condition|(
name|aliasMetaData
operator|.
name|alias
argument_list|()
operator|.
name|contains
argument_list|(
literal|"{index}"
argument_list|)
condition|)
block|{
name|String
name|templatedAlias
init|=
name|aliasMetaData
operator|.
name|alias
argument_list|()
operator|.
name|replace
argument_list|(
literal|"{index}"
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
name|aliasMetaData
operator|=
name|AliasMetaData
operator|.
name|newAliasMetaData
argument_list|(
name|aliasMetaData
argument_list|,
name|templatedAlias
argument_list|)
expr_stmt|;
block|}
name|aliasValidator
operator|.
name|validateAliasMetaData
argument_list|(
name|aliasMetaData
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
expr_stmt|;
name|templatesAliases
operator|.
name|put
argument_list|(
name|aliasMetaData
operator|.
name|alias
argument_list|()
argument_list|,
name|aliasMetaData
argument_list|)
expr_stmt|;
block|}
block|}
name|Settings
operator|.
name|Builder
name|indexSettingsBuilder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// apply templates, here, in reverse order, since first ones are better matching
for|for
control|(
name|int
name|i
init|=
name|templates
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|templates
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|settings
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// now, put the request settings, so they override templates
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|request
operator|.
name|settings
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexSettingsBuilder
operator|.
name|get
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|)
operator|==
literal|null
condition|)
block|{
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexSettingsBuilder
operator|.
name|get
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|)
operator|==
literal|null
condition|)
block|{
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|settings
operator|.
name|getAsInt
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|get
argument_list|(
name|SETTING_AUTO_EXPAND_REPLICAS
argument_list|)
operator|!=
literal|null
operator|&&
name|indexSettingsBuilder
operator|.
name|get
argument_list|(
name|SETTING_AUTO_EXPAND_REPLICAS
argument_list|)
operator|==
literal|null
condition|)
block|{
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_AUTO_EXPAND_REPLICAS
argument_list|,
name|settings
operator|.
name|get
argument_list|(
name|SETTING_AUTO_EXPAND_REPLICAS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexSettingsBuilder
operator|.
name|get
argument_list|(
name|SETTING_VERSION_CREATED
argument_list|)
operator|==
literal|null
condition|)
block|{
name|DiscoveryNodes
name|nodes
init|=
name|currentState
operator|.
name|nodes
argument_list|()
decl_stmt|;
specifier|final
name|Version
name|createdVersion
init|=
name|Version
operator|.
name|smallest
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|,
name|nodes
operator|.
name|getSmallestNonClientNodeVersion
argument_list|()
argument_list|)
decl_stmt|;
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_VERSION_CREATED
argument_list|,
name|createdVersion
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexSettingsBuilder
operator|.
name|get
argument_list|(
name|SETTING_CREATION_DATE
argument_list|)
operator|==
literal|null
condition|)
block|{
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_CREATION_DATE
argument_list|,
operator|new
name|DateTime
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|getMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_INDEX_PROVIDED_NAME
argument_list|,
name|request
operator|.
name|getProvidedName
argument_list|()
argument_list|)
expr_stmt|;
name|indexSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_INDEX_UUID
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Index
name|shrinkFromIndex
init|=
name|request
operator|.
name|shrinkFrom
argument_list|()
decl_stmt|;
name|int
name|routingNumShards
init|=
name|IndexMetaData
operator|.
name|INDEX_NUMBER_OF_SHARDS_SETTING
operator|.
name|get
argument_list|(
name|indexSettingsBuilder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
empty_stmt|;
if|if
condition|(
name|shrinkFromIndex
operator|!=
literal|null
condition|)
block|{
name|prepareShrinkIndexSettings
argument_list|(
name|currentState
argument_list|,
name|mappings
operator|.
name|keySet
argument_list|()
argument_list|,
name|indexSettingsBuilder
argument_list|,
name|shrinkFromIndex
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
name|IndexMetaData
name|sourceMetaData
init|=
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|getIndexSafe
argument_list|(
name|shrinkFromIndex
argument_list|)
decl_stmt|;
name|routingNumShards
operator|=
name|sourceMetaData
operator|.
name|getRoutingNumShards
argument_list|()
expr_stmt|;
block|}
name|Settings
name|actualIndexSettings
init|=
name|indexSettingsBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
operator|.
name|Builder
name|tmpImdBuilder
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|setRoutingNumShards
argument_list|(
name|routingNumShards
argument_list|)
decl_stmt|;
comment|// Set up everything, now locally create the index to see that things are ok, and apply
specifier|final
name|IndexMetaData
name|tmpImd
init|=
name|tmpImdBuilder
operator|.
name|settings
argument_list|(
name|actualIndexSettings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ActiveShardCount
name|waitForActiveShards
init|=
name|request
operator|.
name|waitForActiveShards
argument_list|()
decl_stmt|;
if|if
condition|(
name|waitForActiveShards
operator|==
name|ActiveShardCount
operator|.
name|DEFAULT
condition|)
block|{
name|waitForActiveShards
operator|=
name|tmpImd
operator|.
name|getWaitForActiveShards
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|waitForActiveShards
operator|.
name|validate
argument_list|(
name|tmpImd
operator|.
name|getNumberOfReplicas
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid wait_for_active_shards["
operator|+
name|request
operator|.
name|waitForActiveShards
argument_list|()
operator|+
literal|"]: cannot be greater than number of shard copies ["
operator|+
operator|(
name|tmpImd
operator|.
name|getNumberOfReplicas
argument_list|()
operator|+
literal|1
operator|)
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|// create the index here (on the master) to validate it can be created, as well as adding the mapping
specifier|final
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|createIndex
argument_list|(
name|nodeServicesProvider
argument_list|,
name|tmpImd
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|createdIndex
operator|=
name|indexService
operator|.
name|index
argument_list|()
expr_stmt|;
comment|// now add the mappings
name|MapperService
name|mapperService
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
decl_stmt|;
try|try
block|{
name|mapperService
operator|.
name|merge
argument_list|(
name|mappings
argument_list|,
name|request
operator|.
name|updateAllTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|mpe
parameter_list|)
block|{
name|removalReason
operator|=
literal|"failed on parsing default mapping/mappings on index creation"
expr_stmt|;
throw|throw
name|mpe
throw|;
block|}
specifier|final
name|QueryShardContext
name|queryShardContext
init|=
name|indexService
operator|.
name|newQueryShardContext
argument_list|()
decl_stmt|;
for|for
control|(
name|Alias
name|alias
range|:
name|request
operator|.
name|aliases
argument_list|()
control|)
block|{
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|alias
operator|.
name|filter
argument_list|()
argument_list|)
condition|)
block|{
name|aliasValidator
operator|.
name|validateAliasFilter
argument_list|(
name|alias
operator|.
name|name
argument_list|()
argument_list|,
name|alias
operator|.
name|filter
argument_list|()
argument_list|,
name|queryShardContext
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|AliasMetaData
name|aliasMetaData
range|:
name|templatesAliases
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|aliasMetaData
operator|.
name|filter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|aliasValidator
operator|.
name|validateAliasFilter
argument_list|(
name|aliasMetaData
operator|.
name|alias
argument_list|()
argument_list|,
name|aliasMetaData
operator|.
name|filter
argument_list|()
operator|.
name|uncompressed
argument_list|()
argument_list|,
name|queryShardContext
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now, update the mappings with the actual source
name|Map
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|mappingsMetaData
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DocumentMapper
name|mapper
range|:
name|mapperService
operator|.
name|docMappers
argument_list|(
literal|true
argument_list|)
control|)
block|{
name|MappingMetaData
name|mappingMd
init|=
operator|new
name|MappingMetaData
argument_list|(
name|mapper
argument_list|)
decl_stmt|;
name|mappingsMetaData
operator|.
name|put
argument_list|(
name|mapper
operator|.
name|type
argument_list|()
argument_list|,
name|mappingMd
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexMetaData
operator|.
name|Builder
name|indexMetaDataBuilder
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|actualIndexSettings
argument_list|)
operator|.
name|setRoutingNumShards
argument_list|(
name|routingNumShards
argument_list|)
decl_stmt|;
for|for
control|(
name|MappingMetaData
name|mappingMd
range|:
name|mappingsMetaData
operator|.
name|values
argument_list|()
control|)
block|{
name|indexMetaDataBuilder
operator|.
name|putMapping
argument_list|(
name|mappingMd
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AliasMetaData
name|aliasMetaData
range|:
name|templatesAliases
operator|.
name|values
argument_list|()
control|)
block|{
name|indexMetaDataBuilder
operator|.
name|putAlias
argument_list|(
name|aliasMetaData
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Alias
name|alias
range|:
name|request
operator|.
name|aliases
argument_list|()
control|)
block|{
name|AliasMetaData
name|aliasMetaData
init|=
name|AliasMetaData
operator|.
name|builder
argument_list|(
name|alias
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|alias
operator|.
name|filter
argument_list|()
argument_list|)
operator|.
name|indexRouting
argument_list|(
name|alias
operator|.
name|indexRouting
argument_list|()
argument_list|)
operator|.
name|searchRouting
argument_list|(
name|alias
operator|.
name|searchRouting
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|indexMetaDataBuilder
operator|.
name|putAlias
argument_list|(
name|aliasMetaData
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customEntry
range|:
name|customs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|indexMetaDataBuilder
operator|.
name|putCustom
argument_list|(
name|customEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|customEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexMetaDataBuilder
operator|.
name|state
argument_list|(
name|request
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|IndexMetaData
name|indexMetaData
decl_stmt|;
try|try
block|{
name|indexMetaData
operator|=
name|indexMetaDataBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|removalReason
operator|=
literal|"failed to build index metadata"
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|indexService
operator|.
name|getIndexEventListener
argument_list|()
operator|.
name|beforeIndexAddedToCluster
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|,
name|indexMetaData
operator|.
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
name|MetaData
name|newMetaData
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|maybeShadowIndicator
init|=
name|IndexMetaData
operator|.
name|isIndexUsingShadowReplicas
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
argument_list|)
condition|?
literal|"s"
else|:
literal|""
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[{}] creating index, cause [{}], templates {}, shards [{}]/[{}{}], mappings {}"
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|request
operator|.
name|cause
argument_list|()
argument_list|,
name|templateNames
argument_list|,
name|indexMetaData
operator|.
name|getNumberOfShards
argument_list|()
argument_list|,
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
argument_list|,
name|maybeShadowIndicator
argument_list|,
name|mappings
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterBlocks
operator|.
name|Builder
name|blocks
init|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|blocks
argument_list|(
name|currentState
operator|.
name|blocks
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|blocks
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ClusterBlock
name|block
range|:
name|request
operator|.
name|blocks
argument_list|()
control|)
block|{
name|blocks
operator|.
name|addIndexBlock
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
block|}
name|blocks
operator|.
name|updateBlocks
argument_list|(
name|indexMetaData
argument_list|)
expr_stmt|;
name|ClusterState
name|updatedState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|blocks
argument_list|(
name|blocks
argument_list|)
operator|.
name|metaData
argument_list|(
name|newMetaData
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|state
argument_list|()
operator|==
name|State
operator|.
name|OPEN
condition|)
block|{
name|RoutingTable
operator|.
name|Builder
name|routingTableBuilder
init|=
name|RoutingTable
operator|.
name|builder
argument_list|(
name|updatedState
operator|.
name|routingTable
argument_list|()
argument_list|)
operator|.
name|addAsNew
argument_list|(
name|updatedState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|updatedState
operator|=
name|allocationService
operator|.
name|reroute
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|updatedState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTableBuilder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|"index ["
operator|+
name|request
operator|.
name|index
argument_list|()
operator|+
literal|"] created"
argument_list|)
expr_stmt|;
block|}
name|removalReason
operator|=
literal|"cleaning up after validating index on master"
expr_stmt|;
return|return
name|updatedState
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|createdIndex
operator|!=
literal|null
condition|)
block|{
comment|// Index was already partially created - need to clean up
name|indicesService
operator|.
name|removeIndex
argument_list|(
name|createdIndex
argument_list|,
name|removalReason
operator|!=
literal|null
condition|?
name|removalReason
else|:
literal|"failed to create index"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|IndexAlreadyExistsException
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"[{}] failed to create"
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"[{}] failed to create"
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|onFailure
argument_list|(
name|source
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|findTemplates
specifier|private
name|List
argument_list|<
name|IndexTemplateMetaData
argument_list|>
name|findTemplates
parameter_list|(
name|CreateIndexClusterStateUpdateRequest
name|request
parameter_list|,
name|ClusterState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|IndexTemplateMetaData
argument_list|>
name|templates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexTemplateMetaData
argument_list|>
name|cursor
range|:
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|templates
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|IndexTemplateMetaData
name|template
init|=
name|cursor
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|template
operator|.
name|template
argument_list|()
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|templates
operator|.
name|add
argument_list|(
name|template
argument_list|)
expr_stmt|;
block|}
block|}
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|templates
argument_list|,
operator|new
name|Comparator
argument_list|<
name|IndexTemplateMetaData
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|IndexTemplateMetaData
name|o1
parameter_list|,
name|IndexTemplateMetaData
name|o2
parameter_list|)
block|{
return|return
name|o2
operator|.
name|order
argument_list|()
operator|-
name|o1
operator|.
name|order
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|templates
return|;
block|}
DECL|method|validate
specifier|private
name|void
name|validate
parameter_list|(
name|CreateIndexClusterStateUpdateRequest
name|request
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
name|validateIndexName
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|validateIndexSettings
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|request
operator|.
name|settings
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|validateIndexSettings
specifier|public
name|void
name|validateIndexSettings
parameter_list|(
name|String
name|indexName
parameter_list|,
name|Settings
name|settings
parameter_list|)
throws|throws
name|IndexCreationException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|validationErrors
init|=
name|getIndexSettingsValidationErrors
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|validationErrors
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|ValidationException
name|validationException
init|=
operator|new
name|ValidationException
argument_list|()
decl_stmt|;
name|validationException
operator|.
name|addValidationErrors
argument_list|(
name|validationErrors
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IndexCreationException
argument_list|(
name|indexName
argument_list|,
name|validationException
argument_list|)
throw|;
block|}
block|}
DECL|method|getIndexSettingsValidationErrors
name|List
argument_list|<
name|String
argument_list|>
name|getIndexSettingsValidationErrors
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|String
name|customPath
init|=
name|IndexMetaData
operator|.
name|INDEX_DATA_PATH_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|validationErrors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isEmpty
argument_list|(
name|customPath
argument_list|)
operator|==
literal|false
operator|&&
name|env
operator|.
name|sharedDataFile
argument_list|()
operator|==
literal|null
condition|)
block|{
name|validationErrors
operator|.
name|add
argument_list|(
literal|"path.shared_data must be set in order to use custom data paths"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Strings
operator|.
name|isEmpty
argument_list|(
name|customPath
argument_list|)
operator|==
literal|false
condition|)
block|{
name|Path
name|resolvedPath
init|=
name|PathUtils
operator|.
name|get
argument_list|(
operator|new
name|Path
index|[]
block|{
name|env
operator|.
name|sharedDataFile
argument_list|()
block|}
argument_list|,
name|customPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolvedPath
operator|==
literal|null
condition|)
block|{
name|validationErrors
operator|.
name|add
argument_list|(
literal|"custom path ["
operator|+
name|customPath
operator|+
literal|"] is not a sub-path of path.shared_data ["
operator|+
name|env
operator|.
name|sharedDataFile
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|validationErrors
return|;
block|}
comment|/**      * Validates the settings and mappings for shrinking an index.      * @return the list of nodes at least one instance of the source index shards are allocated      */
DECL|method|validateShrinkIndex
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|validateShrinkIndex
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|String
name|sourceIndex
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|targetIndexMappingsTypes
parameter_list|,
name|String
name|targetIndexName
parameter_list|,
name|Settings
name|targetIndexSettings
parameter_list|)
block|{
if|if
condition|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|targetIndexName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IndexAlreadyExistsException
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|targetIndexName
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|IndexMetaData
name|sourceMetaData
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|sourceIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceMetaData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexNotFoundException
argument_list|(
name|sourceIndex
argument_list|)
throw|;
block|}
comment|// ensure index is read-only
if|if
condition|(
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|indexBlocked
argument_list|(
name|ClusterBlockLevel
operator|.
name|WRITE
argument_list|,
name|sourceIndex
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"index "
operator|+
name|sourceIndex
operator|+
literal|" must be read-only to shrink index. use \"index.blocks.write=true\""
argument_list|)
throw|;
block|}
if|if
condition|(
name|sourceMetaData
operator|.
name|getNumberOfShards
argument_list|()
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can't shrink an index with only one shard"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|targetIndexMappingsTypes
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|||
operator|(
name|targetIndexMappingsTypes
operator|.
name|isEmpty
argument_list|()
operator|||
name|targetIndexMappingsTypes
operator|.
name|contains
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|)
operator|)
operator|==
literal|false
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"mappings are not allowed when shrinking indices"
operator|+
literal|", all mappings are copied from the source index"
argument_list|)
throw|;
block|}
if|if
condition|(
name|IndexMetaData
operator|.
name|INDEX_NUMBER_OF_SHARDS_SETTING
operator|.
name|exists
argument_list|(
name|targetIndexSettings
argument_list|)
condition|)
block|{
comment|// this method applies all necessary checks ie. if the target shards are less than the source shards
comment|// of if the source shards are divisible by the number of target shards
name|IndexMetaData
operator|.
name|getRoutingFactor
argument_list|(
name|sourceMetaData
argument_list|,
name|IndexMetaData
operator|.
name|INDEX_NUMBER_OF_SHARDS_SETTING
operator|.
name|get
argument_list|(
name|targetIndexSettings
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// now check that index is all on one node
specifier|final
name|IndexRoutingTable
name|table
init|=
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|sourceIndex
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|nodesToNumRouting
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numShards
init|=
name|sourceMetaData
operator|.
name|getNumberOfShards
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|routing
range|:
name|table
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
control|)
block|{
name|nodesToNumRouting
operator|.
name|computeIfAbsent
argument_list|(
name|routing
operator|.
name|currentNodeId
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|nodesToAllocateOn
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|entries
range|:
name|nodesToNumRouting
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|numAllocations
init|=
name|entries
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
assert|assert
name|numAllocations
operator|<=
name|numShards
operator|:
literal|"wait what? "
operator|+
name|numAllocations
operator|+
literal|" is> than num shards "
operator|+
name|numShards
assert|;
if|if
condition|(
name|numAllocations
operator|==
name|numShards
condition|)
block|{
name|nodesToAllocateOn
operator|.
name|add
argument_list|(
name|entries
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nodesToAllocateOn
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"index "
operator|+
name|sourceIndex
operator|+
literal|" must have all shards allocated on the same node to shrink index"
argument_list|)
throw|;
block|}
return|return
name|nodesToAllocateOn
return|;
block|}
DECL|method|prepareShrinkIndexSettings
specifier|static
name|void
name|prepareShrinkIndexSettings
parameter_list|(
name|ClusterState
name|currentState
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|mappingKeys
parameter_list|,
name|Settings
operator|.
name|Builder
name|indexSettingsBuilder
parameter_list|,
name|Index
name|shrinkFromIndex
parameter_list|,
name|String
name|shrinkIntoName
parameter_list|)
block|{
specifier|final
name|IndexMetaData
name|sourceMetaData
init|=
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|shrinkFromIndex
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nodesToAllocateOn
init|=
name|validateShrinkIndex
argument_list|(
name|currentState
argument_list|,
name|shrinkFromIndex
operator|.
name|getName
argument_list|()
argument_list|,
name|mappingKeys
argument_list|,
name|shrinkIntoName
argument_list|,
name|indexSettingsBuilder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|analysisSimilarityPredicate
init|=
parameter_list|(
name|s
parameter_list|)
lambda|->
name|s
operator|.
name|startsWith
argument_list|(
literal|"index.similarity."
argument_list|)
operator|||
name|s
operator|.
name|startsWith
argument_list|(
literal|"index.analysis."
argument_list|)
decl_stmt|;
name|indexSettingsBuilder
comment|// we use "i.r.a.initial_recovery" rather than "i.r.a.require|include" since we want the replica to allocate right away
comment|// once we are allocated.
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.initial_recovery._id"
argument_list|,
name|Strings
operator|.
name|arrayToCommaDelimitedString
argument_list|(
name|nodesToAllocateOn
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
comment|// we only try once and then give up with a shrink index
operator|.
name|put
argument_list|(
literal|"index.allocation.max_retries"
argument_list|,
literal|1
argument_list|)
comment|// now copy all similarity / analysis settings - this overrides all settings from the user unless they
comment|// wanna add extra settings
operator|.
name|put
argument_list|(
name|sourceMetaData
operator|.
name|getSettings
argument_list|()
operator|.
name|filter
argument_list|(
name|analysisSimilarityPredicate
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|INDEX_SHRINK_SOURCE_NAME
operator|.
name|getKey
argument_list|()
argument_list|,
name|shrinkFromIndex
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|INDEX_SHRINK_SOURCE_UUID
operator|.
name|getKey
argument_list|()
argument_list|,
name|shrinkFromIndex
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

