begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Resolves cluster names from an expression. The expression must be the exact match of a cluster  * name or must be a wildcard expression.  */
end_comment

begin_class
DECL|class|ClusterNameExpressionResolver
specifier|public
specifier|final
class|class
name|ClusterNameExpressionResolver
extends|extends
name|AbstractComponent
block|{
DECL|field|wildcardResolver
specifier|private
specifier|final
name|WildcardExpressionResolver
name|wildcardResolver
init|=
operator|new
name|WildcardExpressionResolver
argument_list|()
decl_stmt|;
DECL|method|ClusterNameExpressionResolver
specifier|public
name|ClusterNameExpressionResolver
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
comment|/**      * Resolves the provided cluster expression to matching cluster names. This method only      * supports exact or wildcard matches.      *      * @param remoteClusters    the aliases for remote clusters      * @param clusterExpression the expressions that can be resolved to cluster names.      * @return the resolved cluster aliases.      */
DECL|method|resolveClusterNames
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|resolveClusterNames
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|remoteClusters
parameter_list|,
name|String
name|clusterExpression
parameter_list|)
block|{
if|if
condition|(
name|remoteClusters
operator|.
name|contains
argument_list|(
name|clusterExpression
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|clusterExpression
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Regex
operator|.
name|isSimpleMatchPattern
argument_list|(
name|clusterExpression
argument_list|)
condition|)
block|{
return|return
name|wildcardResolver
operator|.
name|resolve
argument_list|(
name|remoteClusters
argument_list|,
name|clusterExpression
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
DECL|class|WildcardExpressionResolver
specifier|private
specifier|static
class|class
name|WildcardExpressionResolver
block|{
DECL|method|resolve
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|resolve
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|remoteClusters
parameter_list|,
name|String
name|clusterExpression
parameter_list|)
block|{
if|if
condition|(
name|isTrivialWildcard
argument_list|(
name|clusterExpression
argument_list|)
condition|)
block|{
return|return
name|resolveTrivialWildcard
argument_list|(
name|remoteClusters
argument_list|)
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|matches
init|=
name|matches
argument_list|(
name|remoteClusters
argument_list|,
name|clusterExpression
argument_list|)
decl_stmt|;
if|if
condition|(
name|matches
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|matches
argument_list|)
return|;
block|}
block|}
DECL|method|isTrivialWildcard
specifier|private
name|boolean
name|isTrivialWildcard
parameter_list|(
name|String
name|clusterExpression
parameter_list|)
block|{
return|return
name|Regex
operator|.
name|isMatchAllPattern
argument_list|(
name|clusterExpression
argument_list|)
return|;
block|}
DECL|method|resolveTrivialWildcard
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|resolveTrivialWildcard
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|remoteClusters
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|remoteClusters
argument_list|)
return|;
block|}
DECL|method|matches
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|matches
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|remoteClusters
parameter_list|,
name|String
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|.
name|indexOf
argument_list|(
literal|"*"
argument_list|)
operator|==
name|expression
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return
name|otherWildcard
argument_list|(
name|remoteClusters
argument_list|,
name|expression
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|otherWildcard
argument_list|(
name|remoteClusters
argument_list|,
name|expression
argument_list|)
return|;
block|}
block|}
DECL|method|otherWildcard
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|otherWildcard
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|remoteClusters
parameter_list|,
name|String
name|expression
parameter_list|)
block|{
specifier|final
name|String
name|pattern
init|=
name|expression
decl_stmt|;
return|return
name|remoteClusters
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|n
lambda|->
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|n
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

