begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
operator|.
name|Custom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|SnapshotId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Meta data about restore processes that are currently executing  */
end_comment

begin_class
DECL|class|RestoreInProgress
specifier|public
class|class
name|RestoreInProgress
extends|extends
name|AbstractDiffable
argument_list|<
name|Custom
argument_list|>
implements|implements
name|Custom
block|{
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"restore"
decl_stmt|;
DECL|field|PROTO
specifier|public
specifier|static
specifier|final
name|RestoreInProgress
name|PROTO
init|=
operator|new
name|RestoreInProgress
argument_list|()
decl_stmt|;
DECL|field|entries
specifier|private
specifier|final
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
decl_stmt|;
comment|/**      * Constructs new restore metadata      *      * @param entries list of currently running restore processes      */
DECL|method|RestoreInProgress
specifier|public
name|RestoreInProgress
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|=
name|entries
expr_stmt|;
block|}
comment|/**      * Constructs new restore metadata      *      * @param entries list of currently running restore processes      */
DECL|method|RestoreInProgress
specifier|public
name|RestoreInProgress
parameter_list|(
name|Entry
modifier|...
name|entries
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns list of currently running restore processes      *      * @return list of currently running restore processes      */
DECL|method|entries
specifier|public
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|()
block|{
return|return
name|this
operator|.
name|entries
return|;
block|}
comment|/**      * Returns currently running restore process with corresponding snapshot id or null if this snapshot is not being      * restored      *      * @param snapshotId snapshot id      * @return restore metadata or null      */
DECL|method|snapshot
specifier|public
name|Entry
name|snapshot
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|)
block|{
for|for
control|(
name|Entry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|snapshotId
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|snapshotId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|RestoreInProgress
name|that
init|=
operator|(
name|RestoreInProgress
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|entries
operator|.
name|equals
argument_list|(
name|that
operator|.
name|entries
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|entries
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * Restore metadata      */
DECL|class|Entry
specifier|public
specifier|static
class|class
name|Entry
block|{
DECL|field|state
specifier|private
specifier|final
name|State
name|state
decl_stmt|;
DECL|field|snapshotId
specifier|private
specifier|final
name|SnapshotId
name|snapshotId
decl_stmt|;
DECL|field|shards
specifier|private
specifier|final
name|Map
argument_list|<
name|ShardId
argument_list|,
name|ShardRestoreStatus
argument_list|>
name|shards
decl_stmt|;
DECL|field|indices
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|indices
decl_stmt|;
comment|/**          * Creates new restore metadata          *          * @param snapshotId snapshot id          * @param state      current state of the restore process          * @param indices    list of indices being restored          * @param shards     list of shards being restored and thier current restore status          */
DECL|method|Entry
specifier|public
name|Entry
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|State
name|state
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|,
name|ImmutableMap
argument_list|<
name|ShardId
argument_list|,
name|ShardRestoreStatus
argument_list|>
name|shards
parameter_list|)
block|{
name|this
operator|.
name|snapshotId
operator|=
name|snapshotId
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|indices
operator|=
name|indices
expr_stmt|;
if|if
condition|(
name|shards
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|shards
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|shards
operator|=
name|shards
expr_stmt|;
block|}
block|}
comment|/**          * Returns snapshot id          *          * @return snapshot id          */
DECL|method|snapshotId
specifier|public
name|SnapshotId
name|snapshotId
parameter_list|()
block|{
return|return
name|this
operator|.
name|snapshotId
return|;
block|}
comment|/**          * Returns list of shards that being restore and their status          *          * @return list of shards          */
DECL|method|shards
specifier|public
name|Map
argument_list|<
name|ShardId
argument_list|,
name|ShardRestoreStatus
argument_list|>
name|shards
parameter_list|()
block|{
return|return
name|this
operator|.
name|shards
return|;
block|}
comment|/**          * Returns current restore state          *          * @return restore state          */
DECL|method|state
specifier|public
name|State
name|state
parameter_list|()
block|{
return|return
name|state
return|;
block|}
comment|/**          * Returns list of indices          *          * @return list of indices          */
DECL|method|indices
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|()
block|{
return|return
name|indices
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|indices
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|indices
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|snapshotId
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|snapshotId
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|shards
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|shards
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|state
operator|!=
name|entry
operator|.
name|state
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|state
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|snapshotId
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|shards
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|indices
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
comment|/**      * Represents status of a restored shard      */
DECL|class|ShardRestoreStatus
specifier|public
specifier|static
class|class
name|ShardRestoreStatus
block|{
DECL|field|state
specifier|private
name|State
name|state
decl_stmt|;
DECL|field|nodeId
specifier|private
name|String
name|nodeId
decl_stmt|;
DECL|field|reason
specifier|private
name|String
name|reason
decl_stmt|;
DECL|method|ShardRestoreStatus
specifier|private
name|ShardRestoreStatus
parameter_list|()
block|{         }
comment|/**          * Constructs a new shard restore status in initializing state on the given node          *          * @param nodeId node id          */
DECL|method|ShardRestoreStatus
specifier|public
name|ShardRestoreStatus
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
name|this
argument_list|(
name|nodeId
argument_list|,
name|State
operator|.
name|INIT
argument_list|)
expr_stmt|;
block|}
comment|/**          * Constructs a new shard restore status in with specified state on the given node          *          * @param nodeId node id          * @param state  restore state          */
DECL|method|ShardRestoreStatus
specifier|public
name|ShardRestoreStatus
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|State
name|state
parameter_list|)
block|{
name|this
argument_list|(
name|nodeId
argument_list|,
name|state
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**          * Constructs a new shard restore status in with specified state on the given node with specified failure reason          *          * @param nodeId node id          * @param state  restore state          * @param reason failure reason          */
DECL|method|ShardRestoreStatus
specifier|public
name|ShardRestoreStatus
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|State
name|state
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
block|}
comment|/**          * Returns current state          *          * @return current state          */
DECL|method|state
specifier|public
name|State
name|state
parameter_list|()
block|{
return|return
name|state
return|;
block|}
comment|/**          * Returns node id of the node where shared is getting restored          *          * @return node id          */
DECL|method|nodeId
specifier|public
name|String
name|nodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
comment|/**          * Returns failure reason          *          * @return failure reason          */
DECL|method|reason
specifier|public
name|String
name|reason
parameter_list|()
block|{
return|return
name|reason
return|;
block|}
comment|/**          * Reads restore status from stream input          *          * @param in stream input          * @return restore status          */
DECL|method|readShardRestoreStatus
specifier|public
specifier|static
name|ShardRestoreStatus
name|readShardRestoreStatus
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ShardRestoreStatus
name|shardSnapshotStatus
init|=
operator|new
name|ShardRestoreStatus
argument_list|()
decl_stmt|;
name|shardSnapshotStatus
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|shardSnapshotStatus
return|;
block|}
comment|/**          * Reads restore status from stream input          *          * @param in stream input          */
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|nodeId
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|fromValue
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|reason
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
block|}
comment|/**          * Writes restore status to stream output          *          * @param out stream input          */
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeOptionalString
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|state
operator|.
name|value
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ShardRestoreStatus
name|status
init|=
operator|(
name|ShardRestoreStatus
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|nodeId
operator|!=
literal|null
condition|?
operator|!
name|nodeId
operator|.
name|equals
argument_list|(
name|status
operator|.
name|nodeId
argument_list|)
else|:
name|status
operator|.
name|nodeId
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|reason
operator|!=
literal|null
condition|?
operator|!
name|reason
operator|.
name|equals
argument_list|(
name|status
operator|.
name|reason
argument_list|)
else|:
name|status
operator|.
name|reason
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|state
operator|!=
name|status
operator|.
name|state
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|state
operator|!=
literal|null
condition|?
name|state
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|nodeId
operator|!=
literal|null
condition|?
name|nodeId
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|reason
operator|!=
literal|null
condition|?
name|reason
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
comment|/**      * Shard restore process state      */
DECL|enum|State
specifier|public
specifier|static
enum|enum
name|State
block|{
comment|/**          * Initializing state          */
DECL|enum constant|INIT
name|INIT
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
block|,
comment|/**          * Started state          */
DECL|enum constant|STARTED
name|STARTED
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
comment|/**          * Restore finished successfully          */
DECL|enum constant|SUCCESS
name|SUCCESS
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
block|,
comment|/**          * Restore failed          */
DECL|enum constant|FAILURE
name|FAILURE
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
block|;
DECL|field|value
specifier|private
name|byte
name|value
decl_stmt|;
comment|/**          * Constructs new state          *          * @param value state code          */
DECL|method|State
name|State
parameter_list|(
name|byte
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**          * Returns state code          *          * @return state code          */
DECL|method|value
specifier|public
name|byte
name|value
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**          * Returns true if restore process completed (either successfully or with failure)          *          * @return true if restore process completed          */
DECL|method|completed
specifier|public
name|boolean
name|completed
parameter_list|()
block|{
return|return
name|this
operator|==
name|SUCCESS
operator|||
name|this
operator|==
name|FAILURE
return|;
block|}
comment|/**          * Returns state corresponding to state code          *          * @param value stat code          * @return state          */
DECL|method|fromValue
specifier|public
specifier|static
name|State
name|fromValue
parameter_list|(
name|byte
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|value
condition|)
block|{
case|case
literal|0
case|:
return|return
name|INIT
return|;
case|case
literal|1
case|:
return|return
name|STARTED
return|;
case|case
literal|2
case|:
return|return
name|SUCCESS
return|;
case|case
literal|3
case|:
return|return
name|FAILURE
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No snapshot state for value ["
operator|+
name|value
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|RestoreInProgress
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Entry
index|[]
name|entries
init|=
operator|new
name|Entry
index|[
name|in
operator|.
name|readVInt
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SnapshotId
name|snapshotId
init|=
name|SnapshotId
operator|.
name|readSnapshotId
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|State
name|state
init|=
name|State
operator|.
name|fromValue
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|indices
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|indexBuilder
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|indices
condition|;
name|j
operator|++
control|)
block|{
name|indexBuilder
operator|.
name|add
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|ShardId
argument_list|,
name|ShardRestoreStatus
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
expr|<
name|ShardId
decl_stmt|,
name|ShardRestoreStatus
decl|>
name|builder
argument_list|()
decl_stmt|;
name|int
name|shards
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|shards
condition|;
name|j
operator|++
control|)
block|{
name|ShardId
name|shardId
init|=
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|ShardRestoreStatus
name|shardState
init|=
name|ShardRestoreStatus
operator|.
name|readShardRestoreStatus
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
name|shardState
argument_list|)
expr_stmt|;
block|}
name|entries
index|[
name|i
index|]
operator|=
operator|new
name|Entry
argument_list|(
name|snapshotId
argument_list|,
name|state
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|indexBuilder
argument_list|)
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RestoreInProgress
argument_list|(
name|entries
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|entry
operator|.
name|snapshotId
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|entry
operator|.
name|state
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|entry
operator|.
name|indices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|index
range|:
name|entry
operator|.
name|indices
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|entry
operator|.
name|shards
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ShardId
argument_list|,
name|ShardRestoreStatus
argument_list|>
name|shardEntry
range|:
name|entry
operator|.
name|shards
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|shardEntry
operator|.
name|getKey
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|shardEntry
operator|.
name|getValue
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"snapshots"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|toXContent
argument_list|(
name|entry
argument_list|,
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * Serializes single restore operation      *      * @param entry   restore operation metadata      * @param builder XContent builder      * @param params  serialization parameters      */
DECL|method|toXContent
specifier|public
name|void
name|toXContent
parameter_list|(
name|Entry
name|entry
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"snapshot"
argument_list|,
name|entry
operator|.
name|snapshotId
argument_list|()
operator|.
name|getSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"repository"
argument_list|,
name|entry
operator|.
name|snapshotId
argument_list|()
operator|.
name|getRepository
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"state"
argument_list|,
name|entry
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
literal|"indices"
argument_list|)
expr_stmt|;
block|{
for|for
control|(
name|String
name|index
range|:
name|entry
operator|.
name|indices
argument_list|()
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
literal|"shards"
argument_list|)
expr_stmt|;
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ShardId
argument_list|,
name|ShardRestoreStatus
argument_list|>
name|shardEntry
range|:
name|entry
operator|.
name|shards
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ShardId
name|shardId
init|=
name|shardEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ShardRestoreStatus
name|status
init|=
name|shardEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"shard"
argument_list|,
name|shardId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"state"
argument_list|,
name|status
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

