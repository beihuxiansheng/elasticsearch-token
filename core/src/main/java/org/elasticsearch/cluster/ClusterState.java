begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|IntObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexTemplateMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableAwareStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|PublishClusterStateAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Represents the current state of the cluster.  *<p>  * The cluster state object is immutable with an exception of the {@link RoutingNodes} structure, which is  * built on demand from the {@link RoutingTable}.  * The cluster state can be updated only on the master node. All updates are performed by on a  * single thread and controlled by the {@link ClusterService}. After every update the  * {@link Discovery#publish} method publishes new version of the cluster state to all other nodes in the  * cluster.  The actual publishing mechanism is delegated to the {@link Discovery#publish} method and depends on  * the type of discovery. In the Zen Discovery it is handled in the {@link PublishClusterStateAction#publish} method. The  * publishing mechanism can be overridden by other discovery.  *<p>  * The cluster state implements the {@link Diffable} interface in order to support publishing of cluster state  * differences instead of the entire state on each change. The publishing mechanism should only send differences  * to a node if this node was present in the previous version of the cluster state. If a node is not present was  * not present in the previous version of the cluster state, such node is unlikely to have the previous cluster  * state version and should be sent a complete version. In order to make sure that the differences are applied to  * correct version of the cluster state, each cluster state version update generates {@link #stateUUID} that uniquely  * identifies this version of the state. This uuid is verified by the {@link ClusterStateDiff#apply} method to  * makes sure that the correct diffs are applied. If uuids donât match, the {@link ClusterStateDiff#apply} method  * throws the {@link IncompatibleClusterStateVersionException}, which should cause the publishing mechanism to send  * a full version of the cluster state to the node on which this exception was thrown.  */
end_comment

begin_class
DECL|class|ClusterState
specifier|public
class|class
name|ClusterState
implements|implements
name|ToXContent
implements|,
name|Diffable
argument_list|<
name|ClusterState
argument_list|>
block|{
DECL|field|EMPTY_STATE
specifier|public
specifier|static
specifier|final
name|ClusterState
name|EMPTY_STATE
init|=
name|builder
argument_list|(
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|interface|Custom
specifier|public
interface|interface
name|Custom
extends|extends
name|NamedDiffable
argument_list|<
name|Custom
argument_list|>
extends|,
name|ToXContent
block|{     }
DECL|field|CUSTOM_VALUE_SERIALIZER
specifier|private
specifier|static
specifier|final
name|NamedDiffableValueSerializer
argument_list|<
name|Custom
argument_list|>
name|CUSTOM_VALUE_SERIALIZER
init|=
operator|new
name|NamedDiffableValueSerializer
argument_list|<>
argument_list|(
name|Custom
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|UNKNOWN_UUID
specifier|public
specifier|static
specifier|final
name|String
name|UNKNOWN_UUID
init|=
literal|"_na_"
decl_stmt|;
DECL|field|UNKNOWN_VERSION
specifier|public
specifier|static
specifier|final
name|long
name|UNKNOWN_VERSION
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|long
name|version
decl_stmt|;
DECL|field|stateUUID
specifier|private
specifier|final
name|String
name|stateUUID
decl_stmt|;
DECL|field|routingTable
specifier|private
specifier|final
name|RoutingTable
name|routingTable
decl_stmt|;
DECL|field|nodes
specifier|private
specifier|final
name|DiscoveryNodes
name|nodes
decl_stmt|;
DECL|field|metaData
specifier|private
specifier|final
name|MetaData
name|metaData
decl_stmt|;
DECL|field|blocks
specifier|private
specifier|final
name|ClusterBlocks
name|blocks
decl_stmt|;
DECL|field|customs
specifier|private
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
decl_stmt|;
DECL|field|clusterName
specifier|private
specifier|final
name|ClusterName
name|clusterName
decl_stmt|;
DECL|field|wasReadFromDiff
specifier|private
specifier|final
name|boolean
name|wasReadFromDiff
decl_stmt|;
comment|// built on demand
DECL|field|routingNodes
specifier|private
specifier|volatile
name|RoutingNodes
name|routingNodes
decl_stmt|;
DECL|method|ClusterState
specifier|public
name|ClusterState
parameter_list|(
name|long
name|version
parameter_list|,
name|String
name|stateUUID
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
name|this
argument_list|(
name|state
operator|.
name|clusterName
argument_list|,
name|version
argument_list|,
name|stateUUID
argument_list|,
name|state
operator|.
name|metaData
argument_list|()
argument_list|,
name|state
operator|.
name|routingTable
argument_list|()
argument_list|,
name|state
operator|.
name|nodes
argument_list|()
argument_list|,
name|state
operator|.
name|blocks
argument_list|()
argument_list|,
name|state
operator|.
name|customs
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|ClusterState
specifier|public
name|ClusterState
parameter_list|(
name|ClusterName
name|clusterName
parameter_list|,
name|long
name|version
parameter_list|,
name|String
name|stateUUID
parameter_list|,
name|MetaData
name|metaData
parameter_list|,
name|RoutingTable
name|routingTable
parameter_list|,
name|DiscoveryNodes
name|nodes
parameter_list|,
name|ClusterBlocks
name|blocks
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
parameter_list|,
name|boolean
name|wasReadFromDiff
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|stateUUID
operator|=
name|stateUUID
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
name|this
operator|.
name|metaData
operator|=
name|metaData
expr_stmt|;
name|this
operator|.
name|routingTable
operator|=
name|routingTable
expr_stmt|;
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
name|this
operator|.
name|blocks
operator|=
name|blocks
expr_stmt|;
name|this
operator|.
name|customs
operator|=
name|customs
expr_stmt|;
name|this
operator|.
name|wasReadFromDiff
operator|=
name|wasReadFromDiff
expr_stmt|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|getVersion
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
return|return
name|version
argument_list|()
return|;
block|}
comment|/**      * This stateUUID is automatically generated for for each version of cluster state. It is used to make sure that      * we are applying diffs to the right previous state.      */
DECL|method|stateUUID
specifier|public
name|String
name|stateUUID
parameter_list|()
block|{
return|return
name|this
operator|.
name|stateUUID
return|;
block|}
DECL|method|nodes
specifier|public
name|DiscoveryNodes
name|nodes
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodes
return|;
block|}
DECL|method|getNodes
specifier|public
name|DiscoveryNodes
name|getNodes
parameter_list|()
block|{
return|return
name|nodes
argument_list|()
return|;
block|}
DECL|method|metaData
specifier|public
name|MetaData
name|metaData
parameter_list|()
block|{
return|return
name|this
operator|.
name|metaData
return|;
block|}
DECL|method|getMetaData
specifier|public
name|MetaData
name|getMetaData
parameter_list|()
block|{
return|return
name|metaData
argument_list|()
return|;
block|}
DECL|method|routingTable
specifier|public
name|RoutingTable
name|routingTable
parameter_list|()
block|{
return|return
name|routingTable
return|;
block|}
DECL|method|getRoutingTable
specifier|public
name|RoutingTable
name|getRoutingTable
parameter_list|()
block|{
return|return
name|routingTable
argument_list|()
return|;
block|}
DECL|method|blocks
specifier|public
name|ClusterBlocks
name|blocks
parameter_list|()
block|{
return|return
name|this
operator|.
name|blocks
return|;
block|}
DECL|method|getBlocks
specifier|public
name|ClusterBlocks
name|getBlocks
parameter_list|()
block|{
return|return
name|blocks
return|;
block|}
DECL|method|customs
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
parameter_list|()
block|{
return|return
name|this
operator|.
name|customs
return|;
block|}
DECL|method|getCustoms
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|getCustoms
parameter_list|()
block|{
return|return
name|this
operator|.
name|customs
return|;
block|}
DECL|method|custom
specifier|public
parameter_list|<
name|T
extends|extends
name|Custom
parameter_list|>
name|T
name|custom
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|customs
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|getClusterName
specifier|public
name|ClusterName
name|getClusterName
parameter_list|()
block|{
return|return
name|this
operator|.
name|clusterName
return|;
block|}
comment|// Used for testing and logging to determine how this cluster state was send over the wire
DECL|method|wasReadFromDiff
specifier|public
name|boolean
name|wasReadFromDiff
parameter_list|()
block|{
return|return
name|wasReadFromDiff
return|;
block|}
comment|/**      * Returns a built (on demand) routing nodes view of the routing table.      */
DECL|method|getRoutingNodes
specifier|public
name|RoutingNodes
name|getRoutingNodes
parameter_list|()
block|{
if|if
condition|(
name|routingNodes
operator|!=
literal|null
condition|)
block|{
return|return
name|routingNodes
return|;
block|}
name|routingNodes
operator|=
operator|new
name|RoutingNodes
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|routingNodes
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"cluster uuid: "
argument_list|)
operator|.
name|append
argument_list|(
name|metaData
operator|.
name|clusterUUID
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"version: "
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"state uuid: "
argument_list|)
operator|.
name|append
argument_list|(
name|stateUUID
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"from_diff: "
argument_list|)
operator|.
name|append
argument_list|(
name|wasReadFromDiff
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"meta data version: "
argument_list|)
operator|.
name|append
argument_list|(
name|metaData
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|TAB
init|=
literal|"   "
decl_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|metaData
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|TAB
argument_list|)
operator|.
name|append
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|": v["
argument_list|)
operator|.
name|append
argument_list|(
name|indexMetaData
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|shard
init|=
literal|0
init|;
name|shard
operator|<
name|indexMetaData
operator|.
name|getNumberOfShards
argument_list|()
condition|;
name|shard
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|TAB
argument_list|)
operator|.
name|append
argument_list|(
name|TAB
argument_list|)
operator|.
name|append
argument_list|(
name|shard
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"p_term ["
argument_list|)
operator|.
name|append
argument_list|(
name|indexMetaData
operator|.
name|primaryTerm
argument_list|(
name|shard
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"], "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"isa_ids "
argument_list|)
operator|.
name|append
argument_list|(
name|indexMetaData
operator|.
name|inSyncAllocationIds
argument_list|(
name|shard
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|blocks
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|nodes
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|routingTable
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getRoutingNodes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|customs
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"customs:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|cursor
range|:
name|customs
control|)
block|{
specifier|final
name|String
name|type
init|=
name|cursor
operator|.
name|key
decl_stmt|;
specifier|final
name|Custom
name|custom
init|=
name|cursor
operator|.
name|value
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|TAB
argument_list|)
operator|.
name|append
argument_list|(
name|type
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|custom
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * a cluster state supersedes another state iff they are from the same master and the version this state is higher thant the other      * state.      *<p>      * In essence that means that all the changes from the other cluster state are also reflected by the current one      */
DECL|method|supersedes
specifier|public
name|boolean
name|supersedes
parameter_list|(
name|ClusterState
name|other
parameter_list|)
block|{
return|return
name|this
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNodeId
argument_list|()
operator|!=
literal|null
operator|&&
name|this
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNodeId
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|version
argument_list|()
operator|>
name|other
operator|.
name|version
argument_list|()
return|;
block|}
DECL|enum|Metric
specifier|public
enum|enum
name|Metric
block|{
DECL|enum constant|VERSION
name|VERSION
argument_list|(
literal|"version"
argument_list|)
block|,
DECL|enum constant|MASTER_NODE
name|MASTER_NODE
argument_list|(
literal|"master_node"
argument_list|)
block|,
DECL|enum constant|BLOCKS
name|BLOCKS
argument_list|(
literal|"blocks"
argument_list|)
block|,
DECL|enum constant|NODES
name|NODES
argument_list|(
literal|"nodes"
argument_list|)
block|,
DECL|enum constant|METADATA
name|METADATA
argument_list|(
literal|"metadata"
argument_list|)
block|,
DECL|enum constant|ROUTING_TABLE
name|ROUTING_TABLE
argument_list|(
literal|"routing_table"
argument_list|)
block|,
DECL|enum constant|ROUTING_NODES
name|ROUTING_NODES
argument_list|(
literal|"routing_nodes"
argument_list|)
block|,
DECL|enum constant|CUSTOMS
name|CUSTOMS
argument_list|(
literal|"customs"
argument_list|)
block|;
DECL|field|valueToEnum
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|valueToEnum
decl_stmt|;
static|static
block|{
name|valueToEnum
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Metric
name|metric
range|:
name|Metric
operator|.
name|values
argument_list|()
control|)
block|{
name|valueToEnum
operator|.
name|put
argument_list|(
name|metric
operator|.
name|value
argument_list|,
name|metric
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|value
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
DECL|method|Metric
name|Metric
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|parseString
specifier|public
specifier|static
name|EnumSet
argument_list|<
name|Metric
argument_list|>
name|parseString
parameter_list|(
name|String
name|param
parameter_list|,
name|boolean
name|ignoreUnknown
parameter_list|)
block|{
name|String
index|[]
name|metrics
init|=
name|Strings
operator|.
name|splitStringByCommaToArray
argument_list|(
name|param
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|Metric
argument_list|>
name|result
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Metric
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|metric
range|:
name|metrics
control|)
block|{
if|if
condition|(
literal|"_all"
operator|.
name|equals
argument_list|(
name|metric
argument_list|)
condition|)
block|{
name|result
operator|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Metric
operator|.
name|class
argument_list|)
expr_stmt|;
break|break;
block|}
name|Metric
name|m
init|=
name|valueToEnum
operator|.
name|get
argument_list|(
name|metric
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|ignoreUnknown
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown metric ["
operator|+
name|metric
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|EnumSet
argument_list|<
name|Metric
argument_list|>
name|metrics
init|=
name|Metric
operator|.
name|parseString
argument_list|(
name|params
operator|.
name|param
argument_list|(
literal|"metric"
argument_list|,
literal|"_all"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics
operator|.
name|contains
argument_list|(
name|Metric
operator|.
name|VERSION
argument_list|)
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"state_uuid"
argument_list|,
name|stateUUID
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metrics
operator|.
name|contains
argument_list|(
name|Metric
operator|.
name|MASTER_NODE
argument_list|)
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"master_node"
argument_list|,
name|nodes
argument_list|()
operator|.
name|getMasterNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metrics
operator|.
name|contains
argument_list|(
name|Metric
operator|.
name|BLOCKS
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"blocks"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|blocks
argument_list|()
operator|.
name|global
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"global"
argument_list|)
expr_stmt|;
for|for
control|(
name|ClusterBlock
name|block
range|:
name|blocks
argument_list|()
operator|.
name|global
argument_list|()
control|)
block|{
name|block
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|blocks
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"indices"
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|ClusterBlock
argument_list|>
argument_list|>
name|entry
range|:
name|blocks
argument_list|()
operator|.
name|indices
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|entry
operator|.
name|key
argument_list|)
expr_stmt|;
for|for
control|(
name|ClusterBlock
name|block
range|:
name|entry
operator|.
name|value
control|)
block|{
name|block
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
comment|// nodes
if|if
condition|(
name|metrics
operator|.
name|contains
argument_list|(
name|Metric
operator|.
name|NODES
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"nodes"
argument_list|)
expr_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodes
control|)
block|{
name|node
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
comment|// meta data
if|if
condition|(
name|metrics
operator|.
name|contains
argument_list|(
name|Metric
operator|.
name|METADATA
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"metadata"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"cluster_uuid"
argument_list|,
name|metaData
argument_list|()
operator|.
name|clusterUUID
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"templates"
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexTemplateMetaData
argument_list|>
name|cursor
range|:
name|metaData
argument_list|()
operator|.
name|templates
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|IndexTemplateMetaData
name|templateMetaData
init|=
name|cursor
operator|.
name|value
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|templateMetaData
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"index_patterns"
argument_list|,
name|templateMetaData
operator|.
name|patterns
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"order"
argument_list|,
name|templateMetaData
operator|.
name|order
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"settings"
argument_list|)
expr_stmt|;
name|Settings
name|settings
init|=
name|templateMetaData
operator|.
name|settings
argument_list|()
decl_stmt|;
name|settings
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"mappings"
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|CompressedXContent
argument_list|>
name|cursor1
range|:
name|templateMetaData
operator|.
name|mappings
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapping
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|cursor1
operator|.
name|value
operator|.
name|uncompressed
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|v2
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapping
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|mapping
operator|.
name|containsKey
argument_list|(
name|cursor1
operator|.
name|key
argument_list|)
condition|)
block|{
comment|// the type name is the root value, reduce it
name|mapping
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|mapping
operator|.
name|get
argument_list|(
name|cursor1
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|cursor1
operator|.
name|key
argument_list|)
expr_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"indices"
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|metaData
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"state"
argument_list|,
name|indexMetaData
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"settings"
argument_list|)
expr_stmt|;
name|Settings
name|settings
init|=
name|indexMetaData
operator|.
name|getSettings
argument_list|()
decl_stmt|;
name|settings
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"mappings"
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|cursor
range|:
name|indexMetaData
operator|.
name|getMappings
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapping
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|cursor
operator|.
name|value
operator|.
name|source
argument_list|()
operator|.
name|uncompressed
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|v2
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapping
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|mapping
operator|.
name|containsKey
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
condition|)
block|{
comment|// the type name is the root value, reduce it
name|mapping
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|mapping
operator|.
name|get
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
expr_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
literal|"aliases"
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|String
argument_list|>
name|cursor
range|:
name|indexMetaData
operator|.
name|getAliases
argument_list|()
operator|.
name|keys
argument_list|()
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|cursor
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|IndexMetaData
operator|.
name|KEY_PRIMARY_TERMS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|shard
init|=
literal|0
init|;
name|shard
operator|<
name|indexMetaData
operator|.
name|getNumberOfShards
argument_list|()
condition|;
name|shard
operator|++
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|shard
argument_list|)
argument_list|,
name|indexMetaData
operator|.
name|primaryTerm
argument_list|(
name|shard
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|IndexMetaData
operator|.
name|KEY_IN_SYNC_ALLOCATIONS
argument_list|)
expr_stmt|;
for|for
control|(
name|IntObjectCursor
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|cursor
range|:
name|indexMetaData
operator|.
name|getInSyncAllocationIds
argument_list|()
control|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|allocationId
range|:
name|cursor
operator|.
name|value
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|allocationId
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
comment|// index metadata
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|MetaData
operator|.
name|Custom
argument_list|>
name|cursor
range|:
name|metaData
operator|.
name|customs
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|value
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
comment|// routing table
if|if
condition|(
name|metrics
operator|.
name|contains
argument_list|(
name|Metric
operator|.
name|ROUTING_TABLE
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"routing_table"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"indices"
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexRoutingTable
name|indexRoutingTable
range|:
name|routingTable
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|indexRoutingTable
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"shards"
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexShardRoutingTable
name|indexShardRoutingTable
range|:
name|indexRoutingTable
control|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|indexShardRoutingTable
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|indexShardRoutingTable
control|)
block|{
name|shardRouting
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
comment|// routing nodes
if|if
condition|(
name|metrics
operator|.
name|contains
argument_list|(
name|Metric
operator|.
name|ROUTING_NODES
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"routing_nodes"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
literal|"unassigned"
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|getRoutingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
control|)
block|{
name|shardRouting
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"nodes"
argument_list|)
expr_stmt|;
for|for
control|(
name|RoutingNode
name|routingNode
range|:
name|getRoutingNodes
argument_list|()
control|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|routingNode
operator|.
name|nodeId
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|routingNode
operator|.
name|nodeId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|routingNode
control|)
block|{
name|shardRouting
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|metrics
operator|.
name|contains
argument_list|(
name|Metric
operator|.
name|CUSTOMS
argument_list|)
condition|)
block|{
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|cursor
range|:
name|customs
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|cursor
operator|.
name|key
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|value
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|(
name|ClusterName
name|clusterName
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|clusterName
argument_list|)
return|;
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|state
argument_list|)
return|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|clusterName
specifier|private
specifier|final
name|ClusterName
name|clusterName
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
init|=
literal|0
decl_stmt|;
DECL|field|uuid
specifier|private
name|String
name|uuid
init|=
name|UNKNOWN_UUID
decl_stmt|;
DECL|field|metaData
specifier|private
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|EMPTY_META_DATA
decl_stmt|;
DECL|field|routingTable
specifier|private
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|EMPTY_ROUTING_TABLE
decl_stmt|;
DECL|field|nodes
specifier|private
name|DiscoveryNodes
name|nodes
init|=
name|DiscoveryNodes
operator|.
name|EMPTY_NODES
decl_stmt|;
DECL|field|blocks
specifier|private
name|ClusterBlocks
name|blocks
init|=
name|ClusterBlocks
operator|.
name|EMPTY_CLUSTER_BLOCK
decl_stmt|;
DECL|field|customs
specifier|private
specifier|final
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
decl_stmt|;
DECL|field|fromDiff
specifier|private
name|boolean
name|fromDiff
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|this
operator|.
name|clusterName
operator|=
name|state
operator|.
name|clusterName
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|state
operator|.
name|version
argument_list|()
expr_stmt|;
name|this
operator|.
name|uuid
operator|=
name|state
operator|.
name|stateUUID
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodes
operator|=
name|state
operator|.
name|nodes
argument_list|()
expr_stmt|;
name|this
operator|.
name|routingTable
operator|=
name|state
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|this
operator|.
name|metaData
operator|=
name|state
operator|.
name|metaData
argument_list|()
expr_stmt|;
name|this
operator|.
name|blocks
operator|=
name|state
operator|.
name|blocks
argument_list|()
expr_stmt|;
name|this
operator|.
name|customs
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|state
operator|.
name|customs
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|fromDiff
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|ClusterName
name|clusterName
parameter_list|)
block|{
name|customs
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
block|}
DECL|method|nodes
specifier|public
name|Builder
name|nodes
parameter_list|(
name|DiscoveryNodes
operator|.
name|Builder
name|nodesBuilder
parameter_list|)
block|{
return|return
name|nodes
argument_list|(
name|nodesBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|nodes
specifier|public
name|Builder
name|nodes
parameter_list|(
name|DiscoveryNodes
name|nodes
parameter_list|)
block|{
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|nodes
specifier|public
name|DiscoveryNodes
name|nodes
parameter_list|()
block|{
return|return
name|nodes
return|;
block|}
DECL|method|routingTable
specifier|public
name|Builder
name|routingTable
parameter_list|(
name|RoutingTable
name|routingTable
parameter_list|)
block|{
name|this
operator|.
name|routingTable
operator|=
name|routingTable
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|metaData
specifier|public
name|Builder
name|metaData
parameter_list|(
name|MetaData
operator|.
name|Builder
name|metaDataBuilder
parameter_list|)
block|{
return|return
name|metaData
argument_list|(
name|metaDataBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|metaData
specifier|public
name|Builder
name|metaData
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
block|{
name|this
operator|.
name|metaData
operator|=
name|metaData
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|blocks
specifier|public
name|Builder
name|blocks
parameter_list|(
name|ClusterBlocks
operator|.
name|Builder
name|blocksBuilder
parameter_list|)
block|{
return|return
name|blocks
argument_list|(
name|blocksBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|blocks
specifier|public
name|Builder
name|blocks
parameter_list|(
name|ClusterBlocks
name|blocks
parameter_list|)
block|{
name|this
operator|.
name|blocks
operator|=
name|blocks
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|version
specifier|public
name|Builder
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|incrementVersion
specifier|public
name|Builder
name|incrementVersion
parameter_list|()
block|{
name|this
operator|.
name|version
operator|=
name|version
operator|+
literal|1
expr_stmt|;
name|this
operator|.
name|uuid
operator|=
name|UNKNOWN_UUID
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|stateUUID
specifier|public
name|Builder
name|stateUUID
parameter_list|(
name|String
name|uuid
parameter_list|)
block|{
name|this
operator|.
name|uuid
operator|=
name|uuid
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|putCustom
specifier|public
name|Builder
name|putCustom
parameter_list|(
name|String
name|type
parameter_list|,
name|Custom
name|custom
parameter_list|)
block|{
name|customs
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|custom
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|removeCustom
specifier|public
name|Builder
name|removeCustom
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|customs
operator|.
name|remove
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|customs
specifier|public
name|Builder
name|customs
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
name|customs
parameter_list|)
block|{
name|this
operator|.
name|customs
operator|.
name|putAll
argument_list|(
name|customs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|fromDiff
specifier|public
name|Builder
name|fromDiff
parameter_list|(
name|boolean
name|fromDiff
parameter_list|)
block|{
name|this
operator|.
name|fromDiff
operator|=
name|fromDiff
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build
specifier|public
name|ClusterState
name|build
parameter_list|()
block|{
if|if
condition|(
name|UNKNOWN_UUID
operator|.
name|equals
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
name|uuid
operator|=
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|ClusterState
argument_list|(
name|clusterName
argument_list|,
name|version
argument_list|,
name|uuid
argument_list|,
name|metaData
argument_list|,
name|routingTable
argument_list|,
name|nodes
argument_list|,
name|blocks
argument_list|,
name|customs
operator|.
name|build
argument_list|()
argument_list|,
name|fromDiff
argument_list|)
return|;
block|}
DECL|method|toBytes
specifier|public
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|ClusterState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesStreamOutput
name|os
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|state
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
return|return
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|os
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
comment|/**          * @param data      input bytes          * @param localNode used to set the local node in the cluster state.          */
DECL|method|fromBytes
specifier|public
specifier|static
name|ClusterState
name|fromBytes
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|DiscoveryNode
name|localNode
parameter_list|,
name|NamedWriteableRegistry
name|registry
parameter_list|)
throws|throws
name|IOException
block|{
name|StreamInput
name|in
init|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|data
argument_list|)
argument_list|,
name|registry
argument_list|)
decl_stmt|;
return|return
name|readFrom
argument_list|(
name|in
argument_list|,
name|localNode
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|diff
specifier|public
name|Diff
argument_list|<
name|ClusterState
argument_list|>
name|diff
parameter_list|(
name|ClusterState
name|previousState
parameter_list|)
block|{
return|return
operator|new
name|ClusterStateDiff
argument_list|(
name|previousState
argument_list|,
name|this
argument_list|)
return|;
block|}
DECL|method|readDiffFrom
specifier|public
specifier|static
name|Diff
argument_list|<
name|ClusterState
argument_list|>
name|readDiffFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|DiscoveryNode
name|localNode
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ClusterStateDiff
argument_list|(
name|in
argument_list|,
name|localNode
argument_list|)
return|;
block|}
DECL|method|readFrom
specifier|public
specifier|static
name|ClusterState
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|DiscoveryNode
name|localNode
parameter_list|)
throws|throws
name|IOException
block|{
name|ClusterName
name|clusterName
init|=
operator|new
name|ClusterName
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|clusterName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|builder
operator|.
name|uuid
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|builder
operator|.
name|metaData
operator|=
name|MetaData
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|builder
operator|.
name|routingTable
operator|=
name|RoutingTable
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nodes
operator|=
name|DiscoveryNodes
operator|.
name|readFrom
argument_list|(
name|in
argument_list|,
name|localNode
argument_list|)
expr_stmt|;
name|builder
operator|.
name|blocks
operator|=
operator|new
name|ClusterBlocks
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|customSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|customSize
condition|;
name|i
operator|++
control|)
block|{
name|Custom
name|customIndexMetaData
init|=
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|Custom
operator|.
name|class
argument_list|)
decl_stmt|;
name|builder
operator|.
name|putCustom
argument_list|(
name|customIndexMetaData
operator|.
name|getWriteableName
argument_list|()
argument_list|,
name|customIndexMetaData
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|clusterName
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|stateUUID
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|routingTable
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|blocks
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// filter out custom states not supported by the other node
name|int
name|numberOfCustoms
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|Custom
argument_list|>
name|cursor
range|:
name|customs
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|cursor
operator|.
name|value
operator|.
name|getMinimalSupportedVersion
argument_list|()
argument_list|)
condition|)
block|{
name|numberOfCustoms
operator|++
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|numberOfCustoms
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|Custom
argument_list|>
name|cursor
range|:
name|customs
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|cursor
operator|.
name|value
operator|.
name|getMinimalSupportedVersion
argument_list|()
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|cursor
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ClusterStateDiff
specifier|private
specifier|static
class|class
name|ClusterStateDiff
implements|implements
name|Diff
argument_list|<
name|ClusterState
argument_list|>
block|{
DECL|field|toVersion
specifier|private
specifier|final
name|long
name|toVersion
decl_stmt|;
DECL|field|fromUuid
specifier|private
specifier|final
name|String
name|fromUuid
decl_stmt|;
DECL|field|toUuid
specifier|private
specifier|final
name|String
name|toUuid
decl_stmt|;
DECL|field|clusterName
specifier|private
specifier|final
name|ClusterName
name|clusterName
decl_stmt|;
DECL|field|routingTable
specifier|private
specifier|final
name|Diff
argument_list|<
name|RoutingTable
argument_list|>
name|routingTable
decl_stmt|;
DECL|field|nodes
specifier|private
specifier|final
name|Diff
argument_list|<
name|DiscoveryNodes
argument_list|>
name|nodes
decl_stmt|;
DECL|field|metaData
specifier|private
specifier|final
name|Diff
argument_list|<
name|MetaData
argument_list|>
name|metaData
decl_stmt|;
DECL|field|blocks
specifier|private
specifier|final
name|Diff
argument_list|<
name|ClusterBlocks
argument_list|>
name|blocks
decl_stmt|;
DECL|field|customs
specifier|private
specifier|final
name|Diff
argument_list|<
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Custom
argument_list|>
argument_list|>
name|customs
decl_stmt|;
DECL|method|ClusterStateDiff
name|ClusterStateDiff
parameter_list|(
name|ClusterState
name|before
parameter_list|,
name|ClusterState
name|after
parameter_list|)
block|{
name|fromUuid
operator|=
name|before
operator|.
name|stateUUID
expr_stmt|;
name|toUuid
operator|=
name|after
operator|.
name|stateUUID
expr_stmt|;
name|toVersion
operator|=
name|after
operator|.
name|version
expr_stmt|;
name|clusterName
operator|=
name|after
operator|.
name|clusterName
expr_stmt|;
name|routingTable
operator|=
name|after
operator|.
name|routingTable
operator|.
name|diff
argument_list|(
name|before
operator|.
name|routingTable
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|after
operator|.
name|nodes
operator|.
name|diff
argument_list|(
name|before
operator|.
name|nodes
argument_list|)
expr_stmt|;
name|metaData
operator|=
name|after
operator|.
name|metaData
operator|.
name|diff
argument_list|(
name|before
operator|.
name|metaData
argument_list|)
expr_stmt|;
name|blocks
operator|=
name|after
operator|.
name|blocks
operator|.
name|diff
argument_list|(
name|before
operator|.
name|blocks
argument_list|)
expr_stmt|;
name|customs
operator|=
name|DiffableUtils
operator|.
name|diff
argument_list|(
name|before
operator|.
name|customs
argument_list|,
name|after
operator|.
name|customs
argument_list|,
name|DiffableUtils
operator|.
name|getStringKeySerializer
argument_list|()
argument_list|,
name|CUSTOM_VALUE_SERIALIZER
argument_list|)
expr_stmt|;
block|}
DECL|method|ClusterStateDiff
name|ClusterStateDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|DiscoveryNode
name|localNode
parameter_list|)
throws|throws
name|IOException
block|{
name|clusterName
operator|=
operator|new
name|ClusterName
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|fromUuid
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|toUuid
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|toVersion
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|routingTable
operator|=
name|RoutingTable
operator|.
name|readDiffFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|DiscoveryNodes
operator|.
name|readDiffFrom
argument_list|(
name|in
argument_list|,
name|localNode
argument_list|)
expr_stmt|;
name|metaData
operator|=
name|MetaData
operator|.
name|readDiffFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|blocks
operator|=
name|ClusterBlocks
operator|.
name|readDiffFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|customs
operator|=
name|DiffableUtils
operator|.
name|readImmutableOpenMapDiff
argument_list|(
name|in
argument_list|,
name|DiffableUtils
operator|.
name|getStringKeySerializer
argument_list|()
argument_list|,
name|CUSTOM_VALUE_SERIALIZER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|clusterName
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|fromUuid
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|toUuid
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|toVersion
argument_list|)
expr_stmt|;
name|routingTable
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|blocks
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|customs
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|ClusterState
name|apply
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|clusterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|toUuid
operator|.
name|equals
argument_list|(
name|state
operator|.
name|stateUUID
argument_list|)
condition|)
block|{
comment|// no need to read the rest - cluster state didn't change
return|return
name|state
return|;
block|}
if|if
condition|(
name|fromUuid
operator|.
name|equals
argument_list|(
name|state
operator|.
name|stateUUID
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IncompatibleClusterStateVersionException
argument_list|(
name|state
operator|.
name|version
argument_list|,
name|state
operator|.
name|stateUUID
argument_list|,
name|toVersion
argument_list|,
name|fromUuid
argument_list|)
throw|;
block|}
name|builder
operator|.
name|stateUUID
argument_list|(
name|toUuid
argument_list|)
expr_stmt|;
name|builder
operator|.
name|version
argument_list|(
name|toVersion
argument_list|)
expr_stmt|;
name|builder
operator|.
name|routingTable
argument_list|(
name|routingTable
operator|.
name|apply
argument_list|(
name|state
operator|.
name|routingTable
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nodes
argument_list|(
name|nodes
operator|.
name|apply
argument_list|(
name|state
operator|.
name|nodes
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|metaData
argument_list|(
name|metaData
operator|.
name|apply
argument_list|(
name|state
operator|.
name|metaData
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|blocks
argument_list|(
name|blocks
operator|.
name|apply
argument_list|(
name|state
operator|.
name|blocks
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|customs
argument_list|(
name|customs
operator|.
name|apply
argument_list|(
name|state
operator|.
name|customs
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|fromDiff
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

