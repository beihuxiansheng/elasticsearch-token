begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * ClusterInfo is an object representing a map of nodes to {@link DiskUsage}  * and a map of shard ids to shard sizes, see  *<code>InternalClusterInfoService.shardIdentifierFromRouting(String)</code>  * for the key used in the shardSizes map  */
end_comment

begin_class
DECL|class|ClusterInfo
specifier|public
specifier|final
class|class
name|ClusterInfo
block|{
DECL|field|usages
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usages
decl_stmt|;
DECL|field|shardSizes
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|shardSizes
decl_stmt|;
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|ClusterInfo
name|EMPTY
init|=
operator|new
name|ClusterInfo
argument_list|()
decl_stmt|;
DECL|method|ClusterInfo
specifier|private
name|ClusterInfo
parameter_list|()
block|{
name|this
operator|.
name|usages
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|shardSizes
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
DECL|method|ClusterInfo
specifier|public
name|ClusterInfo
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usages
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|shardSizes
parameter_list|)
block|{
name|this
operator|.
name|usages
operator|=
name|usages
expr_stmt|;
name|this
operator|.
name|shardSizes
operator|=
name|shardSizes
expr_stmt|;
block|}
DECL|method|getNodeDiskUsages
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|getNodeDiskUsages
parameter_list|()
block|{
return|return
name|this
operator|.
name|usages
return|;
block|}
DECL|method|getShardSize
specifier|public
name|Long
name|getShardSize
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|)
block|{
return|return
name|shardSizes
operator|.
name|get
argument_list|(
name|shardIdentifierFromRouting
argument_list|(
name|shardRouting
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Method that incorporates the ShardId for the shard into a string that      * includes a 'p' or 'r' depending on whether the shard is a primary.      */
DECL|method|shardIdentifierFromRouting
specifier|static
name|String
name|shardIdentifierFromRouting
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|)
block|{
return|return
name|shardRouting
operator|.
name|shardId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"["
operator|+
operator|(
name|shardRouting
operator|.
name|primary
argument_list|()
condition|?
literal|"p"
else|:
literal|"r"
operator|)
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

