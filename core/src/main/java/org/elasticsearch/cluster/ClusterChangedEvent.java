begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexGraveyard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * An event received by the local node, signaling that the cluster state has changed.  */
end_comment

begin_class
DECL|class|ClusterChangedEvent
specifier|public
class|class
name|ClusterChangedEvent
block|{
DECL|field|source
specifier|private
specifier|final
name|String
name|source
decl_stmt|;
DECL|field|previousState
specifier|private
specifier|final
name|ClusterState
name|previousState
decl_stmt|;
DECL|field|state
specifier|private
specifier|final
name|ClusterState
name|state
decl_stmt|;
DECL|field|nodesDelta
specifier|private
specifier|final
name|DiscoveryNodes
operator|.
name|Delta
name|nodesDelta
decl_stmt|;
DECL|method|ClusterChangedEvent
specifier|public
name|ClusterChangedEvent
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|state
parameter_list|,
name|ClusterState
name|previousState
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|source
argument_list|,
literal|"source must not be null"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|state
argument_list|,
literal|"state must not be null"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|previousState
argument_list|,
literal|"previousState must not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|previousState
operator|=
name|previousState
expr_stmt|;
name|this
operator|.
name|nodesDelta
operator|=
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|delta
argument_list|(
name|previousState
operator|.
name|nodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * The source that caused this cluster event to be raised.      */
DECL|method|source
specifier|public
name|String
name|source
parameter_list|()
block|{
return|return
name|this
operator|.
name|source
return|;
block|}
comment|/**      * The new cluster state that caused this change event.      */
DECL|method|state
specifier|public
name|ClusterState
name|state
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
return|;
block|}
comment|/**      * The previous cluster state for this change event.      */
DECL|method|previousState
specifier|public
name|ClusterState
name|previousState
parameter_list|()
block|{
return|return
name|this
operator|.
name|previousState
return|;
block|}
comment|/**      * Returns<code>true</code> iff the routing tables (for all indices) have      * changed between the previous cluster state and the current cluster state.      * Note that this is an object reference equality test, not an equals test.      */
DECL|method|routingTableChanged
specifier|public
name|boolean
name|routingTableChanged
parameter_list|()
block|{
return|return
name|state
operator|.
name|routingTable
argument_list|()
operator|!=
name|previousState
operator|.
name|routingTable
argument_list|()
return|;
block|}
comment|/**      * Returns<code>true</code> iff the routing table has changed for the given index.      * Note that this is an object reference equality test, not an equals test.      */
DECL|method|indexRoutingTableChanged
specifier|public
name|boolean
name|indexRoutingTableChanged
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|index
argument_list|,
literal|"index must not be null"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
operator|&&
operator|!
name|previousState
operator|.
name|routingTable
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
operator|&&
name|previousState
operator|.
name|routingTable
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
condition|)
block|{
return|return
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|!=
name|previousState
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Returns the indices created in this event      */
DECL|method|indicesCreated
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|indicesCreated
parameter_list|()
block|{
if|if
condition|(
operator|!
name|metaDataChanged
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|created
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|String
argument_list|>
name|cursor
range|:
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|keys
argument_list|()
control|)
block|{
name|String
name|index
init|=
name|cursor
operator|.
name|value
decl_stmt|;
if|if
condition|(
operator|!
name|previousState
operator|.
name|metaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
condition|)
block|{
if|if
condition|(
name|created
operator|==
literal|null
condition|)
block|{
name|created
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|created
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|created
operator|==
literal|null
condition|?
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
else|:
name|created
return|;
block|}
comment|/**      * Returns the indices deleted in this event      */
DECL|method|indicesDeleted
specifier|public
name|List
argument_list|<
name|Index
argument_list|>
name|indicesDeleted
parameter_list|()
block|{
if|if
condition|(
name|previousState
operator|.
name|blocks
argument_list|()
operator|.
name|hasGlobalBlock
argument_list|(
name|GatewayService
operator|.
name|STATE_NOT_RECOVERED_BLOCK
argument_list|)
condition|)
block|{
comment|// working off of a non-initialized previous state, so use the tombstones for index deletions
return|return
name|indicesDeletedFromTombstones
argument_list|()
return|;
block|}
else|else
block|{
comment|// examine the diffs in index metadata between the previous and new cluster states to get the deleted indices
return|return
name|indicesDeletedFromClusterState
argument_list|()
return|;
block|}
block|}
comment|/**      * Returns<code>true</code> iff the metadata for the cluster has changed between      * the previous cluster state and the new cluster state. Note that this is an object      * reference equality test, not an equals test.      */
DECL|method|metaDataChanged
specifier|public
name|boolean
name|metaDataChanged
parameter_list|()
block|{
return|return
name|state
operator|.
name|metaData
argument_list|()
operator|!=
name|previousState
operator|.
name|metaData
argument_list|()
return|;
block|}
comment|/**      * Returns<code>true</code> iff the {@link IndexMetaData} for a given index      * has changed between the previous cluster state and the new cluster state.      * Note that this is an object reference equality test, not an equals test.      */
DECL|method|indexMetaDataChanged
specifier|public
specifier|static
name|boolean
name|indexMetaDataChanged
parameter_list|(
name|IndexMetaData
name|metaData1
parameter_list|,
name|IndexMetaData
name|metaData2
parameter_list|)
block|{
assert|assert
name|metaData1
operator|!=
literal|null
operator|&&
name|metaData2
operator|!=
literal|null
assert|;
comment|// no need to check on version, since disco modules will make sure to use the
comment|// same instance if its a version match
return|return
name|metaData1
operator|!=
name|metaData2
return|;
block|}
comment|/**      * Returns<code>true</code> iff the cluster level blocks have changed between cluster states.      * Note that this is an object reference equality test, not an equals test.      */
DECL|method|blocksChanged
specifier|public
name|boolean
name|blocksChanged
parameter_list|()
block|{
return|return
name|state
operator|.
name|blocks
argument_list|()
operator|!=
name|previousState
operator|.
name|blocks
argument_list|()
return|;
block|}
comment|/**      * Returns<code>true</code> iff the local node is the mater node of the cluster.      */
DECL|method|localNodeMaster
specifier|public
name|boolean
name|localNodeMaster
parameter_list|()
block|{
return|return
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|isLocalNodeElectedMaster
argument_list|()
return|;
block|}
comment|/**      * Returns the {@link org.elasticsearch.cluster.node.DiscoveryNodes.Delta} between      * the previous cluster state and the new cluster state.      */
DECL|method|nodesDelta
specifier|public
name|DiscoveryNodes
operator|.
name|Delta
name|nodesDelta
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodesDelta
return|;
block|}
comment|/**      * Returns<code>true</code> iff nodes have been removed from the cluster since the last cluster state.      */
DECL|method|nodesRemoved
specifier|public
name|boolean
name|nodesRemoved
parameter_list|()
block|{
return|return
name|nodesDelta
operator|.
name|removed
argument_list|()
return|;
block|}
comment|/**      * Returns<code>true</code> iff nodes have been added from the cluster since the last cluster state.      */
DECL|method|nodesAdded
specifier|public
name|boolean
name|nodesAdded
parameter_list|()
block|{
return|return
name|nodesDelta
operator|.
name|added
argument_list|()
return|;
block|}
comment|/**      * Returns<code>true</code> iff nodes have been changed (added or removed) from the cluster since the last cluster state.      */
DECL|method|nodesChanged
specifier|public
name|boolean
name|nodesChanged
parameter_list|()
block|{
return|return
name|nodesRemoved
argument_list|()
operator|||
name|nodesAdded
argument_list|()
return|;
block|}
comment|// Determines whether or not the current cluster state represents an entirely
comment|// different cluster from the previous cluster state, which will happen when a
comment|// master node is elected that has never been part of the cluster before.
DECL|method|isNewCluster
specifier|private
name|boolean
name|isNewCluster
parameter_list|()
block|{
specifier|final
name|String
name|prevClusterUUID
init|=
name|previousState
operator|.
name|metaData
argument_list|()
operator|.
name|clusterUUID
argument_list|()
decl_stmt|;
specifier|final
name|String
name|currClusterUUID
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|clusterUUID
argument_list|()
decl_stmt|;
return|return
name|prevClusterUUID
operator|.
name|equals
argument_list|(
name|currClusterUUID
argument_list|)
operator|==
literal|false
return|;
block|}
comment|// Get the deleted indices by comparing the index metadatas in the previous and new cluster states.
comment|// If an index exists in the previous cluster state, but not in the new cluster state, it must have been deleted.
DECL|method|indicesDeletedFromClusterState
specifier|private
name|List
argument_list|<
name|Index
argument_list|>
name|indicesDeletedFromClusterState
parameter_list|()
block|{
comment|// If the new cluster state has a new cluster UUID, the likely scenario is that a node was elected
comment|// master that has had its data directory wiped out, in which case we don't want to delete the indices and lose data;
comment|// rather we want to import them as dangling indices instead.  So we check here if the cluster UUID differs from the previous
comment|// cluster UUID, in which case, we don't want to delete indices that the master erroneously believes shouldn't exist.
comment|// See test DiscoveryWithServiceDisruptionsIT.testIndicesDeleted()
comment|// See discussion on https://github.com/elastic/elasticsearch/pull/9952 and
comment|// https://github.com/elastic/elasticsearch/issues/11665
if|if
condition|(
name|metaDataChanged
argument_list|()
operator|==
literal|false
operator|||
name|isNewCluster
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Index
argument_list|>
name|deleted
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexMetaData
argument_list|>
name|cursor
range|:
name|previousState
operator|.
name|metaData
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|IndexMetaData
name|index
init|=
name|cursor
operator|.
name|value
decl_stmt|;
name|IndexMetaData
name|current
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|deleted
operator|==
literal|null
condition|)
block|{
name|deleted
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|deleted
operator|.
name|add
argument_list|(
name|index
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|deleted
operator|==
literal|null
condition|?
name|Collections
operator|.
expr|<
name|Index
operator|>
name|emptyList
argument_list|()
else|:
name|deleted
return|;
block|}
DECL|method|indicesDeletedFromTombstones
specifier|private
name|List
argument_list|<
name|Index
argument_list|>
name|indicesDeletedFromTombstones
parameter_list|()
block|{
comment|// We look at the full tombstones list to see which indices need to be deleted.  In the case of
comment|// a valid previous cluster state, indicesDeletedFromClusterState() will be used to get the deleted
comment|// list, so a diff doesn't make sense here.  When a node (re)joins the cluster, its possible for it
comment|// to re-process the same deletes or process deletes about indices it never knew about.  This is not
comment|// an issue because there are safeguards in place in the delete store operation in case the index
comment|// folder doesn't exist on the file system.
name|List
argument_list|<
name|IndexGraveyard
operator|.
name|Tombstone
argument_list|>
name|tombstones
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|indexGraveyard
argument_list|()
operator|.
name|getTombstones
argument_list|()
decl_stmt|;
return|return
name|tombstones
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|IndexGraveyard
operator|.
name|Tombstone
operator|::
name|getIndex
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

