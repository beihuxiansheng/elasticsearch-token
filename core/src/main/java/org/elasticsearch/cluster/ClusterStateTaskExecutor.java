begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_interface
DECL|interface|ClusterStateTaskExecutor
specifier|public
interface|interface
name|ClusterStateTaskExecutor
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**      * Update the cluster state based on the current state and the given tasks. Return the *same instance* if no state      * should be changed.      */
DECL|method|execute
name|Result
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * indicates whether this task should only run if current node is master      */
DECL|method|runOnlyOnMaster
specifier|default
name|boolean
name|runOnlyOnMaster
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|class|Result
class|class
name|Result
block|{
DECL|field|resultingState
specifier|final
specifier|public
name|ClusterState
name|resultingState
decl_stmt|;
DECL|field|failures
specifier|final
specifier|public
name|List
argument_list|<
name|Throwable
argument_list|>
name|failures
decl_stmt|;
DECL|method|Result
specifier|public
name|Result
parameter_list|(
name|ClusterState
name|resultingState
parameter_list|,
name|int
name|numberOfTasks
parameter_list|)
block|{
name|this
operator|.
name|resultingState
operator|=
name|resultingState
expr_stmt|;
name|failures
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Throwable
index|[
name|numberOfTasks
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|Result
specifier|public
name|Result
parameter_list|(
name|ClusterState
name|resultingState
parameter_list|,
name|List
argument_list|<
name|Throwable
argument_list|>
name|failures
parameter_list|)
block|{
name|this
operator|.
name|resultingState
operator|=
name|resultingState
expr_stmt|;
name|this
operator|.
name|failures
operator|=
name|failures
expr_stmt|;
block|}
block|}
block|}
end_interface

end_unit

