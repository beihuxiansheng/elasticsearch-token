begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_class
DECL|class|DiffableUtils
specifier|public
specifier|final
class|class
name|DiffableUtils
block|{
DECL|method|DiffableUtils
specifier|private
name|DiffableUtils
parameter_list|()
block|{     }
comment|/**      * Calculates diff between two ImmutableOpenMaps of Diffable objects      */
DECL|method|diff
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Diffable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|Diff
argument_list|<
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|>
name|diff
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|before
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|after
parameter_list|)
block|{
assert|assert
name|after
operator|!=
literal|null
operator|&&
name|before
operator|!=
literal|null
assert|;
return|return
operator|new
name|ImmutableOpenMapDiff
argument_list|<>
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
return|;
block|}
comment|/**      * Calculates diff between two ImmutableMaps of Diffable objects      */
DECL|method|diff
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Diffable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|Diff
argument_list|<
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|>
name|diff
parameter_list|(
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|before
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|after
parameter_list|)
block|{
assert|assert
name|after
operator|!=
literal|null
operator|&&
name|before
operator|!=
literal|null
assert|;
return|return
operator|new
name|ImmutableMapDiff
argument_list|<>
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
return|;
block|}
comment|/**      * Loads an object that represents difference between two ImmutableOpenMaps      */
DECL|method|readImmutableOpenMapDiff
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Diffable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|Diff
argument_list|<
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|>
name|readImmutableOpenMapDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|KeyedReader
argument_list|<
name|T
argument_list|>
name|keyedReader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ImmutableOpenMapDiff
argument_list|<>
argument_list|(
name|in
argument_list|,
name|keyedReader
argument_list|)
return|;
block|}
comment|/**      * Loads an object that represents difference between two ImmutableMaps      */
DECL|method|readImmutableMapDiff
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Diffable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|Diff
argument_list|<
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|>
name|readImmutableMapDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|KeyedReader
argument_list|<
name|T
argument_list|>
name|keyedReader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ImmutableMapDiff
argument_list|<>
argument_list|(
name|in
argument_list|,
name|keyedReader
argument_list|)
return|;
block|}
comment|/**      * Loads an object that represents difference between two ImmutableOpenMaps      */
DECL|method|readImmutableOpenMapDiff
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Diffable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|Diff
argument_list|<
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|>
name|readImmutableOpenMapDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|T
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ImmutableOpenMapDiff
argument_list|<>
argument_list|(
name|in
argument_list|,
operator|new
name|PrototypeReader
argument_list|<>
argument_list|(
name|proto
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Loads an object that represents difference between two ImmutableMaps      */
DECL|method|readImmutableMapDiff
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Diffable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|Diff
argument_list|<
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|>
name|readImmutableMapDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|T
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ImmutableMapDiff
argument_list|<>
argument_list|(
name|in
argument_list|,
operator|new
name|PrototypeReader
argument_list|<>
argument_list|(
name|proto
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * A reader that can deserialize an object. The reader can select the deserialization type based on the key. It's      * used in custom metadata deserialization.      */
DECL|interface|KeyedReader
specifier|public
interface|interface
name|KeyedReader
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**          * reads an object of the type T from the stream input          */
DECL|method|readFrom
name|T
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**          * reads an object that respresents differences between two objects with the type T from the stream input          */
DECL|method|readDiffFrom
name|Diff
argument_list|<
name|T
argument_list|>
name|readDiffFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**      * Implementation of the KeyedReader that is using a prototype object for reading operations      *      * Note: this implementation is ignoring the key.      */
DECL|class|PrototypeReader
specifier|public
specifier|static
class|class
name|PrototypeReader
parameter_list|<
name|T
extends|extends
name|Diffable
parameter_list|<
name|T
parameter_list|>
parameter_list|>
implements|implements
name|KeyedReader
argument_list|<
name|T
argument_list|>
block|{
DECL|field|proto
specifier|private
name|T
name|proto
decl_stmt|;
DECL|method|PrototypeReader
specifier|public
name|PrototypeReader
parameter_list|(
name|T
name|proto
parameter_list|)
block|{
name|this
operator|.
name|proto
operator|=
name|proto
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|T
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|proto
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readDiffFrom
specifier|public
name|Diff
argument_list|<
name|T
argument_list|>
name|readDiffFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|proto
operator|.
name|readDiffFrom
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
comment|/**      * Represents differences between two ImmutableMaps of diffable objects      *      * @param<T> the diffable object      */
DECL|class|ImmutableMapDiff
specifier|private
specifier|static
class|class
name|ImmutableMapDiff
parameter_list|<
name|T
extends|extends
name|Diffable
parameter_list|<
name|T
parameter_list|>
parameter_list|>
extends|extends
name|MapDiff
argument_list|<
name|T
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|>
block|{
DECL|method|ImmutableMapDiff
specifier|protected
name|ImmutableMapDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|KeyedReader
argument_list|<
name|T
argument_list|>
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
DECL|method|ImmutableMapDiff
specifier|public
name|ImmutableMapDiff
parameter_list|(
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|before
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|after
parameter_list|)
block|{
assert|assert
name|after
operator|!=
literal|null
operator|&&
name|before
operator|!=
literal|null
assert|;
for|for
control|(
name|String
name|key
range|:
name|before
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|after
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|deletes
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ImmutableMap
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|partIter
range|:
name|after
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|T
name|beforePart
init|=
name|before
operator|.
name|get
argument_list|(
name|partIter
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|beforePart
operator|==
literal|null
condition|)
block|{
name|adds
operator|.
name|put
argument_list|(
name|partIter
operator|.
name|getKey
argument_list|()
argument_list|,
name|partIter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|partIter
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|beforePart
argument_list|)
operator|==
literal|false
condition|)
block|{
name|diffs
operator|.
name|put
argument_list|(
name|partIter
operator|.
name|getKey
argument_list|()
argument_list|,
name|partIter
operator|.
name|getValue
argument_list|()
operator|.
name|diff
argument_list|(
name|beforePart
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|apply
parameter_list|(
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|map
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|builder
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|part
range|:
name|deletes
control|)
block|{
name|builder
operator|.
name|remove
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Diff
argument_list|<
name|T
argument_list|>
argument_list|>
name|diff
range|:
name|diffs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|diff
operator|.
name|getKey
argument_list|()
argument_list|,
name|diff
operator|.
name|getValue
argument_list|()
operator|.
name|apply
argument_list|(
name|builder
operator|.
name|get
argument_list|(
name|diff
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|additon
range|:
name|adds
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|additon
operator|.
name|getKey
argument_list|()
argument_list|,
name|additon
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|builder
argument_list|)
return|;
block|}
block|}
comment|/**      * Represents differences between two ImmutableOpenMap of diffable objects      *      * @param<T> the diffable object      */
DECL|class|ImmutableOpenMapDiff
specifier|private
specifier|static
class|class
name|ImmutableOpenMapDiff
parameter_list|<
name|T
extends|extends
name|Diffable
parameter_list|<
name|T
parameter_list|>
parameter_list|>
extends|extends
name|MapDiff
argument_list|<
name|T
argument_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|>
block|{
DECL|method|ImmutableOpenMapDiff
specifier|protected
name|ImmutableOpenMapDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|KeyedReader
argument_list|<
name|T
argument_list|>
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
DECL|method|ImmutableOpenMapDiff
specifier|public
name|ImmutableOpenMapDiff
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|before
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|after
parameter_list|)
block|{
assert|assert
name|after
operator|!=
literal|null
operator|&&
name|before
operator|!=
literal|null
assert|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|String
argument_list|>
name|key
range|:
name|before
operator|.
name|keys
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|after
operator|.
name|containsKey
argument_list|(
name|key
operator|.
name|value
argument_list|)
condition|)
block|{
name|deletes
operator|.
name|add
argument_list|(
name|key
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|partIter
range|:
name|after
control|)
block|{
name|T
name|beforePart
init|=
name|before
operator|.
name|get
argument_list|(
name|partIter
operator|.
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|beforePart
operator|==
literal|null
condition|)
block|{
name|adds
operator|.
name|put
argument_list|(
name|partIter
operator|.
name|key
argument_list|,
name|partIter
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|partIter
operator|.
name|value
operator|.
name|equals
argument_list|(
name|beforePart
argument_list|)
operator|==
literal|false
condition|)
block|{
name|diffs
operator|.
name|put
argument_list|(
name|partIter
operator|.
name|key
argument_list|,
name|partIter
operator|.
name|value
operator|.
name|diff
argument_list|(
name|beforePart
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|apply
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|map
parameter_list|)
block|{
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|builder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|part
range|:
name|deletes
control|)
block|{
name|builder
operator|.
name|remove
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Diff
argument_list|<
name|T
argument_list|>
argument_list|>
name|diff
range|:
name|diffs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|diff
operator|.
name|getKey
argument_list|()
argument_list|,
name|diff
operator|.
name|getValue
argument_list|()
operator|.
name|apply
argument_list|(
name|builder
operator|.
name|get
argument_list|(
name|diff
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|additon
range|:
name|adds
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|additon
operator|.
name|getKey
argument_list|()
argument_list|,
name|additon
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**      * Represents differences between two maps of diffable objects      *      * This class is used as base class for different map implementations      *      * @param<T> the diffable object      */
DECL|class|MapDiff
specifier|private
specifier|static
specifier|abstract
class|class
name|MapDiff
parameter_list|<
name|T
extends|extends
name|Diffable
parameter_list|<
name|T
parameter_list|>
parameter_list|,
name|M
parameter_list|>
implements|implements
name|Diff
argument_list|<
name|M
argument_list|>
block|{
DECL|field|deletes
specifier|protected
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|deletes
decl_stmt|;
DECL|field|diffs
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Diff
argument_list|<
name|T
argument_list|>
argument_list|>
name|diffs
decl_stmt|;
DECL|field|adds
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|adds
decl_stmt|;
DECL|method|MapDiff
specifier|protected
name|MapDiff
parameter_list|()
block|{
name|deletes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|diffs
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
name|adds
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
block|}
DECL|method|MapDiff
specifier|protected
name|MapDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|KeyedReader
argument_list|<
name|T
argument_list|>
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|deletes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|diffs
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
name|adds
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
name|int
name|deletesCount
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deletesCount
condition|;
name|i
operator|++
control|)
block|{
name|deletes
operator|.
name|add
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|diffsCount
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|diffsCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|Diff
argument_list|<
name|T
argument_list|>
name|diff
init|=
name|reader
operator|.
name|readDiffFrom
argument_list|(
name|in
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|diffs
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
name|int
name|addsCount
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|addsCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|T
name|part
init|=
name|reader
operator|.
name|readFrom
argument_list|(
name|in
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|adds
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|deletes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|delete
range|:
name|deletes
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|diffs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Diff
argument_list|<
name|T
argument_list|>
argument_list|>
name|entry
range|:
name|diffs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|adds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|entry
range|:
name|adds
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

