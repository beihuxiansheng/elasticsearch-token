begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|IntCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|IntObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenIntMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|DiffableUtils
specifier|public
specifier|final
class|class
name|DiffableUtils
block|{
DECL|method|DiffableUtils
specifier|private
name|DiffableUtils
parameter_list|()
block|{     }
comment|/**      * Returns a map key serializer for String keys      */
DECL|method|getStringKeySerializer
specifier|public
specifier|static
name|KeySerializer
argument_list|<
name|String
argument_list|>
name|getStringKeySerializer
parameter_list|()
block|{
return|return
name|StringKeySerializer
operator|.
name|INSTANCE
return|;
block|}
comment|/**      * Returns a map key serializer for Integer keys. Encodes as Int.      */
DECL|method|getIntKeySerializer
specifier|public
specifier|static
name|KeySerializer
argument_list|<
name|Integer
argument_list|>
name|getIntKeySerializer
parameter_list|()
block|{
return|return
name|IntKeySerializer
operator|.
name|INSTANCE
return|;
block|}
comment|/**      * Returns a map key serializer for Integer keys. Encodes as VInt.      */
DECL|method|getVIntKeySerializer
specifier|public
specifier|static
name|KeySerializer
argument_list|<
name|Integer
argument_list|>
name|getVIntKeySerializer
parameter_list|()
block|{
return|return
name|VIntKeySerializer
operator|.
name|INSTANCE
return|;
block|}
comment|/**      * Calculates diff between two ImmutableOpenMaps of Diffable objects      */
DECL|method|diff
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|T
extends|extends
name|Diffable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|MapDiff
argument_list|<
name|K
argument_list|,
name|T
argument_list|,
name|ImmutableOpenMap
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
argument_list|>
name|diff
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|before
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|after
parameter_list|,
name|KeySerializer
argument_list|<
name|K
argument_list|>
name|keySerializer
parameter_list|)
block|{
assert|assert
name|after
operator|!=
literal|null
operator|&&
name|before
operator|!=
literal|null
assert|;
return|return
operator|new
name|ImmutableOpenMapDiff
argument_list|<>
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|keySerializer
argument_list|,
name|DiffableValueSerializer
operator|.
name|getWriteOnlyInstance
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Calculates diff between two ImmutableOpenMaps of non-diffable objects      */
DECL|method|diff
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|T
parameter_list|>
name|MapDiff
argument_list|<
name|K
argument_list|,
name|T
argument_list|,
name|ImmutableOpenMap
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
argument_list|>
name|diff
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|before
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|after
parameter_list|,
name|KeySerializer
argument_list|<
name|K
argument_list|>
name|keySerializer
parameter_list|,
name|ValueSerializer
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|valueSerializer
parameter_list|)
block|{
assert|assert
name|after
operator|!=
literal|null
operator|&&
name|before
operator|!=
literal|null
assert|;
return|return
operator|new
name|ImmutableOpenMapDiff
argument_list|<>
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|keySerializer
argument_list|,
name|valueSerializer
argument_list|)
return|;
block|}
comment|/**      * Calculates diff between two ImmutableOpenIntMaps of Diffable objects      */
DECL|method|diff
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Diffable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|MapDiff
argument_list|<
name|Integer
argument_list|,
name|T
argument_list|,
name|ImmutableOpenIntMap
argument_list|<
name|T
argument_list|>
argument_list|>
name|diff
parameter_list|(
name|ImmutableOpenIntMap
argument_list|<
name|T
argument_list|>
name|before
parameter_list|,
name|ImmutableOpenIntMap
argument_list|<
name|T
argument_list|>
name|after
parameter_list|,
name|KeySerializer
argument_list|<
name|Integer
argument_list|>
name|keySerializer
parameter_list|)
block|{
assert|assert
name|after
operator|!=
literal|null
operator|&&
name|before
operator|!=
literal|null
assert|;
return|return
operator|new
name|ImmutableOpenIntMapDiff
argument_list|<>
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|keySerializer
argument_list|,
name|DiffableValueSerializer
operator|.
name|getWriteOnlyInstance
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Calculates diff between two ImmutableOpenIntMaps of non-diffable objects      */
DECL|method|diff
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|MapDiff
argument_list|<
name|Integer
argument_list|,
name|T
argument_list|,
name|ImmutableOpenIntMap
argument_list|<
name|T
argument_list|>
argument_list|>
name|diff
parameter_list|(
name|ImmutableOpenIntMap
argument_list|<
name|T
argument_list|>
name|before
parameter_list|,
name|ImmutableOpenIntMap
argument_list|<
name|T
argument_list|>
name|after
parameter_list|,
name|KeySerializer
argument_list|<
name|Integer
argument_list|>
name|keySerializer
parameter_list|,
name|ValueSerializer
argument_list|<
name|Integer
argument_list|,
name|T
argument_list|>
name|valueSerializer
parameter_list|)
block|{
assert|assert
name|after
operator|!=
literal|null
operator|&&
name|before
operator|!=
literal|null
assert|;
return|return
operator|new
name|ImmutableOpenIntMapDiff
argument_list|<>
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|keySerializer
argument_list|,
name|valueSerializer
argument_list|)
return|;
block|}
comment|/**      * Calculates diff between two Maps of Diffable objects.      */
DECL|method|diff
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|T
extends|extends
name|Diffable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|MapDiff
argument_list|<
name|K
argument_list|,
name|T
argument_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
argument_list|>
name|diff
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|before
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|after
parameter_list|,
name|KeySerializer
argument_list|<
name|K
argument_list|>
name|keySerializer
parameter_list|)
block|{
assert|assert
name|after
operator|!=
literal|null
operator|&&
name|before
operator|!=
literal|null
assert|;
return|return
operator|new
name|JdkMapDiff
argument_list|<>
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|keySerializer
argument_list|,
name|DiffableValueSerializer
operator|.
name|getWriteOnlyInstance
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Calculates diff between two Maps of non-diffable objects      */
DECL|method|diff
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|T
parameter_list|>
name|MapDiff
argument_list|<
name|K
argument_list|,
name|T
argument_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
argument_list|>
name|diff
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|before
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|after
parameter_list|,
name|KeySerializer
argument_list|<
name|K
argument_list|>
name|keySerializer
parameter_list|,
name|ValueSerializer
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|valueSerializer
parameter_list|)
block|{
assert|assert
name|after
operator|!=
literal|null
operator|&&
name|before
operator|!=
literal|null
assert|;
return|return
operator|new
name|JdkMapDiff
argument_list|<>
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|keySerializer
argument_list|,
name|valueSerializer
argument_list|)
return|;
block|}
comment|/**      * Loads an object that represents difference between two ImmutableOpenMaps      */
DECL|method|readImmutableOpenMapDiff
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|T
parameter_list|>
name|MapDiff
argument_list|<
name|K
argument_list|,
name|T
argument_list|,
name|ImmutableOpenMap
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
argument_list|>
name|readImmutableOpenMapDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|KeySerializer
argument_list|<
name|K
argument_list|>
name|keySerializer
parameter_list|,
name|ValueSerializer
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|valueSerializer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ImmutableOpenMapDiff
argument_list|<>
argument_list|(
name|in
argument_list|,
name|keySerializer
argument_list|,
name|valueSerializer
argument_list|)
return|;
block|}
comment|/**      * Loads an object that represents difference between two ImmutableOpenMaps      */
DECL|method|readImmutableOpenIntMapDiff
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|MapDiff
argument_list|<
name|Integer
argument_list|,
name|T
argument_list|,
name|ImmutableOpenIntMap
argument_list|<
name|T
argument_list|>
argument_list|>
name|readImmutableOpenIntMapDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|KeySerializer
argument_list|<
name|Integer
argument_list|>
name|keySerializer
parameter_list|,
name|ValueSerializer
argument_list|<
name|Integer
argument_list|,
name|T
argument_list|>
name|valueSerializer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ImmutableOpenIntMapDiff
argument_list|<>
argument_list|(
name|in
argument_list|,
name|keySerializer
argument_list|,
name|valueSerializer
argument_list|)
return|;
block|}
comment|/**      * Loads an object that represents difference between two Maps of Diffable objects      */
DECL|method|readJdkMapDiff
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|T
parameter_list|>
name|MapDiff
argument_list|<
name|K
argument_list|,
name|T
argument_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
argument_list|>
name|readJdkMapDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|KeySerializer
argument_list|<
name|K
argument_list|>
name|keySerializer
parameter_list|,
name|ValueSerializer
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|valueSerializer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|JdkMapDiff
argument_list|<>
argument_list|(
name|in
argument_list|,
name|keySerializer
argument_list|,
name|valueSerializer
argument_list|)
return|;
block|}
comment|/**      * Loads an object that represents difference between two ImmutableOpenMaps of Diffable objects using Diffable proto object      */
DECL|method|readImmutableOpenMapDiff
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|T
extends|extends
name|Diffable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|MapDiff
argument_list|<
name|K
argument_list|,
name|T
argument_list|,
name|ImmutableOpenMap
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
argument_list|>
name|readImmutableOpenMapDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|KeySerializer
argument_list|<
name|K
argument_list|>
name|keySerializer
parameter_list|,
name|Reader
argument_list|<
name|T
argument_list|>
name|reader
parameter_list|,
name|Reader
argument_list|<
name|Diff
argument_list|<
name|T
argument_list|>
argument_list|>
name|diffReader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ImmutableOpenMapDiff
argument_list|<>
argument_list|(
name|in
argument_list|,
name|keySerializer
argument_list|,
operator|new
name|DiffableValueReader
argument_list|<>
argument_list|(
name|reader
argument_list|,
name|diffReader
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Loads an object that represents difference between two ImmutableOpenIntMaps of Diffable objects using Diffable proto object      */
DECL|method|readImmutableOpenIntMapDiff
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Diffable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|MapDiff
argument_list|<
name|Integer
argument_list|,
name|T
argument_list|,
name|ImmutableOpenIntMap
argument_list|<
name|T
argument_list|>
argument_list|>
name|readImmutableOpenIntMapDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|KeySerializer
argument_list|<
name|Integer
argument_list|>
name|keySerializer
parameter_list|,
name|Reader
argument_list|<
name|T
argument_list|>
name|reader
parameter_list|,
name|Reader
argument_list|<
name|Diff
argument_list|<
name|T
argument_list|>
argument_list|>
name|diffReader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ImmutableOpenIntMapDiff
argument_list|<>
argument_list|(
name|in
argument_list|,
name|keySerializer
argument_list|,
operator|new
name|DiffableValueReader
argument_list|<>
argument_list|(
name|reader
argument_list|,
name|diffReader
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Loads an object that represents difference between two Maps of Diffable objects using Diffable proto object      */
DECL|method|readJdkMapDiff
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|T
extends|extends
name|Diffable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|MapDiff
argument_list|<
name|K
argument_list|,
name|T
argument_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
argument_list|>
name|readJdkMapDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|KeySerializer
argument_list|<
name|K
argument_list|>
name|keySerializer
parameter_list|,
name|Reader
argument_list|<
name|T
argument_list|>
name|reader
parameter_list|,
name|Reader
argument_list|<
name|Diff
argument_list|<
name|T
argument_list|>
argument_list|>
name|diffReader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|JdkMapDiff
argument_list|<>
argument_list|(
name|in
argument_list|,
name|keySerializer
argument_list|,
operator|new
name|DiffableValueReader
argument_list|<>
argument_list|(
name|reader
argument_list|,
name|diffReader
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Represents differences between two Maps of (possibly diffable) objects.      *      * @param<T> the diffable object      */
DECL|class|JdkMapDiff
specifier|private
specifier|static
class|class
name|JdkMapDiff
parameter_list|<
name|K
parameter_list|,
name|T
parameter_list|>
extends|extends
name|MapDiff
argument_list|<
name|K
argument_list|,
name|T
argument_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
argument_list|>
block|{
DECL|method|JdkMapDiff
specifier|protected
name|JdkMapDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|KeySerializer
argument_list|<
name|K
argument_list|>
name|keySerializer
parameter_list|,
name|ValueSerializer
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|valueSerializer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|keySerializer
argument_list|,
name|valueSerializer
argument_list|)
expr_stmt|;
block|}
DECL|method|JdkMapDiff
specifier|public
name|JdkMapDiff
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|before
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|after
parameter_list|,
name|KeySerializer
argument_list|<
name|K
argument_list|>
name|keySerializer
parameter_list|,
name|ValueSerializer
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|valueSerializer
parameter_list|)
block|{
name|super
argument_list|(
name|keySerializer
argument_list|,
name|valueSerializer
argument_list|)
expr_stmt|;
assert|assert
name|after
operator|!=
literal|null
operator|&&
name|before
operator|!=
literal|null
assert|;
for|for
control|(
name|K
name|key
range|:
name|before
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|after
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|deletes
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|partIter
range|:
name|after
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|T
name|beforePart
init|=
name|before
operator|.
name|get
argument_list|(
name|partIter
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|beforePart
operator|==
literal|null
condition|)
block|{
name|upserts
operator|.
name|put
argument_list|(
name|partIter
operator|.
name|getKey
argument_list|()
argument_list|,
name|partIter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|partIter
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|beforePart
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|valueSerializer
operator|.
name|supportsDiffableValues
argument_list|()
condition|)
block|{
name|diffs
operator|.
name|put
argument_list|(
name|partIter
operator|.
name|getKey
argument_list|()
argument_list|,
name|valueSerializer
operator|.
name|diff
argument_list|(
name|partIter
operator|.
name|getValue
argument_list|()
argument_list|,
name|beforePart
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|upserts
operator|.
name|put
argument_list|(
name|partIter
operator|.
name|getKey
argument_list|()
argument_list|,
name|partIter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|apply
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|map
parameter_list|)
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|builder
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
for|for
control|(
name|K
name|part
range|:
name|deletes
control|)
block|{
name|builder
operator|.
name|remove
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Diff
argument_list|<
name|T
argument_list|>
argument_list|>
name|diff
range|:
name|diffs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|diff
operator|.
name|getKey
argument_list|()
argument_list|,
name|diff
operator|.
name|getValue
argument_list|()
operator|.
name|apply
argument_list|(
name|builder
operator|.
name|get
argument_list|(
name|diff
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|upsert
range|:
name|upserts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|upsert
operator|.
name|getKey
argument_list|()
argument_list|,
name|upsert
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
block|}
comment|/**      * Represents differences between two ImmutableOpenMap of (possibly diffable) objects      *      * @param<T> the object type      */
DECL|class|ImmutableOpenMapDiff
specifier|public
specifier|static
class|class
name|ImmutableOpenMapDiff
parameter_list|<
name|K
parameter_list|,
name|T
parameter_list|>
extends|extends
name|MapDiff
argument_list|<
name|K
argument_list|,
name|T
argument_list|,
name|ImmutableOpenMap
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
argument_list|>
block|{
DECL|method|ImmutableOpenMapDiff
specifier|protected
name|ImmutableOpenMapDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|KeySerializer
argument_list|<
name|K
argument_list|>
name|keySerializer
parameter_list|,
name|ValueSerializer
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|valueSerializer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|keySerializer
argument_list|,
name|valueSerializer
argument_list|)
expr_stmt|;
block|}
DECL|method|ImmutableOpenMapDiff
specifier|private
name|ImmutableOpenMapDiff
parameter_list|(
name|KeySerializer
argument_list|<
name|K
argument_list|>
name|keySerializer
parameter_list|,
name|ValueSerializer
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|valueSerializer
parameter_list|,
name|List
argument_list|<
name|K
argument_list|>
name|deletes
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|Diff
argument_list|<
name|T
argument_list|>
argument_list|>
name|diffs
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|upserts
parameter_list|)
block|{
name|super
argument_list|(
name|keySerializer
argument_list|,
name|valueSerializer
argument_list|,
name|deletes
argument_list|,
name|diffs
argument_list|,
name|upserts
argument_list|)
expr_stmt|;
block|}
DECL|method|ImmutableOpenMapDiff
specifier|public
name|ImmutableOpenMapDiff
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|before
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|after
parameter_list|,
name|KeySerializer
argument_list|<
name|K
argument_list|>
name|keySerializer
parameter_list|,
name|ValueSerializer
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|valueSerializer
parameter_list|)
block|{
name|super
argument_list|(
name|keySerializer
argument_list|,
name|valueSerializer
argument_list|)
expr_stmt|;
assert|assert
name|after
operator|!=
literal|null
operator|&&
name|before
operator|!=
literal|null
assert|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|K
argument_list|>
name|key
range|:
name|before
operator|.
name|keys
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|after
operator|.
name|containsKey
argument_list|(
name|key
operator|.
name|value
argument_list|)
condition|)
block|{
name|deletes
operator|.
name|add
argument_list|(
name|key
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|partIter
range|:
name|after
control|)
block|{
name|T
name|beforePart
init|=
name|before
operator|.
name|get
argument_list|(
name|partIter
operator|.
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|beforePart
operator|==
literal|null
condition|)
block|{
name|upserts
operator|.
name|put
argument_list|(
name|partIter
operator|.
name|key
argument_list|,
name|partIter
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|partIter
operator|.
name|value
operator|.
name|equals
argument_list|(
name|beforePart
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|valueSerializer
operator|.
name|supportsDiffableValues
argument_list|()
condition|)
block|{
name|diffs
operator|.
name|put
argument_list|(
name|partIter
operator|.
name|key
argument_list|,
name|valueSerializer
operator|.
name|diff
argument_list|(
name|partIter
operator|.
name|value
argument_list|,
name|beforePart
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|upserts
operator|.
name|put
argument_list|(
name|partIter
operator|.
name|key
argument_list|,
name|partIter
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**          * Returns a new diff map with the given key removed, does not modify the invoking instance.          * If the key does not exist in the diff map, the same instance is returned.          */
DECL|method|withKeyRemoved
specifier|public
name|ImmutableOpenMapDiff
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|withKeyRemoved
parameter_list|(
name|K
name|key
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|diffs
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|==
literal|false
operator|&&
name|this
operator|.
name|upserts
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
name|Map
argument_list|<
name|K
argument_list|,
name|Diff
argument_list|<
name|T
argument_list|>
argument_list|>
name|newDiffs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|diffs
argument_list|)
decl_stmt|;
name|newDiffs
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|newUpserts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|upserts
argument_list|)
decl_stmt|;
name|newUpserts
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
operator|new
name|ImmutableOpenMapDiff
argument_list|<>
argument_list|(
name|this
operator|.
name|keySerializer
argument_list|,
name|this
operator|.
name|valueSerializer
argument_list|,
name|this
operator|.
name|deletes
argument_list|,
name|newDiffs
argument_list|,
name|newUpserts
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|ImmutableOpenMap
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|apply
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|map
parameter_list|)
block|{
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|builder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
for|for
control|(
name|K
name|part
range|:
name|deletes
control|)
block|{
name|builder
operator|.
name|remove
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Diff
argument_list|<
name|T
argument_list|>
argument_list|>
name|diff
range|:
name|diffs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|diff
operator|.
name|getKey
argument_list|()
argument_list|,
name|diff
operator|.
name|getValue
argument_list|()
operator|.
name|apply
argument_list|(
name|builder
operator|.
name|get
argument_list|(
name|diff
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|upsert
range|:
name|upserts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|upsert
operator|.
name|getKey
argument_list|()
argument_list|,
name|upsert
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**      * Represents differences between two ImmutableOpenIntMap of (possibly diffable) objects      *      * @param<T> the object type      */
DECL|class|ImmutableOpenIntMapDiff
specifier|private
specifier|static
class|class
name|ImmutableOpenIntMapDiff
parameter_list|<
name|T
parameter_list|>
extends|extends
name|MapDiff
argument_list|<
name|Integer
argument_list|,
name|T
argument_list|,
name|ImmutableOpenIntMap
argument_list|<
name|T
argument_list|>
argument_list|>
block|{
DECL|method|ImmutableOpenIntMapDiff
specifier|protected
name|ImmutableOpenIntMapDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|KeySerializer
argument_list|<
name|Integer
argument_list|>
name|keySerializer
parameter_list|,
name|ValueSerializer
argument_list|<
name|Integer
argument_list|,
name|T
argument_list|>
name|valueSerializer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|keySerializer
argument_list|,
name|valueSerializer
argument_list|)
expr_stmt|;
block|}
DECL|method|ImmutableOpenIntMapDiff
specifier|public
name|ImmutableOpenIntMapDiff
parameter_list|(
name|ImmutableOpenIntMap
argument_list|<
name|T
argument_list|>
name|before
parameter_list|,
name|ImmutableOpenIntMap
argument_list|<
name|T
argument_list|>
name|after
parameter_list|,
name|KeySerializer
argument_list|<
name|Integer
argument_list|>
name|keySerializer
parameter_list|,
name|ValueSerializer
argument_list|<
name|Integer
argument_list|,
name|T
argument_list|>
name|valueSerializer
parameter_list|)
block|{
name|super
argument_list|(
name|keySerializer
argument_list|,
name|valueSerializer
argument_list|)
expr_stmt|;
assert|assert
name|after
operator|!=
literal|null
operator|&&
name|before
operator|!=
literal|null
assert|;
for|for
control|(
name|IntCursor
name|key
range|:
name|before
operator|.
name|keys
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|after
operator|.
name|containsKey
argument_list|(
name|key
operator|.
name|value
argument_list|)
condition|)
block|{
name|deletes
operator|.
name|add
argument_list|(
name|key
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|IntObjectCursor
argument_list|<
name|T
argument_list|>
name|partIter
range|:
name|after
control|)
block|{
name|T
name|beforePart
init|=
name|before
operator|.
name|get
argument_list|(
name|partIter
operator|.
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|beforePart
operator|==
literal|null
condition|)
block|{
name|upserts
operator|.
name|put
argument_list|(
name|partIter
operator|.
name|key
argument_list|,
name|partIter
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|partIter
operator|.
name|value
operator|.
name|equals
argument_list|(
name|beforePart
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|valueSerializer
operator|.
name|supportsDiffableValues
argument_list|()
condition|)
block|{
name|diffs
operator|.
name|put
argument_list|(
name|partIter
operator|.
name|key
argument_list|,
name|valueSerializer
operator|.
name|diff
argument_list|(
name|partIter
operator|.
name|value
argument_list|,
name|beforePart
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|upserts
operator|.
name|put
argument_list|(
name|partIter
operator|.
name|key
argument_list|,
name|partIter
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|ImmutableOpenIntMap
argument_list|<
name|T
argument_list|>
name|apply
parameter_list|(
name|ImmutableOpenIntMap
argument_list|<
name|T
argument_list|>
name|map
parameter_list|)
block|{
name|ImmutableOpenIntMap
operator|.
name|Builder
argument_list|<
name|T
argument_list|>
name|builder
init|=
name|ImmutableOpenIntMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|part
range|:
name|deletes
control|)
block|{
name|builder
operator|.
name|remove
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Diff
argument_list|<
name|T
argument_list|>
argument_list|>
name|diff
range|:
name|diffs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|diff
operator|.
name|getKey
argument_list|()
argument_list|,
name|diff
operator|.
name|getValue
argument_list|()
operator|.
name|apply
argument_list|(
name|builder
operator|.
name|get
argument_list|(
name|diff
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|T
argument_list|>
name|upsert
range|:
name|upserts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|upsert
operator|.
name|getKey
argument_list|()
argument_list|,
name|upsert
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**      * Represents differences between two maps of objects and is used as base class for different map implementations.      *      * Implements serialization. How differences are applied is left to subclasses.      *      * @param<K> the type of map keys      * @param<T> the type of map values      * @param<M> the map implementation type      */
DECL|class|MapDiff
specifier|public
specifier|abstract
specifier|static
class|class
name|MapDiff
parameter_list|<
name|K
parameter_list|,
name|T
parameter_list|,
name|M
parameter_list|>
implements|implements
name|Diff
argument_list|<
name|M
argument_list|>
block|{
DECL|field|deletes
specifier|protected
specifier|final
name|List
argument_list|<
name|K
argument_list|>
name|deletes
decl_stmt|;
DECL|field|diffs
specifier|protected
specifier|final
name|Map
argument_list|<
name|K
argument_list|,
name|Diff
argument_list|<
name|T
argument_list|>
argument_list|>
name|diffs
decl_stmt|;
comment|// incremental updates
DECL|field|upserts
specifier|protected
specifier|final
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|upserts
decl_stmt|;
comment|// additions or full updates
DECL|field|keySerializer
specifier|protected
specifier|final
name|KeySerializer
argument_list|<
name|K
argument_list|>
name|keySerializer
decl_stmt|;
DECL|field|valueSerializer
specifier|protected
specifier|final
name|ValueSerializer
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|valueSerializer
decl_stmt|;
DECL|method|MapDiff
specifier|protected
name|MapDiff
parameter_list|(
name|KeySerializer
argument_list|<
name|K
argument_list|>
name|keySerializer
parameter_list|,
name|ValueSerializer
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|valueSerializer
parameter_list|)
block|{
name|this
operator|.
name|keySerializer
operator|=
name|keySerializer
expr_stmt|;
name|this
operator|.
name|valueSerializer
operator|=
name|valueSerializer
expr_stmt|;
name|deletes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|diffs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|upserts
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|MapDiff
specifier|protected
name|MapDiff
parameter_list|(
name|KeySerializer
argument_list|<
name|K
argument_list|>
name|keySerializer
parameter_list|,
name|ValueSerializer
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|valueSerializer
parameter_list|,
name|List
argument_list|<
name|K
argument_list|>
name|deletes
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|Diff
argument_list|<
name|T
argument_list|>
argument_list|>
name|diffs
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|upserts
parameter_list|)
block|{
name|this
operator|.
name|keySerializer
operator|=
name|keySerializer
expr_stmt|;
name|this
operator|.
name|valueSerializer
operator|=
name|valueSerializer
expr_stmt|;
name|this
operator|.
name|deletes
operator|=
name|deletes
expr_stmt|;
name|this
operator|.
name|diffs
operator|=
name|diffs
expr_stmt|;
name|this
operator|.
name|upserts
operator|=
name|upserts
expr_stmt|;
block|}
DECL|method|MapDiff
specifier|protected
name|MapDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|KeySerializer
argument_list|<
name|K
argument_list|>
name|keySerializer
parameter_list|,
name|ValueSerializer
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|valueSerializer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|keySerializer
operator|=
name|keySerializer
expr_stmt|;
name|this
operator|.
name|valueSerializer
operator|=
name|valueSerializer
expr_stmt|;
name|deletes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|diffs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|upserts
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|int
name|deletesCount
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deletesCount
condition|;
name|i
operator|++
control|)
block|{
name|deletes
operator|.
name|add
argument_list|(
name|keySerializer
operator|.
name|readKey
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|diffsCount
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|diffsCount
condition|;
name|i
operator|++
control|)
block|{
name|K
name|key
init|=
name|keySerializer
operator|.
name|readKey
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Diff
argument_list|<
name|T
argument_list|>
name|diff
init|=
name|valueSerializer
operator|.
name|readDiff
argument_list|(
name|in
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|diffs
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
name|int
name|upsertsCount
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|upsertsCount
condition|;
name|i
operator|++
control|)
block|{
name|K
name|key
init|=
name|keySerializer
operator|.
name|readKey
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|T
name|newValue
init|=
name|valueSerializer
operator|.
name|read
argument_list|(
name|in
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|upserts
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * The keys that, when this diff is applied to a map, should be removed from the map.          *          * @return the list of keys that are deleted          */
DECL|method|getDeletes
specifier|public
name|List
argument_list|<
name|K
argument_list|>
name|getDeletes
parameter_list|()
block|{
return|return
name|deletes
return|;
block|}
comment|/**          * Map entries that, when this diff is applied to a map, should be          * incrementally updated. The incremental update is represented using          * the {@link Diff} interface.          *          * @return the map entries that are incrementally updated          */
DECL|method|getDiffs
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|Diff
argument_list|<
name|T
argument_list|>
argument_list|>
name|getDiffs
parameter_list|()
block|{
return|return
name|diffs
return|;
block|}
comment|/**          * Map entries that, when this diff is applied to a map, should be          * added to the map or fully replace the previous value.          *          * @return the map entries that are additions or full updates          */
DECL|method|getUpserts
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|getUpserts
parameter_list|()
block|{
return|return
name|upserts
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|deletes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|K
name|delete
range|:
name|deletes
control|)
block|{
name|keySerializer
operator|.
name|writeKey
argument_list|(
name|delete
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|Version
name|version
init|=
name|out
operator|.
name|getVersion
argument_list|()
decl_stmt|;
comment|// filter out custom states not supported by the other node
name|int
name|diffCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Diff
argument_list|<
name|T
argument_list|>
name|diff
range|:
name|diffs
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|valueSerializer
operator|.
name|supportsVersion
argument_list|(
name|diff
argument_list|,
name|version
argument_list|)
condition|)
block|{
name|diffCount
operator|++
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|diffCount
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Diff
argument_list|<
name|T
argument_list|>
argument_list|>
name|entry
range|:
name|diffs
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|valueSerializer
operator|.
name|supportsVersion
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|version
argument_list|)
condition|)
block|{
name|keySerializer
operator|.
name|writeKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|valueSerializer
operator|.
name|writeDiff
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|// filter out custom states not supported by the other node
name|int
name|upsertsCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|T
name|upsert
range|:
name|upserts
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|valueSerializer
operator|.
name|supportsVersion
argument_list|(
name|upsert
argument_list|,
name|version
argument_list|)
condition|)
block|{
name|upsertsCount
operator|++
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|upsertsCount
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|T
argument_list|>
name|entry
range|:
name|upserts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|keySerializer
operator|.
name|writeKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|valueSerializer
operator|.
name|write
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Provides read and write operations to serialize keys of map      * @param<K> type of key      */
DECL|interface|KeySerializer
specifier|public
interface|interface
name|KeySerializer
parameter_list|<
name|K
parameter_list|>
block|{
DECL|method|writeKey
name|void
name|writeKey
parameter_list|(
name|K
name|key
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|readKey
name|K
name|readKey
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**      * Serializes String keys of a map      */
DECL|class|StringKeySerializer
specifier|private
specifier|static
specifier|final
class|class
name|StringKeySerializer
implements|implements
name|KeySerializer
argument_list|<
name|String
argument_list|>
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|StringKeySerializer
name|INSTANCE
init|=
operator|new
name|StringKeySerializer
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|writeKey
specifier|public
name|void
name|writeKey
parameter_list|(
name|String
name|key
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readKey
specifier|public
name|String
name|readKey
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|readString
argument_list|()
return|;
block|}
block|}
comment|/**      * Serializes Integer keys of a map as an Int      */
DECL|class|IntKeySerializer
specifier|private
specifier|static
specifier|final
class|class
name|IntKeySerializer
implements|implements
name|KeySerializer
argument_list|<
name|Integer
argument_list|>
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|IntKeySerializer
name|INSTANCE
init|=
operator|new
name|IntKeySerializer
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|writeKey
specifier|public
name|void
name|writeKey
parameter_list|(
name|Integer
name|key
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readKey
specifier|public
name|Integer
name|readKey
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|readInt
argument_list|()
return|;
block|}
block|}
comment|/**      * Serializes Integer keys of a map as a VInt. Requires keys to be positive.      */
DECL|class|VIntKeySerializer
specifier|private
specifier|static
specifier|final
class|class
name|VIntKeySerializer
implements|implements
name|KeySerializer
argument_list|<
name|Integer
argument_list|>
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|IntKeySerializer
name|INSTANCE
init|=
operator|new
name|IntKeySerializer
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|writeKey
specifier|public
name|void
name|writeKey
parameter_list|(
name|Integer
name|key
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|key
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Map key ["
operator|+
name|key
operator|+
literal|"] must be positive"
argument_list|)
throw|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readKey
specifier|public
name|Integer
name|readKey
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|readVInt
argument_list|()
return|;
block|}
block|}
comment|/**      * Provides read and write operations to serialize map values.      * Reading of values can be made dependent on map key.      *      * Also provides operations to distinguish whether map values are diffable.      *      * Should not be directly implemented, instead implement either      * {@link DiffableValueSerializer} or {@link NonDiffableValueSerializer}.      *      * @param<K> key type of map      * @param<V> value type of map      */
DECL|interface|ValueSerializer
specifier|public
interface|interface
name|ValueSerializer
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
comment|/**          * Writes value to stream          */
DECL|method|write
name|void
name|write
parameter_list|(
name|V
name|value
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**          * Reads value from stream. Reading operation can be made dependent on map key.          */
DECL|method|read
name|V
name|read
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|K
name|key
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**          * Whether this serializer supports diffable values          */
DECL|method|supportsDiffableValues
name|boolean
name|supportsDiffableValues
parameter_list|()
function_decl|;
comment|/**          * Whether this serializer supports the version of the output stream          */
DECL|method|supportsVersion
specifier|default
name|boolean
name|supportsVersion
parameter_list|(
name|Diff
argument_list|<
name|V
argument_list|>
name|value
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/**          * Whether this serializer supports the version of the output stream          */
DECL|method|supportsVersion
specifier|default
name|boolean
name|supportsVersion
parameter_list|(
name|V
name|value
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/**          * Computes diff if this serializer supports diffable values          */
DECL|method|diff
name|Diff
argument_list|<
name|V
argument_list|>
name|diff
parameter_list|(
name|V
name|value
parameter_list|,
name|V
name|beforePart
parameter_list|)
function_decl|;
comment|/**          * Writes value as diff to stream if this serializer supports diffable values          */
DECL|method|writeDiff
name|void
name|writeDiff
parameter_list|(
name|Diff
argument_list|<
name|V
argument_list|>
name|value
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**          * Reads value as diff from stream if this serializer supports diffable values.          * Reading operation can be made dependent on map key.          */
DECL|method|readDiff
name|Diff
argument_list|<
name|V
argument_list|>
name|readDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|K
name|key
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**      * Serializer for Diffable map values. Needs to implement read and readDiff methods.      *      * @param<K> type of map keys      * @param<V> type of map values      */
DECL|class|DiffableValueSerializer
specifier|public
specifier|abstract
specifier|static
class|class
name|DiffableValueSerializer
parameter_list|<
name|K
parameter_list|,
name|V
extends|extends
name|Diffable
parameter_list|<
name|V
parameter_list|>
parameter_list|>
implements|implements
name|ValueSerializer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|WRITE_ONLY_INSTANCE
specifier|private
specifier|static
specifier|final
name|DiffableValueSerializer
name|WRITE_ONLY_INSTANCE
init|=
operator|new
name|DiffableValueSerializer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|read
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|Object
name|key
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Diff
argument_list|<
name|Object
argument_list|>
name|readDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|Object
name|key
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
DECL|method|getWriteOnlyInstance
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
extends|extends
name|Diffable
argument_list|<
name|V
argument_list|>
parameter_list|>
name|DiffableValueSerializer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getWriteOnlyInstance
parameter_list|()
block|{
return|return
name|WRITE_ONLY_INSTANCE
return|;
block|}
annotation|@
name|Override
DECL|method|supportsDiffableValues
specifier|public
name|boolean
name|supportsDiffableValues
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|diff
specifier|public
name|Diff
argument_list|<
name|V
argument_list|>
name|diff
parameter_list|(
name|V
name|value
parameter_list|,
name|V
name|beforePart
parameter_list|)
block|{
return|return
name|value
operator|.
name|diff
argument_list|(
name|beforePart
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|V
name|value
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|value
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|writeDiff
specifier|public
name|void
name|writeDiff
parameter_list|(
name|Diff
argument_list|<
name|V
argument_list|>
name|value
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|value
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Serializer for non-diffable map values      *      * @param<K> type of map keys      * @param<V> type of map values      */
DECL|class|NonDiffableValueSerializer
specifier|public
specifier|abstract
specifier|static
class|class
name|NonDiffableValueSerializer
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|ValueSerializer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|Override
DECL|method|supportsDiffableValues
specifier|public
name|boolean
name|supportsDiffableValues
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|diff
specifier|public
name|Diff
argument_list|<
name|V
argument_list|>
name|diff
parameter_list|(
name|V
name|value
parameter_list|,
name|V
name|beforePart
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|writeDiff
specifier|public
name|void
name|writeDiff
parameter_list|(
name|Diff
argument_list|<
name|V
argument_list|>
name|value
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|readDiff
specifier|public
name|Diff
argument_list|<
name|V
argument_list|>
name|readDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|K
name|key
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/**      * Implementation of the ValueSerializer that wraps value and diff readers.      *      * Note: this implementation is ignoring the key.      */
DECL|class|DiffableValueReader
specifier|public
specifier|static
class|class
name|DiffableValueReader
parameter_list|<
name|K
parameter_list|,
name|V
extends|extends
name|Diffable
parameter_list|<
name|V
parameter_list|>
parameter_list|>
extends|extends
name|DiffableValueSerializer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|reader
specifier|private
specifier|final
name|Reader
argument_list|<
name|V
argument_list|>
name|reader
decl_stmt|;
DECL|field|diffReader
specifier|private
specifier|final
name|Reader
argument_list|<
name|Diff
argument_list|<
name|V
argument_list|>
argument_list|>
name|diffReader
decl_stmt|;
DECL|method|DiffableValueReader
specifier|public
name|DiffableValueReader
parameter_list|(
name|Reader
argument_list|<
name|V
argument_list|>
name|reader
parameter_list|,
name|Reader
argument_list|<
name|Diff
argument_list|<
name|V
argument_list|>
argument_list|>
name|diffReader
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|diffReader
operator|=
name|diffReader
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|V
name|read
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|K
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|read
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readDiff
specifier|public
name|Diff
argument_list|<
name|V
argument_list|>
name|readDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|K
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|diffReader
operator|.
name|read
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
comment|/**      * Implementation of ValueSerializer that serializes immutable sets      *      * @param<K> type of map key      */
DECL|class|StringSetValueSerializer
specifier|public
specifier|static
class|class
name|StringSetValueSerializer
parameter_list|<
name|K
parameter_list|>
extends|extends
name|NonDiffableValueSerializer
argument_list|<
name|K
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|StringSetValueSerializer
name|INSTANCE
init|=
operator|new
name|StringSetValueSerializer
argument_list|()
decl_stmt|;
DECL|method|getInstance
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|>
name|StringSetValueSerializer
argument_list|<
name|K
argument_list|>
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|value
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeStringArray
argument_list|(
name|value
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|value
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|read
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|K
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|in
operator|.
name|readStringArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

