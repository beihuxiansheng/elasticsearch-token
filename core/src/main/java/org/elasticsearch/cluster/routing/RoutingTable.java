begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|IntSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|Diffable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|DiffableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|iterable
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_comment
comment|/**  * Represents a global cluster-wide routing table for all indices including the  * version of the current routing state.  *  * @see IndexRoutingTable  */
end_comment

begin_class
DECL|class|RoutingTable
specifier|public
class|class
name|RoutingTable
implements|implements
name|Iterable
argument_list|<
name|IndexRoutingTable
argument_list|>
implements|,
name|Diffable
argument_list|<
name|RoutingTable
argument_list|>
block|{
DECL|field|PROTO
specifier|public
specifier|static
name|RoutingTable
name|PROTO
init|=
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|EMPTY_ROUTING_TABLE
specifier|public
specifier|static
specifier|final
name|RoutingTable
name|EMPTY_ROUTING_TABLE
init|=
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|long
name|version
decl_stmt|;
comment|// index to IndexRoutingTable map
DECL|field|indicesRouting
specifier|private
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexRoutingTable
argument_list|>
name|indicesRouting
decl_stmt|;
DECL|method|RoutingTable
name|RoutingTable
parameter_list|(
name|long
name|version
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexRoutingTable
argument_list|>
name|indicesRouting
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|indicesRouting
operator|=
name|indicesRouting
expr_stmt|;
block|}
comment|/**      * Returns the version of the {@link RoutingTable}.      *      * @return version of the {@link RoutingTable}      */
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|IndexRoutingTable
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|indicesRouting
operator|.
name|valuesIt
argument_list|()
return|;
block|}
DECL|method|hasIndex
specifier|public
name|boolean
name|hasIndex
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|indicesRouting
operator|.
name|containsKey
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|index
specifier|public
name|IndexRoutingTable
name|index
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|indicesRouting
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|index
specifier|public
name|IndexRoutingTable
name|index
parameter_list|(
name|Index
name|index
parameter_list|)
block|{
return|return
name|indicesRouting
operator|.
name|get
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|indicesRouting
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexRoutingTable
argument_list|>
name|indicesRouting
parameter_list|()
block|{
return|return
name|indicesRouting
return|;
block|}
DECL|method|getIndicesRouting
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexRoutingTable
argument_list|>
name|getIndicesRouting
parameter_list|()
block|{
return|return
name|indicesRouting
argument_list|()
return|;
block|}
comment|/**      * All shards for the provided index and shard id      * @return All the shard routing entries for the given index and shard id      * @throws IndexNotFoundException if provided index does not exist      * @throws ShardNotFoundException if provided shard id is unknown      */
DECL|method|shardRoutingTable
specifier|public
name|IndexShardRoutingTable
name|shardRoutingTable
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|shardId
parameter_list|)
block|{
name|IndexRoutingTable
name|indexRouting
init|=
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRouting
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexNotFoundException
argument_list|(
name|index
argument_list|)
throw|;
block|}
name|IndexShardRoutingTable
name|shard
init|=
name|indexRouting
operator|.
name|shard
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|shard
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ShardNotFoundException
argument_list|(
operator|new
name|ShardId
argument_list|(
name|indexRouting
operator|.
name|getIndex
argument_list|()
argument_list|,
name|shardId
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|shard
return|;
block|}
comment|/**      * All shards for the provided {@link ShardId}      * @return All the shard routing entries for the given index and shard id      * @throws IndexNotFoundException if provided index does not exist      * @throws ShardNotFoundException if provided shard id is unknown      */
DECL|method|shardRoutingTable
specifier|public
name|IndexShardRoutingTable
name|shardRoutingTable
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
name|IndexRoutingTable
name|indexRouting
init|=
name|index
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRouting
operator|==
literal|null
operator|||
name|indexRouting
operator|.
name|getIndex
argument_list|()
operator|.
name|equals
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IndexNotFoundException
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
throw|;
block|}
name|IndexShardRoutingTable
name|shard
init|=
name|indexRouting
operator|.
name|shard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|shard
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ShardNotFoundException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
return|return
name|shard
return|;
block|}
DECL|method|shardRoutingTableOrNull
specifier|public
name|IndexShardRoutingTable
name|shardRoutingTableOrNull
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|index
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|irt
lambda|->
name|Optional
operator|.
name|ofNullable
argument_list|(
name|irt
operator|.
name|shard
argument_list|(
name|shardId
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|getByAllocationId
specifier|public
name|ShardRouting
name|getByAllocationId
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|allocationId
parameter_list|)
block|{
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|shardRoutingTableOrNull
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardRoutingTable
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|shardRoutingTable
operator|.
name|assignedShards
argument_list|()
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|allocationId
argument_list|)
condition|)
block|{
return|return
name|shardRouting
return|;
block|}
if|if
condition|(
name|shardRouting
operator|.
name|relocating
argument_list|()
condition|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|getTargetRelocatingShard
argument_list|()
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|allocationId
argument_list|)
condition|)
block|{
return|return
name|shardRouting
operator|.
name|getTargetRelocatingShard
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|validate
specifier|public
name|boolean
name|validate
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
block|{
for|for
control|(
name|IndexRoutingTable
name|indexRoutingTable
range|:
name|this
control|)
block|{
if|if
condition|(
name|indexRoutingTable
operator|.
name|validate
argument_list|(
name|metaData
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|shardsWithState
specifier|public
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shardsWithState
parameter_list|(
name|ShardRoutingState
name|state
parameter_list|)
block|{
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexRoutingTable
name|indexRoutingTable
range|:
name|this
control|)
block|{
name|shards
operator|.
name|addAll
argument_list|(
name|indexRoutingTable
operator|.
name|shardsWithState
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|shards
return|;
block|}
comment|/**      * All the shards (replicas) for all indices in this routing table.      *      * @return All the shards      */
DECL|method|allShards
specifier|public
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|allShards
parameter_list|()
block|{
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|indices
init|=
name|indicesRouting
operator|.
name|keys
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|allShardsIndex
init|=
name|allShards
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|shards
operator|.
name|addAll
argument_list|(
name|allShardsIndex
argument_list|)
expr_stmt|;
block|}
return|return
name|shards
return|;
block|}
comment|/**      * All the shards (replicas) for the provided index.      *      * @param index The index to return all the shards (replicas).      * @return All the shards matching the specific index      * @throws IndexNotFoundException If the index passed does not exists      */
DECL|method|allShards
specifier|public
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|allShards
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRoutingTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexNotFoundException
argument_list|(
name|index
argument_list|)
throw|;
block|}
for|for
control|(
name|IndexShardRoutingTable
name|indexShardRoutingTable
range|:
name|indexRoutingTable
control|)
block|{
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|indexShardRoutingTable
control|)
block|{
name|shards
operator|.
name|add
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|shards
return|;
block|}
DECL|method|allActiveShardsGrouped
specifier|public
name|GroupShardsIterator
name|allActiveShardsGrouped
parameter_list|(
name|String
index|[]
name|indices
parameter_list|,
name|boolean
name|includeEmpty
parameter_list|)
block|{
return|return
name|allActiveShardsGrouped
argument_list|(
name|indices
argument_list|,
name|includeEmpty
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Return GroupShardsIterator where each active shard routing has it's own shard iterator.      *      * @param includeEmpty             if true, a shard iterator will be added for non-assigned shards as well      * @param includeRelocationTargets if true, an<b>extra</b> shard iterator will be added for relocating shards. The extra      *                                 iterator contains a single ShardRouting pointing at the relocating target      */
DECL|method|allActiveShardsGrouped
specifier|public
name|GroupShardsIterator
name|allActiveShardsGrouped
parameter_list|(
name|String
index|[]
name|indices
parameter_list|,
name|boolean
name|includeEmpty
parameter_list|,
name|boolean
name|includeRelocationTargets
parameter_list|)
block|{
return|return
name|allSatisfyingPredicateShardsGrouped
argument_list|(
name|indices
argument_list|,
name|includeEmpty
argument_list|,
name|includeRelocationTargets
argument_list|,
name|ACTIVE_PREDICATE
argument_list|)
return|;
block|}
DECL|method|allAssignedShardsGrouped
specifier|public
name|GroupShardsIterator
name|allAssignedShardsGrouped
parameter_list|(
name|String
index|[]
name|indices
parameter_list|,
name|boolean
name|includeEmpty
parameter_list|)
block|{
return|return
name|allAssignedShardsGrouped
argument_list|(
name|indices
argument_list|,
name|includeEmpty
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Return GroupShardsIterator where each assigned shard routing has it's own shard iterator.      *      * @param includeEmpty             if true, a shard iterator will be added for non-assigned shards as well      * @param includeRelocationTargets if true, an<b>extra</b> shard iterator will be added for relocating shards. The extra      *                                 iterator contains a single ShardRouting pointing at the relocating target      */
DECL|method|allAssignedShardsGrouped
specifier|public
name|GroupShardsIterator
name|allAssignedShardsGrouped
parameter_list|(
name|String
index|[]
name|indices
parameter_list|,
name|boolean
name|includeEmpty
parameter_list|,
name|boolean
name|includeRelocationTargets
parameter_list|)
block|{
return|return
name|allSatisfyingPredicateShardsGrouped
argument_list|(
name|indices
argument_list|,
name|includeEmpty
argument_list|,
name|includeRelocationTargets
argument_list|,
name|ASSIGNED_PREDICATE
argument_list|)
return|;
block|}
DECL|field|ACTIVE_PREDICATE
specifier|private
specifier|static
name|Predicate
argument_list|<
name|ShardRouting
argument_list|>
name|ACTIVE_PREDICATE
init|=
name|shardRouting
lambda|->
name|shardRouting
operator|.
name|active
argument_list|()
decl_stmt|;
DECL|field|ASSIGNED_PREDICATE
specifier|private
specifier|static
name|Predicate
argument_list|<
name|ShardRouting
argument_list|>
name|ASSIGNED_PREDICATE
init|=
name|shardRouting
lambda|->
name|shardRouting
operator|.
name|assignedToNode
argument_list|()
decl_stmt|;
DECL|method|allSatisfyingPredicateShardsGrouped
specifier|private
name|GroupShardsIterator
name|allSatisfyingPredicateShardsGrouped
parameter_list|(
name|String
index|[]
name|indices
parameter_list|,
name|boolean
name|includeEmpty
parameter_list|,
name|boolean
name|includeRelocationTargets
parameter_list|,
name|Predicate
argument_list|<
name|ShardRouting
argument_list|>
name|predicate
parameter_list|)
block|{
comment|// use list here since we need to maintain identity across shards
name|ArrayList
argument_list|<
name|ShardIterator
argument_list|>
name|set
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRoutingTable
operator|==
literal|null
condition|)
block|{
continue|continue;
comment|// we simply ignore indices that don't exists (make sense for operations that use it currently)
block|}
for|for
control|(
name|IndexShardRoutingTable
name|indexShardRoutingTable
range|:
name|indexRoutingTable
control|)
block|{
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|indexShardRoutingTable
control|)
block|{
if|if
condition|(
name|predicate
operator|.
name|test
argument_list|(
name|shardRouting
argument_list|)
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|shardRouting
operator|.
name|shardsIt
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeRelocationTargets
operator|&&
name|shardRouting
operator|.
name|relocating
argument_list|()
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
operator|new
name|PlainShardIterator
argument_list|(
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|shardRouting
operator|.
name|getTargetRelocatingShard
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|includeEmpty
condition|)
block|{
comment|// we need this for counting properly, just make it an empty one
name|set
operator|.
name|add
argument_list|(
operator|new
name|PlainShardIterator
argument_list|(
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|ShardRouting
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
operator|new
name|GroupShardsIterator
argument_list|(
name|set
argument_list|)
return|;
block|}
DECL|method|allShards
specifier|public
name|ShardsIterator
name|allShards
parameter_list|(
name|String
index|[]
name|indices
parameter_list|)
block|{
return|return
name|allShardsSatisfyingPredicate
argument_list|(
name|indices
argument_list|,
name|shardRouting
lambda|->
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|allShardsIncludingRelocationTargets
specifier|public
name|ShardsIterator
name|allShardsIncludingRelocationTargets
parameter_list|(
name|String
index|[]
name|indices
parameter_list|)
block|{
return|return
name|allShardsSatisfyingPredicate
argument_list|(
name|indices
argument_list|,
name|shardRouting
lambda|->
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|allShardsSatisfyingPredicate
specifier|private
name|ShardsIterator
name|allShardsSatisfyingPredicate
parameter_list|(
name|String
index|[]
name|indices
parameter_list|,
name|Predicate
argument_list|<
name|ShardRouting
argument_list|>
name|predicate
parameter_list|,
name|boolean
name|includeRelocationTargets
parameter_list|)
block|{
comment|// use list here since we need to maintain identity across shards
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRoutingTable
operator|==
literal|null
condition|)
block|{
continue|continue;
comment|// we simply ignore indices that don't exists (make sense for operations that use it currently)
block|}
for|for
control|(
name|IndexShardRoutingTable
name|indexShardRoutingTable
range|:
name|indexRoutingTable
control|)
block|{
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|indexShardRoutingTable
control|)
block|{
if|if
condition|(
name|predicate
operator|.
name|test
argument_list|(
name|shardRouting
argument_list|)
condition|)
block|{
name|shards
operator|.
name|add
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeRelocationTargets
operator|&&
name|shardRouting
operator|.
name|relocating
argument_list|()
condition|)
block|{
name|shards
operator|.
name|add
argument_list|(
name|shardRouting
operator|.
name|getTargetRelocatingShard
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
operator|new
name|PlainShardsIterator
argument_list|(
name|shards
argument_list|)
return|;
block|}
comment|/**      * All the *active* primary shards for the provided indices grouped (each group is a single element, consisting      * of the primary shard). This is handy for components that expect to get group iterators, but still want in some      * cases to iterate over all primary shards (and not just one shard in replication group).      *      * @param indices The indices to return all the shards (replicas)      * @return All the primary shards grouped into a single shard element group each      * @throws IndexNotFoundException If an index passed does not exists      * @see IndexRoutingTable#groupByAllIt()      */
DECL|method|activePrimaryShardsGrouped
specifier|public
name|GroupShardsIterator
name|activePrimaryShardsGrouped
parameter_list|(
name|String
index|[]
name|indices
parameter_list|,
name|boolean
name|includeEmpty
parameter_list|)
block|{
comment|// use list here since we need to maintain identity across shards
name|ArrayList
argument_list|<
name|ShardIterator
argument_list|>
name|set
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRoutingTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexNotFoundException
argument_list|(
name|index
argument_list|)
throw|;
block|}
for|for
control|(
name|IndexShardRoutingTable
name|indexShardRoutingTable
range|:
name|indexRoutingTable
control|)
block|{
name|ShardRouting
name|primary
init|=
name|indexShardRoutingTable
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
if|if
condition|(
name|primary
operator|.
name|active
argument_list|()
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|primary
operator|.
name|shardsIt
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeEmpty
condition|)
block|{
comment|// we need this for counting properly, just make it an empty one
name|set
operator|.
name|add
argument_list|(
operator|new
name|PlainShardIterator
argument_list|(
name|primary
operator|.
name|shardId
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|ShardRouting
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|GroupShardsIterator
argument_list|(
name|set
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|diff
specifier|public
name|Diff
argument_list|<
name|RoutingTable
argument_list|>
name|diff
parameter_list|(
name|RoutingTable
name|previousState
parameter_list|)
block|{
return|return
operator|new
name|RoutingTableDiff
argument_list|(
name|previousState
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readDiffFrom
specifier|public
name|Diff
argument_list|<
name|RoutingTable
argument_list|>
name|readDiffFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|RoutingTableDiff
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|RoutingTable
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|IndexRoutingTable
name|index
init|=
name|IndexRoutingTable
operator|.
name|Builder
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|indicesRouting
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexRoutingTable
argument_list|>
name|index
range|:
name|indicesRouting
operator|.
name|values
argument_list|()
control|)
block|{
name|index
operator|.
name|value
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RoutingTableDiff
specifier|private
specifier|static
class|class
name|RoutingTableDiff
implements|implements
name|Diff
argument_list|<
name|RoutingTable
argument_list|>
block|{
DECL|field|version
specifier|private
specifier|final
name|long
name|version
decl_stmt|;
DECL|field|indicesRouting
specifier|private
specifier|final
name|Diff
argument_list|<
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexRoutingTable
argument_list|>
argument_list|>
name|indicesRouting
decl_stmt|;
DECL|method|RoutingTableDiff
specifier|public
name|RoutingTableDiff
parameter_list|(
name|RoutingTable
name|before
parameter_list|,
name|RoutingTable
name|after
parameter_list|)
block|{
name|version
operator|=
name|after
operator|.
name|version
expr_stmt|;
name|indicesRouting
operator|=
name|DiffableUtils
operator|.
name|diff
argument_list|(
name|before
operator|.
name|indicesRouting
argument_list|,
name|after
operator|.
name|indicesRouting
argument_list|,
name|DiffableUtils
operator|.
name|getStringKeySerializer
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|RoutingTableDiff
specifier|public
name|RoutingTableDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|indicesRouting
operator|=
name|DiffableUtils
operator|.
name|readImmutableOpenMapDiff
argument_list|(
name|in
argument_list|,
name|DiffableUtils
operator|.
name|getStringKeySerializer
argument_list|()
argument_list|,
name|IndexRoutingTable
operator|.
name|PROTO
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|RoutingTable
name|apply
parameter_list|(
name|RoutingTable
name|part
parameter_list|)
block|{
return|return
operator|new
name|RoutingTable
argument_list|(
name|version
argument_list|,
name|indicesRouting
operator|.
name|apply
argument_list|(
name|part
operator|.
name|indicesRouting
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|indicesRouting
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|(
name|RoutingTable
name|routingTable
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|routingTable
argument_list|)
return|;
block|}
comment|/**      * Builder for the routing table. Note that build can only be called one time.      */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|version
specifier|private
name|long
name|version
decl_stmt|;
DECL|field|indicesRouting
specifier|private
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|IndexRoutingTable
argument_list|>
name|indicesRouting
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|()
block|{          }
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|RoutingTable
name|routingTable
parameter_list|)
block|{
name|version
operator|=
name|routingTable
operator|.
name|version
expr_stmt|;
for|for
control|(
name|IndexRoutingTable
name|indexRoutingTable
range|:
name|routingTable
control|)
block|{
name|indicesRouting
operator|.
name|put
argument_list|(
name|indexRoutingTable
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|indexRoutingTable
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateNodes
specifier|public
name|Builder
name|updateNodes
parameter_list|(
name|long
name|version
parameter_list|,
name|RoutingNodes
name|routingNodes
parameter_list|)
block|{
comment|// this is being called without pre initializing the routing table, so we must copy over the version as well
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|IndexRoutingTable
operator|.
name|Builder
argument_list|>
name|indexRoutingTableBuilders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoutingNode
name|routingNode
range|:
name|routingNodes
control|)
block|{
for|for
control|(
name|ShardRouting
name|shardRoutingEntry
range|:
name|routingNode
control|)
block|{
comment|// every relocating shard has a double entry, ignore the target one.
if|if
condition|(
name|shardRoutingEntry
operator|.
name|initializing
argument_list|()
operator|&&
name|shardRoutingEntry
operator|.
name|relocatingNodeId
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
name|Index
name|index
init|=
name|shardRoutingEntry
operator|.
name|index
argument_list|()
decl_stmt|;
name|IndexRoutingTable
operator|.
name|Builder
name|indexBuilder
init|=
name|indexRoutingTableBuilders
operator|.
name|get
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexBuilder
operator|==
literal|null
condition|)
block|{
name|indexBuilder
operator|=
operator|new
name|IndexRoutingTable
operator|.
name|Builder
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|indexRoutingTableBuilders
operator|.
name|put
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|,
name|indexBuilder
argument_list|)
expr_stmt|;
block|}
name|indexBuilder
operator|.
name|addShard
argument_list|(
name|shardRoutingEntry
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterable
argument_list|<
name|ShardRouting
argument_list|>
name|shardRoutingEntries
init|=
name|Iterables
operator|.
name|concat
argument_list|(
name|routingNodes
operator|.
name|unassigned
argument_list|()
argument_list|,
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardRoutingEntry
range|:
name|shardRoutingEntries
control|)
block|{
name|Index
name|index
init|=
name|shardRoutingEntry
operator|.
name|index
argument_list|()
decl_stmt|;
name|IndexRoutingTable
operator|.
name|Builder
name|indexBuilder
init|=
name|indexRoutingTableBuilders
operator|.
name|get
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexBuilder
operator|==
literal|null
condition|)
block|{
name|indexBuilder
operator|=
operator|new
name|IndexRoutingTable
operator|.
name|Builder
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|indexRoutingTableBuilders
operator|.
name|put
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|,
name|indexBuilder
argument_list|)
expr_stmt|;
block|}
name|indexBuilder
operator|.
name|addShard
argument_list|(
name|shardRoutingEntry
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|IndexRoutingTable
operator|.
name|Builder
name|indexBuilder
range|:
name|indexRoutingTableBuilders
operator|.
name|values
argument_list|()
control|)
block|{
name|add
argument_list|(
name|indexBuilder
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|updateNumberOfReplicas
specifier|public
name|Builder
name|updateNumberOfReplicas
parameter_list|(
name|int
name|numberOfReplicas
parameter_list|,
name|String
modifier|...
name|indices
parameter_list|)
block|{
if|if
condition|(
name|indicesRouting
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"once build is called the builder cannot be reused"
argument_list|)
throw|;
block|}
if|if
condition|(
name|indices
operator|==
literal|null
operator|||
name|indices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|indices
operator|=
name|indicesRouting
operator|.
name|keys
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|indicesRouting
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRoutingTable
operator|==
literal|null
condition|)
block|{
comment|// ignore index missing failure, its closed...
continue|continue;
block|}
name|int
name|currentNumberOfReplicas
init|=
name|indexRoutingTable
operator|.
name|shards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
comment|// remove the required primary
name|IndexRoutingTable
operator|.
name|Builder
name|builder
init|=
operator|new
name|IndexRoutingTable
operator|.
name|Builder
argument_list|(
name|indexRoutingTable
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
comment|// re-add all the shards
for|for
control|(
name|IndexShardRoutingTable
name|indexShardRoutingTable
range|:
name|indexRoutingTable
control|)
block|{
name|builder
operator|.
name|addIndexShard
argument_list|(
name|indexShardRoutingTable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentNumberOfReplicas
operator|<
name|numberOfReplicas
condition|)
block|{
comment|// now, add "empty" ones
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|numberOfReplicas
operator|-
name|currentNumberOfReplicas
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|addReplica
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentNumberOfReplicas
operator|>
name|numberOfReplicas
condition|)
block|{
name|int
name|delta
init|=
name|currentNumberOfReplicas
operator|-
name|numberOfReplicas
decl_stmt|;
if|if
condition|(
name|delta
operator|<=
literal|0
condition|)
block|{
comment|// ignore, can't remove below the current one...
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|delta
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|removeReplica
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|indicesRouting
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|addAsNew
specifier|public
name|Builder
name|addAsNew
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|getState
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
condition|)
block|{
name|IndexRoutingTable
operator|.
name|Builder
name|indexRoutingBuilder
init|=
operator|new
name|IndexRoutingTable
operator|.
name|Builder
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|initializeAsNew
argument_list|(
name|indexMetaData
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|indexRoutingBuilder
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|addAsRecovery
specifier|public
name|Builder
name|addAsRecovery
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|getState
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
condition|)
block|{
name|IndexRoutingTable
operator|.
name|Builder
name|indexRoutingBuilder
init|=
operator|new
name|IndexRoutingTable
operator|.
name|Builder
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|initializeAsRecovery
argument_list|(
name|indexMetaData
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|indexRoutingBuilder
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|addAsFromDangling
specifier|public
name|Builder
name|addAsFromDangling
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|getState
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
condition|)
block|{
name|IndexRoutingTable
operator|.
name|Builder
name|indexRoutingBuilder
init|=
operator|new
name|IndexRoutingTable
operator|.
name|Builder
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|initializeAsFromDangling
argument_list|(
name|indexMetaData
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|indexRoutingBuilder
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|addAsFromCloseToOpen
specifier|public
name|Builder
name|addAsFromCloseToOpen
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|getState
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
condition|)
block|{
name|IndexRoutingTable
operator|.
name|Builder
name|indexRoutingBuilder
init|=
operator|new
name|IndexRoutingTable
operator|.
name|Builder
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|initializeAsFromCloseToOpen
argument_list|(
name|indexMetaData
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|indexRoutingBuilder
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|addAsRestore
specifier|public
name|Builder
name|addAsRestore
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|RestoreSource
name|restoreSource
parameter_list|)
block|{
name|IndexRoutingTable
operator|.
name|Builder
name|indexRoutingBuilder
init|=
operator|new
name|IndexRoutingTable
operator|.
name|Builder
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|initializeAsRestore
argument_list|(
name|indexMetaData
argument_list|,
name|restoreSource
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|indexRoutingBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addAsNewRestore
specifier|public
name|Builder
name|addAsNewRestore
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|RestoreSource
name|restoreSource
parameter_list|,
name|IntSet
name|ignoreShards
parameter_list|)
block|{
name|IndexRoutingTable
operator|.
name|Builder
name|indexRoutingBuilder
init|=
operator|new
name|IndexRoutingTable
operator|.
name|Builder
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|initializeAsNewRestore
argument_list|(
name|indexMetaData
argument_list|,
name|restoreSource
argument_list|,
name|ignoreShards
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|indexRoutingBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|add
specifier|public
name|Builder
name|add
parameter_list|(
name|IndexRoutingTable
name|indexRoutingTable
parameter_list|)
block|{
if|if
condition|(
name|indicesRouting
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"once build is called the builder cannot be reused"
argument_list|)
throw|;
block|}
name|indicesRouting
operator|.
name|put
argument_list|(
name|indexRoutingTable
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|indexRoutingTable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|add
specifier|public
name|Builder
name|add
parameter_list|(
name|IndexRoutingTable
operator|.
name|Builder
name|indexRoutingTableBuilder
parameter_list|)
block|{
name|add
argument_list|(
name|indexRoutingTableBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|indicesRouting
specifier|public
name|Builder
name|indicesRouting
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|IndexRoutingTable
argument_list|>
name|indicesRouting
parameter_list|)
block|{
if|if
condition|(
name|indicesRouting
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"once build is called the builder cannot be reused"
argument_list|)
throw|;
block|}
name|this
operator|.
name|indicesRouting
operator|.
name|putAll
argument_list|(
name|indicesRouting
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|remove
specifier|public
name|Builder
name|remove
parameter_list|(
name|String
name|index
parameter_list|)
block|{
if|if
condition|(
name|indicesRouting
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"once build is called the builder cannot be reused"
argument_list|)
throw|;
block|}
name|indicesRouting
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|version
specifier|public
name|Builder
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Builds the routing table. Note that once this is called the builder          * must be thrown away. If you need to build a new RoutingTable as a          * copy of this one you'll need to build a new RoutingTable.Builder.          */
DECL|method|build
specifier|public
name|RoutingTable
name|build
parameter_list|()
block|{
if|if
condition|(
name|indicesRouting
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"once build is called the builder cannot be reused"
argument_list|)
throw|;
block|}
name|RoutingTable
name|table
init|=
operator|new
name|RoutingTable
argument_list|(
name|version
argument_list|,
name|indicesRouting
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|indicesRouting
operator|=
literal|null
expr_stmt|;
return|return
name|table
return|;
block|}
DECL|method|readFrom
specifier|public
specifier|static
name|RoutingTable
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|PROTO
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
DECL|method|prettyPrint
specifier|public
name|String
name|prettyPrint
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"routing_table (version "
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
operator|.
name|append
argument_list|(
literal|"):\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|IndexRoutingTable
argument_list|>
name|entry
range|:
name|indicesRouting
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|value
operator|.
name|prettyPrint
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

