begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingChangesObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Observer that tracks changes made to RoutingNodes in order to update the primary terms and in-sync allocation ids in  * {@link IndexMetaData} once the allocation round has completed.  *  * Primary terms are updated on primary initialization or primary promotion.  *  * Allocation ids are added for shards that become active and removed for shards that stop being active.  */
end_comment

begin_class
DECL|class|IndexMetaDataUpdater
specifier|public
class|class
name|IndexMetaDataUpdater
extends|extends
name|RoutingChangesObserver
operator|.
name|AbstractRoutingChangesObserver
block|{
DECL|field|shardChanges
specifier|private
specifier|final
name|Map
argument_list|<
name|ShardId
argument_list|,
name|Updates
argument_list|>
name|shardChanges
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|shardInitialized
specifier|public
name|void
name|shardInitialized
parameter_list|(
name|ShardRouting
name|unassignedShard
parameter_list|)
block|{
if|if
condition|(
name|unassignedShard
operator|.
name|primary
argument_list|()
condition|)
block|{
name|increasePrimaryTerm
argument_list|(
name|unassignedShard
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|replicaPromoted
specifier|public
name|void
name|replicaPromoted
parameter_list|(
name|ShardRouting
name|replicaShard
parameter_list|)
block|{
name|increasePrimaryTerm
argument_list|(
name|replicaShard
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shardStarted
specifier|public
name|void
name|shardStarted
parameter_list|(
name|ShardRouting
name|initializingShard
parameter_list|,
name|ShardRouting
name|startedShard
parameter_list|)
block|{
name|addAllocationId
argument_list|(
name|startedShard
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shardFailed
specifier|public
name|void
name|shardFailed
parameter_list|(
name|ShardRouting
name|failedShard
parameter_list|,
name|UnassignedInfo
name|unassignedInfo
parameter_list|)
block|{
if|if
condition|(
name|failedShard
operator|.
name|active
argument_list|()
condition|)
block|{
name|removeAllocationId
argument_list|(
name|failedShard
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|relocationCompleted
specifier|public
name|void
name|relocationCompleted
parameter_list|(
name|ShardRouting
name|removedRelocationSource
parameter_list|)
block|{
name|removeAllocationId
argument_list|(
name|removedRelocationSource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startedPrimaryReinitialized
specifier|public
name|void
name|startedPrimaryReinitialized
parameter_list|(
name|ShardRouting
name|startedPrimaryShard
parameter_list|,
name|ShardRouting
name|initializedShard
parameter_list|)
block|{
name|removeAllocationId
argument_list|(
name|startedPrimaryShard
argument_list|)
expr_stmt|;
block|}
comment|/**      * Updates the current {@link MetaData} based on the changes of this RoutingChangesObserver. Specifically      * we update {@link IndexMetaData#getActiveAllocationIds()} and {@link IndexMetaData#primaryTerm(int)} based on      * the changes made during this allocation.      *      * @param oldMetaData {@link MetaData} object from before the routing nodes was changed.      * @return adapted {@link MetaData}, potentially the original one if no change was needed.      */
DECL|method|applyChanges
specifier|public
name|MetaData
name|applyChanges
parameter_list|(
name|MetaData
name|oldMetaData
parameter_list|)
block|{
name|Map
argument_list|<
name|Index
argument_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|ShardId
argument_list|,
name|Updates
argument_list|>
argument_list|>
argument_list|>
name|changesGroupedByIndex
init|=
name|shardChanges
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|MetaData
operator|.
name|Builder
name|metaDataBuilder
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Index
argument_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|ShardId
argument_list|,
name|Updates
argument_list|>
argument_list|>
argument_list|>
name|indexChanges
range|:
name|changesGroupedByIndex
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Index
name|index
init|=
name|indexChanges
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|IndexMetaData
name|oldIndexMetaData
init|=
name|oldMetaData
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldIndexMetaData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no metadata found for index "
operator|+
name|index
argument_list|)
throw|;
block|}
name|IndexMetaData
operator|.
name|Builder
name|indexMetaDataBuilder
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ShardId
argument_list|,
name|Updates
argument_list|>
name|shardEntry
range|:
name|indexChanges
operator|.
name|getValue
argument_list|()
control|)
block|{
name|ShardId
name|shardId
init|=
name|shardEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Updates
name|updates
init|=
name|shardEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
assert|assert
name|Sets
operator|.
name|haveEmptyIntersection
argument_list|(
name|updates
operator|.
name|addedAllocationIds
argument_list|,
name|updates
operator|.
name|removedAllocationIds
argument_list|)
operator|:
literal|"Allocation ids cannot be both added and removed in the same allocation round, added ids: "
operator|+
name|updates
operator|.
name|addedAllocationIds
operator|+
literal|", removed ids: "
operator|+
name|updates
operator|.
name|removedAllocationIds
assert|;
name|Set
argument_list|<
name|String
argument_list|>
name|activeAllocationIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|oldIndexMetaData
operator|.
name|activeAllocationIds
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|activeAllocationIds
operator|.
name|addAll
argument_list|(
name|updates
operator|.
name|addedAllocationIds
argument_list|)
expr_stmt|;
name|activeAllocationIds
operator|.
name|removeAll
argument_list|(
name|updates
operator|.
name|removedAllocationIds
argument_list|)
expr_stmt|;
comment|// only update active allocation ids if there is an active shard
if|if
condition|(
name|activeAllocationIds
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|indexMetaDataBuilder
operator|==
literal|null
condition|)
block|{
name|indexMetaDataBuilder
operator|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|oldIndexMetaData
argument_list|)
expr_stmt|;
block|}
name|indexMetaDataBuilder
operator|.
name|putActiveAllocationIds
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|,
name|activeAllocationIds
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updates
operator|.
name|increaseTerm
condition|)
block|{
if|if
condition|(
name|indexMetaDataBuilder
operator|==
literal|null
condition|)
block|{
name|indexMetaDataBuilder
operator|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|oldIndexMetaData
argument_list|)
expr_stmt|;
block|}
name|indexMetaDataBuilder
operator|.
name|primaryTerm
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|,
name|oldIndexMetaData
operator|.
name|primaryTerm
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|indexMetaDataBuilder
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|metaDataBuilder
operator|==
literal|null
condition|)
block|{
name|metaDataBuilder
operator|=
name|MetaData
operator|.
name|builder
argument_list|(
name|oldMetaData
argument_list|)
expr_stmt|;
block|}
name|metaDataBuilder
operator|.
name|put
argument_list|(
name|indexMetaDataBuilder
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|metaDataBuilder
operator|!=
literal|null
condition|)
block|{
return|return
name|metaDataBuilder
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|oldMetaData
return|;
block|}
block|}
comment|/**      * Helper method that creates update entry for the given shard id if such an entry does not exist yet.      */
DECL|method|changes
specifier|private
name|Updates
name|changes
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
return|return
name|shardChanges
operator|.
name|computeIfAbsent
argument_list|(
name|shardId
argument_list|,
name|k
lambda|->
operator|new
name|Updates
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Remove allocation id of this shard from the set of in-sync shard copies      */
DECL|method|removeAllocationId
specifier|private
name|void
name|removeAllocationId
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|)
block|{
name|changes
argument_list|(
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|)
operator|.
name|removedAllocationIds
operator|.
name|add
argument_list|(
name|shardRouting
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add allocation id of this shard to the set of in-sync shard copies      */
DECL|method|addAllocationId
specifier|private
name|void
name|addAllocationId
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|)
block|{
name|changes
argument_list|(
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|)
operator|.
name|addedAllocationIds
operator|.
name|add
argument_list|(
name|shardRouting
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Increase primary term for this shard id      */
DECL|method|increasePrimaryTerm
specifier|private
name|void
name|increasePrimaryTerm
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|)
block|{
name|changes
argument_list|(
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|)
operator|.
name|increaseTerm
operator|=
literal|true
expr_stmt|;
block|}
DECL|class|Updates
specifier|private
specifier|static
class|class
name|Updates
block|{
DECL|field|increaseTerm
specifier|private
name|boolean
name|increaseTerm
decl_stmt|;
comment|// whether primary term should be increased
DECL|field|addedAllocationIds
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|addedAllocationIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// allocation ids that should be added to the in-sync set
DECL|field|removedAllocationIds
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|removedAllocationIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// allocation ids that should be removed from the in-sync set
block|}
block|}
end_class

end_unit

