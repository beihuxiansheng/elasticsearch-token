begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|BalancedShardsAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|ShardsAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDeciders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AwarenessAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|ClusterRebalanceAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|ConcurrentRebalanceAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|DisableAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|DiskThresholdDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|EnableAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|FilterAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|NodeVersionAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|RebalanceOnlyWhenActiveAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|ReplicaAfterPrimaryActiveAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|SameShardAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|ShardsLimitAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|SnapshotInProgressAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|ThrottlingAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|multibindings
operator|.
name|Multibinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayAllocator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A module to setup classes related to shard allocation.  *  * There are two basic concepts for allocation.  *<ul>  *<li>An {@link AllocationDecider} decides *when* an allocation should be attempted.</li>  *<li>A {@link ShardsAllocator} determins *how* an allocation takes place</li>  *</ul>  */
end_comment

begin_class
DECL|class|AllocationModule
specifier|public
class|class
name|AllocationModule
extends|extends
name|AbstractModule
block|{
DECL|field|EVEN_SHARD_COUNT_ALLOCATOR
specifier|public
specifier|static
specifier|final
name|String
name|EVEN_SHARD_COUNT_ALLOCATOR
init|=
literal|"even_shard"
decl_stmt|;
DECL|field|BALANCED_ALLOCATOR
specifier|public
specifier|static
specifier|final
name|String
name|BALANCED_ALLOCATOR
init|=
literal|"balanced"
decl_stmt|;
comment|// default
DECL|field|SHARDS_ALLOCATOR_TYPE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|SHARDS_ALLOCATOR_TYPE_KEY
init|=
literal|"cluster.routing.allocation.type"
decl_stmt|;
DECL|field|DEFAULT_ALLOCATION_DECIDERS
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AllocationDecider
argument_list|>
argument_list|>
name|DEFAULT_ALLOCATION_DECIDERS
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SameShardAllocationDecider
operator|.
name|class
argument_list|,
name|FilterAllocationDecider
operator|.
name|class
argument_list|,
name|ReplicaAfterPrimaryActiveAllocationDecider
operator|.
name|class
argument_list|,
name|ThrottlingAllocationDecider
operator|.
name|class
argument_list|,
name|RebalanceOnlyWhenActiveAllocationDecider
operator|.
name|class
argument_list|,
name|ClusterRebalanceAllocationDecider
operator|.
name|class
argument_list|,
name|ConcurrentRebalanceAllocationDecider
operator|.
name|class
argument_list|,
name|EnableAllocationDecider
operator|.
name|class
argument_list|,
comment|// new enable allocation logic should proceed old disable allocation logic
name|DisableAllocationDecider
operator|.
name|class
argument_list|,
name|AwarenessAllocationDecider
operator|.
name|class
argument_list|,
name|ShardsLimitAllocationDecider
operator|.
name|class
argument_list|,
name|NodeVersionAllocationDecider
operator|.
name|class
argument_list|,
name|DiskThresholdDecider
operator|.
name|class
argument_list|,
name|SnapshotInProgressAllocationDecider
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|field|shardsAllocators
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ShardsAllocator
argument_list|>
argument_list|>
name|shardsAllocators
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|allocationDeciders
specifier|private
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AllocationDecider
argument_list|>
argument_list|>
name|allocationDeciders
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|AllocationModule
specifier|public
name|AllocationModule
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|this
operator|.
name|allocationDeciders
operator|.
name|addAll
argument_list|(
name|DEFAULT_ALLOCATION_DECIDERS
argument_list|)
expr_stmt|;
name|registerShardAllocator
argument_list|(
name|BALANCED_ALLOCATOR
argument_list|,
name|BalancedShardsAllocator
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerShardAllocator
argument_list|(
name|EVEN_SHARD_COUNT_ALLOCATOR
argument_list|,
name|BalancedShardsAllocator
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/** Register a custom allocation decider */
DECL|method|registerAllocationDecider
specifier|public
name|void
name|registerAllocationDecider
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|AllocationDecider
argument_list|>
name|allocationDecider
parameter_list|)
block|{
name|boolean
name|isNew
init|=
name|allocationDeciders
operator|.
name|add
argument_list|(
name|allocationDecider
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNew
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot register AllocationDecider "
operator|+
name|allocationDecider
operator|.
name|getName
argument_list|()
operator|+
literal|" twice"
argument_list|)
throw|;
block|}
block|}
comment|/** Register a custom shard allocator with the given name */
DECL|method|registerShardAllocator
specifier|public
name|void
name|registerShardAllocator
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ShardsAllocator
argument_list|>
name|clazz
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ShardsAllocator
argument_list|>
name|existing
init|=
name|shardsAllocators
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot register ShardAllocator ["
operator|+
name|name
operator|+
literal|"] to "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|", already registered to "
operator|+
name|existing
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|configure
specifier|protected
name|void
name|configure
parameter_list|()
block|{
comment|// bind ShardsAllocator
specifier|final
name|String
name|shardsAllocatorType
init|=
name|settings
operator|.
name|get
argument_list|(
name|AllocationModule
operator|.
name|SHARDS_ALLOCATOR_TYPE_KEY
argument_list|,
name|AllocationModule
operator|.
name|BALANCED_ALLOCATOR
argument_list|)
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|ShardsAllocator
argument_list|>
name|shardsAllocator
init|=
name|shardsAllocators
operator|.
name|get
argument_list|(
name|shardsAllocatorType
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardsAllocator
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown ShardsAllocator type ["
operator|+
name|shardsAllocatorType
operator|+
literal|"]"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|shardsAllocatorType
operator|.
name|equals
argument_list|(
name|EVEN_SHARD_COUNT_ALLOCATOR
argument_list|)
condition|)
block|{
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"{} allocator has been removed in 2.0 using {} instead"
argument_list|,
name|AllocationModule
operator|.
name|EVEN_SHARD_COUNT_ALLOCATOR
argument_list|,
name|AllocationModule
operator|.
name|BALANCED_ALLOCATOR
argument_list|)
expr_stmt|;
block|}
name|bind
argument_list|(
name|ShardsAllocator
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|shardsAllocator
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
comment|// bind AllocationDeciders
name|Multibinder
argument_list|<
name|AllocationDecider
argument_list|>
name|allocationMultibinder
init|=
name|Multibinder
operator|.
name|newSetBinder
argument_list|(
name|binder
argument_list|()
argument_list|,
name|AllocationDecider
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|AllocationDecider
argument_list|>
name|allocation
range|:
name|allocationDeciders
control|)
block|{
name|allocationMultibinder
operator|.
name|addBinding
argument_list|()
operator|.
name|to
argument_list|(
name|allocation
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
block|}
name|bind
argument_list|(
name|GatewayAllocator
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|AllocationDeciders
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|AllocationService
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

