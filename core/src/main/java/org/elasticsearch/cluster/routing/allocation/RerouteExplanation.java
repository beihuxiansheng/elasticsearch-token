begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocationCommands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Class encapsulating the explanation for a single {@link AllocationCommand}  * taken from the Deciders  */
end_comment

begin_class
DECL|class|RerouteExplanation
specifier|public
class|class
name|RerouteExplanation
implements|implements
name|ToXContent
block|{
DECL|field|command
specifier|private
name|AllocationCommand
name|command
decl_stmt|;
DECL|field|decisions
specifier|private
name|Decision
name|decisions
decl_stmt|;
DECL|method|RerouteExplanation
specifier|public
name|RerouteExplanation
parameter_list|(
name|AllocationCommand
name|command
parameter_list|,
name|Decision
name|decisions
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|this
operator|.
name|decisions
operator|=
name|decisions
expr_stmt|;
block|}
DECL|method|command
specifier|public
name|AllocationCommand
name|command
parameter_list|()
block|{
return|return
name|this
operator|.
name|command
return|;
block|}
DECL|method|decisions
specifier|public
name|Decision
name|decisions
parameter_list|()
block|{
return|return
name|this
operator|.
name|decisions
return|;
block|}
DECL|method|readFrom
specifier|public
specifier|static
name|RerouteExplanation
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|AllocationCommand
name|command
init|=
name|in
operator|.
name|readAllocationCommand
argument_list|()
decl_stmt|;
name|Decision
name|decisions
init|=
name|Decision
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
operator|new
name|RerouteExplanation
argument_list|(
name|command
argument_list|,
name|decisions
argument_list|)
return|;
block|}
DECL|method|writeTo
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|RerouteExplanation
name|explanation
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeAllocationCommand
argument_list|(
name|explanation
operator|.
name|command
argument_list|)
expr_stmt|;
name|Decision
operator|.
name|writeTo
argument_list|(
name|explanation
operator|.
name|decisions
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"command"
argument_list|,
name|command
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"parameters"
argument_list|,
name|command
argument_list|)
expr_stmt|;
comment|// The Decision could be a Multi or Single decision, and they should
comment|// both be encoded the same, so check and wrap in an array if necessary
if|if
condition|(
name|decisions
operator|instanceof
name|Decision
operator|.
name|Multi
condition|)
block|{
name|decisions
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"decisions"
argument_list|)
expr_stmt|;
name|decisions
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

