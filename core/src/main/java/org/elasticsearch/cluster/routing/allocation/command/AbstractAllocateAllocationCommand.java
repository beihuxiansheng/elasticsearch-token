begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation.command
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RerouteExplanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamableReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_comment
comment|/**  * Abstract base class for allocating an unassigned shard to a node  */
end_comment

begin_class
DECL|class|AbstractAllocateAllocationCommand
specifier|public
specifier|abstract
class|class
name|AbstractAllocateAllocationCommand
implements|implements
name|AllocationCommand
implements|,
name|ToXContent
block|{
DECL|field|INDEX_KEY
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_KEY
init|=
literal|"index"
decl_stmt|;
DECL|field|SHARD_KEY
specifier|private
specifier|static
specifier|final
name|String
name|SHARD_KEY
init|=
literal|"shard"
decl_stmt|;
DECL|field|NODE_KEY
specifier|private
specifier|static
specifier|final
name|String
name|NODE_KEY
init|=
literal|"node"
decl_stmt|;
DECL|method|createAllocateParser
specifier|protected
specifier|static
parameter_list|<
name|T
extends|extends
name|Builder
parameter_list|>
name|ObjectParser
argument_list|<
name|T
argument_list|,
name|Void
argument_list|>
name|createAllocateParser
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|ObjectParser
argument_list|<
name|T
argument_list|,
name|Void
argument_list|>
name|parser
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|parser
operator|.
name|declareString
argument_list|(
name|Builder
operator|::
name|setIndex
argument_list|,
operator|new
name|ParseField
argument_list|(
name|INDEX_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|declareInt
argument_list|(
name|Builder
operator|::
name|setShard
argument_list|,
operator|new
name|ParseField
argument_list|(
name|SHARD_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|declareString
argument_list|(
name|Builder
operator|::
name|setNode
argument_list|,
operator|new
name|ParseField
argument_list|(
name|NODE_KEY
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|parser
return|;
block|}
DECL|class|Builder
specifier|protected
specifier|static
specifier|abstract
class|class
name|Builder
parameter_list|<
name|T
extends|extends
name|AbstractAllocateAllocationCommand
parameter_list|>
implements|implements
name|StreamableReader
argument_list|<
name|Builder
argument_list|<
name|T
argument_list|>
argument_list|>
block|{
DECL|field|index
specifier|protected
name|String
name|index
decl_stmt|;
DECL|field|shard
specifier|protected
name|int
name|shard
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|node
specifier|protected
name|String
name|node
decl_stmt|;
DECL|method|setIndex
specifier|public
name|void
name|setIndex
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
DECL|method|setShard
specifier|public
name|void
name|setShard
parameter_list|(
name|int
name|shard
parameter_list|)
block|{
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
block|}
DECL|method|setNode
specifier|public
name|void
name|setNode
parameter_list|(
name|String
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|Builder
argument_list|<
name|T
argument_list|>
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|index
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|shard
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|node
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|parse
specifier|public
specifier|abstract
name|Builder
argument_list|<
name|T
argument_list|>
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|build
specifier|public
specifier|abstract
name|T
name|build
parameter_list|()
function_decl|;
DECL|method|validate
specifier|protected
name|void
name|validate
parameter_list|()
block|{
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument [index] must be defined"
argument_list|)
throw|;
block|}
if|if
condition|(
name|shard
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument [shard] must be defined and non-negative"
argument_list|)
throw|;
block|}
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument [node] must be defined"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|INDEX_KEY
argument_list|,
name|index
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SHARD_KEY
argument_list|,
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|NODE_KEY
argument_list|,
name|node
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
DECL|class|Factory
specifier|public
specifier|static
specifier|abstract
class|class
name|Factory
parameter_list|<
name|T
extends|extends
name|AbstractAllocateAllocationCommand
parameter_list|>
implements|implements
name|AllocationCommand
operator|.
name|Factory
argument_list|<
name|T
argument_list|>
block|{
DECL|method|newBuilder
specifier|protected
specifier|abstract
name|Builder
argument_list|<
name|T
argument_list|>
name|newBuilder
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|T
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|newBuilder
argument_list|()
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|T
name|command
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|command
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fromXContent
specifier|public
name|T
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|newBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|void
name|toXContent
parameter_list|(
name|T
name|command
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|,
name|String
name|objectName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|objectName
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|index
specifier|protected
specifier|final
name|String
name|index
decl_stmt|;
DECL|field|shardId
specifier|protected
specifier|final
name|int
name|shardId
decl_stmt|;
DECL|field|node
specifier|protected
specifier|final
name|String
name|node
decl_stmt|;
DECL|method|AbstractAllocateAllocationCommand
specifier|protected
name|AbstractAllocateAllocationCommand
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|shardId
parameter_list|,
name|String
name|node
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
comment|/**      * Get the index name      *      * @return name of the index      */
DECL|method|index
specifier|public
name|String
name|index
parameter_list|()
block|{
return|return
name|this
operator|.
name|index
return|;
block|}
comment|/**      * Get the shard id      *      * @return id of the shard      */
DECL|method|shardId
specifier|public
name|int
name|shardId
parameter_list|()
block|{
return|return
name|this
operator|.
name|shardId
return|;
block|}
comment|/**      * Get the id of the node      *      * @return id of the node      */
DECL|method|node
specifier|public
name|String
name|node
parameter_list|()
block|{
return|return
name|this
operator|.
name|node
return|;
block|}
comment|/**      * Handle case where a disco node cannot be found in the routing table. Usually means that it's not a data node.      */
DECL|method|explainOrThrowMissingRoutingNode
specifier|protected
name|RerouteExplanation
name|explainOrThrowMissingRoutingNode
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|,
name|boolean
name|explain
parameter_list|,
name|DiscoveryNode
name|discoNode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|discoNode
operator|.
name|dataNode
argument_list|()
condition|)
block|{
return|return
name|explainOrThrowRejectedCommand
argument_list|(
name|explain
argument_list|,
name|allocation
argument_list|,
literal|"allocation can only be done on data nodes, not ["
operator|+
name|node
operator|+
literal|"]"
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|explainOrThrowRejectedCommand
argument_list|(
name|explain
argument_list|,
name|allocation
argument_list|,
literal|"could not find ["
operator|+
name|node
operator|+
literal|"] among the routing nodes"
argument_list|)
return|;
block|}
block|}
comment|/**      * Utility method for rejecting the current allocation command based on provided reason      */
DECL|method|explainOrThrowRejectedCommand
specifier|protected
name|RerouteExplanation
name|explainOrThrowRejectedCommand
parameter_list|(
name|boolean
name|explain
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
if|if
condition|(
name|explain
condition|)
block|{
return|return
operator|new
name|RerouteExplanation
argument_list|(
name|this
argument_list|,
name|allocation
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|name
argument_list|()
operator|+
literal|" (allocation command)"
argument_list|,
name|reason
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|name
argument_list|()
operator|+
literal|"] "
operator|+
name|reason
argument_list|)
throw|;
block|}
comment|/**      * Utility method for rejecting the current allocation command based on provided exception      */
DECL|method|explainOrThrowRejectedCommand
specifier|protected
name|RerouteExplanation
name|explainOrThrowRejectedCommand
parameter_list|(
name|boolean
name|explain
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|,
name|RuntimeException
name|rte
parameter_list|)
block|{
if|if
condition|(
name|explain
condition|)
block|{
return|return
operator|new
name|RerouteExplanation
argument_list|(
name|this
argument_list|,
name|allocation
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|name
argument_list|()
operator|+
literal|" (allocation command)"
argument_list|,
name|rte
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
throw|throw
name|rte
throw|;
block|}
comment|/**      * Initializes an unassigned shard on a node and removes it from the unassigned      *      * @param allocation the allocation      * @param routingNodes the routing nodes      * @param routingNode the node to initialize it to      * @param shardRouting the shard routing that is to be matched in unassigned shards      */
DECL|method|initializeUnassignedShard
specifier|protected
name|void
name|initializeUnassignedShard
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|,
name|RoutingNodes
name|routingNodes
parameter_list|,
name|RoutingNode
name|routingNode
parameter_list|,
name|ShardRouting
name|shardRouting
parameter_list|)
block|{
name|initializeUnassignedShard
argument_list|(
name|allocation
argument_list|,
name|routingNodes
argument_list|,
name|routingNode
argument_list|,
name|shardRouting
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initializes an unassigned shard on a node and removes it from the unassigned      *      * @param allocation the allocation      * @param routingNodes the routing nodes      * @param routingNode the node to initialize it to      * @param shardRouting the shard routing that is to be matched in unassigned shards      * @param shardRoutingChanges changes to apply for shard routing in unassigned shards before initialization      */
DECL|method|initializeUnassignedShard
specifier|protected
name|void
name|initializeUnassignedShard
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|,
name|RoutingNodes
name|routingNodes
parameter_list|,
name|RoutingNode
name|routingNode
parameter_list|,
name|ShardRouting
name|shardRouting
parameter_list|,
annotation|@
name|Nullable
name|Consumer
argument_list|<
name|ShardRouting
argument_list|>
name|shardRoutingChanges
parameter_list|)
block|{
for|for
control|(
name|RoutingNodes
operator|.
name|UnassignedShards
operator|.
name|UnassignedIterator
name|it
init|=
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ShardRouting
name|unassigned
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|unassigned
operator|.
name|equalsIgnoringMetaData
argument_list|(
name|shardRouting
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|shardRoutingChanges
operator|!=
literal|null
condition|)
block|{
name|shardRoutingChanges
operator|.
name|accept
argument_list|(
name|unassigned
argument_list|)
expr_stmt|;
block|}
name|it
operator|.
name|initialize
argument_list|(
name|routingNode
operator|.
name|nodeId
argument_list|()
argument_list|,
name|unassigned
operator|.
name|version
argument_list|()
argument_list|,
name|allocation
operator|.
name|clusterInfo
argument_list|()
operator|.
name|getShardSize
argument_list|(
name|unassigned
argument_list|,
name|ShardRouting
operator|.
name|UNAVAILABLE_EXPECTED_SHARD_SIZE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
assert|assert
literal|false
operator|:
literal|"shard to initialize not found in list of unassigned shards"
assert|;
block|}
block|}
end_class

end_unit

