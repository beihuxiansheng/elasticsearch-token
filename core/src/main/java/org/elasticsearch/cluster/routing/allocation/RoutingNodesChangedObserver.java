begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingChangesObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
import|;
end_import

begin_comment
comment|/**  * Records if changes were made to {@link RoutingNodes} during an allocation round.  */
end_comment

begin_class
DECL|class|RoutingNodesChangedObserver
specifier|public
class|class
name|RoutingNodesChangedObserver
implements|implements
name|RoutingChangesObserver
block|{
DECL|field|changed
specifier|private
name|boolean
name|changed
decl_stmt|;
comment|/**      * Returns whether changes were made      */
DECL|method|isChanged
specifier|public
name|boolean
name|isChanged
parameter_list|()
block|{
return|return
name|changed
return|;
block|}
annotation|@
name|Override
DECL|method|shardInitialized
specifier|public
name|void
name|shardInitialized
parameter_list|(
name|ShardRouting
name|unassignedShard
parameter_list|,
name|ShardRouting
name|initializedShard
parameter_list|)
block|{
assert|assert
name|unassignedShard
operator|.
name|unassigned
argument_list|()
operator|:
literal|"expected unassigned shard "
operator|+
name|unassignedShard
assert|;
assert|assert
name|initializedShard
operator|.
name|initializing
argument_list|()
operator|:
literal|"expected initializing shard "
operator|+
name|initializedShard
assert|;
name|setChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shardStarted
specifier|public
name|void
name|shardStarted
parameter_list|(
name|ShardRouting
name|initializingShard
parameter_list|,
name|ShardRouting
name|startedShard
parameter_list|)
block|{
assert|assert
name|initializingShard
operator|.
name|initializing
argument_list|()
operator|:
literal|"expected initializing shard "
operator|+
name|initializingShard
assert|;
assert|assert
name|startedShard
operator|.
name|started
argument_list|()
operator|:
literal|"expected started shard "
operator|+
name|startedShard
assert|;
name|setChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|relocationStarted
specifier|public
name|void
name|relocationStarted
parameter_list|(
name|ShardRouting
name|startedShard
parameter_list|,
name|ShardRouting
name|targetRelocatingShard
parameter_list|)
block|{
assert|assert
name|startedShard
operator|.
name|started
argument_list|()
operator|:
literal|"expected started shard "
operator|+
name|startedShard
assert|;
assert|assert
name|targetRelocatingShard
operator|.
name|isRelocationTarget
argument_list|()
operator|:
literal|"expected relocation target shard "
operator|+
name|targetRelocatingShard
assert|;
name|setChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|unassignedInfoUpdated
specifier|public
name|void
name|unassignedInfoUpdated
parameter_list|(
name|ShardRouting
name|unassignedShard
parameter_list|,
name|UnassignedInfo
name|newUnassignedInfo
parameter_list|)
block|{
assert|assert
name|unassignedShard
operator|.
name|unassigned
argument_list|()
operator|:
literal|"expected unassigned shard "
operator|+
name|unassignedShard
assert|;
name|setChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shardFailed
specifier|public
name|void
name|shardFailed
parameter_list|(
name|ShardRouting
name|failedShard
parameter_list|,
name|UnassignedInfo
name|unassignedInfo
parameter_list|)
block|{
assert|assert
name|failedShard
operator|.
name|assignedToNode
argument_list|()
operator|:
literal|"expected assigned shard "
operator|+
name|failedShard
assert|;
name|setChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|relocationCompleted
specifier|public
name|void
name|relocationCompleted
parameter_list|(
name|ShardRouting
name|removedRelocationSource
parameter_list|)
block|{
assert|assert
name|removedRelocationSource
operator|.
name|relocating
argument_list|()
operator|:
literal|"expected relocating shard "
operator|+
name|removedRelocationSource
assert|;
name|setChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|relocationSourceRemoved
specifier|public
name|void
name|relocationSourceRemoved
parameter_list|(
name|ShardRouting
name|removedReplicaRelocationSource
parameter_list|)
block|{
assert|assert
name|removedReplicaRelocationSource
operator|.
name|primary
argument_list|()
operator|==
literal|false
operator|&&
name|removedReplicaRelocationSource
operator|.
name|isRelocationTarget
argument_list|()
operator|:
literal|"expected replica relocation target shard "
operator|+
name|removedReplicaRelocationSource
assert|;
name|setChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startedPrimaryReinitialized
specifier|public
name|void
name|startedPrimaryReinitialized
parameter_list|(
name|ShardRouting
name|startedPrimaryShard
parameter_list|,
name|ShardRouting
name|initializedShard
parameter_list|)
block|{
assert|assert
name|startedPrimaryShard
operator|.
name|primary
argument_list|()
operator|&&
name|startedPrimaryShard
operator|.
name|started
argument_list|()
operator|:
literal|"expected started primary shard "
operator|+
name|startedPrimaryShard
assert|;
assert|assert
name|initializedShard
operator|.
name|primary
argument_list|()
operator|&&
name|initializedShard
operator|.
name|initializing
argument_list|()
operator|:
literal|"expected initializing primary shard "
operator|+
name|initializedShard
assert|;
name|setChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|replicaPromoted
specifier|public
name|void
name|replicaPromoted
parameter_list|(
name|ShardRouting
name|replicaShard
parameter_list|)
block|{
assert|assert
name|replicaShard
operator|.
name|started
argument_list|()
operator|&&
name|replicaShard
operator|.
name|primary
argument_list|()
operator|==
literal|false
operator|:
literal|"expected started replica shard "
operator|+
name|replicaShard
assert|;
name|setChanged
argument_list|()
expr_stmt|;
block|}
comment|/**      * Marks the allocation as changed.      */
DECL|method|setChanged
specifier|private
name|void
name|setChanged
parameter_list|()
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

