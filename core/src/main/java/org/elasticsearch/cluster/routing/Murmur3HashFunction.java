begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|HashFunction
import|;
end_import

begin_comment
comment|/**  * Hash function based on the Murmur3 algorithm, which is the default as of Elasticsearch 2.0.  */
end_comment

begin_class
DECL|class|Murmur3HashFunction
specifier|public
class|class
name|Murmur3HashFunction
implements|implements
name|HashFunction
block|{
annotation|@
name|Override
DECL|method|hash
specifier|public
name|int
name|hash
parameter_list|(
name|String
name|routing
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|bytesToHash
init|=
operator|new
name|byte
index|[
name|routing
operator|.
name|length
argument_list|()
operator|*
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|routing
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|char
name|c
init|=
name|routing
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|byte
name|b1
init|=
operator|(
name|byte
operator|)
name|c
decl_stmt|,
name|b2
init|=
call|(
name|byte
call|)
argument_list|(
name|c
operator|>>>
literal|8
argument_list|)
decl_stmt|;
assert|assert
operator|(
operator|(
name|b1
operator|&
literal|0xFF
operator|)
operator||
operator|(
operator|(
name|b2
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
operator|)
operator|==
name|c
assert|;
comment|// no information loss
name|bytesToHash
index|[
name|i
operator|*
literal|2
index|]
operator|=
name|b1
expr_stmt|;
name|bytesToHash
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|b2
expr_stmt|;
block|}
return|return
name|StringHelper
operator|.
name|murmurhash3_x86_32
argument_list|(
name|bytesToHash
argument_list|,
literal|0
argument_list|,
name|bytesToHash
operator|.
name|length
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hash
specifier|public
name|int
name|hash
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

