begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Represents a decision to relocate a started shard from its current node.  */
end_comment

begin_class
DECL|class|RelocationDecision
specifier|public
specifier|abstract
class|class
name|RelocationDecision
block|{
annotation|@
name|Nullable
DECL|field|finalDecision
specifier|private
specifier|final
name|Decision
operator|.
name|Type
name|finalDecision
decl_stmt|;
annotation|@
name|Nullable
DECL|field|finalExplanation
specifier|private
specifier|final
name|String
name|finalExplanation
decl_stmt|;
annotation|@
name|Nullable
DECL|field|assignedNodeId
specifier|private
specifier|final
name|String
name|assignedNodeId
decl_stmt|;
DECL|method|RelocationDecision
specifier|protected
name|RelocationDecision
parameter_list|(
name|Decision
operator|.
name|Type
name|finalDecision
parameter_list|,
name|String
name|finalExplanation
parameter_list|,
name|String
name|assignedNodeId
parameter_list|)
block|{
name|this
operator|.
name|finalDecision
operator|=
name|finalDecision
expr_stmt|;
name|this
operator|.
name|finalExplanation
operator|=
name|finalExplanation
expr_stmt|;
name|this
operator|.
name|assignedNodeId
operator|=
name|assignedNodeId
expr_stmt|;
block|}
comment|/**      * Returns {@code true} if a decision was taken by the allocator, {@code false} otherwise.      * If no decision was taken, then the rest of the fields in this object are meaningless and return {@code null}.      */
DECL|method|isDecisionTaken
specifier|public
name|boolean
name|isDecisionTaken
parameter_list|()
block|{
return|return
name|finalDecision
operator|!=
literal|null
return|;
block|}
comment|/**      * Returns the final decision made by the allocator on whether to assign the shard, and      * {@code null} if no decision was taken.      */
DECL|method|getFinalDecisionType
specifier|public
name|Decision
operator|.
name|Type
name|getFinalDecisionType
parameter_list|()
block|{
return|return
name|finalDecision
return|;
block|}
comment|/**      * Returns the free-text explanation for the reason behind the decision taken in {@link #getFinalDecisionType()}.      */
annotation|@
name|Nullable
DECL|method|getFinalExplanation
specifier|public
name|String
name|getFinalExplanation
parameter_list|()
block|{
return|return
name|finalExplanation
return|;
block|}
comment|/**      * Get the node id that the allocator will assign the shard to, unless {@link #getFinalDecisionType()} returns      * a value other than {@link Decision.Type#YES}, in which case this returns {@code null}.      */
annotation|@
name|Nullable
DECL|method|getAssignedNodeId
specifier|public
name|String
name|getAssignedNodeId
parameter_list|()
block|{
return|return
name|assignedNodeId
return|;
block|}
block|}
end_class

end_unit

