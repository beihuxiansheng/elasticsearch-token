begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDeciders
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This {@link RoutingAllocation} keeps a shard which routing  * allocation has failed.  */
end_comment

begin_class
DECL|class|FailedRerouteAllocation
specifier|public
class|class
name|FailedRerouteAllocation
extends|extends
name|RoutingAllocation
block|{
comment|/**      * A failed shard with the shard routing itself and an optional      * details on why it failed.      */
DECL|class|FailedShard
specifier|public
specifier|static
class|class
name|FailedShard
block|{
DECL|field|shard
specifier|public
specifier|final
name|ShardRouting
name|shard
decl_stmt|;
DECL|field|message
specifier|public
specifier|final
name|String
name|message
decl_stmt|;
DECL|field|failure
specifier|public
specifier|final
name|Throwable
name|failure
decl_stmt|;
DECL|method|FailedShard
specifier|public
name|FailedShard
parameter_list|(
name|ShardRouting
name|shard
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|failure
operator|=
name|failure
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"failed shard, shard "
operator|+
name|shard
operator|+
literal|", message ["
operator|+
name|message
operator|+
literal|"], failure ["
operator|+
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|failure
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
DECL|field|failedShards
specifier|private
specifier|final
name|List
argument_list|<
name|FailedShard
argument_list|>
name|failedShards
decl_stmt|;
DECL|method|FailedRerouteAllocation
specifier|public
name|FailedRerouteAllocation
parameter_list|(
name|AllocationDeciders
name|deciders
parameter_list|,
name|RoutingNodes
name|routingNodes
parameter_list|,
name|ClusterState
name|clusterState
parameter_list|,
name|List
argument_list|<
name|FailedShard
argument_list|>
name|failedShards
parameter_list|,
name|ClusterInfo
name|clusterInfo
parameter_list|)
block|{
name|super
argument_list|(
name|deciders
argument_list|,
name|routingNodes
argument_list|,
name|clusterState
argument_list|,
name|clusterInfo
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|failedShards
operator|=
name|failedShards
expr_stmt|;
block|}
DECL|method|failedShards
specifier|public
name|List
argument_list|<
name|FailedShard
argument_list|>
name|failedShards
parameter_list|()
block|{
return|return
name|failedShards
return|;
block|}
block|}
end_class

end_unit

