begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
operator|.
name|PeerRecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
operator|.
name|StoreRecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|BalancedShardsAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * {@link ShardRouting} immutably encapsulates information about shard  * routings like id, state, version, etc.  */
end_comment

begin_class
DECL|class|ShardRouting
specifier|public
specifier|final
class|class
name|ShardRouting
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
comment|/**      * Used if shard size is not available      */
DECL|field|UNAVAILABLE_EXPECTED_SHARD_SIZE
specifier|public
specifier|static
specifier|final
name|long
name|UNAVAILABLE_EXPECTED_SHARD_SIZE
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|currentNodeId
specifier|private
specifier|final
name|String
name|currentNodeId
decl_stmt|;
DECL|field|relocatingNodeId
specifier|private
specifier|final
name|String
name|relocatingNodeId
decl_stmt|;
DECL|field|primary
specifier|private
specifier|final
name|boolean
name|primary
decl_stmt|;
DECL|field|state
specifier|private
specifier|final
name|ShardRoutingState
name|state
decl_stmt|;
DECL|field|recoverySource
specifier|private
specifier|final
name|RecoverySource
name|recoverySource
decl_stmt|;
DECL|field|unassignedInfo
specifier|private
specifier|final
name|UnassignedInfo
name|unassignedInfo
decl_stmt|;
DECL|field|allocationId
specifier|private
specifier|final
name|AllocationId
name|allocationId
decl_stmt|;
DECL|field|asList
specifier|private
specifier|final
specifier|transient
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|asList
decl_stmt|;
DECL|field|expectedShardSize
specifier|private
specifier|final
name|long
name|expectedShardSize
decl_stmt|;
annotation|@
name|Nullable
DECL|field|targetRelocatingShard
specifier|private
specifier|final
name|ShardRouting
name|targetRelocatingShard
decl_stmt|;
comment|/**      * A constructor to internally create shard routing instances, note, the internal flag should only be set to true      * by either this class or tests. Visible for testing.      */
DECL|method|ShardRouting
name|ShardRouting
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|currentNodeId
parameter_list|,
name|String
name|relocatingNodeId
parameter_list|,
name|boolean
name|primary
parameter_list|,
name|ShardRoutingState
name|state
parameter_list|,
name|RecoverySource
name|recoverySource
parameter_list|,
name|UnassignedInfo
name|unassignedInfo
parameter_list|,
name|AllocationId
name|allocationId
parameter_list|,
name|long
name|expectedShardSize
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|currentNodeId
operator|=
name|currentNodeId
expr_stmt|;
name|this
operator|.
name|relocatingNodeId
operator|=
name|relocatingNodeId
expr_stmt|;
name|this
operator|.
name|primary
operator|=
name|primary
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|recoverySource
operator|=
name|recoverySource
expr_stmt|;
name|this
operator|.
name|unassignedInfo
operator|=
name|unassignedInfo
expr_stmt|;
name|this
operator|.
name|allocationId
operator|=
name|allocationId
expr_stmt|;
name|this
operator|.
name|expectedShardSize
operator|=
name|expectedShardSize
expr_stmt|;
name|this
operator|.
name|targetRelocatingShard
operator|=
name|initializeTargetRelocatingShard
argument_list|()
expr_stmt|;
name|this
operator|.
name|asList
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|this
argument_list|)
expr_stmt|;
assert|assert
name|expectedShardSize
operator|==
name|UNAVAILABLE_EXPECTED_SHARD_SIZE
operator|||
name|state
operator|==
name|ShardRoutingState
operator|.
name|INITIALIZING
operator|||
name|state
operator|==
name|ShardRoutingState
operator|.
name|RELOCATING
operator|:
name|expectedShardSize
operator|+
literal|" state: "
operator|+
name|state
assert|;
assert|assert
name|expectedShardSize
operator|>=
literal|0
operator|||
name|state
operator|!=
name|ShardRoutingState
operator|.
name|INITIALIZING
operator|||
name|state
operator|!=
name|ShardRoutingState
operator|.
name|RELOCATING
operator|:
name|expectedShardSize
operator|+
literal|" state: "
operator|+
name|state
assert|;
assert|assert
operator|!
operator|(
name|state
operator|==
name|ShardRoutingState
operator|.
name|UNASSIGNED
operator|&&
name|unassignedInfo
operator|==
literal|null
operator|)
operator|:
literal|"unassigned shard must be created with meta"
assert|;
assert|assert
operator|(
name|state
operator|==
name|ShardRoutingState
operator|.
name|UNASSIGNED
operator|||
name|state
operator|==
name|ShardRoutingState
operator|.
name|INITIALIZING
operator|)
operator|==
operator|(
name|recoverySource
operator|!=
literal|null
operator|)
operator|:
literal|"recovery source only available on unassigned or initializing shard but was "
operator|+
name|state
assert|;
assert|assert
name|recoverySource
operator|==
literal|null
operator|||
name|recoverySource
operator|==
name|PeerRecoverySource
operator|.
name|INSTANCE
operator|||
name|primary
operator|:
literal|"replica shards always recover from primary"
assert|;
block|}
annotation|@
name|Nullable
DECL|method|initializeTargetRelocatingShard
specifier|private
name|ShardRouting
name|initializeTargetRelocatingShard
parameter_list|()
block|{
if|if
condition|(
name|state
operator|==
name|ShardRoutingState
operator|.
name|RELOCATING
condition|)
block|{
return|return
operator|new
name|ShardRouting
argument_list|(
name|shardId
argument_list|,
name|relocatingNodeId
argument_list|,
name|currentNodeId
argument_list|,
name|primary
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|PeerRecoverySource
operator|.
name|INSTANCE
argument_list|,
name|unassignedInfo
argument_list|,
name|AllocationId
operator|.
name|newTargetRelocation
argument_list|(
name|allocationId
argument_list|)
argument_list|,
name|expectedShardSize
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Creates a new unassigned shard.      */
DECL|method|newUnassigned
specifier|public
specifier|static
name|ShardRouting
name|newUnassigned
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|boolean
name|primary
parameter_list|,
name|RecoverySource
name|recoverySource
parameter_list|,
name|UnassignedInfo
name|unassignedInfo
parameter_list|)
block|{
return|return
operator|new
name|ShardRouting
argument_list|(
name|shardId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|primary
argument_list|,
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|,
name|recoverySource
argument_list|,
name|unassignedInfo
argument_list|,
literal|null
argument_list|,
name|UNAVAILABLE_EXPECTED_SHARD_SIZE
argument_list|)
return|;
block|}
DECL|method|index
specifier|public
name|Index
name|index
parameter_list|()
block|{
return|return
name|shardId
operator|.
name|getIndex
argument_list|()
return|;
block|}
comment|/**      * The index name.      */
DECL|method|getIndexName
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|shardId
operator|.
name|getIndexName
argument_list|()
return|;
block|}
comment|/**      * The shard id.      */
DECL|method|id
specifier|public
name|int
name|id
parameter_list|()
block|{
return|return
name|shardId
operator|.
name|id
argument_list|()
return|;
block|}
comment|/**      * The shard id.      */
DECL|method|getId
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|id
argument_list|()
return|;
block|}
comment|/**      * The shard is unassigned (not allocated to any node).      */
DECL|method|unassigned
specifier|public
name|boolean
name|unassigned
parameter_list|()
block|{
return|return
name|state
operator|==
name|ShardRoutingState
operator|.
name|UNASSIGNED
return|;
block|}
comment|/**      * The shard is initializing (usually recovering either from peer shard      * or from gateway).      */
DECL|method|initializing
specifier|public
name|boolean
name|initializing
parameter_list|()
block|{
return|return
name|state
operator|==
name|ShardRoutingState
operator|.
name|INITIALIZING
return|;
block|}
comment|/**      * Returns<code>true</code> iff the this shard is currently      * {@link ShardRoutingState#STARTED started} or      * {@link ShardRoutingState#RELOCATING relocating} to another node.      * Otherwise<code>false</code>      */
DECL|method|active
specifier|public
name|boolean
name|active
parameter_list|()
block|{
return|return
name|started
argument_list|()
operator|||
name|relocating
argument_list|()
return|;
block|}
comment|/**      * The shard is in started mode.      */
DECL|method|started
specifier|public
name|boolean
name|started
parameter_list|()
block|{
return|return
name|state
operator|==
name|ShardRoutingState
operator|.
name|STARTED
return|;
block|}
comment|/**      * Returns<code>true</code> iff the this shard is currently relocating to      * another node. Otherwise<code>false</code>      *      * @see ShardRoutingState#RELOCATING      */
DECL|method|relocating
specifier|public
name|boolean
name|relocating
parameter_list|()
block|{
return|return
name|state
operator|==
name|ShardRoutingState
operator|.
name|RELOCATING
return|;
block|}
comment|/**      * Returns<code>true</code> iff this shard is assigned to a node ie. not      * {@link ShardRoutingState#UNASSIGNED unassigned}. Otherwise<code>false</code>      */
DECL|method|assignedToNode
specifier|public
name|boolean
name|assignedToNode
parameter_list|()
block|{
return|return
name|currentNodeId
operator|!=
literal|null
return|;
block|}
comment|/**      * The current node id the shard is allocated on.      */
DECL|method|currentNodeId
specifier|public
name|String
name|currentNodeId
parameter_list|()
block|{
return|return
name|this
operator|.
name|currentNodeId
return|;
block|}
comment|/**      * The relocating node id the shard is either relocating to or relocating from.      */
DECL|method|relocatingNodeId
specifier|public
name|String
name|relocatingNodeId
parameter_list|()
block|{
return|return
name|this
operator|.
name|relocatingNodeId
return|;
block|}
comment|/**      * Returns a shard routing representing the target shard.      * The target shard routing will be the INITIALIZING state and have relocatingNodeId set to the      * source node.      */
DECL|method|getTargetRelocatingShard
specifier|public
name|ShardRouting
name|getTargetRelocatingShard
parameter_list|()
block|{
assert|assert
name|relocating
argument_list|()
assert|;
return|return
name|targetRelocatingShard
return|;
block|}
comment|/**      * Additional metadata on why the shard is/was unassigned. The metadata is kept around      * until the shard moves to STARTED.      */
annotation|@
name|Nullable
DECL|method|unassignedInfo
specifier|public
name|UnassignedInfo
name|unassignedInfo
parameter_list|()
block|{
return|return
name|unassignedInfo
return|;
block|}
comment|/**      * An id that uniquely identifies an allocation.      */
annotation|@
name|Nullable
DECL|method|allocationId
specifier|public
name|AllocationId
name|allocationId
parameter_list|()
block|{
return|return
name|this
operator|.
name|allocationId
return|;
block|}
comment|/**      * Returns<code>true</code> iff this shard is a primary.      */
DECL|method|primary
specifier|public
name|boolean
name|primary
parameter_list|()
block|{
return|return
name|this
operator|.
name|primary
return|;
block|}
comment|/**      * The shard state.      */
DECL|method|state
specifier|public
name|ShardRoutingState
name|state
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
return|;
block|}
comment|/**      * The shard id.      */
DECL|method|shardId
specifier|public
name|ShardId
name|shardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
comment|/**      * A shard iterator with just this shard in it.      */
DECL|method|shardsIt
specifier|public
name|ShardIterator
name|shardsIt
parameter_list|()
block|{
return|return
operator|new
name|PlainShardIterator
argument_list|(
name|shardId
argument_list|,
name|asList
argument_list|)
return|;
block|}
DECL|method|ShardRouting
specifier|public
name|ShardRouting
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|currentNodeId
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|relocatingNodeId
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|primary
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|state
operator|=
name|ShardRoutingState
operator|.
name|fromValue
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|ShardRoutingState
operator|.
name|UNASSIGNED
operator|||
name|state
operator|==
name|ShardRoutingState
operator|.
name|INITIALIZING
condition|)
block|{
name|recoverySource
operator|=
name|RecoverySource
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|recoverySource
operator|=
literal|null
expr_stmt|;
block|}
name|unassignedInfo
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|UnassignedInfo
operator|::
operator|new
argument_list|)
expr_stmt|;
name|allocationId
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|AllocationId
operator|::
operator|new
argument_list|)
expr_stmt|;
specifier|final
name|long
name|shardSize
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|ShardRoutingState
operator|.
name|RELOCATING
operator|||
name|state
operator|==
name|ShardRoutingState
operator|.
name|INITIALIZING
condition|)
block|{
name|shardSize
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|shardSize
operator|=
name|UNAVAILABLE_EXPECTED_SHARD_SIZE
expr_stmt|;
block|}
name|expectedShardSize
operator|=
name|shardSize
expr_stmt|;
name|asList
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|targetRelocatingShard
operator|=
name|initializeTargetRelocatingShard
argument_list|()
expr_stmt|;
block|}
DECL|method|ShardRouting
specifier|public
name|ShardRouting
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes shard information to {@link StreamOutput} without writing index name and shard id      *      * @param out {@link StreamOutput} to write shard information to      * @throws IOException if something happens during write      */
DECL|method|writeToThin
specifier|public
name|void
name|writeToThin
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeOptionalString
argument_list|(
name|currentNodeId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|relocatingNodeId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|primary
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|state
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|ShardRoutingState
operator|.
name|UNASSIGNED
operator|||
name|state
operator|==
name|ShardRoutingState
operator|.
name|INITIALIZING
condition|)
block|{
name|recoverySource
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|unassignedInfo
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|allocationId
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|ShardRoutingState
operator|.
name|RELOCATING
operator|||
name|state
operator|==
name|ShardRoutingState
operator|.
name|INITIALIZING
condition|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|expectedShardSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|shardId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|writeToThin
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|updateUnassigned
specifier|public
name|ShardRouting
name|updateUnassigned
parameter_list|(
name|UnassignedInfo
name|unassignedInfo
parameter_list|,
name|RecoverySource
name|recoverySource
parameter_list|)
block|{
assert|assert
name|this
operator|.
name|unassignedInfo
operator|!=
literal|null
operator|:
literal|"can only update unassign info if they are already set"
assert|;
assert|assert
name|this
operator|.
name|unassignedInfo
operator|.
name|isDelayed
argument_list|()
operator|||
operator|(
name|unassignedInfo
operator|.
name|isDelayed
argument_list|()
operator|==
literal|false
operator|)
operator|:
literal|"cannot transition from non-delayed to delayed"
assert|;
return|return
operator|new
name|ShardRouting
argument_list|(
name|shardId
argument_list|,
name|currentNodeId
argument_list|,
name|relocatingNodeId
argument_list|,
name|primary
argument_list|,
name|state
argument_list|,
name|recoverySource
argument_list|,
name|unassignedInfo
argument_list|,
name|allocationId
argument_list|,
name|expectedShardSize
argument_list|)
return|;
block|}
comment|/**      * Moves the shard to unassigned state.      */
DECL|method|moveToUnassigned
specifier|public
name|ShardRouting
name|moveToUnassigned
parameter_list|(
name|UnassignedInfo
name|unassignedInfo
parameter_list|)
block|{
assert|assert
name|state
operator|!=
name|ShardRoutingState
operator|.
name|UNASSIGNED
operator|:
name|this
assert|;
specifier|final
name|RecoverySource
name|recoverySource
decl_stmt|;
if|if
condition|(
name|active
argument_list|()
condition|)
block|{
if|if
condition|(
name|primary
argument_list|()
condition|)
block|{
name|recoverySource
operator|=
name|StoreRecoverySource
operator|.
name|EXISTING_STORE_INSTANCE
expr_stmt|;
block|}
else|else
block|{
name|recoverySource
operator|=
name|PeerRecoverySource
operator|.
name|INSTANCE
expr_stmt|;
block|}
block|}
else|else
block|{
name|recoverySource
operator|=
name|recoverySource
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|ShardRouting
argument_list|(
name|shardId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|primary
argument_list|,
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|,
name|recoverySource
argument_list|,
name|unassignedInfo
argument_list|,
literal|null
argument_list|,
name|UNAVAILABLE_EXPECTED_SHARD_SIZE
argument_list|)
return|;
block|}
comment|/**      * Initializes an unassigned shard on a node.      *      * @param existingAllocationId allocation id to use. If null, a fresh allocation id is generated.      */
DECL|method|initialize
specifier|public
name|ShardRouting
name|initialize
parameter_list|(
name|String
name|nodeId
parameter_list|,
annotation|@
name|Nullable
name|String
name|existingAllocationId
parameter_list|,
name|long
name|expectedShardSize
parameter_list|)
block|{
assert|assert
name|state
operator|==
name|ShardRoutingState
operator|.
name|UNASSIGNED
operator|:
name|this
assert|;
assert|assert
name|relocatingNodeId
operator|==
literal|null
operator|:
name|this
assert|;
specifier|final
name|AllocationId
name|allocationId
decl_stmt|;
if|if
condition|(
name|existingAllocationId
operator|==
literal|null
condition|)
block|{
name|allocationId
operator|=
name|AllocationId
operator|.
name|newInitializing
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|allocationId
operator|=
name|AllocationId
operator|.
name|newInitializing
argument_list|(
name|existingAllocationId
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ShardRouting
argument_list|(
name|shardId
argument_list|,
name|nodeId
argument_list|,
literal|null
argument_list|,
name|primary
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|recoverySource
argument_list|,
name|unassignedInfo
argument_list|,
name|allocationId
argument_list|,
name|expectedShardSize
argument_list|)
return|;
block|}
comment|/**      * Relocate the shard to another node.      *      * @param relocatingNodeId id of the node to relocate the shard      */
DECL|method|relocate
specifier|public
name|ShardRouting
name|relocate
parameter_list|(
name|String
name|relocatingNodeId
parameter_list|,
name|long
name|expectedShardSize
parameter_list|)
block|{
assert|assert
name|state
operator|==
name|ShardRoutingState
operator|.
name|STARTED
operator|:
literal|"current shard has to be started in order to be relocated "
operator|+
name|this
assert|;
return|return
operator|new
name|ShardRouting
argument_list|(
name|shardId
argument_list|,
name|currentNodeId
argument_list|,
name|relocatingNodeId
argument_list|,
name|primary
argument_list|,
name|ShardRoutingState
operator|.
name|RELOCATING
argument_list|,
name|recoverySource
argument_list|,
literal|null
argument_list|,
name|AllocationId
operator|.
name|newRelocation
argument_list|(
name|allocationId
argument_list|)
argument_list|,
name|expectedShardSize
argument_list|)
return|;
block|}
comment|/**      * Cancel relocation of a shard. The shards state must be set      * to<code>RELOCATING</code>.      */
DECL|method|cancelRelocation
specifier|public
name|ShardRouting
name|cancelRelocation
parameter_list|()
block|{
assert|assert
name|state
operator|==
name|ShardRoutingState
operator|.
name|RELOCATING
operator|:
name|this
assert|;
assert|assert
name|assignedToNode
argument_list|()
operator|:
name|this
assert|;
assert|assert
name|relocatingNodeId
operator|!=
literal|null
operator|:
name|this
assert|;
return|return
operator|new
name|ShardRouting
argument_list|(
name|shardId
argument_list|,
name|currentNodeId
argument_list|,
literal|null
argument_list|,
name|primary
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|recoverySource
argument_list|,
literal|null
argument_list|,
name|AllocationId
operator|.
name|cancelRelocation
argument_list|(
name|allocationId
argument_list|)
argument_list|,
name|UNAVAILABLE_EXPECTED_SHARD_SIZE
argument_list|)
return|;
block|}
comment|/**      * Removes relocation source of a non-primary shard. The shard state must be<code>INITIALIZING</code>.      * This allows the non-primary shard to continue recovery from the primary even though its non-primary      * relocation source has failed.      */
DECL|method|removeRelocationSource
specifier|public
name|ShardRouting
name|removeRelocationSource
parameter_list|()
block|{
assert|assert
name|primary
operator|==
literal|false
operator|:
name|this
assert|;
assert|assert
name|state
operator|==
name|ShardRoutingState
operator|.
name|INITIALIZING
operator|:
name|this
assert|;
assert|assert
name|assignedToNode
argument_list|()
operator|:
name|this
assert|;
assert|assert
name|relocatingNodeId
operator|!=
literal|null
operator|:
name|this
assert|;
return|return
operator|new
name|ShardRouting
argument_list|(
name|shardId
argument_list|,
name|currentNodeId
argument_list|,
literal|null
argument_list|,
name|primary
argument_list|,
name|state
argument_list|,
name|recoverySource
argument_list|,
name|unassignedInfo
argument_list|,
name|AllocationId
operator|.
name|finishRelocation
argument_list|(
name|allocationId
argument_list|)
argument_list|,
name|expectedShardSize
argument_list|)
return|;
block|}
comment|/**      * Moves the primary shard from started to initializing      */
DECL|method|reinitializePrimaryShard
specifier|public
name|ShardRouting
name|reinitializePrimaryShard
parameter_list|()
block|{
assert|assert
name|state
operator|==
name|ShardRoutingState
operator|.
name|STARTED
operator|:
name|this
assert|;
assert|assert
name|primary
operator|:
name|this
assert|;
return|return
operator|new
name|ShardRouting
argument_list|(
name|shardId
argument_list|,
name|currentNodeId
argument_list|,
literal|null
argument_list|,
name|primary
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|StoreRecoverySource
operator|.
name|EXISTING_STORE_INSTANCE
argument_list|,
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|REINITIALIZED
argument_list|,
literal|null
argument_list|)
argument_list|,
name|allocationId
argument_list|,
name|UNAVAILABLE_EXPECTED_SHARD_SIZE
argument_list|)
return|;
block|}
comment|/**      * Reinitializes a replica shard, giving it a fresh allocation id      */
DECL|method|reinitializeReplicaShard
specifier|public
name|ShardRouting
name|reinitializeReplicaShard
parameter_list|()
block|{
assert|assert
name|state
operator|==
name|ShardRoutingState
operator|.
name|INITIALIZING
operator|:
name|this
assert|;
assert|assert
name|primary
operator|==
literal|false
operator|:
name|this
assert|;
assert|assert
name|isRelocationTarget
argument_list|()
operator|==
literal|false
operator|:
name|this
assert|;
return|return
operator|new
name|ShardRouting
argument_list|(
name|shardId
argument_list|,
name|currentNodeId
argument_list|,
literal|null
argument_list|,
name|primary
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|recoverySource
argument_list|,
name|unassignedInfo
argument_list|,
name|AllocationId
operator|.
name|newInitializing
argument_list|()
argument_list|,
name|expectedShardSize
argument_list|)
return|;
block|}
comment|/**      * Set the shards state to<code>STARTED</code>. The shards state must be      *<code>INITIALIZING</code> or<code>RELOCATING</code>. Any relocation will be      * canceled.      */
DECL|method|moveToStarted
specifier|public
name|ShardRouting
name|moveToStarted
parameter_list|()
block|{
assert|assert
name|state
operator|==
name|ShardRoutingState
operator|.
name|INITIALIZING
operator|:
literal|"expected an initializing shard "
operator|+
name|this
assert|;
name|AllocationId
name|allocationId
init|=
name|this
operator|.
name|allocationId
decl_stmt|;
if|if
condition|(
name|allocationId
operator|.
name|getRelocationId
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// relocation target
name|allocationId
operator|=
name|AllocationId
operator|.
name|finishRelocation
argument_list|(
name|allocationId
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ShardRouting
argument_list|(
name|shardId
argument_list|,
name|currentNodeId
argument_list|,
literal|null
argument_list|,
name|primary
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|allocationId
argument_list|,
name|UNAVAILABLE_EXPECTED_SHARD_SIZE
argument_list|)
return|;
block|}
comment|/**      * Make the active shard primary unless it's not primary      *      * @throws IllegalShardRoutingStateException if shard is already a primary      */
DECL|method|moveActiveReplicaToPrimary
specifier|public
name|ShardRouting
name|moveActiveReplicaToPrimary
parameter_list|()
block|{
assert|assert
name|active
argument_list|()
operator|:
literal|"expected an active shard "
operator|+
name|this
assert|;
if|if
condition|(
name|primary
condition|)
block|{
throw|throw
operator|new
name|IllegalShardRoutingStateException
argument_list|(
name|this
argument_list|,
literal|"Already primary, can't move to primary"
argument_list|)
throw|;
block|}
return|return
operator|new
name|ShardRouting
argument_list|(
name|shardId
argument_list|,
name|currentNodeId
argument_list|,
name|relocatingNodeId
argument_list|,
literal|true
argument_list|,
name|state
argument_list|,
name|recoverySource
argument_list|,
name|unassignedInfo
argument_list|,
name|allocationId
argument_list|,
name|expectedShardSize
argument_list|)
return|;
block|}
comment|/**      * Set the unassigned primary shard to non-primary      *      * @throws IllegalShardRoutingStateException if shard is already a replica      */
DECL|method|moveUnassignedFromPrimary
specifier|public
name|ShardRouting
name|moveUnassignedFromPrimary
parameter_list|()
block|{
assert|assert
name|state
operator|==
name|ShardRoutingState
operator|.
name|UNASSIGNED
operator|:
literal|"expected an unassigned shard "
operator|+
name|this
assert|;
if|if
condition|(
operator|!
name|primary
condition|)
block|{
throw|throw
operator|new
name|IllegalShardRoutingStateException
argument_list|(
name|this
argument_list|,
literal|"Not primary, can't move to replica"
argument_list|)
throw|;
block|}
return|return
operator|new
name|ShardRouting
argument_list|(
name|shardId
argument_list|,
name|currentNodeId
argument_list|,
name|relocatingNodeId
argument_list|,
literal|false
argument_list|,
name|state
argument_list|,
name|PeerRecoverySource
operator|.
name|INSTANCE
argument_list|,
name|unassignedInfo
argument_list|,
name|allocationId
argument_list|,
name|expectedShardSize
argument_list|)
return|;
block|}
comment|/**      * returns true if this routing has the same allocation ID as another.      *<p>      * Note: if both shard routing has a null as their {@link #allocationId()}, this method returns false as the routing describe      * no allocation at all..      **/
DECL|method|isSameAllocation
specifier|public
name|boolean
name|isSameAllocation
parameter_list|(
name|ShardRouting
name|other
parameter_list|)
block|{
name|boolean
name|b
init|=
name|this
operator|.
name|allocationId
operator|!=
literal|null
operator|&&
name|other
operator|.
name|allocationId
operator|!=
literal|null
operator|&&
name|this
operator|.
name|allocationId
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|allocationId
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|b
operator|==
literal|false
operator|||
name|this
operator|.
name|currentNodeId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|currentNodeId
argument_list|)
operator|:
literal|"ShardRoutings have the same allocation id but not the same node. This ["
operator|+
name|this
operator|+
literal|"], other ["
operator|+
name|other
operator|+
literal|"]"
assert|;
return|return
name|b
return|;
block|}
comment|/**      * Returns<code>true</code> if this shard is a relocation target for another shard (i.e., was created with {@link #initializeTargetRelocatingShard()}      */
DECL|method|isRelocationTarget
specifier|public
name|boolean
name|isRelocationTarget
parameter_list|()
block|{
return|return
name|state
operator|==
name|ShardRoutingState
operator|.
name|INITIALIZING
operator|&&
name|relocatingNodeId
operator|!=
literal|null
return|;
block|}
comment|/** returns true if the routing is the relocation target of the given routing */
DECL|method|isRelocationTargetOf
specifier|public
name|boolean
name|isRelocationTargetOf
parameter_list|(
name|ShardRouting
name|other
parameter_list|)
block|{
name|boolean
name|b
init|=
name|this
operator|.
name|allocationId
operator|!=
literal|null
operator|&&
name|other
operator|.
name|allocationId
operator|!=
literal|null
operator|&&
name|this
operator|.
name|state
operator|==
name|ShardRoutingState
operator|.
name|INITIALIZING
operator|&&
name|this
operator|.
name|allocationId
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|allocationId
operator|.
name|getRelocationId
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|b
operator|==
literal|false
operator|||
name|other
operator|.
name|state
operator|==
name|ShardRoutingState
operator|.
name|RELOCATING
operator|:
literal|"ShardRouting is a relocation target but the source shard state isn't relocating. This ["
operator|+
name|this
operator|+
literal|"], other ["
operator|+
name|other
operator|+
literal|"]"
assert|;
assert|assert
name|b
operator|==
literal|false
operator|||
name|other
operator|.
name|allocationId
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|allocationId
operator|.
name|getRelocationId
argument_list|()
argument_list|)
operator|:
literal|"ShardRouting is a relocation target but the source id isn't equal to source's allocationId.getRelocationId. This ["
operator|+
name|this
operator|+
literal|"], other ["
operator|+
name|other
operator|+
literal|"]"
assert|;
assert|assert
name|b
operator|==
literal|false
operator|||
name|other
operator|.
name|currentNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|relocatingNodeId
argument_list|)
operator|:
literal|"ShardRouting is a relocation target but source current node id isn't equal to target relocating node. This ["
operator|+
name|this
operator|+
literal|"], other ["
operator|+
name|other
operator|+
literal|"]"
assert|;
assert|assert
name|b
operator|==
literal|false
operator|||
name|this
operator|.
name|currentNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|relocatingNodeId
argument_list|)
operator|:
literal|"ShardRouting is a relocation target but current node id isn't equal to source relocating node. This ["
operator|+
name|this
operator|+
literal|"], other ["
operator|+
name|other
operator|+
literal|"]"
assert|;
assert|assert
name|b
operator|==
literal|false
operator|||
name|this
operator|.
name|shardId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|shardId
argument_list|)
operator|:
literal|"ShardRouting is a relocation target but both routings are not of the same shard id. This ["
operator|+
name|this
operator|+
literal|"], other ["
operator|+
name|other
operator|+
literal|"]"
assert|;
assert|assert
name|b
operator|==
literal|false
operator|||
name|this
operator|.
name|primary
operator|==
name|other
operator|.
name|primary
operator|:
literal|"ShardRouting is a relocation target but primary flag is different. This ["
operator|+
name|this
operator|+
literal|"], target ["
operator|+
name|other
operator|+
literal|"]"
assert|;
return|return
name|b
return|;
block|}
comment|/** returns true if the routing is the relocation source for the given routing */
DECL|method|isRelocationSourceOf
specifier|public
name|boolean
name|isRelocationSourceOf
parameter_list|(
name|ShardRouting
name|other
parameter_list|)
block|{
name|boolean
name|b
init|=
name|this
operator|.
name|allocationId
operator|!=
literal|null
operator|&&
name|other
operator|.
name|allocationId
operator|!=
literal|null
operator|&&
name|other
operator|.
name|state
operator|==
name|ShardRoutingState
operator|.
name|INITIALIZING
operator|&&
name|other
operator|.
name|allocationId
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|allocationId
operator|.
name|getRelocationId
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|b
operator|==
literal|false
operator|||
name|this
operator|.
name|state
operator|==
name|ShardRoutingState
operator|.
name|RELOCATING
operator|:
literal|"ShardRouting is a relocation source but shard state isn't relocating. This ["
operator|+
name|this
operator|+
literal|"], other ["
operator|+
name|other
operator|+
literal|"]"
assert|;
assert|assert
name|b
operator|==
literal|false
operator|||
name|this
operator|.
name|allocationId
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|allocationId
operator|.
name|getRelocationId
argument_list|()
argument_list|)
operator|:
literal|"ShardRouting is a relocation source but the allocation id isn't equal to other.allocationId.getRelocationId. This ["
operator|+
name|this
operator|+
literal|"], other ["
operator|+
name|other
operator|+
literal|"]"
assert|;
assert|assert
name|b
operator|==
literal|false
operator|||
name|this
operator|.
name|currentNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|relocatingNodeId
argument_list|)
operator|:
literal|"ShardRouting is a relocation source but current node isn't equal to other's relocating node. This ["
operator|+
name|this
operator|+
literal|"], other ["
operator|+
name|other
operator|+
literal|"]"
assert|;
assert|assert
name|b
operator|==
literal|false
operator|||
name|other
operator|.
name|currentNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|relocatingNodeId
argument_list|)
operator|:
literal|"ShardRouting is a relocation source but relocating node isn't equal to other's current node. This ["
operator|+
name|this
operator|+
literal|"], other ["
operator|+
name|other
operator|+
literal|"]"
assert|;
assert|assert
name|b
operator|==
literal|false
operator|||
name|this
operator|.
name|shardId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|shardId
argument_list|)
operator|:
literal|"ShardRouting is a relocation source but both routings are not of the same shard. This ["
operator|+
name|this
operator|+
literal|"], target ["
operator|+
name|other
operator|+
literal|"]"
assert|;
assert|assert
name|b
operator|==
literal|false
operator|||
name|this
operator|.
name|primary
operator|==
name|other
operator|.
name|primary
operator|:
literal|"ShardRouting is a relocation source but primary flag is different. This ["
operator|+
name|this
operator|+
literal|"], target ["
operator|+
name|other
operator|+
literal|"]"
assert|;
return|return
name|b
return|;
block|}
comment|/** returns true if the current routing is identical to the other routing in all but meta fields, i.e., unassigned info */
DECL|method|equalsIgnoringMetaData
specifier|public
name|boolean
name|equalsIgnoringMetaData
parameter_list|(
name|ShardRouting
name|other
parameter_list|)
block|{
if|if
condition|(
name|primary
operator|!=
name|other
operator|.
name|primary
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|shardId
operator|!=
literal|null
condition|?
operator|!
name|shardId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|shardId
argument_list|)
else|:
name|other
operator|.
name|shardId
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|currentNodeId
operator|!=
literal|null
condition|?
operator|!
name|currentNodeId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|currentNodeId
argument_list|)
else|:
name|other
operator|.
name|currentNodeId
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|relocatingNodeId
operator|!=
literal|null
condition|?
operator|!
name|relocatingNodeId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|relocatingNodeId
argument_list|)
else|:
name|other
operator|.
name|relocatingNodeId
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|allocationId
operator|!=
literal|null
condition|?
operator|!
name|allocationId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|allocationId
argument_list|)
else|:
name|other
operator|.
name|allocationId
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|state
operator|!=
name|other
operator|.
name|state
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|recoverySource
operator|!=
literal|null
condition|?
operator|!
name|recoverySource
operator|.
name|equals
argument_list|(
name|other
operator|.
name|recoverySource
argument_list|)
else|:
name|other
operator|.
name|recoverySource
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|ShardRouting
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ShardRouting
name|that
init|=
operator|(
name|ShardRouting
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|unassignedInfo
operator|!=
literal|null
condition|?
operator|!
name|unassignedInfo
operator|.
name|equals
argument_list|(
name|that
operator|.
name|unassignedInfo
argument_list|)
else|:
name|that
operator|.
name|unassignedInfo
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|equalsIgnoringMetaData
argument_list|(
name|that
argument_list|)
return|;
block|}
comment|/**      * Cache hash code in same same way as {@link String#hashCode()}) using racy single-check idiom      * as it is mainly used in single-threaded code ({@link BalancedShardsAllocator}).      */
DECL|field|hashCode
specifier|private
name|int
name|hashCode
decl_stmt|;
comment|// default to 0
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|hashCode
decl_stmt|;
if|if
condition|(
name|h
operator|==
literal|0
condition|)
block|{
name|h
operator|=
name|shardId
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
operator|(
name|currentNodeId
operator|!=
literal|null
condition|?
name|currentNodeId
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
operator|(
name|relocatingNodeId
operator|!=
literal|null
condition|?
name|relocatingNodeId
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
operator|(
name|primary
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
operator|(
name|state
operator|!=
literal|null
condition|?
name|state
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
operator|(
name|recoverySource
operator|!=
literal|null
condition|?
name|recoverySource
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
operator|(
name|allocationId
operator|!=
literal|null
condition|?
name|allocationId
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
operator|(
name|unassignedInfo
operator|!=
literal|null
condition|?
name|unassignedInfo
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|hashCode
operator|=
name|h
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|shortSummary
argument_list|()
return|;
block|}
comment|/**      * A short description of the shard.      */
DECL|method|shortSummary
specifier|public
name|String
name|shortSummary
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|shardId
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", node["
argument_list|)
operator|.
name|append
argument_list|(
name|currentNodeId
argument_list|)
operator|.
name|append
argument_list|(
literal|"], "
argument_list|)
expr_stmt|;
if|if
condition|(
name|relocatingNodeId
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"relocating ["
argument_list|)
operator|.
name|append
argument_list|(
name|relocatingNodeId
argument_list|)
operator|.
name|append
argument_list|(
literal|"], "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|primary
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"[P]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"[R]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recoverySource
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", recovery_source["
argument_list|)
operator|.
name|append
argument_list|(
name|recoverySource
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|", s["
argument_list|)
operator|.
name|append
argument_list|(
name|state
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|allocationId
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", a"
argument_list|)
operator|.
name|append
argument_list|(
name|allocationId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|unassignedInfo
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|unassignedInfo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedShardSize
operator|!=
name|UNAVAILABLE_EXPECTED_SHARD_SIZE
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", expected_shard_size["
argument_list|)
operator|.
name|append
argument_list|(
name|expectedShardSize
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"state"
argument_list|,
name|state
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"primary"
argument_list|,
name|primary
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"node"
argument_list|,
name|currentNodeId
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"relocating_node"
argument_list|,
name|relocatingNodeId
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"shard"
argument_list|,
name|id
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedShardSize
operator|!=
name|UNAVAILABLE_EXPECTED_SHARD_SIZE
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"expected_shard_size_in_bytes"
argument_list|,
name|expectedShardSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recoverySource
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"recovery_source"
argument_list|,
name|recoverySource
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allocationId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"allocation_id"
argument_list|)
expr_stmt|;
name|allocationId
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|unassignedInfo
operator|!=
literal|null
condition|)
block|{
name|unassignedInfo
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|endObject
argument_list|()
return|;
block|}
comment|/**      * Returns the expected shard size for {@link ShardRoutingState#RELOCATING} and {@link ShardRoutingState#INITIALIZING}      * shards. If it's size is not available {@value #UNAVAILABLE_EXPECTED_SHARD_SIZE} will be returned.      */
DECL|method|getExpectedShardSize
specifier|public
name|long
name|getExpectedShardSize
parameter_list|()
block|{
return|return
name|expectedShardSize
return|;
block|}
comment|/**      * Returns recovery source for the given shard. Replica shards always recover from the primary {@link PeerRecoverySource}.      *      * @return recovery source or null if shard is {@link #active()}      */
annotation|@
name|Nullable
DECL|method|recoverySource
specifier|public
name|RecoverySource
name|recoverySource
parameter_list|()
block|{
return|return
name|recoverySource
return|;
block|}
block|}
end_class

end_unit

