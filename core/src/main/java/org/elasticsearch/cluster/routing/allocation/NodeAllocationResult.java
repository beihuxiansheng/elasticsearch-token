begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * This class represents the shard allocation decision for a single node,  * including the {@link Decision} whether to allocate to the node and other  * information related to obtaining the decision for the node.  */
end_comment

begin_class
DECL|class|NodeAllocationResult
specifier|public
specifier|final
class|class
name|NodeAllocationResult
block|{
DECL|field|decision
specifier|private
specifier|final
name|Decision
name|decision
decl_stmt|;
DECL|field|weight
specifier|private
specifier|final
name|float
name|weight
decl_stmt|;
DECL|method|NodeAllocationResult
specifier|public
name|NodeAllocationResult
parameter_list|(
name|Decision
name|decision
parameter_list|)
block|{
name|this
operator|.
name|decision
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|decision
argument_list|)
expr_stmt|;
name|this
operator|.
name|weight
operator|=
name|Float
operator|.
name|POSITIVE_INFINITY
expr_stmt|;
block|}
DECL|method|NodeAllocationResult
specifier|public
name|NodeAllocationResult
parameter_list|(
name|Decision
name|decision
parameter_list|,
name|float
name|weight
parameter_list|)
block|{
name|this
operator|.
name|decision
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|decision
argument_list|)
expr_stmt|;
name|this
operator|.
name|weight
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|weight
argument_list|)
expr_stmt|;
block|}
comment|/**      * The decision for allocating to the node.      */
DECL|method|getDecision
specifier|public
name|Decision
name|getDecision
parameter_list|()
block|{
return|return
name|decision
return|;
block|}
comment|/**      * The calculated weight for allocating a shard to the node.  A value of {@link Float#POSITIVE_INFINITY}      * means the weight was not calculated or factored into the decision.      */
DECL|method|getWeight
specifier|public
name|float
name|getWeight
parameter_list|()
block|{
return|return
name|weight
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|other
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|NodeAllocationResult
name|that
init|=
operator|(
name|NodeAllocationResult
operator|)
name|other
decl_stmt|;
return|return
name|decision
operator|.
name|equals
argument_list|(
name|that
operator|.
name|decision
argument_list|)
operator|&&
name|Float
operator|.
name|compare
argument_list|(
name|weight
argument_list|,
name|that
operator|.
name|weight
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|decision
argument_list|,
name|weight
argument_list|)
return|;
block|}
block|}
end_class

end_unit

