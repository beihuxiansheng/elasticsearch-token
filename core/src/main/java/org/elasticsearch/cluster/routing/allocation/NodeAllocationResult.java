begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AbstractAllocationDecision
operator|.
name|discoveryNodeToXContent
import|;
end_import

begin_comment
comment|/**  * This class represents the shard allocation decision and its explanation for a single node.  */
end_comment

begin_class
DECL|class|NodeAllocationResult
specifier|public
class|class
name|NodeAllocationResult
implements|implements
name|ToXContent
implements|,
name|Writeable
implements|,
name|Comparable
argument_list|<
name|NodeAllocationResult
argument_list|>
block|{
DECL|field|nodeResultComparator
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|NodeAllocationResult
argument_list|>
name|nodeResultComparator
init|=
name|Comparator
operator|.
name|comparing
argument_list|(
name|NodeAllocationResult
operator|::
name|getNodeDecision
argument_list|)
operator|.
name|thenComparingInt
argument_list|(
name|NodeAllocationResult
operator|::
name|getWeightRanking
argument_list|)
operator|.
name|thenComparing
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|node
specifier|private
specifier|final
name|DiscoveryNode
name|node
decl_stmt|;
annotation|@
name|Nullable
DECL|field|shardStoreInfo
specifier|private
specifier|final
name|ShardStoreInfo
name|shardStoreInfo
decl_stmt|;
DECL|field|nodeDecision
specifier|private
specifier|final
name|AllocationDecision
name|nodeDecision
decl_stmt|;
annotation|@
name|Nullable
DECL|field|canAllocateDecision
specifier|private
specifier|final
name|Decision
name|canAllocateDecision
decl_stmt|;
DECL|field|weightRanking
specifier|private
specifier|final
name|int
name|weightRanking
decl_stmt|;
DECL|method|NodeAllocationResult
specifier|public
name|NodeAllocationResult
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|ShardStoreInfo
name|shardStoreInfo
parameter_list|,
annotation|@
name|Nullable
name|Decision
name|decision
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|shardStoreInfo
operator|=
name|shardStoreInfo
expr_stmt|;
name|this
operator|.
name|canAllocateDecision
operator|=
name|decision
expr_stmt|;
name|this
operator|.
name|nodeDecision
operator|=
name|decision
operator|!=
literal|null
condition|?
name|AllocationDecision
operator|.
name|fromDecisionType
argument_list|(
name|canAllocateDecision
operator|.
name|type
argument_list|()
argument_list|)
else|:
name|AllocationDecision
operator|.
name|NO
expr_stmt|;
name|this
operator|.
name|weightRanking
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|NodeAllocationResult
specifier|public
name|NodeAllocationResult
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|AllocationDecision
name|nodeDecision
parameter_list|,
name|Decision
name|canAllocate
parameter_list|,
name|int
name|weightRanking
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|shardStoreInfo
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|canAllocateDecision
operator|=
name|canAllocate
expr_stmt|;
name|this
operator|.
name|nodeDecision
operator|=
name|nodeDecision
expr_stmt|;
name|this
operator|.
name|weightRanking
operator|=
name|weightRanking
expr_stmt|;
block|}
DECL|method|NodeAllocationResult
specifier|public
name|NodeAllocationResult
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|Decision
name|decision
parameter_list|,
name|int
name|weightRanking
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|shardStoreInfo
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|canAllocateDecision
operator|=
name|decision
expr_stmt|;
name|this
operator|.
name|nodeDecision
operator|=
name|AllocationDecision
operator|.
name|fromDecisionType
argument_list|(
name|decision
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|weightRanking
operator|=
name|weightRanking
expr_stmt|;
block|}
DECL|method|NodeAllocationResult
specifier|public
name|NodeAllocationResult
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|node
operator|=
operator|new
name|DiscoveryNode
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|shardStoreInfo
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|ShardStoreInfo
operator|::
operator|new
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_2_1
argument_list|)
condition|)
block|{
name|canAllocateDecision
operator|=
name|Decision
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|canAllocateDecision
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|Decision
operator|::
name|readFrom
argument_list|)
expr_stmt|;
block|}
name|nodeDecision
operator|=
name|AllocationDecision
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|weightRanking
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|node
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|shardStoreInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_2_1
argument_list|)
condition|)
block|{
if|if
condition|(
name|canAllocateDecision
operator|==
literal|null
condition|)
block|{
name|Decision
operator|.
name|NO
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|canAllocateDecision
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|canAllocateDecision
argument_list|)
expr_stmt|;
block|}
name|nodeDecision
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|weightRanking
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the node that this decision is for.      */
DECL|method|getNode
specifier|public
name|DiscoveryNode
name|getNode
parameter_list|()
block|{
return|return
name|node
return|;
block|}
comment|/**      * Get the shard store information for the node, if it exists.      */
annotation|@
name|Nullable
DECL|method|getShardStoreInfo
specifier|public
name|ShardStoreInfo
name|getShardStoreInfo
parameter_list|()
block|{
return|return
name|shardStoreInfo
return|;
block|}
comment|/**      * The decision details for allocating to this node.  Returns {@code null} if      * no allocation decision was taken on the node; in this case, {@link #getNodeDecision()}      * will return {@link AllocationDecision#NO}.      */
annotation|@
name|Nullable
DECL|method|getCanAllocateDecision
specifier|public
name|Decision
name|getCanAllocateDecision
parameter_list|()
block|{
return|return
name|canAllocateDecision
return|;
block|}
comment|/**      * Is the weight assigned for the node?      */
DECL|method|isWeightRanked
specifier|public
name|boolean
name|isWeightRanked
parameter_list|()
block|{
return|return
name|weightRanking
operator|>
literal|0
return|;
block|}
comment|/**      * The weight ranking for allocating a shard to the node.  Each node will have      * a unique weight ranking that is relative to the other nodes against which the      * deciders ran.  For example, suppose there are 3 nodes which the allocation deciders      * decided upon: node1, node2, and node3.  If node2 had the best weight for holding the      * shard, followed by node3, followed by node1, then node2's weight will be 1, node3's      * weight will be 2, and node1's weight will be 1.  A value of 0 means the weight was      * not calculated or factored into the decision.      */
DECL|method|getWeightRanking
specifier|public
name|int
name|getWeightRanking
parameter_list|()
block|{
return|return
name|weightRanking
return|;
block|}
comment|/**      * Gets the {@link AllocationDecision} for allocating to this node.      */
DECL|method|getNodeDecision
specifier|public
name|AllocationDecision
name|getNodeDecision
parameter_list|()
block|{
return|return
name|nodeDecision
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|discoveryNodeToXContent
argument_list|(
name|node
argument_list|,
literal|false
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"node_decision"
argument_list|,
name|nodeDecision
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardStoreInfo
operator|!=
literal|null
condition|)
block|{
name|shardStoreInfo
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isWeightRanked
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"weight_ranking"
argument_list|,
name|getWeightRanking
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|canAllocateDecision
operator|!=
literal|null
operator|&&
name|canAllocateDecision
operator|.
name|getDecisions
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"deciders"
argument_list|)
expr_stmt|;
name|canAllocateDecision
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|NodeAllocationResult
name|other
parameter_list|)
block|{
return|return
name|nodeResultComparator
operator|.
name|compare
argument_list|(
name|this
argument_list|,
name|other
argument_list|)
return|;
block|}
comment|/** A class that captures metadata about a shard store on a node. */
DECL|class|ShardStoreInfo
specifier|public
specifier|static
specifier|final
class|class
name|ShardStoreInfo
implements|implements
name|ToXContent
implements|,
name|Writeable
block|{
DECL|field|inSync
specifier|private
specifier|final
name|boolean
name|inSync
decl_stmt|;
annotation|@
name|Nullable
DECL|field|allocationId
specifier|private
specifier|final
name|String
name|allocationId
decl_stmt|;
DECL|field|matchingBytes
specifier|private
specifier|final
name|long
name|matchingBytes
decl_stmt|;
annotation|@
name|Nullable
DECL|field|storeException
specifier|private
specifier|final
name|Exception
name|storeException
decl_stmt|;
DECL|method|ShardStoreInfo
specifier|public
name|ShardStoreInfo
parameter_list|(
name|String
name|allocationId
parameter_list|,
name|boolean
name|inSync
parameter_list|,
name|Exception
name|storeException
parameter_list|)
block|{
name|this
operator|.
name|inSync
operator|=
name|inSync
expr_stmt|;
name|this
operator|.
name|allocationId
operator|=
name|allocationId
expr_stmt|;
name|this
operator|.
name|matchingBytes
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|storeException
operator|=
name|storeException
expr_stmt|;
block|}
DECL|method|ShardStoreInfo
specifier|public
name|ShardStoreInfo
parameter_list|(
name|long
name|matchingBytes
parameter_list|)
block|{
name|this
operator|.
name|inSync
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|allocationId
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|matchingBytes
operator|=
name|matchingBytes
expr_stmt|;
name|this
operator|.
name|storeException
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|ShardStoreInfo
specifier|public
name|ShardStoreInfo
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|inSync
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|this
operator|.
name|allocationId
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|this
operator|.
name|matchingBytes
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|storeException
operator|=
name|in
operator|.
name|readException
argument_list|()
expr_stmt|;
block|}
comment|/**          * Returns {@code true} if the shard copy is in-sync and contains the latest data.          * Returns {@code false} if the shard copy is stale or if the shard copy being examined          * is for a replica shard allocation.          */
DECL|method|isInSync
specifier|public
name|boolean
name|isInSync
parameter_list|()
block|{
return|return
name|inSync
return|;
block|}
comment|/**          * Gets the allocation id for the shard copy, if it exists.          */
annotation|@
name|Nullable
DECL|method|getAllocationId
specifier|public
name|String
name|getAllocationId
parameter_list|()
block|{
return|return
name|allocationId
return|;
block|}
comment|/**          * Returns {@code true} if the shard copy has a matching sync id with the primary shard.          * Returns {@code false} if the shard copy does not have a matching sync id with the primary          * shard, or this explanation pertains to the allocation of a primary shard, in which case          * matching sync ids are irrelevant.          */
DECL|method|hasMatchingSyncId
specifier|public
name|boolean
name|hasMatchingSyncId
parameter_list|()
block|{
return|return
name|matchingBytes
operator|==
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
comment|/**          * Gets the number of matching bytes the shard copy has with the primary shard.          * Returns {@code Long.MAX_VALUE} if {@link #hasMatchingSyncId()} returns {@code true}.          * Returns -1 if not applicable (this value only applies to assigning replica shards).          */
DECL|method|getMatchingBytes
specifier|public
name|long
name|getMatchingBytes
parameter_list|()
block|{
return|return
name|matchingBytes
return|;
block|}
comment|/**          * Gets the store exception when trying to read the store, if there was an error.  If          * there was no error, returns {@code null}.          */
annotation|@
name|Nullable
DECL|method|getStoreException
specifier|public
name|Exception
name|getStoreException
parameter_list|()
block|{
return|return
name|storeException
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|inSync
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|allocationId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|matchingBytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeException
argument_list|(
name|storeException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"store"
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
name|matchingBytes
operator|<
literal|0
condition|)
block|{
comment|// dealing with a primary shard
if|if
condition|(
name|allocationId
operator|==
literal|null
operator|&&
name|storeException
operator|==
literal|null
condition|)
block|{
comment|// there was no information we could obtain of any shard data on the node
name|builder
operator|.
name|field
argument_list|(
literal|"found"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"in_sync"
argument_list|,
name|inSync
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allocationId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"allocation_id"
argument_list|,
name|allocationId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|matchingBytes
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|hasMatchingSyncId
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"matching_sync_id"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|byteSizeField
argument_list|(
literal|"matching_size_in_bytes"
argument_list|,
literal|"matching_size"
argument_list|,
name|matchingBytes
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|storeException
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"store_exception"
argument_list|)
expr_stmt|;
name|ElasticsearchException
operator|.
name|generateThrowableXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|storeException
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
block|}
end_class

end_unit

