begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation.decider
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettingsService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * This {@link AllocationDecider} controls re-balancing operations based on the  * cluster wide active shard state. This decided can not be configured in  * real-time and should be pre-cluster start via  *<tt>cluster.routing.allocation.allow_rebalance</tt>. This setting respects the following  * values:  *<ul>  *<li><tt>indices_primaries_active</tt> - Re-balancing is allowed only once all  * primary shards on all indices are active.</li>  *  *<li><tt>indices_all_active</tt> - Re-balancing is allowed only once all  * shards on all indices are active.</li>  *  *<li><tt>always</tt> - Re-balancing is allowed once a shard replication group  * is active</li>  *</ul>  */
end_comment

begin_class
DECL|class|ClusterRebalanceAllocationDecider
specifier|public
class|class
name|ClusterRebalanceAllocationDecider
extends|extends
name|AllocationDecider
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"cluster_rebalance"
decl_stmt|;
DECL|field|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|ClusterRebalanceType
argument_list|>
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
init|=
operator|new
name|Setting
argument_list|<>
argument_list|(
literal|"cluster.routing.allocation.allow_rebalance"
argument_list|,
name|ClusterRebalanceType
operator|.
name|INDICES_ALL_ACTIVE
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
name|ClusterRebalanceType
operator|::
name|parseString
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|Cluster
argument_list|)
decl_stmt|;
comment|/**      * An enum representation for the configured re-balance type.      */
DECL|enum|ClusterRebalanceType
specifier|public
specifier|static
enum|enum
name|ClusterRebalanceType
block|{
comment|/**          * Re-balancing is allowed once a shard replication group is active          */
DECL|enum constant|ALWAYS
name|ALWAYS
block|,
comment|/**          * Re-balancing is allowed only once all primary shards on all indices are active.          */
DECL|enum constant|INDICES_PRIMARIES_ACTIVE
name|INDICES_PRIMARIES_ACTIVE
block|,
comment|/**          * Re-balancing is allowed only once all shards on all indices are active.          */
DECL|enum constant|INDICES_ALL_ACTIVE
name|INDICES_ALL_ACTIVE
block|;
DECL|method|parseString
specifier|public
specifier|static
name|ClusterRebalanceType
name|parseString
parameter_list|(
name|String
name|typeString
parameter_list|)
block|{
if|if
condition|(
literal|"always"
operator|.
name|equalsIgnoreCase
argument_list|(
name|typeString
argument_list|)
condition|)
block|{
return|return
name|ClusterRebalanceType
operator|.
name|ALWAYS
return|;
block|}
elseif|else
if|if
condition|(
literal|"indices_primaries_active"
operator|.
name|equalsIgnoreCase
argument_list|(
name|typeString
argument_list|)
operator|||
literal|"indicesPrimariesActive"
operator|.
name|equalsIgnoreCase
argument_list|(
name|typeString
argument_list|)
condition|)
block|{
return|return
name|ClusterRebalanceType
operator|.
name|INDICES_PRIMARIES_ACTIVE
return|;
block|}
elseif|else
if|if
condition|(
literal|"indices_all_active"
operator|.
name|equalsIgnoreCase
argument_list|(
name|typeString
argument_list|)
operator|||
literal|"indicesAllActive"
operator|.
name|equalsIgnoreCase
argument_list|(
name|typeString
argument_list|)
condition|)
block|{
return|return
name|ClusterRebalanceType
operator|.
name|INDICES_ALL_ACTIVE
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal value for "
operator|+
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
operator|+
literal|": "
operator|+
name|typeString
argument_list|)
throw|;
block|}
block|}
DECL|field|type
specifier|private
name|ClusterRebalanceType
name|type
decl_stmt|;
annotation|@
name|Inject
DECL|method|ClusterRebalanceAllocationDecider
specifier|public
name|ClusterRebalanceAllocationDecider
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterSettingsService
name|clusterSettingsService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
try|try
block|{
name|type
operator|=
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] has a wrong value {}, defaulting to 'indices_all_active'"
argument_list|,
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
argument_list|,
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
operator|.
name|getRaw
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|type
operator|=
name|ClusterRebalanceType
operator|.
name|INDICES_ALL_ACTIVE
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"using [{}] with [{}]"
argument_list|,
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
argument_list|,
name|type
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|clusterSettingsService
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
argument_list|,
name|this
operator|::
name|setType
argument_list|)
expr_stmt|;
block|}
DECL|method|setType
specifier|public
name|void
name|setType
parameter_list|(
name|ClusterRebalanceType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|canRebalance
specifier|public
name|Decision
name|canRebalance
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
return|return
name|canRebalance
argument_list|(
name|allocation
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|canRebalance
specifier|public
name|Decision
name|canRebalance
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|ClusterRebalanceType
operator|.
name|INDICES_PRIMARIES_ACTIVE
condition|)
block|{
comment|// check if there are unassigned primaries.
if|if
condition|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|hasUnassignedPrimaries
argument_list|()
condition|)
block|{
return|return
name|allocation
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|NAME
argument_list|,
literal|"cluster has unassigned primary shards"
argument_list|)
return|;
block|}
comment|// check if there are initializing primaries that don't have a relocatingNodeId entry.
if|if
condition|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|hasInactivePrimaries
argument_list|()
condition|)
block|{
return|return
name|allocation
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|NAME
argument_list|,
literal|"cluster has inactive primary shards"
argument_list|)
return|;
block|}
return|return
name|allocation
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|YES
argument_list|,
name|NAME
argument_list|,
literal|"all primary shards are active"
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|ClusterRebalanceType
operator|.
name|INDICES_ALL_ACTIVE
condition|)
block|{
comment|// check if there are unassigned shards.
if|if
condition|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|hasUnassignedShards
argument_list|()
condition|)
block|{
return|return
name|allocation
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|NAME
argument_list|,
literal|"cluster has unassigned shards"
argument_list|)
return|;
block|}
comment|// in case all indices are assigned, are there initializing shards which
comment|// are not relocating?
if|if
condition|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|hasInactiveShards
argument_list|()
condition|)
block|{
return|return
name|allocation
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|NAME
argument_list|,
literal|"cluster has inactive shards"
argument_list|)
return|;
block|}
block|}
comment|// type == Type.ALWAYS
return|return
name|allocation
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|YES
argument_list|,
name|NAME
argument_list|,
literal|"all shards are active"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

