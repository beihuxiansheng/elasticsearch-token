begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation.command
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RerouteExplanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Allocates an unassigned replica shard to a specific node. Checks if allocation deciders allow allocation.  */
end_comment

begin_class
DECL|class|AllocateReplicaAllocationCommand
specifier|public
class|class
name|AllocateReplicaAllocationCommand
extends|extends
name|AbstractAllocateAllocationCommand
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"allocate_replica"
decl_stmt|;
DECL|field|REPLICA_PARSER
specifier|private
specifier|static
specifier|final
name|ObjectParser
argument_list|<
name|AllocateReplicaAllocationCommand
operator|.
name|Builder
argument_list|,
name|Void
argument_list|>
name|REPLICA_PARSER
init|=
name|createAllocateParser
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
comment|/**      * Creates a new {@link AllocateReplicaAllocationCommand}      *      * @param index          index of the shard to assign      * @param shardId        id of the shard to assign      * @param node           node id of the node to assign the shard to      */
DECL|method|AllocateReplicaAllocationCommand
specifier|public
name|AllocateReplicaAllocationCommand
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|shardId
parameter_list|,
name|String
name|node
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|shardId
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
DECL|class|Builder
specifier|protected
specifier|static
class|class
name|Builder
extends|extends
name|AbstractAllocateAllocationCommand
operator|.
name|Builder
argument_list|<
name|AllocateReplicaAllocationCommand
argument_list|>
block|{
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Builder
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|REPLICA_PARSER
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|AllocateReplicaAllocationCommand
name|build
parameter_list|()
block|{
name|validate
argument_list|()
expr_stmt|;
return|return
operator|new
name|AllocateReplicaAllocationCommand
argument_list|(
name|index
argument_list|,
name|shard
argument_list|,
name|node
argument_list|)
return|;
block|}
block|}
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
extends|extends
name|AbstractAllocateAllocationCommand
operator|.
name|Factory
argument_list|<
name|AllocateReplicaAllocationCommand
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newBuilder
specifier|protected
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|RerouteExplanation
name|execute
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|,
name|boolean
name|explain
parameter_list|)
block|{
specifier|final
name|DiscoveryNode
name|discoNode
decl_stmt|;
try|try
block|{
name|discoNode
operator|=
name|allocation
operator|.
name|nodes
argument_list|()
operator|.
name|resolveNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
name|explainOrThrowRejectedCommand
argument_list|(
name|explain
argument_list|,
name|allocation
argument_list|,
name|e
argument_list|)
return|;
block|}
specifier|final
name|RoutingNodes
name|routingNodes
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
name|RoutingNode
name|routingNode
init|=
name|routingNodes
operator|.
name|node
argument_list|(
name|discoNode
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|routingNode
operator|==
literal|null
condition|)
block|{
return|return
name|explainOrThrowMissingRoutingNode
argument_list|(
name|allocation
argument_list|,
name|explain
argument_list|,
name|discoNode
argument_list|)
return|;
block|}
specifier|final
name|ShardRouting
name|primaryShardRouting
decl_stmt|;
try|try
block|{
name|primaryShardRouting
operator|=
name|allocation
operator|.
name|routingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|index
argument_list|,
name|shardId
argument_list|)
operator|.
name|primaryShard
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
decl||
name|ShardNotFoundException
name|e
parameter_list|)
block|{
return|return
name|explainOrThrowRejectedCommand
argument_list|(
name|explain
argument_list|,
name|allocation
argument_list|,
name|e
argument_list|)
return|;
block|}
if|if
condition|(
name|primaryShardRouting
operator|.
name|unassigned
argument_list|()
condition|)
block|{
return|return
name|explainOrThrowRejectedCommand
argument_list|(
name|explain
argument_list|,
name|allocation
argument_list|,
literal|"trying to allocate a replica shard ["
operator|+
name|index
operator|+
literal|"]["
operator|+
name|shardId
operator|+
literal|"], while corresponding primary shard is still unassigned"
argument_list|)
return|;
block|}
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|replicaShardRoutings
init|=
name|allocation
operator|.
name|routingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|index
argument_list|,
name|shardId
argument_list|)
operator|.
name|replicaShardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
decl_stmt|;
name|ShardRouting
name|shardRouting
decl_stmt|;
if|if
condition|(
name|replicaShardRoutings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|explainOrThrowRejectedCommand
argument_list|(
name|explain
argument_list|,
name|allocation
argument_list|,
literal|"all copies of ["
operator|+
name|index
operator|+
literal|"]["
operator|+
name|shardId
operator|+
literal|"] are already assigned. Use the move allocation command instead"
argument_list|)
return|;
block|}
else|else
block|{
name|shardRouting
operator|=
name|replicaShardRoutings
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|Decision
name|decision
init|=
name|allocation
operator|.
name|deciders
argument_list|()
operator|.
name|canAllocate
argument_list|(
name|shardRouting
argument_list|,
name|routingNode
argument_list|,
name|allocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|decision
operator|.
name|type
argument_list|()
operator|==
name|Decision
operator|.
name|Type
operator|.
name|NO
condition|)
block|{
comment|// don't use explainOrThrowRejectedCommand to keep the original "NO" decision
if|if
condition|(
name|explain
condition|)
block|{
return|return
operator|new
name|RerouteExplanation
argument_list|(
name|this
argument_list|,
name|decision
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|name
argument_list|()
operator|+
literal|"] allocation of ["
operator|+
name|index
operator|+
literal|"]["
operator|+
name|shardId
operator|+
literal|"] on node "
operator|+
name|discoNode
operator|+
literal|" is not allowed, reason: "
operator|+
name|decision
argument_list|)
throw|;
block|}
name|initializeUnassignedShard
argument_list|(
name|allocation
argument_list|,
name|routingNodes
argument_list|,
name|routingNode
argument_list|,
name|shardRouting
argument_list|)
expr_stmt|;
return|return
operator|new
name|RerouteExplanation
argument_list|(
name|this
argument_list|,
name|decision
argument_list|)
return|;
block|}
block|}
end_class

end_unit

