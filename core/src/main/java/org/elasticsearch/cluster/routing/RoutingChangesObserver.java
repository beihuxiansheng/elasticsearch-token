begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
package|;
end_package

begin_comment
comment|/**  * Records changes made to {@link RoutingNodes} during an allocation round.  */
end_comment

begin_interface
DECL|interface|RoutingChangesObserver
specifier|public
interface|interface
name|RoutingChangesObserver
block|{
comment|/**      * Called when unassigned shard is initialized. Does not include initializing relocation target shards.      */
DECL|method|shardInitialized
name|void
name|shardInitialized
parameter_list|(
name|ShardRouting
name|unassignedShard
parameter_list|)
function_decl|;
comment|/**      * Called when an initializing shard is started.      */
DECL|method|shardStarted
name|void
name|shardStarted
parameter_list|(
name|ShardRouting
name|initializingShard
parameter_list|,
name|ShardRouting
name|startedShard
parameter_list|)
function_decl|;
comment|/**      * Called when relocation of a started shard is initiated.      */
DECL|method|relocationStarted
name|void
name|relocationStarted
parameter_list|(
name|ShardRouting
name|startedShard
parameter_list|,
name|ShardRouting
name|targetRelocatingShard
parameter_list|)
function_decl|;
comment|/**      * Called when an unassigned shard's unassigned information was updated      */
DECL|method|unassignedInfoUpdated
name|void
name|unassignedInfoUpdated
parameter_list|(
name|ShardRouting
name|unassignedShard
parameter_list|,
name|UnassignedInfo
name|newUnassignedInfo
parameter_list|)
function_decl|;
comment|/**      * Called when a shard is failed or cancelled.      */
DECL|method|shardFailed
name|void
name|shardFailed
parameter_list|(
name|ShardRouting
name|failedShard
parameter_list|,
name|UnassignedInfo
name|unassignedInfo
parameter_list|)
function_decl|;
comment|/**      * Called on relocation source when relocation completes after relocation target is started.      */
DECL|method|relocationCompleted
name|void
name|relocationCompleted
parameter_list|(
name|ShardRouting
name|removedRelocationSource
parameter_list|)
function_decl|;
comment|/**      * Called on replica relocation target when replica relocation source fails. Promotes the replica relocation target to ordinary      * initializing shard.      */
DECL|method|relocationSourceRemoved
name|void
name|relocationSourceRemoved
parameter_list|(
name|ShardRouting
name|removedReplicaRelocationSource
parameter_list|)
function_decl|;
comment|/**      * Called on started primary shard after it has been promoted from replica to primary and is reinitialized due to shadow replicas.      */
DECL|method|startedPrimaryReinitialized
name|void
name|startedPrimaryReinitialized
parameter_list|(
name|ShardRouting
name|startedPrimaryShard
parameter_list|,
name|ShardRouting
name|initializedShard
parameter_list|)
function_decl|;
comment|/**      * Called when started replica is promoted to primary.      */
DECL|method|replicaPromoted
name|void
name|replicaPromoted
parameter_list|(
name|ShardRouting
name|replicaShard
parameter_list|)
function_decl|;
comment|/**      * Abstract implementation of {@link RoutingChangesObserver} that does not take any action. Useful for subclasses that only override      * certain methods.      */
DECL|class|AbstractRoutingChangesObserver
class|class
name|AbstractRoutingChangesObserver
implements|implements
name|RoutingChangesObserver
block|{
annotation|@
name|Override
DECL|method|shardInitialized
specifier|public
name|void
name|shardInitialized
parameter_list|(
name|ShardRouting
name|unassignedShard
parameter_list|)
block|{          }
annotation|@
name|Override
DECL|method|shardStarted
specifier|public
name|void
name|shardStarted
parameter_list|(
name|ShardRouting
name|initializingShard
parameter_list|,
name|ShardRouting
name|startedShard
parameter_list|)
block|{          }
annotation|@
name|Override
DECL|method|relocationStarted
specifier|public
name|void
name|relocationStarted
parameter_list|(
name|ShardRouting
name|startedShard
parameter_list|,
name|ShardRouting
name|targetRelocatingShard
parameter_list|)
block|{          }
annotation|@
name|Override
DECL|method|unassignedInfoUpdated
specifier|public
name|void
name|unassignedInfoUpdated
parameter_list|(
name|ShardRouting
name|unassignedShard
parameter_list|,
name|UnassignedInfo
name|newUnassignedInfo
parameter_list|)
block|{          }
annotation|@
name|Override
DECL|method|shardFailed
specifier|public
name|void
name|shardFailed
parameter_list|(
name|ShardRouting
name|activeShard
parameter_list|,
name|UnassignedInfo
name|unassignedInfo
parameter_list|)
block|{          }
annotation|@
name|Override
DECL|method|relocationCompleted
specifier|public
name|void
name|relocationCompleted
parameter_list|(
name|ShardRouting
name|removedRelocationSource
parameter_list|)
block|{          }
annotation|@
name|Override
DECL|method|relocationSourceRemoved
specifier|public
name|void
name|relocationSourceRemoved
parameter_list|(
name|ShardRouting
name|removedReplicaRelocationSource
parameter_list|)
block|{          }
annotation|@
name|Override
DECL|method|startedPrimaryReinitialized
specifier|public
name|void
name|startedPrimaryReinitialized
parameter_list|(
name|ShardRouting
name|startedPrimaryShard
parameter_list|,
name|ShardRouting
name|initializedShard
parameter_list|)
block|{          }
annotation|@
name|Override
DECL|method|replicaPromoted
specifier|public
name|void
name|replicaPromoted
parameter_list|(
name|ShardRouting
name|replicaShard
parameter_list|)
block|{          }
block|}
DECL|class|DelegatingRoutingChangesObserver
class|class
name|DelegatingRoutingChangesObserver
implements|implements
name|RoutingChangesObserver
block|{
DECL|field|routingChangesObservers
specifier|private
specifier|final
name|RoutingChangesObserver
index|[]
name|routingChangesObservers
decl_stmt|;
DECL|method|DelegatingRoutingChangesObserver
specifier|public
name|DelegatingRoutingChangesObserver
parameter_list|(
name|RoutingChangesObserver
modifier|...
name|routingChangesObservers
parameter_list|)
block|{
name|this
operator|.
name|routingChangesObservers
operator|=
name|routingChangesObservers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shardInitialized
specifier|public
name|void
name|shardInitialized
parameter_list|(
name|ShardRouting
name|unassignedShard
parameter_list|)
block|{
for|for
control|(
name|RoutingChangesObserver
name|routingChangesObserver
range|:
name|routingChangesObservers
control|)
block|{
name|routingChangesObserver
operator|.
name|shardInitialized
argument_list|(
name|unassignedShard
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|shardStarted
specifier|public
name|void
name|shardStarted
parameter_list|(
name|ShardRouting
name|initializingShard
parameter_list|,
name|ShardRouting
name|startedShard
parameter_list|)
block|{
for|for
control|(
name|RoutingChangesObserver
name|routingChangesObserver
range|:
name|routingChangesObservers
control|)
block|{
name|routingChangesObserver
operator|.
name|shardStarted
argument_list|(
name|initializingShard
argument_list|,
name|startedShard
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|relocationStarted
specifier|public
name|void
name|relocationStarted
parameter_list|(
name|ShardRouting
name|startedShard
parameter_list|,
name|ShardRouting
name|targetRelocatingShard
parameter_list|)
block|{
for|for
control|(
name|RoutingChangesObserver
name|routingChangesObserver
range|:
name|routingChangesObservers
control|)
block|{
name|routingChangesObserver
operator|.
name|relocationStarted
argument_list|(
name|startedShard
argument_list|,
name|targetRelocatingShard
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|unassignedInfoUpdated
specifier|public
name|void
name|unassignedInfoUpdated
parameter_list|(
name|ShardRouting
name|unassignedShard
parameter_list|,
name|UnassignedInfo
name|newUnassignedInfo
parameter_list|)
block|{
for|for
control|(
name|RoutingChangesObserver
name|routingChangesObserver
range|:
name|routingChangesObservers
control|)
block|{
name|routingChangesObserver
operator|.
name|unassignedInfoUpdated
argument_list|(
name|unassignedShard
argument_list|,
name|newUnassignedInfo
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|shardFailed
specifier|public
name|void
name|shardFailed
parameter_list|(
name|ShardRouting
name|activeShard
parameter_list|,
name|UnassignedInfo
name|unassignedInfo
parameter_list|)
block|{
for|for
control|(
name|RoutingChangesObserver
name|routingChangesObserver
range|:
name|routingChangesObservers
control|)
block|{
name|routingChangesObserver
operator|.
name|shardFailed
argument_list|(
name|activeShard
argument_list|,
name|unassignedInfo
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|relocationCompleted
specifier|public
name|void
name|relocationCompleted
parameter_list|(
name|ShardRouting
name|removedRelocationSource
parameter_list|)
block|{
for|for
control|(
name|RoutingChangesObserver
name|routingChangesObserver
range|:
name|routingChangesObservers
control|)
block|{
name|routingChangesObserver
operator|.
name|relocationCompleted
argument_list|(
name|removedRelocationSource
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|relocationSourceRemoved
specifier|public
name|void
name|relocationSourceRemoved
parameter_list|(
name|ShardRouting
name|removedReplicaRelocationSource
parameter_list|)
block|{
for|for
control|(
name|RoutingChangesObserver
name|routingChangesObserver
range|:
name|routingChangesObservers
control|)
block|{
name|routingChangesObserver
operator|.
name|relocationSourceRemoved
argument_list|(
name|removedReplicaRelocationSource
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|startedPrimaryReinitialized
specifier|public
name|void
name|startedPrimaryReinitialized
parameter_list|(
name|ShardRouting
name|startedPrimaryShard
parameter_list|,
name|ShardRouting
name|initializedShard
parameter_list|)
block|{
for|for
control|(
name|RoutingChangesObserver
name|routingChangesObserver
range|:
name|routingChangesObservers
control|)
block|{
name|routingChangesObserver
operator|.
name|startedPrimaryReinitialized
argument_list|(
name|startedPrimaryShard
argument_list|,
name|initializedShard
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|replicaPromoted
specifier|public
name|void
name|replicaPromoted
parameter_list|(
name|ShardRouting
name|replicaShard
parameter_list|)
block|{
for|for
control|(
name|RoutingChangesObserver
name|routingChangesObserver
range|:
name|routingChangesObservers
control|)
block|{
name|routingChangesObserver
operator|.
name|replicaPromoted
argument_list|(
name|replicaShard
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_interface

end_unit

