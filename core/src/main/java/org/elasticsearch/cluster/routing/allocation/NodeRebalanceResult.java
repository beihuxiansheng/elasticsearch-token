begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A node-level explanation for the decision to rebalance a shard.  */
end_comment

begin_class
DECL|class|NodeRebalanceResult
specifier|public
specifier|final
class|class
name|NodeRebalanceResult
block|{
DECL|field|nodeDecisionType
specifier|private
specifier|final
name|Decision
operator|.
name|Type
name|nodeDecisionType
decl_stmt|;
DECL|field|canAllocate
specifier|private
specifier|final
name|Decision
name|canAllocate
decl_stmt|;
DECL|field|betterWeightThanCurrent
specifier|private
specifier|final
name|boolean
name|betterWeightThanCurrent
decl_stmt|;
DECL|field|deltaAboveThreshold
specifier|private
specifier|final
name|boolean
name|deltaAboveThreshold
decl_stmt|;
DECL|field|currentWeight
specifier|private
specifier|final
name|float
name|currentWeight
decl_stmt|;
DECL|field|weightWithShardAdded
specifier|private
specifier|final
name|float
name|weightWithShardAdded
decl_stmt|;
DECL|method|NodeRebalanceResult
specifier|public
name|NodeRebalanceResult
parameter_list|(
name|Decision
operator|.
name|Type
name|nodeDecisionType
parameter_list|,
name|Decision
name|canAllocate
parameter_list|,
name|boolean
name|betterWeightThanCurrent
parameter_list|,
name|boolean
name|deltaAboveThreshold
parameter_list|,
name|float
name|currentWeight
parameter_list|,
name|float
name|weightWithShardAdded
parameter_list|)
block|{
name|this
operator|.
name|nodeDecisionType
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|nodeDecisionType
argument_list|)
expr_stmt|;
name|this
operator|.
name|canAllocate
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|canAllocate
argument_list|)
expr_stmt|;
name|this
operator|.
name|betterWeightThanCurrent
operator|=
name|betterWeightThanCurrent
expr_stmt|;
name|this
operator|.
name|deltaAboveThreshold
operator|=
name|deltaAboveThreshold
expr_stmt|;
name|this
operator|.
name|currentWeight
operator|=
name|currentWeight
expr_stmt|;
name|this
operator|.
name|weightWithShardAdded
operator|=
name|weightWithShardAdded
expr_stmt|;
block|}
comment|/**      * Returns the decision to rebalance to the node.      */
DECL|method|getNodeDecisionType
specifier|public
name|Decision
operator|.
name|Type
name|getNodeDecisionType
parameter_list|()
block|{
return|return
name|nodeDecisionType
return|;
block|}
comment|/**      * Returns whether the shard is allowed to be allocated to the node.      */
DECL|method|getCanAllocateDecision
specifier|public
name|Decision
name|getCanAllocateDecision
parameter_list|()
block|{
return|return
name|canAllocate
return|;
block|}
comment|/**      * Returns whether the weight of the node is better than the weight of the node where the shard currently resides.      */
DECL|method|isBetterWeightThanCurrent
specifier|public
name|boolean
name|isBetterWeightThanCurrent
parameter_list|()
block|{
return|return
name|betterWeightThanCurrent
return|;
block|}
comment|/**      * Returns if the weight delta by assigning to this node was above the threshold to warrant a rebalance.      */
DECL|method|isDeltaAboveThreshold
specifier|public
name|boolean
name|isDeltaAboveThreshold
parameter_list|()
block|{
return|return
name|deltaAboveThreshold
return|;
block|}
comment|/**      * Returns the current weight of the node if the shard is not added to the node.      */
DECL|method|getCurrentWeight
specifier|public
name|float
name|getCurrentWeight
parameter_list|()
block|{
return|return
name|currentWeight
return|;
block|}
comment|/**      * Returns the weight of the node if the shard is added to the node.      */
DECL|method|getWeightWithShardAdded
specifier|public
name|float
name|getWeightWithShardAdded
parameter_list|()
block|{
return|return
name|weightWithShardAdded
return|;
block|}
block|}
end_class

end_unit

