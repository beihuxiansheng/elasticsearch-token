begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterStateHealth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
operator|.
name|AllocationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|ShardsAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocationCommands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDeciders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayAllocator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
import|;
end_import

begin_comment
comment|/**  * This service manages the node allocation of a cluster. For this reason the  * {@link AllocationService} keeps {@link AllocationDeciders} to choose nodes  * for shard allocation. This class also manages new nodes joining the cluster  * and rerouting of shards.  */
end_comment

begin_class
DECL|class|AllocationService
specifier|public
class|class
name|AllocationService
extends|extends
name|AbstractComponent
block|{
DECL|field|allocationDeciders
specifier|private
specifier|final
name|AllocationDeciders
name|allocationDeciders
decl_stmt|;
DECL|field|gatewayAllocator
specifier|private
specifier|final
name|GatewayAllocator
name|gatewayAllocator
decl_stmt|;
DECL|field|shardsAllocator
specifier|private
specifier|final
name|ShardsAllocator
name|shardsAllocator
decl_stmt|;
DECL|field|clusterInfoService
specifier|private
specifier|final
name|ClusterInfoService
name|clusterInfoService
decl_stmt|;
annotation|@
name|Inject
DECL|method|AllocationService
specifier|public
name|AllocationService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|AllocationDeciders
name|allocationDeciders
parameter_list|,
name|GatewayAllocator
name|gatewayAllocator
parameter_list|,
name|ShardsAllocator
name|shardsAllocator
parameter_list|,
name|ClusterInfoService
name|clusterInfoService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|allocationDeciders
operator|=
name|allocationDeciders
expr_stmt|;
name|this
operator|.
name|gatewayAllocator
operator|=
name|gatewayAllocator
expr_stmt|;
name|this
operator|.
name|shardsAllocator
operator|=
name|shardsAllocator
expr_stmt|;
name|this
operator|.
name|clusterInfoService
operator|=
name|clusterInfoService
expr_stmt|;
block|}
comment|/**      * Applies the started shards. Note, only initializing ShardRouting instances that exist in the routing table should be      * provided as parameter and no duplicates should be contained.      *<p>      * If the same instance of the {@link ClusterState} is returned, then no change has been made.</p>      */
DECL|method|applyStartedShards
specifier|public
name|ClusterState
name|applyStartedShards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|startedShards
parameter_list|)
block|{
return|return
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|startedShards
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|applyStartedShards
specifier|public
name|ClusterState
name|applyStartedShards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|startedShards
parameter_list|,
name|boolean
name|withReroute
parameter_list|)
block|{
if|if
condition|(
name|startedShards
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|clusterState
return|;
block|}
name|RoutingNodes
name|routingNodes
init|=
name|getMutableRoutingNodes
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
comment|// shuffle the unassigned nodes, just so we won't have things like poison failed shards
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|shuffle
argument_list|()
expr_stmt|;
name|RoutingAllocation
name|allocation
init|=
operator|new
name|RoutingAllocation
argument_list|(
name|allocationDeciders
argument_list|,
name|routingNodes
argument_list|,
name|clusterState
argument_list|,
name|clusterInfoService
operator|.
name|getClusterInfo
argument_list|()
argument_list|,
name|currentNanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|applyStartedShards
argument_list|(
name|allocation
argument_list|,
name|startedShards
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardRouting
name|startedShard
range|:
name|startedShards
control|)
block|{
name|gatewayAllocator
operator|.
name|applyStartedShard
argument_list|(
name|startedShard
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|withReroute
condition|)
block|{
name|reroute
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
block|}
name|String
name|startedShardsAsString
init|=
name|firstListElementsToCommaDelimitedString
argument_list|(
name|startedShards
argument_list|,
name|s
lambda|->
name|s
operator|.
name|shardId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|buildResultAndLogHealthChange
argument_list|(
name|clusterState
argument_list|,
name|allocation
argument_list|,
literal|"shards started ["
operator|+
name|startedShardsAsString
operator|+
literal|"] ..."
argument_list|)
return|;
block|}
DECL|method|buildResultAndLogHealthChange
specifier|protected
name|ClusterState
name|buildResultAndLogHealthChange
parameter_list|(
name|ClusterState
name|oldState
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
return|return
name|buildResultAndLogHealthChange
argument_list|(
name|oldState
argument_list|,
name|allocation
argument_list|,
name|reason
argument_list|,
operator|new
name|RoutingExplanations
argument_list|()
argument_list|)
return|;
block|}
DECL|method|buildResultAndLogHealthChange
specifier|protected
name|ClusterState
name|buildResultAndLogHealthChange
parameter_list|(
name|ClusterState
name|oldState
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|,
name|String
name|reason
parameter_list|,
name|RoutingExplanations
name|explanations
parameter_list|)
block|{
name|RoutingTable
name|oldRoutingTable
init|=
name|oldState
operator|.
name|routingTable
argument_list|()
decl_stmt|;
name|RoutingNodes
name|newRoutingNodes
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
specifier|final
name|RoutingTable
name|newRoutingTable
init|=
operator|new
name|RoutingTable
operator|.
name|Builder
argument_list|()
operator|.
name|updateNodes
argument_list|(
name|oldRoutingTable
operator|.
name|version
argument_list|()
argument_list|,
name|newRoutingNodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MetaData
name|newMetaData
init|=
name|allocation
operator|.
name|updateMetaDataWithRoutingChanges
argument_list|(
name|newRoutingTable
argument_list|)
decl_stmt|;
assert|assert
name|newRoutingTable
operator|.
name|validate
argument_list|(
name|newMetaData
argument_list|)
assert|;
comment|// validates the routing table is coherent with the cluster state metadata
specifier|final
name|ClusterState
name|newState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|oldState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|newRoutingTable
argument_list|)
operator|.
name|metaData
argument_list|(
name|newMetaData
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|logClusterHealthStateChange
argument_list|(
operator|new
name|ClusterStateHealth
argument_list|(
name|oldState
argument_list|)
argument_list|,
operator|new
name|ClusterStateHealth
argument_list|(
name|newState
argument_list|)
argument_list|,
name|reason
argument_list|)
expr_stmt|;
return|return
name|newState
return|;
block|}
DECL|method|applyFailedShard
specifier|public
name|ClusterState
name|applyFailedShard
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ShardRouting
name|failedShard
parameter_list|)
block|{
return|return
name|applyFailedShards
argument_list|(
name|clusterState
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|FailedShard
argument_list|(
name|failedShard
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|applyFailedShards
specifier|public
name|ClusterState
name|applyFailedShards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|List
argument_list|<
name|FailedShard
argument_list|>
name|failedShards
parameter_list|)
block|{
return|return
name|applyFailedShards
argument_list|(
name|clusterState
argument_list|,
name|failedShards
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Applies the failed shards. Note, only assigned ShardRouting instances that exist in the routing table should be      * provided as parameter. Also applies a list of allocation ids to remove from the in-sync set for shard copies for which there      * are no routing entries in the routing table.      *      *<p>      * If the same instance of ClusterState is returned, then no change has been made.</p>      */
DECL|method|applyFailedShards
specifier|public
name|ClusterState
name|applyFailedShards
parameter_list|(
specifier|final
name|ClusterState
name|clusterState
parameter_list|,
specifier|final
name|List
argument_list|<
name|FailedShard
argument_list|>
name|failedShards
parameter_list|,
specifier|final
name|List
argument_list|<
name|StaleShard
argument_list|>
name|staleShards
parameter_list|)
block|{
if|if
condition|(
name|staleShards
operator|.
name|isEmpty
argument_list|()
operator|&&
name|failedShards
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|clusterState
return|;
block|}
name|ClusterState
name|tmpState
init|=
name|IndexMetaDataUpdater
operator|.
name|removeStaleIdsWithoutRoutings
argument_list|(
name|clusterState
argument_list|,
name|staleShards
argument_list|)
decl_stmt|;
name|RoutingNodes
name|routingNodes
init|=
name|getMutableRoutingNodes
argument_list|(
name|tmpState
argument_list|)
decl_stmt|;
comment|// shuffle the unassigned nodes, just so we won't have things like poison failed shards
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|shuffle
argument_list|()
expr_stmt|;
name|long
name|currentNanoTime
init|=
name|currentNanoTime
argument_list|()
decl_stmt|;
name|RoutingAllocation
name|allocation
init|=
operator|new
name|RoutingAllocation
argument_list|(
name|allocationDeciders
argument_list|,
name|routingNodes
argument_list|,
name|tmpState
argument_list|,
name|clusterInfoService
operator|.
name|getClusterInfo
argument_list|()
argument_list|,
name|currentNanoTime
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|FailedShard
name|failedShardEntry
range|:
name|failedShards
control|)
block|{
name|ShardRouting
name|shardToFail
init|=
name|failedShardEntry
operator|.
name|getRoutingEntry
argument_list|()
decl_stmt|;
name|IndexMetaData
name|indexMetaData
init|=
name|allocation
operator|.
name|metaData
argument_list|()
operator|.
name|getIndexSafe
argument_list|(
name|shardToFail
operator|.
name|shardId
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|allocation
operator|.
name|addIgnoreShardForNode
argument_list|(
name|shardToFail
operator|.
name|shardId
argument_list|()
argument_list|,
name|shardToFail
operator|.
name|currentNodeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// failing a primary also fails initializing replica shards, re-resolve ShardRouting
name|ShardRouting
name|failedShard
init|=
name|routingNodes
operator|.
name|getByAllocationId
argument_list|(
name|shardToFail
operator|.
name|shardId
argument_list|()
argument_list|,
name|shardToFail
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|failedShard
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|failedShard
operator|!=
name|shardToFail
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} shard routing modified in an earlier iteration (previous: {}, current: {})"
argument_list|,
name|shardToFail
operator|.
name|shardId
argument_list|()
argument_list|,
name|shardToFail
argument_list|,
name|failedShard
argument_list|)
expr_stmt|;
block|}
name|int
name|failedAllocations
init|=
name|failedShard
operator|.
name|unassignedInfo
argument_list|()
operator|!=
literal|null
condition|?
name|failedShard
operator|.
name|unassignedInfo
argument_list|()
operator|.
name|getNumFailedAllocations
argument_list|()
else|:
literal|0
decl_stmt|;
name|UnassignedInfo
name|unassignedInfo
init|=
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|ALLOCATION_FAILED
argument_list|,
name|failedShardEntry
operator|.
name|getMessage
argument_list|()
argument_list|,
name|failedShardEntry
operator|.
name|getFailure
argument_list|()
argument_list|,
name|failedAllocations
operator|+
literal|1
argument_list|,
name|currentNanoTime
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|false
argument_list|,
name|AllocationStatus
operator|.
name|NO_ATTEMPT
argument_list|)
decl_stmt|;
name|routingNodes
operator|.
name|failShard
argument_list|(
name|logger
argument_list|,
name|failedShard
argument_list|,
name|unassignedInfo
argument_list|,
name|indexMetaData
argument_list|,
name|allocation
operator|.
name|changes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} shard routing failed in an earlier iteration (routing: {})"
argument_list|,
name|shardToFail
operator|.
name|shardId
argument_list|()
argument_list|,
name|shardToFail
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|FailedShard
name|failedShard
range|:
name|failedShards
control|)
block|{
name|gatewayAllocator
operator|.
name|applyFailedShard
argument_list|(
name|failedShard
operator|.
name|getRoutingEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reroute
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|String
name|failedShardsAsString
init|=
name|firstListElementsToCommaDelimitedString
argument_list|(
name|failedShards
argument_list|,
name|s
lambda|->
name|s
operator|.
name|getRoutingEntry
argument_list|()
operator|.
name|shardId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|buildResultAndLogHealthChange
argument_list|(
name|clusterState
argument_list|,
name|allocation
argument_list|,
literal|"shards failed ["
operator|+
name|failedShardsAsString
operator|+
literal|"] ..."
argument_list|)
return|;
block|}
comment|/**      * unassigned an shards that are associated with nodes that are no longer part of the cluster, potentially promoting replicas      * if needed.      */
DECL|method|deassociateDeadNodes
specifier|public
name|ClusterState
name|deassociateDeadNodes
parameter_list|(
specifier|final
name|ClusterState
name|clusterState
parameter_list|,
name|boolean
name|reroute
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|RoutingNodes
name|routingNodes
init|=
name|getMutableRoutingNodes
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
comment|// shuffle the unassigned nodes, just so we won't have things like poison failed shards
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|shuffle
argument_list|()
expr_stmt|;
name|RoutingAllocation
name|allocation
init|=
operator|new
name|RoutingAllocation
argument_list|(
name|allocationDeciders
argument_list|,
name|routingNodes
argument_list|,
name|clusterState
argument_list|,
name|clusterInfoService
operator|.
name|getClusterInfo
argument_list|()
argument_list|,
name|currentNanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// first, clear from the shards any node id they used to belong to that is now dead
name|deassociateDeadNodes
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
if|if
condition|(
name|reroute
condition|)
block|{
name|reroute
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
name|clusterState
return|;
block|}
return|return
name|buildResultAndLogHealthChange
argument_list|(
name|clusterState
argument_list|,
name|allocation
argument_list|,
name|reason
argument_list|)
return|;
block|}
comment|/**      * Removes delay markers from unassigned shards based on current time stamp.      */
DECL|method|removeDelayMarkers
specifier|private
name|void
name|removeDelayMarkers
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
specifier|final
name|RoutingNodes
operator|.
name|UnassignedShards
operator|.
name|UnassignedIterator
name|unassignedIterator
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|MetaData
name|metaData
init|=
name|allocation
operator|.
name|metaData
argument_list|()
decl_stmt|;
while|while
condition|(
name|unassignedIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ShardRouting
name|shardRouting
init|=
name|unassignedIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|UnassignedInfo
name|unassignedInfo
init|=
name|shardRouting
operator|.
name|unassignedInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|unassignedInfo
operator|.
name|isDelayed
argument_list|()
condition|)
block|{
specifier|final
name|long
name|newComputedLeftDelayNanos
init|=
name|unassignedInfo
operator|.
name|getRemainingDelay
argument_list|(
name|allocation
operator|.
name|getCurrentNanoTime
argument_list|()
argument_list|,
name|metaData
operator|.
name|getIndexSafe
argument_list|(
name|shardRouting
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|getSettings
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newComputedLeftDelayNanos
operator|==
literal|0
condition|)
block|{
name|unassignedIterator
operator|.
name|updateUnassigned
argument_list|(
operator|new
name|UnassignedInfo
argument_list|(
name|unassignedInfo
operator|.
name|getReason
argument_list|()
argument_list|,
name|unassignedInfo
operator|.
name|getMessage
argument_list|()
argument_list|,
name|unassignedInfo
operator|.
name|getFailure
argument_list|()
argument_list|,
name|unassignedInfo
operator|.
name|getNumFailedAllocations
argument_list|()
argument_list|,
name|unassignedInfo
operator|.
name|getUnassignedTimeInNanos
argument_list|()
argument_list|,
name|unassignedInfo
operator|.
name|getUnassignedTimeInMillis
argument_list|()
argument_list|,
literal|false
argument_list|,
name|unassignedInfo
operator|.
name|getLastAllocationStatus
argument_list|()
argument_list|)
argument_list|,
name|shardRouting
operator|.
name|recoverySource
argument_list|()
argument_list|,
name|allocation
operator|.
name|changes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Internal helper to cap the number of elements in a potentially long list for logging.      *      * @param elements  The elements to log. May be any non-null list. Must not be null.      * @param formatter A function that can convert list elements to a String. Must not be null.      * @param<T>       The list element type.      * @return A comma-separated string of the first few elements.      */
DECL|method|firstListElementsToCommaDelimitedString
specifier|private
parameter_list|<
name|T
parameter_list|>
name|String
name|firstListElementsToCommaDelimitedString
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|elements
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|,
name|String
argument_list|>
name|formatter
parameter_list|)
block|{
specifier|final
name|int
name|maxNumberOfElements
init|=
literal|10
decl_stmt|;
return|return
name|elements
operator|.
name|stream
argument_list|()
operator|.
name|limit
argument_list|(
name|maxNumberOfElements
argument_list|)
operator|.
name|map
argument_list|(
name|formatter
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
return|;
block|}
DECL|method|reroute
specifier|public
name|CommandsResult
name|reroute
parameter_list|(
specifier|final
name|ClusterState
name|clusterState
parameter_list|,
name|AllocationCommands
name|commands
parameter_list|,
name|boolean
name|explain
parameter_list|,
name|boolean
name|retryFailed
parameter_list|)
block|{
name|RoutingNodes
name|routingNodes
init|=
name|getMutableRoutingNodes
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
comment|// we don't shuffle the unassigned shards here, to try and get as close as possible to
comment|// a consistent result of the effect the commands have on the routing
comment|// this allows systems to dry run the commands, see the resulting cluster state, and act on it
name|RoutingAllocation
name|allocation
init|=
operator|new
name|RoutingAllocation
argument_list|(
name|allocationDeciders
argument_list|,
name|routingNodes
argument_list|,
name|clusterState
argument_list|,
name|clusterInfoService
operator|.
name|getClusterInfo
argument_list|()
argument_list|,
name|currentNanoTime
argument_list|()
argument_list|,
name|retryFailed
argument_list|)
decl_stmt|;
comment|// don't short circuit deciders, we want a full explanation
name|allocation
operator|.
name|debugDecision
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// we ignore disable allocation, because commands are explicit
name|allocation
operator|.
name|ignoreDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RoutingExplanations
name|explanations
init|=
name|commands
operator|.
name|execute
argument_list|(
name|allocation
argument_list|,
name|explain
argument_list|)
decl_stmt|;
comment|// we revert the ignore disable flag, since when rerouting, we want the original setting to take place
name|allocation
operator|.
name|ignoreDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// the assumption is that commands will move / act on shards (or fail through exceptions)
comment|// so, there will always be shard "movements", so no need to check on reroute
name|reroute
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandsResult
argument_list|(
name|explanations
argument_list|,
name|buildResultAndLogHealthChange
argument_list|(
name|clusterState
argument_list|,
name|allocation
argument_list|,
literal|"reroute commands"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Reroutes the routing table based on the live nodes.      *<p>      * If the same instance of ClusterState is returned, then no change has been made.      */
DECL|method|reroute
specifier|public
name|ClusterState
name|reroute
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
return|return
name|reroute
argument_list|(
name|clusterState
argument_list|,
name|reason
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Reroutes the routing table based on the live nodes.      *<p>      * If the same instance of ClusterState is returned, then no change has been made.      */
DECL|method|reroute
specifier|protected
name|ClusterState
name|reroute
parameter_list|(
specifier|final
name|ClusterState
name|clusterState
parameter_list|,
name|String
name|reason
parameter_list|,
name|boolean
name|debug
parameter_list|)
block|{
name|RoutingNodes
name|routingNodes
init|=
name|getMutableRoutingNodes
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
comment|// shuffle the unassigned nodes, just so we won't have things like poison failed shards
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|shuffle
argument_list|()
expr_stmt|;
name|RoutingAllocation
name|allocation
init|=
operator|new
name|RoutingAllocation
argument_list|(
name|allocationDeciders
argument_list|,
name|routingNodes
argument_list|,
name|clusterState
argument_list|,
name|clusterInfoService
operator|.
name|getClusterInfo
argument_list|()
argument_list|,
name|currentNanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocation
operator|.
name|debugDecision
argument_list|(
name|debug
argument_list|)
expr_stmt|;
name|reroute
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
if|if
condition|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
name|clusterState
return|;
block|}
return|return
name|buildResultAndLogHealthChange
argument_list|(
name|clusterState
argument_list|,
name|allocation
argument_list|,
name|reason
argument_list|)
return|;
block|}
DECL|method|logClusterHealthStateChange
specifier|private
name|void
name|logClusterHealthStateChange
parameter_list|(
name|ClusterStateHealth
name|previousStateHealth
parameter_list|,
name|ClusterStateHealth
name|newStateHealth
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|ClusterHealthStatus
name|previousHealth
init|=
name|previousStateHealth
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|ClusterHealthStatus
name|currentHealth
init|=
name|newStateHealth
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|previousHealth
operator|.
name|equals
argument_list|(
name|currentHealth
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Cluster health status changed from [{}] to [{}] (reason: [{}])."
argument_list|,
name|previousHealth
argument_list|,
name|currentHealth
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|hasDeadNodes
specifier|private
name|boolean
name|hasDeadNodes
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
for|for
control|(
name|RoutingNode
name|routingNode
range|:
name|allocation
operator|.
name|routingNodes
argument_list|()
control|)
block|{
if|if
condition|(
name|allocation
operator|.
name|nodes
argument_list|()
operator|.
name|getDataNodes
argument_list|()
operator|.
name|containsKey
argument_list|(
name|routingNode
operator|.
name|nodeId
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|reroute
specifier|private
name|void
name|reroute
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
assert|assert
name|hasDeadNodes
argument_list|(
name|allocation
argument_list|)
operator|==
literal|false
operator|:
literal|"dead nodes should be explicitly cleaned up. See deassociateDeadNodes"
assert|;
comment|// now allocate all the unassigned to available nodes
if|if
condition|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|removeDelayMarkers
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|gatewayAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
block|}
name|shardsAllocator
operator|.
name|allocate
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
assert|assert
name|RoutingNodes
operator|.
name|assertShardStats
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
argument_list|)
assert|;
block|}
DECL|method|deassociateDeadNodes
specifier|private
name|void
name|deassociateDeadNodes
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|RoutingNode
argument_list|>
name|it
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|mutableIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoutingNode
name|node
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|allocation
operator|.
name|nodes
argument_list|()
operator|.
name|getDataNodes
argument_list|()
operator|.
name|containsKey
argument_list|(
name|node
operator|.
name|nodeId
argument_list|()
argument_list|)
condition|)
block|{
comment|// its a live node, continue
continue|continue;
block|}
comment|// now, go over all the shards routing on the node, and fail them
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|node
operator|.
name|copyShards
argument_list|()
control|)
block|{
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|allocation
operator|.
name|metaData
argument_list|()
operator|.
name|getIndexSafe
argument_list|(
name|shardRouting
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|delayed
init|=
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
operator|.
name|get
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
argument_list|)
operator|.
name|nanos
argument_list|()
operator|>
literal|0
decl_stmt|;
name|UnassignedInfo
name|unassignedInfo
init|=
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|NODE_LEFT
argument_list|,
literal|"node_left["
operator|+
name|node
operator|.
name|nodeId
argument_list|()
operator|+
literal|"]"
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|allocation
operator|.
name|getCurrentNanoTime
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|delayed
argument_list|,
name|AllocationStatus
operator|.
name|NO_ATTEMPT
argument_list|)
decl_stmt|;
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|failShard
argument_list|(
name|logger
argument_list|,
name|shardRouting
argument_list|,
name|unassignedInfo
argument_list|,
name|indexMetaData
argument_list|,
name|allocation
operator|.
name|changes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// its a dead node, remove it, note, its important to remove it *after* we apply failed shard
comment|// since it relies on the fact that the RoutingNode exists in the list of nodes
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|applyStartedShards
specifier|private
name|void
name|applyStartedShards
parameter_list|(
name|RoutingAllocation
name|routingAllocation
parameter_list|,
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|startedShardEntries
parameter_list|)
block|{
assert|assert
name|startedShardEntries
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
operator|:
literal|"non-empty list of started shard entries expected"
assert|;
name|RoutingNodes
name|routingNodes
init|=
name|routingAllocation
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|startedShard
range|:
name|startedShardEntries
control|)
block|{
assert|assert
name|startedShard
operator|.
name|initializing
argument_list|()
operator|:
literal|"only initializing shards can be started"
assert|;
assert|assert
name|routingAllocation
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|startedShard
operator|.
name|shardId
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|!=
literal|null
operator|:
literal|"shard started for unknown index (shard entry: "
operator|+
name|startedShard
operator|+
literal|")"
assert|;
assert|assert
name|startedShard
operator|==
name|routingNodes
operator|.
name|getByAllocationId
argument_list|(
name|startedShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|startedShard
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|:
literal|"shard routing to start does not exist in routing table, expected: "
operator|+
name|startedShard
operator|+
literal|" but was: "
operator|+
name|routingNodes
operator|.
name|getByAllocationId
argument_list|(
name|startedShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|startedShard
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
assert|;
name|routingNodes
operator|.
name|startShard
argument_list|(
name|logger
argument_list|,
name|startedShard
argument_list|,
name|routingAllocation
operator|.
name|changes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getMutableRoutingNodes
specifier|private
name|RoutingNodes
name|getMutableRoutingNodes
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|RoutingNodes
name|routingNodes
init|=
operator|new
name|RoutingNodes
argument_list|(
name|clusterState
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// this is a costly operation - only call this once!
return|return
name|routingNodes
return|;
block|}
comment|/** override this to control time based decisions during allocation */
DECL|method|currentNanoTime
specifier|protected
name|long
name|currentNanoTime
parameter_list|()
block|{
return|return
name|System
operator|.
name|nanoTime
argument_list|()
return|;
block|}
comment|/**      * this class is used to describe results of applying a set of      * {@link org.elasticsearch.cluster.routing.allocation.command.AllocationCommand}      */
DECL|class|CommandsResult
specifier|public
specifier|static
class|class
name|CommandsResult
block|{
DECL|field|explanations
specifier|private
specifier|final
name|RoutingExplanations
name|explanations
decl_stmt|;
DECL|field|clusterState
specifier|private
specifier|final
name|ClusterState
name|clusterState
decl_stmt|;
comment|/**          * Creates a new {@link CommandsResult}          * @param explanations Explanation for the reroute actions          * @param clusterState Resulting cluster state          */
DECL|method|CommandsResult
specifier|private
name|CommandsResult
parameter_list|(
name|RoutingExplanations
name|explanations
parameter_list|,
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|this
operator|.
name|clusterState
operator|=
name|clusterState
expr_stmt|;
name|this
operator|.
name|explanations
operator|=
name|explanations
expr_stmt|;
block|}
comment|/**          * Get the explanation of this result          */
DECL|method|explanations
specifier|public
name|RoutingExplanations
name|explanations
parameter_list|()
block|{
return|return
name|explanations
return|;
block|}
comment|/**          * thre resulting cluster state, after the commands were applied          */
DECL|method|getClusterState
specifier|public
name|ClusterState
name|getClusterState
parameter_list|()
block|{
return|return
name|clusterState
return|;
block|}
block|}
block|}
end_class

end_unit

