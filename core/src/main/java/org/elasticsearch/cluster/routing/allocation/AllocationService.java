begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterStateHealth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|AllocationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|ShardsAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocationCommands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDeciders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
import|;
end_import

begin_comment
comment|/**  * This service manages the node allocation of a cluster. For this reason the  * {@link AllocationService} keeps {@link AllocationDeciders} to choose nodes  * for shard allocation. This class also manages new nodes joining the cluster  * and rerouting of shards.  */
end_comment

begin_class
DECL|class|AllocationService
specifier|public
class|class
name|AllocationService
extends|extends
name|AbstractComponent
block|{
DECL|field|allocationDeciders
specifier|private
specifier|final
name|AllocationDeciders
name|allocationDeciders
decl_stmt|;
DECL|field|gatewayAllocator
specifier|private
specifier|final
name|GatewayAllocator
name|gatewayAllocator
decl_stmt|;
DECL|field|shardsAllocator
specifier|private
specifier|final
name|ShardsAllocator
name|shardsAllocator
decl_stmt|;
DECL|field|clusterInfoService
specifier|private
specifier|final
name|ClusterInfoService
name|clusterInfoService
decl_stmt|;
DECL|field|clusterName
specifier|private
specifier|final
name|ClusterName
name|clusterName
decl_stmt|;
annotation|@
name|Inject
DECL|method|AllocationService
specifier|public
name|AllocationService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|AllocationDeciders
name|allocationDeciders
parameter_list|,
name|GatewayAllocator
name|gatewayAllocator
parameter_list|,
name|ShardsAllocator
name|shardsAllocator
parameter_list|,
name|ClusterInfoService
name|clusterInfoService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|allocationDeciders
operator|=
name|allocationDeciders
expr_stmt|;
name|this
operator|.
name|gatewayAllocator
operator|=
name|gatewayAllocator
expr_stmt|;
name|this
operator|.
name|shardsAllocator
operator|=
name|shardsAllocator
expr_stmt|;
name|this
operator|.
name|clusterInfoService
operator|=
name|clusterInfoService
expr_stmt|;
name|clusterName
operator|=
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
comment|/**      * Applies the started shards. Note, shards can be called several times within this method.      *<p>      * If the same instance of the routing table is returned, then no change has been made.</p>      */
DECL|method|applyStartedShards
specifier|public
name|RoutingAllocation
operator|.
name|Result
name|applyStartedShards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|ShardRouting
argument_list|>
name|startedShards
parameter_list|)
block|{
return|return
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|startedShards
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|applyStartedShards
specifier|public
name|RoutingAllocation
operator|.
name|Result
name|applyStartedShards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|ShardRouting
argument_list|>
name|startedShards
parameter_list|,
name|boolean
name|withReroute
parameter_list|)
block|{
name|RoutingNodes
name|routingNodes
init|=
name|getMutableRoutingNodes
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
comment|// shuffle the unassigned nodes, just so we won't have things like poison failed shards
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|shuffle
argument_list|()
expr_stmt|;
name|StartedRerouteAllocation
name|allocation
init|=
operator|new
name|StartedRerouteAllocation
argument_list|(
name|allocationDeciders
argument_list|,
name|routingNodes
argument_list|,
name|clusterState
argument_list|,
name|startedShards
argument_list|,
name|clusterInfoService
operator|.
name|getClusterInfo
argument_list|()
argument_list|,
name|currentNanoTime
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
name|applyStartedShards
argument_list|(
name|allocation
argument_list|,
name|startedShards
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|changed
condition|)
block|{
return|return
operator|new
name|RoutingAllocation
operator|.
name|Result
argument_list|(
literal|false
argument_list|,
name|clusterState
operator|.
name|routingTable
argument_list|()
argument_list|,
name|clusterState
operator|.
name|metaData
argument_list|()
argument_list|)
return|;
block|}
name|gatewayAllocator
operator|.
name|applyStartedShards
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
if|if
condition|(
name|withReroute
condition|)
block|{
name|reroute
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
block|}
name|String
name|startedShardsAsString
init|=
name|firstListElementsToCommaDelimitedString
argument_list|(
name|startedShards
argument_list|,
name|s
lambda|->
name|s
operator|.
name|shardId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|buildResultAndLogHealthChange
argument_list|(
name|allocation
argument_list|,
literal|"shards started ["
operator|+
name|startedShardsAsString
operator|+
literal|"] ..."
argument_list|)
return|;
block|}
DECL|method|buildResultAndLogHealthChange
specifier|protected
name|RoutingAllocation
operator|.
name|Result
name|buildResultAndLogHealthChange
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
return|return
name|buildResultAndLogHealthChange
argument_list|(
name|allocation
argument_list|,
name|reason
argument_list|,
operator|new
name|RoutingExplanations
argument_list|()
argument_list|)
return|;
block|}
DECL|method|buildResultAndLogHealthChange
specifier|protected
name|RoutingAllocation
operator|.
name|Result
name|buildResultAndLogHealthChange
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|,
name|String
name|reason
parameter_list|,
name|RoutingExplanations
name|explanations
parameter_list|)
block|{
name|MetaData
name|oldMetaData
init|=
name|allocation
operator|.
name|metaData
argument_list|()
decl_stmt|;
name|RoutingTable
name|oldRoutingTable
init|=
name|allocation
operator|.
name|routingTable
argument_list|()
decl_stmt|;
name|RoutingNodes
name|newRoutingNodes
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
specifier|final
name|RoutingTable
name|newRoutingTable
init|=
operator|new
name|RoutingTable
operator|.
name|Builder
argument_list|()
operator|.
name|updateNodes
argument_list|(
name|oldRoutingTable
operator|.
name|version
argument_list|()
argument_list|,
name|newRoutingNodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MetaData
name|newMetaData
init|=
name|updateMetaDataWithRoutingTable
argument_list|(
name|oldMetaData
argument_list|,
name|oldRoutingTable
argument_list|,
name|newRoutingTable
argument_list|)
decl_stmt|;
assert|assert
name|newRoutingTable
operator|.
name|validate
argument_list|(
name|newMetaData
argument_list|)
assert|;
comment|// validates the routing table is coherent with the cluster state metadata
name|logClusterHealthStateChange
argument_list|(
operator|new
name|ClusterStateHealth
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterName
argument_list|)
operator|.
name|metaData
argument_list|(
name|allocation
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|routingTable
argument_list|(
name|allocation
operator|.
name|routingTable
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ClusterStateHealth
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterName
argument_list|)
operator|.
name|metaData
argument_list|(
name|newMetaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|newRoutingTable
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|reason
argument_list|)
expr_stmt|;
return|return
operator|new
name|RoutingAllocation
operator|.
name|Result
argument_list|(
literal|true
argument_list|,
name|newRoutingTable
argument_list|,
name|newMetaData
argument_list|,
name|explanations
argument_list|)
return|;
block|}
comment|/**      * Updates the current {@link MetaData} based on the newly created {@link RoutingTable}. Specifically      * we update {@link IndexMetaData#getActiveAllocationIds()} and {@link IndexMetaData#primaryTerm(int)} based on      * the changes made during this allocation.      *      * @param oldMetaData     {@link MetaData} object from before the routing table was changed.      * @param oldRoutingTable {@link RoutingTable} from before the  change.      * @param newRoutingTable new {@link RoutingTable} created by the allocation change      * @return adapted {@link MetaData}, potentially the original one if no change was needed.      */
DECL|method|updateMetaDataWithRoutingTable
specifier|static
name|MetaData
name|updateMetaDataWithRoutingTable
parameter_list|(
name|MetaData
name|oldMetaData
parameter_list|,
name|RoutingTable
name|oldRoutingTable
parameter_list|,
name|RoutingTable
name|newRoutingTable
parameter_list|)
block|{
name|MetaData
operator|.
name|Builder
name|metaDataBuilder
init|=
literal|null
decl_stmt|;
for|for
control|(
name|IndexRoutingTable
name|newIndexTable
range|:
name|newRoutingTable
control|)
block|{
specifier|final
name|IndexMetaData
name|oldIndexMetaData
init|=
name|oldMetaData
operator|.
name|index
argument_list|(
name|newIndexTable
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldIndexMetaData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no metadata found for index "
operator|+
name|newIndexTable
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|IndexMetaData
operator|.
name|Builder
name|indexMetaDataBuilder
init|=
literal|null
decl_stmt|;
for|for
control|(
name|IndexShardRoutingTable
name|newShardTable
range|:
name|newIndexTable
control|)
block|{
specifier|final
name|ShardId
name|shardId
init|=
name|newShardTable
operator|.
name|shardId
argument_list|()
decl_stmt|;
comment|// update activeAllocationIds
name|Set
argument_list|<
name|String
argument_list|>
name|activeAllocationIds
init|=
name|newShardTable
operator|.
name|activeShards
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ShardRouting
operator|::
name|allocationId
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|map
argument_list|(
name|AllocationId
operator|::
name|getId
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
comment|// only update active allocation ids if there is an active shard
if|if
condition|(
name|activeAllocationIds
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// get currently stored allocation ids
name|Set
argument_list|<
name|String
argument_list|>
name|storedAllocationIds
init|=
name|oldIndexMetaData
operator|.
name|activeAllocationIds
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|activeAllocationIds
operator|.
name|equals
argument_list|(
name|storedAllocationIds
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|indexMetaDataBuilder
operator|==
literal|null
condition|)
block|{
name|indexMetaDataBuilder
operator|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|oldIndexMetaData
argument_list|)
expr_stmt|;
block|}
name|indexMetaDataBuilder
operator|.
name|putActiveAllocationIds
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|,
name|activeAllocationIds
argument_list|)
expr_stmt|;
block|}
block|}
comment|// update primary terms
specifier|final
name|ShardRouting
name|newPrimary
init|=
name|newShardTable
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
if|if
condition|(
name|newPrimary
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"missing primary shard for "
operator|+
name|newShardTable
operator|.
name|shardId
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|ShardRouting
name|oldPrimary
init|=
name|oldRoutingTable
operator|.
name|shardRoutingTable
argument_list|(
name|shardId
argument_list|)
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldPrimary
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"missing primary shard for "
operator|+
name|newShardTable
operator|.
name|shardId
argument_list|()
argument_list|)
throw|;
block|}
comment|// we update the primary term on initial assignment or when a replica is promoted. Most notably we do *not*
comment|// update them when a primary relocates
if|if
condition|(
name|newPrimary
operator|.
name|unassigned
argument_list|()
operator|||
name|newPrimary
operator|.
name|isSameAllocation
argument_list|(
name|oldPrimary
argument_list|)
operator|||
comment|// we do not use newPrimary.isTargetRelocationOf(oldPrimary) because that one enforces newPrimary to
comment|// be initializing. However, when the target shard is activated, we still want the primary term to staty
comment|// the same
operator|(
name|oldPrimary
operator|.
name|relocating
argument_list|()
operator|&&
name|newPrimary
operator|.
name|isSameAllocation
argument_list|(
name|oldPrimary
operator|.
name|buildTargetRelocatingShard
argument_list|()
argument_list|)
operator|)
condition|)
block|{
comment|// do nothing
block|}
else|else
block|{
comment|// incrementing the primary term
if|if
condition|(
name|indexMetaDataBuilder
operator|==
literal|null
condition|)
block|{
name|indexMetaDataBuilder
operator|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|oldIndexMetaData
argument_list|)
expr_stmt|;
block|}
name|indexMetaDataBuilder
operator|.
name|primaryTerm
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|,
name|oldIndexMetaData
operator|.
name|primaryTerm
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|indexMetaDataBuilder
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|metaDataBuilder
operator|==
literal|null
condition|)
block|{
name|metaDataBuilder
operator|=
name|MetaData
operator|.
name|builder
argument_list|(
name|oldMetaData
argument_list|)
expr_stmt|;
block|}
name|metaDataBuilder
operator|.
name|put
argument_list|(
name|indexMetaDataBuilder
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|metaDataBuilder
operator|!=
literal|null
condition|)
block|{
return|return
name|metaDataBuilder
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|oldMetaData
return|;
block|}
block|}
DECL|method|applyFailedShard
specifier|public
name|RoutingAllocation
operator|.
name|Result
name|applyFailedShard
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ShardRouting
name|failedShard
parameter_list|)
block|{
return|return
name|applyFailedShards
argument_list|(
name|clusterState
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|FailedRerouteAllocation
operator|.
name|FailedShard
argument_list|(
name|failedShard
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Applies the failed shards. Note, shards can be called several times within this method.      *<p>      * If the same instance of the routing table is returned, then no change has been made.</p>      */
DECL|method|applyFailedShards
specifier|public
name|RoutingAllocation
operator|.
name|Result
name|applyFailedShards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|List
argument_list|<
name|FailedRerouteAllocation
operator|.
name|FailedShard
argument_list|>
name|failedShards
parameter_list|)
block|{
name|RoutingNodes
name|routingNodes
init|=
name|getMutableRoutingNodes
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
comment|// shuffle the unassigned nodes, just so we won't have things like poison failed shards
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|shuffle
argument_list|()
expr_stmt|;
name|long
name|currentNanoTime
init|=
name|currentNanoTime
argument_list|()
decl_stmt|;
name|FailedRerouteAllocation
name|allocation
init|=
operator|new
name|FailedRerouteAllocation
argument_list|(
name|allocationDeciders
argument_list|,
name|routingNodes
argument_list|,
name|clusterState
argument_list|,
name|failedShards
argument_list|,
name|clusterInfoService
operator|.
name|getClusterInfo
argument_list|()
argument_list|,
name|currentNanoTime
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
comment|// as failing primaries also fail associated replicas, we fail replicas first here so that their nodes are added to ignore list
name|List
argument_list|<
name|FailedRerouteAllocation
operator|.
name|FailedShard
argument_list|>
name|orderedFailedShards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|failedShards
argument_list|)
decl_stmt|;
name|orderedFailedShards
operator|.
name|sort
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|failedShard
lambda|->
name|failedShard
operator|.
name|shard
operator|.
name|primary
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FailedRerouteAllocation
operator|.
name|FailedShard
name|failedShard
range|:
name|orderedFailedShards
control|)
block|{
name|UnassignedInfo
name|unassignedInfo
init|=
name|failedShard
operator|.
name|shard
operator|.
name|unassignedInfo
argument_list|()
decl_stmt|;
specifier|final
name|int
name|failedAllocations
init|=
name|unassignedInfo
operator|!=
literal|null
condition|?
name|unassignedInfo
operator|.
name|getNumFailedAllocations
argument_list|()
else|:
literal|0
decl_stmt|;
name|changed
operator||=
name|applyFailedShard
argument_list|(
name|allocation
argument_list|,
name|failedShard
operator|.
name|shard
argument_list|,
literal|true
argument_list|,
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|ALLOCATION_FAILED
argument_list|,
name|failedShard
operator|.
name|message
argument_list|,
name|failedShard
operator|.
name|failure
argument_list|,
name|failedAllocations
operator|+
literal|1
argument_list|,
name|currentNanoTime
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|changed
condition|)
block|{
return|return
operator|new
name|RoutingAllocation
operator|.
name|Result
argument_list|(
literal|false
argument_list|,
name|clusterState
operator|.
name|routingTable
argument_list|()
argument_list|,
name|clusterState
operator|.
name|metaData
argument_list|()
argument_list|)
return|;
block|}
name|gatewayAllocator
operator|.
name|applyFailedShards
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|reroute
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|String
name|failedShardsAsString
init|=
name|firstListElementsToCommaDelimitedString
argument_list|(
name|failedShards
argument_list|,
name|s
lambda|->
name|s
operator|.
name|shard
operator|.
name|shardId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|buildResultAndLogHealthChange
argument_list|(
name|allocation
argument_list|,
literal|"shards failed ["
operator|+
name|failedShardsAsString
operator|+
literal|"] ..."
argument_list|)
return|;
block|}
comment|/**      * Removes delay markers from unassigned shards based on current time stamp. Returns true if markers were removed.      */
DECL|method|removeDelayMarkers
specifier|private
name|boolean
name|removeDelayMarkers
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
specifier|final
name|RoutingNodes
operator|.
name|UnassignedShards
operator|.
name|UnassignedIterator
name|unassignedIterator
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|MetaData
name|metaData
init|=
name|allocation
operator|.
name|metaData
argument_list|()
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|unassignedIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ShardRouting
name|shardRouting
init|=
name|unassignedIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|UnassignedInfo
name|unassignedInfo
init|=
name|shardRouting
operator|.
name|unassignedInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|unassignedInfo
operator|.
name|isDelayed
argument_list|()
condition|)
block|{
specifier|final
name|long
name|newComputedLeftDelayNanos
init|=
name|unassignedInfo
operator|.
name|getRemainingDelay
argument_list|(
name|allocation
operator|.
name|getCurrentNanoTime
argument_list|()
argument_list|,
name|metaData
operator|.
name|getIndexSafe
argument_list|(
name|shardRouting
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|getSettings
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newComputedLeftDelayNanos
operator|==
literal|0
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|unassignedIterator
operator|.
name|updateUnassignedInfo
argument_list|(
operator|new
name|UnassignedInfo
argument_list|(
name|unassignedInfo
operator|.
name|getReason
argument_list|()
argument_list|,
name|unassignedInfo
operator|.
name|getMessage
argument_list|()
argument_list|,
name|unassignedInfo
operator|.
name|getFailure
argument_list|()
argument_list|,
name|unassignedInfo
operator|.
name|getNumFailedAllocations
argument_list|()
argument_list|,
name|unassignedInfo
operator|.
name|getUnassignedTimeInNanos
argument_list|()
argument_list|,
name|unassignedInfo
operator|.
name|getUnassignedTimeInMillis
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
comment|/**      * Internal helper to cap the number of elements in a potentially long list for logging.      *      * @param elements  The elements to log. May be any non-null list. Must not be null.      * @param formatter A function that can convert list elements to a String. Must not be null.      * @param<T>       The list element type.      * @return A comma-separated string of the first few elements.      */
DECL|method|firstListElementsToCommaDelimitedString
specifier|private
parameter_list|<
name|T
parameter_list|>
name|String
name|firstListElementsToCommaDelimitedString
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|elements
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|,
name|String
argument_list|>
name|formatter
parameter_list|)
block|{
specifier|final
name|int
name|maxNumberOfElements
init|=
literal|10
decl_stmt|;
return|return
name|elements
operator|.
name|stream
argument_list|()
operator|.
name|limit
argument_list|(
name|maxNumberOfElements
argument_list|)
operator|.
name|map
argument_list|(
name|formatter
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
return|;
block|}
DECL|method|reroute
specifier|public
name|RoutingAllocation
operator|.
name|Result
name|reroute
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|AllocationCommands
name|commands
parameter_list|,
name|boolean
name|explain
parameter_list|,
name|boolean
name|retryFailed
parameter_list|)
block|{
name|RoutingNodes
name|routingNodes
init|=
name|getMutableRoutingNodes
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
comment|// we don't shuffle the unassigned shards here, to try and get as close as possible to
comment|// a consistent result of the effect the commands have on the routing
comment|// this allows systems to dry run the commands, see the resulting cluster state, and act on it
name|RoutingAllocation
name|allocation
init|=
operator|new
name|RoutingAllocation
argument_list|(
name|allocationDeciders
argument_list|,
name|routingNodes
argument_list|,
name|clusterState
argument_list|,
name|clusterInfoService
operator|.
name|getClusterInfo
argument_list|()
argument_list|,
name|currentNanoTime
argument_list|()
argument_list|,
name|retryFailed
argument_list|)
decl_stmt|;
comment|// don't short circuit deciders, we want a full explanation
name|allocation
operator|.
name|debugDecision
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// we ignore disable allocation, because commands are explicit
name|allocation
operator|.
name|ignoreDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RoutingExplanations
name|explanations
init|=
name|commands
operator|.
name|execute
argument_list|(
name|allocation
argument_list|,
name|explain
argument_list|)
decl_stmt|;
comment|// we revert the ignore disable flag, since when rerouting, we want the original setting to take place
name|allocation
operator|.
name|ignoreDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// the assumption is that commands will move / act on shards (or fail through exceptions)
comment|// so, there will always be shard "movements", so no need to check on reroute
name|reroute
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
return|return
name|buildResultAndLogHealthChange
argument_list|(
name|allocation
argument_list|,
literal|"reroute commands"
argument_list|,
name|explanations
argument_list|)
return|;
block|}
comment|/**      * Reroutes the routing table based on the live nodes.      *<p>      * If the same instance of the routing table is returned, then no change has been made.      */
DECL|method|reroute
specifier|public
name|RoutingAllocation
operator|.
name|Result
name|reroute
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
return|return
name|reroute
argument_list|(
name|clusterState
argument_list|,
name|reason
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Reroutes the routing table based on the live nodes.      *<p>      * If the same instance of the routing table is returned, then no change has been made.      */
DECL|method|reroute
specifier|protected
name|RoutingAllocation
operator|.
name|Result
name|reroute
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|String
name|reason
parameter_list|,
name|boolean
name|debug
parameter_list|)
block|{
name|RoutingNodes
name|routingNodes
init|=
name|getMutableRoutingNodes
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
comment|// shuffle the unassigned nodes, just so we won't have things like poison failed shards
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|shuffle
argument_list|()
expr_stmt|;
name|RoutingAllocation
name|allocation
init|=
operator|new
name|RoutingAllocation
argument_list|(
name|allocationDeciders
argument_list|,
name|routingNodes
argument_list|,
name|clusterState
argument_list|,
name|clusterInfoService
operator|.
name|getClusterInfo
argument_list|()
argument_list|,
name|currentNanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocation
operator|.
name|debugDecision
argument_list|(
name|debug
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reroute
argument_list|(
name|allocation
argument_list|)
condition|)
block|{
return|return
operator|new
name|RoutingAllocation
operator|.
name|Result
argument_list|(
literal|false
argument_list|,
name|clusterState
operator|.
name|routingTable
argument_list|()
argument_list|,
name|clusterState
operator|.
name|metaData
argument_list|()
argument_list|)
return|;
block|}
return|return
name|buildResultAndLogHealthChange
argument_list|(
name|allocation
argument_list|,
name|reason
argument_list|)
return|;
block|}
DECL|method|logClusterHealthStateChange
specifier|private
name|void
name|logClusterHealthStateChange
parameter_list|(
name|ClusterStateHealth
name|previousStateHealth
parameter_list|,
name|ClusterStateHealth
name|newStateHealth
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|ClusterHealthStatus
name|previousHealth
init|=
name|previousStateHealth
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|ClusterHealthStatus
name|currentHealth
init|=
name|newStateHealth
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|previousHealth
operator|.
name|equals
argument_list|(
name|currentHealth
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Cluster health status changed from [{}] to [{}] (reason: [{}])."
argument_list|,
name|previousHealth
argument_list|,
name|currentHealth
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|reroute
specifier|private
name|boolean
name|reroute
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
comment|// first, clear from the shards any node id they used to belong to that is now dead
name|changed
operator||=
name|deassociateDeadNodes
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
comment|// elect primaries *before* allocating unassigned, so backups of primaries that failed
comment|// will be moved to primary state and not wait for primaries to be allocated and recovered (*from gateway*)
name|changed
operator||=
name|electPrimariesAndUnassignedDanglingReplicas
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
comment|// now allocate all the unassigned to available nodes
if|if
condition|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|changed
operator||=
name|removeDelayMarkers
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|changed
operator||=
name|gatewayAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
block|}
name|changed
operator||=
name|shardsAllocator
operator|.
name|allocate
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
assert|assert
name|RoutingNodes
operator|.
name|assertShardStats
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
argument_list|)
assert|;
return|return
name|changed
return|;
block|}
DECL|method|electPrimariesAndUnassignedDanglingReplicas
specifier|private
name|boolean
name|electPrimariesAndUnassignedDanglingReplicas
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
specifier|final
name|RoutingNodes
name|routingNodes
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|getNumPrimaries
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// move out if we don't have unassigned primaries
return|return
name|changed
return|;
block|}
comment|// now, go over and elect a new primary if possible, not, from this code block on, if one is elected,
comment|// routingNodes.hasUnassignedPrimaries() will potentially be false
specifier|final
name|RoutingNodes
operator|.
name|UnassignedShards
operator|.
name|UnassignedIterator
name|unassignedIterator
init|=
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|unassignedIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ShardRouting
name|shardEntry
init|=
name|unassignedIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|shardEntry
operator|.
name|primary
argument_list|()
condition|)
block|{
comment|// remove dangling replicas that are initializing for primary shards
name|changed
operator||=
name|failReplicasForUnassignedPrimary
argument_list|(
name|allocation
argument_list|,
name|shardEntry
argument_list|)
expr_stmt|;
name|ShardRouting
name|candidate
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|activeReplica
argument_list|(
name|shardEntry
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidate
operator|!=
literal|null
condition|)
block|{
name|shardEntry
operator|=
name|unassignedIterator
operator|.
name|demotePrimaryToReplicaShard
argument_list|()
expr_stmt|;
name|ShardRouting
name|primarySwappedCandidate
init|=
name|routingNodes
operator|.
name|promoteAssignedReplicaShardToPrimary
argument_list|(
name|candidate
argument_list|)
decl_stmt|;
if|if
condition|(
name|primarySwappedCandidate
operator|.
name|relocatingNodeId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
comment|// its also relocating, make sure to move the other routing to primary
name|RoutingNode
name|node
init|=
name|routingNodes
operator|.
name|node
argument_list|(
name|primarySwappedCandidate
operator|.
name|relocatingNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|node
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|shardId
argument_list|()
operator|.
name|equals
argument_list|(
name|primarySwappedCandidate
operator|.
name|shardId
argument_list|()
argument_list|)
operator|&&
operator|!
name|shardRouting
operator|.
name|primary
argument_list|()
condition|)
block|{
name|routingNodes
operator|.
name|promoteAssignedReplicaShardToPrimary
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|IndexMetaData
name|index
init|=
name|allocation
operator|.
name|metaData
argument_list|()
operator|.
name|getIndexSafe
argument_list|(
name|primarySwappedCandidate
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|IndexMetaData
operator|.
name|isIndexUsingShadowReplicas
argument_list|(
name|index
operator|.
name|getSettings
argument_list|()
argument_list|)
condition|)
block|{
name|routingNodes
operator|.
name|reinitShadowPrimary
argument_list|(
name|primarySwappedCandidate
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
DECL|method|deassociateDeadNodes
specifier|private
name|boolean
name|deassociateDeadNodes
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RoutingNode
argument_list|>
name|it
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|mutableIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoutingNode
name|node
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|allocation
operator|.
name|nodes
argument_list|()
operator|.
name|getDataNodes
argument_list|()
operator|.
name|containsKey
argument_list|(
name|node
operator|.
name|nodeId
argument_list|()
argument_list|)
condition|)
block|{
comment|// its a live node, continue
continue|continue;
block|}
name|changed
operator|=
literal|true
expr_stmt|;
comment|// now, go over all the shards routing on the node, and fail them
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|node
operator|.
name|copyShards
argument_list|()
control|)
block|{
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|allocation
operator|.
name|metaData
argument_list|()
operator|.
name|getIndexSafe
argument_list|(
name|shardRouting
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|delayed
init|=
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
operator|.
name|get
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
argument_list|)
operator|.
name|nanos
argument_list|()
operator|>
literal|0
decl_stmt|;
name|UnassignedInfo
name|unassignedInfo
init|=
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|NODE_LEFT
argument_list|,
literal|"node_left["
operator|+
name|node
operator|.
name|nodeId
argument_list|()
operator|+
literal|"]"
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|allocation
operator|.
name|getCurrentNanoTime
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|delayed
argument_list|)
decl_stmt|;
name|applyFailedShard
argument_list|(
name|allocation
argument_list|,
name|shardRouting
argument_list|,
literal|false
argument_list|,
name|unassignedInfo
argument_list|)
expr_stmt|;
block|}
comment|// its a dead node, remove it, note, its important to remove it *after* we apply failed shard
comment|// since it relies on the fact that the RoutingNode exists in the list of nodes
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
name|changed
return|;
block|}
DECL|method|failReplicasForUnassignedPrimary
specifier|private
name|boolean
name|failReplicasForUnassignedPrimary
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|,
name|ShardRouting
name|primary
parameter_list|)
block|{
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|replicas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|routing
range|:
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|assignedShards
argument_list|(
name|primary
operator|.
name|shardId
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|routing
operator|.
name|primary
argument_list|()
operator|&&
name|routing
operator|.
name|initializing
argument_list|()
condition|)
block|{
name|replicas
operator|.
name|add
argument_list|(
name|routing
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ShardRouting
name|routing
range|:
name|replicas
control|)
block|{
name|changed
operator||=
name|applyFailedShard
argument_list|(
name|allocation
argument_list|,
name|routing
argument_list|,
literal|false
argument_list|,
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|PRIMARY_FAILED
argument_list|,
literal|"primary failed while replica initializing"
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|allocation
operator|.
name|getCurrentNanoTime
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|changed
return|;
block|}
DECL|method|applyStartedShards
specifier|private
name|boolean
name|applyStartedShards
parameter_list|(
name|RoutingAllocation
name|routingAllocation
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|ShardRouting
argument_list|>
name|startedShardEntries
parameter_list|)
block|{
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
comment|// apply shards might be called several times with the same shard, ignore it
name|RoutingNodes
name|routingNodes
init|=
name|routingAllocation
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|startedShard
range|:
name|startedShardEntries
control|)
block|{
assert|assert
name|startedShard
operator|.
name|initializing
argument_list|()
assert|;
comment|// validate index still exists. strictly speaking this is not needed but it gives clearer logs
if|if
condition|(
name|routingAllocation
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|startedShard
operator|.
name|index
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} ignoring shard started, unknown index (routing: {})"
argument_list|,
name|startedShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|startedShard
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|RoutingNode
name|currentRoutingNode
init|=
name|routingNodes
operator|.
name|node
argument_list|(
name|startedShard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentRoutingNode
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} failed to find shard in order to start it [failed to find node], ignoring (routing: {})"
argument_list|,
name|startedShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|startedShard
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ShardRouting
name|matchingShard
init|=
name|currentRoutingNode
operator|.
name|getByShardId
argument_list|(
name|startedShard
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchingShard
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} failed to find shard in order to start it [failed to find shard], ignoring (routing: {})"
argument_list|,
name|startedShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|startedShard
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchingShard
operator|.
name|isSameAllocation
argument_list|(
name|startedShard
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} failed to find shard with matching allocation id in order to start it [failed to find matching shard], ignoring (routing: {}, matched shard routing: {})"
argument_list|,
name|startedShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|startedShard
argument_list|,
name|matchingShard
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startedShard
operator|=
name|matchingShard
expr_stmt|;
if|if
condition|(
name|startedShard
operator|.
name|active
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} shard is already started, ignoring (routing: {})"
argument_list|,
name|startedShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|startedShard
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|startedShard
operator|.
name|initializing
argument_list|()
assert|;
name|dirty
operator|=
literal|true
expr_stmt|;
name|routingNodes
operator|.
name|started
argument_list|(
name|startedShard
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} marked shard as started (routing: {})"
argument_list|,
name|startedShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|startedShard
argument_list|)
expr_stmt|;
if|if
condition|(
name|startedShard
operator|.
name|relocatingNodeId
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// relocation target has been started, remove relocation source
name|RoutingNode
name|relocationSourceNode
init|=
name|routingNodes
operator|.
name|node
argument_list|(
name|startedShard
operator|.
name|relocatingNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|ShardRouting
name|relocationSourceShard
init|=
name|relocationSourceNode
operator|.
name|getByShardId
argument_list|(
name|startedShard
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|relocationSourceShard
operator|.
name|isRelocationSourceOf
argument_list|(
name|startedShard
argument_list|)
assert|;
name|routingNodes
operator|.
name|remove
argument_list|(
name|relocationSourceShard
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|dirty
return|;
block|}
comment|/**      * Applies the relevant logic to handle a failed shard. Returns<tt>true</tt> if changes happened that      * require relocation.      */
DECL|method|applyFailedShard
specifier|private
name|boolean
name|applyFailedShard
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|,
name|ShardRouting
name|failedShard
parameter_list|,
name|boolean
name|addToIgnoreList
parameter_list|,
name|UnassignedInfo
name|unassignedInfo
parameter_list|)
block|{
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|allocation
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|failedShard
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRoutingTable
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} ignoring shard failure, unknown index in {} ({})"
argument_list|,
name|failedShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|failedShard
argument_list|,
name|unassignedInfo
operator|.
name|shortSummary
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|RoutingNodes
name|routingNodes
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
name|RoutingNode
name|matchedNode
init|=
name|routingNodes
operator|.
name|node
argument_list|(
name|failedShard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchedNode
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} ignoring shard failure, unknown node in {} ({})"
argument_list|,
name|failedShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|failedShard
argument_list|,
name|unassignedInfo
operator|.
name|shortSummary
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|ShardRouting
name|matchedShard
init|=
name|matchedNode
operator|.
name|getByShardId
argument_list|(
name|failedShard
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchedShard
operator|!=
literal|null
operator|&&
name|matchedShard
operator|.
name|isSameAllocation
argument_list|(
name|failedShard
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} failed shard {} found in routingNodes, failing it ({})"
argument_list|,
name|failedShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|failedShard
argument_list|,
name|unassignedInfo
operator|.
name|shortSummary
argument_list|()
argument_list|)
expr_stmt|;
comment|// replace incoming instance to make sure we work on the latest one
name|failedShard
operator|=
name|matchedShard
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} ignoring shard failure, unknown allocation id in {} ({})"
argument_list|,
name|failedShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|failedShard
argument_list|,
name|unassignedInfo
operator|.
name|shortSummary
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|failedShard
operator|.
name|primary
argument_list|()
condition|)
block|{
comment|// fail replicas first otherwise we move RoutingNodes into an inconsistent state
name|failReplicasForUnassignedPrimary
argument_list|(
name|allocation
argument_list|,
name|failedShard
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|addToIgnoreList
condition|)
block|{
comment|// make sure we ignore this shard on the relevant node
name|allocation
operator|.
name|addIgnoreShardForNode
argument_list|(
name|failedShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|failedShard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cancelShard
argument_list|(
name|logger
argument_list|,
name|failedShard
argument_list|,
name|unassignedInfo
argument_list|,
name|routingNodes
argument_list|)
expr_stmt|;
assert|assert
name|matchedNode
operator|.
name|getByShardId
argument_list|(
name|failedShard
operator|.
name|shardId
argument_list|()
argument_list|)
operator|==
literal|null
operator|:
literal|"failedShard "
operator|+
name|failedShard
operator|+
literal|" was matched but wasn't removed"
assert|;
return|return
literal|true
return|;
block|}
DECL|method|cancelShard
specifier|public
specifier|static
name|void
name|cancelShard
parameter_list|(
name|ESLogger
name|logger
parameter_list|,
name|ShardRouting
name|cancelledShard
parameter_list|,
name|UnassignedInfo
name|unassignedInfo
parameter_list|,
name|RoutingNodes
name|routingNodes
parameter_list|)
block|{
if|if
condition|(
name|cancelledShard
operator|.
name|relocatingNodeId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|routingNodes
operator|.
name|moveToUnassigned
argument_list|(
name|cancelledShard
argument_list|,
name|unassignedInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|cancelledShard
operator|.
name|initializing
argument_list|()
condition|)
block|{
comment|// The shard is a target of a relocating shard. In that case we only
comment|// need to remove the target shard and cancel the source relocation.
comment|// No shard is left unassigned
name|logger
operator|.
name|trace
argument_list|(
literal|"{} is a relocation target, resolving source to cancel relocation ({})"
argument_list|,
name|cancelledShard
argument_list|,
name|unassignedInfo
operator|.
name|shortSummary
argument_list|()
argument_list|)
expr_stmt|;
name|RoutingNode
name|sourceNode
init|=
name|routingNodes
operator|.
name|node
argument_list|(
name|cancelledShard
operator|.
name|relocatingNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|ShardRouting
name|sourceShard
init|=
name|sourceNode
operator|.
name|getByShardId
argument_list|(
name|cancelledShard
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|sourceShard
operator|.
name|isRelocationSourceOf
argument_list|(
name|cancelledShard
argument_list|)
assert|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{}, resolved source to [{}]. canceling relocation ... ({})"
argument_list|,
name|cancelledShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|sourceShard
argument_list|,
name|unassignedInfo
operator|.
name|shortSummary
argument_list|()
argument_list|)
expr_stmt|;
name|routingNodes
operator|.
name|cancelRelocation
argument_list|(
name|sourceShard
argument_list|)
expr_stmt|;
name|routingNodes
operator|.
name|remove
argument_list|(
name|cancelledShard
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|cancelledShard
operator|.
name|relocating
argument_list|()
assert|;
comment|// The cancelled shard is the main copy of the current shard routing.
comment|// now, find the shard that is initializing on the target node
name|RoutingNode
name|targetNode
init|=
name|routingNodes
operator|.
name|node
argument_list|(
name|cancelledShard
operator|.
name|relocatingNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|ShardRouting
name|targetShard
init|=
name|targetNode
operator|.
name|getByShardId
argument_list|(
name|cancelledShard
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|targetShard
operator|.
name|isRelocationTargetOf
argument_list|(
name|cancelledShard
argument_list|)
assert|;
if|if
condition|(
name|cancelledShard
operator|.
name|primary
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} is removed due to the failure/cancellation of the source shard"
argument_list|,
name|targetShard
argument_list|)
expr_stmt|;
comment|// cancel and remove target shard
name|routingNodes
operator|.
name|remove
argument_list|(
name|targetShard
argument_list|)
expr_stmt|;
name|routingNodes
operator|.
name|moveToUnassigned
argument_list|(
name|cancelledShard
argument_list|,
name|unassignedInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{}, relocation source failed / cancelled, mark as initializing without relocation source"
argument_list|,
name|targetShard
argument_list|)
expr_stmt|;
comment|// promote to initializing shard without relocation source and ensure that removed relocation source
comment|// is not added back as unassigned shard
name|routingNodes
operator|.
name|removeRelocationSource
argument_list|(
name|targetShard
argument_list|)
expr_stmt|;
name|routingNodes
operator|.
name|remove
argument_list|(
name|cancelledShard
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getMutableRoutingNodes
specifier|private
name|RoutingNodes
name|getMutableRoutingNodes
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|RoutingNodes
name|routingNodes
init|=
operator|new
name|RoutingNodes
argument_list|(
name|clusterState
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// this is a costly operation - only call this once!
return|return
name|routingNodes
return|;
block|}
comment|/** override this to control time based decisions during allocation */
DECL|method|currentNanoTime
specifier|protected
name|long
name|currentNanoTime
parameter_list|()
block|{
return|return
name|System
operator|.
name|nanoTime
argument_list|()
return|;
block|}
block|}
end_class

end_unit

