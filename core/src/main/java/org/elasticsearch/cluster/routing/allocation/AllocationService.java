begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|ShardsAllocators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocationCommands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDeciders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|INITIALIZING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|RELOCATING
import|;
end_import

begin_comment
comment|/**  * This service manages the node allocation of a cluster. For this reason the  * {@link AllocationService} keeps {@link AllocationDeciders} to choose nodes  * for shard allocation. This class also manages new nodes joining the cluster  * and rerouting of shards.  */
end_comment

begin_class
DECL|class|AllocationService
specifier|public
class|class
name|AllocationService
extends|extends
name|AbstractComponent
block|{
DECL|field|allocationDeciders
specifier|private
specifier|final
name|AllocationDeciders
name|allocationDeciders
decl_stmt|;
DECL|field|clusterInfoService
specifier|private
specifier|final
name|ClusterInfoService
name|clusterInfoService
decl_stmt|;
DECL|field|shardsAllocators
specifier|private
specifier|final
name|ShardsAllocators
name|shardsAllocators
decl_stmt|;
annotation|@
name|Inject
DECL|method|AllocationService
specifier|public
name|AllocationService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|AllocationDeciders
name|allocationDeciders
parameter_list|,
name|ShardsAllocators
name|shardsAllocators
parameter_list|,
name|ClusterInfoService
name|clusterInfoService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|allocationDeciders
operator|=
name|allocationDeciders
expr_stmt|;
name|this
operator|.
name|shardsAllocators
operator|=
name|shardsAllocators
expr_stmt|;
name|this
operator|.
name|clusterInfoService
operator|=
name|clusterInfoService
expr_stmt|;
block|}
comment|/**      * Applies the started shards. Note, shards can be called several times within this method.      *<p/>      *<p>If the same instance of the routing table is returned, then no change has been made.</p>      */
DECL|method|applyStartedShards
specifier|public
name|RoutingAllocation
operator|.
name|Result
name|applyStartedShards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|ShardRouting
argument_list|>
name|startedShards
parameter_list|)
block|{
return|return
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|startedShards
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|applyStartedShards
specifier|public
name|RoutingAllocation
operator|.
name|Result
name|applyStartedShards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|ShardRouting
argument_list|>
name|startedShards
parameter_list|,
name|boolean
name|withReroute
parameter_list|)
block|{
name|RoutingNodes
name|routingNodes
init|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
comment|// shuffle the unassigned nodes, just so we won't have things like poison failed shards
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|shuffle
argument_list|()
expr_stmt|;
name|StartedRerouteAllocation
name|allocation
init|=
operator|new
name|StartedRerouteAllocation
argument_list|(
name|allocationDeciders
argument_list|,
name|routingNodes
argument_list|,
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|,
name|startedShards
argument_list|,
name|clusterInfoService
operator|.
name|getClusterInfo
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
name|applyStartedShards
argument_list|(
name|routingNodes
argument_list|,
name|startedShards
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|changed
condition|)
block|{
return|return
operator|new
name|RoutingAllocation
operator|.
name|Result
argument_list|(
literal|false
argument_list|,
name|clusterState
operator|.
name|routingTable
argument_list|()
argument_list|)
return|;
block|}
name|shardsAllocators
operator|.
name|applyStartedShards
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
if|if
condition|(
name|withReroute
condition|)
block|{
name|reroute
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RoutingAllocation
operator|.
name|Result
argument_list|(
literal|true
argument_list|,
operator|new
name|RoutingTable
operator|.
name|Builder
argument_list|()
operator|.
name|updateNodes
argument_list|(
name|routingNodes
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|validateRaiseException
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|applyFailedShard
specifier|public
name|RoutingAllocation
operator|.
name|Result
name|applyFailedShard
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ShardRouting
name|failedShard
parameter_list|)
block|{
return|return
name|applyFailedShards
argument_list|(
name|clusterState
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|FailedRerouteAllocation
operator|.
name|FailedShard
argument_list|(
name|failedShard
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Applies the failed shards. Note, shards can be called several times within this method.      *<p/>      *<p>If the same instance of the routing table is returned, then no change has been made.</p>      */
DECL|method|applyFailedShards
specifier|public
name|RoutingAllocation
operator|.
name|Result
name|applyFailedShards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|List
argument_list|<
name|FailedRerouteAllocation
operator|.
name|FailedShard
argument_list|>
name|failedShards
parameter_list|)
block|{
name|RoutingNodes
name|routingNodes
init|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
comment|// shuffle the unassigned nodes, just so we won't have things like poison failed shards
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|shuffle
argument_list|()
expr_stmt|;
name|FailedRerouteAllocation
name|allocation
init|=
operator|new
name|FailedRerouteAllocation
argument_list|(
name|allocationDeciders
argument_list|,
name|routingNodes
argument_list|,
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|,
name|failedShards
argument_list|,
name|clusterInfoService
operator|.
name|getClusterInfo
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FailedRerouteAllocation
operator|.
name|FailedShard
name|failedShard
range|:
name|failedShards
control|)
block|{
name|changed
operator||=
name|applyFailedShard
argument_list|(
name|allocation
argument_list|,
name|failedShard
operator|.
name|shard
argument_list|,
literal|true
argument_list|,
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|ALLOCATION_FAILED
argument_list|,
name|failedShard
operator|.
name|details
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|changed
condition|)
block|{
return|return
operator|new
name|RoutingAllocation
operator|.
name|Result
argument_list|(
literal|false
argument_list|,
name|clusterState
operator|.
name|routingTable
argument_list|()
argument_list|)
return|;
block|}
name|shardsAllocators
operator|.
name|applyFailedShards
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|reroute
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
return|return
operator|new
name|RoutingAllocation
operator|.
name|Result
argument_list|(
literal|true
argument_list|,
operator|new
name|RoutingTable
operator|.
name|Builder
argument_list|()
operator|.
name|updateNodes
argument_list|(
name|routingNodes
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|validateRaiseException
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|reroute
specifier|public
name|RoutingAllocation
operator|.
name|Result
name|reroute
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|AllocationCommands
name|commands
parameter_list|)
block|{
return|return
name|reroute
argument_list|(
name|clusterState
argument_list|,
name|commands
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|reroute
specifier|public
name|RoutingAllocation
operator|.
name|Result
name|reroute
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|AllocationCommands
name|commands
parameter_list|,
name|boolean
name|explain
parameter_list|)
block|{
name|RoutingNodes
name|routingNodes
init|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
comment|// we don't shuffle the unassigned shards here, to try and get as close as possible to
comment|// a consistent result of the effect the commands have on the routing
comment|// this allows systems to dry run the commands, see the resulting cluster state, and act on it
name|RoutingAllocation
name|allocation
init|=
operator|new
name|RoutingAllocation
argument_list|(
name|allocationDeciders
argument_list|,
name|routingNodes
argument_list|,
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|,
name|clusterInfoService
operator|.
name|getClusterInfo
argument_list|()
argument_list|)
decl_stmt|;
comment|// don't short circuit deciders, we want a full explanation
name|allocation
operator|.
name|debugDecision
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// we ignore disable allocation, because commands are explicit
name|allocation
operator|.
name|ignoreDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RoutingExplanations
name|explanations
init|=
name|commands
operator|.
name|execute
argument_list|(
name|allocation
argument_list|,
name|explain
argument_list|)
decl_stmt|;
comment|// we revert the ignore disable flag, since when rerouting, we want the original setting to take place
name|allocation
operator|.
name|ignoreDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// the assumption is that commands will move / act on shards (or fail through exceptions)
comment|// so, there will always be shard "movements", so no need to check on reroute
name|reroute
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
return|return
operator|new
name|RoutingAllocation
operator|.
name|Result
argument_list|(
literal|true
argument_list|,
operator|new
name|RoutingTable
operator|.
name|Builder
argument_list|()
operator|.
name|updateNodes
argument_list|(
name|routingNodes
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|validateRaiseException
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
argument_list|)
argument_list|,
name|explanations
argument_list|)
return|;
block|}
comment|/**      * Reroutes the routing table based on the live nodes.      *<p/>      *<p>If the same instance of the routing table is returned, then no change has been made.      */
DECL|method|reroute
specifier|public
name|RoutingAllocation
operator|.
name|Result
name|reroute
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
return|return
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Reroutes the routing table based on the live nodes.      *<p/>      *<p>If the same instance of the routing table is returned, then no change has been made.      */
DECL|method|reroute
specifier|public
name|RoutingAllocation
operator|.
name|Result
name|reroute
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|boolean
name|debug
parameter_list|)
block|{
name|RoutingNodes
name|routingNodes
init|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
comment|// shuffle the unassigned nodes, just so we won't have things like poison failed shards
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|shuffle
argument_list|()
expr_stmt|;
name|RoutingAllocation
name|allocation
init|=
operator|new
name|RoutingAllocation
argument_list|(
name|allocationDeciders
argument_list|,
name|routingNodes
argument_list|,
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|,
name|clusterInfoService
operator|.
name|getClusterInfo
argument_list|()
argument_list|)
decl_stmt|;
name|allocation
operator|.
name|debugDecision
argument_list|(
name|debug
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reroute
argument_list|(
name|allocation
argument_list|)
condition|)
block|{
return|return
operator|new
name|RoutingAllocation
operator|.
name|Result
argument_list|(
literal|false
argument_list|,
name|clusterState
operator|.
name|routingTable
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|RoutingAllocation
operator|.
name|Result
argument_list|(
literal|true
argument_list|,
operator|new
name|RoutingTable
operator|.
name|Builder
argument_list|()
operator|.
name|updateNodes
argument_list|(
name|routingNodes
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|validateRaiseException
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|reroute
specifier|private
name|boolean
name|reroute
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
comment|// first, clear from the shards any node id they used to belong to that is now dead
name|changed
operator||=
name|deassociateDeadNodes
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
comment|// create a sorted list of from nodes with least number of shards to the maximum ones
name|applyNewNodes
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
comment|// elect primaries *before* allocating unassigned, so backups of primaries that failed
comment|// will be moved to primary state and not wait for primaries to be allocated and recovered (*from gateway*)
name|changed
operator||=
name|electPrimariesAndUnassignedDanglingReplicas
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
comment|// now allocate all the unassigned to available nodes
if|if
condition|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|hasUnassigned
argument_list|()
condition|)
block|{
name|changed
operator||=
name|shardsAllocators
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
comment|// elect primaries again, in case this is needed with unassigned allocation
name|changed
operator||=
name|electPrimariesAndUnassignedDanglingReplicas
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
block|}
comment|// move shards that no longer can be allocated
name|changed
operator||=
name|moveShards
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
comment|// rebalance
name|changed
operator||=
name|shardsAllocators
operator|.
name|rebalance
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
assert|assert
name|RoutingNodes
operator|.
name|assertShardStats
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
argument_list|)
assert|;
return|return
name|changed
return|;
block|}
DECL|method|moveShards
specifier|private
name|boolean
name|moveShards
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
comment|// create a copy of the shards interleaving between nodes, and check if they can remain
name|List
argument_list|<
name|MutableShardRouting
argument_list|>
name|shards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|boolean
name|found
init|=
literal|true
decl_stmt|;
specifier|final
name|RoutingNodes
name|routingNodes
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|found
condition|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|RoutingNode
name|routingNode
range|:
name|routingNodes
control|)
block|{
if|if
condition|(
name|index
operator|>=
name|routingNode
operator|.
name|size
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|found
operator|=
literal|true
expr_stmt|;
name|shards
operator|.
name|add
argument_list|(
name|routingNode
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shards
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MutableShardRouting
name|shardRouting
init|=
name|shards
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// we can only move started shards...
if|if
condition|(
operator|!
name|shardRouting
operator|.
name|started
argument_list|()
condition|)
block|{
continue|continue;
block|}
specifier|final
name|RoutingNode
name|routingNode
init|=
name|routingNodes
operator|.
name|node
argument_list|(
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|Decision
name|decision
init|=
name|allocation
operator|.
name|deciders
argument_list|()
operator|.
name|canRemain
argument_list|(
name|shardRouting
argument_list|,
name|routingNode
argument_list|,
name|allocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|decision
operator|.
name|type
argument_list|()
operator|==
name|Decision
operator|.
name|Type
operator|.
name|NO
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}] allocated on [{}], but can no longer be allocated on it, moving..."
argument_list|,
name|shardRouting
operator|.
name|index
argument_list|()
argument_list|,
name|shardRouting
operator|.
name|id
argument_list|()
argument_list|,
name|routingNode
operator|.
name|node
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|moved
init|=
name|shardsAllocators
operator|.
name|move
argument_list|(
name|shardRouting
argument_list|,
name|routingNode
argument_list|,
name|allocation
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|moved
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}] can't move"
argument_list|,
name|shardRouting
operator|.
name|index
argument_list|()
argument_list|,
name|shardRouting
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
DECL|method|electPrimariesAndUnassignedDanglingReplicas
specifier|private
name|boolean
name|electPrimariesAndUnassignedDanglingReplicas
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|RoutingNodes
name|routingNodes
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|routingNodes
operator|.
name|hasUnassignedPrimaries
argument_list|()
condition|)
block|{
comment|// move out if we don't have unassigned primaries
return|return
name|changed
return|;
block|}
comment|// go over and remove dangling replicas that are initializing for primary shards
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shardsToFail
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|MutableShardRouting
name|shardEntry
range|:
name|routingNodes
operator|.
name|unassigned
argument_list|()
control|)
block|{
if|if
condition|(
name|shardEntry
operator|.
name|primary
argument_list|()
condition|)
block|{
for|for
control|(
name|MutableShardRouting
name|routing
range|:
name|routingNodes
operator|.
name|assignedShards
argument_list|(
name|shardEntry
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|routing
operator|.
name|primary
argument_list|()
operator|&&
name|routing
operator|.
name|initializing
argument_list|()
condition|)
block|{
name|shardsToFail
operator|.
name|add
argument_list|(
name|routing
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|ShardRouting
name|shardToFail
range|:
name|shardsToFail
control|)
block|{
name|changed
operator||=
name|applyFailedShard
argument_list|(
name|allocation
argument_list|,
name|shardToFail
argument_list|,
literal|false
argument_list|,
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|ALLOCATION_FAILED
argument_list|,
literal|"primary failed while replica initializing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// now, go over and elect a new primary if possible, not, from this code block on, if one is elected,
comment|// routingNodes.hasUnassignedPrimaries() will potentially be false
for|for
control|(
name|MutableShardRouting
name|shardEntry
range|:
name|routingNodes
operator|.
name|unassigned
argument_list|()
control|)
block|{
if|if
condition|(
name|shardEntry
operator|.
name|primary
argument_list|()
condition|)
block|{
name|MutableShardRouting
name|candidate
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|activeReplica
argument_list|(
name|shardEntry
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidate
operator|!=
literal|null
condition|)
block|{
name|IndexMetaData
name|index
init|=
name|allocation
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|candidate
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
name|routingNodes
operator|.
name|swapPrimaryFlag
argument_list|(
name|shardEntry
argument_list|,
name|candidate
argument_list|)
expr_stmt|;
if|if
condition|(
name|candidate
operator|.
name|relocatingNodeId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
comment|// its also relocating, make sure to move the other routing to primary
name|RoutingNode
name|node
init|=
name|routingNodes
operator|.
name|node
argument_list|(
name|candidate
operator|.
name|relocatingNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MutableShardRouting
name|shardRouting
range|:
name|node
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|shardId
argument_list|()
operator|.
name|equals
argument_list|(
name|candidate
operator|.
name|shardId
argument_list|()
argument_list|)
operator|&&
operator|!
name|shardRouting
operator|.
name|primary
argument_list|()
condition|)
block|{
name|routingNodes
operator|.
name|swapPrimaryFlag
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|IndexMetaData
operator|.
name|isIndexUsingShadowReplicas
argument_list|(
name|index
operator|.
name|settings
argument_list|()
argument_list|)
condition|)
block|{
name|routingNodes
operator|.
name|reinitShadowPrimary
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
comment|/**      * Applies the new nodes to the routing nodes and returns them (just the      * new nodes);      */
DECL|method|applyNewNodes
specifier|private
name|void
name|applyNewNodes
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
specifier|final
name|RoutingNodes
name|routingNodes
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|DiscoveryNode
argument_list|>
name|cursor
range|:
name|allocation
operator|.
name|nodes
argument_list|()
operator|.
name|dataNodes
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|DiscoveryNode
name|node
init|=
name|cursor
operator|.
name|value
decl_stmt|;
if|if
condition|(
operator|!
name|routingNodes
operator|.
name|isKnown
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|routingNodes
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|deassociateDeadNodes
specifier|private
name|boolean
name|deassociateDeadNodes
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RoutingNodes
operator|.
name|RoutingNodesIterator
name|it
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|nodes
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoutingNode
name|node
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|allocation
operator|.
name|nodes
argument_list|()
operator|.
name|dataNodes
argument_list|()
operator|.
name|containsKey
argument_list|(
name|node
operator|.
name|nodeId
argument_list|()
argument_list|)
condition|)
block|{
comment|// its a live node, continue
continue|continue;
block|}
name|changed
operator|=
literal|true
expr_stmt|;
comment|// now, go over all the shards routing on the node, and fail them
name|UnassignedInfo
name|unassignedInfo
init|=
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|NODE_LEFT
argument_list|,
literal|"node_left["
operator|+
name|node
operator|.
name|nodeId
argument_list|()
operator|+
literal|"]"
argument_list|)
decl_stmt|;
for|for
control|(
name|MutableShardRouting
name|shardRouting
range|:
name|node
operator|.
name|copyShards
argument_list|()
control|)
block|{
name|applyFailedShard
argument_list|(
name|allocation
argument_list|,
name|shardRouting
argument_list|,
literal|false
argument_list|,
name|unassignedInfo
argument_list|)
expr_stmt|;
block|}
comment|// its a dead node, remove it, note, its important to remove it *after* we apply failed shard
comment|// since it relies on the fact that the RoutingNode exists in the list of nodes
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
name|changed
return|;
block|}
DECL|method|applyStartedShards
specifier|private
name|boolean
name|applyStartedShards
parameter_list|(
name|RoutingNodes
name|routingNodes
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|ShardRouting
argument_list|>
name|startedShardEntries
parameter_list|)
block|{
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
comment|// apply shards might be called several times with the same shard, ignore it
for|for
control|(
name|ShardRouting
name|startedShard
range|:
name|startedShardEntries
control|)
block|{
assert|assert
name|startedShard
operator|.
name|state
argument_list|()
operator|==
name|INITIALIZING
assert|;
comment|// retrieve the relocating node id before calling startedShard().
name|String
name|relocatingNodeId
init|=
literal|null
decl_stmt|;
name|RoutingNodes
operator|.
name|RoutingNodeIterator
name|currentRoutingNode
init|=
name|routingNodes
operator|.
name|routingNodeIter
argument_list|(
name|startedShard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentRoutingNode
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MutableShardRouting
name|shard
range|:
name|currentRoutingNode
control|)
block|{
if|if
condition|(
name|shard
operator|.
name|shardId
argument_list|()
operator|.
name|equals
argument_list|(
name|startedShard
operator|.
name|shardId
argument_list|()
argument_list|)
condition|)
block|{
name|relocatingNodeId
operator|=
name|shard
operator|.
name|relocatingNodeId
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|shard
operator|.
name|started
argument_list|()
condition|)
block|{
name|dirty
operator|=
literal|true
expr_stmt|;
name|routingNodes
operator|.
name|started
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
comment|// startedShard is the current state of the shard (post relocation for example)
comment|// this means that after relocation, the state will be started and the currentNodeId will be
comment|// the node we relocated to
if|if
condition|(
name|relocatingNodeId
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|RoutingNodes
operator|.
name|RoutingNodeIterator
name|sourceRoutingNode
init|=
name|routingNodes
operator|.
name|routingNodeIter
argument_list|(
name|relocatingNodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceRoutingNode
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|sourceRoutingNode
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MutableShardRouting
name|shard
init|=
name|sourceRoutingNode
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|shard
operator|.
name|shardId
argument_list|()
operator|.
name|equals
argument_list|(
name|startedShard
operator|.
name|shardId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|shard
operator|.
name|relocating
argument_list|()
condition|)
block|{
name|dirty
operator|=
literal|true
expr_stmt|;
name|sourceRoutingNode
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
return|return
name|dirty
return|;
block|}
comment|/**      * Applies the relevant logic to handle a failed shard. Returns<tt>true</tt> if changes happened that      * require relocation.      */
DECL|method|applyFailedShard
specifier|private
name|boolean
name|applyFailedShard
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|,
name|ShardRouting
name|failedShard
parameter_list|,
name|boolean
name|addToIgnoreList
parameter_list|,
name|UnassignedInfo
name|unassignedInfo
parameter_list|)
block|{
comment|// create a copy of the failed shard, since we assume we can change possible references to it without
comment|// changing the state of failed shard
name|failedShard
operator|=
operator|new
name|ImmutableShardRouting
argument_list|(
name|failedShard
argument_list|)
expr_stmt|;
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|allocation
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|failedShard
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRoutingTable
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RoutingNodes
name|routingNodes
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|failedShard
operator|.
name|relocatingNodeId
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// the shard is relocating, either in initializing (recovery from another node) or relocating (moving to another node)
if|if
condition|(
name|failedShard
operator|.
name|state
argument_list|()
operator|==
name|INITIALIZING
condition|)
block|{
comment|// the shard is initializing and recovering from another node
comment|// first, we need to cancel the current node that is being initialized
name|RoutingNodes
operator|.
name|RoutingNodeIterator
name|initializingNode
init|=
name|routingNodes
operator|.
name|routingNodeIter
argument_list|(
name|failedShard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|initializingNode
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|initializingNode
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MutableShardRouting
name|shardRouting
init|=
name|initializingNode
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|shardRouting
operator|.
name|equals
argument_list|(
name|failedShard
argument_list|)
condition|)
block|{
name|dirty
operator|=
literal|true
expr_stmt|;
name|initializingNode
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|addToIgnoreList
condition|)
block|{
comment|// make sure we ignore this shard on the relevant node
name|allocation
operator|.
name|addIgnoreShardForNode
argument_list|(
name|failedShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|failedShard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
if|if
condition|(
name|dirty
condition|)
block|{
comment|// now, find the node that we are relocating *from*, and cancel its relocation
name|RoutingNode
name|relocatingFromNode
init|=
name|routingNodes
operator|.
name|node
argument_list|(
name|failedShard
operator|.
name|relocatingNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|relocatingFromNode
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MutableShardRouting
name|shardRouting
range|:
name|relocatingFromNode
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|shardId
argument_list|()
operator|.
name|equals
argument_list|(
name|failedShard
operator|.
name|shardId
argument_list|()
argument_list|)
operator|&&
name|shardRouting
operator|.
name|relocating
argument_list|()
condition|)
block|{
name|dirty
operator|=
literal|true
expr_stmt|;
name|routingNodes
operator|.
name|cancelRelocation
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed shard {} not found in routingNodes, ignoring it"
argument_list|,
name|failedShard
argument_list|)
expr_stmt|;
block|}
return|return
name|dirty
return|;
block|}
elseif|else
if|if
condition|(
name|failedShard
operator|.
name|state
argument_list|()
operator|==
name|RELOCATING
condition|)
block|{
comment|// the shard is relocating, meaning its the source the shard is relocating from
comment|// first, we need to cancel the current relocation from the current node
comment|// now, find the node that we are recovering from, cancel the relocation, remove it from the node
comment|// and add it to the unassigned shards list...
name|RoutingNodes
operator|.
name|RoutingNodeIterator
name|relocatingFromNode
init|=
name|routingNodes
operator|.
name|routingNodeIter
argument_list|(
name|failedShard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|relocatingFromNode
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|relocatingFromNode
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MutableShardRouting
name|shardRouting
init|=
name|relocatingFromNode
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|shardRouting
operator|.
name|equals
argument_list|(
name|failedShard
argument_list|)
condition|)
block|{
name|dirty
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|addToIgnoreList
condition|)
block|{
comment|// make sure we ignore this shard on the relevant node
name|allocation
operator|.
name|addIgnoreShardForNode
argument_list|(
name|failedShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|failedShard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|relocatingFromNode
operator|.
name|moveToUnassigned
argument_list|(
name|unassignedInfo
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|dirty
condition|)
block|{
comment|// next, we need to find the target initializing shard that is recovering from, and remove it...
name|RoutingNodes
operator|.
name|RoutingNodeIterator
name|initializingNode
init|=
name|routingNodes
operator|.
name|routingNodeIter
argument_list|(
name|failedShard
operator|.
name|relocatingNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|initializingNode
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|initializingNode
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MutableShardRouting
name|shardRouting
init|=
name|initializingNode
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|shardRouting
operator|.
name|shardId
argument_list|()
operator|.
name|equals
argument_list|(
name|failedShard
operator|.
name|shardId
argument_list|()
argument_list|)
operator|&&
name|shardRouting
operator|.
name|state
argument_list|()
operator|==
name|INITIALIZING
condition|)
block|{
name|dirty
operator|=
literal|true
expr_stmt|;
name|initializingNode
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed shard {} not found in routingNodes, ignoring it"
argument_list|,
name|failedShard
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"illegal state for a failed shard, relocating node id is set, but state does not match: "
operator|+
name|failedShard
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// the shard is not relocating, its either started, or initializing, just cancel it and move on...
name|RoutingNodes
operator|.
name|RoutingNodeIterator
name|node
init|=
name|routingNodes
operator|.
name|routingNodeIter
argument_list|(
name|failedShard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|node
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MutableShardRouting
name|shardRouting
init|=
name|node
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|shardRouting
operator|.
name|equals
argument_list|(
name|failedShard
argument_list|)
condition|)
block|{
name|dirty
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|addToIgnoreList
condition|)
block|{
comment|// make sure we ignore this shard on the relevant node
name|allocation
operator|.
name|addIgnoreShardForNode
argument_list|(
name|failedShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|failedShard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// move all the shards matching the failed shard to the end of the unassigned list
comment|// so we give a chance for other allocations and won't create poison failed allocations
comment|// that can keep other shards from being allocated (because of limits applied on how many
comment|// shards we can start per node)
name|List
argument_list|<
name|MutableShardRouting
argument_list|>
name|shardsToMove
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|MutableShardRouting
argument_list|>
name|unassignedIt
init|=
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|unassignedIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MutableShardRouting
name|unassignedShardRouting
init|=
name|unassignedIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|unassignedShardRouting
operator|.
name|shardId
argument_list|()
operator|.
name|equals
argument_list|(
name|failedShard
operator|.
name|shardId
argument_list|()
argument_list|)
condition|)
block|{
name|unassignedIt
operator|.
name|remove
argument_list|()
expr_stmt|;
name|shardsToMove
operator|.
name|add
argument_list|(
name|unassignedShardRouting
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|shardsToMove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|addAll
argument_list|(
name|shardsToMove
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|moveToUnassigned
argument_list|(
name|unassignedInfo
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|dirty
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed shard {} not found in routingNodes, ignoring it"
argument_list|,
name|failedShard
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dirty
return|;
block|}
block|}
end_class

end_unit

