begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Represents the recovery source of a shard. Available recovery types are:  *  * - {@link StoreRecoverySource} recovery from the local store (empty or with existing data)  * - {@link PeerRecoverySource} recovery from a primary on another node  * - {@link SnapshotRecoverySource} recovery from a snapshot  * - {@link LocalShardsRecoverySource} recovery from other shards of another index on the same node  */
end_comment

begin_class
DECL|class|RecoverySource
specifier|public
specifier|abstract
class|class
name|RecoverySource
implements|implements
name|Writeable
implements|,
name|ToXContent
block|{
annotation|@
name|Override
DECL|method|toXContent
specifier|public
specifier|final
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|addAdditionalFields
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|endObject
argument_list|()
return|;
block|}
comment|/**      * to be overridden by subclasses      */
DECL|method|addAdditionalFields
specifier|public
name|void
name|addAdditionalFields
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{      }
DECL|method|readFrom
specifier|public
specifier|static
name|RecoverySource
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Type
name|type
init|=
name|Type
operator|.
name|values
argument_list|()
index|[
name|in
operator|.
name|readByte
argument_list|()
index|]
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|EMPTY_STORE
case|:
return|return
name|StoreRecoverySource
operator|.
name|EMPTY_STORE_INSTANCE
return|;
case|case
name|EXISTING_STORE
case|:
return|return
name|StoreRecoverySource
operator|.
name|EXISTING_STORE_INSTANCE
return|;
case|case
name|PEER
case|:
return|return
name|PeerRecoverySource
operator|.
name|INSTANCE
return|;
case|case
name|SNAPSHOT
case|:
return|return
operator|new
name|SnapshotRecoverySource
argument_list|(
name|in
argument_list|)
return|;
case|case
name|LOCAL_SHARDS
case|:
return|return
name|LocalShardsRecoverySource
operator|.
name|INSTANCE
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown recovery type: "
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
specifier|final
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|getType
argument_list|()
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|writeAdditionalFields
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**      * to be overridden by subclasses      */
DECL|method|writeAdditionalFields
specifier|protected
name|void
name|writeAdditionalFields
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{      }
DECL|enum|Type
specifier|public
enum|enum
name|Type
block|{
DECL|enum constant|EMPTY_STORE
name|EMPTY_STORE
block|,
DECL|enum constant|EXISTING_STORE
name|EXISTING_STORE
block|,
DECL|enum constant|PEER
name|PEER
block|,
DECL|enum constant|SNAPSHOT
name|SNAPSHOT
block|,
DECL|enum constant|LOCAL_SHARDS
name|LOCAL_SHARDS
block|}
DECL|method|getType
specifier|public
specifier|abstract
name|Type
name|getType
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|RecoverySource
name|that
init|=
operator|(
name|RecoverySource
operator|)
name|o
decl_stmt|;
return|return
name|getType
argument_list|()
operator|==
name|that
operator|.
name|getType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getType
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * recovery from an existing on-disk store or a fresh copy      */
DECL|class|StoreRecoverySource
specifier|public
specifier|abstract
specifier|static
class|class
name|StoreRecoverySource
extends|extends
name|RecoverySource
block|{
DECL|field|EMPTY_STORE_INSTANCE
specifier|public
specifier|static
specifier|final
name|StoreRecoverySource
name|EMPTY_STORE_INSTANCE
init|=
operator|new
name|StoreRecoverySource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|EMPTY_STORE
return|;
block|}
block|}
decl_stmt|;
DECL|field|EXISTING_STORE_INSTANCE
specifier|public
specifier|static
specifier|final
name|StoreRecoverySource
name|EXISTING_STORE_INSTANCE
init|=
operator|new
name|StoreRecoverySource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|EXISTING_STORE
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|EMPTY_STORE
condition|?
literal|"new shard recovery"
else|:
literal|"existing recovery"
return|;
block|}
block|}
comment|/**      * recovery from other shards on same node (shrink index action)      */
DECL|class|LocalShardsRecoverySource
specifier|public
specifier|static
class|class
name|LocalShardsRecoverySource
extends|extends
name|RecoverySource
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|LocalShardsRecoverySource
name|INSTANCE
init|=
operator|new
name|LocalShardsRecoverySource
argument_list|()
decl_stmt|;
DECL|method|LocalShardsRecoverySource
specifier|private
name|LocalShardsRecoverySource
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|getType
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|LOCAL_SHARDS
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"local shards recovery"
return|;
block|}
block|}
comment|/**      * recovery from a snapshot      */
DECL|class|SnapshotRecoverySource
specifier|public
specifier|static
class|class
name|SnapshotRecoverySource
extends|extends
name|RecoverySource
block|{
DECL|field|snapshot
specifier|private
specifier|final
name|Snapshot
name|snapshot
decl_stmt|;
DECL|field|index
specifier|private
specifier|final
name|String
name|index
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|Version
name|version
decl_stmt|;
DECL|method|SnapshotRecoverySource
specifier|public
name|SnapshotRecoverySource
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|Version
name|version
parameter_list|,
name|String
name|index
parameter_list|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
DECL|method|SnapshotRecoverySource
name|SnapshotRecoverySource
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|snapshot
operator|=
operator|new
name|Snapshot
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|version
operator|=
name|Version
operator|.
name|readVersion
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|index
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
DECL|method|snapshot
specifier|public
name|Snapshot
name|snapshot
parameter_list|()
block|{
return|return
name|snapshot
return|;
block|}
DECL|method|index
specifier|public
name|String
name|index
parameter_list|()
block|{
return|return
name|index
return|;
block|}
DECL|method|version
specifier|public
name|Version
name|version
parameter_list|()
block|{
return|return
name|version
return|;
block|}
annotation|@
name|Override
DECL|method|writeAdditionalFields
specifier|protected
name|void
name|writeAdditionalFields
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|snapshot
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|Version
operator|.
name|writeVersion
argument_list|(
name|version
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|SNAPSHOT
return|;
block|}
annotation|@
name|Override
DECL|method|addAdditionalFields
specifier|public
name|void
name|addAdditionalFields
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"repository"
argument_list|,
name|snapshot
operator|.
name|getRepository
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"snapshot"
argument_list|,
name|snapshot
operator|.
name|getSnapshotId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"version"
argument_list|,
name|version
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"snapshot recovery from "
operator|+
name|snapshot
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|SnapshotRecoverySource
name|that
init|=
operator|(
name|SnapshotRecoverySource
operator|)
name|o
decl_stmt|;
return|return
name|snapshot
operator|.
name|equals
argument_list|(
name|that
operator|.
name|snapshot
argument_list|)
operator|&&
name|index
operator|.
name|equals
argument_list|(
name|that
operator|.
name|index
argument_list|)
operator|&&
name|version
operator|.
name|equals
argument_list|(
name|that
operator|.
name|version
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|snapshot
argument_list|,
name|index
argument_list|,
name|version
argument_list|)
return|;
block|}
block|}
comment|/**      * peer recovery from a primary shard      */
DECL|class|PeerRecoverySource
specifier|public
specifier|static
class|class
name|PeerRecoverySource
extends|extends
name|RecoverySource
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|PeerRecoverySource
name|INSTANCE
init|=
operator|new
name|PeerRecoverySource
argument_list|()
decl_stmt|;
DECL|method|PeerRecoverySource
specifier|private
name|PeerRecoverySource
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|getType
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|PEER
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"peer recovery"
return|;
block|}
block|}
DECL|field|INITIAL_RECOVERY_TYPES
specifier|private
specifier|static
name|EnumSet
argument_list|<
name|RecoverySource
operator|.
name|Type
argument_list|>
name|INITIAL_RECOVERY_TYPES
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|Type
operator|.
name|EMPTY_STORE
argument_list|,
name|Type
operator|.
name|LOCAL_SHARDS
argument_list|,
name|Type
operator|.
name|SNAPSHOT
argument_list|)
decl_stmt|;
comment|/**      * returns true for recovery types that indicate that a primary is being allocated for the very first time.      * This recoveries can be controlled by {@link IndexMetaData#INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING}      */
DECL|method|isInitialRecovery
specifier|public
specifier|static
name|boolean
name|isInitialRecovery
parameter_list|(
name|RecoverySource
operator|.
name|Type
name|type
parameter_list|)
block|{
return|return
name|INITIAL_RECOVERY_TYPES
operator|.
name|contains
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
end_class

end_unit

