begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Represents a decision to move a started shard because it is no longer allowed to remain on its current node.  */
end_comment

begin_class
DECL|class|MoveDecision
specifier|public
specifier|final
class|class
name|MoveDecision
extends|extends
name|RelocationDecision
block|{
comment|/** a constant representing no decision taken */
DECL|field|NOT_TAKEN
specifier|public
specifier|static
specifier|final
name|MoveDecision
name|NOT_TAKEN
init|=
operator|new
name|MoveDecision
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/** cached decisions so we don't have to recreate objects for common decisions when not in explain mode. */
DECL|field|CACHED_STAY_DECISION
specifier|private
specifier|static
specifier|final
name|MoveDecision
name|CACHED_STAY_DECISION
init|=
operator|new
name|MoveDecision
argument_list|(
name|Decision
operator|.
name|YES
argument_list|,
name|Decision
operator|.
name|Type
operator|.
name|NO
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|CACHED_CANNOT_MOVE_DECISION
specifier|private
specifier|static
specifier|final
name|MoveDecision
name|CACHED_CANNOT_MOVE_DECISION
init|=
operator|new
name|MoveDecision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|Decision
operator|.
name|Type
operator|.
name|NO
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
annotation|@
name|Nullable
DECL|field|canRemainDecision
specifier|private
specifier|final
name|Decision
name|canRemainDecision
decl_stmt|;
annotation|@
name|Nullable
DECL|field|nodeDecisions
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NodeAllocationResult
argument_list|>
name|nodeDecisions
decl_stmt|;
DECL|method|MoveDecision
specifier|private
name|MoveDecision
parameter_list|(
name|Decision
name|canRemainDecision
parameter_list|,
name|Decision
operator|.
name|Type
name|finalDecision
parameter_list|,
name|String
name|finalExplanation
parameter_list|,
name|String
name|assignedNodeId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|NodeAllocationResult
argument_list|>
name|nodeDecisions
parameter_list|)
block|{
name|super
argument_list|(
name|finalDecision
argument_list|,
name|finalExplanation
argument_list|,
name|assignedNodeId
argument_list|)
expr_stmt|;
name|this
operator|.
name|canRemainDecision
operator|=
name|canRemainDecision
expr_stmt|;
name|this
operator|.
name|nodeDecisions
operator|=
name|nodeDecisions
operator|!=
literal|null
condition|?
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|nodeDecisions
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
comment|/**      * Creates a move decision for the shard being able to remain on its current node, so not moving.      */
DECL|method|stay
specifier|public
specifier|static
name|MoveDecision
name|stay
parameter_list|(
name|Decision
name|canRemainDecision
parameter_list|,
name|boolean
name|explain
parameter_list|)
block|{
assert|assert
name|canRemainDecision
operator|.
name|type
argument_list|()
operator|!=
name|Decision
operator|.
name|Type
operator|.
name|NO
assert|;
if|if
condition|(
name|explain
condition|)
block|{
specifier|final
name|String
name|explanation
decl_stmt|;
if|if
condition|(
name|explain
condition|)
block|{
name|explanation
operator|=
literal|"shard is allowed to remain on its current node, so no reason to move"
expr_stmt|;
block|}
else|else
block|{
name|explanation
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|new
name|MoveDecision
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|canRemainDecision
argument_list|)
argument_list|,
name|Decision
operator|.
name|Type
operator|.
name|NO
argument_list|,
name|explanation
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|CACHED_STAY_DECISION
return|;
block|}
block|}
comment|/**      * Creates a move decision for the shard not being able to remain on its current node.      *      * @param canRemainDecision the decision for whether the shard is allowed to remain on its current node      * @param finalDecision the decision of whether to move the shard to another node      * @param explain true if in explain mode      * @param currentNodeId the current node id where the shard is assigned      * @param assignedNodeId the node id for where the shard can move to      * @param nodeDecisions the node-level decisions that comprised the final decision, non-null iff explain is true      * @return the {@link MoveDecision} for moving the shard to another node      */
DECL|method|decision
specifier|public
specifier|static
name|MoveDecision
name|decision
parameter_list|(
name|Decision
name|canRemainDecision
parameter_list|,
name|Decision
operator|.
name|Type
name|finalDecision
parameter_list|,
name|boolean
name|explain
parameter_list|,
name|String
name|currentNodeId
parameter_list|,
name|String
name|assignedNodeId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|NodeAllocationResult
argument_list|>
name|nodeDecisions
parameter_list|)
block|{
assert|assert
name|canRemainDecision
operator|!=
literal|null
assert|;
assert|assert
name|canRemainDecision
operator|.
name|type
argument_list|()
operator|!=
name|Decision
operator|.
name|Type
operator|.
name|YES
operator|:
literal|"create decision with MoveDecision#stay instead"
assert|;
name|String
name|finalExplanation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|explain
condition|)
block|{
assert|assert
name|currentNodeId
operator|!=
literal|null
assert|;
if|if
condition|(
name|finalDecision
operator|==
name|Decision
operator|.
name|Type
operator|.
name|YES
condition|)
block|{
assert|assert
name|assignedNodeId
operator|!=
literal|null
assert|;
name|finalExplanation
operator|=
literal|"shard cannot remain on node ["
operator|+
name|currentNodeId
operator|+
literal|"], moving to node ["
operator|+
name|assignedNodeId
operator|+
literal|"]"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|finalDecision
operator|==
name|Decision
operator|.
name|Type
operator|.
name|THROTTLE
condition|)
block|{
name|finalExplanation
operator|=
literal|"shard cannot remain on node ["
operator|+
name|currentNodeId
operator|+
literal|"], throttled on moving to another node"
expr_stmt|;
block|}
else|else
block|{
name|finalExplanation
operator|=
literal|"shard cannot remain on node ["
operator|+
name|currentNodeId
operator|+
literal|"], but cannot be assigned to any other node"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|finalExplanation
operator|==
literal|null
operator|&&
name|finalDecision
operator|==
name|Decision
operator|.
name|Type
operator|.
name|NO
condition|)
block|{
comment|// the final decision is NO (no node to move the shard to) and we are not in explain mode, return a cached version
return|return
name|CACHED_CANNOT_MOVE_DECISION
return|;
block|}
else|else
block|{
assert|assert
operator|(
operator|(
name|assignedNodeId
operator|==
literal|null
operator|)
operator|==
operator|(
name|finalDecision
operator|!=
name|Decision
operator|.
name|Type
operator|.
name|YES
operator|)
operator|)
assert|;
return|return
operator|new
name|MoveDecision
argument_list|(
name|canRemainDecision
argument_list|,
name|finalDecision
argument_list|,
name|finalExplanation
argument_list|,
name|assignedNodeId
argument_list|,
name|nodeDecisions
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns {@code true} if the shard cannot remain on its current node and can be moved, returns {@code false} otherwise.      */
DECL|method|move
specifier|public
name|boolean
name|move
parameter_list|()
block|{
return|return
name|cannotRemain
argument_list|()
operator|&&
name|getFinalDecisionType
argument_list|()
operator|==
name|Decision
operator|.
name|Type
operator|.
name|YES
return|;
block|}
comment|/**      * Returns {@code true} if the shard cannot remain on its current node.      */
DECL|method|cannotRemain
specifier|public
name|boolean
name|cannotRemain
parameter_list|()
block|{
return|return
name|isDecisionTaken
argument_list|()
operator|&&
name|canRemainDecision
operator|.
name|type
argument_list|()
operator|==
name|Decision
operator|.
name|Type
operator|.
name|NO
return|;
block|}
comment|/**      * Gets the individual node-level decisions that went into making the final decision as represented by      * {@link #getFinalDecisionType()}.  The map that is returned has the node id as the key and a {@link NodeAllocationResult}.      */
annotation|@
name|Nullable
DECL|method|getNodeDecisions
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|NodeAllocationResult
argument_list|>
name|getNodeDecisions
parameter_list|()
block|{
return|return
name|nodeDecisions
return|;
block|}
block|}
end_class

end_unit

