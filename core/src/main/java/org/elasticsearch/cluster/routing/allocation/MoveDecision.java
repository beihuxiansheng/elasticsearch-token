begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Represents a decision to move a started shard, either because it is no longer allowed to remain on its current node  * or because moving it to another node will form a better cluster balance.  */
end_comment

begin_class
DECL|class|MoveDecision
specifier|public
specifier|final
class|class
name|MoveDecision
extends|extends
name|AbstractAllocationDecision
block|{
comment|/** a constant representing no decision taken */
DECL|field|NOT_TAKEN
specifier|public
specifier|static
specifier|final
name|MoveDecision
name|NOT_TAKEN
init|=
operator|new
name|MoveDecision
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|AllocationDecision
operator|.
name|NO_ATTEMPT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|/** cached decisions so we don't have to recreate objects for common decisions when not in explain mode. */
DECL|field|CACHED_STAY_DECISION
specifier|private
specifier|static
specifier|final
name|MoveDecision
name|CACHED_STAY_DECISION
init|=
operator|new
name|MoveDecision
argument_list|(
name|Decision
operator|.
name|YES
argument_list|,
literal|null
argument_list|,
name|AllocationDecision
operator|.
name|NO_ATTEMPT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|CACHED_CANNOT_MOVE_DECISION
specifier|private
specifier|static
specifier|final
name|MoveDecision
name|CACHED_CANNOT_MOVE_DECISION
init|=
operator|new
name|MoveDecision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
literal|null
argument_list|,
name|AllocationDecision
operator|.
name|NO
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Nullable
DECL|field|allocationDecision
name|AllocationDecision
name|allocationDecision
decl_stmt|;
annotation|@
name|Nullable
DECL|field|canRemainDecision
specifier|private
specifier|final
name|Decision
name|canRemainDecision
decl_stmt|;
annotation|@
name|Nullable
DECL|field|canRebalanceDecision
specifier|private
specifier|final
name|Decision
name|canRebalanceDecision
decl_stmt|;
DECL|field|currentNodeRanking
specifier|private
specifier|final
name|int
name|currentNodeRanking
decl_stmt|;
DECL|method|MoveDecision
specifier|private
name|MoveDecision
parameter_list|(
name|Decision
name|canRemainDecision
parameter_list|,
name|Decision
name|canRebalanceDecision
parameter_list|,
name|AllocationDecision
name|allocationDecision
parameter_list|,
name|DiscoveryNode
name|assignedNode
parameter_list|,
name|List
argument_list|<
name|NodeAllocationResult
argument_list|>
name|nodeDecisions
parameter_list|,
name|int
name|currentNodeRanking
parameter_list|)
block|{
name|super
argument_list|(
name|assignedNode
argument_list|,
name|nodeDecisions
argument_list|)
expr_stmt|;
name|this
operator|.
name|allocationDecision
operator|=
name|allocationDecision
expr_stmt|;
name|this
operator|.
name|canRemainDecision
operator|=
name|canRemainDecision
expr_stmt|;
name|this
operator|.
name|canRebalanceDecision
operator|=
name|canRebalanceDecision
expr_stmt|;
name|this
operator|.
name|currentNodeRanking
operator|=
name|currentNodeRanking
expr_stmt|;
block|}
DECL|method|MoveDecision
specifier|public
name|MoveDecision
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|allocationDecision
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|AllocationDecision
operator|::
name|readFrom
argument_list|)
expr_stmt|;
name|canRemainDecision
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|Decision
operator|::
name|readFrom
argument_list|)
expr_stmt|;
name|canRebalanceDecision
operator|=
name|in
operator|.
name|readOptionalWriteable
argument_list|(
name|Decision
operator|::
name|readFrom
argument_list|)
expr_stmt|;
name|currentNodeRanking
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|allocationDecision
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|canRemainDecision
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
name|canRebalanceDecision
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|currentNodeRanking
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a move decision for the shard being able to remain on its current node, so the shard won't      * be forced to move to another node.      */
DECL|method|stay
specifier|public
specifier|static
name|MoveDecision
name|stay
parameter_list|(
name|Decision
name|canRemainDecision
parameter_list|)
block|{
if|if
condition|(
name|canRemainDecision
operator|!=
literal|null
condition|)
block|{
assert|assert
name|canRemainDecision
operator|.
name|type
argument_list|()
operator|!=
name|Type
operator|.
name|NO
assert|;
return|return
operator|new
name|MoveDecision
argument_list|(
name|canRemainDecision
argument_list|,
literal|null
argument_list|,
name|AllocationDecision
operator|.
name|NO_ATTEMPT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|CACHED_STAY_DECISION
return|;
block|}
block|}
comment|/**      * Creates a move decision for the shard not being allowed to remain on its current node.      *      * @param canRemainDecision the decision for whether the shard is allowed to remain on its current node      * @param allocationDecision the {@link AllocationDecision} for moving the shard to another node      * @param assignedNode the node where the shard should move to      * @param nodeDecisions the node-level decisions that comprised the final decision, non-null iff explain is true      * @return the {@link MoveDecision} for moving the shard to another node      */
DECL|method|cannotRemain
specifier|public
specifier|static
name|MoveDecision
name|cannotRemain
parameter_list|(
name|Decision
name|canRemainDecision
parameter_list|,
name|AllocationDecision
name|allocationDecision
parameter_list|,
name|DiscoveryNode
name|assignedNode
parameter_list|,
name|List
argument_list|<
name|NodeAllocationResult
argument_list|>
name|nodeDecisions
parameter_list|)
block|{
assert|assert
name|canRemainDecision
operator|!=
literal|null
assert|;
assert|assert
name|canRemainDecision
operator|.
name|type
argument_list|()
operator|!=
name|Type
operator|.
name|YES
operator|:
literal|"create decision with MoveDecision#stay instead"
assert|;
if|if
condition|(
name|nodeDecisions
operator|==
literal|null
operator|&&
name|allocationDecision
operator|==
name|AllocationDecision
operator|.
name|NO
condition|)
block|{
comment|// the final decision is NO (no node to move the shard to) and we are not in explain mode, return a cached version
return|return
name|CACHED_CANNOT_MOVE_DECISION
return|;
block|}
else|else
block|{
assert|assert
operator|(
operator|(
name|assignedNode
operator|==
literal|null
operator|)
operator|==
operator|(
name|allocationDecision
operator|!=
name|AllocationDecision
operator|.
name|YES
operator|)
operator|)
assert|;
return|return
operator|new
name|MoveDecision
argument_list|(
name|canRemainDecision
argument_list|,
literal|null
argument_list|,
name|allocationDecision
argument_list|,
name|assignedNode
argument_list|,
name|nodeDecisions
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
comment|/**      * Creates a move decision for when rebalancing the shard is not allowed.      */
DECL|method|cannotRebalance
specifier|public
specifier|static
name|MoveDecision
name|cannotRebalance
parameter_list|(
name|Decision
name|canRebalanceDecision
parameter_list|,
name|AllocationDecision
name|allocationDecision
parameter_list|,
name|int
name|currentNodeRanking
parameter_list|,
name|List
argument_list|<
name|NodeAllocationResult
argument_list|>
name|nodeDecisions
parameter_list|)
block|{
return|return
operator|new
name|MoveDecision
argument_list|(
literal|null
argument_list|,
name|canRebalanceDecision
argument_list|,
name|allocationDecision
argument_list|,
literal|null
argument_list|,
name|nodeDecisions
argument_list|,
name|currentNodeRanking
argument_list|)
return|;
block|}
comment|/**      * Creates a decision for whether to move the shard to a different node to form a better cluster balance.      */
DECL|method|rebalance
specifier|public
specifier|static
name|MoveDecision
name|rebalance
parameter_list|(
name|Decision
name|canRebalanceDecision
parameter_list|,
name|AllocationDecision
name|allocationDecision
parameter_list|,
annotation|@
name|Nullable
name|DiscoveryNode
name|assignedNode
parameter_list|,
name|int
name|currentNodeRanking
parameter_list|,
name|List
argument_list|<
name|NodeAllocationResult
argument_list|>
name|nodeDecisions
parameter_list|)
block|{
return|return
operator|new
name|MoveDecision
argument_list|(
literal|null
argument_list|,
name|canRebalanceDecision
argument_list|,
name|allocationDecision
argument_list|,
name|assignedNode
argument_list|,
name|nodeDecisions
argument_list|,
name|currentNodeRanking
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isDecisionTaken
specifier|public
name|boolean
name|isDecisionTaken
parameter_list|()
block|{
return|return
name|this
operator|!=
name|NOT_TAKEN
return|;
block|}
comment|/**      * Returns {@code true} if the shard cannot remain on its current node and can be moved,      * returns {@code false} otherwise.  If {@link #isDecisionTaken()} returns {@code false},      * then invoking this method will throw an {@code IllegalStateException}.      */
DECL|method|forceMove
specifier|public
name|boolean
name|forceMove
parameter_list|()
block|{
name|checkDecisionState
argument_list|()
expr_stmt|;
return|return
name|canRemain
argument_list|()
operator|==
literal|false
operator|&&
name|allocationDecision
operator|==
name|AllocationDecision
operator|.
name|YES
return|;
block|}
comment|/**      * Returns {@code true} if the shard can remain on its current node, returns {@code false} otherwise.      * If {@link #isDecisionTaken()} returns {@code false}, then invoking this method will throw an {@code IllegalStateException}.      */
DECL|method|canRemain
specifier|public
name|boolean
name|canRemain
parameter_list|()
block|{
name|checkDecisionState
argument_list|()
expr_stmt|;
return|return
name|canRemainDecision
operator|.
name|type
argument_list|()
operator|==
name|Type
operator|.
name|YES
return|;
block|}
comment|/**      * Returns the decision for the shard being allowed to remain on its current node.  If {@link #isDecisionTaken()}      * returns {@code false}, then invoking this method will throw an {@code IllegalStateException}.      */
DECL|method|getCanRemainDecision
specifier|public
name|Decision
name|getCanRemainDecision
parameter_list|()
block|{
name|checkDecisionState
argument_list|()
expr_stmt|;
return|return
name|canRemainDecision
return|;
block|}
comment|/**      * Returns {@code true} if the shard is allowed to be rebalanced to another node in the cluster,      * returns {@code false} otherwise.  If {@link #getCanRebalanceDecision()} returns {@code null}, then      * the result of this method is meaningless, as no rebalance decision was taken.  If {@link #isDecisionTaken()}      * returns {@code false}, then invoking this method will throw an {@code IllegalStateException}.      */
DECL|method|canRebalance
specifier|public
name|boolean
name|canRebalance
parameter_list|()
block|{
name|checkDecisionState
argument_list|()
expr_stmt|;
return|return
name|canRebalanceDecision
operator|.
name|type
argument_list|()
operator|==
name|Type
operator|.
name|YES
return|;
block|}
comment|/**      * Returns the decision for being allowed to rebalance the shard.  Invoking this method will return      * {@code null} if {@link #canRemain()} ()} returns {@code false}, which means the node is not allowed to      * remain on its current node, so the cluster is forced to attempt to move the shard to a different node,      * as opposed to attempting to rebalance the shard if a better cluster balance is possible by moving it.      * If {@link #isDecisionTaken()} returns {@code false}, then invoking this method will throw an      * {@code IllegalStateException}.      */
annotation|@
name|Nullable
DECL|method|getCanRebalanceDecision
specifier|public
name|Decision
name|getCanRebalanceDecision
parameter_list|()
block|{
name|checkDecisionState
argument_list|()
expr_stmt|;
return|return
name|canRebalanceDecision
return|;
block|}
comment|/**      * Returns the {@link AllocationDecision} for moving this shard to another node.  If {@link #isDecisionTaken()} returns      * {@code false}, then invoking this method will throw an {@code IllegalStateException}.      */
annotation|@
name|Nullable
DECL|method|getAllocationDecision
specifier|public
name|AllocationDecision
name|getAllocationDecision
parameter_list|()
block|{
return|return
name|allocationDecision
return|;
block|}
comment|/**      * Gets the current ranking of the node to which the shard is currently assigned, relative to the      * other nodes in the cluster as reported in {@link NodeAllocationResult#getWeightRanking()}.  The      * ranking will only return a meaningful positive integer if {@link #getCanRebalanceDecision()} returns      * a non-null value; otherwise, 0 will be returned.  If {@link #isDecisionTaken()} returns      * {@code false}, then invoking this method will throw an {@code IllegalStateException}.      */
DECL|method|getCurrentNodeRanking
specifier|public
name|int
name|getCurrentNodeRanking
parameter_list|()
block|{
name|checkDecisionState
argument_list|()
expr_stmt|;
return|return
name|currentNodeRanking
return|;
block|}
annotation|@
name|Override
DECL|method|getExplanation
specifier|public
name|String
name|getExplanation
parameter_list|()
block|{
name|checkDecisionState
argument_list|()
expr_stmt|;
name|String
name|explanation
decl_stmt|;
if|if
condition|(
name|canRebalanceDecision
operator|!=
literal|null
condition|)
block|{
comment|// it was a decision to rebalance the shard, because the shard was allowed to remain on its current node
if|if
condition|(
name|allocationDecision
operator|==
name|AllocationDecision
operator|.
name|FETCH_PENDING
condition|)
block|{
name|explanation
operator|=
literal|"cannot rebalance as information about existing copies of this shard in the cluster is still being gathered"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|canRebalanceDecision
operator|.
name|type
argument_list|()
operator|==
name|Type
operator|.
name|NO
condition|)
block|{
name|explanation
operator|=
literal|"rebalancing is not allowed on the cluster"
operator|+
operator|(
name|atLeastOneNodeWithYesDecision
argument_list|()
condition|?
literal|", even though there "
operator|+
literal|"is at least one node on which the shard can be allocated"
else|:
literal|""
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|canRebalanceDecision
operator|.
name|type
argument_list|()
operator|==
name|Type
operator|.
name|THROTTLE
condition|)
block|{
name|explanation
operator|=
literal|"rebalancing is throttled"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|getTargetNode
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|allocationDecision
operator|==
name|AllocationDecision
operator|.
name|THROTTLE
condition|)
block|{
name|explanation
operator|=
literal|"shard rebalancing throttled"
expr_stmt|;
block|}
else|else
block|{
name|explanation
operator|=
literal|"can rebalance shard"
expr_stmt|;
block|}
block|}
else|else
block|{
name|explanation
operator|=
literal|"cannot rebalance as no target node exists that can both allocate this shard "
operator|+
literal|"and improve the cluster balance"
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// it was a decision to force move the shard
if|if
condition|(
name|canRemain
argument_list|()
condition|)
block|{
name|explanation
operator|=
literal|"shard can remain on its current node"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allocationDecision
operator|==
name|AllocationDecision
operator|.
name|YES
condition|)
block|{
name|explanation
operator|=
literal|"shard cannot remain on this node and is force-moved to another node"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allocationDecision
operator|==
name|AllocationDecision
operator|.
name|THROTTLE
condition|)
block|{
name|explanation
operator|=
literal|"shard cannot remain on this node but is throttled on moving to another node"
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|allocationDecision
operator|==
name|AllocationDecision
operator|.
name|NO
assert|;
name|explanation
operator|=
literal|"cannot move shard to another node, even though it is not allowed to remain on its current node"
expr_stmt|;
block|}
block|}
return|return
name|explanation
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|checkDecisionState
argument_list|()
expr_stmt|;
if|if
condition|(
name|targetNode
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"target_node"
argument_list|)
expr_stmt|;
name|discoveryNodeToXContent
argument_list|(
name|targetNode
argument_list|,
literal|true
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
literal|"can_remain_on_current_node"
argument_list|,
name|canRemain
argument_list|()
condition|?
literal|"yes"
else|:
literal|"no"
argument_list|)
expr_stmt|;
if|if
condition|(
name|canRemain
argument_list|()
operator|==
literal|false
operator|&&
name|canRemainDecision
operator|.
name|getDecisions
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"can_remain_decisions"
argument_list|)
expr_stmt|;
name|canRemainDecision
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|canRebalanceDecision
operator|!=
literal|null
condition|)
block|{
name|AllocationDecision
name|rebalanceDecision
init|=
name|AllocationDecision
operator|.
name|fromDecisionType
argument_list|(
name|canRebalanceDecision
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"can_rebalance_cluster"
argument_list|,
name|rebalanceDecision
argument_list|)
expr_stmt|;
if|if
condition|(
name|rebalanceDecision
operator|!=
name|AllocationDecision
operator|.
name|YES
operator|&&
name|canRebalanceDecision
operator|.
name|getDecisions
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"can_rebalance_cluster_decisions"
argument_list|)
expr_stmt|;
name|canRebalanceDecision
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|canRebalanceDecision
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"can_rebalance_to_other_node"
argument_list|,
name|allocationDecision
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"can_move_to_other_node"
argument_list|,
name|forceMove
argument_list|()
condition|?
literal|"yes"
else|:
literal|"no"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|canRebalanceDecision
operator|!=
literal|null
condition|?
literal|"rebalance_explanation"
else|:
literal|"move_explanation"
argument_list|,
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|nodeDecisionsToXContent
argument_list|(
name|nodeDecisions
argument_list|,
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

