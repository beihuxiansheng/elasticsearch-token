begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Randomness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_comment
comment|/**  * {@link IndexShardRoutingTable} encapsulates all instances of a single shard.  * Each Elasticsearch index consists of multiple shards, each shard encapsulates  * a disjoint set of the index data and each shard has one or more instances  * referred to as replicas of a shard. Given that, this class encapsulates all  * replicas (instances) for a single index shard.  */
end_comment

begin_class
DECL|class|IndexShardRoutingTable
specifier|public
class|class
name|IndexShardRoutingTable
implements|implements
name|Iterable
argument_list|<
name|ShardRouting
argument_list|>
block|{
DECL|field|shuffler
specifier|final
name|ShardShuffler
name|shuffler
decl_stmt|;
DECL|field|shardId
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|primary
specifier|final
name|ShardRouting
name|primary
decl_stmt|;
DECL|field|primaryAsList
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|primaryAsList
decl_stmt|;
DECL|field|replicas
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|replicas
decl_stmt|;
DECL|field|shards
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
decl_stmt|;
DECL|field|activeShards
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|activeShards
decl_stmt|;
DECL|field|assignedShards
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|assignedShards
decl_stmt|;
DECL|field|NO_SHARDS
specifier|final
specifier|static
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|NO_SHARDS
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|allShardsStarted
specifier|final
name|boolean
name|allShardsStarted
decl_stmt|;
DECL|field|activeShardsByAttributes
specifier|private
specifier|volatile
name|Map
argument_list|<
name|AttributesKey
argument_list|,
name|AttributesRoutings
argument_list|>
name|activeShardsByAttributes
init|=
name|emptyMap
argument_list|()
decl_stmt|;
DECL|field|initializingShardsByAttributes
specifier|private
specifier|volatile
name|Map
argument_list|<
name|AttributesKey
argument_list|,
name|AttributesRoutings
argument_list|>
name|initializingShardsByAttributes
init|=
name|emptyMap
argument_list|()
decl_stmt|;
DECL|field|shardsByAttributeMutex
specifier|private
specifier|final
name|Object
name|shardsByAttributeMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|/**      * The initializing list, including ones that are initializing on a target node because of relocation.      * If we can come up with a better variable name, it would be nice...      */
DECL|field|allInitializingShards
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|allInitializingShards
decl_stmt|;
DECL|method|IndexShardRoutingTable
name|IndexShardRoutingTable
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|shuffler
operator|=
operator|new
name|RotationShardShuffler
argument_list|(
name|Randomness
operator|.
name|get
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|shards
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|shards
argument_list|)
expr_stmt|;
name|ShardRouting
name|primary
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|replicas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|activeShards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|assignedShards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|allInitializingShards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|allShardsStarted
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shard
range|:
name|shards
control|)
block|{
if|if
condition|(
name|shard
operator|.
name|primary
argument_list|()
condition|)
block|{
name|primary
operator|=
name|shard
expr_stmt|;
block|}
else|else
block|{
name|replicas
operator|.
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shard
operator|.
name|active
argument_list|()
condition|)
block|{
name|activeShards
operator|.
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shard
operator|.
name|initializing
argument_list|()
condition|)
block|{
name|allInitializingShards
operator|.
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shard
operator|.
name|relocating
argument_list|()
condition|)
block|{
comment|// create the target initializing shard routing on the node the shard is relocating to
name|allInitializingShards
operator|.
name|add
argument_list|(
name|shard
operator|.
name|buildTargetRelocatingShard
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shard
operator|.
name|assignedToNode
argument_list|()
condition|)
block|{
name|assignedShards
operator|.
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shard
operator|.
name|state
argument_list|()
operator|!=
name|ShardRoutingState
operator|.
name|STARTED
condition|)
block|{
name|allShardsStarted
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|this
operator|.
name|allShardsStarted
operator|=
name|allShardsStarted
expr_stmt|;
name|this
operator|.
name|primary
operator|=
name|primary
expr_stmt|;
if|if
condition|(
name|primary
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|primaryAsList
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|primary
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|primaryAsList
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|replicas
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|replicas
argument_list|)
expr_stmt|;
name|this
operator|.
name|activeShards
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|activeShards
argument_list|)
expr_stmt|;
name|this
operator|.
name|assignedShards
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|assignedShards
argument_list|)
expr_stmt|;
name|this
operator|.
name|allInitializingShards
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|allInitializingShards
argument_list|)
expr_stmt|;
block|}
comment|/**      * Normalizes all shard routings to the same (highest found) version&amp; primary terms.      */
DECL|method|normalizePrimaryTerms
specifier|public
name|IndexShardRoutingTable
name|normalizePrimaryTerms
parameter_list|()
block|{
if|if
condition|(
name|shards
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|shards
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|this
return|;
block|}
name|long
name|highestPrimaryTerm
init|=
name|shards
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryTerm
argument_list|()
decl_stmt|;
name|boolean
name|requiresNormalization
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|shards
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|long
name|primaryTerm
init|=
name|shards
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|primaryTerm
argument_list|()
decl_stmt|;
if|if
condition|(
name|highestPrimaryTerm
operator|!=
name|primaryTerm
condition|)
block|{
name|requiresNormalization
operator|=
literal|true
expr_stmt|;
block|}
name|highestPrimaryTerm
operator|=
name|Math
operator|.
name|max
argument_list|(
name|highestPrimaryTerm
argument_list|,
name|primaryTerm
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|requiresNormalization
condition|)
block|{
return|return
name|this
return|;
block|}
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shardRoutings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|shards
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shards
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|shards
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|primaryTerm
argument_list|()
operator|==
name|highestPrimaryTerm
condition|)
block|{
name|shardRoutings
operator|.
name|add
argument_list|(
name|shards
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shardRoutings
operator|.
name|add
argument_list|(
operator|new
name|ShardRouting
argument_list|(
name|shards
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|highestPrimaryTerm
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|IndexShardRoutingTable
argument_list|(
name|shardId
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|shardRoutings
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns the shards id      *      * @return id of the shard      */
DECL|method|shardId
specifier|public
name|ShardId
name|shardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
comment|/**      * Returns the shards id      *      * @return id of the shard      */
DECL|method|getShardId
specifier|public
name|ShardId
name|getShardId
parameter_list|()
block|{
return|return
name|shardId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|ShardRouting
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|shards
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * Returns the number of this shards instances.      */
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|shards
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Returns the number of this shards instances.      */
DECL|method|getSize
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|size
argument_list|()
return|;
block|}
comment|/**      * Returns a {@link List} of shards      *      * @return a {@link List} of shards      */
DECL|method|shards
specifier|public
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
parameter_list|()
block|{
return|return
name|this
operator|.
name|shards
return|;
block|}
comment|/**      * Returns a {@link List} of shards      *      * @return a {@link List} of shards      */
DECL|method|getShards
specifier|public
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|getShards
parameter_list|()
block|{
return|return
name|shards
argument_list|()
return|;
block|}
comment|/**      * Returns a {@link List} of active shards      *      * @return a {@link List} of shards      */
DECL|method|activeShards
specifier|public
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|activeShards
parameter_list|()
block|{
return|return
name|this
operator|.
name|activeShards
return|;
block|}
comment|/**      * Returns a {@link List} of active shards      *      * @return a {@link List} of shards      */
DECL|method|getActiveShards
specifier|public
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|getActiveShards
parameter_list|()
block|{
return|return
name|activeShards
argument_list|()
return|;
block|}
comment|/**      * Returns a {@link List} of assigned shards      *      * @return a {@link List} of shards      */
DECL|method|assignedShards
specifier|public
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|assignedShards
parameter_list|()
block|{
return|return
name|this
operator|.
name|assignedShards
return|;
block|}
comment|/**      * Returns a {@link List} of assigned shards      *      * @return a {@link List} of shards      */
DECL|method|getAssignedShards
specifier|public
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|getAssignedShards
parameter_list|()
block|{
return|return
name|this
operator|.
name|assignedShards
return|;
block|}
DECL|method|shardsRandomIt
specifier|public
name|ShardIterator
name|shardsRandomIt
parameter_list|()
block|{
return|return
operator|new
name|PlainShardIterator
argument_list|(
name|shardId
argument_list|,
name|shuffler
operator|.
name|shuffle
argument_list|(
name|shards
argument_list|)
argument_list|)
return|;
block|}
DECL|method|shardsIt
specifier|public
name|ShardIterator
name|shardsIt
parameter_list|()
block|{
return|return
operator|new
name|PlainShardIterator
argument_list|(
name|shardId
argument_list|,
name|shards
argument_list|)
return|;
block|}
DECL|method|shardsIt
specifier|public
name|ShardIterator
name|shardsIt
parameter_list|(
name|int
name|seed
parameter_list|)
block|{
return|return
operator|new
name|PlainShardIterator
argument_list|(
name|shardId
argument_list|,
name|shuffler
operator|.
name|shuffle
argument_list|(
name|shards
argument_list|,
name|seed
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns an iterator over active and initializing shards. Making sure though that      * its random within the active shards, and initializing shards are the last to iterate through.      */
DECL|method|activeInitializingShardsRandomIt
specifier|public
name|ShardIterator
name|activeInitializingShardsRandomIt
parameter_list|()
block|{
return|return
name|activeInitializingShardsIt
argument_list|(
name|shuffler
operator|.
name|nextSeed
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns an iterator over active and initializing shards. Making sure though that      * its random within the active shards, and initializing shards are the last to iterate through.      */
DECL|method|activeInitializingShardsIt
specifier|public
name|ShardIterator
name|activeInitializingShardsIt
parameter_list|(
name|int
name|seed
parameter_list|)
block|{
if|if
condition|(
name|allInitializingShards
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|PlainShardIterator
argument_list|(
name|shardId
argument_list|,
name|shuffler
operator|.
name|shuffle
argument_list|(
name|activeShards
argument_list|,
name|seed
argument_list|)
argument_list|)
return|;
block|}
name|ArrayList
argument_list|<
name|ShardRouting
argument_list|>
name|ordered
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|activeShards
operator|.
name|size
argument_list|()
operator|+
name|allInitializingShards
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ordered
operator|.
name|addAll
argument_list|(
name|shuffler
operator|.
name|shuffle
argument_list|(
name|activeShards
argument_list|,
name|seed
argument_list|)
argument_list|)
expr_stmt|;
name|ordered
operator|.
name|addAll
argument_list|(
name|allInitializingShards
argument_list|)
expr_stmt|;
return|return
operator|new
name|PlainShardIterator
argument_list|(
name|shardId
argument_list|,
name|ordered
argument_list|)
return|;
block|}
comment|/**      * Returns true if no primaries are active or initializing for this shard      */
DECL|method|noPrimariesActive
specifier|private
name|boolean
name|noPrimariesActive
parameter_list|()
block|{
if|if
condition|(
operator|!
name|primaryAsList
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|primaryAsList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|active
argument_list|()
operator|&&
operator|!
name|primaryAsList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|initializing
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns an iterator only on the primary shard.      */
DECL|method|primaryShardIt
specifier|public
name|ShardIterator
name|primaryShardIt
parameter_list|()
block|{
return|return
operator|new
name|PlainShardIterator
argument_list|(
name|shardId
argument_list|,
name|primaryAsList
argument_list|)
return|;
block|}
DECL|method|primaryActiveInitializingShardIt
specifier|public
name|ShardIterator
name|primaryActiveInitializingShardIt
parameter_list|()
block|{
if|if
condition|(
name|noPrimariesActive
argument_list|()
condition|)
block|{
return|return
operator|new
name|PlainShardIterator
argument_list|(
name|shardId
argument_list|,
name|NO_SHARDS
argument_list|)
return|;
block|}
return|return
name|primaryShardIt
argument_list|()
return|;
block|}
DECL|method|primaryFirstActiveInitializingShardsIt
specifier|public
name|ShardIterator
name|primaryFirstActiveInitializingShardsIt
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|ShardRouting
argument_list|>
name|ordered
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|activeShards
operator|.
name|size
argument_list|()
operator|+
name|allInitializingShards
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// fill it in a randomized fashion
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|shuffler
operator|.
name|shuffle
argument_list|(
name|activeShards
argument_list|)
control|)
block|{
name|ordered
operator|.
name|add
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
condition|)
block|{
comment|// switch, its the matching node id
name|ordered
operator|.
name|set
argument_list|(
name|ordered
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|ordered
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ordered
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
comment|// no need to worry about primary first here..., its temporal
if|if
condition|(
operator|!
name|allInitializingShards
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ordered
operator|.
name|addAll
argument_list|(
name|allInitializingShards
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PlainShardIterator
argument_list|(
name|shardId
argument_list|,
name|ordered
argument_list|)
return|;
block|}
DECL|method|replicaActiveInitializingShardIt
specifier|public
name|ShardIterator
name|replicaActiveInitializingShardIt
parameter_list|()
block|{
comment|// If the primaries are unassigned, return an empty list (there aren't
comment|// any replicas to query anyway)
if|if
condition|(
name|noPrimariesActive
argument_list|()
condition|)
block|{
return|return
operator|new
name|PlainShardIterator
argument_list|(
name|shardId
argument_list|,
name|NO_SHARDS
argument_list|)
return|;
block|}
name|LinkedList
argument_list|<
name|ShardRouting
argument_list|>
name|ordered
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|replica
range|:
name|shuffler
operator|.
name|shuffle
argument_list|(
name|replicas
argument_list|)
control|)
block|{
if|if
condition|(
name|replica
operator|.
name|active
argument_list|()
condition|)
block|{
name|ordered
operator|.
name|addFirst
argument_list|(
name|replica
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|replica
operator|.
name|initializing
argument_list|()
condition|)
block|{
name|ordered
operator|.
name|addLast
argument_list|(
name|replica
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|PlainShardIterator
argument_list|(
name|shardId
argument_list|,
name|ordered
argument_list|)
return|;
block|}
DECL|method|replicaFirstActiveInitializingShardsIt
specifier|public
name|ShardIterator
name|replicaFirstActiveInitializingShardsIt
parameter_list|()
block|{
comment|// If the primaries are unassigned, return an empty list (there aren't
comment|// any replicas to query anyway)
if|if
condition|(
name|noPrimariesActive
argument_list|()
condition|)
block|{
return|return
operator|new
name|PlainShardIterator
argument_list|(
name|shardId
argument_list|,
name|NO_SHARDS
argument_list|)
return|;
block|}
name|ArrayList
argument_list|<
name|ShardRouting
argument_list|>
name|ordered
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|activeShards
operator|.
name|size
argument_list|()
operator|+
name|allInitializingShards
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// fill it in a randomized fashion with the active replicas
for|for
control|(
name|ShardRouting
name|replica
range|:
name|shuffler
operator|.
name|shuffle
argument_list|(
name|replicas
argument_list|)
control|)
block|{
if|if
condition|(
name|replica
operator|.
name|active
argument_list|()
condition|)
block|{
name|ordered
operator|.
name|add
argument_list|(
name|replica
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add the primary shard
name|ordered
operator|.
name|add
argument_list|(
name|primary
argument_list|)
expr_stmt|;
comment|// Add initializing shards last
if|if
condition|(
operator|!
name|allInitializingShards
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ordered
operator|.
name|addAll
argument_list|(
name|allInitializingShards
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PlainShardIterator
argument_list|(
name|shardId
argument_list|,
name|ordered
argument_list|)
return|;
block|}
DECL|method|onlyNodeActiveInitializingShardsIt
specifier|public
name|ShardIterator
name|onlyNodeActiveInitializingShardsIt
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ShardRouting
argument_list|>
name|ordered
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|activeShards
operator|.
name|size
argument_list|()
operator|+
name|allInitializingShards
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// fill it in a randomized fashion
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|activeShards
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ShardRouting
name|shardRouting
init|=
name|activeShards
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeId
operator|.
name|equals
argument_list|(
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|ordered
operator|.
name|add
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allInitializingShards
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ShardRouting
name|shardRouting
init|=
name|allInitializingShards
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeId
operator|.
name|equals
argument_list|(
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|ordered
operator|.
name|add
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|PlainShardIterator
argument_list|(
name|shardId
argument_list|,
name|ordered
argument_list|)
return|;
block|}
comment|/**      * Returns shards based on nodeAttributes given  such as node name , node attribute, node IP      * Supports node specifications in cluster API      */
DECL|method|onlyNodeSelectorActiveInitializingShardsIt
specifier|public
name|ShardIterator
name|onlyNodeSelectorActiveInitializingShardsIt
parameter_list|(
name|String
name|nodeAttribute
parameter_list|,
name|DiscoveryNodes
name|discoveryNodes
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ShardRouting
argument_list|>
name|ordered
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|activeShards
operator|.
name|size
argument_list|()
operator|+
name|allInitializingShards
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|selectedNodes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|discoveryNodes
operator|.
name|resolveNodesIds
argument_list|(
name|nodeAttribute
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|activeShards
control|)
block|{
if|if
condition|(
name|selectedNodes
operator|.
name|contains
argument_list|(
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|ordered
operator|.
name|add
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|allInitializingShards
control|)
block|{
if|if
condition|(
name|selectedNodes
operator|.
name|contains
argument_list|(
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|ordered
operator|.
name|add
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ordered
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No data node with criteria ["
operator|+
name|nodeAttribute
operator|+
literal|"] found"
argument_list|)
throw|;
block|}
return|return
operator|new
name|PlainShardIterator
argument_list|(
name|shardId
argument_list|,
name|ordered
argument_list|)
return|;
block|}
DECL|method|preferNodeActiveInitializingShardsIt
specifier|public
name|ShardIterator
name|preferNodeActiveInitializingShardsIt
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ShardRouting
argument_list|>
name|ordered
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|activeShards
operator|.
name|size
argument_list|()
operator|+
name|allInitializingShards
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// fill it in a randomized fashion
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|shuffler
operator|.
name|shuffle
argument_list|(
name|activeShards
argument_list|)
control|)
block|{
name|ordered
operator|.
name|add
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeId
operator|.
name|equals
argument_list|(
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|)
condition|)
block|{
comment|// switch, its the matching node id
name|ordered
operator|.
name|set
argument_list|(
name|ordered
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|ordered
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ordered
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|allInitializingShards
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ordered
operator|.
name|addAll
argument_list|(
name|allInitializingShards
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PlainShardIterator
argument_list|(
name|shardId
argument_list|,
name|ordered
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|IndexShardRoutingTable
name|that
init|=
operator|(
name|IndexShardRoutingTable
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|shardId
operator|.
name|equals
argument_list|(
name|that
operator|.
name|shardId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|shards
operator|.
name|equals
argument_list|(
name|that
operator|.
name|shards
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|shardId
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|shards
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Returns<code>true</code> iff all shards in the routing table are started otherwise<code>false</code>      */
DECL|method|allShardsStarted
specifier|public
name|boolean
name|allShardsStarted
parameter_list|()
block|{
return|return
name|allShardsStarted
return|;
block|}
DECL|class|AttributesKey
specifier|static
class|class
name|AttributesKey
block|{
DECL|field|attributes
specifier|final
name|String
index|[]
name|attributes
decl_stmt|;
DECL|method|AttributesKey
name|AttributesKey
parameter_list|(
name|String
index|[]
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|attributes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|attributes
argument_list|,
operator|(
operator|(
name|AttributesKey
operator|)
name|obj
operator|)
operator|.
name|attributes
argument_list|)
return|;
block|}
block|}
DECL|class|AttributesRoutings
specifier|static
class|class
name|AttributesRoutings
block|{
DECL|field|withSameAttribute
specifier|public
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|withSameAttribute
decl_stmt|;
DECL|field|withoutSameAttribute
specifier|public
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|withoutSameAttribute
decl_stmt|;
DECL|field|totalSize
specifier|public
specifier|final
name|int
name|totalSize
decl_stmt|;
DECL|method|AttributesRoutings
name|AttributesRoutings
parameter_list|(
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|withSameAttribute
parameter_list|,
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|withoutSameAttribute
parameter_list|)
block|{
name|this
operator|.
name|withSameAttribute
operator|=
name|withSameAttribute
expr_stmt|;
name|this
operator|.
name|withoutSameAttribute
operator|=
name|withoutSameAttribute
expr_stmt|;
name|this
operator|.
name|totalSize
operator|=
name|withoutSameAttribute
operator|.
name|size
argument_list|()
operator|+
name|withSameAttribute
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getActiveAttribute
specifier|private
name|AttributesRoutings
name|getActiveAttribute
parameter_list|(
name|AttributesKey
name|key
parameter_list|,
name|DiscoveryNodes
name|nodes
parameter_list|)
block|{
name|AttributesRoutings
name|shardRoutings
init|=
name|activeShardsByAttributes
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardRoutings
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|shardsByAttributeMutex
init|)
block|{
name|ArrayList
argument_list|<
name|ShardRouting
argument_list|>
name|from
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|activeShards
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|to
init|=
name|collectAttributeShards
argument_list|(
name|key
argument_list|,
name|nodes
argument_list|,
name|from
argument_list|)
decl_stmt|;
name|shardRoutings
operator|=
operator|new
name|AttributesRoutings
argument_list|(
name|to
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|from
argument_list|)
argument_list|)
expr_stmt|;
name|activeShardsByAttributes
operator|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|(
name|activeShardsByAttributes
argument_list|)
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|shardRoutings
argument_list|)
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|shardRoutings
return|;
block|}
DECL|method|getInitializingAttribute
specifier|private
name|AttributesRoutings
name|getInitializingAttribute
parameter_list|(
name|AttributesKey
name|key
parameter_list|,
name|DiscoveryNodes
name|nodes
parameter_list|)
block|{
name|AttributesRoutings
name|shardRoutings
init|=
name|initializingShardsByAttributes
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardRoutings
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|shardsByAttributeMutex
init|)
block|{
name|ArrayList
argument_list|<
name|ShardRouting
argument_list|>
name|from
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|allInitializingShards
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|to
init|=
name|collectAttributeShards
argument_list|(
name|key
argument_list|,
name|nodes
argument_list|,
name|from
argument_list|)
decl_stmt|;
name|shardRoutings
operator|=
operator|new
name|AttributesRoutings
argument_list|(
name|to
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|from
argument_list|)
argument_list|)
expr_stmt|;
name|initializingShardsByAttributes
operator|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|(
name|initializingShardsByAttributes
argument_list|)
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|shardRoutings
argument_list|)
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|shardRoutings
return|;
block|}
DECL|method|collectAttributeShards
specifier|private
specifier|static
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|collectAttributeShards
parameter_list|(
name|AttributesKey
name|key
parameter_list|,
name|DiscoveryNodes
name|nodes
parameter_list|,
name|ArrayList
argument_list|<
name|ShardRouting
argument_list|>
name|from
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|ShardRouting
argument_list|>
name|to
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|attribute
range|:
name|key
operator|.
name|attributes
control|)
block|{
specifier|final
name|String
name|localAttributeValue
init|=
name|nodes
operator|.
name|localNode
argument_list|()
operator|.
name|attributes
argument_list|()
operator|.
name|get
argument_list|(
name|attribute
argument_list|)
decl_stmt|;
if|if
condition|(
name|localAttributeValue
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ShardRouting
argument_list|>
name|iterator
init|=
name|from
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ShardRouting
name|fromShard
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|DiscoveryNode
name|discoveryNode
init|=
name|nodes
operator|.
name|get
argument_list|(
name|fromShard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|discoveryNode
operator|==
literal|null
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// node is not present anymore - ignore shard
block|}
elseif|else
if|if
condition|(
name|localAttributeValue
operator|.
name|equals
argument_list|(
name|discoveryNode
operator|.
name|attributes
argument_list|()
operator|.
name|get
argument_list|(
name|attribute
argument_list|)
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|to
operator|.
name|add
argument_list|(
name|fromShard
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|to
argument_list|)
return|;
block|}
DECL|method|preferAttributesActiveInitializingShardsIt
specifier|public
name|ShardIterator
name|preferAttributesActiveInitializingShardsIt
parameter_list|(
name|String
index|[]
name|attributes
parameter_list|,
name|DiscoveryNodes
name|nodes
parameter_list|)
block|{
return|return
name|preferAttributesActiveInitializingShardsIt
argument_list|(
name|attributes
argument_list|,
name|nodes
argument_list|,
name|shuffler
operator|.
name|nextSeed
argument_list|()
argument_list|)
return|;
block|}
DECL|method|preferAttributesActiveInitializingShardsIt
specifier|public
name|ShardIterator
name|preferAttributesActiveInitializingShardsIt
parameter_list|(
name|String
index|[]
name|attributes
parameter_list|,
name|DiscoveryNodes
name|nodes
parameter_list|,
name|int
name|seed
parameter_list|)
block|{
name|AttributesKey
name|key
init|=
operator|new
name|AttributesKey
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
name|AttributesRoutings
name|activeRoutings
init|=
name|getActiveAttribute
argument_list|(
name|key
argument_list|,
name|nodes
argument_list|)
decl_stmt|;
name|AttributesRoutings
name|initializingRoutings
init|=
name|getInitializingAttribute
argument_list|(
name|key
argument_list|,
name|nodes
argument_list|)
decl_stmt|;
comment|// we now randomize, once between the ones that have the same attributes, and once for the ones that don't
comment|// we don't want to mix between the two!
name|ArrayList
argument_list|<
name|ShardRouting
argument_list|>
name|ordered
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|activeRoutings
operator|.
name|totalSize
operator|+
name|initializingRoutings
operator|.
name|totalSize
argument_list|)
decl_stmt|;
name|ordered
operator|.
name|addAll
argument_list|(
name|shuffler
operator|.
name|shuffle
argument_list|(
name|activeRoutings
operator|.
name|withSameAttribute
argument_list|,
name|seed
argument_list|)
argument_list|)
expr_stmt|;
name|ordered
operator|.
name|addAll
argument_list|(
name|shuffler
operator|.
name|shuffle
argument_list|(
name|activeRoutings
operator|.
name|withoutSameAttribute
argument_list|,
name|seed
argument_list|)
argument_list|)
expr_stmt|;
name|ordered
operator|.
name|addAll
argument_list|(
name|shuffler
operator|.
name|shuffle
argument_list|(
name|initializingRoutings
operator|.
name|withSameAttribute
argument_list|,
name|seed
argument_list|)
argument_list|)
expr_stmt|;
name|ordered
operator|.
name|addAll
argument_list|(
name|shuffler
operator|.
name|shuffle
argument_list|(
name|initializingRoutings
operator|.
name|withoutSameAttribute
argument_list|,
name|seed
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|PlainShardIterator
argument_list|(
name|shardId
argument_list|,
name|ordered
argument_list|)
return|;
block|}
DECL|method|primaryShard
specifier|public
name|ShardRouting
name|primaryShard
parameter_list|()
block|{
return|return
name|primary
return|;
block|}
DECL|method|replicaShards
specifier|public
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|replicaShards
parameter_list|()
block|{
return|return
name|this
operator|.
name|replicas
return|;
block|}
DECL|method|replicaShardsWithState
specifier|public
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|replicaShardsWithState
parameter_list|(
name|ShardRoutingState
modifier|...
name|states
parameter_list|)
block|{
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardEntry
range|:
name|replicas
control|)
block|{
for|for
control|(
name|ShardRoutingState
name|state
range|:
name|states
control|)
block|{
if|if
condition|(
name|shardEntry
operator|.
name|state
argument_list|()
operator|==
name|state
condition|)
block|{
name|shards
operator|.
name|add
argument_list|(
name|shardEntry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|shards
return|;
block|}
DECL|method|shardsWithState
specifier|public
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shardsWithState
parameter_list|(
name|ShardRoutingState
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
name|ShardRoutingState
operator|.
name|INITIALIZING
condition|)
block|{
return|return
name|allInitializingShards
return|;
block|}
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardEntry
range|:
name|this
control|)
block|{
if|if
condition|(
name|shardEntry
operator|.
name|state
argument_list|()
operator|==
name|state
condition|)
block|{
name|shards
operator|.
name|add
argument_list|(
name|shardEntry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|shards
return|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|shardId
specifier|private
name|ShardId
name|shardId
decl_stmt|;
DECL|field|shards
specifier|private
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|IndexShardRoutingTable
name|indexShard
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|indexShard
operator|.
name|shardId
expr_stmt|;
name|this
operator|.
name|shards
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|indexShard
operator|.
name|shards
argument_list|)
expr_stmt|;
block|}
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|shards
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|addShard
specifier|public
name|Builder
name|addShard
parameter_list|(
name|ShardRouting
name|shardEntry
parameter_list|)
block|{
for|for
control|(
name|ShardRouting
name|shard
range|:
name|shards
control|)
block|{
comment|// don't add two that map to the same node id
comment|// we rely on the fact that a node does not have primary and backup of the same shard
if|if
condition|(
name|shard
operator|.
name|assignedToNode
argument_list|()
operator|&&
name|shardEntry
operator|.
name|assignedToNode
argument_list|()
operator|&&
name|shard
operator|.
name|currentNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|shardEntry
operator|.
name|currentNodeId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
block|}
name|shards
operator|.
name|add
argument_list|(
name|shardEntry
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|removeShard
specifier|public
name|Builder
name|removeShard
parameter_list|(
name|ShardRouting
name|shardEntry
parameter_list|)
block|{
name|shards
operator|.
name|remove
argument_list|(
name|shardEntry
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build
specifier|public
name|IndexShardRoutingTable
name|build
parameter_list|()
block|{
return|return
operator|new
name|IndexShardRoutingTable
argument_list|(
name|shardId
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|shards
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|readFrom
specifier|public
specifier|static
name|IndexShardRoutingTable
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Index
name|index
init|=
name|Index
operator|.
name|readIndex
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
name|readFromThin
argument_list|(
name|in
argument_list|,
name|index
argument_list|)
return|;
block|}
DECL|method|readFromThin
specifier|public
specifier|static
name|IndexShardRoutingTable
name|readFromThin
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|Index
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|iShardId
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
name|iShardId
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ShardRouting
name|shard
init|=
name|ShardRouting
operator|.
name|readShardRoutingEntry
argument_list|(
name|in
argument_list|,
name|index
argument_list|,
name|iShardId
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addShard
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|writeTo
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|IndexShardRoutingTable
name|indexShard
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|indexShard
operator|.
name|shardId
argument_list|()
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|writeToThin
argument_list|(
name|indexShard
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|writeToThin
specifier|public
specifier|static
name|void
name|writeToThin
parameter_list|(
name|IndexShardRoutingTable
name|indexShard
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|indexShard
operator|.
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|indexShard
operator|.
name|shards
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardRouting
name|entry
range|:
name|indexShard
control|)
block|{
name|entry
operator|.
name|writeToThin
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

