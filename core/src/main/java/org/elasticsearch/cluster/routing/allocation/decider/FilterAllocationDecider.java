begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation.decider
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodeFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|settings
operator|.
name|NodeSettingsService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodeFilters
operator|.
name|OpType
operator|.
name|AND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodeFilters
operator|.
name|OpType
operator|.
name|OR
import|;
end_import

begin_comment
comment|/**  * This {@link AllocationDecider} control shard allocation by include and  * exclude filters via dynamic cluster and index routing settings.  *<p>  * This filter is used to make explicit decision on which nodes certain shard  * can / should be allocated. The decision if a shard can be allocated, must not  * be allocated or should be allocated is based on either cluster wide dynamic  * settings (<tt>cluster.routing.allocation.*</tt>) or index specific dynamic  * settings (<tt>index.routing.allocation.*</tt>). All of those settings can be  * changed at runtime via the cluster or the index update settings API.  *</p>  * Note: Cluster settings are applied first and will override index specific  * settings such that if a shard can be allocated according to the index routing  * settings it wont be allocated on a node if the cluster specific settings  * would disallow the allocation. Filters are applied in the following order:  *<ol>  *<li><tt>required</tt> - filters required allocations.  * If any<tt>required</tt> filters are set the allocation is denied if the index is<b>not</b> in the set of<tt>required</tt> to allocate on the filtered node</li>  *<p/>  *<li><tt>include</tt> - filters "allowed" allocations.  * If any<tt>include</tt> filters are set the allocation is denied if the index is<b>not</b> in the set of<tt>include</tt> filters for the filtered node</li>  *<p/>  *<li><tt>exclude</tt> - filters "prohibited" allocations.  * If any<tt>exclude</tt> filters are set the allocation is denied if the index is in the set of<tt>exclude</tt> filters for the filtered node</li>  *</ol>  */
end_comment

begin_class
DECL|class|FilterAllocationDecider
specifier|public
class|class
name|FilterAllocationDecider
extends|extends
name|AllocationDecider
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"filter"
decl_stmt|;
DECL|field|INDEX_ROUTING_REQUIRE_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_ROUTING_REQUIRE_GROUP
init|=
literal|"index.routing.allocation.require."
decl_stmt|;
DECL|field|INDEX_ROUTING_INCLUDE_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_ROUTING_INCLUDE_GROUP
init|=
literal|"index.routing.allocation.include."
decl_stmt|;
DECL|field|INDEX_ROUTING_EXCLUDE_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_ROUTING_EXCLUDE_GROUP
init|=
literal|"index.routing.allocation.exclude."
decl_stmt|;
DECL|field|CLUSTER_ROUTING_REQUIRE_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER_ROUTING_REQUIRE_GROUP
init|=
literal|"cluster.routing.allocation.require."
decl_stmt|;
DECL|field|CLUSTER_ROUTING_INCLUDE_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER_ROUTING_INCLUDE_GROUP
init|=
literal|"cluster.routing.allocation.include."
decl_stmt|;
DECL|field|CLUSTER_ROUTING_EXCLUDE_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER_ROUTING_EXCLUDE_GROUP
init|=
literal|"cluster.routing.allocation.exclude."
decl_stmt|;
DECL|field|clusterRequireFilters
specifier|private
specifier|volatile
name|DiscoveryNodeFilters
name|clusterRequireFilters
decl_stmt|;
DECL|field|clusterIncludeFilters
specifier|private
specifier|volatile
name|DiscoveryNodeFilters
name|clusterIncludeFilters
decl_stmt|;
DECL|field|clusterExcludeFilters
specifier|private
specifier|volatile
name|DiscoveryNodeFilters
name|clusterExcludeFilters
decl_stmt|;
annotation|@
name|Inject
DECL|method|FilterAllocationDecider
specifier|public
name|FilterAllocationDecider
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|NodeSettingsService
name|nodeSettingsService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requireMap
init|=
name|settings
operator|.
name|getByPrefix
argument_list|(
name|CLUSTER_ROUTING_REQUIRE_GROUP
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|requireMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clusterRequireFilters
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|clusterRequireFilters
operator|=
name|DiscoveryNodeFilters
operator|.
name|buildFromKeyValue
argument_list|(
name|AND
argument_list|,
name|requireMap
argument_list|)
expr_stmt|;
block|}
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|includeMap
init|=
name|settings
operator|.
name|getByPrefix
argument_list|(
name|CLUSTER_ROUTING_INCLUDE_GROUP
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clusterIncludeFilters
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|clusterIncludeFilters
operator|=
name|DiscoveryNodeFilters
operator|.
name|buildFromKeyValue
argument_list|(
name|OR
argument_list|,
name|includeMap
argument_list|)
expr_stmt|;
block|}
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|excludeMap
init|=
name|settings
operator|.
name|getByPrefix
argument_list|(
name|CLUSTER_ROUTING_EXCLUDE_GROUP
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludeMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clusterExcludeFilters
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|clusterExcludeFilters
operator|=
name|DiscoveryNodeFilters
operator|.
name|buildFromKeyValue
argument_list|(
name|OR
argument_list|,
name|excludeMap
argument_list|)
expr_stmt|;
block|}
name|nodeSettingsService
operator|.
name|addListener
argument_list|(
operator|new
name|ApplySettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|canAllocate
specifier|public
name|Decision
name|canAllocate
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingNode
name|node
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
return|return
name|shouldFilter
argument_list|(
name|shardRouting
argument_list|,
name|node
argument_list|,
name|allocation
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|canRemain
specifier|public
name|Decision
name|canRemain
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingNode
name|node
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
return|return
name|shouldFilter
argument_list|(
name|shardRouting
argument_list|,
name|node
argument_list|,
name|allocation
argument_list|)
return|;
block|}
DECL|method|shouldFilter
specifier|private
name|Decision
name|shouldFilter
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingNode
name|node
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
if|if
condition|(
name|clusterRequireFilters
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|clusterRequireFilters
operator|.
name|match
argument_list|(
name|node
operator|.
name|node
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|allocation
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|NAME
argument_list|,
literal|"node does not match global required filters [%s]"
argument_list|,
name|clusterRequireFilters
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|clusterIncludeFilters
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|clusterIncludeFilters
operator|.
name|match
argument_list|(
name|node
operator|.
name|node
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|allocation
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|NAME
argument_list|,
literal|"node does not match global include filters [%s]"
argument_list|,
name|clusterIncludeFilters
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|clusterExcludeFilters
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|clusterExcludeFilters
operator|.
name|match
argument_list|(
name|node
operator|.
name|node
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|allocation
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|NAME
argument_list|,
literal|"node matches global exclude filters [%s]"
argument_list|,
name|clusterExcludeFilters
argument_list|)
return|;
block|}
block|}
name|IndexMetaData
name|indexMd
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|shardRouting
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMd
operator|.
name|requireFilters
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|indexMd
operator|.
name|requireFilters
argument_list|()
operator|.
name|match
argument_list|(
name|node
operator|.
name|node
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|allocation
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|NAME
argument_list|,
literal|"node does not match index required filters [%s]"
argument_list|,
name|indexMd
operator|.
name|requireFilters
argument_list|()
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|indexMd
operator|.
name|includeFilters
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|indexMd
operator|.
name|includeFilters
argument_list|()
operator|.
name|match
argument_list|(
name|node
operator|.
name|node
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|allocation
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|NAME
argument_list|,
literal|"node does not match index include filters [%s]"
argument_list|,
name|indexMd
operator|.
name|includeFilters
argument_list|()
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|indexMd
operator|.
name|excludeFilters
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|indexMd
operator|.
name|excludeFilters
argument_list|()
operator|.
name|match
argument_list|(
name|node
operator|.
name|node
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|allocation
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|NAME
argument_list|,
literal|"node matches index exclude filters [%s]"
argument_list|,
name|indexMd
operator|.
name|excludeFilters
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|allocation
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|YES
argument_list|,
name|NAME
argument_list|,
literal|"node passes include/exclude/require filters"
argument_list|)
return|;
block|}
DECL|class|ApplySettings
class|class
name|ApplySettings
implements|implements
name|NodeSettingsService
operator|.
name|Listener
block|{
annotation|@
name|Override
DECL|method|onRefreshSettings
specifier|public
name|void
name|onRefreshSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requireMap
init|=
name|settings
operator|.
name|getByPrefix
argument_list|(
name|CLUSTER_ROUTING_REQUIRE_GROUP
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|requireMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clusterRequireFilters
operator|=
name|DiscoveryNodeFilters
operator|.
name|buildFromKeyValue
argument_list|(
name|AND
argument_list|,
name|requireMap
argument_list|)
expr_stmt|;
block|}
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|includeMap
init|=
name|settings
operator|.
name|getByPrefix
argument_list|(
name|CLUSTER_ROUTING_INCLUDE_GROUP
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clusterIncludeFilters
operator|=
name|DiscoveryNodeFilters
operator|.
name|buildFromKeyValue
argument_list|(
name|OR
argument_list|,
name|includeMap
argument_list|)
expr_stmt|;
block|}
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|excludeMap
init|=
name|settings
operator|.
name|getByPrefix
argument_list|(
name|CLUSTER_ROUTING_EXCLUDE_GROUP
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|excludeMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clusterExcludeFilters
operator|=
name|DiscoveryNodeFilters
operator|.
name|buildFromKeyValue
argument_list|(
name|OR
argument_list|,
name|excludeMap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

