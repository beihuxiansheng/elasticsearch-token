begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A simple {@link ShardsIterator} that iterates a list or sub-list of  * {@link ShardRouting shard routings}.  */
end_comment

begin_class
DECL|class|PlainShardsIterator
specifier|public
class|class
name|PlainShardsIterator
implements|implements
name|ShardsIterator
block|{
DECL|field|shards
specifier|private
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
decl_stmt|;
comment|// Calls to nextOrNull might be performed on different threads in the transport actions so we need the volatile
comment|// keyword in order to ensure visibility. Note that it is fine to use `volatile` for a counter in that case given
comment|// that although nextOrNull might be called from different threads, it can never happen concurrently.
DECL|field|index
specifier|private
specifier|volatile
name|int
name|index
decl_stmt|;
DECL|method|PlainShardsIterator
specifier|public
name|PlainShardsIterator
parameter_list|(
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
parameter_list|)
block|{
name|this
operator|.
name|shards
operator|=
name|shards
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|index
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remaining
specifier|public
name|int
name|remaining
parameter_list|()
block|{
return|return
name|shards
operator|.
name|size
argument_list|()
operator|-
name|index
return|;
block|}
annotation|@
name|Override
DECL|method|nextOrNull
specifier|public
name|ShardRouting
name|nextOrNull
parameter_list|()
block|{
if|if
condition|(
name|index
operator|==
name|shards
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|shards
operator|.
name|get
argument_list|(
name|index
operator|++
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|shards
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|sizeActive
specifier|public
name|int
name|sizeActive
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shard
range|:
name|shards
control|)
block|{
if|if
condition|(
name|shard
operator|.
name|active
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
DECL|method|getShardRoutings
specifier|public
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|getShardRoutings
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|shards
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|ShardRouting
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|shards
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
end_class

end_unit

