begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A class representing a failed shard.  */
end_comment

begin_class
DECL|class|FailedShard
specifier|public
class|class
name|FailedShard
block|{
DECL|field|routingEntry
specifier|private
specifier|final
name|ShardRouting
name|routingEntry
decl_stmt|;
DECL|field|message
specifier|private
specifier|final
name|String
name|message
decl_stmt|;
DECL|field|failure
specifier|private
specifier|final
name|Exception
name|failure
decl_stmt|;
DECL|method|FailedShard
specifier|public
name|FailedShard
parameter_list|(
name|ShardRouting
name|routingEntry
parameter_list|,
name|String
name|message
parameter_list|,
name|Exception
name|failure
parameter_list|)
block|{
assert|assert
name|routingEntry
operator|.
name|assignedToNode
argument_list|()
operator|:
literal|"only assigned shards can be failed "
operator|+
name|routingEntry
assert|;
name|this
operator|.
name|routingEntry
operator|=
name|routingEntry
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|failure
operator|=
name|failure
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"failed shard, shard "
operator|+
name|routingEntry
operator|+
literal|", message ["
operator|+
name|message
operator|+
literal|"], failure ["
operator|+
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|failure
argument_list|)
operator|+
literal|"]"
return|;
block|}
comment|/**      * The shard routing entry for the failed shard.      */
DECL|method|getRoutingEntry
specifier|public
name|ShardRouting
name|getRoutingEntry
parameter_list|()
block|{
return|return
name|routingEntry
return|;
block|}
comment|/**      * The failure message, if available, explaining why the shard failed.      */
annotation|@
name|Nullable
DECL|method|getMessage
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
comment|/**      * The exception, if present, causing the shard to fail.      */
annotation|@
name|Nullable
DECL|method|getFailure
specifier|public
name|Exception
name|getFailure
parameter_list|()
block|{
return|return
name|failure
return|;
block|}
block|}
end_class

end_unit

