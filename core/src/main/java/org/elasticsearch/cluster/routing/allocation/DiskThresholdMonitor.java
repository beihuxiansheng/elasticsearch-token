begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectLookupContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|DiskUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Listens for a node to go over the high watermark and kicks off an empty  * reroute if it does. Also responsible for logging about nodes that have  * passed the disk watermarks  */
end_comment

begin_class
DECL|class|DiskThresholdMonitor
specifier|public
class|class
name|DiskThresholdMonitor
extends|extends
name|AbstractComponent
implements|implements
name|ClusterInfoService
operator|.
name|Listener
block|{
DECL|field|diskThresholdSettings
specifier|private
specifier|final
name|DiskThresholdSettings
name|diskThresholdSettings
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|Client
name|client
decl_stmt|;
DECL|field|nodeHasPassedWatermark
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|nodeHasPassedWatermark
init|=
name|Sets
operator|.
name|newConcurrentHashSet
argument_list|()
decl_stmt|;
DECL|field|lastRunNS
specifier|private
name|long
name|lastRunNS
decl_stmt|;
comment|// TODO: remove injection when ClusterInfoService is not injected
annotation|@
name|Inject
DECL|method|DiskThresholdMonitor
specifier|public
name|DiskThresholdMonitor
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterSettings
name|clusterSettings
parameter_list|,
name|ClusterInfoService
name|infoService
parameter_list|,
name|Client
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|diskThresholdSettings
operator|=
operator|new
name|DiskThresholdSettings
argument_list|(
name|settings
argument_list|,
name|clusterSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|infoService
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Warn about the given disk usage if the low or high watermark has been passed      */
DECL|method|warnAboutDiskIfNeeded
specifier|private
name|void
name|warnAboutDiskIfNeeded
parameter_list|(
name|DiskUsage
name|usage
parameter_list|)
block|{
comment|// Check absolute disk values
if|if
condition|(
name|usage
operator|.
name|getFreeBytes
argument_list|()
operator|<
name|diskThresholdSettings
operator|.
name|getFreeBytesThresholdHigh
argument_list|()
operator|.
name|bytes
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"high disk watermark [{}] exceeded on {}, shards will be relocated away from this node"
argument_list|,
name|diskThresholdSettings
operator|.
name|getFreeBytesThresholdHigh
argument_list|()
argument_list|,
name|usage
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|usage
operator|.
name|getFreeBytes
argument_list|()
operator|<
name|diskThresholdSettings
operator|.
name|getFreeBytesThresholdLow
argument_list|()
operator|.
name|bytes
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"low disk watermark [{}] exceeded on {}, replicas will not be assigned to this node"
argument_list|,
name|diskThresholdSettings
operator|.
name|getFreeBytesThresholdLow
argument_list|()
argument_list|,
name|usage
argument_list|)
expr_stmt|;
block|}
comment|// Check percentage disk values
if|if
condition|(
name|usage
operator|.
name|getFreeDiskAsPercentage
argument_list|()
operator|<
name|diskThresholdSettings
operator|.
name|getFreeDiskThresholdHigh
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"high disk watermark [{}] exceeded on {}, shards will be relocated away from this node"
argument_list|,
name|Strings
operator|.
name|format1Decimals
argument_list|(
literal|100.0
operator|-
name|diskThresholdSettings
operator|.
name|getFreeDiskThresholdHigh
argument_list|()
argument_list|,
literal|"%"
argument_list|)
argument_list|,
name|usage
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|usage
operator|.
name|getFreeDiskAsPercentage
argument_list|()
operator|<
name|diskThresholdSettings
operator|.
name|getFreeDiskThresholdLow
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"low disk watermark [{}] exceeded on {}, replicas will not be assigned to this node"
argument_list|,
name|Strings
operator|.
name|format1Decimals
argument_list|(
literal|100.0
operator|-
name|diskThresholdSettings
operator|.
name|getFreeDiskThresholdLow
argument_list|()
argument_list|,
literal|"%"
argument_list|)
argument_list|,
name|usage
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onNewInfo
specifier|public
name|void
name|onNewInfo
parameter_list|(
name|ClusterInfo
name|info
parameter_list|)
block|{
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usages
init|=
name|info
operator|.
name|getNodeLeastAvailableDiskUsages
argument_list|()
decl_stmt|;
if|if
condition|(
name|usages
operator|!=
literal|null
condition|)
block|{
name|boolean
name|reroute
init|=
literal|false
decl_stmt|;
name|String
name|explanation
init|=
literal|""
decl_stmt|;
comment|// Garbage collect nodes that have been removed from the cluster
comment|// from the map that tracks watermark crossing
name|ObjectLookupContainer
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|usages
operator|.
name|keys
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodeHasPassedWatermark
control|)
block|{
if|if
condition|(
name|nodes
operator|.
name|contains
argument_list|(
name|node
argument_list|)
operator|==
literal|false
condition|)
block|{
name|nodeHasPassedWatermark
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|entry
range|:
name|usages
control|)
block|{
name|String
name|node
init|=
name|entry
operator|.
name|key
decl_stmt|;
name|DiskUsage
name|usage
init|=
name|entry
operator|.
name|value
decl_stmt|;
name|warnAboutDiskIfNeeded
argument_list|(
name|usage
argument_list|)
expr_stmt|;
if|if
condition|(
name|usage
operator|.
name|getFreeBytes
argument_list|()
operator|<
name|diskThresholdSettings
operator|.
name|getFreeBytesThresholdHigh
argument_list|()
operator|.
name|bytes
argument_list|()
operator|||
name|usage
operator|.
name|getFreeDiskAsPercentage
argument_list|()
operator|<
name|diskThresholdSettings
operator|.
name|getFreeDiskThresholdHigh
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|lastRunNS
operator|)
operator|>
name|diskThresholdSettings
operator|.
name|getRerouteInterval
argument_list|()
operator|.
name|nanos
argument_list|()
condition|)
block|{
name|lastRunNS
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|reroute
operator|=
literal|true
expr_stmt|;
name|explanation
operator|=
literal|"high disk watermark exceeded on one or more nodes"
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"high disk watermark exceeded on {} but an automatic reroute has occurred "
operator|+
literal|"in the last [{}], skipping reroute"
argument_list|,
name|node
argument_list|,
name|diskThresholdSettings
operator|.
name|getRerouteInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|nodeHasPassedWatermark
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|usage
operator|.
name|getFreeBytes
argument_list|()
operator|<
name|diskThresholdSettings
operator|.
name|getFreeBytesThresholdLow
argument_list|()
operator|.
name|bytes
argument_list|()
operator|||
name|usage
operator|.
name|getFreeDiskAsPercentage
argument_list|()
operator|<
name|diskThresholdSettings
operator|.
name|getFreeDiskThresholdLow
argument_list|()
condition|)
block|{
name|nodeHasPassedWatermark
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|nodeHasPassedWatermark
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
block|{
comment|// The node has previously been over the high or
comment|// low watermark, but is no longer, so we should
comment|// reroute so any unassigned shards can be allocated
comment|// if they are able to be
if|if
condition|(
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|lastRunNS
operator|)
operator|>
name|diskThresholdSettings
operator|.
name|getRerouteInterval
argument_list|()
operator|.
name|nanos
argument_list|()
condition|)
block|{
name|lastRunNS
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|reroute
operator|=
literal|true
expr_stmt|;
name|explanation
operator|=
literal|"one or more nodes has gone under the high or low watermark"
expr_stmt|;
name|nodeHasPassedWatermark
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} has gone below a disk threshold, but an automatic reroute has occurred "
operator|+
literal|"in the last [{}], skipping reroute"
argument_list|,
name|node
argument_list|,
name|diskThresholdSettings
operator|.
name|getRerouteInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|reroute
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"rerouting shards: [{}]"
argument_list|,
name|explanation
argument_list|)
expr_stmt|;
comment|// Execute an empty reroute, but don't block on the response
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

