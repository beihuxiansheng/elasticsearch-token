begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * A {@link RoutingService} listens to clusters state. When this service  * receives a {@link ClusterChangedEvent} the cluster state will be verified and  * the routing tables might be updated.  *<p>  * Note: The {@link RoutingService} is responsible for cluster wide operations  * that include modifications to the cluster state. Such an operation can only  * be performed on the clusters master node. Unless the local node this service  * is running on is the clusters master node this service will not perform any  * actions.  *</p>  */
end_comment

begin_class
DECL|class|RoutingService
specifier|public
class|class
name|RoutingService
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|RoutingService
argument_list|>
implements|implements
name|ClusterStateListener
block|{
DECL|field|CLUSTER_UPDATE_TASK_SOURCE
specifier|private
specifier|static
specifier|final
name|String
name|CLUSTER_UPDATE_TASK_SOURCE
init|=
literal|"cluster_reroute"
decl_stmt|;
DECL|field|threadPool
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|allocationService
specifier|private
specifier|final
name|AllocationService
name|allocationService
decl_stmt|;
DECL|field|rerouting
specifier|private
name|AtomicBoolean
name|rerouting
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|registeredNextDelaySetting
specifier|private
specifier|volatile
name|long
name|registeredNextDelaySetting
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|registeredNextDelayFuture
specifier|private
specifier|volatile
name|ScheduledFuture
name|registeredNextDelayFuture
decl_stmt|;
DECL|field|unassignedShardsAllocatedTimestamp
specifier|private
specifier|volatile
name|long
name|unassignedShardsAllocatedTimestamp
init|=
literal|0
decl_stmt|;
annotation|@
name|Inject
DECL|method|RoutingService
specifier|public
name|RoutingService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|AllocationService
name|allocationService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|allocationService
operator|=
name|allocationService
expr_stmt|;
if|if
condition|(
name|clusterService
operator|!=
literal|null
condition|)
block|{
name|clusterService
operator|.
name|addFirst
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
block|{
name|FutureUtils
operator|.
name|cancel
argument_list|(
name|registeredNextDelayFuture
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|getAllocationService
specifier|public
name|AllocationService
name|getAllocationService
parameter_list|()
block|{
return|return
name|this
operator|.
name|allocationService
return|;
block|}
comment|/**      * Update the last time the allocator tried to assign unassigned shards      *      * This is used so that both the GatewayAllocator and RoutingService use a      * consistent timestamp for comparing which shards have been delayed to      * avoid a race condition where GatewayAllocator thinks the shard should      * be delayed and the RoutingService thinks it has already passed the delay      * and that the GatewayAllocator has/will handle it.      */
DECL|method|setUnassignedShardsAllocatedTimestamp
specifier|public
name|void
name|setUnassignedShardsAllocatedTimestamp
parameter_list|(
name|long
name|timeInMillis
parameter_list|)
block|{
name|this
operator|.
name|unassignedShardsAllocatedTimestamp
operator|=
name|timeInMillis
expr_stmt|;
block|}
comment|/**      * Initiates a reroute.      */
DECL|method|reroute
specifier|public
specifier|final
name|void
name|reroute
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|performReroute
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clusterChanged
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|source
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CLUSTER_UPDATE_TASK_SOURCE
argument_list|)
condition|)
block|{
comment|// that's us, ignore this event
return|return;
block|}
if|if
condition|(
name|event
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeMaster
argument_list|()
condition|)
block|{
comment|// figure out when the next unassigned allocation need to happen from now. If this is larger or equal
comment|// then the last time we checked and scheduled, we are guaranteed to have a reroute until then, so no need
comment|// to schedule again
name|long
name|nextDelaySetting
init|=
name|UnassignedInfo
operator|.
name|findSmallestDelayedAllocationSetting
argument_list|(
name|settings
argument_list|,
name|event
operator|.
name|state
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextDelaySetting
operator|>
literal|0
operator|&&
name|nextDelaySetting
operator|<
name|registeredNextDelaySetting
condition|)
block|{
name|FutureUtils
operator|.
name|cancel
argument_list|(
name|registeredNextDelayFuture
argument_list|)
expr_stmt|;
name|registeredNextDelaySetting
operator|=
name|nextDelaySetting
expr_stmt|;
comment|// We use System.currentTimeMillis here because we want the
comment|// next delay from the "now" perspective, rather than the
comment|// delay from the last time the GatewayAllocator tried to
comment|// assign/delay the shard
name|TimeValue
name|nextDelay
init|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|UnassignedInfo
operator|.
name|findNextDelayedAllocationIn
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|settings
argument_list|,
name|event
operator|.
name|state
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|unassignedDelayedShards
init|=
name|UnassignedInfo
operator|.
name|getNumberOfDelayedUnassigned
argument_list|(
name|unassignedShardsAllocatedTimestamp
argument_list|,
name|settings
argument_list|,
name|event
operator|.
name|state
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|unassignedDelayedShards
operator|>
literal|0
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"delaying allocation for [{}] unassigned shards, next check in [{}]"
argument_list|,
name|unassignedDelayedShards
argument_list|,
name|nextDelay
argument_list|)
expr_stmt|;
name|registeredNextDelayFuture
operator|=
name|threadPool
operator|.
name|schedule
argument_list|(
name|nextDelay
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|registeredNextDelaySetting
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
name|reroute
argument_list|(
literal|"assign delayed unassigned shards"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to schedule/execute reroute post unassigned shard"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|registeredNextDelaySetting
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"no need to schedule reroute due to delayed unassigned, next_delay_setting [{}], registered [{}]"
argument_list|,
name|nextDelaySetting
argument_list|,
name|registeredNextDelaySetting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// visible for testing
DECL|method|getRegisteredNextDelaySetting
name|long
name|getRegisteredNextDelaySetting
parameter_list|()
block|{
return|return
name|this
operator|.
name|registeredNextDelaySetting
return|;
block|}
comment|// visible for testing
DECL|method|performReroute
specifier|protected
name|void
name|performReroute
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|lifecycle
operator|.
name|stopped
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|rerouting
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"already has pending reroute, ignoring {}"
argument_list|,
name|reason
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"rerouting {}"
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
name|CLUSTER_UPDATE_TASK_SOURCE
operator|+
literal|"("
operator|+
name|reason
operator|+
literal|")"
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|rerouting
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|RoutingAllocation
operator|.
name|Result
name|routingResult
init|=
name|allocationService
operator|.
name|reroute
argument_list|(
name|currentState
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|routingResult
operator|.
name|changed
argument_list|()
condition|)
block|{
comment|// no state changed
return|return
name|currentState
return|;
block|}
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|routingResult
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onNoLongerMaster
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|rerouting
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// no biggie
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|rerouting
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ClusterState
name|state
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unexpected failure during [{}], current state:\n{}"
argument_list|,
name|t
argument_list|,
name|source
argument_list|,
name|state
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unexpected failure during [{}], current state version [{}]"
argument_list|,
name|t
argument_list|,
name|source
argument_list|,
name|state
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|rerouting
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ClusterState
name|state
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to reroute routing table, current state:\n{}"
argument_list|,
name|e
argument_list|,
name|state
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

