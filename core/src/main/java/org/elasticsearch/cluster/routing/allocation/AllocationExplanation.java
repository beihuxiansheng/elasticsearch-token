begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Instances of this class keeps explanations of decisions that have been made by allocation.  * An {@link AllocationExplanation} consists of a set of per node explanations.  * Since {@link NodeExplanation}s are related to shards an {@link AllocationExplanation} maps  * a shards id to a set of {@link NodeExplanation}s.    */
end_comment

begin_class
DECL|class|AllocationExplanation
specifier|public
class|class
name|AllocationExplanation
implements|implements
name|Streamable
block|{
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|AllocationExplanation
name|EMPTY
init|=
operator|new
name|AllocationExplanation
argument_list|()
decl_stmt|;
comment|/**      * Instances of this class keep messages and informations about nodes of an allocation      */
DECL|class|NodeExplanation
specifier|public
specifier|static
class|class
name|NodeExplanation
block|{
DECL|field|node
specifier|private
specifier|final
name|DiscoveryNode
name|node
decl_stmt|;
DECL|field|description
specifier|private
specifier|final
name|String
name|description
decl_stmt|;
comment|/**          * Creates a new {@link NodeExplanation}          *            * @param node node referenced by this {@link NodeExplanation}          * @param description a message associated with the given node           */
DECL|method|NodeExplanation
specifier|public
name|NodeExplanation
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
comment|/**          * The node referenced by the explanation          * @return referenced node          */
DECL|method|node
specifier|public
name|DiscoveryNode
name|node
parameter_list|()
block|{
return|return
name|node
return|;
block|}
comment|/**          * Get the explanation for the node          * @return explanation for the node          */
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
name|description
return|;
block|}
block|}
DECL|field|explanations
specifier|private
specifier|final
name|Map
argument_list|<
name|ShardId
argument_list|,
name|List
argument_list|<
name|NodeExplanation
argument_list|>
argument_list|>
name|explanations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Create and add a node explanation to this explanation referencing a shard        * @param shardId id the of the referenced shard      * @param nodeExplanation Explanation itself      * @return AllocationExplanation involving the explanation       */
DECL|method|add
specifier|public
name|AllocationExplanation
name|add
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|NodeExplanation
name|nodeExplanation
parameter_list|)
block|{
name|List
argument_list|<
name|NodeExplanation
argument_list|>
name|list
init|=
name|explanations
operator|.
name|get
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|explanations
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|nodeExplanation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * List of explanations involved by this AllocationExplanation      * @return Map of shard ids and corresponding explanations        */
DECL|method|explanations
specifier|public
name|Map
argument_list|<
name|ShardId
argument_list|,
name|List
argument_list|<
name|NodeExplanation
argument_list|>
argument_list|>
name|explanations
parameter_list|()
block|{
return|return
name|this
operator|.
name|explanations
return|;
block|}
comment|/**      * Read an {@link AllocationExplanation} from an {@link StreamInput}      * @param in {@link StreamInput} to read from      * @return a new {@link AllocationExplanation} read from the stream       * @throws IOException if something bad happened while reading      */
DECL|method|readAllocationExplanation
specifier|public
specifier|static
name|AllocationExplanation
name|readAllocationExplanation
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|AllocationExplanation
name|e
init|=
operator|new
name|AllocationExplanation
argument_list|()
decl_stmt|;
name|e
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ShardId
name|shardId
init|=
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|size2
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NodeExplanation
argument_list|>
name|ne
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size2
condition|;
name|j
operator|++
control|)
block|{
name|DiscoveryNode
name|node
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|node
operator|=
name|DiscoveryNode
operator|.
name|readNode
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|ne
operator|.
name|add
argument_list|(
operator|new
name|NodeExplanation
argument_list|(
name|node
argument_list|,
name|in
operator|.
name|readString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|explanations
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
name|ne
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|explanations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ShardId
argument_list|,
name|List
argument_list|<
name|NodeExplanation
argument_list|>
argument_list|>
name|entry
range|:
name|explanations
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeExplanation
name|nodeExplanation
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|nodeExplanation
operator|.
name|node
argument_list|()
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nodeExplanation
operator|.
name|node
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeString
argument_list|(
name|nodeExplanation
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

