begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
operator|.
name|AllocationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * An enum which represents the various decision types that can be taken by the  * allocators and deciders for allocating a shard to a node.  */
end_comment

begin_enum
DECL|enum|AllocationDecision
specifier|public
enum|enum
name|AllocationDecision
implements|implements
name|Writeable
block|{
comment|/**      * The shard can be allocated to a node.      */
DECL|enum constant|YES
name|YES
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
block|,
comment|/**      * The allocation attempt was throttled for the shard.      */
DECL|enum constant|THROTTLE
name|THROTTLE
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
comment|/**      * The shard cannot be allocated, which can happen for any number of reasons,      * including the allocation deciders gave a NO decision for allocating.      */
DECL|enum constant|NO
name|NO
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
block|,
comment|/**      * The shard could not be rebalanced to another node despite rebalancing      * being allowed, because moving the shard to the other node would not form      * a better cluster balance.      */
DECL|enum constant|WORSE_BALANCE
name|WORSE_BALANCE
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
block|,
comment|/**      * Waiting on getting shard data from all nodes before making a decision      * about where to allocate the shard.      */
DECL|enum constant|FETCH_PENDING
name|FETCH_PENDING
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|)
block|,
comment|/**      * The allocation decision has been delayed waiting for a replica with a shard copy      * that left the cluster to rejoin.      */
DECL|enum constant|DELAYED_ALLOCATION
name|DELAYED_ALLOCATION
argument_list|(
operator|(
name|byte
operator|)
literal|5
argument_list|)
block|,
comment|/**      * The shard was denied allocation because there were no valid shard copies      * found for it amongst the nodes in the cluster.      */
DECL|enum constant|NO_VALID_SHARD_COPY
name|NO_VALID_SHARD_COPY
argument_list|(
operator|(
name|byte
operator|)
literal|6
argument_list|)
block|,
comment|/**      * No attempt was made to allocate the shard      */
DECL|enum constant|NO_ATTEMPT
name|NO_ATTEMPT
argument_list|(
operator|(
name|byte
operator|)
literal|7
argument_list|)
block|;
DECL|field|id
specifier|private
specifier|final
name|byte
name|id
decl_stmt|;
DECL|method|AllocationDecision
name|AllocationDecision
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|readFrom
specifier|public
specifier|static
name|AllocationDecision
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|id
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|id
condition|)
block|{
case|case
literal|0
case|:
return|return
name|YES
return|;
case|case
literal|1
case|:
return|return
name|THROTTLE
return|;
case|case
literal|2
case|:
return|return
name|NO
return|;
case|case
literal|3
case|:
return|return
name|WORSE_BALANCE
return|;
case|case
literal|4
case|:
return|return
name|FETCH_PENDING
return|;
case|case
literal|5
case|:
return|return
name|DELAYED_ALLOCATION
return|;
case|case
literal|6
case|:
return|return
name|NO_VALID_SHARD_COPY
return|;
case|case
literal|7
case|:
return|return
name|NO_ATTEMPT
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown value ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Gets an {@link AllocationDecision} from a {@link AllocationStatus}.      */
DECL|method|fromAllocationStatus
specifier|public
specifier|static
name|AllocationDecision
name|fromAllocationStatus
parameter_list|(
name|AllocationStatus
name|allocationStatus
parameter_list|)
block|{
if|if
condition|(
name|allocationStatus
operator|==
literal|null
condition|)
block|{
return|return
name|YES
return|;
block|}
else|else
block|{
switch|switch
condition|(
name|allocationStatus
condition|)
block|{
case|case
name|DECIDERS_THROTTLED
case|:
return|return
name|THROTTLE
return|;
case|case
name|FETCHING_SHARD_DATA
case|:
return|return
name|FETCH_PENDING
return|;
case|case
name|DELAYED_ALLOCATION
case|:
return|return
name|DELAYED_ALLOCATION
return|;
case|case
name|NO_VALID_SHARD_COPY
case|:
return|return
name|NO_VALID_SHARD_COPY
return|;
case|case
name|NO_ATTEMPT
case|:
return|return
name|NO_ATTEMPT
return|;
default|default:
assert|assert
name|allocationStatus
operator|==
name|AllocationStatus
operator|.
name|DECIDERS_NO
operator|:
literal|"unhandled AllocationStatus type ["
operator|+
name|allocationStatus
operator|+
literal|"]"
assert|;
return|return
name|NO
return|;
block|}
block|}
block|}
comment|/**      * Gets an {@link AllocationDecision} from a {@link Decision.Type}      */
DECL|method|fromDecisionType
specifier|public
specifier|static
name|AllocationDecision
name|fromDecisionType
parameter_list|(
name|Decision
operator|.
name|Type
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|YES
case|:
return|return
name|YES
return|;
case|case
name|THROTTLE
case|:
return|return
name|THROTTLE
return|;
default|default:
assert|assert
name|type
operator|==
name|Decision
operator|.
name|Type
operator|.
name|NO
assert|;
return|return
name|NO
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
block|}
end_enum

end_unit

