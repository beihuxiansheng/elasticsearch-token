begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_class
DECL|class|MasterNodeChangePredicate
specifier|public
specifier|final
class|class
name|MasterNodeChangePredicate
block|{
DECL|method|MasterNodeChangePredicate
specifier|private
name|MasterNodeChangePredicate
parameter_list|()
block|{      }
comment|/**      * builds a predicate that will accept a cluster state only if it was generated after the current has      * (re-)joined the master      */
DECL|method|build
specifier|public
specifier|static
name|Predicate
argument_list|<
name|ClusterState
argument_list|>
name|build
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
specifier|final
name|long
name|currentVersion
init|=
name|currentState
operator|.
name|version
argument_list|()
decl_stmt|;
specifier|final
name|String
name|currentMaster
init|=
name|currentState
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNodeId
argument_list|()
decl_stmt|;
return|return
name|newState
lambda|->
block|{
specifier|final
name|String
name|newMaster
init|=
name|newState
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNodeId
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|accept
decl_stmt|;
if|if
condition|(
name|newMaster
operator|==
literal|null
condition|)
block|{
name|accept
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newMaster
operator|.
name|equals
argument_list|(
name|currentMaster
argument_list|)
operator|==
literal|false
condition|)
block|{
name|accept
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|accept
operator|=
name|newState
operator|.
name|version
argument_list|()
operator|>
name|currentVersion
expr_stmt|;
block|}
return|return
name|accept
return|;
block|}
return|;
block|}
block|}
end_class

end_unit

