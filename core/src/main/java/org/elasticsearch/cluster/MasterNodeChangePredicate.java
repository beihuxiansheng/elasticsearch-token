begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterServiceState
import|;
end_import

begin_enum
DECL|enum|MasterNodeChangePredicate
specifier|public
enum|enum
name|MasterNodeChangePredicate
implements|implements
name|ClusterStateObserver
operator|.
name|ChangePredicate
block|{
DECL|enum constant|INSTANCE
name|INSTANCE
block|;
annotation|@
name|Override
DECL|method|apply
specifier|public
name|boolean
name|apply
parameter_list|(
name|ClusterServiceState
name|previousState
parameter_list|,
name|ClusterServiceState
name|newState
parameter_list|)
block|{
comment|// checking if the masterNodeId changed is insufficient as the
comment|// same master node might get re-elected after a disruption
return|return
name|newState
operator|.
name|getClusterState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNodeId
argument_list|()
operator|!=
literal|null
operator|&&
name|newState
operator|.
name|getClusterState
argument_list|()
operator|!=
name|previousState
operator|.
name|getClusterState
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|boolean
name|apply
parameter_list|(
name|ClusterChangedEvent
name|changedEvent
parameter_list|)
block|{
return|return
name|changedEvent
operator|.
name|nodesDelta
argument_list|()
operator|.
name|masterNodeChanged
argument_list|()
return|;
block|}
block|}
end_enum

end_unit

