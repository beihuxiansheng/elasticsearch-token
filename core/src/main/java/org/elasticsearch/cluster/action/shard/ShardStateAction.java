begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.action.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|MasterNodeChangePredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|NotMasterException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|FailedRerouteAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|EmptyTransportResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|NodeDisconnectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|RemoteTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_class
DECL|class|ShardStateAction
specifier|public
class|class
name|ShardStateAction
extends|extends
name|AbstractComponent
block|{
DECL|field|SHARD_STARTED_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SHARD_STARTED_ACTION_NAME
init|=
literal|"internal:cluster/shard/started"
decl_stmt|;
DECL|field|SHARD_FAILED_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SHARD_FAILED_ACTION_NAME
init|=
literal|"internal:cluster/shard/failure"
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
annotation|@
name|Inject
DECL|method|ShardStateAction
specifier|public
name|ShardStateAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|AllocationService
name|allocationService
parameter_list|,
name|RoutingService
name|routingService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|SHARD_STARTED_ACTION_NAME
argument_list|,
name|ShardRoutingEntry
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|ShardStartedTransportHandler
argument_list|(
name|clusterService
argument_list|,
operator|new
name|ShardStartedClusterStateTaskExecutor
argument_list|(
name|allocationService
argument_list|,
name|logger
argument_list|)
argument_list|,
name|logger
argument_list|)
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|SHARD_FAILED_ACTION_NAME
argument_list|,
name|ShardRoutingEntry
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|ShardFailedTransportHandler
argument_list|(
name|clusterService
argument_list|,
operator|new
name|ShardFailedClusterStateTaskExecutor
argument_list|(
name|allocationService
argument_list|,
name|routingService
argument_list|,
name|logger
argument_list|)
argument_list|,
name|logger
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sendShardAction
specifier|private
name|void
name|sendShardAction
parameter_list|(
specifier|final
name|String
name|actionName
parameter_list|,
specifier|final
name|ClusterStateObserver
name|observer
parameter_list|,
specifier|final
name|ShardRoutingEntry
name|shardRoutingEntry
parameter_list|,
specifier|final
name|Listener
name|listener
parameter_list|)
block|{
name|DiscoveryNode
name|masterNode
init|=
name|observer
operator|.
name|observedState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|masterNode
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} no master known for action [{}] for shard [{}]"
argument_list|,
name|shardRoutingEntry
operator|.
name|getShardRouting
argument_list|()
operator|.
name|shardId
argument_list|()
argument_list|,
name|actionName
argument_list|,
name|shardRoutingEntry
operator|.
name|getShardRouting
argument_list|()
argument_list|)
expr_stmt|;
name|waitForNewMasterAndRetry
argument_list|(
name|actionName
argument_list|,
name|observer
argument_list|,
name|shardRoutingEntry
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} sending [{}] to [{}] for shard [{}]"
argument_list|,
name|shardRoutingEntry
operator|.
name|getShardRouting
argument_list|()
operator|.
name|shardId
argument_list|()
argument_list|,
name|actionName
argument_list|,
name|masterNode
operator|.
name|getId
argument_list|()
argument_list|,
name|shardRoutingEntry
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|masterNode
argument_list|,
name|actionName
argument_list|,
name|shardRoutingEntry
argument_list|,
operator|new
name|EmptyTransportResponseHandler
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|TransportResponse
operator|.
name|Empty
name|response
parameter_list|)
block|{
name|listener
operator|.
name|onSuccess
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
if|if
condition|(
name|isMasterChannelException
argument_list|(
name|exp
argument_list|)
condition|)
block|{
name|waitForNewMasterAndRetry
argument_list|(
name|actionName
argument_list|,
name|observer
argument_list|,
name|shardRoutingEntry
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} unexpected failure while sending request [{}] to [{}] for shard [{}]"
argument_list|,
name|exp
argument_list|,
name|shardRoutingEntry
operator|.
name|getShardRouting
argument_list|()
operator|.
name|shardId
argument_list|()
argument_list|,
name|actionName
argument_list|,
name|masterNode
argument_list|,
name|shardRoutingEntry
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|exp
operator|instanceof
name|RemoteTransportException
condition|?
call|(
name|Exception
call|)
argument_list|(
name|exp
operator|.
name|getCause
argument_list|()
operator|instanceof
name|Exception
condition|?
name|exp
operator|.
name|getCause
argument_list|()
else|:
operator|new
name|ElasticsearchException
argument_list|(
name|exp
operator|.
name|getCause
argument_list|()
argument_list|)
argument_list|)
else|:
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|MASTER_CHANNEL_EXCEPTIONS
specifier|private
specifier|static
name|Class
index|[]
name|MASTER_CHANNEL_EXCEPTIONS
init|=
operator|new
name|Class
index|[]
block|{
name|NotMasterException
operator|.
name|class
block|,
name|ConnectTransportException
operator|.
name|class
block|,
name|Discovery
operator|.
name|FailedToCommitClusterStateException
operator|.
name|class
block|}
decl_stmt|;
DECL|method|isMasterChannelException
specifier|private
specifier|static
name|boolean
name|isMasterChannelException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
return|return
name|ExceptionsHelper
operator|.
name|unwrap
argument_list|(
name|exp
argument_list|,
name|MASTER_CHANNEL_EXCEPTIONS
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * Send a shard failed request to the master node to update the      * cluster state.      *  @param shardRouting       the shard to fail      * @param sourceShardRouting the source shard requesting the failure (must be the shard itself, or the primary shard)      * @param message            the reason for the failure      * @param failure            the underlying cause of the failure      * @param listener           callback upon completion of the request      */
DECL|method|shardFailed
specifier|public
name|void
name|shardFailed
parameter_list|(
specifier|final
name|ShardRouting
name|shardRouting
parameter_list|,
name|ShardRouting
name|sourceShardRouting
parameter_list|,
specifier|final
name|String
name|message
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Exception
name|failure
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|ClusterStateObserver
name|observer
init|=
operator|new
name|ClusterStateObserver
argument_list|(
name|clusterService
argument_list|,
literal|null
argument_list|,
name|logger
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
decl_stmt|;
name|ShardRoutingEntry
name|shardRoutingEntry
init|=
operator|new
name|ShardRoutingEntry
argument_list|(
name|shardRouting
argument_list|,
name|sourceShardRouting
argument_list|,
name|message
argument_list|,
name|failure
argument_list|)
decl_stmt|;
name|sendShardAction
argument_list|(
name|SHARD_FAILED_ACTION_NAME
argument_list|,
name|observer
argument_list|,
name|shardRoutingEntry
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
comment|// visible for testing
DECL|method|waitForNewMasterAndRetry
specifier|protected
name|void
name|waitForNewMasterAndRetry
parameter_list|(
name|String
name|actionName
parameter_list|,
name|ClusterStateObserver
name|observer
parameter_list|,
name|ShardRoutingEntry
name|shardRoutingEntry
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|observer
operator|.
name|waitForNextChange
argument_list|(
operator|new
name|ClusterStateObserver
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"new cluster state [{}] after waiting for master election to fail shard [{}]"
argument_list|,
name|state
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|shardRoutingEntry
argument_list|)
expr_stmt|;
block|}
name|sendShardAction
argument_list|(
name|actionName
argument_list|,
name|observer
argument_list|,
name|shardRoutingEntry
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onClusterServiceClose
parameter_list|()
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} node closed while execution action [{}] for shard [{}]"
argument_list|,
name|shardRoutingEntry
operator|.
name|failure
argument_list|,
name|shardRoutingEntry
operator|.
name|getShardRouting
argument_list|()
operator|.
name|shardId
argument_list|()
argument_list|,
name|actionName
argument_list|,
name|shardRoutingEntry
operator|.
name|getShardRouting
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|NodeClosedException
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onTimeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
comment|// we wait indefinitely for a new master
assert|assert
literal|false
assert|;
block|}
block|}
argument_list|,
name|MasterNodeChangePredicate
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
DECL|class|ShardFailedTransportHandler
specifier|private
specifier|static
class|class
name|ShardFailedTransportHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|ShardRoutingEntry
argument_list|>
block|{
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|shardFailedClusterStateTaskExecutor
specifier|private
specifier|final
name|ShardFailedClusterStateTaskExecutor
name|shardFailedClusterStateTaskExecutor
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|method|ShardFailedTransportHandler
specifier|public
name|ShardFailedTransportHandler
parameter_list|(
name|ClusterService
name|clusterService
parameter_list|,
name|ShardFailedClusterStateTaskExecutor
name|shardFailedClusterStateTaskExecutor
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|shardFailedClusterStateTaskExecutor
operator|=
name|shardFailedClusterStateTaskExecutor
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ShardRoutingEntry
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} received shard failed for {}"
argument_list|,
name|request
operator|.
name|failure
argument_list|,
name|request
operator|.
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"shard-failed"
argument_list|,
name|request
argument_list|,
name|ClusterStateTaskConfig
operator|.
name|build
argument_list|(
name|Priority
operator|.
name|HIGH
argument_list|)
argument_list|,
name|shardFailedClusterStateTaskExecutor
argument_list|,
operator|new
name|ClusterStateTaskListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"{} unexpected failure while failing shard [{}]"
argument_list|,
name|e
argument_list|,
name|request
operator|.
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|shardRouting
argument_list|)
expr_stmt|;
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|channelException
parameter_list|)
block|{
name|channelException
operator|.
name|addSuppressed
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"{} failed to send failure [{}] while failing shard [{}]"
argument_list|,
name|channelException
argument_list|,
name|request
operator|.
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|,
name|e
argument_list|,
name|request
operator|.
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onNoLongerMaster
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"{} no longer master while failing shard [{}]"
argument_list|,
name|request
operator|.
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|shardRouting
argument_list|)
expr_stmt|;
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|NotMasterException
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|channelException
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} failed to send no longer master while failing shard [{}]"
argument_list|,
name|channelException
argument_list|,
name|request
operator|.
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|channelException
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} failed to send response while failing shard [{}]"
argument_list|,
name|channelException
argument_list|,
name|request
operator|.
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ShardFailedClusterStateTaskExecutor
specifier|static
class|class
name|ShardFailedClusterStateTaskExecutor
implements|implements
name|ClusterStateTaskExecutor
argument_list|<
name|ShardRoutingEntry
argument_list|>
block|{
DECL|field|allocationService
specifier|private
specifier|final
name|AllocationService
name|allocationService
decl_stmt|;
DECL|field|routingService
specifier|private
specifier|final
name|RoutingService
name|routingService
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|method|ShardFailedClusterStateTaskExecutor
name|ShardFailedClusterStateTaskExecutor
parameter_list|(
name|AllocationService
name|allocationService
parameter_list|,
name|RoutingService
name|routingService
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|allocationService
operator|=
name|allocationService
expr_stmt|;
name|this
operator|.
name|routingService
operator|=
name|routingService
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|describeTasks
specifier|public
name|String
name|describeTasks
parameter_list|(
name|List
argument_list|<
name|ShardRoutingEntry
argument_list|>
name|tasks
parameter_list|)
block|{
return|return
name|tasks
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|entry
lambda|->
name|entry
operator|.
name|getShardRouting
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|reduce
argument_list|(
parameter_list|(
name|s1
parameter_list|,
name|s2
parameter_list|)
lambda|->
name|s1
operator|+
literal|", "
operator|+
name|s2
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|BatchResult
argument_list|<
name|ShardRoutingEntry
argument_list|>
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|,
name|List
argument_list|<
name|ShardRoutingEntry
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|Exception
block|{
name|BatchResult
operator|.
name|Builder
argument_list|<
name|ShardRoutingEntry
argument_list|>
name|batchResultBuilder
init|=
name|BatchResult
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// partition tasks into those that correspond to shards
comment|// that exist versus do not exist
name|Map
argument_list|<
name|ValidationResult
argument_list|,
name|List
argument_list|<
name|ShardRoutingEntry
argument_list|>
argument_list|>
name|partition
init|=
name|tasks
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|task
lambda|->
name|validateTask
argument_list|(
name|currentState
argument_list|,
name|task
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// tasks that correspond to non-existent shards are marked
comment|// as successful
name|batchResultBuilder
operator|.
name|successes
argument_list|(
name|partition
operator|.
name|getOrDefault
argument_list|(
name|ValidationResult
operator|.
name|SHARD_MISSING
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterState
name|maybeUpdatedState
init|=
name|currentState
decl_stmt|;
name|List
argument_list|<
name|ShardRoutingEntry
argument_list|>
name|tasksToFail
init|=
name|partition
operator|.
name|getOrDefault
argument_list|(
name|ValidationResult
operator|.
name|VALID
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|FailedRerouteAllocation
operator|.
name|FailedShard
argument_list|>
name|failedShards
init|=
name|tasksToFail
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|task
lambda|->
operator|new
name|FailedRerouteAllocation
operator|.
name|FailedShard
argument_list|(
name|task
operator|.
name|shardRouting
argument_list|,
name|task
operator|.
name|message
argument_list|,
name|task
operator|.
name|failure
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|RoutingAllocation
operator|.
name|Result
name|result
init|=
name|applyFailedShards
argument_list|(
name|currentState
argument_list|,
name|failedShards
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|changed
argument_list|()
condition|)
block|{
name|maybeUpdatedState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|result
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|batchResultBuilder
operator|.
name|successes
argument_list|(
name|tasksToFail
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// failures are communicated back to the requester
comment|// cluster state will not be updated in this case
name|batchResultBuilder
operator|.
name|failures
argument_list|(
name|tasksToFail
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|partition
operator|.
name|getOrDefault
argument_list|(
name|ValidationResult
operator|.
name|SOURCE_INVALID
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|task
lambda|->
name|batchResultBuilder
operator|.
name|failure
argument_list|(
name|task
argument_list|,
operator|new
name|NoLongerPrimaryShardException
argument_list|(
name|task
operator|.
name|getShardRouting
argument_list|()
operator|.
name|shardId
argument_list|()
argument_list|,
literal|"source shard ["
operator|+
name|task
operator|.
name|sourceShardRouting
operator|+
literal|"] is neither the local allocation nor the primary allocation"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|batchResultBuilder
operator|.
name|build
argument_list|(
name|maybeUpdatedState
argument_list|)
return|;
block|}
comment|// visible for testing
DECL|method|applyFailedShards
name|RoutingAllocation
operator|.
name|Result
name|applyFailedShards
parameter_list|(
name|ClusterState
name|currentState
parameter_list|,
name|List
argument_list|<
name|FailedRerouteAllocation
operator|.
name|FailedShard
argument_list|>
name|failedShards
parameter_list|)
block|{
return|return
name|allocationService
operator|.
name|applyFailedShards
argument_list|(
name|currentState
argument_list|,
name|failedShards
argument_list|)
return|;
block|}
DECL|enum|ValidationResult
specifier|private
enum|enum
name|ValidationResult
block|{
DECL|enum constant|VALID
name|VALID
block|,
DECL|enum constant|SOURCE_INVALID
name|SOURCE_INVALID
block|,
DECL|enum constant|SHARD_MISSING
name|SHARD_MISSING
block|}
DECL|method|validateTask
specifier|private
name|ValidationResult
name|validateTask
parameter_list|(
name|ClusterState
name|currentState
parameter_list|,
name|ShardRoutingEntry
name|task
parameter_list|)
block|{
comment|// non-local requests
if|if
condition|(
operator|!
name|task
operator|.
name|shardRouting
operator|.
name|isSameAllocation
argument_list|(
name|task
operator|.
name|sourceShardRouting
argument_list|)
condition|)
block|{
name|IndexShardRoutingTable
name|indexShard
init|=
name|currentState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|shardRoutingTableOrNull
argument_list|(
name|task
operator|.
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexShard
operator|==
literal|null
condition|)
block|{
return|return
name|ValidationResult
operator|.
name|SOURCE_INVALID
return|;
block|}
name|ShardRouting
name|primaryShard
init|=
name|indexShard
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
if|if
condition|(
name|primaryShard
operator|==
literal|null
operator|||
operator|!
name|primaryShard
operator|.
name|isSameAllocation
argument_list|(
name|task
operator|.
name|sourceShardRouting
argument_list|)
condition|)
block|{
return|return
name|ValidationResult
operator|.
name|SOURCE_INVALID
return|;
block|}
block|}
name|RoutingNode
name|routingNode
init|=
name|currentState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|task
operator|.
name|getShardRouting
argument_list|()
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|routingNode
operator|!=
literal|null
condition|)
block|{
name|ShardRouting
name|maybe
init|=
name|routingNode
operator|.
name|getByShardId
argument_list|(
name|task
operator|.
name|getShardRouting
argument_list|()
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|maybe
operator|!=
literal|null
operator|&&
name|maybe
operator|.
name|isSameAllocation
argument_list|(
name|task
operator|.
name|getShardRouting
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|ValidationResult
operator|.
name|VALID
return|;
block|}
block|}
return|return
name|ValidationResult
operator|.
name|SHARD_MISSING
return|;
block|}
annotation|@
name|Override
DECL|method|clusterStatePublished
specifier|public
name|void
name|clusterStatePublished
parameter_list|(
name|ClusterChangedEvent
name|clusterChangedEvent
parameter_list|)
block|{
name|int
name|numberOfUnassignedShards
init|=
name|clusterChangedEvent
operator|.
name|state
argument_list|()
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfUnassignedShards
operator|>
literal|0
condition|)
block|{
name|String
name|reason
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"[%d] unassigned shards after failing shards"
argument_list|,
name|numberOfUnassignedShards
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{}, scheduling a reroute"
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
name|routingService
operator|.
name|reroute
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|shardStarted
specifier|public
name|void
name|shardStarted
parameter_list|(
specifier|final
name|ShardRouting
name|shardRouting
parameter_list|,
specifier|final
name|String
name|message
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|ClusterStateObserver
name|observer
init|=
operator|new
name|ClusterStateObserver
argument_list|(
name|clusterService
argument_list|,
literal|null
argument_list|,
name|logger
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
decl_stmt|;
name|ShardRoutingEntry
name|shardRoutingEntry
init|=
operator|new
name|ShardRoutingEntry
argument_list|(
name|shardRouting
argument_list|,
name|shardRouting
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|sendShardAction
argument_list|(
name|SHARD_STARTED_ACTION_NAME
argument_list|,
name|observer
argument_list|,
name|shardRoutingEntry
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|class|ShardStartedTransportHandler
specifier|private
specifier|static
class|class
name|ShardStartedTransportHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|ShardRoutingEntry
argument_list|>
block|{
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|shardStartedClusterStateTaskExecutor
specifier|private
specifier|final
name|ShardStartedClusterStateTaskExecutor
name|shardStartedClusterStateTaskExecutor
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|method|ShardStartedTransportHandler
specifier|public
name|ShardStartedTransportHandler
parameter_list|(
name|ClusterService
name|clusterService
parameter_list|,
name|ShardStartedClusterStateTaskExecutor
name|shardStartedClusterStateTaskExecutor
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|shardStartedClusterStateTaskExecutor
operator|=
name|shardStartedClusterStateTaskExecutor
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ShardRoutingEntry
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} received shard started for [{}]"
argument_list|,
name|request
operator|.
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"shard-started"
argument_list|,
name|request
argument_list|,
name|ClusterStateTaskConfig
operator|.
name|build
argument_list|(
name|Priority
operator|.
name|URGENT
argument_list|)
argument_list|,
name|shardStartedClusterStateTaskExecutor
argument_list|,
name|shardStartedClusterStateTaskExecutor
argument_list|)
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ShardStartedClusterStateTaskExecutor
specifier|private
specifier|static
class|class
name|ShardStartedClusterStateTaskExecutor
implements|implements
name|ClusterStateTaskExecutor
argument_list|<
name|ShardRoutingEntry
argument_list|>
implements|,
name|ClusterStateTaskListener
block|{
DECL|field|allocationService
specifier|private
specifier|final
name|AllocationService
name|allocationService
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|method|ShardStartedClusterStateTaskExecutor
specifier|public
name|ShardStartedClusterStateTaskExecutor
parameter_list|(
name|AllocationService
name|allocationService
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|allocationService
operator|=
name|allocationService
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|describeTasks
specifier|public
name|String
name|describeTasks
parameter_list|(
name|List
argument_list|<
name|ShardRoutingEntry
argument_list|>
name|tasks
parameter_list|)
block|{
return|return
name|tasks
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|entry
lambda|->
name|entry
operator|.
name|getShardRouting
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|reduce
argument_list|(
parameter_list|(
name|s1
parameter_list|,
name|s2
parameter_list|)
lambda|->
name|s1
operator|+
literal|", "
operator|+
name|s2
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|BatchResult
argument_list|<
name|ShardRoutingEntry
argument_list|>
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|,
name|List
argument_list|<
name|ShardRoutingEntry
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|Exception
block|{
name|BatchResult
operator|.
name|Builder
argument_list|<
name|ShardRoutingEntry
argument_list|>
name|builder
init|=
name|BatchResult
operator|.
name|builder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shardRoutingsToBeApplied
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ShardRoutingEntry
name|task
range|:
name|tasks
control|)
block|{
name|shardRoutingsToBeApplied
operator|.
name|add
argument_list|(
name|task
operator|.
name|shardRouting
argument_list|)
expr_stmt|;
block|}
name|ClusterState
name|maybeUpdatedState
init|=
name|currentState
decl_stmt|;
try|try
block|{
name|RoutingAllocation
operator|.
name|Result
name|result
init|=
name|allocationService
operator|.
name|applyStartedShards
argument_list|(
name|currentState
argument_list|,
name|shardRoutingsToBeApplied
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|changed
argument_list|()
condition|)
block|{
name|maybeUpdatedState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|result
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|successes
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|builder
operator|.
name|failures
argument_list|(
name|tasks
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|(
name|maybeUpdatedState
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unexpected failure during [{}]"
argument_list|,
name|e
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ShardRoutingEntry
specifier|public
specifier|static
class|class
name|ShardRoutingEntry
extends|extends
name|TransportRequest
block|{
DECL|field|shardRouting
name|ShardRouting
name|shardRouting
decl_stmt|;
DECL|field|sourceShardRouting
name|ShardRouting
name|sourceShardRouting
decl_stmt|;
DECL|field|message
name|String
name|message
decl_stmt|;
DECL|field|failure
name|Exception
name|failure
decl_stmt|;
DECL|method|ShardRoutingEntry
specifier|public
name|ShardRoutingEntry
parameter_list|()
block|{         }
DECL|method|ShardRoutingEntry
name|ShardRoutingEntry
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|ShardRouting
name|sourceShardRouting
parameter_list|,
name|String
name|message
parameter_list|,
annotation|@
name|Nullable
name|Exception
name|failure
parameter_list|)
block|{
name|this
operator|.
name|shardRouting
operator|=
name|shardRouting
expr_stmt|;
name|this
operator|.
name|sourceShardRouting
operator|=
name|sourceShardRouting
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|failure
operator|=
name|failure
expr_stmt|;
block|}
DECL|method|getShardRouting
specifier|public
name|ShardRouting
name|getShardRouting
parameter_list|()
block|{
return|return
name|shardRouting
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|shardRouting
operator|=
operator|new
name|ShardRouting
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|sourceShardRouting
operator|=
operator|new
name|ShardRouting
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|message
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|failure
operator|=
name|in
operator|.
name|readException
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|shardRouting
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|sourceShardRouting
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeThrowable
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
literal|"target shard ["
operator|+
name|shardRouting
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
literal|"source shard ["
operator|+
name|sourceShardRouting
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
literal|"message ["
operator|+
name|message
operator|+
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
name|components
operator|.
name|add
argument_list|(
literal|"failure ["
operator|+
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|failure
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|String
operator|.
name|join
argument_list|(
literal|", "
argument_list|,
name|components
argument_list|)
return|;
block|}
block|}
DECL|interface|Listener
specifier|public
interface|interface
name|Listener
block|{
DECL|method|onSuccess
specifier|default
name|void
name|onSuccess
parameter_list|()
block|{         }
comment|/**          * Notification for non-channel exceptions that are not handled          * by {@link ShardStateAction}.          *          * The exceptions that are handled by {@link ShardStateAction}          * are:          *  - {@link NotMasterException}          *  - {@link NodeDisconnectedException}          *  - {@link Discovery.FailedToCommitClusterStateException}          *          * Any other exception is communicated to the requester via          * this notification.          *          * @param e the unexpected cause of the failure on the master          */
DECL|method|onFailure
specifier|default
name|void
name|onFailure
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{         }
block|}
DECL|class|NoLongerPrimaryShardException
specifier|public
specifier|static
class|class
name|NoLongerPrimaryShardException
extends|extends
name|ElasticsearchException
block|{
DECL|method|NoLongerPrimaryShardException
specifier|public
name|NoLongerPrimaryShardException
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|setShard
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
block|}
DECL|method|NoLongerPrimaryShardException
specifier|public
name|NoLongerPrimaryShardException
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

