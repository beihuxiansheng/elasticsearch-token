begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.action.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|MasterNodeChangePredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|NotMasterException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|FailedRerouteAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|EmptyTransportResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|NodeDisconnectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|RemoteTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ShardStateAction
specifier|public
class|class
name|ShardStateAction
extends|extends
name|AbstractComponent
block|{
DECL|field|SHARD_STARTED_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SHARD_STARTED_ACTION_NAME
init|=
literal|"internal:cluster/shard/started"
decl_stmt|;
DECL|field|SHARD_FAILED_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SHARD_FAILED_ACTION_NAME
init|=
literal|"internal:cluster/shard/failure"
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
annotation|@
name|Inject
DECL|method|ShardStateAction
specifier|public
name|ShardStateAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|AllocationService
name|allocationService
parameter_list|,
name|RoutingService
name|routingService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|SHARD_STARTED_ACTION_NAME
argument_list|,
name|ShardEntry
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|ShardStartedTransportHandler
argument_list|(
name|clusterService
argument_list|,
operator|new
name|ShardStartedClusterStateTaskExecutor
argument_list|(
name|allocationService
argument_list|,
name|logger
argument_list|)
argument_list|,
name|logger
argument_list|)
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|SHARD_FAILED_ACTION_NAME
argument_list|,
name|ShardEntry
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|ShardFailedTransportHandler
argument_list|(
name|clusterService
argument_list|,
operator|new
name|ShardFailedClusterStateTaskExecutor
argument_list|(
name|allocationService
argument_list|,
name|routingService
argument_list|,
name|logger
argument_list|)
argument_list|,
name|logger
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sendShardAction
specifier|private
name|void
name|sendShardAction
parameter_list|(
specifier|final
name|String
name|actionName
parameter_list|,
specifier|final
name|ClusterStateObserver
name|observer
parameter_list|,
specifier|final
name|ShardEntry
name|shardEntry
parameter_list|,
specifier|final
name|Listener
name|listener
parameter_list|)
block|{
name|DiscoveryNode
name|masterNode
init|=
name|observer
operator|.
name|observedState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|masterNode
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} no master known for action [{}] for shard entry [{}]"
argument_list|,
name|shardEntry
operator|.
name|shardId
argument_list|,
name|actionName
argument_list|,
name|shardEntry
argument_list|)
expr_stmt|;
name|waitForNewMasterAndRetry
argument_list|(
name|actionName
argument_list|,
name|observer
argument_list|,
name|shardEntry
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} sending [{}] to [{}] for shard entry [{}]"
argument_list|,
name|shardEntry
operator|.
name|shardId
argument_list|,
name|actionName
argument_list|,
name|masterNode
operator|.
name|getId
argument_list|()
argument_list|,
name|shardEntry
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|masterNode
argument_list|,
name|actionName
argument_list|,
name|shardEntry
argument_list|,
operator|new
name|EmptyTransportResponseHandler
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|TransportResponse
operator|.
name|Empty
name|response
parameter_list|)
block|{
name|listener
operator|.
name|onSuccess
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
if|if
condition|(
name|isMasterChannelException
argument_list|(
name|exp
argument_list|)
condition|)
block|{
name|waitForNewMasterAndRetry
argument_list|(
name|actionName
argument_list|,
name|observer
argument_list|,
name|shardEntry
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} unexpected failure while sending request [{}] to [{}] for shard entry [{}]"
argument_list|,
name|exp
argument_list|,
name|shardEntry
operator|.
name|shardId
argument_list|,
name|actionName
argument_list|,
name|masterNode
argument_list|,
name|shardEntry
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|exp
operator|instanceof
name|RemoteTransportException
condition|?
call|(
name|Exception
call|)
argument_list|(
name|exp
operator|.
name|getCause
argument_list|()
operator|instanceof
name|Exception
condition|?
name|exp
operator|.
name|getCause
argument_list|()
else|:
operator|new
name|ElasticsearchException
argument_list|(
name|exp
operator|.
name|getCause
argument_list|()
argument_list|)
argument_list|)
else|:
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|MASTER_CHANNEL_EXCEPTIONS
specifier|private
specifier|static
name|Class
index|[]
name|MASTER_CHANNEL_EXCEPTIONS
init|=
operator|new
name|Class
index|[]
block|{
name|NotMasterException
operator|.
name|class
block|,
name|ConnectTransportException
operator|.
name|class
block|,
name|Discovery
operator|.
name|FailedToCommitClusterStateException
operator|.
name|class
block|}
decl_stmt|;
DECL|method|isMasterChannelException
specifier|private
specifier|static
name|boolean
name|isMasterChannelException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
return|return
name|ExceptionsHelper
operator|.
name|unwrap
argument_list|(
name|exp
argument_list|,
name|MASTER_CHANNEL_EXCEPTIONS
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * Send a shard failed request to the master node to update the cluster state with the failure of a shard on another node. This means      * that the shard should be failed because a write made it into the primary but was not replicated to this shard copy. If the shard      * does not exist anymore but still has an entry in the in-sync set, remove its allocation id from the in-sync set.      *      * @param shardId            shard id of the shard to fail      * @param allocationId       allocation id of the shard to fail      * @param primaryTerm        the primary term associated with the primary shard that is failing the shard. Must be strictly positive.      * @param message            the reason for the failure      * @param failure            the underlying cause of the failure      * @param listener           callback upon completion of the request      */
DECL|method|remoteShardFailed
specifier|public
name|void
name|remoteShardFailed
parameter_list|(
specifier|final
name|ShardId
name|shardId
parameter_list|,
name|String
name|allocationId
parameter_list|,
name|long
name|primaryTerm
parameter_list|,
specifier|final
name|String
name|message
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Exception
name|failure
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
assert|assert
name|primaryTerm
operator|>
literal|0L
operator|:
literal|"primary term should be strictly positive"
assert|;
name|shardFailed
argument_list|(
name|shardId
argument_list|,
name|allocationId
argument_list|,
name|primaryTerm
argument_list|,
name|message
argument_list|,
name|failure
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.      */
DECL|method|localShardFailed
specifier|public
name|void
name|localShardFailed
parameter_list|(
specifier|final
name|ShardRouting
name|shardRouting
parameter_list|,
specifier|final
name|String
name|message
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Exception
name|failure
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|shardFailed
argument_list|(
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|,
name|shardRouting
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|0L
argument_list|,
name|message
argument_list|,
name|failure
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|shardFailed
specifier|private
name|void
name|shardFailed
parameter_list|(
specifier|final
name|ShardId
name|shardId
parameter_list|,
name|String
name|allocationId
parameter_list|,
name|long
name|primaryTerm
parameter_list|,
specifier|final
name|String
name|message
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Exception
name|failure
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|ClusterStateObserver
name|observer
init|=
operator|new
name|ClusterStateObserver
argument_list|(
name|clusterService
argument_list|,
literal|null
argument_list|,
name|logger
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
decl_stmt|;
name|ShardEntry
name|shardEntry
init|=
operator|new
name|ShardEntry
argument_list|(
name|shardId
argument_list|,
name|allocationId
argument_list|,
name|primaryTerm
argument_list|,
name|message
argument_list|,
name|failure
argument_list|)
decl_stmt|;
name|sendShardAction
argument_list|(
name|SHARD_FAILED_ACTION_NAME
argument_list|,
name|observer
argument_list|,
name|shardEntry
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
comment|// visible for testing
DECL|method|waitForNewMasterAndRetry
specifier|protected
name|void
name|waitForNewMasterAndRetry
parameter_list|(
name|String
name|actionName
parameter_list|,
name|ClusterStateObserver
name|observer
parameter_list|,
name|ShardEntry
name|shardEntry
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|observer
operator|.
name|waitForNextChange
argument_list|(
operator|new
name|ClusterStateObserver
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"new cluster state [{}] after waiting for master election to fail shard entry [{}]"
argument_list|,
name|state
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|shardEntry
argument_list|)
expr_stmt|;
block|}
name|sendShardAction
argument_list|(
name|actionName
argument_list|,
name|observer
argument_list|,
name|shardEntry
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onClusterServiceClose
parameter_list|()
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} node closed while execution action [{}] for shard entry [{}]"
argument_list|,
name|shardEntry
operator|.
name|failure
argument_list|,
name|shardEntry
operator|.
name|shardId
argument_list|,
name|actionName
argument_list|,
name|shardEntry
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|NodeClosedException
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onTimeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
comment|// we wait indefinitely for a new master
assert|assert
literal|false
assert|;
block|}
block|}
argument_list|,
name|MasterNodeChangePredicate
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
DECL|class|ShardFailedTransportHandler
specifier|private
specifier|static
class|class
name|ShardFailedTransportHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|ShardEntry
argument_list|>
block|{
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|shardFailedClusterStateTaskExecutor
specifier|private
specifier|final
name|ShardFailedClusterStateTaskExecutor
name|shardFailedClusterStateTaskExecutor
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|method|ShardFailedTransportHandler
specifier|public
name|ShardFailedTransportHandler
parameter_list|(
name|ClusterService
name|clusterService
parameter_list|,
name|ShardFailedClusterStateTaskExecutor
name|shardFailedClusterStateTaskExecutor
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|shardFailedClusterStateTaskExecutor
operator|=
name|shardFailedClusterStateTaskExecutor
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ShardEntry
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} received shard failed for {}"
argument_list|,
name|request
operator|.
name|failure
argument_list|,
name|request
operator|.
name|shardId
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"shard-failed"
argument_list|,
name|request
argument_list|,
name|ClusterStateTaskConfig
operator|.
name|build
argument_list|(
name|Priority
operator|.
name|HIGH
argument_list|)
argument_list|,
name|shardFailedClusterStateTaskExecutor
argument_list|,
operator|new
name|ClusterStateTaskListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"{} unexpected failure while failing shard [{}]"
argument_list|,
name|e
argument_list|,
name|request
operator|.
name|shardId
argument_list|,
name|request
argument_list|)
expr_stmt|;
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|channelException
parameter_list|)
block|{
name|channelException
operator|.
name|addSuppressed
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"{} failed to send failure [{}] while failing shard [{}]"
argument_list|,
name|channelException
argument_list|,
name|request
operator|.
name|shardId
argument_list|,
name|e
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onNoLongerMaster
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"{} no longer master while failing shard [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|,
name|request
argument_list|)
expr_stmt|;
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|NotMasterException
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|channelException
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} failed to send no longer master while failing shard [{}]"
argument_list|,
name|channelException
argument_list|,
name|request
operator|.
name|shardId
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|channelException
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} failed to send response while failing shard [{}]"
argument_list|,
name|channelException
argument_list|,
name|request
operator|.
name|shardId
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ShardFailedClusterStateTaskExecutor
specifier|public
specifier|static
class|class
name|ShardFailedClusterStateTaskExecutor
implements|implements
name|ClusterStateTaskExecutor
argument_list|<
name|ShardEntry
argument_list|>
block|{
DECL|field|allocationService
specifier|private
specifier|final
name|AllocationService
name|allocationService
decl_stmt|;
DECL|field|routingService
specifier|private
specifier|final
name|RoutingService
name|routingService
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|method|ShardFailedClusterStateTaskExecutor
specifier|public
name|ShardFailedClusterStateTaskExecutor
parameter_list|(
name|AllocationService
name|allocationService
parameter_list|,
name|RoutingService
name|routingService
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|allocationService
operator|=
name|allocationService
expr_stmt|;
name|this
operator|.
name|routingService
operator|=
name|routingService
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|BatchResult
argument_list|<
name|ShardEntry
argument_list|>
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|,
name|List
argument_list|<
name|ShardEntry
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|Exception
block|{
name|BatchResult
operator|.
name|Builder
argument_list|<
name|ShardEntry
argument_list|>
name|batchResultBuilder
init|=
name|BatchResult
operator|.
name|builder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ShardEntry
argument_list|>
name|tasksToBeApplied
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FailedRerouteAllocation
operator|.
name|FailedShard
argument_list|>
name|shardRoutingsToBeApplied
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FailedRerouteAllocation
operator|.
name|StaleShard
argument_list|>
name|staleShardsToBeApplied
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardEntry
name|task
range|:
name|tasks
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|task
operator|.
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|==
literal|null
condition|)
block|{
comment|// tasks that correspond to non-existent indices are marked as successful
name|logger
operator|.
name|debug
argument_list|(
literal|"{} ignoring shard failed task [{}] (unknown index {})"
argument_list|,
name|task
operator|.
name|shardId
argument_list|,
name|task
argument_list|,
name|task
operator|.
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|batchResultBuilder
operator|.
name|success
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The primary term is 0 if the shard failed itself. It is> 0 if a write was done on a primary but was failed to be
comment|// replicated to the shard copy with the provided allocation id. In case where the shard failed itself, it's ok to just
comment|// remove the corresponding routing entry from the routing table. In case where a write could not be replicated,
comment|// however, it is important to ensure that the shard copy with the missing write is considered as stale from that point
comment|// on, which is implemented by removing the allocation id of the shard copy from the in-sync allocations set.
comment|// We check here that the primary to which the write happened was not already failed in an earlier cluster state update.
comment|// This prevents situations where a new primary has already been selected and replication failures from an old stale
comment|// primary unnecessarily fail currently active shards.
if|if
condition|(
name|task
operator|.
name|primaryTerm
operator|>
literal|0
condition|)
block|{
name|long
name|currentPrimaryTerm
init|=
name|indexMetaData
operator|.
name|primaryTerm
argument_list|(
name|task
operator|.
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentPrimaryTerm
operator|!=
name|task
operator|.
name|primaryTerm
condition|)
block|{
assert|assert
name|currentPrimaryTerm
operator|>
name|task
operator|.
name|primaryTerm
operator|:
literal|"received a primary term with a higher term than in the "
operator|+
literal|"current cluster state (received ["
operator|+
name|task
operator|.
name|primaryTerm
operator|+
literal|"] but current is ["
operator|+
name|currentPrimaryTerm
operator|+
literal|"])"
assert|;
name|logger
operator|.
name|debug
argument_list|(
literal|"{} failing shard failed task [{}] (primary term {} does not match current term {})"
argument_list|,
name|task
operator|.
name|shardId
argument_list|,
name|task
argument_list|,
name|task
operator|.
name|primaryTerm
argument_list|,
name|indexMetaData
operator|.
name|primaryTerm
argument_list|(
name|task
operator|.
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|batchResultBuilder
operator|.
name|failure
argument_list|(
name|task
argument_list|,
operator|new
name|NoLongerPrimaryShardException
argument_list|(
name|task
operator|.
name|shardId
argument_list|,
literal|"primary term ["
operator|+
name|task
operator|.
name|primaryTerm
operator|+
literal|"] did not match current primary term ["
operator|+
name|currentPrimaryTerm
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|ShardRouting
name|matched
init|=
name|currentState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|getByAllocationId
argument_list|(
name|task
operator|.
name|shardId
argument_list|,
name|task
operator|.
name|allocationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|matched
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|inSyncAllocationIds
init|=
name|indexMetaData
operator|.
name|inSyncAllocationIds
argument_list|(
name|task
operator|.
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
comment|// mark shard copies without routing entries that are in in-sync allocations set only as stale if the reason why
comment|// they were failed is because a write made it into the primary but not to this copy (which corresponds to
comment|// the check "primaryTerm> 0").
if|if
condition|(
name|task
operator|.
name|primaryTerm
operator|>
literal|0
operator|&&
name|inSyncAllocationIds
operator|.
name|contains
argument_list|(
name|task
operator|.
name|allocationId
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} marking shard {} as stale (shard failed task: [{}])"
argument_list|,
name|task
operator|.
name|shardId
argument_list|,
name|task
operator|.
name|allocationId
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|tasksToBeApplied
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|staleShardsToBeApplied
operator|.
name|add
argument_list|(
operator|new
name|FailedRerouteAllocation
operator|.
name|StaleShard
argument_list|(
name|task
operator|.
name|shardId
argument_list|,
name|task
operator|.
name|allocationId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// tasks that correspond to non-existent shards are marked as successful
name|logger
operator|.
name|debug
argument_list|(
literal|"{} ignoring shard failed task [{}] (shard does not exist anymore)"
argument_list|,
name|task
operator|.
name|shardId
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|batchResultBuilder
operator|.
name|success
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// failing a shard also possibly marks it as stale (see IndexMetaDataUpdater)
name|logger
operator|.
name|debug
argument_list|(
literal|"{} failing shard {} (shard failed task: [{}])"
argument_list|,
name|task
operator|.
name|shardId
argument_list|,
name|matched
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|tasksToBeApplied
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|shardRoutingsToBeApplied
operator|.
name|add
argument_list|(
operator|new
name|FailedRerouteAllocation
operator|.
name|FailedShard
argument_list|(
name|matched
argument_list|,
name|task
operator|.
name|message
argument_list|,
name|task
operator|.
name|failure
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
assert|assert
name|tasksToBeApplied
operator|.
name|size
argument_list|()
operator|==
name|shardRoutingsToBeApplied
operator|.
name|size
argument_list|()
operator|+
name|staleShardsToBeApplied
operator|.
name|size
argument_list|()
assert|;
name|ClusterState
name|maybeUpdatedState
init|=
name|currentState
decl_stmt|;
try|try
block|{
name|RoutingAllocation
operator|.
name|Result
name|result
init|=
name|applyFailedShards
argument_list|(
name|currentState
argument_list|,
name|shardRoutingsToBeApplied
argument_list|,
name|staleShardsToBeApplied
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|changed
argument_list|()
condition|)
block|{
name|maybeUpdatedState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|result
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|batchResultBuilder
operator|.
name|successes
argument_list|(
name|tasksToBeApplied
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to apply failed shards {}"
argument_list|,
name|e
argument_list|,
name|shardRoutingsToBeApplied
argument_list|)
expr_stmt|;
comment|// failures are communicated back to the requester
comment|// cluster state will not be updated in this case
name|batchResultBuilder
operator|.
name|failures
argument_list|(
name|tasksToBeApplied
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|batchResultBuilder
operator|.
name|build
argument_list|(
name|maybeUpdatedState
argument_list|)
return|;
block|}
comment|// visible for testing
DECL|method|applyFailedShards
name|RoutingAllocation
operator|.
name|Result
name|applyFailedShards
parameter_list|(
name|ClusterState
name|currentState
parameter_list|,
name|List
argument_list|<
name|FailedRerouteAllocation
operator|.
name|FailedShard
argument_list|>
name|failedShards
parameter_list|,
name|List
argument_list|<
name|FailedRerouteAllocation
operator|.
name|StaleShard
argument_list|>
name|staleShards
parameter_list|)
block|{
return|return
name|allocationService
operator|.
name|applyFailedShards
argument_list|(
name|currentState
argument_list|,
name|failedShards
argument_list|,
name|staleShards
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clusterStatePublished
specifier|public
name|void
name|clusterStatePublished
parameter_list|(
name|ClusterChangedEvent
name|clusterChangedEvent
parameter_list|)
block|{
name|int
name|numberOfUnassignedShards
init|=
name|clusterChangedEvent
operator|.
name|state
argument_list|()
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfUnassignedShards
operator|>
literal|0
condition|)
block|{
name|String
name|reason
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"[%d] unassigned shards after failing shards"
argument_list|,
name|numberOfUnassignedShards
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{}, scheduling a reroute"
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
name|routingService
operator|.
name|reroute
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|shardStarted
specifier|public
name|void
name|shardStarted
parameter_list|(
specifier|final
name|ShardRouting
name|shardRouting
parameter_list|,
specifier|final
name|String
name|message
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|ClusterStateObserver
name|observer
init|=
operator|new
name|ClusterStateObserver
argument_list|(
name|clusterService
argument_list|,
literal|null
argument_list|,
name|logger
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
decl_stmt|;
name|ShardEntry
name|shardEntry
init|=
operator|new
name|ShardEntry
argument_list|(
name|shardRouting
operator|.
name|shardId
argument_list|()
argument_list|,
name|shardRouting
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|0L
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|sendShardAction
argument_list|(
name|SHARD_STARTED_ACTION_NAME
argument_list|,
name|observer
argument_list|,
name|shardEntry
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|class|ShardStartedTransportHandler
specifier|private
specifier|static
class|class
name|ShardStartedTransportHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|ShardEntry
argument_list|>
block|{
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|shardStartedClusterStateTaskExecutor
specifier|private
specifier|final
name|ShardStartedClusterStateTaskExecutor
name|shardStartedClusterStateTaskExecutor
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|method|ShardStartedTransportHandler
specifier|public
name|ShardStartedTransportHandler
parameter_list|(
name|ClusterService
name|clusterService
parameter_list|,
name|ShardStartedClusterStateTaskExecutor
name|shardStartedClusterStateTaskExecutor
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|shardStartedClusterStateTaskExecutor
operator|=
name|shardStartedClusterStateTaskExecutor
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ShardEntry
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} received shard started for [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"shard-started"
argument_list|,
name|request
argument_list|,
name|ClusterStateTaskConfig
operator|.
name|build
argument_list|(
name|Priority
operator|.
name|URGENT
argument_list|)
argument_list|,
name|shardStartedClusterStateTaskExecutor
argument_list|,
name|shardStartedClusterStateTaskExecutor
argument_list|)
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ShardStartedClusterStateTaskExecutor
specifier|public
specifier|static
class|class
name|ShardStartedClusterStateTaskExecutor
implements|implements
name|ClusterStateTaskExecutor
argument_list|<
name|ShardEntry
argument_list|>
implements|,
name|ClusterStateTaskListener
block|{
DECL|field|allocationService
specifier|private
specifier|final
name|AllocationService
name|allocationService
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|method|ShardStartedClusterStateTaskExecutor
specifier|public
name|ShardStartedClusterStateTaskExecutor
parameter_list|(
name|AllocationService
name|allocationService
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|allocationService
operator|=
name|allocationService
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|BatchResult
argument_list|<
name|ShardEntry
argument_list|>
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|,
name|List
argument_list|<
name|ShardEntry
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|Exception
block|{
name|BatchResult
operator|.
name|Builder
argument_list|<
name|ShardEntry
argument_list|>
name|builder
init|=
name|BatchResult
operator|.
name|builder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ShardEntry
argument_list|>
name|tasksToBeApplied
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shardRoutingsToBeApplied
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ShardRouting
argument_list|>
name|seenShardRoutings
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// to prevent duplicates
for|for
control|(
name|ShardEntry
name|task
range|:
name|tasks
control|)
block|{
assert|assert
name|task
operator|.
name|primaryTerm
operator|==
literal|0L
operator|:
literal|"shard is only started by itself: "
operator|+
name|task
assert|;
name|ShardRouting
name|matched
init|=
name|currentState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|getByAllocationId
argument_list|(
name|task
operator|.
name|shardId
argument_list|,
name|task
operator|.
name|allocationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|matched
operator|==
literal|null
condition|)
block|{
comment|// tasks that correspond to non-existent shards are marked as successful. The reason is that we resend shard started
comment|// events on every cluster state publishing that does not contain the shard as started yet. This means that old stale
comment|// requests might still be in flight even after the shard has already been started or failed on the master. We just
comment|// ignore these requests for now.
name|logger
operator|.
name|debug
argument_list|(
literal|"{} ignoring shard started task [{}] (shard does not exist anymore)"
argument_list|,
name|task
operator|.
name|shardId
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|builder
operator|.
name|success
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|matched
operator|.
name|initializing
argument_list|()
operator|==
literal|false
condition|)
block|{
assert|assert
name|matched
operator|.
name|active
argument_list|()
operator|:
literal|"expected active shard routing for task "
operator|+
name|task
operator|+
literal|" but found "
operator|+
name|matched
assert|;
comment|// same as above, this might have been a stale in-flight request, so we just ignore.
name|logger
operator|.
name|debug
argument_list|(
literal|"{} ignoring shard started task [{}] (shard exists but is not initializing: {})"
argument_list|,
name|task
operator|.
name|shardId
argument_list|,
name|task
argument_list|,
name|matched
argument_list|)
expr_stmt|;
name|builder
operator|.
name|success
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// remove duplicate actions as allocation service expects a clean list without duplicates
if|if
condition|(
name|seenShardRoutings
operator|.
name|contains
argument_list|(
name|matched
argument_list|)
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} ignoring shard started task [{}] (already scheduled to start {})"
argument_list|,
name|task
operator|.
name|shardId
argument_list|,
name|task
argument_list|,
name|matched
argument_list|)
expr_stmt|;
name|tasksToBeApplied
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} starting shard {} (shard started task: [{}])"
argument_list|,
name|task
operator|.
name|shardId
argument_list|,
name|matched
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|tasksToBeApplied
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|shardRoutingsToBeApplied
operator|.
name|add
argument_list|(
name|matched
argument_list|)
expr_stmt|;
name|seenShardRoutings
operator|.
name|add
argument_list|(
name|matched
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
assert|assert
name|tasksToBeApplied
operator|.
name|size
argument_list|()
operator|>=
name|shardRoutingsToBeApplied
operator|.
name|size
argument_list|()
assert|;
name|ClusterState
name|maybeUpdatedState
init|=
name|currentState
decl_stmt|;
try|try
block|{
name|RoutingAllocation
operator|.
name|Result
name|result
init|=
name|allocationService
operator|.
name|applyStartedShards
argument_list|(
name|currentState
argument_list|,
name|shardRoutingsToBeApplied
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|changed
argument_list|()
condition|)
block|{
name|maybeUpdatedState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|result
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|successes
argument_list|(
name|tasksToBeApplied
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to apply started shards {}"
argument_list|,
name|e
argument_list|,
name|shardRoutingsToBeApplied
argument_list|)
expr_stmt|;
name|builder
operator|.
name|failures
argument_list|(
name|tasksToBeApplied
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|(
name|maybeUpdatedState
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unexpected failure during [{}]"
argument_list|,
name|e
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ShardEntry
specifier|public
specifier|static
class|class
name|ShardEntry
extends|extends
name|TransportRequest
block|{
DECL|field|shardId
name|ShardId
name|shardId
decl_stmt|;
DECL|field|allocationId
name|String
name|allocationId
decl_stmt|;
DECL|field|primaryTerm
name|long
name|primaryTerm
decl_stmt|;
DECL|field|message
name|String
name|message
decl_stmt|;
DECL|field|failure
name|Exception
name|failure
decl_stmt|;
DECL|method|ShardEntry
specifier|public
name|ShardEntry
parameter_list|()
block|{         }
DECL|method|ShardEntry
specifier|public
name|ShardEntry
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|allocationId
parameter_list|,
name|long
name|primaryTerm
parameter_list|,
name|String
name|message
parameter_list|,
annotation|@
name|Nullable
name|Exception
name|failure
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|allocationId
operator|=
name|allocationId
expr_stmt|;
name|this
operator|.
name|primaryTerm
operator|=
name|primaryTerm
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|failure
operator|=
name|failure
expr_stmt|;
block|}
DECL|method|getShardId
specifier|public
name|ShardId
name|getShardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
DECL|method|getAllocationId
specifier|public
name|String
name|getAllocationId
parameter_list|()
block|{
return|return
name|allocationId
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|shardId
operator|=
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|allocationId
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|primaryTerm
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|message
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|failure
operator|=
name|in
operator|.
name|readException
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|shardId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|allocationId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|primaryTerm
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeException
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
literal|"shard id ["
operator|+
name|shardId
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
literal|"allocation id ["
operator|+
name|allocationId
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
literal|"primary term ["
operator|+
name|primaryTerm
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
literal|"message ["
operator|+
name|message
operator|+
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
name|components
operator|.
name|add
argument_list|(
literal|"failure ["
operator|+
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|failure
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|String
operator|.
name|join
argument_list|(
literal|", "
argument_list|,
name|components
argument_list|)
return|;
block|}
block|}
DECL|interface|Listener
specifier|public
interface|interface
name|Listener
block|{
DECL|method|onSuccess
specifier|default
name|void
name|onSuccess
parameter_list|()
block|{         }
comment|/**          * Notification for non-channel exceptions that are not handled          * by {@link ShardStateAction}.          *          * The exceptions that are handled by {@link ShardStateAction}          * are:          *  - {@link NotMasterException}          *  - {@link NodeDisconnectedException}          *  - {@link Discovery.FailedToCommitClusterStateException}          *          * Any other exception is communicated to the requester via          * this notification.          *          * @param e the unexpected cause of the failure on the master          */
DECL|method|onFailure
specifier|default
name|void
name|onFailure
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{         }
block|}
DECL|class|NoLongerPrimaryShardException
specifier|public
specifier|static
class|class
name|NoLongerPrimaryShardException
extends|extends
name|ElasticsearchException
block|{
DECL|method|NoLongerPrimaryShardException
specifier|public
name|NoLongerPrimaryShardException
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|setShard
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
block|}
DECL|method|NoLongerPrimaryShardException
specifier|public
name|NoLongerPrimaryShardException
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

