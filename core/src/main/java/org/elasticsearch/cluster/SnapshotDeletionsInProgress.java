begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
operator|.
name|Custom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A class that represents the snapshot deletions that are in progress in the cluster.  */
end_comment

begin_class
DECL|class|SnapshotDeletionsInProgress
specifier|public
class|class
name|SnapshotDeletionsInProgress
extends|extends
name|AbstractNamedDiffable
argument_list|<
name|Custom
argument_list|>
implements|implements
name|Custom
block|{
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"snapshot_deletions"
decl_stmt|;
comment|// the version where SnapshotDeletionsInProgress was introduced
DECL|field|VERSION_INTRODUCED
specifier|public
specifier|static
specifier|final
name|Version
name|VERSION_INTRODUCED
init|=
name|Version
operator|.
name|V_5_2_0
decl_stmt|;
comment|// the list of snapshot deletion request entries
DECL|field|entries
specifier|private
specifier|final
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
decl_stmt|;
DECL|method|SnapshotDeletionsInProgress
specifier|private
name|SnapshotDeletionsInProgress
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
DECL|method|SnapshotDeletionsInProgress
specifier|public
name|SnapshotDeletionsInProgress
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|entries
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|in
operator|.
name|readList
argument_list|(
name|Entry
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a new instance of {@link SnapshotDeletionsInProgress} with the given      * {@link Entry} added.      */
DECL|method|newInstance
specifier|public
specifier|static
name|SnapshotDeletionsInProgress
name|newInstance
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
return|return
operator|new
name|SnapshotDeletionsInProgress
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a new instance of {@link SnapshotDeletionsInProgress} which adds      * the given {@link Entry} to the invoking instance.      */
DECL|method|withAddedEntry
specifier|public
name|SnapshotDeletionsInProgress
name|withAddedEntry
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getEntries
argument_list|()
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
operator|new
name|SnapshotDeletionsInProgress
argument_list|(
name|entries
argument_list|)
return|;
block|}
comment|/**      * Returns a new instance of {@link SnapshotDeletionsInProgress} which removes      * the given entry from the invoking instance.      */
DECL|method|withRemovedEntry
specifier|public
name|SnapshotDeletionsInProgress
name|withRemovedEntry
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getEntries
argument_list|()
argument_list|)
decl_stmt|;
name|entries
operator|.
name|remove
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
operator|new
name|SnapshotDeletionsInProgress
argument_list|(
name|entries
argument_list|)
return|;
block|}
comment|/**      * Returns an unmodifiable list of snapshot deletion entries.      */
DECL|method|getEntries
specifier|public
name|List
argument_list|<
name|Entry
argument_list|>
name|getEntries
parameter_list|()
block|{
return|return
name|entries
return|;
block|}
comment|/**      * Returns {@code true} if there are snapshot deletions in progress in the cluster,      * returns {@code false} otherwise.      */
DECL|method|hasDeletionsInProgress
specifier|public
name|boolean
name|hasDeletionsInProgress
parameter_list|()
block|{
return|return
name|entries
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SnapshotDeletionsInProgress
name|that
init|=
operator|(
name|SnapshotDeletionsInProgress
operator|)
name|o
decl_stmt|;
return|return
name|entries
operator|.
name|equals
argument_list|(
name|that
operator|.
name|entries
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|+
name|entries
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeList
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
DECL|method|readDiffFrom
specifier|public
specifier|static
name|NamedDiff
argument_list|<
name|Custom
argument_list|>
name|readDiffFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readDiffFrom
argument_list|(
name|Custom
operator|.
name|class
argument_list|,
name|TYPE
argument_list|,
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMinimalSupportedVersion
specifier|public
name|Version
name|getMinimalSupportedVersion
parameter_list|()
block|{
return|return
name|VERSION_INTRODUCED
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"repository"
argument_list|,
name|entry
operator|.
name|snapshot
operator|.
name|getRepository
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"snapshot"
argument_list|,
name|entry
operator|.
name|snapshot
operator|.
name|getSnapshotId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|timeValueField
argument_list|(
literal|"start_time_millis"
argument_list|,
literal|"start_time"
argument_list|,
name|entry
operator|.
name|startTime
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"repository_state_id"
argument_list|,
name|entry
operator|.
name|repositoryStateId
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"SnapshotDeletionsInProgress["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|entries
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getSnapshotId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|entries
operator|.
name|size
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * A class representing a snapshot deletion request entry in the cluster state.      */
DECL|class|Entry
specifier|public
specifier|static
specifier|final
class|class
name|Entry
implements|implements
name|Writeable
block|{
DECL|field|snapshot
specifier|private
specifier|final
name|Snapshot
name|snapshot
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|repositoryStateId
specifier|private
specifier|final
name|long
name|repositoryStateId
decl_stmt|;
DECL|method|Entry
specifier|public
name|Entry
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|repositoryStateId
parameter_list|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|snapshot
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|repositoryStateId
operator|=
name|repositoryStateId
expr_stmt|;
block|}
DECL|method|Entry
specifier|public
name|Entry
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|snapshot
operator|=
operator|new
name|Snapshot
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|repositoryStateId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
comment|/**          * The snapshot to delete.          */
DECL|method|getSnapshot
specifier|public
name|Snapshot
name|getSnapshot
parameter_list|()
block|{
return|return
name|snapshot
return|;
block|}
comment|/**          * The start time in milliseconds for deleting the snapshots.          */
DECL|method|getStartTime
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
comment|/**          * The repository state id at the time the snapshot deletion began.          */
DECL|method|getRepositoryStateId
specifier|public
name|long
name|getRepositoryStateId
parameter_list|()
block|{
return|return
name|repositoryStateId
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Entry
name|that
init|=
operator|(
name|Entry
operator|)
name|o
decl_stmt|;
return|return
name|snapshot
operator|.
name|equals
argument_list|(
name|that
operator|.
name|snapshot
argument_list|)
operator|&&
name|startTime
operator|==
name|that
operator|.
name|startTime
operator|&&
name|repositoryStateId
operator|==
name|that
operator|.
name|repositoryStateId
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|snapshot
argument_list|,
name|startTime
argument_list|,
name|repositoryStateId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|snapshot
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|repositoryStateId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

