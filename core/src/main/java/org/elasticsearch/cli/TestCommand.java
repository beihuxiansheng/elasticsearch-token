begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cli
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|Terminal
import|;
end_import

begin_class
DECL|class|TestCommand
specifier|public
class|class
name|TestCommand
extends|extends
name|Command
block|{
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|exit
argument_list|(
operator|new
name|TestCommand
argument_list|()
operator|.
name|main
argument_list|(
name|args
argument_list|,
name|Terminal
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|TestCommand
specifier|public
name|TestCommand
parameter_list|()
block|{
name|super
argument_list|(
literal|"some test cli"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|accepts
argument_list|(
literal|"foo"
argument_list|,
literal|"some option"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|protected
name|int
name|execute
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|OptionSet
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|terminal
operator|.
name|println
argument_list|(
literal|"running"
argument_list|)
expr_stmt|;
return|return
name|ExitCodes
operator|.
name|OK
return|;
block|}
block|}
end_class

end_unit

