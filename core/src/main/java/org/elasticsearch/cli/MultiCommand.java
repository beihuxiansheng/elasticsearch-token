begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cli
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|NonOptionArgumentSpec
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_comment
comment|/**  * A cli tool which is made up of multiple subcommands.  */
end_comment

begin_class
DECL|class|MultiCommand
specifier|public
class|class
name|MultiCommand
extends|extends
name|Command
block|{
DECL|field|subcommands
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Command
argument_list|>
name|subcommands
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|arguments
specifier|private
specifier|final
name|NonOptionArgumentSpec
argument_list|<
name|String
argument_list|>
name|arguments
init|=
name|parser
operator|.
name|nonOptions
argument_list|(
literal|"command"
argument_list|)
decl_stmt|;
DECL|method|MultiCommand
specifier|public
name|MultiCommand
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|super
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|parser
operator|.
name|posixlyCorrect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|printAdditionalHelp
specifier|protected
name|void
name|printAdditionalHelp
parameter_list|(
name|Terminal
name|terminal
parameter_list|)
block|{
if|if
condition|(
name|subcommands
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No subcommands configured"
argument_list|)
throw|;
block|}
name|terminal
operator|.
name|println
argument_list|(
literal|"Commands"
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|println
argument_list|(
literal|"--------"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Command
argument_list|>
name|subcommand
range|:
name|subcommands
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|terminal
operator|.
name|println
argument_list|(
name|subcommand
operator|.
name|getKey
argument_list|()
operator|+
literal|" - "
operator|+
name|subcommand
operator|.
name|getValue
argument_list|()
operator|.
name|description
argument_list|)
expr_stmt|;
block|}
name|terminal
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|protected
name|void
name|execute
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|OptionSet
name|options
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|subcommands
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No subcommands configured"
argument_list|)
throw|;
block|}
name|String
index|[]
name|args
init|=
name|arguments
operator|.
name|values
argument_list|(
name|options
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|UserException
argument_list|(
name|ExitCodes
operator|.
name|USAGE
argument_list|,
literal|"Missing command"
argument_list|)
throw|;
block|}
name|Command
name|subcommand
init|=
name|subcommands
operator|.
name|get
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|subcommand
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UserException
argument_list|(
name|ExitCodes
operator|.
name|USAGE
argument_list|,
literal|"Unknown command ["
operator|+
name|args
index|[
literal|0
index|]
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|subcommand
operator|.
name|mainWithoutErrorHandling
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|args
argument_list|,
literal|1
argument_list|,
name|args
operator|.
name|length
argument_list|)
argument_list|,
name|terminal
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

