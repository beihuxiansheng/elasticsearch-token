begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cli
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|util
operator|.
name|KeyValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalSettingsPreparer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** A cli command which requires an {@link org.elasticsearch.env.Environment} to use current paths and settings. */
end_comment

begin_class
DECL|class|EnvironmentAwareCommand
specifier|public
specifier|abstract
class|class
name|EnvironmentAwareCommand
extends|extends
name|Command
block|{
DECL|field|settingOption
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|KeyValuePair
argument_list|>
name|settingOption
decl_stmt|;
DECL|method|EnvironmentAwareCommand
specifier|public
name|EnvironmentAwareCommand
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|super
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|this
operator|.
name|settingOption
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"E"
argument_list|,
literal|"Configure a setting"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|KeyValuePair
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|protected
name|void
name|execute
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|OptionSet
name|options
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|settings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|KeyValuePair
name|kvp
range|:
name|settingOption
operator|.
name|values
argument_list|(
name|options
argument_list|)
control|)
block|{
if|if
condition|(
name|kvp
operator|.
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UserException
argument_list|(
name|ExitCodes
operator|.
name|USAGE
argument_list|,
literal|"Setting ["
operator|+
name|kvp
operator|.
name|key
operator|+
literal|"] must not be empty"
argument_list|)
throw|;
block|}
name|settings
operator|.
name|put
argument_list|(
name|kvp
operator|.
name|key
argument_list|,
name|kvp
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|putSystemPropertyIfSettingIsMissing
argument_list|(
name|settings
argument_list|,
literal|"path.conf"
argument_list|,
literal|"es.path.conf"
argument_list|)
expr_stmt|;
name|putSystemPropertyIfSettingIsMissing
argument_list|(
name|settings
argument_list|,
literal|"path.data"
argument_list|,
literal|"es.path.data"
argument_list|)
expr_stmt|;
name|putSystemPropertyIfSettingIsMissing
argument_list|(
name|settings
argument_list|,
literal|"path.home"
argument_list|,
literal|"es.path.home"
argument_list|)
expr_stmt|;
name|putSystemPropertyIfSettingIsMissing
argument_list|(
name|settings
argument_list|,
literal|"path.logs"
argument_list|,
literal|"es.path.logs"
argument_list|)
expr_stmt|;
name|execute
argument_list|(
name|terminal
argument_list|,
name|options
argument_list|,
name|createEnv
argument_list|(
name|terminal
argument_list|,
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Create an {@link Environment} for the command to use. Overrideable for tests. */
DECL|method|createEnv
specifier|protected
name|Environment
name|createEnv
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|settings
parameter_list|)
block|{
return|return
name|InternalSettingsPreparer
operator|.
name|prepareEnvironment
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|terminal
argument_list|,
name|settings
argument_list|)
return|;
block|}
comment|/** Ensure the given setting exists, reading it from system properties if not already set. */
DECL|method|putSystemPropertyIfSettingIsMissing
specifier|protected
specifier|static
name|void
name|putSystemPropertyIfSettingIsMissing
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|settings
parameter_list|,
specifier|final
name|String
name|setting
parameter_list|,
specifier|final
name|String
name|key
parameter_list|)
block|{
specifier|final
name|String
name|value
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|containsKey
argument_list|(
name|setting
argument_list|)
condition|)
block|{
specifier|final
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"duplicate setting [%s] found via command-line [%s] and system property [%s]"
argument_list|,
name|setting
argument_list|,
name|settings
operator|.
name|get
argument_list|(
name|setting
argument_list|)
argument_list|,
name|value
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
else|else
block|{
name|settings
operator|.
name|put
argument_list|(
name|setting
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Execute the command with the initialized {@link Environment}. */
DECL|method|execute
specifier|protected
specifier|abstract
name|void
name|execute
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|OptionSet
name|options
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
end_class

end_unit

