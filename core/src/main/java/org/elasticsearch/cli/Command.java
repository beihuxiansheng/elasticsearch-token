begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cli
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|joptsimple
operator|.
name|OptionException
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SetOnce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|LogConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * An action to execute within a cli.  */
end_comment

begin_class
DECL|class|Command
specifier|public
specifier|abstract
class|class
name|Command
implements|implements
name|Closeable
block|{
comment|/** A description of the command, used in the help output. */
DECL|field|description
specifier|protected
specifier|final
name|String
name|description
decl_stmt|;
comment|/** The option parser for this command. */
DECL|field|parser
specifier|protected
specifier|final
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
DECL|field|helpOption
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|helpOption
init|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|)
argument_list|,
literal|"show help"
argument_list|)
operator|.
name|forHelp
argument_list|()
decl_stmt|;
DECL|field|silentOption
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|silentOption
init|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"s"
argument_list|,
literal|"silent"
argument_list|)
argument_list|,
literal|"show minimal output"
argument_list|)
decl_stmt|;
DECL|field|verboseOption
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|verboseOption
init|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"v"
argument_list|,
literal|"verbose"
argument_list|)
argument_list|,
literal|"show verbose output"
argument_list|)
operator|.
name|availableUnless
argument_list|(
name|silentOption
argument_list|)
decl_stmt|;
DECL|method|Command
specifier|public
name|Command
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
DECL|field|shutdownHookThread
specifier|final
name|SetOnce
argument_list|<
name|Thread
argument_list|>
name|shutdownHookThread
init|=
operator|new
name|SetOnce
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Parses options for this command from args and executes it. */
DECL|method|main
specifier|public
specifier|final
name|int
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|Terminal
name|terminal
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|addShutdownHook
argument_list|()
condition|)
block|{
name|shutdownHookThread
operator|.
name|set
argument_list|(
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|this
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
try|try
init|(
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
init|;                         final PrintWriter pw = new PrintWriter(sw)
argument_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|pw
argument_list|)
block|;
name|terminal
operator|.
name|println
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|impossible
parameter_list|)
block|{
comment|// StringWriter#close declares a checked IOException from the Closeable interface but the Javadocs for StringWriter
comment|// say that an exception here is impossible
throw|throw
operator|new
name|AssertionError
argument_list|(
name|impossible
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
name|shutdownHookThread
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// initialize default for es.logger.level because we will not read the log4j2.properties
end_comment

begin_decl_stmt
unit|final
name|String
name|loggerLevel
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"es.logger.level"
argument_list|,
name|Level
operator|.
name|INFO
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"logger.level"
argument_list|,
name|loggerLevel
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|LogConfigurator
operator|.
name|configureWithoutConfig
argument_list|(
name|settings
argument_list|)
expr_stmt|;
end_expr_stmt

begin_try
try|try
block|{
name|mainWithoutErrorHandling
argument_list|(
name|args
argument_list|,
name|terminal
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OptionException
name|e
parameter_list|)
block|{
name|printHelp
argument_list|(
name|terminal
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|println
argument_list|(
name|Terminal
operator|.
name|Verbosity
operator|.
name|SILENT
argument_list|,
literal|"ERROR: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ExitCodes
operator|.
name|USAGE
return|;
block|}
catch|catch
parameter_list|(
name|UserException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|exitCode
operator|==
name|ExitCodes
operator|.
name|USAGE
condition|)
block|{
name|printHelp
argument_list|(
name|terminal
argument_list|)
expr_stmt|;
block|}
name|terminal
operator|.
name|println
argument_list|(
name|Terminal
operator|.
name|Verbosity
operator|.
name|SILENT
argument_list|,
literal|"ERROR: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|e
operator|.
name|exitCode
return|;
block|}
end_try

begin_return
return|return
name|ExitCodes
operator|.
name|OK
return|;
end_return

begin_comment
unit|}
comment|/**      * Executes the command, but all errors are thrown.      */
end_comment

begin_expr_stmt
DECL|method|mainWithoutErrorHandling
unit|void
name|mainWithoutErrorHandling
argument_list|(
name|String
index|[]
name|args
argument_list|,
name|Terminal
name|terminal
argument_list|)
throws|throws
name|Exception
block|{
name|final
name|OptionSet
name|options
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|helpOption
argument_list|)
condition|)
block|{
name|printHelp
argument_list|(
name|terminal
argument_list|)
expr_stmt|;
return|return;
block|}
end_if

begin_if
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|silentOption
argument_list|)
condition|)
block|{
name|terminal
operator|.
name|setVerbosity
argument_list|(
name|Terminal
operator|.
name|Verbosity
operator|.
name|SILENT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|verboseOption
argument_list|)
condition|)
block|{
name|terminal
operator|.
name|setVerbosity
argument_list|(
name|Terminal
operator|.
name|Verbosity
operator|.
name|VERBOSE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|terminal
operator|.
name|setVerbosity
argument_list|(
name|Terminal
operator|.
name|Verbosity
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|execute
argument_list|(
name|terminal
argument_list|,
name|options
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/** Prints a help message for the command to the terminal. */
end_comment

begin_function
DECL|method|printHelp
unit|private
name|void
name|printHelp
parameter_list|(
name|Terminal
name|terminal
parameter_list|)
throws|throws
name|IOException
block|{
name|terminal
operator|.
name|println
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|printAdditionalHelp
argument_list|(
name|terminal
argument_list|)
expr_stmt|;
name|parser
operator|.
name|printHelpOn
argument_list|(
name|terminal
operator|.
name|getWriter
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/** Prints additional help information, specific to the command */
end_comment

begin_function
DECL|method|printAdditionalHelp
specifier|protected
name|void
name|printAdditionalHelp
parameter_list|(
name|Terminal
name|terminal
parameter_list|)
block|{}
end_function

begin_function
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"Allowed to exit explicitly from #main()"
argument_list|)
DECL|method|exit
specifier|protected
specifier|static
name|void
name|exit
parameter_list|(
name|int
name|status
parameter_list|)
block|{
name|System
operator|.
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Executes this command.      *      * Any runtime user errors (like an input file that does not exist), should throw a {@link UserException}. */
end_comment

begin_function_decl
DECL|method|execute
specifier|protected
specifier|abstract
name|void
name|execute
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|OptionSet
name|options
parameter_list|)
throws|throws
name|Exception
function_decl|;
end_function_decl

begin_comment
comment|/**      * Return whether or not to install the shutdown hook to cleanup resources on exit. This method should only be overridden in test      * classes.      *      * @return whether or not to install the shutdown hook      */
end_comment

begin_function
DECL|method|addShutdownHook
specifier|protected
name|boolean
name|addShutdownHook
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{      }
end_function

unit|}
end_unit

