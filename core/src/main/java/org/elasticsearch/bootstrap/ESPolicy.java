begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|CodeSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PermissionCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|ProtectionDomain
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|URIParameter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** custom policy for union of static and dynamic permissions */
end_comment

begin_class
DECL|class|ESPolicy
specifier|final
class|class
name|ESPolicy
extends|extends
name|Policy
block|{
comment|/** template policy file, the one used in tests */
DECL|field|POLICY_RESOURCE
specifier|static
specifier|final
name|String
name|POLICY_RESOURCE
init|=
literal|"security.policy"
decl_stmt|;
comment|/** limited policy for scripts */
DECL|field|UNTRUSTED_RESOURCE
specifier|static
specifier|final
name|String
name|UNTRUSTED_RESOURCE
init|=
literal|"untrusted.policy"
decl_stmt|;
DECL|field|template
specifier|final
name|Policy
name|template
decl_stmt|;
DECL|field|untrusted
specifier|final
name|Policy
name|untrusted
decl_stmt|;
DECL|field|dynamic
specifier|final
name|PermissionCollection
name|dynamic
decl_stmt|;
DECL|field|plugins
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PermissionCollection
argument_list|>
name|plugins
decl_stmt|;
DECL|method|ESPolicy
specifier|public
name|ESPolicy
parameter_list|(
name|PermissionCollection
name|dynamic
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PermissionCollection
argument_list|>
name|plugins
parameter_list|)
throws|throws
name|Exception
block|{
name|URI
name|policyUri
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|POLICY_RESOURCE
argument_list|)
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|URI
name|untrustedUri
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|UNTRUSTED_RESOURCE
argument_list|)
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|this
operator|.
name|template
operator|=
name|Policy
operator|.
name|getInstance
argument_list|(
literal|"JavaPolicy"
argument_list|,
operator|new
name|URIParameter
argument_list|(
name|policyUri
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|untrusted
operator|=
name|Policy
operator|.
name|getInstance
argument_list|(
literal|"JavaPolicy"
argument_list|,
operator|new
name|URIParameter
argument_list|(
name|untrustedUri
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|dynamic
operator|=
name|dynamic
expr_stmt|;
name|this
operator|.
name|plugins
operator|=
name|plugins
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"fast equals check is desired"
argument_list|)
DECL|method|implies
specifier|public
name|boolean
name|implies
parameter_list|(
name|ProtectionDomain
name|domain
parameter_list|,
name|Permission
name|permission
parameter_list|)
block|{
name|CodeSource
name|codeSource
init|=
name|domain
operator|.
name|getCodeSource
argument_list|()
decl_stmt|;
comment|// codesource can be null when reducing privileges via doPrivileged()
if|if
condition|(
name|codeSource
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|URL
name|location
init|=
name|codeSource
operator|.
name|getLocation
argument_list|()
decl_stmt|;
comment|// location can be null... ??? nobody knows
comment|// https://bugs.openjdk.java.net/browse/JDK-8129972
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
comment|// run scripts with limited permissions
if|if
condition|(
name|BootstrapInfo
operator|.
name|UNTRUSTED_CODEBASE
operator|.
name|equals
argument_list|(
name|location
operator|.
name|getFile
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|untrusted
operator|.
name|implies
argument_list|(
name|domain
argument_list|,
name|permission
argument_list|)
return|;
block|}
comment|// check for an additional plugin permission
name|PermissionCollection
name|plugin
init|=
name|plugins
operator|.
name|get
argument_list|(
name|location
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|plugin
operator|!=
literal|null
operator|&&
name|plugin
operator|.
name|implies
argument_list|(
name|permission
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// Special handling for broken AWS code which destroys all SSL security
comment|// REMOVE THIS when https://github.com/aws/aws-sdk-java/pull/432 is fixed
if|if
condition|(
name|permission
operator|instanceof
name|RuntimePermission
operator|&&
literal|"accessClassInPackage.sun.security.ssl"
operator|.
name|equals
argument_list|(
name|permission
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|StackTraceElement
name|element
range|:
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
if|if
condition|(
literal|"com.amazonaws.http.conn.ssl.SdkTLSSocketFactory"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|&&
literal|"verifyMasterSecret"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getMethodName
argument_list|()
argument_list|)
condition|)
block|{
comment|// we found the horrible method: the hack begins!
comment|// force the aws code to back down, by throwing an exception that it catches.
name|rethrow
argument_list|(
operator|new
name|IllegalAccessException
argument_list|(
literal|"no amazon, you cannot do this."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// otherwise defer to template + dynamic file permissions
return|return
name|template
operator|.
name|implies
argument_list|(
name|domain
argument_list|,
name|permission
argument_list|)
operator|||
name|dynamic
operator|.
name|implies
argument_list|(
name|permission
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPermissions
specifier|public
name|PermissionCollection
name|getPermissions
parameter_list|(
name|CodeSource
name|codesource
parameter_list|)
block|{
comment|// code should not rely on this method, or at least use it correctly:
comment|// https://bugs.openjdk.java.net/browse/JDK-8014008
comment|// return them a new empty permissions object so jvisualvm etc work
for|for
control|(
name|StackTraceElement
name|element
range|:
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
if|if
condition|(
literal|"sun.rmi.server.LoaderHandler"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|&&
literal|"loadClass"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getMethodName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|Permissions
argument_list|()
return|;
block|}
block|}
comment|// return UNSUPPORTED_EMPTY_COLLECTION since it is safe.
return|return
name|super
operator|.
name|getPermissions
argument_list|(
name|codesource
argument_list|)
return|;
block|}
comment|/**      * Classy puzzler to rethrow any checked exception as an unchecked one.      */
DECL|class|Rethrower
specifier|private
specifier|static
class|class
name|Rethrower
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
block|{
DECL|method|rethrow
specifier|private
name|void
name|rethrow
parameter_list|(
name|Throwable
name|t
parameter_list|)
throws|throws
name|T
block|{
throw|throw
operator|(
name|T
operator|)
name|t
throw|;
block|}
block|}
comment|/**      * Rethrows<code>t</code> (identical object).      */
DECL|method|rethrow
specifier|private
name|void
name|rethrow
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
operator|new
name|Rethrower
argument_list|<
name|Error
argument_list|>
argument_list|()
operator|.
name|rethrow
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

