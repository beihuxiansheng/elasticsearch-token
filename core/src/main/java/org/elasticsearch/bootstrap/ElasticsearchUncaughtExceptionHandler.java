begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOError
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_class
DECL|class|ElasticsearchUncaughtExceptionHandler
class|class
name|ElasticsearchUncaughtExceptionHandler
implements|implements
name|Thread
operator|.
name|UncaughtExceptionHandler
block|{
DECL|field|loggingPrefixSupplier
specifier|private
specifier|final
name|Supplier
argument_list|<
name|String
argument_list|>
name|loggingPrefixSupplier
decl_stmt|;
DECL|method|ElasticsearchUncaughtExceptionHandler
name|ElasticsearchUncaughtExceptionHandler
parameter_list|(
specifier|final
name|Supplier
argument_list|<
name|String
argument_list|>
name|loggingPrefixSupplier
parameter_list|)
block|{
name|this
operator|.
name|loggingPrefixSupplier
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|loggingPrefixSupplier
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uncaughtException
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|isFatalUncaught
argument_list|(
name|e
argument_list|)
condition|)
block|{
try|try
block|{
name|onFatalUncaught
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// we use specific error codes in case the above notification failed, at least we
comment|// will have some indication of the error bringing us down
if|if
condition|(
name|e
operator|instanceof
name|InternalError
condition|)
block|{
name|halt
argument_list|(
literal|128
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|OutOfMemoryError
condition|)
block|{
name|halt
argument_list|(
literal|127
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|StackOverflowError
condition|)
block|{
name|halt
argument_list|(
literal|126
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|UnknownError
condition|)
block|{
name|halt
argument_list|(
literal|125
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|IOError
condition|)
block|{
name|halt
argument_list|(
literal|124
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|halt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|onNonFatalUncaught
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// visible for testing
DECL|method|isFatalUncaught
specifier|static
name|boolean
name|isFatalUncaught
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return
name|isFatalCause
argument_list|(
name|e
argument_list|)
operator|||
operator|(
name|e
operator|instanceof
name|MergePolicy
operator|.
name|MergeException
operator|&&
name|isFatalCause
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
operator|)
return|;
block|}
DECL|method|isFatalCause
specifier|private
specifier|static
name|boolean
name|isFatalCause
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
return|return
name|cause
operator|instanceof
name|Error
return|;
block|}
comment|// visible for testing
DECL|method|onFatalUncaught
name|void
name|onFatalUncaught
parameter_list|(
specifier|final
name|String
name|threadName
parameter_list|,
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ElasticsearchUncaughtExceptionHandler
operator|.
name|class
argument_list|,
name|loggingPrefixSupplier
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"fatal error in thread [{}], exiting"
argument_list|,
name|t
argument_list|,
name|threadName
argument_list|)
expr_stmt|;
block|}
comment|// visible for testing
DECL|method|onNonFatalUncaught
name|void
name|onNonFatalUncaught
parameter_list|(
specifier|final
name|String
name|threadName
parameter_list|,
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ElasticsearchUncaughtExceptionHandler
operator|.
name|class
argument_list|,
name|loggingPrefixSupplier
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"uncaught exception in thread [{}]"
argument_list|,
name|t
argument_list|,
name|threadName
argument_list|)
expr_stmt|;
block|}
comment|// visible for testing
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"halt"
argument_list|)
DECL|method|halt
name|void
name|halt
parameter_list|(
name|int
name|status
parameter_list|)
block|{
comment|// we halt to prevent shutdown hooks from running
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|halt
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

