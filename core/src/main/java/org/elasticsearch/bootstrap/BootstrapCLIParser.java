begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Build
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|ExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|UserError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmInfo
import|;
end_import

begin_class
DECL|class|BootstrapCliParser
specifier|final
class|class
name|BootstrapCliParser
extends|extends
name|Command
block|{
DECL|field|versionOption
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|versionOption
decl_stmt|;
DECL|field|daemonizeOption
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|daemonizeOption
decl_stmt|;
DECL|field|pidfileOption
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|pidfileOption
decl_stmt|;
DECL|field|propertyOption
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|propertyOption
decl_stmt|;
DECL|field|shouldRun
specifier|private
name|boolean
name|shouldRun
init|=
literal|false
decl_stmt|;
DECL|method|BootstrapCliParser
name|BootstrapCliParser
parameter_list|()
block|{
name|super
argument_list|(
literal|"Starts elasticsearch"
argument_list|)
expr_stmt|;
comment|// TODO: in jopt-simple 5.0, make this mutually exclusive with all other options
name|versionOption
operator|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"V"
argument_list|,
literal|"version"
argument_list|)
argument_list|,
literal|"Prints elasticsearch version information and exits"
argument_list|)
expr_stmt|;
name|daemonizeOption
operator|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"d"
argument_list|,
literal|"daemonize"
argument_list|)
argument_list|,
literal|"Starts Elasticsearch in the background"
argument_list|)
expr_stmt|;
comment|// TODO: in jopt-simple 5.0 this option type can be a Path
name|pidfileOption
operator|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p"
argument_list|,
literal|"pidfile"
argument_list|)
argument_list|,
literal|"Creates a pid file in the specified path on start"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
expr_stmt|;
name|propertyOption
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"E"
argument_list|,
literal|"Configures an Elasticsearch setting"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|protected
name|void
name|execute
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|OptionSet
name|options
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|versionOption
argument_list|)
condition|)
block|{
name|terminal
operator|.
name|println
argument_list|(
literal|"Version: "
operator|+
name|org
operator|.
name|elasticsearch
operator|.
name|Version
operator|.
name|CURRENT
operator|+
literal|", Build: "
operator|+
name|Build
operator|.
name|CURRENT
operator|.
name|shortHash
argument_list|()
operator|+
literal|"/"
operator|+
name|Build
operator|.
name|CURRENT
operator|.
name|date
argument_list|()
operator|+
literal|", JVM: "
operator|+
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// TODO: don't use sysprops for any of these! pass the args through to bootstrap...
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|daemonizeOption
argument_list|)
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"es.foreground"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
name|String
name|pidFile
init|=
name|pidfileOption
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|pidFile
argument_list|)
operator|==
literal|false
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"es.pidfile"
argument_list|,
name|pidFile
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|property
range|:
name|propertyOption
operator|.
name|values
argument_list|(
name|options
argument_list|)
control|)
block|{
name|String
index|[]
name|keyValue
init|=
name|property
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyValue
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|UserError
argument_list|(
name|ExitCodes
operator|.
name|USAGE
argument_list|,
literal|"Malformed elasticsearch setting, must be of the form key=value"
argument_list|)
throw|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
literal|"es."
operator|+
name|keyValue
index|[
literal|0
index|]
argument_list|,
name|keyValue
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|shouldRun
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|shouldRun
name|boolean
name|shouldRun
parameter_list|()
block|{
return|return
name|shouldRun
return|;
block|}
block|}
end_class

end_unit

