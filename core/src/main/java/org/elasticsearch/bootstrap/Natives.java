begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_comment
comment|/**  * The Natives class is a wrapper class that checks if the classes necessary for calling native methods are available on  * startup. If they are not available, this class will avoid calling code that loads these classes.  */
end_comment

begin_class
DECL|class|Natives
specifier|final
class|class
name|Natives
block|{
comment|/** no instantiation */
DECL|method|Natives
specifier|private
name|Natives
parameter_list|()
block|{}
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|Natives
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// marker to determine if the JNA class files are available to the JVM
DECL|field|JNA_AVAILABLE
specifier|static
specifier|final
name|boolean
name|JNA_AVAILABLE
decl_stmt|;
static|static
block|{
name|boolean
name|v
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// load one of the main JNA classes to see if the classes are available. this does not ensure that all native
comment|// libraries are available, only the ones necessary by JNA to function
name|Class
operator|.
name|forName
argument_list|(
literal|"com.sun.jna.Native"
argument_list|)
expr_stmt|;
name|v
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"JNA not found. native methods will be disabled."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsatisfiedLinkError
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"unable to load JNA native support library, native methods will be disabled."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|JNA_AVAILABLE
operator|=
name|v
expr_stmt|;
block|}
DECL|method|tryMlockall
specifier|static
name|void
name|tryMlockall
parameter_list|()
block|{
if|if
condition|(
operator|!
name|JNA_AVAILABLE
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"cannot mlockall because JNA is not available"
argument_list|)
expr_stmt|;
return|return;
block|}
name|JNANatives
operator|.
name|tryMlockall
argument_list|()
expr_stmt|;
block|}
DECL|method|definitelyRunningAsRoot
specifier|static
name|boolean
name|definitelyRunningAsRoot
parameter_list|()
block|{
if|if
condition|(
operator|!
name|JNA_AVAILABLE
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"cannot check if running as root because JNA is not available"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|JNANatives
operator|.
name|definitelyRunningAsRoot
argument_list|()
return|;
block|}
DECL|method|tryVirtualLock
specifier|static
name|void
name|tryVirtualLock
parameter_list|()
block|{
if|if
condition|(
operator|!
name|JNA_AVAILABLE
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"cannot mlockall because JNA is not available"
argument_list|)
expr_stmt|;
return|return;
block|}
name|JNANatives
operator|.
name|tryVirtualLock
argument_list|()
expr_stmt|;
block|}
DECL|method|addConsoleCtrlHandler
specifier|static
name|void
name|addConsoleCtrlHandler
parameter_list|(
name|ConsoleCtrlHandler
name|handler
parameter_list|)
block|{
if|if
condition|(
operator|!
name|JNA_AVAILABLE
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"cannot register console handler because JNA is not available"
argument_list|)
expr_stmt|;
return|return;
block|}
name|JNANatives
operator|.
name|addConsoleCtrlHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
DECL|method|isMemoryLocked
specifier|static
name|boolean
name|isMemoryLocked
parameter_list|()
block|{
if|if
condition|(
operator|!
name|JNA_AVAILABLE
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|JNANatives
operator|.
name|LOCAL_MLOCKALL
return|;
block|}
block|}
end_class

end_unit

