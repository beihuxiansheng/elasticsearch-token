begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Spawns native plugin controller processes if present.  Will only work prior to a system call filter being installed.  */
end_comment

begin_class
DECL|class|Spawner
specifier|final
class|class
name|Spawner
implements|implements
name|Closeable
block|{
DECL|field|PROGRAM_NAME
specifier|private
specifier|static
specifier|final
name|String
name|PROGRAM_NAME
init|=
name|Constants
operator|.
name|WINDOWS
condition|?
literal|"controller.exe"
else|:
literal|"controller"
decl_stmt|;
DECL|field|PLATFORM_NAME
specifier|private
specifier|static
specifier|final
name|String
name|PLATFORM_NAME
init|=
name|makePlatformName
argument_list|(
name|Constants
operator|.
name|OS_NAME
argument_list|,
name|Constants
operator|.
name|OS_ARCH
argument_list|)
decl_stmt|;
DECL|field|TMP_ENVVAR
specifier|private
specifier|static
specifier|final
name|String
name|TMP_ENVVAR
init|=
literal|"TMPDIR"
decl_stmt|;
comment|/**      * References to the processes that have been spawned, so that we can destroy them.      */
DECL|field|processes
specifier|private
specifier|final
name|List
argument_list|<
name|Process
argument_list|>
name|processes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|IOUtils
operator|.
name|close
argument_list|(
parameter_list|()
lambda|->
name|processes
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
operator|(
name|Closeable
operator|)
name|s
operator|::
name|destroy
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|processes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * For each plugin, attempt to spawn the controller daemon.  Silently ignore any plugins      * that don't include a controller for the correct platform.      */
DECL|method|spawnNativePluginControllers
name|void
name|spawnNativePluginControllers
parameter_list|(
name|Environment
name|environment
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|environment
operator|.
name|pluginsFile
argument_list|()
argument_list|)
condition|)
block|{
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|environment
operator|.
name|pluginsFile
argument_list|()
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|plugin
range|:
name|stream
control|)
block|{
name|Path
name|spawnPath
init|=
name|makeSpawnPath
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isRegularFile
argument_list|(
name|spawnPath
argument_list|)
condition|)
block|{
name|spawnNativePluginController
argument_list|(
name|spawnPath
argument_list|,
name|environment
operator|.
name|tmpFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Attempt to spawn the controller daemon for a given plugin.  The spawned process      * will remain connected to this JVM via its stdin, stdout and stderr, but the      * references to these streams are not available to code outside this package.      */
DECL|method|spawnNativePluginController
specifier|private
name|void
name|spawnNativePluginController
parameter_list|(
name|Path
name|spawnPath
parameter_list|,
name|Path
name|tmpPath
parameter_list|)
throws|throws
name|IOException
block|{
name|ProcessBuilder
name|pb
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|spawnPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// The only environment variable passes on the path to the temporary directory
name|pb
operator|.
name|environment
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pb
operator|.
name|environment
argument_list|()
operator|.
name|put
argument_list|(
name|TMP_ENVVAR
argument_list|,
name|tmpPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// The output stream of the Process object corresponds to the daemon's stdin
name|processes
operator|.
name|add
argument_list|(
name|pb
operator|.
name|start
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getProcesses
name|List
argument_list|<
name|Process
argument_list|>
name|getProcesses
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|processes
argument_list|)
return|;
block|}
comment|/**      * Make the full path to the program to be spawned.      */
DECL|method|makeSpawnPath
specifier|static
name|Path
name|makeSpawnPath
parameter_list|(
name|Path
name|plugin
parameter_list|)
block|{
return|return
name|plugin
operator|.
name|resolve
argument_list|(
literal|"platform"
argument_list|)
operator|.
name|resolve
argument_list|(
name|PLATFORM_NAME
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
operator|.
name|resolve
argument_list|(
name|PROGRAM_NAME
argument_list|)
return|;
block|}
comment|/**      * Make the platform name in the format used in Kibana downloads, for example:      * - darwin-x86_64      * - linux-x86-64      * - windows-x86_64      * For *nix platforms this is more-or-less `uname -s`-`uname -m` converted to lower case.      * However, for consistency between different operating systems on the same architecture      * "amd64" is replaced with "x86_64" and "i386" with "x86".      * For Windows it's "windows-" followed by either "x86" or "x86_64".      */
DECL|method|makePlatformName
specifier|static
name|String
name|makePlatformName
parameter_list|(
name|String
name|osName
parameter_list|,
name|String
name|osArch
parameter_list|)
block|{
name|String
name|os
init|=
name|osName
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|os
operator|.
name|startsWith
argument_list|(
literal|"windows"
argument_list|)
condition|)
block|{
name|os
operator|=
literal|"windows"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|os
operator|.
name|equals
argument_list|(
literal|"mac os x"
argument_list|)
condition|)
block|{
name|os
operator|=
literal|"darwin"
expr_stmt|;
block|}
name|String
name|cpu
init|=
name|osArch
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpu
operator|.
name|equals
argument_list|(
literal|"amd64"
argument_list|)
condition|)
block|{
name|cpu
operator|=
literal|"x86_64"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cpu
operator|.
name|equals
argument_list|(
literal|"i386"
argument_list|)
condition|)
block|{
name|cpu
operator|=
literal|"x86"
expr_stmt|;
block|}
return|return
name|os
operator|+
literal|"-"
operator|+
name|cpu
return|;
block|}
block|}
end_class

end_unit

