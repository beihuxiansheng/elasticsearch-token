begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Platforms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|PluginInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * Spawns native plugin controller processes if present. Will only work prior to a system call  * filter being installed.  */
end_comment

begin_class
DECL|class|Spawner
specifier|final
class|class
name|Spawner
implements|implements
name|Closeable
block|{
comment|/*      * References to the processes that have been spawned, so that we can destroy them.      */
DECL|field|processes
specifier|private
specifier|final
name|List
argument_list|<
name|Process
argument_list|>
name|processes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|spawned
specifier|private
name|AtomicBoolean
name|spawned
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|close
argument_list|(
parameter_list|()
lambda|->
name|processes
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
operator|(
name|Closeable
operator|)
name|s
operator|::
name|destroy
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Spawns the native controllers for each plugin      *      * @param environment the node environment      * @throws IOException if an I/O error occurs reading the plugins or spawning a native process      */
DECL|method|spawnNativePluginControllers
name|void
name|spawnNativePluginControllers
parameter_list|(
specifier|final
name|Environment
name|environment
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|spawned
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"native controllers already spawned"
argument_list|)
throw|;
block|}
specifier|final
name|Path
name|pluginsFile
init|=
name|environment
operator|.
name|pluginsFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|pluginsFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"plugins directory ["
operator|+
name|pluginsFile
operator|+
literal|"] not found"
argument_list|)
throw|;
block|}
comment|/*          * For each plugin, attempt to spawn the controller daemon. Silently ignore any plugin that          * don't include a controller for the correct platform.          */
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|pluginsFile
argument_list|)
init|)
block|{
for|for
control|(
specifier|final
name|Path
name|plugin
range|:
name|stream
control|)
block|{
specifier|final
name|PluginInfo
name|info
init|=
name|PluginInfo
operator|.
name|readFromProperties
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|spawnPath
init|=
name|Platforms
operator|.
name|nativeControllerPath
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|isRegularFile
argument_list|(
name|spawnPath
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|info
operator|.
name|hasNativeController
argument_list|()
condition|)
block|{
specifier|final
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"plugin [%s] does not have permission to fork native controller"
argument_list|,
name|plugin
operator|.
name|getFileName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
specifier|final
name|Process
name|process
init|=
name|spawnNativePluginController
argument_list|(
name|spawnPath
argument_list|,
name|environment
operator|.
name|tmpFile
argument_list|()
argument_list|)
decl_stmt|;
name|processes
operator|.
name|add
argument_list|(
name|process
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Attempt to spawn the controller daemon for a given plugin. The spawned process will remain      * connected to this JVM via its stdin, stdout, and stderr streams, but the references to these      * streams are not available to code outside this package.      */
DECL|method|spawnNativePluginController
specifier|private
name|Process
name|spawnNativePluginController
parameter_list|(
specifier|final
name|Path
name|spawnPath
parameter_list|,
specifier|final
name|Path
name|tmpPath
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ProcessBuilder
name|pb
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|spawnPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// the only environment variable passes on the path to the temporary directory
name|pb
operator|.
name|environment
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pb
operator|.
name|environment
argument_list|()
operator|.
name|put
argument_list|(
literal|"TMPDIR"
argument_list|,
name|tmpPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// the output stream of the process object corresponds to the daemon's stdin
return|return
name|pb
operator|.
name|start
argument_list|()
return|;
block|}
comment|/**      * The collection of processes representing spawned native controllers.      *      * @return the processes      */
DECL|method|getProcesses
name|List
argument_list|<
name|Process
argument_list|>
name|getProcesses
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|processes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

