begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_comment
comment|/**  * Exposes system startup information  */
end_comment

begin_class
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"exposes read-only view of system properties"
argument_list|)
DECL|class|BootstrapInfo
specifier|public
specifier|final
class|class
name|BootstrapInfo
block|{
comment|/** no instantiation */
DECL|method|BootstrapInfo
specifier|private
name|BootstrapInfo
parameter_list|()
block|{}
comment|/**      * Returns true if we successfully loaded native libraries.      *<p>      * If this returns false, then native operations such as locking      * memory did not work.      */
DECL|method|isNativesAvailable
specifier|public
specifier|static
name|boolean
name|isNativesAvailable
parameter_list|()
block|{
return|return
name|Natives
operator|.
name|JNA_AVAILABLE
return|;
block|}
comment|/**      * Returns true if we were able to lock the process's address space.      */
DECL|method|isMemoryLocked
specifier|public
specifier|static
name|boolean
name|isMemoryLocked
parameter_list|()
block|{
return|return
name|Natives
operator|.
name|isMemoryLocked
argument_list|()
return|;
block|}
comment|/**      * Returns true if system call filter is installed (supported systems only)      */
DECL|method|isSystemCallFilterInstalled
specifier|public
specifier|static
name|boolean
name|isSystemCallFilterInstalled
parameter_list|()
block|{
return|return
name|Natives
operator|.
name|isSystemCallFilterInstalled
argument_list|()
return|;
block|}
comment|/**      * codebase location for untrusted scripts (provide some additional safety)      *<p>      * This is not a full URL, just a path.      */
DECL|field|UNTRUSTED_CODEBASE
specifier|public
specifier|static
specifier|final
name|String
name|UNTRUSTED_CODEBASE
init|=
literal|"/untrusted"
decl_stmt|;
comment|// create a view of sysprops map that does not allow modifications
comment|// this must be done this way (e.g. versus an actual typed map), because
comment|// some test methods still change properties, so whitelisted changes must
comment|// be reflected in this view.
DECL|field|SYSTEM_PROPERTIES
specifier|private
specifier|static
specifier|final
name|Dictionary
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|SYSTEM_PROPERTIES
decl_stmt|;
static|static
block|{
specifier|final
name|Dictionary
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|sysprops
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|SYSTEM_PROPERTIES
operator|=
operator|new
name|Dictionary
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|sysprops
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|sysprops
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|Object
argument_list|>
name|keys
parameter_list|()
block|{
return|return
name|sysprops
operator|.
name|keys
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|Object
argument_list|>
name|elements
parameter_list|()
block|{
return|return
name|sysprops
operator|.
name|elements
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|sysprops
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|put
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"treat system properties as immutable"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"treat system properties as immutable"
argument_list|)
throw|;
block|}
block|}
expr_stmt|;
block|}
comment|/**      * Returns a read-only view of all system properties      */
DECL|method|getSystemProperties
specifier|public
specifier|static
name|Dictionary
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|getSystemProperties
parameter_list|()
block|{
name|SecurityManager
name|sm
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|sm
operator|!=
literal|null
condition|)
block|{
name|sm
operator|.
name|checkPropertyAccess
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
return|return
name|SYSTEM_PROPERTIES
return|;
block|}
DECL|method|init
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{     }
block|}
end_class

end_unit

