begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.joda.time.format
package|package
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
package|;
end_package

begin_comment
comment|/*  *  Copyright 2001-2009 Stephen Colebourne  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeFieldType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/*  * Elasticsearch Note: This class has been copied almost identically from joda, where the  * class is named ISODatetimeFormat  *  * However there has been done one huge modification in several methods, which forces the date  * year to be at least n digits, so that a year like "5" is invalid and must be "0005"  *  * All methods have been marked with an "// ES change" commentary  *  * In case you compare this with the original ISODateTimeFormat, make sure you use a diff  * call, that ignores whitespaces/tabs/indendetations like 'diff -b'  */
end_comment

begin_comment
comment|/**  * Factory that creates instances of DateTimeFormatter based on the ISO8601 standard.  *<p>  * Date-time formatting is performed by the {@link DateTimeFormatter} class.  * Three classes provide factory methods to create formatters, and this is one.  * The others are {@link DateTimeFormat} and {@link DateTimeFormatterBuilder}.  *<p>  * ISO8601 is the international standard for data interchange. It defines a  * framework, rather than an absolute standard. As a result this provider has a  * number of methods that represent common uses of the framework. The most common  * formats are {@link #date() date}, {@link #time() time}, and {@link #dateTime() dateTime}.  *<p>  * For example, to format a date time in ISO format:  *<pre>  * DateTime dt = new DateTime();  * DateTimeFormatter fmt = ISODateTimeFormat.dateTime();  * String str = fmt.print(dt);  *</pre>  *<p>  * Note that these formatters mostly follow the ISO8601 standard for printing.  * For parsing, the formatters are more lenient and allow formats that are not  * in strict compliance with the standard.  *<p>  * It is important to understand that these formatters are not linked to  * the<code>ISOChronology</code>. These formatters may be used with any  * chronology, however there may be certain side effects with more unusual  * chronologies. For example, the ISO formatters rely on dayOfWeek being  * single digit, dayOfMonth being two digit and dayOfYear being three digit.  * A chronology with a ten day week would thus cause issues. However, in  * general, it is safe to use these formatters with other chronologies.  *<p>  * ISODateTimeFormat is thread-safe and immutable, and the formatters it  * returns are as well.  *  * @author Brian S O'Neill  * @since 1.0  * @see DateTimeFormat  * @see DateTimeFormatterBuilder  */
end_comment

begin_class
DECL|class|StrictISODateTimeFormat
specifier|public
class|class
name|StrictISODateTimeFormat
block|{
comment|/**      * Constructor.      *      * @since 1.1 (previously private)      */
DECL|method|StrictISODateTimeFormat
specifier|protected
name|StrictISODateTimeFormat
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|//-----------------------------------------------------------------------
comment|/**      * Returns a formatter that outputs only those fields specified.      *<p>      * This method examines the fields provided and returns an ISO-style      * formatter that best fits. This can be useful for outputting      * less-common ISO styles, such as YearMonth (YYYY-MM) or MonthDay (--MM-DD).      *<p>      * The list provided may have overlapping fields, such as dayOfWeek and      * dayOfMonth. In this case, the style is chosen based on the following      * list, thus in the example, the calendar style is chosen as dayOfMonth      * is higher in priority than dayOfWeek:      *<ul>      *<li>monthOfYear - calendar date style      *<li>dayOfYear - ordinal date style      *<li>weekOfWeekYear - week date style      *<li>dayOfMonth - calendar date style      *<li>dayOfWeek - week date style      *<li>year      *<li>weekyear      *</ul>      * The supported formats are:      *<pre>      * Extended      Basic       Fields      * 2005-03-25    20050325    year/monthOfYear/dayOfMonth      * 2005-03       2005-03     year/monthOfYear      * 2005--25      2005--25    year/dayOfMonth *      * 2005          2005        year      * --03-25       --0325      monthOfYear/dayOfMonth      * --03          --03        monthOfYear      * ---03         ---03       dayOfMonth      * 2005-084      2005084     year/dayOfYear      * -084          -084        dayOfYear      * 2005-W12-5    2005W125    weekyear/weekOfWeekyear/dayOfWeek      * 2005-W-5      2005W-5     weekyear/dayOfWeek *      * 2005-W12      2005W12     weekyear/weekOfWeekyear      * -W12-5        -W125       weekOfWeekyear/dayOfWeek      * -W12          -W12        weekOfWeekyear      * -W-5          -W-5        dayOfWeek      * 10:20:30.040  102030.040  hour/minute/second/milli      * 10:20:30      102030      hour/minute/second      * 10:20         1020        hour/minute      * 10            10          hour      * -20:30.040    -2030.040   minute/second/milli      * -20:30        -2030       minute/second      * -20           -20         minute      * --30.040      --30.040    second/milli      * --30          --30        second      * ---.040       ---.040     milli *      * 10-30.040     10-30.040   hour/second/milli *      * 10:20-.040    1020-.040   hour/minute/milli *      * 10-30         10-30       hour/second *      * 10--.040      10--.040    hour/milli *      * -20-.040      -20-.040    minute/milli *      *   plus datetime formats like {date}T{time}      *</pre>      * * indiates that this is not an official ISO format and can be excluded      * by passing in<code>strictISO</code> as<code>true</code>.      *<p>      * This method can side effect the input collection of fields.      * If the input collection is modifiable, then each field that was added to      * the formatter will be removed from the collection, including any duplicates.      * If the input collection is unmodifiable then no side effect occurs.      *<p>      * This side effect processing is useful if you need to know whether all      * the fields were converted into the formatter or not. To achieve this,      * pass in a modifiable list, and check that it is empty on exit.      *      * @param fields  the fields to get a formatter for, not null,      *  updated by the method call unless unmodifiable,      *  removing those fields built in the formatter      * @param extended  true to use the extended format (with separators)      * @param strictISO  true to stick exactly to ISO8601, false to include additional formats      * @return a suitable formatter      * @throws IllegalArgumentException if there is no format for the fields      * @since 1.1      */
DECL|method|forFields
specifier|public
specifier|static
name|DateTimeFormatter
name|forFields
parameter_list|(
name|Collection
argument_list|<
name|DateTimeFieldType
argument_list|>
name|fields
parameter_list|,
name|boolean
name|extended
parameter_list|,
name|boolean
name|strictISO
parameter_list|)
block|{
if|if
condition|(
name|fields
operator|==
literal|null
operator|||
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The fields must not be null or empty"
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|DateTimeFieldType
argument_list|>
name|workingFields
init|=
operator|new
name|HashSet
argument_list|<
name|DateTimeFieldType
argument_list|>
argument_list|(
name|fields
argument_list|)
decl_stmt|;
name|int
name|inputSize
init|=
name|workingFields
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|reducedPrec
init|=
literal|false
decl_stmt|;
name|DateTimeFormatterBuilder
name|bld
init|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
decl_stmt|;
comment|// date
if|if
condition|(
name|workingFields
operator|.
name|contains
argument_list|(
name|DateTimeFieldType
operator|.
name|monthOfYear
argument_list|()
argument_list|)
condition|)
block|{
name|reducedPrec
operator|=
name|dateByMonth
argument_list|(
name|bld
argument_list|,
name|workingFields
argument_list|,
name|extended
argument_list|,
name|strictISO
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|workingFields
operator|.
name|contains
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfYear
argument_list|()
argument_list|)
condition|)
block|{
name|reducedPrec
operator|=
name|dateByOrdinal
argument_list|(
name|bld
argument_list|,
name|workingFields
argument_list|,
name|extended
argument_list|,
name|strictISO
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|workingFields
operator|.
name|contains
argument_list|(
name|DateTimeFieldType
operator|.
name|weekOfWeekyear
argument_list|()
argument_list|)
condition|)
block|{
name|reducedPrec
operator|=
name|dateByWeek
argument_list|(
name|bld
argument_list|,
name|workingFields
argument_list|,
name|extended
argument_list|,
name|strictISO
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|workingFields
operator|.
name|contains
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfMonth
argument_list|()
argument_list|)
condition|)
block|{
name|reducedPrec
operator|=
name|dateByMonth
argument_list|(
name|bld
argument_list|,
name|workingFields
argument_list|,
name|extended
argument_list|,
name|strictISO
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|workingFields
operator|.
name|contains
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfWeek
argument_list|()
argument_list|)
condition|)
block|{
name|reducedPrec
operator|=
name|dateByWeek
argument_list|(
name|bld
argument_list|,
name|workingFields
argument_list|,
name|extended
argument_list|,
name|strictISO
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|workingFields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|year
argument_list|()
argument_list|)
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|ye
argument_list|)
expr_stmt|;
name|reducedPrec
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|workingFields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|weekyear
argument_list|()
argument_list|)
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|we
argument_list|)
expr_stmt|;
name|reducedPrec
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|datePresent
init|=
operator|(
name|workingFields
operator|.
name|size
argument_list|()
operator|<
name|inputSize
operator|)
decl_stmt|;
comment|// time
name|time
argument_list|(
name|bld
argument_list|,
name|workingFields
argument_list|,
name|extended
argument_list|,
name|strictISO
argument_list|,
name|reducedPrec
argument_list|,
name|datePresent
argument_list|)
expr_stmt|;
comment|// result
if|if
condition|(
name|bld
operator|.
name|canBuildFormatter
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No valid format for fields: "
operator|+
name|fields
argument_list|)
throw|;
block|}
comment|// side effect the input collection to indicate the processed fields
comment|// handling unmodifiable collections with no side effect
try|try
block|{
name|fields
operator|.
name|retainAll
argument_list|(
name|workingFields
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ex
parameter_list|)
block|{
comment|// ignore, so we can handle unmodifiable collections
block|}
return|return
name|bld
operator|.
name|toFormatter
argument_list|()
return|;
block|}
comment|//-----------------------------------------------------------------------
comment|/**      * Creates a date using the calendar date format.      * Specification reference: 5.2.1.      *      * @param bld  the builder      * @param fields  the fields      * @param extended  true to use extended format      * @param strictISO  true to only allow ISO formats      * @return true if reduced precision      * @since 1.1      */
DECL|method|dateByMonth
specifier|private
specifier|static
name|boolean
name|dateByMonth
parameter_list|(
name|DateTimeFormatterBuilder
name|bld
parameter_list|,
name|Collection
argument_list|<
name|DateTimeFieldType
argument_list|>
name|fields
parameter_list|,
name|boolean
name|extended
parameter_list|,
name|boolean
name|strictISO
parameter_list|)
block|{
name|boolean
name|reducedPrec
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|year
argument_list|()
argument_list|)
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|ye
argument_list|)
expr_stmt|;
if|if
condition|(
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|monthOfYear
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfMonth
argument_list|()
argument_list|)
condition|)
block|{
comment|// YYYY-MM-DD/YYYYMMDD
name|appendSeparator
argument_list|(
name|bld
argument_list|,
name|extended
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendMonthOfYear
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|appendSeparator
argument_list|(
name|bld
argument_list|,
name|extended
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendDayOfMonth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// YYYY-MM/YYYY-MM
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendMonthOfYear
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|reducedPrec
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfMonth
argument_list|()
argument_list|)
condition|)
block|{
comment|// YYYY--DD/YYYY--DD (non-iso)
name|checkNotStrictISO
argument_list|(
name|fields
argument_list|,
name|strictISO
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendDayOfMonth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// YYYY/YYYY
name|reducedPrec
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|monthOfYear
argument_list|()
argument_list|)
condition|)
block|{
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendMonthOfYear
argument_list|(
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfMonth
argument_list|()
argument_list|)
condition|)
block|{
comment|// --MM-DD/--MMDD
name|appendSeparator
argument_list|(
name|bld
argument_list|,
name|extended
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendDayOfMonth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// --MM/--MM
name|reducedPrec
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfMonth
argument_list|()
argument_list|)
condition|)
block|{
comment|// ---DD/---DD
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendDayOfMonth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|reducedPrec
return|;
block|}
comment|//-----------------------------------------------------------------------
comment|/**      * Creates a date using the ordinal date format.      * Specification reference: 5.2.2.      *      * @param bld  the builder      * @param fields  the fields      * @param extended  true to use extended format      * @param strictISO  true to only allow ISO formats      * @since 1.1      */
DECL|method|dateByOrdinal
specifier|private
specifier|static
name|boolean
name|dateByOrdinal
parameter_list|(
name|DateTimeFormatterBuilder
name|bld
parameter_list|,
name|Collection
argument_list|<
name|DateTimeFieldType
argument_list|>
name|fields
parameter_list|,
name|boolean
name|extended
parameter_list|,
name|boolean
name|strictISO
parameter_list|)
block|{
name|boolean
name|reducedPrec
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|year
argument_list|()
argument_list|)
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|ye
argument_list|)
expr_stmt|;
if|if
condition|(
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfYear
argument_list|()
argument_list|)
condition|)
block|{
comment|// YYYY-DDD/YYYYDDD
name|appendSeparator
argument_list|(
name|bld
argument_list|,
name|extended
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendDayOfYear
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// YYYY/YYYY
name|reducedPrec
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfYear
argument_list|()
argument_list|)
condition|)
block|{
comment|// -DDD/-DDD
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendDayOfYear
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
return|return
name|reducedPrec
return|;
block|}
comment|//-----------------------------------------------------------------------
comment|/**      * Creates a date using the calendar date format.      * Specification reference: 5.2.3.      *      * @param bld  the builder      * @param fields  the fields      * @param extended  true to use extended format      * @param strictISO  true to only allow ISO formats      * @since 1.1      */
DECL|method|dateByWeek
specifier|private
specifier|static
name|boolean
name|dateByWeek
parameter_list|(
name|DateTimeFormatterBuilder
name|bld
parameter_list|,
name|Collection
argument_list|<
name|DateTimeFieldType
argument_list|>
name|fields
parameter_list|,
name|boolean
name|extended
parameter_list|,
name|boolean
name|strictISO
parameter_list|)
block|{
name|boolean
name|reducedPrec
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|weekyear
argument_list|()
argument_list|)
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|we
argument_list|)
expr_stmt|;
if|if
condition|(
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|weekOfWeekyear
argument_list|()
argument_list|)
condition|)
block|{
name|appendSeparator
argument_list|(
name|bld
argument_list|,
name|extended
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'W'
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendWeekOfWeekyear
argument_list|(
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfWeek
argument_list|()
argument_list|)
condition|)
block|{
comment|// YYYY-WWW-D/YYYYWWWD
name|appendSeparator
argument_list|(
name|bld
argument_list|,
name|extended
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendDayOfWeek
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// YYYY-WWW/YYYY-WWW
name|reducedPrec
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfWeek
argument_list|()
argument_list|)
condition|)
block|{
comment|// YYYY-W-D/YYYYW-D (non-iso)
name|checkNotStrictISO
argument_list|(
name|fields
argument_list|,
name|strictISO
argument_list|)
expr_stmt|;
name|appendSeparator
argument_list|(
name|bld
argument_list|,
name|extended
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'W'
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendDayOfWeek
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// YYYY/YYYY
name|reducedPrec
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|weekOfWeekyear
argument_list|()
argument_list|)
condition|)
block|{
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'W'
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendWeekOfWeekyear
argument_list|(
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfWeek
argument_list|()
argument_list|)
condition|)
block|{
comment|// -WWW-D/-WWWD
name|appendSeparator
argument_list|(
name|bld
argument_list|,
name|extended
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendDayOfWeek
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// -WWW/-WWW
name|reducedPrec
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfWeek
argument_list|()
argument_list|)
condition|)
block|{
comment|// -W-D/-W-D
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'W'
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendDayOfWeek
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|reducedPrec
return|;
block|}
comment|//-----------------------------------------------------------------------
comment|/**      * Adds the time fields to the builder.      * Specification reference: 5.3.1.      *      * @param bld  the builder      * @param fields  the fields      * @param extended  whether to use the extended format      * @param strictISO  whether to be strict      * @param reducedPrec  whether the date was reduced precision      * @param datePresent  whether there was a date      * @since 1.1      */
DECL|method|time
specifier|private
specifier|static
name|void
name|time
parameter_list|(
name|DateTimeFormatterBuilder
name|bld
parameter_list|,
name|Collection
argument_list|<
name|DateTimeFieldType
argument_list|>
name|fields
parameter_list|,
name|boolean
name|extended
parameter_list|,
name|boolean
name|strictISO
parameter_list|,
name|boolean
name|reducedPrec
parameter_list|,
name|boolean
name|datePresent
parameter_list|)
block|{
name|boolean
name|hour
init|=
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|hourOfDay
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|minute
init|=
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|minuteOfHour
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|second
init|=
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|secondOfMinute
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|milli
init|=
name|fields
operator|.
name|remove
argument_list|(
name|DateTimeFieldType
operator|.
name|millisOfSecond
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hour
operator|&&
operator|!
name|minute
operator|&&
operator|!
name|second
operator|&&
operator|!
name|milli
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|hour
operator|||
name|minute
operator|||
name|second
operator|||
name|milli
condition|)
block|{
if|if
condition|(
name|strictISO
operator|&&
name|reducedPrec
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No valid ISO8601 format for fields because Date was reduced precision: "
operator|+
name|fields
argument_list|)
throw|;
block|}
if|if
condition|(
name|datePresent
condition|)
block|{
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'T'
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hour
operator|&&
name|minute
operator|&&
name|second
operator|||
operator|(
name|hour
operator|&&
operator|!
name|second
operator|&&
operator|!
name|milli
operator|)
condition|)
block|{
comment|// OK - HMSm/HMS/HM/H - valid in combination with date
block|}
else|else
block|{
if|if
condition|(
name|strictISO
operator|&&
name|datePresent
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No valid ISO8601 format for fields because Time was truncated: "
operator|+
name|fields
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|hour
operator|&&
operator|(
name|minute
operator|&&
name|second
operator|||
operator|(
name|minute
operator|&&
operator|!
name|milli
operator|)
operator|||
name|second
operator|)
condition|)
block|{
comment|// OK - MSm/MS/M/Sm/S - valid ISO formats
block|}
else|else
block|{
if|if
condition|(
name|strictISO
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No valid ISO8601 format for fields: "
operator|+
name|fields
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|hour
condition|)
block|{
name|bld
operator|.
name|appendHourOfDay
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|minute
operator|||
name|second
operator|||
name|milli
condition|)
block|{
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extended
operator|&&
name|hour
operator|&&
name|minute
condition|)
block|{
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minute
condition|)
block|{
name|bld
operator|.
name|appendMinuteOfHour
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|second
operator|||
name|milli
condition|)
block|{
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extended
operator|&&
name|minute
operator|&&
name|second
condition|)
block|{
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|second
condition|)
block|{
name|bld
operator|.
name|appendSecondOfMinute
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|milli
condition|)
block|{
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|milli
condition|)
block|{
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|bld
operator|.
name|appendMillisOfSecond
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
comment|//-----------------------------------------------------------------------
comment|/**      * Checks that the iso only flag is not set, throwing an exception if it is.      *      * @param fields  the fields      * @param strictISO  true if only ISO formats allowed      * @since 1.1      */
DECL|method|checkNotStrictISO
specifier|private
specifier|static
name|void
name|checkNotStrictISO
parameter_list|(
name|Collection
argument_list|<
name|DateTimeFieldType
argument_list|>
name|fields
parameter_list|,
name|boolean
name|strictISO
parameter_list|)
block|{
if|if
condition|(
name|strictISO
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No valid ISO8601 format for fields: "
operator|+
name|fields
argument_list|)
throw|;
block|}
block|}
comment|/**      * Appends the separator if necessary.      *      * @param bld  the builder      * @param extended  whether to append the separator      * @since 1.1      */
DECL|method|appendSeparator
specifier|private
specifier|static
name|void
name|appendSeparator
parameter_list|(
name|DateTimeFormatterBuilder
name|bld
parameter_list|,
name|boolean
name|extended
parameter_list|)
block|{
if|if
condition|(
name|extended
condition|)
block|{
name|bld
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
block|}
comment|//-----------------------------------------------------------------------
comment|/**      * Returns a generic ISO date parser for parsing dates with a possible zone.      *<p>      * The returned formatter can only be used for parsing, printing is unsupported.      *<p>      * It accepts formats described by the following syntax:      *<pre>      * date              = date-element ['T' offset]      * date-element      = std-date-element | ord-date-element | week-date-element      * std-date-element  = yyyy ['-' MM ['-' dd]]      * ord-date-element  = yyyy ['-' DDD]      * week-date-element = xxxx '-W' ww ['-' e]      * offset            = 'Z' | (('+' | '-') HH [':' mm [':' ss [('.' | ',') SSS]]])      *</pre>      */
DECL|method|dateParser
specifier|public
specifier|static
name|DateTimeFormatter
name|dateParser
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|dp
return|;
block|}
comment|/**      * Returns a generic ISO date parser for parsing local dates.      *<p>      * The returned formatter can only be used for parsing, printing is unsupported.      *<p>      * This parser is initialised with the local (UTC) time zone.      *<p>      * It accepts formats described by the following syntax:      *<pre>      * date-element      = std-date-element | ord-date-element | week-date-element      * std-date-element  = yyyy ['-' MM ['-' dd]]      * ord-date-element  = yyyy ['-' DDD]      * week-date-element = xxxx '-W' ww ['-' e]      *</pre>      * @since 1.3      */
DECL|method|localDateParser
specifier|public
specifier|static
name|DateTimeFormatter
name|localDateParser
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|ldp
return|;
block|}
comment|/**      * Returns a generic ISO date parser for parsing dates.      *<p>      * The returned formatter can only be used for parsing, printing is unsupported.      *<p>      * It accepts formats described by the following syntax:      *<pre>      * date-element      = std-date-element | ord-date-element | week-date-element      * std-date-element  = yyyy ['-' MM ['-' dd]]      * ord-date-element  = yyyy ['-' DDD]      * week-date-element = xxxx '-W' ww ['-' e]      *</pre>      */
DECL|method|dateElementParser
specifier|public
specifier|static
name|DateTimeFormatter
name|dateElementParser
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|dpe
return|;
block|}
comment|/**      * Returns a generic ISO time parser for parsing times with a possible zone.      *<p>      * The returned formatter can only be used for parsing, printing is unsupported.      *<p>      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * It accepts formats described by the following syntax:      *<pre>      * time           = ['T'] time-element [offset]      * time-element   = HH [minute-element] | [fraction]      * minute-element = ':' mm [second-element] | [fraction]      * second-element = ':' ss [fraction]      * fraction       = ('.' | ',') digit+      * offset         = 'Z' | (('+' | '-') HH [':' mm [':' ss [('.' | ',') SSS]]])      *</pre>      */
DECL|method|timeParser
specifier|public
specifier|static
name|DateTimeFormatter
name|timeParser
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|tp
return|;
block|}
comment|/**      * Returns a generic ISO time parser for parsing local times.      *<p>      * The returned formatter can only be used for parsing, printing is unsupported.      *<p>      * This parser is initialised with the local (UTC) time zone.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * It accepts formats described by the following syntax:      *<pre>      * time           = ['T'] time-element      * time-element   = HH [minute-element] | [fraction]      * minute-element = ':' mm [second-element] | [fraction]      * second-element = ':' ss [fraction]      * fraction       = ('.' | ',') digit+      *</pre>      * @since 1.3      */
DECL|method|localTimeParser
specifier|public
specifier|static
name|DateTimeFormatter
name|localTimeParser
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|ltp
return|;
block|}
comment|/**      * Returns a generic ISO time parser.      *<p>      * The returned formatter can only be used for parsing, printing is unsupported.      *<p>      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * It accepts formats described by the following syntax:      *<pre>      * time-element   = HH [minute-element] | [fraction]      * minute-element = ':' mm [second-element] | [fraction]      * second-element = ':' ss [fraction]      * fraction       = ('.' | ',') digit+      *</pre>      */
DECL|method|timeElementParser
specifier|public
specifier|static
name|DateTimeFormatter
name|timeElementParser
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|tpe
return|;
block|}
comment|/**      * Returns a generic ISO datetime parser which parses either a date or a time or both.      *<p>      * The returned formatter can only be used for parsing, printing is unsupported.      *<p>      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * It accepts formats described by the following syntax:      *<pre>      * datetime          = time | date-opt-time      * time              = 'T' time-element [offset]      * date-opt-time     = date-element ['T' [time-element] [offset]]      * date-element      = std-date-element | ord-date-element | week-date-element      * std-date-element  = yyyy ['-' MM ['-' dd]]      * ord-date-element  = yyyy ['-' DDD]      * week-date-element = xxxx '-W' ww ['-' e]      * time-element      = HH [minute-element] | [fraction]      * minute-element    = ':' mm [second-element] | [fraction]      * second-element    = ':' ss [fraction]      * fraction          = ('.' | ',') digit+      * offset            = 'Z' | (('+' | '-') HH [':' mm [':' ss [('.' | ',') SSS]]])      *</pre>      */
DECL|method|dateTimeParser
specifier|public
specifier|static
name|DateTimeFormatter
name|dateTimeParser
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|dtp
return|;
block|}
comment|/**      * Returns a generic ISO datetime parser where the date is mandatory and the time is optional.      *<p>      * The returned formatter can only be used for parsing, printing is unsupported.      *<p>      * This parser can parse zoned datetimes.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * It accepts formats described by the following syntax:      *<pre>      * date-opt-time     = date-element ['T' [time-element] [offset]]      * date-element      = std-date-element | ord-date-element | week-date-element      * std-date-element  = yyyy ['-' MM ['-' dd]]      * ord-date-element  = yyyy ['-' DDD]      * week-date-element = xxxx '-W' ww ['-' e]      * time-element      = HH [minute-element] | [fraction]      * minute-element    = ':' mm [second-element] | [fraction]      * second-element    = ':' ss [fraction]      * fraction          = ('.' | ',') digit+      *</pre>      * @since 1.3      */
DECL|method|dateOptionalTimeParser
specifier|public
specifier|static
name|DateTimeFormatter
name|dateOptionalTimeParser
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|dotp
return|;
block|}
comment|/**      * Returns a generic ISO datetime parser where the date is mandatory and the time is optional.      *<p>      * The returned formatter can only be used for parsing, printing is unsupported.      *<p>      * This parser only parses local datetimes.      * This parser is initialised with the local (UTC) time zone.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * It accepts formats described by the following syntax:      *<pre>      * datetime          = date-element ['T' time-element]      * date-element      = std-date-element | ord-date-element | week-date-element      * std-date-element  = yyyy ['-' MM ['-' dd]]      * ord-date-element  = yyyy ['-' DDD]      * week-date-element = xxxx '-W' ww ['-' e]      * time-element      = HH [minute-element] | [fraction]      * minute-element    = ':' mm [second-element] | [fraction]      * second-element    = ':' ss [fraction]      * fraction          = ('.' | ',') digit+      *</pre>      * @since 1.3      */
DECL|method|localDateOptionalTimeParser
specifier|public
specifier|static
name|DateTimeFormatter
name|localDateOptionalTimeParser
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|ldotp
return|;
block|}
comment|//-----------------------------------------------------------------------
comment|/**      * Returns a formatter for a full date as four digit year, two digit month      * of year, and two digit day of month (yyyy-MM-dd).      *<p>      * The returned formatter prints and parses only this format.      * See {@link #dateParser()} for a more flexible parser that accepts different formats.      *      * @return a formatter for yyyy-MM-dd      */
DECL|method|date
specifier|public
specifier|static
name|DateTimeFormatter
name|date
parameter_list|()
block|{
return|return
name|yearMonthDay
argument_list|()
return|;
block|}
comment|/**      * Returns a formatter for a two digit hour of day, two digit minute of      * hour, two digit second of minute, three digit fraction of second, and      * time zone offset (HH:mm:ss.SSSZZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which includes milliseconds.      * See {@link #timeParser()} for a more flexible parser that accepts different formats.      *      * @return a formatter for HH:mm:ss.SSSZZ      */
DECL|method|time
specifier|public
specifier|static
name|DateTimeFormatter
name|time
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|t
return|;
block|}
comment|/**      * Returns a formatter for a two digit hour of day, two digit minute of      * hour, two digit second of minute, and time zone offset (HH:mm:ssZZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which excludes milliseconds.      * See {@link #timeParser()} for a more flexible parser that accepts different formats.      *      * @return a formatter for HH:mm:ssZZ      */
DECL|method|timeNoMillis
specifier|public
specifier|static
name|DateTimeFormatter
name|timeNoMillis
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|tx
return|;
block|}
comment|/**      * Returns a formatter for a two digit hour of day, two digit minute of      * hour, two digit second of minute, three digit fraction of second, and      * time zone offset prefixed by 'T' ('T'HH:mm:ss.SSSZZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which includes milliseconds.      * See {@link #timeParser()} for a more flexible parser that accepts different formats.      *      * @return a formatter for 'T'HH:mm:ss.SSSZZ      */
DECL|method|tTime
specifier|public
specifier|static
name|DateTimeFormatter
name|tTime
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|tt
return|;
block|}
comment|/**      * Returns a formatter for a two digit hour of day, two digit minute of      * hour, two digit second of minute, and time zone offset prefixed      * by 'T' ('T'HH:mm:ssZZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which excludes milliseconds.      * See {@link #timeParser()} for a more flexible parser that accepts different formats.      *      * @return a formatter for 'T'HH:mm:ssZZ      */
DECL|method|tTimeNoMillis
specifier|public
specifier|static
name|DateTimeFormatter
name|tTimeNoMillis
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|ttx
return|;
block|}
comment|/**      * Returns a formatter that combines a full date and time, separated by a 'T'      * (yyyy-MM-dd'T'HH:mm:ss.SSSZZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which includes milliseconds.      * See {@link #dateTimeParser()} for a more flexible parser that accepts different formats.      *      * @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSSZZ      */
DECL|method|dateTime
specifier|public
specifier|static
name|DateTimeFormatter
name|dateTime
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|dt
return|;
block|}
comment|/**      * Returns a formatter that combines a full date and time without millis,      * separated by a 'T' (yyyy-MM-dd'T'HH:mm:ssZZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which excludes milliseconds.      * See {@link #dateTimeParser()} for a more flexible parser that accepts different formats.      *      * @return a formatter for yyyy-MM-dd'T'HH:mm:ssZZ      */
DECL|method|dateTimeNoMillis
specifier|public
specifier|static
name|DateTimeFormatter
name|dateTimeNoMillis
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|dtx
return|;
block|}
comment|/**      * Returns a formatter for a full ordinal date, using a four      * digit year and three digit dayOfYear (yyyy-DDD).      *<p>      * The returned formatter prints and parses only this format.      * See {@link #dateParser()} for a more flexible parser that accepts different formats.      *      * @return a formatter for yyyy-DDD      * @since 1.1      */
DECL|method|ordinalDate
specifier|public
specifier|static
name|DateTimeFormatter
name|ordinalDate
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|od
return|;
block|}
comment|/**      * Returns a formatter for a full ordinal date and time, using a four      * digit year and three digit dayOfYear (yyyy-DDD'T'HH:mm:ss.SSSZZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which includes milliseconds.      * See {@link #dateTimeParser()} for a more flexible parser that accepts different formats.      *      * @return a formatter for yyyy-DDD'T'HH:mm:ss.SSSZZ      * @since 1.1      */
DECL|method|ordinalDateTime
specifier|public
specifier|static
name|DateTimeFormatter
name|ordinalDateTime
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|odt
return|;
block|}
comment|/**      * Returns a formatter for a full ordinal date and time without millis,      * using a four digit year and three digit dayOfYear (yyyy-DDD'T'HH:mm:ssZZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which excludes milliseconds.      * See {@link #dateTimeParser()} for a more flexible parser that accepts different formats.      *      * @return a formatter for yyyy-DDD'T'HH:mm:ssZZ      * @since 1.1      */
DECL|method|ordinalDateTimeNoMillis
specifier|public
specifier|static
name|DateTimeFormatter
name|ordinalDateTimeNoMillis
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|odtx
return|;
block|}
comment|/**      * Returns a formatter for a full date as four digit weekyear, two digit      * week of weekyear, and one digit day of week (xxxx-'W'ww-e).      *<p>      * The returned formatter prints and parses only this format.      * See {@link #dateParser()} for a more flexible parser that accepts different formats.      *      * @return a formatter for xxxx-'W'ww-e      */
DECL|method|weekDate
specifier|public
specifier|static
name|DateTimeFormatter
name|weekDate
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|wwd
return|;
block|}
comment|/**      * Returns a formatter that combines a full weekyear date and time,      * separated by a 'T' (xxxx-'W'ww-e'T'HH:mm:ss.SSSZZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which includes milliseconds.      * See {@link #dateTimeParser()} for a more flexible parser that accepts different formats.      *      * @return a formatter for xxxx-'W'ww-e'T'HH:mm:ss.SSSZZ      */
DECL|method|weekDateTime
specifier|public
specifier|static
name|DateTimeFormatter
name|weekDateTime
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|wdt
return|;
block|}
comment|/**      * Returns a formatter that combines a full weekyear date and time without millis,      * separated by a 'T' (xxxx-'W'ww-e'T'HH:mm:ssZZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which excludes milliseconds.      * See {@link #dateTimeParser()} for a more flexible parser that accepts different formats.      *      * @return a formatter for xxxx-'W'ww-e'T'HH:mm:ssZZ      */
DECL|method|weekDateTimeNoMillis
specifier|public
specifier|static
name|DateTimeFormatter
name|weekDateTimeNoMillis
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|wdtx
return|;
block|}
comment|//-----------------------------------------------------------------------
comment|/**      * Returns a basic formatter for a full date as four digit year, two digit      * month of year, and two digit day of month (yyyyMMdd).      *<p>      * The returned formatter prints and parses only this format.      *      * @return a formatter for yyyyMMdd      */
DECL|method|basicDate
specifier|public
specifier|static
name|DateTimeFormatter
name|basicDate
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|bd
return|;
block|}
comment|/**      * Returns a basic formatter for a two digit hour of day, two digit minute      * of hour, two digit second of minute, three digit millis, and time zone      * offset (HHmmss.SSSZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which includes milliseconds.      *      * @return a formatter for HHmmss.SSSZ      */
DECL|method|basicTime
specifier|public
specifier|static
name|DateTimeFormatter
name|basicTime
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|bt
return|;
block|}
comment|/**      * Returns a basic formatter for a two digit hour of day, two digit minute      * of hour, two digit second of minute, and time zone offset (HHmmssZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which excludes milliseconds.      *      * @return a formatter for HHmmssZ      */
DECL|method|basicTimeNoMillis
specifier|public
specifier|static
name|DateTimeFormatter
name|basicTimeNoMillis
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|btx
return|;
block|}
comment|/**      * Returns a basic formatter for a two digit hour of day, two digit minute      * of hour, two digit second of minute, three digit millis, and time zone      * offset prefixed by 'T' ('T'HHmmss.SSSZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which includes milliseconds.      *      * @return a formatter for 'T'HHmmss.SSSZ      */
DECL|method|basicTTime
specifier|public
specifier|static
name|DateTimeFormatter
name|basicTTime
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|btt
return|;
block|}
comment|/**      * Returns a basic formatter for a two digit hour of day, two digit minute      * of hour, two digit second of minute, and time zone offset prefixed by 'T'      * ('T'HHmmssZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which excludes milliseconds.      *      * @return a formatter for 'T'HHmmssZ      */
DECL|method|basicTTimeNoMillis
specifier|public
specifier|static
name|DateTimeFormatter
name|basicTTimeNoMillis
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|bttx
return|;
block|}
comment|/**      * Returns a basic formatter that combines a basic date and time, separated      * by a 'T' (yyyyMMdd'T'HHmmss.SSSZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which includes milliseconds.      *      * @return a formatter for yyyyMMdd'T'HHmmss.SSSZ      */
DECL|method|basicDateTime
specifier|public
specifier|static
name|DateTimeFormatter
name|basicDateTime
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|bdt
return|;
block|}
comment|/**      * Returns a basic formatter that combines a basic date and time without millis,      * separated by a 'T' (yyyyMMdd'T'HHmmssZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which excludes milliseconds.      *      * @return a formatter for yyyyMMdd'T'HHmmssZ      */
DECL|method|basicDateTimeNoMillis
specifier|public
specifier|static
name|DateTimeFormatter
name|basicDateTimeNoMillis
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|bdtx
return|;
block|}
comment|/**      * Returns a formatter for a full ordinal date, using a four      * digit year and three digit dayOfYear (yyyyDDD).      *<p>      * The returned formatter prints and parses only this format.      *      * @return a formatter for yyyyDDD      * @since 1.1      */
DECL|method|basicOrdinalDate
specifier|public
specifier|static
name|DateTimeFormatter
name|basicOrdinalDate
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|bod
return|;
block|}
comment|/**      * Returns a formatter for a full ordinal date and time, using a four      * digit year and three digit dayOfYear (yyyyDDD'T'HHmmss.SSSZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which includes milliseconds.      *      * @return a formatter for yyyyDDD'T'HHmmss.SSSZ      * @since 1.1      */
DECL|method|basicOrdinalDateTime
specifier|public
specifier|static
name|DateTimeFormatter
name|basicOrdinalDateTime
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|bodt
return|;
block|}
comment|/**      * Returns a formatter for a full ordinal date and time without millis,      * using a four digit year and three digit dayOfYear (yyyyDDD'T'HHmmssZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which excludes milliseconds.      *      * @return a formatter for yyyyDDD'T'HHmmssZ      * @since 1.1      */
DECL|method|basicOrdinalDateTimeNoMillis
specifier|public
specifier|static
name|DateTimeFormatter
name|basicOrdinalDateTimeNoMillis
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|bodtx
return|;
block|}
comment|/**      * Returns a basic formatter for a full date as four digit weekyear, two      * digit week of weekyear, and one digit day of week (xxxx'W'wwe).      *<p>      * The returned formatter prints and parses only this format.      *      * @return a formatter for xxxx'W'wwe      */
DECL|method|basicWeekDate
specifier|public
specifier|static
name|DateTimeFormatter
name|basicWeekDate
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|bwd
return|;
block|}
comment|/**      * Returns a basic formatter that combines a basic weekyear date and time,      * separated by a 'T' (xxxx'W'wwe'T'HHmmss.SSSZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which includes milliseconds.      *      * @return a formatter for xxxx'W'wwe'T'HHmmss.SSSZ      */
DECL|method|basicWeekDateTime
specifier|public
specifier|static
name|DateTimeFormatter
name|basicWeekDateTime
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|bwdt
return|;
block|}
comment|/**      * Returns a basic formatter that combines a basic weekyear date and time      * without millis, separated by a 'T' (xxxx'W'wwe'T'HHmmssZ).      *<p>      * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.      * The parser is strict by default, thus time string {@code 24:00} cannot be parsed.      *<p>      * The returned formatter prints and parses only this format, which excludes milliseconds.      *      * @return a formatter for xxxx'W'wwe'T'HHmmssZ      */
DECL|method|basicWeekDateTimeNoMillis
specifier|public
specifier|static
name|DateTimeFormatter
name|basicWeekDateTimeNoMillis
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|bwdtx
return|;
block|}
comment|//-----------------------------------------------------------------------
comment|/**      * Returns a formatter for a four digit year. (yyyy)      *      * @return a formatter for yyyy      */
DECL|method|year
specifier|public
specifier|static
name|DateTimeFormatter
name|year
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|ye
return|;
block|}
comment|/**      * Returns a formatter for a four digit year and two digit month of      * year. (yyyy-MM)      *      * @return a formatter for yyyy-MM      */
DECL|method|yearMonth
specifier|public
specifier|static
name|DateTimeFormatter
name|yearMonth
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|ym
return|;
block|}
comment|/**      * Returns a formatter for a four digit year, two digit month of year, and      * two digit day of month. (yyyy-MM-dd)      *      * @return a formatter for yyyy-MM-dd      */
DECL|method|yearMonthDay
specifier|public
specifier|static
name|DateTimeFormatter
name|yearMonthDay
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|ymd
return|;
block|}
comment|/**      * Returns a formatter for a four digit weekyear. (xxxx)      *      * @return a formatter for xxxx      */
DECL|method|weekyear
specifier|public
specifier|static
name|DateTimeFormatter
name|weekyear
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|we
return|;
block|}
comment|/**      * Returns a formatter for a four digit weekyear and two digit week of      * weekyear. (xxxx-'W'ww)      *      * @return a formatter for xxxx-'W'ww      */
DECL|method|weekyearWeek
specifier|public
specifier|static
name|DateTimeFormatter
name|weekyearWeek
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|ww
return|;
block|}
comment|/**      * Returns a formatter for a four digit weekyear, two digit week of      * weekyear, and one digit day of week. (xxxx-'W'ww-e)      *      * @return a formatter for xxxx-'W'ww-e      */
DECL|method|weekyearWeekDay
specifier|public
specifier|static
name|DateTimeFormatter
name|weekyearWeekDay
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|wwd
return|;
block|}
comment|/**      * Returns a formatter for a two digit hour of day. (HH)      *      * @return a formatter for HH      */
DECL|method|hour
specifier|public
specifier|static
name|DateTimeFormatter
name|hour
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|hde
return|;
block|}
comment|/**      * Returns a formatter for a two digit hour of day and two digit minute of      * hour. (HH:mm)      *      * @return a formatter for HH:mm      */
DECL|method|hourMinute
specifier|public
specifier|static
name|DateTimeFormatter
name|hourMinute
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|hm
return|;
block|}
comment|/**      * Returns a formatter for a two digit hour of day, two digit minute of      * hour, and two digit second of minute. (HH:mm:ss)      *      * @return a formatter for HH:mm:ss      */
DECL|method|hourMinuteSecond
specifier|public
specifier|static
name|DateTimeFormatter
name|hourMinuteSecond
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|hms
return|;
block|}
comment|/**      * Returns a formatter for a two digit hour of day, two digit minute of      * hour, two digit second of minute, and three digit fraction of      * second (HH:mm:ss.SSS). Parsing will parse up to 3 fractional second      * digits.      *      * @return a formatter for HH:mm:ss.SSS      */
DECL|method|hourMinuteSecondMillis
specifier|public
specifier|static
name|DateTimeFormatter
name|hourMinuteSecondMillis
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|hmsl
return|;
block|}
comment|/**      * Returns a formatter for a two digit hour of day, two digit minute of      * hour, two digit second of minute, and three digit fraction of      * second (HH:mm:ss.SSS). Parsing will parse up to 9 fractional second      * digits, throwing away all except the first three.      *      * @return a formatter for HH:mm:ss.SSS      */
DECL|method|hourMinuteSecondFraction
specifier|public
specifier|static
name|DateTimeFormatter
name|hourMinuteSecondFraction
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|hmsf
return|;
block|}
comment|/**      * Returns a formatter that combines a full date and two digit hour of      * day. (yyyy-MM-dd'T'HH)      *      * @return a formatter for yyyy-MM-dd'T'HH      */
DECL|method|dateHour
specifier|public
specifier|static
name|DateTimeFormatter
name|dateHour
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|dh
return|;
block|}
comment|/**      * Returns a formatter that combines a full date, two digit hour of day,      * and two digit minute of hour. (yyyy-MM-dd'T'HH:mm)      *      * @return a formatter for yyyy-MM-dd'T'HH:mm      */
DECL|method|dateHourMinute
specifier|public
specifier|static
name|DateTimeFormatter
name|dateHourMinute
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|dhm
return|;
block|}
comment|/**      * Returns a formatter that combines a full date, two digit hour of day,      * two digit minute of hour, and two digit second of      * minute. (yyyy-MM-dd'T'HH:mm:ss)      *      * @return a formatter for yyyy-MM-dd'T'HH:mm:ss      */
DECL|method|dateHourMinuteSecond
specifier|public
specifier|static
name|DateTimeFormatter
name|dateHourMinuteSecond
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|dhms
return|;
block|}
comment|/**      * Returns a formatter that combines a full date, two digit hour of day,      * two digit minute of hour, two digit second of minute, and three digit      * fraction of second (yyyy-MM-dd'T'HH:mm:ss.SSS). Parsing will parse up      * to 3 fractional second digits.      *      * @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSS      */
DECL|method|dateHourMinuteSecondMillis
specifier|public
specifier|static
name|DateTimeFormatter
name|dateHourMinuteSecondMillis
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|dhmsl
return|;
block|}
comment|/**      * Returns a formatter that combines a full date, two digit hour of day,      * two digit minute of hour, two digit second of minute, and three digit      * fraction of second (yyyy-MM-dd'T'HH:mm:ss.SSS). Parsing will parse up      * to 9 fractional second digits, throwing away all except the first three.      *      * @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSS      */
DECL|method|dateHourMinuteSecondFraction
specifier|public
specifier|static
name|DateTimeFormatter
name|dateHourMinuteSecondFraction
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|dhmsf
return|;
block|}
comment|//-----------------------------------------------------------------------
DECL|class|Constants
specifier|static
specifier|final
class|class
name|Constants
block|{
specifier|private
specifier|static
specifier|final
name|DateTimeFormatter
DECL|field|ye
name|ye
init|=
name|yearElement
argument_list|()
decl_stmt|,
comment|// year element (yyyy)
DECL|field|mye
name|mye
init|=
name|monthElement
argument_list|()
decl_stmt|,
comment|// monthOfYear element (-MM)
DECL|field|dme
name|dme
init|=
name|dayOfMonthElement
argument_list|()
decl_stmt|,
comment|// dayOfMonth element (-dd)
DECL|field|we
name|we
init|=
name|weekyearElement
argument_list|()
decl_stmt|,
comment|// weekyear element (xxxx)
DECL|field|wwe
name|wwe
init|=
name|weekElement
argument_list|()
decl_stmt|,
comment|// weekOfWeekyear element (-ww)
DECL|field|dwe
name|dwe
init|=
name|dayOfWeekElement
argument_list|()
decl_stmt|,
comment|// dayOfWeek element (-ee)
DECL|field|dye
name|dye
init|=
name|dayOfYearElement
argument_list|()
decl_stmt|,
comment|// dayOfYear element (-DDD)
DECL|field|hde
name|hde
init|=
name|hourElement
argument_list|()
decl_stmt|,
comment|// hourOfDay element (HH)
DECL|field|mhe
name|mhe
init|=
name|minuteElement
argument_list|()
decl_stmt|,
comment|// minuteOfHour element (:mm)
DECL|field|sme
name|sme
init|=
name|secondElement
argument_list|()
decl_stmt|,
comment|// secondOfMinute element (:ss)
DECL|field|fse
name|fse
init|=
name|fractionElement
argument_list|()
decl_stmt|,
comment|// fractionOfSecond element (.SSSSSSSSS)
DECL|field|ze
name|ze
init|=
name|offsetElement
argument_list|()
decl_stmt|,
comment|// zone offset element
DECL|field|lte
name|lte
init|=
name|literalTElement
argument_list|()
decl_stmt|,
comment|// literal 'T' element
comment|//y,   // year (same as year element)
DECL|field|ym
name|ym
init|=
name|yearMonth
argument_list|()
decl_stmt|,
comment|// year month
DECL|field|ymd
name|ymd
init|=
name|yearMonthDay
argument_list|()
decl_stmt|,
comment|// year month day
comment|//w,   // weekyear (same as weekyear element)
DECL|field|ww
name|ww
init|=
name|weekyearWeek
argument_list|()
decl_stmt|,
comment|// weekyear week
DECL|field|wwd
name|wwd
init|=
name|weekyearWeekDay
argument_list|()
decl_stmt|,
comment|// weekyear week day
comment|//h,    // hour (same as hour element)
DECL|field|hm
name|hm
init|=
name|hourMinute
argument_list|()
decl_stmt|,
comment|// hour minute
DECL|field|hms
name|hms
init|=
name|hourMinuteSecond
argument_list|()
decl_stmt|,
comment|// hour minute second
DECL|field|hmsl
name|hmsl
init|=
name|hourMinuteSecondMillis
argument_list|()
decl_stmt|,
comment|// hour minute second millis
DECL|field|hmsf
name|hmsf
init|=
name|hourMinuteSecondFraction
argument_list|()
decl_stmt|,
comment|// hour minute second fraction
DECL|field|dh
name|dh
init|=
name|dateHour
argument_list|()
decl_stmt|,
comment|// date hour
DECL|field|dhm
name|dhm
init|=
name|dateHourMinute
argument_list|()
decl_stmt|,
comment|// date hour minute
DECL|field|dhms
name|dhms
init|=
name|dateHourMinuteSecond
argument_list|()
decl_stmt|,
comment|// date hour minute second
DECL|field|dhmsl
name|dhmsl
init|=
name|dateHourMinuteSecondMillis
argument_list|()
decl_stmt|,
comment|// date hour minute second millis
DECL|field|dhmsf
name|dhmsf
init|=
name|dateHourMinuteSecondFraction
argument_list|()
decl_stmt|,
comment|// date hour minute second fraction
comment|//d,  // date (same as ymd)
DECL|field|t
name|t
init|=
name|time
argument_list|()
decl_stmt|,
comment|// time
DECL|field|tx
name|tx
init|=
name|timeNoMillis
argument_list|()
decl_stmt|,
comment|// time no millis
DECL|field|tt
name|tt
init|=
name|tTime
argument_list|()
decl_stmt|,
comment|// Ttime
DECL|field|ttx
name|ttx
init|=
name|tTimeNoMillis
argument_list|()
decl_stmt|,
comment|// Ttime no millis
DECL|field|dt
name|dt
init|=
name|dateTime
argument_list|()
decl_stmt|,
comment|// date time
DECL|field|dtx
name|dtx
init|=
name|dateTimeNoMillis
argument_list|()
decl_stmt|,
comment|// date time no millis
comment|//wd,  // week date (same as wwd)
DECL|field|wdt
name|wdt
init|=
name|weekDateTime
argument_list|()
decl_stmt|,
comment|// week date time
DECL|field|wdtx
name|wdtx
init|=
name|weekDateTimeNoMillis
argument_list|()
decl_stmt|,
comment|// week date time no millis
DECL|field|od
name|od
init|=
name|ordinalDate
argument_list|()
decl_stmt|,
comment|// ordinal date (same as yd)
DECL|field|odt
name|odt
init|=
name|ordinalDateTime
argument_list|()
decl_stmt|,
comment|// ordinal date time
DECL|field|odtx
name|odtx
init|=
name|ordinalDateTimeNoMillis
argument_list|()
decl_stmt|,
comment|// ordinal date time no millis
DECL|field|bd
name|bd
init|=
name|basicDate
argument_list|()
decl_stmt|,
comment|// basic date
DECL|field|bt
name|bt
init|=
name|basicTime
argument_list|()
decl_stmt|,
comment|// basic time
DECL|field|btx
name|btx
init|=
name|basicTimeNoMillis
argument_list|()
decl_stmt|,
comment|// basic time no millis
DECL|field|btt
name|btt
init|=
name|basicTTime
argument_list|()
decl_stmt|,
comment|// basic Ttime
DECL|field|bttx
name|bttx
init|=
name|basicTTimeNoMillis
argument_list|()
decl_stmt|,
comment|// basic Ttime no millis
DECL|field|bdt
name|bdt
init|=
name|basicDateTime
argument_list|()
decl_stmt|,
comment|// basic date time
DECL|field|bdtx
name|bdtx
init|=
name|basicDateTimeNoMillis
argument_list|()
decl_stmt|,
comment|// basic date time no millis
DECL|field|bod
name|bod
init|=
name|basicOrdinalDate
argument_list|()
decl_stmt|,
comment|// basic ordinal date
DECL|field|bodt
name|bodt
init|=
name|basicOrdinalDateTime
argument_list|()
decl_stmt|,
comment|// basic ordinal date time
DECL|field|bodtx
name|bodtx
init|=
name|basicOrdinalDateTimeNoMillis
argument_list|()
decl_stmt|,
comment|// basic ordinal date time no millis
DECL|field|bwd
name|bwd
init|=
name|basicWeekDate
argument_list|()
decl_stmt|,
comment|// basic week date
DECL|field|bwdt
name|bwdt
init|=
name|basicWeekDateTime
argument_list|()
decl_stmt|,
comment|// basic week date time
DECL|field|bwdtx
name|bwdtx
init|=
name|basicWeekDateTimeNoMillis
argument_list|()
decl_stmt|,
comment|// basic week date time no millis
DECL|field|dpe
name|dpe
init|=
name|dateElementParser
argument_list|()
decl_stmt|,
comment|// date parser element
DECL|field|tpe
name|tpe
init|=
name|timeElementParser
argument_list|()
decl_stmt|,
comment|// time parser element
DECL|field|dp
name|dp
init|=
name|dateParser
argument_list|()
decl_stmt|,
comment|// date parser
DECL|field|ldp
name|ldp
init|=
name|localDateParser
argument_list|()
decl_stmt|,
comment|// local date parser
DECL|field|tp
name|tp
init|=
name|timeParser
argument_list|()
decl_stmt|,
comment|// time parser
DECL|field|ltp
name|ltp
init|=
name|localTimeParser
argument_list|()
decl_stmt|,
comment|// local time parser
DECL|field|dtp
name|dtp
init|=
name|dateTimeParser
argument_list|()
decl_stmt|,
comment|// date time parser
DECL|field|dotp
name|dotp
init|=
name|dateOptionalTimeParser
argument_list|()
decl_stmt|,
comment|// date optional time parser
DECL|field|ldotp
name|ldotp
init|=
name|localDateOptionalTimeParser
argument_list|()
decl_stmt|;
comment|// local date optional time parser
comment|//-----------------------------------------------------------------------
DECL|method|dateParser
specifier|private
specifier|static
name|DateTimeFormatter
name|dateParser
parameter_list|()
block|{
if|if
condition|(
name|dp
operator|==
literal|null
condition|)
block|{
name|DateTimeParser
name|tOffset
init|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|'T'
argument_list|)
operator|.
name|append
argument_list|(
name|offsetElement
argument_list|()
argument_list|)
operator|.
name|toParser
argument_list|()
decl_stmt|;
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|dateElementParser
argument_list|()
argument_list|)
operator|.
name|appendOptional
argument_list|(
name|tOffset
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|dp
return|;
block|}
DECL|method|localDateParser
specifier|private
specifier|static
name|DateTimeFormatter
name|localDateParser
parameter_list|()
block|{
if|if
condition|(
name|ldp
operator|==
literal|null
condition|)
block|{
return|return
name|dateElementParser
argument_list|()
operator|.
name|withZoneUTC
argument_list|()
return|;
block|}
return|return
name|ldp
return|;
block|}
DECL|method|dateElementParser
specifier|private
specifier|static
name|DateTimeFormatter
name|dateElementParser
parameter_list|()
block|{
if|if
condition|(
name|dpe
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|null
argument_list|,
operator|new
name|DateTimeParser
index|[]
block|{
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|yearElement
argument_list|()
argument_list|)
operator|.
name|appendOptional
argument_list|(
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|monthElement
argument_list|()
argument_list|)
operator|.
name|appendOptional
argument_list|(
name|dayOfMonthElement
argument_list|()
operator|.
name|getParser
argument_list|()
argument_list|)
operator|.
name|toParser
argument_list|()
argument_list|)
operator|.
name|toParser
argument_list|()
block|,
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|weekyearElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|weekElement
argument_list|()
argument_list|)
operator|.
name|appendOptional
argument_list|(
name|dayOfWeekElement
argument_list|()
operator|.
name|getParser
argument_list|()
argument_list|)
operator|.
name|toParser
argument_list|()
block|,
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|yearElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|dayOfYearElement
argument_list|()
argument_list|)
operator|.
name|toParser
argument_list|()
block|}
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|dpe
return|;
block|}
DECL|method|timeParser
specifier|private
specifier|static
name|DateTimeFormatter
name|timeParser
parameter_list|()
block|{
if|if
condition|(
name|tp
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendOptional
argument_list|(
name|literalTElement
argument_list|()
operator|.
name|getParser
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|timeElementParser
argument_list|()
argument_list|)
operator|.
name|appendOptional
argument_list|(
name|offsetElement
argument_list|()
operator|.
name|getParser
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|tp
return|;
block|}
DECL|method|localTimeParser
specifier|private
specifier|static
name|DateTimeFormatter
name|localTimeParser
parameter_list|()
block|{
if|if
condition|(
name|ltp
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendOptional
argument_list|(
name|literalTElement
argument_list|()
operator|.
name|getParser
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|timeElementParser
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
operator|.
name|withZoneUTC
argument_list|()
return|;
block|}
return|return
name|ltp
return|;
block|}
DECL|method|timeElementParser
specifier|private
specifier|static
name|DateTimeFormatter
name|timeElementParser
parameter_list|()
block|{
if|if
condition|(
name|tpe
operator|==
literal|null
condition|)
block|{
comment|// Decimal point can be either '.' or ','
name|DateTimeParser
name|decimalPoint
init|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|null
argument_list|,
operator|new
name|DateTimeParser
index|[]
block|{
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|'.'
argument_list|)
operator|.
name|toParser
argument_list|()
block|,
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|','
argument_list|)
operator|.
name|toParser
argument_list|()
block|}
argument_list|)
operator|.
name|toParser
argument_list|()
decl_stmt|;
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
comment|// time-element
operator|.
name|append
argument_list|(
name|hourElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|null
argument_list|,
operator|new
name|DateTimeParser
index|[]
block|{
operator|new
name|DateTimeFormatterBuilder
argument_list|()
comment|// minute-element
operator|.
name|append
argument_list|(
name|minuteElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|null
argument_list|,
operator|new
name|DateTimeParser
index|[]
block|{
operator|new
name|DateTimeFormatterBuilder
argument_list|()
comment|// second-element
operator|.
name|append
argument_list|(
name|secondElement
argument_list|()
argument_list|)
comment|// second fraction
operator|.
name|appendOptional
argument_list|(
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|decimalPoint
argument_list|)
operator|.
name|appendFractionOfSecond
argument_list|(
literal|1
argument_list|,
literal|9
argument_list|)
operator|.
name|toParser
argument_list|()
argument_list|)
operator|.
name|toParser
argument_list|()
block|,
comment|// minute fraction
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|decimalPoint
argument_list|)
operator|.
name|appendFractionOfMinute
argument_list|(
literal|1
argument_list|,
literal|9
argument_list|)
operator|.
name|toParser
argument_list|()
block|,
literal|null
block|}
argument_list|)
operator|.
name|toParser
argument_list|()
block|,
comment|// hour fraction
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|decimalPoint
argument_list|)
operator|.
name|appendFractionOfHour
argument_list|(
literal|1
argument_list|,
literal|9
argument_list|)
operator|.
name|toParser
argument_list|()
block|,
literal|null
block|}
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|tpe
return|;
block|}
DECL|method|dateTimeParser
specifier|private
specifier|static
name|DateTimeFormatter
name|dateTimeParser
parameter_list|()
block|{
if|if
condition|(
name|dtp
operator|==
literal|null
condition|)
block|{
comment|// This is different from the general time parser in that the 'T'
comment|// is required.
name|DateTimeParser
name|time
init|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|'T'
argument_list|)
operator|.
name|append
argument_list|(
name|timeElementParser
argument_list|()
argument_list|)
operator|.
name|appendOptional
argument_list|(
name|offsetElement
argument_list|()
operator|.
name|getParser
argument_list|()
argument_list|)
operator|.
name|toParser
argument_list|()
decl_stmt|;
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|null
argument_list|,
operator|new
name|DateTimeParser
index|[]
block|{
name|time
block|,
name|dateOptionalTimeParser
argument_list|()
operator|.
name|getParser
argument_list|()
block|}
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|dtp
return|;
block|}
DECL|method|dateOptionalTimeParser
specifier|private
specifier|static
name|DateTimeFormatter
name|dateOptionalTimeParser
parameter_list|()
block|{
if|if
condition|(
name|dotp
operator|==
literal|null
condition|)
block|{
name|DateTimeParser
name|timeOrOffset
init|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|'T'
argument_list|)
operator|.
name|appendOptional
argument_list|(
name|timeElementParser
argument_list|()
operator|.
name|getParser
argument_list|()
argument_list|)
operator|.
name|appendOptional
argument_list|(
name|offsetElement
argument_list|()
operator|.
name|getParser
argument_list|()
argument_list|)
operator|.
name|toParser
argument_list|()
decl_stmt|;
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|dateElementParser
argument_list|()
argument_list|)
operator|.
name|appendOptional
argument_list|(
name|timeOrOffset
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|dotp
return|;
block|}
DECL|method|localDateOptionalTimeParser
specifier|private
specifier|static
name|DateTimeFormatter
name|localDateOptionalTimeParser
parameter_list|()
block|{
if|if
condition|(
name|ldotp
operator|==
literal|null
condition|)
block|{
name|DateTimeParser
name|time
init|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|'T'
argument_list|)
operator|.
name|append
argument_list|(
name|timeElementParser
argument_list|()
argument_list|)
operator|.
name|toParser
argument_list|()
decl_stmt|;
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|dateElementParser
argument_list|()
argument_list|)
operator|.
name|appendOptional
argument_list|(
name|time
argument_list|)
operator|.
name|toFormatter
argument_list|()
operator|.
name|withZoneUTC
argument_list|()
return|;
block|}
return|return
name|ldotp
return|;
block|}
comment|//-----------------------------------------------------------------------
DECL|method|time
specifier|private
specifier|static
name|DateTimeFormatter
name|time
parameter_list|()
block|{
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|hourMinuteSecondFraction
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|offsetElement
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|t
return|;
block|}
DECL|method|timeNoMillis
specifier|private
specifier|static
name|DateTimeFormatter
name|timeNoMillis
parameter_list|()
block|{
if|if
condition|(
name|tx
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|hourMinuteSecond
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|offsetElement
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|tx
return|;
block|}
DECL|method|tTime
specifier|private
specifier|static
name|DateTimeFormatter
name|tTime
parameter_list|()
block|{
if|if
condition|(
name|tt
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|literalTElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|time
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|tt
return|;
block|}
DECL|method|tTimeNoMillis
specifier|private
specifier|static
name|DateTimeFormatter
name|tTimeNoMillis
parameter_list|()
block|{
if|if
condition|(
name|ttx
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|literalTElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|timeNoMillis
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|ttx
return|;
block|}
DECL|method|dateTime
specifier|private
specifier|static
name|DateTimeFormatter
name|dateTime
parameter_list|()
block|{
if|if
condition|(
name|dt
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|date
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|tTime
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|dt
return|;
block|}
DECL|method|dateTimeNoMillis
specifier|private
specifier|static
name|DateTimeFormatter
name|dateTimeNoMillis
parameter_list|()
block|{
if|if
condition|(
name|dtx
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|date
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|tTimeNoMillis
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|dtx
return|;
block|}
DECL|method|ordinalDate
specifier|private
specifier|static
name|DateTimeFormatter
name|ordinalDate
parameter_list|()
block|{
if|if
condition|(
name|od
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|yearElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|dayOfYearElement
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|od
return|;
block|}
DECL|method|ordinalDateTime
specifier|private
specifier|static
name|DateTimeFormatter
name|ordinalDateTime
parameter_list|()
block|{
if|if
condition|(
name|odt
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|ordinalDate
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|tTime
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|odt
return|;
block|}
DECL|method|ordinalDateTimeNoMillis
specifier|private
specifier|static
name|DateTimeFormatter
name|ordinalDateTimeNoMillis
parameter_list|()
block|{
if|if
condition|(
name|odtx
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|ordinalDate
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|tTimeNoMillis
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|odtx
return|;
block|}
DECL|method|weekDateTime
specifier|private
specifier|static
name|DateTimeFormatter
name|weekDateTime
parameter_list|()
block|{
if|if
condition|(
name|wdt
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|weekDate
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|tTime
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|wdt
return|;
block|}
DECL|method|weekDateTimeNoMillis
specifier|private
specifier|static
name|DateTimeFormatter
name|weekDateTimeNoMillis
parameter_list|()
block|{
if|if
condition|(
name|wdtx
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|weekDate
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|tTimeNoMillis
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|wdtx
return|;
block|}
comment|//-----------------------------------------------------------------------
DECL|method|basicDate
specifier|private
specifier|static
name|DateTimeFormatter
name|basicDate
parameter_list|()
block|{
if|if
condition|(
name|bd
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendYear
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
operator|.
name|appendFixedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|monthOfYear
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|appendFixedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfMonth
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|bd
return|;
block|}
DECL|method|basicTime
specifier|private
specifier|static
name|DateTimeFormatter
name|basicTime
parameter_list|()
block|{
if|if
condition|(
name|bt
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendFixedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|hourOfDay
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|appendFixedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|minuteOfHour
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|appendFixedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|secondOfMinute
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|appendLiteral
argument_list|(
literal|'.'
argument_list|)
operator|.
name|appendFractionOfSecond
argument_list|(
literal|3
argument_list|,
literal|9
argument_list|)
operator|.
name|appendTimeZoneOffset
argument_list|(
literal|"Z"
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|bt
return|;
block|}
DECL|method|basicTimeNoMillis
specifier|private
specifier|static
name|DateTimeFormatter
name|basicTimeNoMillis
parameter_list|()
block|{
if|if
condition|(
name|btx
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendFixedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|hourOfDay
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|appendFixedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|minuteOfHour
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|appendFixedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|secondOfMinute
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|appendTimeZoneOffset
argument_list|(
literal|"Z"
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|btx
return|;
block|}
DECL|method|basicTTime
specifier|private
specifier|static
name|DateTimeFormatter
name|basicTTime
parameter_list|()
block|{
if|if
condition|(
name|btt
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|literalTElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|basicTime
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|btt
return|;
block|}
DECL|method|basicTTimeNoMillis
specifier|private
specifier|static
name|DateTimeFormatter
name|basicTTimeNoMillis
parameter_list|()
block|{
if|if
condition|(
name|bttx
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|literalTElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|basicTimeNoMillis
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|bttx
return|;
block|}
DECL|method|basicDateTime
specifier|private
specifier|static
name|DateTimeFormatter
name|basicDateTime
parameter_list|()
block|{
if|if
condition|(
name|bdt
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|basicDate
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|basicTTime
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|bdt
return|;
block|}
DECL|method|basicDateTimeNoMillis
specifier|private
specifier|static
name|DateTimeFormatter
name|basicDateTimeNoMillis
parameter_list|()
block|{
if|if
condition|(
name|bdtx
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|basicDate
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|basicTTimeNoMillis
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|bdtx
return|;
block|}
DECL|method|basicOrdinalDate
specifier|private
specifier|static
name|DateTimeFormatter
name|basicOrdinalDate
parameter_list|()
block|{
if|if
condition|(
name|bod
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendYear
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
operator|.
name|appendFixedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfYear
argument_list|()
argument_list|,
literal|3
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|bod
return|;
block|}
DECL|method|basicOrdinalDateTime
specifier|private
specifier|static
name|DateTimeFormatter
name|basicOrdinalDateTime
parameter_list|()
block|{
if|if
condition|(
name|bodt
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|basicOrdinalDate
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|basicTTime
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|bodt
return|;
block|}
DECL|method|basicOrdinalDateTimeNoMillis
specifier|private
specifier|static
name|DateTimeFormatter
name|basicOrdinalDateTimeNoMillis
parameter_list|()
block|{
if|if
condition|(
name|bodtx
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|basicOrdinalDate
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|basicTTimeNoMillis
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|bodtx
return|;
block|}
DECL|method|basicWeekDate
specifier|private
specifier|static
name|DateTimeFormatter
name|basicWeekDate
parameter_list|()
block|{
if|if
condition|(
name|bwd
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendFixedSignedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|weekyear
argument_list|()
argument_list|,
literal|4
argument_list|)
comment|// ES change, was .appendWeekyear(4, 4)
operator|.
name|appendLiteral
argument_list|(
literal|'W'
argument_list|)
operator|.
name|appendFixedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|weekOfWeekyear
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|appendFixedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfWeek
argument_list|()
argument_list|,
literal|1
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|bwd
return|;
block|}
DECL|method|basicWeekDateTime
specifier|private
specifier|static
name|DateTimeFormatter
name|basicWeekDateTime
parameter_list|()
block|{
if|if
condition|(
name|bwdt
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|basicWeekDate
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|basicTTime
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|bwdt
return|;
block|}
DECL|method|basicWeekDateTimeNoMillis
specifier|private
specifier|static
name|DateTimeFormatter
name|basicWeekDateTimeNoMillis
parameter_list|()
block|{
if|if
condition|(
name|bwdtx
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|basicWeekDate
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|basicTTimeNoMillis
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|bwdtx
return|;
block|}
comment|//-----------------------------------------------------------------------
DECL|method|yearMonth
specifier|private
specifier|static
name|DateTimeFormatter
name|yearMonth
parameter_list|()
block|{
if|if
condition|(
name|ym
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|yearElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|monthElement
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|ym
return|;
block|}
DECL|method|yearMonthDay
specifier|private
specifier|static
name|DateTimeFormatter
name|yearMonthDay
parameter_list|()
block|{
if|if
condition|(
name|ymd
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|yearElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|monthElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|dayOfMonthElement
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|ymd
return|;
block|}
DECL|method|weekyearWeek
specifier|private
specifier|static
name|DateTimeFormatter
name|weekyearWeek
parameter_list|()
block|{
if|if
condition|(
name|ww
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|weekyearElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|weekElement
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|ww
return|;
block|}
DECL|method|weekyearWeekDay
specifier|private
specifier|static
name|DateTimeFormatter
name|weekyearWeekDay
parameter_list|()
block|{
if|if
condition|(
name|wwd
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|weekyearElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|weekElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|dayOfWeekElement
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|wwd
return|;
block|}
DECL|method|hourMinute
specifier|private
specifier|static
name|DateTimeFormatter
name|hourMinute
parameter_list|()
block|{
if|if
condition|(
name|hm
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|hourElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|minuteElement
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|hm
return|;
block|}
DECL|method|hourMinuteSecond
specifier|private
specifier|static
name|DateTimeFormatter
name|hourMinuteSecond
parameter_list|()
block|{
if|if
condition|(
name|hms
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|hourElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|minuteElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|secondElement
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|hms
return|;
block|}
DECL|method|hourMinuteSecondMillis
specifier|private
specifier|static
name|DateTimeFormatter
name|hourMinuteSecondMillis
parameter_list|()
block|{
if|if
condition|(
name|hmsl
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|hourElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|minuteElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|secondElement
argument_list|()
argument_list|)
operator|.
name|appendLiteral
argument_list|(
literal|'.'
argument_list|)
operator|.
name|appendFractionOfSecond
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|hmsl
return|;
block|}
DECL|method|hourMinuteSecondFraction
specifier|private
specifier|static
name|DateTimeFormatter
name|hourMinuteSecondFraction
parameter_list|()
block|{
if|if
condition|(
name|hmsf
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|hourElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|minuteElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|secondElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|fractionElement
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|hmsf
return|;
block|}
DECL|method|dateHour
specifier|private
specifier|static
name|DateTimeFormatter
name|dateHour
parameter_list|()
block|{
if|if
condition|(
name|dh
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|date
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|literalTElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|hour
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|dh
return|;
block|}
DECL|method|dateHourMinute
specifier|private
specifier|static
name|DateTimeFormatter
name|dateHourMinute
parameter_list|()
block|{
if|if
condition|(
name|dhm
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|date
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|literalTElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|hourMinute
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|dhm
return|;
block|}
DECL|method|dateHourMinuteSecond
specifier|private
specifier|static
name|DateTimeFormatter
name|dateHourMinuteSecond
parameter_list|()
block|{
if|if
condition|(
name|dhms
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|date
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|literalTElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|hourMinuteSecond
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|dhms
return|;
block|}
DECL|method|dateHourMinuteSecondMillis
specifier|private
specifier|static
name|DateTimeFormatter
name|dateHourMinuteSecondMillis
parameter_list|()
block|{
if|if
condition|(
name|dhmsl
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|date
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|literalTElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|hourMinuteSecondMillis
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|dhmsl
return|;
block|}
DECL|method|dateHourMinuteSecondFraction
specifier|private
specifier|static
name|DateTimeFormatter
name|dateHourMinuteSecondFraction
parameter_list|()
block|{
if|if
condition|(
name|dhmsf
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|date
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|literalTElement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|hourMinuteSecondFraction
argument_list|()
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|dhmsf
return|;
block|}
comment|//-----------------------------------------------------------------------
DECL|method|yearElement
specifier|private
specifier|static
name|DateTimeFormatter
name|yearElement
parameter_list|()
block|{
if|if
condition|(
name|ye
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendFixedSignedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|year
argument_list|()
argument_list|,
literal|4
argument_list|)
comment|// ES change, was .appendYear(4, 9)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|ye
return|;
block|}
DECL|method|monthElement
specifier|private
specifier|static
name|DateTimeFormatter
name|monthElement
parameter_list|()
block|{
if|if
condition|(
name|mye
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
operator|.
name|appendFixedSignedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|monthOfYear
argument_list|()
argument_list|,
literal|2
argument_list|)
comment|// ES change, was .appendMonthOfYear(2)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|mye
return|;
block|}
DECL|method|dayOfMonthElement
specifier|private
specifier|static
name|DateTimeFormatter
name|dayOfMonthElement
parameter_list|()
block|{
if|if
condition|(
name|dme
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
operator|.
name|appendFixedSignedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfMonth
argument_list|()
argument_list|,
literal|2
argument_list|)
comment|// ES change, was .appendDayOfMonth(2)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|dme
return|;
block|}
DECL|method|weekyearElement
specifier|private
specifier|static
name|DateTimeFormatter
name|weekyearElement
parameter_list|()
block|{
if|if
condition|(
name|we
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendFixedSignedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|weekyear
argument_list|()
argument_list|,
literal|4
argument_list|)
comment|// ES change, was .appendWeekyear(4, 9)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|we
return|;
block|}
DECL|method|weekElement
specifier|private
specifier|static
name|DateTimeFormatter
name|weekElement
parameter_list|()
block|{
if|if
condition|(
name|wwe
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|"-W"
argument_list|)
operator|.
name|appendFixedSignedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|weekOfWeekyear
argument_list|()
argument_list|,
literal|2
argument_list|)
comment|// ES change, was .appendWeekOfWeekyear(2)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|wwe
return|;
block|}
DECL|method|dayOfWeekElement
specifier|private
specifier|static
name|DateTimeFormatter
name|dayOfWeekElement
parameter_list|()
block|{
if|if
condition|(
name|dwe
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
operator|.
name|appendDayOfWeek
argument_list|(
literal|1
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|dwe
return|;
block|}
DECL|method|dayOfYearElement
specifier|private
specifier|static
name|DateTimeFormatter
name|dayOfYearElement
parameter_list|()
block|{
if|if
condition|(
name|dye
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
operator|.
name|appendFixedSignedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|dayOfYear
argument_list|()
argument_list|,
literal|3
argument_list|)
comment|// ES change, was .appendDayOfYear(3)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|dye
return|;
block|}
DECL|method|literalTElement
specifier|private
specifier|static
name|DateTimeFormatter
name|literalTElement
parameter_list|()
block|{
if|if
condition|(
name|lte
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|'T'
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|lte
return|;
block|}
DECL|method|hourElement
specifier|private
specifier|static
name|DateTimeFormatter
name|hourElement
parameter_list|()
block|{
if|if
condition|(
name|hde
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendFixedSignedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|hourOfDay
argument_list|()
argument_list|,
literal|2
argument_list|)
comment|// ES change, was .appendHourOfDay(2)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|hde
return|;
block|}
DECL|method|minuteElement
specifier|private
specifier|static
name|DateTimeFormatter
name|minuteElement
parameter_list|()
block|{
if|if
condition|(
name|mhe
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|':'
argument_list|)
operator|.
name|appendFixedSignedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|minuteOfHour
argument_list|()
argument_list|,
literal|2
argument_list|)
comment|// ES change, was .appendMinuteOfHour(2)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|mhe
return|;
block|}
DECL|method|secondElement
specifier|private
specifier|static
name|DateTimeFormatter
name|secondElement
parameter_list|()
block|{
if|if
condition|(
name|sme
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|':'
argument_list|)
operator|.
name|appendFixedSignedDecimal
argument_list|(
name|DateTimeFieldType
operator|.
name|secondOfMinute
argument_list|()
argument_list|,
literal|2
argument_list|)
comment|// ES change, was .appendSecondOfMinute(2)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|sme
return|;
block|}
DECL|method|fractionElement
specifier|private
specifier|static
name|DateTimeFormatter
name|fractionElement
parameter_list|()
block|{
if|if
condition|(
name|fse
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|'.'
argument_list|)
comment|// Support parsing up to nanosecond precision even though
comment|// those extra digits will be dropped.
operator|.
name|appendFractionOfSecond
argument_list|(
literal|3
argument_list|,
literal|9
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|fse
return|;
block|}
DECL|method|offsetElement
specifier|private
specifier|static
name|DateTimeFormatter
name|offsetElement
parameter_list|()
block|{
if|if
condition|(
name|ze
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendTimeZoneOffset
argument_list|(
literal|"Z"
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
return|return
name|ze
return|;
block|}
block|}
block|}
end_class

end_unit

