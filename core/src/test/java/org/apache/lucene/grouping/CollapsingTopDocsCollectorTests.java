begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.grouping
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|grouping
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedNumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedSetDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CompositeReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedNumericSortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedSetSortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopFieldCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopFieldDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|CollapseTopFieldDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|CollapsingTopDocsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|CollapsingTopDocsCollectorTests
specifier|public
class|class
name|CollapsingTopDocsCollectorTests
extends|extends
name|ESTestCase
block|{
DECL|class|SegmentSearcher
specifier|private
specifier|static
class|class
name|SegmentSearcher
extends|extends
name|IndexSearcher
block|{
DECL|field|ctx
specifier|private
specifier|final
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|ctx
decl_stmt|;
DECL|method|SegmentSearcher
name|SegmentSearcher
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|,
name|IndexReaderContext
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|ctx
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
DECL|method|search
specifier|public
name|void
name|search
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|Collector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
name|search
argument_list|(
name|ctx
argument_list|,
name|weight
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ShardSearcher("
operator|+
name|ctx
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|")"
return|;
block|}
block|}
DECL|interface|CollapsingDocValuesProducer
interface|interface
name|CollapsingDocValuesProducer
parameter_list|<
name|T
extends|extends
name|Comparable
parameter_list|>
block|{
DECL|method|randomGroup
name|T
name|randomGroup
parameter_list|(
name|int
name|maxGroup
parameter_list|)
function_decl|;
DECL|method|add
name|void
name|add
parameter_list|(
name|Document
name|doc
parameter_list|,
name|T
name|value
parameter_list|,
name|boolean
name|multivalued
parameter_list|)
function_decl|;
DECL|method|sortField
name|SortField
name|sortField
parameter_list|(
name|boolean
name|multivalued
parameter_list|)
function_decl|;
block|}
DECL|method|assertSearchCollapse
parameter_list|<
name|T
extends|extends
name|Comparable
parameter_list|>
name|void
name|assertSearchCollapse
parameter_list|(
name|CollapsingDocValuesProducer
argument_list|<
name|T
argument_list|>
name|dvProducers
parameter_list|,
name|boolean
name|numeric
parameter_list|)
throws|throws
name|IOException
block|{
name|assertSearchCollapse
argument_list|(
name|dvProducers
argument_list|,
name|numeric
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertSearchCollapse
argument_list|(
name|dvProducers
argument_list|,
name|numeric
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSearchCollapse
specifier|private
parameter_list|<
name|T
extends|extends
name|Comparable
parameter_list|>
name|void
name|assertSearchCollapse
parameter_list|(
name|CollapsingDocValuesProducer
argument_list|<
name|T
argument_list|>
name|dvProducers
parameter_list|,
name|boolean
name|numeric
parameter_list|,
name|boolean
name|multivalued
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|1000
argument_list|,
literal|2000
argument_list|)
decl_stmt|;
name|int
name|maxGroup
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|500
argument_list|)
decl_stmt|;
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|T
argument_list|>
name|values
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|totalHits
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|T
name|value
init|=
name|dvProducers
operator|.
name|randomGroup
argument_list|(
name|maxGroup
argument_list|)
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|dvProducers
operator|.
name|add
argument_list|(
name|doc
argument_list|,
name|value
argument_list|,
name|multivalued
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"sort1"
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"sort2"
argument_list|,
name|randomLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|totalHits
operator|++
expr_stmt|;
block|}
name|List
argument_list|<
name|T
argument_list|>
name|valueList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|valueList
argument_list|)
expr_stmt|;
specifier|final
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
specifier|final
name|SortField
name|collapseField
init|=
name|dvProducers
operator|.
name|sortField
argument_list|(
name|multivalued
argument_list|)
decl_stmt|;
specifier|final
name|SortField
name|sort1
init|=
operator|new
name|SortField
argument_list|(
literal|"sort1"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|)
decl_stmt|;
specifier|final
name|SortField
name|sort2
init|=
operator|new
name|SortField
argument_list|(
literal|"sort2"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|Sort
name|sort
init|=
operator|new
name|Sort
argument_list|(
name|sort1
argument_list|,
name|sort2
argument_list|,
name|collapseField
argument_list|)
decl_stmt|;
name|int
name|expectedNumGroups
init|=
name|values
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|CollapsingTopDocsCollector
name|collapsingCollector
decl_stmt|;
if|if
condition|(
name|numeric
condition|)
block|{
name|collapsingCollector
operator|=
name|CollapsingTopDocsCollector
operator|.
name|createNumeric
argument_list|(
name|collapseField
operator|.
name|getField
argument_list|()
argument_list|,
name|sort
argument_list|,
name|expectedNumGroups
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collapsingCollector
operator|=
name|CollapsingTopDocsCollector
operator|.
name|createKeyword
argument_list|(
name|collapseField
operator|.
name|getField
argument_list|()
argument_list|,
name|sort
argument_list|,
name|expectedNumGroups
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|TopFieldCollector
name|topFieldCollector
init|=
name|TopFieldCollector
operator|.
name|create
argument_list|(
name|sort
argument_list|,
name|totalHits
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|collapsingCollector
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|topFieldCollector
argument_list|)
expr_stmt|;
name|CollapseTopFieldDocs
name|collapseTopFieldDocs
init|=
name|collapsingCollector
operator|.
name|getTopDocs
argument_list|()
decl_stmt|;
name|TopFieldDocs
name|topDocs
init|=
name|topFieldCollector
operator|.
name|topDocs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|collapseField
operator|.
name|getField
argument_list|()
argument_list|,
name|collapseTopFieldDocs
operator|.
name|field
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNumGroups
argument_list|,
name|collapseTopFieldDocs
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHits
argument_list|,
name|collapseTopFieldDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHits
argument_list|,
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHits
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Object
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// collapse field is the last sort
name|int
name|collapseIndex
init|=
name|sort
operator|.
name|getSort
argument_list|()
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|topDocsIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedNumGroups
condition|;
name|i
operator|++
control|)
block|{
name|FieldDoc
name|fieldDoc
init|=
literal|null
decl_stmt|;
for|for
control|(
init|;
name|topDocsIndex
operator|<
name|totalHits
condition|;
name|topDocsIndex
operator|++
control|)
block|{
name|fieldDoc
operator|=
operator|(
name|FieldDoc
operator|)
name|topDocs
operator|.
name|scoreDocs
index|[
name|topDocsIndex
index|]
expr_stmt|;
if|if
condition|(
name|seen
operator|.
name|contains
argument_list|(
name|fieldDoc
operator|.
name|fields
index|[
name|collapseIndex
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
break|break;
block|}
block|}
name|FieldDoc
name|collapseFieldDoc
init|=
operator|(
name|FieldDoc
operator|)
name|collapseTopFieldDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldDoc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collapseFieldDoc
operator|.
name|doc
argument_list|,
name|fieldDoc
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|collapseFieldDoc
operator|.
name|fields
argument_list|,
name|fieldDoc
operator|.
name|fields
argument_list|)
expr_stmt|;
name|seen
operator|.
name|add
argument_list|(
name|fieldDoc
operator|.
name|fields
index|[
name|fieldDoc
operator|.
name|fields
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|topDocsIndex
operator|<
name|totalHits
condition|;
name|topDocsIndex
operator|++
control|)
block|{
name|FieldDoc
name|fieldDoc
init|=
operator|(
name|FieldDoc
operator|)
name|topDocs
operator|.
name|scoreDocs
index|[
name|topDocsIndex
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|seen
operator|.
name|contains
argument_list|(
name|fieldDoc
operator|.
name|fields
index|[
name|collapseIndex
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check merge
specifier|final
name|IndexReaderContext
name|ctx
init|=
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
decl_stmt|;
specifier|final
name|SegmentSearcher
index|[]
name|subSearchers
decl_stmt|;
specifier|final
name|int
index|[]
name|docStarts
decl_stmt|;
if|if
condition|(
name|ctx
operator|instanceof
name|LeafReaderContext
condition|)
block|{
name|subSearchers
operator|=
operator|new
name|SegmentSearcher
index|[
literal|1
index|]
expr_stmt|;
name|docStarts
operator|=
operator|new
name|int
index|[
literal|1
index|]
expr_stmt|;
name|subSearchers
index|[
literal|0
index|]
operator|=
operator|new
name|SegmentSearcher
argument_list|(
operator|(
name|LeafReaderContext
operator|)
name|ctx
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|docStarts
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|CompositeReaderContext
name|compCTX
init|=
operator|(
name|CompositeReaderContext
operator|)
name|ctx
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|compCTX
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|subSearchers
operator|=
operator|new
name|SegmentSearcher
index|[
name|size
index|]
expr_stmt|;
name|docStarts
operator|=
operator|new
name|int
index|[
name|size
index|]
expr_stmt|;
name|int
name|docBase
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|searcherIDX
init|=
literal|0
init|;
name|searcherIDX
operator|<
name|subSearchers
operator|.
name|length
condition|;
name|searcherIDX
operator|++
control|)
block|{
specifier|final
name|LeafReaderContext
name|leave
init|=
name|compCTX
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
name|searcherIDX
argument_list|)
decl_stmt|;
name|subSearchers
index|[
name|searcherIDX
index|]
operator|=
operator|new
name|SegmentSearcher
argument_list|(
name|leave
argument_list|,
name|compCTX
argument_list|)
expr_stmt|;
name|docStarts
index|[
name|searcherIDX
index|]
operator|=
name|docBase
expr_stmt|;
name|docBase
operator|+=
name|leave
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|CollapseTopFieldDocs
index|[]
name|shardHits
init|=
operator|new
name|CollapseTopFieldDocs
index|[
name|subSearchers
operator|.
name|length
index|]
decl_stmt|;
specifier|final
name|Weight
name|weight
init|=
name|searcher
operator|.
name|createNormalizedWeight
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|shardIDX
init|=
literal|0
init|;
name|shardIDX
operator|<
name|subSearchers
operator|.
name|length
condition|;
name|shardIDX
operator|++
control|)
block|{
specifier|final
name|SegmentSearcher
name|subSearcher
init|=
name|subSearchers
index|[
name|shardIDX
index|]
decl_stmt|;
specifier|final
name|CollapsingTopDocsCollector
name|c
decl_stmt|;
if|if
condition|(
name|numeric
condition|)
block|{
name|c
operator|=
name|CollapsingTopDocsCollector
operator|.
name|createNumeric
argument_list|(
name|collapseField
operator|.
name|getField
argument_list|()
argument_list|,
name|sort
argument_list|,
name|expectedNumGroups
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|CollapsingTopDocsCollector
operator|.
name|createKeyword
argument_list|(
name|collapseField
operator|.
name|getField
argument_list|()
argument_list|,
name|sort
argument_list|,
name|expectedNumGroups
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|subSearcher
operator|.
name|search
argument_list|(
name|weight
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|shardHits
index|[
name|shardIDX
index|]
operator|=
name|c
operator|.
name|getTopDocs
argument_list|()
expr_stmt|;
block|}
name|CollapseTopFieldDocs
name|mergedFieldDocs
init|=
name|CollapseTopFieldDocs
operator|.
name|merge
argument_list|(
name|sort
argument_list|,
literal|0
argument_list|,
name|expectedNumGroups
argument_list|,
name|shardHits
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTopDocsEquals
argument_list|(
name|mergedFieldDocs
argument_list|,
name|collapseTopFieldDocs
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|assertTopDocsEquals
specifier|private
specifier|static
name|void
name|assertTopDocsEquals
parameter_list|(
name|CollapseTopFieldDocs
name|topDocs1
parameter_list|,
name|CollapseTopFieldDocs
name|topDocs2
parameter_list|)
block|{
name|TestUtil
operator|.
name|assertEquals
argument_list|(
name|topDocs1
argument_list|,
name|topDocs2
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|topDocs1
operator|.
name|collapseValues
argument_list|,
name|topDocs2
operator|.
name|collapseValues
argument_list|)
expr_stmt|;
block|}
DECL|method|testCollapseLong
specifier|public
name|void
name|testCollapseLong
parameter_list|()
throws|throws
name|Exception
block|{
name|CollapsingDocValuesProducer
name|producer
init|=
operator|new
name|CollapsingDocValuesProducer
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|randomGroup
parameter_list|(
name|int
name|maxGroup
parameter_list|)
block|{
return|return
name|randomNonNegativeLong
argument_list|()
operator|%
name|maxGroup
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Long
name|value
parameter_list|,
name|boolean
name|multivalued
parameter_list|)
block|{
if|if
condition|(
name|multivalued
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SortField
name|sortField
parameter_list|(
name|boolean
name|multivalued
parameter_list|)
block|{
if|if
condition|(
name|multivalued
condition|)
block|{
return|return
operator|new
name|SortedNumericSortField
argument_list|(
literal|"field"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|LONG
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortField
argument_list|(
literal|"field"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|LONG
argument_list|)
return|;
block|}
block|}
block|}
decl_stmt|;
name|assertSearchCollapse
argument_list|(
name|producer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCollapseInt
specifier|public
name|void
name|testCollapseInt
parameter_list|()
throws|throws
name|Exception
block|{
name|CollapsingDocValuesProducer
name|producer
init|=
operator|new
name|CollapsingDocValuesProducer
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|randomGroup
parameter_list|(
name|int
name|maxGroup
parameter_list|)
block|{
return|return
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|maxGroup
operator|-
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Integer
name|value
parameter_list|,
name|boolean
name|multivalued
parameter_list|)
block|{
if|if
condition|(
name|multivalued
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SortField
name|sortField
parameter_list|(
name|boolean
name|multivalued
parameter_list|)
block|{
if|if
condition|(
name|multivalued
condition|)
block|{
return|return
operator|new
name|SortedNumericSortField
argument_list|(
literal|"field"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortField
argument_list|(
literal|"field"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|)
return|;
block|}
block|}
block|}
decl_stmt|;
name|assertSearchCollapse
argument_list|(
name|producer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCollapseFloat
specifier|public
name|void
name|testCollapseFloat
parameter_list|()
throws|throws
name|Exception
block|{
name|CollapsingDocValuesProducer
name|producer
init|=
operator|new
name|CollapsingDocValuesProducer
argument_list|<
name|Float
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Float
name|randomGroup
parameter_list|(
name|int
name|maxGroup
parameter_list|)
block|{
return|return
operator|new
name|Float
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|maxGroup
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Float
name|value
parameter_list|,
name|boolean
name|multivalued
parameter_list|)
block|{
if|if
condition|(
name|multivalued
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SortField
name|sortField
parameter_list|(
name|boolean
name|multivalued
parameter_list|)
block|{
if|if
condition|(
name|multivalued
condition|)
block|{
return|return
operator|new
name|SortedNumericSortField
argument_list|(
literal|"field"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|FLOAT
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortField
argument_list|(
literal|"field"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|FLOAT
argument_list|)
return|;
block|}
block|}
block|}
decl_stmt|;
name|assertSearchCollapse
argument_list|(
name|producer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCollapseDouble
specifier|public
name|void
name|testCollapseDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|CollapsingDocValuesProducer
name|producer
init|=
operator|new
name|CollapsingDocValuesProducer
argument_list|<
name|Double
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Double
name|randomGroup
parameter_list|(
name|int
name|maxGroup
parameter_list|)
block|{
return|return
operator|new
name|Double
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|maxGroup
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Double
name|value
parameter_list|,
name|boolean
name|multivalued
parameter_list|)
block|{
if|if
condition|(
name|multivalued
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SortField
name|sortField
parameter_list|(
name|boolean
name|multivalued
parameter_list|)
block|{
if|if
condition|(
name|multivalued
condition|)
block|{
return|return
operator|new
name|SortedNumericSortField
argument_list|(
literal|"field"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|DOUBLE
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortField
argument_list|(
literal|"field"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|DOUBLE
argument_list|)
return|;
block|}
block|}
block|}
decl_stmt|;
name|assertSearchCollapse
argument_list|(
name|producer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCollapseString
specifier|public
name|void
name|testCollapseString
parameter_list|()
throws|throws
name|Exception
block|{
name|CollapsingDocValuesProducer
name|producer
init|=
operator|new
name|CollapsingDocValuesProducer
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|BytesRef
name|randomGroup
parameter_list|(
name|int
name|maxGroup
parameter_list|)
block|{
return|return
operator|new
name|BytesRef
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|maxGroup
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Document
name|doc
parameter_list|,
name|BytesRef
name|value
parameter_list|,
name|boolean
name|multivalued
parameter_list|)
block|{
if|if
condition|(
name|multivalued
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SortField
name|sortField
parameter_list|(
name|boolean
name|multivalued
parameter_list|)
block|{
if|if
condition|(
name|multivalued
condition|)
block|{
return|return
operator|new
name|SortedSetSortField
argument_list|(
literal|"field"
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SortField
argument_list|(
literal|"field"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING_VAL
argument_list|)
return|;
block|}
block|}
block|}
decl_stmt|;
name|assertSearchCollapse
argument_list|(
name|producer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyNumericSegment
specifier|public
name|void
name|testEmptyNumericSegment
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"group"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"group"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|doc
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"group"
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|doc
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"category"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|SortField
name|sortField
init|=
operator|new
name|SortField
argument_list|(
literal|"group"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|sortField
operator|.
name|setMissingValue
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Sort
name|sort
init|=
operator|new
name|Sort
argument_list|(
name|sortField
argument_list|)
decl_stmt|;
specifier|final
name|CollapsingTopDocsCollector
name|collapsingCollector
init|=
name|CollapsingTopDocsCollector
operator|.
name|createNumeric
argument_list|(
literal|"group"
argument_list|,
name|sort
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|collapsingCollector
argument_list|)
expr_stmt|;
name|CollapseTopFieldDocs
name|collapseTopFieldDocs
init|=
name|collapsingCollector
operator|.
name|getTopDocs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|collapseTopFieldDocs
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|collapseTopFieldDocs
operator|.
name|collapseValues
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|collapseTopFieldDocs
operator|.
name|collapseValues
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|collapseTopFieldDocs
operator|.
name|collapseValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|collapseTopFieldDocs
operator|.
name|collapseValues
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|collapseTopFieldDocs
operator|.
name|collapseValues
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testEmptySortedSegment
specifier|public
name|void
name|testEmptySortedSegment
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"group"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"group"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|doc
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"group"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"10"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|doc
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"category"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|Sort
name|sort
init|=
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"group"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|STRING_VAL
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|CollapsingTopDocsCollector
name|collapsingCollector
init|=
name|CollapsingTopDocsCollector
operator|.
name|createKeyword
argument_list|(
literal|"group"
argument_list|,
name|sort
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|collapsingCollector
argument_list|)
expr_stmt|;
name|CollapseTopFieldDocs
name|collapseTopFieldDocs
init|=
name|collapsingCollector
operator|.
name|getTopDocs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|collapseTopFieldDocs
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|collapseTopFieldDocs
operator|.
name|collapseValues
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|collapseTopFieldDocs
operator|.
name|collapseValues
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"0"
argument_list|)
argument_list|,
name|collapseTopFieldDocs
operator|.
name|collapseValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|collapseTopFieldDocs
operator|.
name|collapseValues
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"10"
argument_list|)
argument_list|,
name|collapseTopFieldDocs
operator|.
name|collapseValues
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

