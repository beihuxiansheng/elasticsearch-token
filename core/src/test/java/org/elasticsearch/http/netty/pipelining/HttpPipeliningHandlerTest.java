begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.http.netty.pipelining
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|netty
operator|.
name|pipelining
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ClientBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioClientSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|HashedWheelTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
operator|.
name|EMPTY_BUFFER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
operator|.
name|copiedBuffer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
operator|.
name|Names
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
operator|.
name|Values
operator|.
name|CHUNKED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
operator|.
name|Values
operator|.
name|KEEP_ALIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpVersion
operator|.
name|HTTP_1_1
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|CharsetUtil
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|HttpPipeliningHandlerTest
specifier|public
class|class
name|HttpPipeliningHandlerTest
extends|extends
name|ESTestCase
block|{
DECL|field|RESPONSE_TIMEOUT
specifier|private
specifier|static
specifier|final
name|long
name|RESPONSE_TIMEOUT
init|=
literal|10000L
decl_stmt|;
DECL|field|CONNECTION_TIMEOUT
specifier|private
specifier|static
specifier|final
name|long
name|CONNECTION_TIMEOUT
init|=
literal|10000L
decl_stmt|;
DECL|field|CONTENT_TYPE_TEXT
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT_TYPE_TEXT
init|=
literal|"text/plain; charset=UTF-8"
decl_stmt|;
comment|// TODO make me random
DECL|field|HOST_ADDR
specifier|private
specifier|static
specifier|final
name|InetSocketAddress
name|HOST_ADDR
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|9080
argument_list|)
decl_stmt|;
DECL|field|PATH1
specifier|private
specifier|static
specifier|final
name|String
name|PATH1
init|=
literal|"/1"
decl_stmt|;
DECL|field|PATH2
specifier|private
specifier|static
specifier|final
name|String
name|PATH2
init|=
literal|"/2"
decl_stmt|;
DECL|field|SOME_RESPONSE_TEXT
specifier|private
specifier|static
specifier|final
name|String
name|SOME_RESPONSE_TEXT
init|=
literal|"some response for "
decl_stmt|;
DECL|field|clientBootstrap
specifier|private
name|ClientBootstrap
name|clientBootstrap
decl_stmt|;
DECL|field|serverBootstrap
specifier|private
name|ServerBootstrap
name|serverBootstrap
decl_stmt|;
DECL|field|responsesIn
specifier|private
name|CountDownLatch
name|responsesIn
decl_stmt|;
DECL|field|responses
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|responses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
DECL|field|timer
specifier|private
name|HashedWheelTimer
name|timer
decl_stmt|;
annotation|@
name|Before
DECL|method|startBootstraps
specifier|public
name|void
name|startBootstraps
parameter_list|()
block|{
name|clientBootstrap
operator|=
operator|new
name|ClientBootstrap
argument_list|(
operator|new
name|NioClientSocketChannelFactory
argument_list|()
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|setPipelineFactory
argument_list|(
operator|new
name|ChannelPipelineFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|Channels
operator|.
name|pipeline
argument_list|(
operator|new
name|HttpClientCodec
argument_list|()
argument_list|,
operator|new
name|ClientHandler
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|=
operator|new
name|ServerBootstrap
argument_list|(
operator|new
name|NioServerSocketChannelFactory
argument_list|()
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|setPipelineFactory
argument_list|(
operator|new
name|ChannelPipelineFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|Channels
operator|.
name|pipeline
argument_list|(
operator|new
name|HttpRequestDecoder
argument_list|()
argument_list|,
operator|new
name|HttpResponseEncoder
argument_list|()
argument_list|,
operator|new
name|HttpPipeliningHandler
argument_list|(
literal|10000
argument_list|)
argument_list|,
operator|new
name|ServerHandler
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|bind
argument_list|(
name|HOST_ADDR
argument_list|)
expr_stmt|;
name|timer
operator|=
operator|new
name|HashedWheelTimer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|releaseResources
specifier|public
name|void
name|releaseResources
parameter_list|()
block|{
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|serverBootstrap
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|serverBootstrap
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
name|clientBootstrap
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|clientBootstrap
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldReturnMessagesInOrder
specifier|public
name|void
name|shouldReturnMessagesInOrder
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|responsesIn
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|responses
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|final
name|ChannelFuture
name|connectionFuture
init|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
name|HOST_ADDR
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|connectionFuture
operator|.
name|await
argument_list|(
name|CONNECTION_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Channel
name|clientChannel
init|=
name|connectionFuture
operator|.
name|getChannel
argument_list|()
decl_stmt|;
specifier|final
name|HttpRequest
name|request1
init|=
operator|new
name|DefaultHttpRequest
argument_list|(
name|HTTP_1_1
argument_list|,
name|HttpMethod
operator|.
name|GET
argument_list|,
name|PATH1
argument_list|)
decl_stmt|;
name|request1
operator|.
name|headers
argument_list|()
operator|.
name|add
argument_list|(
name|HOST
argument_list|,
name|HOST_ADDR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|HttpRequest
name|request2
init|=
operator|new
name|DefaultHttpRequest
argument_list|(
name|HTTP_1_1
argument_list|,
name|HttpMethod
operator|.
name|GET
argument_list|,
name|PATH2
argument_list|)
decl_stmt|;
name|request2
operator|.
name|headers
argument_list|()
operator|.
name|add
argument_list|(
name|HOST
argument_list|,
name|HOST_ADDR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|clientChannel
operator|.
name|write
argument_list|(
name|request1
argument_list|)
expr_stmt|;
name|clientChannel
operator|.
name|write
argument_list|(
name|request2
argument_list|)
expr_stmt|;
name|responsesIn
operator|.
name|await
argument_list|(
name|RESPONSE_TIMEOUT
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|responses
operator|.
name|contains
argument_list|(
name|SOME_RESPONSE_TEXT
operator|+
name|PATH1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|responses
operator|.
name|contains
argument_list|(
name|SOME_RESPONSE_TEXT
operator|+
name|PATH2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|ClientHandler
specifier|public
class|class
name|ClientHandler
extends|extends
name|SimpleChannelUpstreamHandler
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
specifier|final
name|ChannelHandlerContext
name|ctx
parameter_list|,
specifier|final
name|MessageEvent
name|e
parameter_list|)
block|{
specifier|final
name|Object
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|instanceof
name|HttpChunk
condition|)
block|{
specifier|final
name|HttpChunk
name|response
init|=
operator|(
name|HttpChunk
operator|)
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|response
operator|.
name|isLast
argument_list|()
condition|)
block|{
specifier|final
name|String
name|content
init|=
name|response
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|responses
operator|.
name|add
argument_list|(
name|content
argument_list|)
expr_stmt|;
if|if
condition|(
name|content
operator|.
name|equals
argument_list|(
name|SOME_RESPONSE_TEXT
operator|+
name|PATH2
argument_list|)
condition|)
block|{
name|responsesIn
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|class|ServerHandler
specifier|public
class|class
name|ServerHandler
extends|extends
name|SimpleChannelUpstreamHandler
block|{
DECL|field|sendFinalChunk
specifier|private
specifier|final
name|AtomicBoolean
name|sendFinalChunk
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
specifier|final
name|ChannelHandlerContext
name|ctx
parameter_list|,
specifier|final
name|MessageEvent
name|e
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|HttpRequest
name|request
init|=
operator|(
name|HttpRequest
operator|)
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
specifier|final
name|OrderedUpstreamMessageEvent
name|oue
init|=
operator|(
name|OrderedUpstreamMessageEvent
operator|)
name|e
decl_stmt|;
specifier|final
name|String
name|uri
init|=
name|request
operator|.
name|getUri
argument_list|()
decl_stmt|;
specifier|final
name|HttpResponse
name|initialChunk
init|=
operator|new
name|DefaultHttpResponse
argument_list|(
name|HTTP_1_1
argument_list|,
name|OK
argument_list|)
decl_stmt|;
name|initialChunk
operator|.
name|headers
argument_list|()
operator|.
name|add
argument_list|(
name|CONTENT_TYPE
argument_list|,
name|CONTENT_TYPE_TEXT
argument_list|)
expr_stmt|;
name|initialChunk
operator|.
name|headers
argument_list|()
operator|.
name|add
argument_list|(
name|CONNECTION
argument_list|,
name|KEEP_ALIVE
argument_list|)
expr_stmt|;
name|initialChunk
operator|.
name|headers
argument_list|()
operator|.
name|add
argument_list|(
name|TRANSFER_ENCODING
argument_list|,
name|CHUNKED
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|sendDownstream
argument_list|(
operator|new
name|OrderedDownstreamChannelEvent
argument_list|(
name|oue
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|initialChunk
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|newTimeout
argument_list|(
operator|new
name|ChunkWriter
argument_list|(
name|ctx
argument_list|,
name|e
argument_list|,
name|uri
argument_list|,
name|oue
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
DECL|class|ChunkWriter
specifier|private
class|class
name|ChunkWriter
implements|implements
name|TimerTask
block|{
DECL|field|ctx
specifier|private
specifier|final
name|ChannelHandlerContext
name|ctx
decl_stmt|;
DECL|field|e
specifier|private
specifier|final
name|MessageEvent
name|e
decl_stmt|;
DECL|field|uri
specifier|private
specifier|final
name|String
name|uri
decl_stmt|;
DECL|field|oue
specifier|private
specifier|final
name|OrderedUpstreamMessageEvent
name|oue
decl_stmt|;
DECL|field|subSequence
specifier|private
specifier|final
name|int
name|subSequence
decl_stmt|;
DECL|method|ChunkWriter
specifier|public
name|ChunkWriter
parameter_list|(
specifier|final
name|ChannelHandlerContext
name|ctx
parameter_list|,
specifier|final
name|MessageEvent
name|e
parameter_list|,
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|OrderedUpstreamMessageEvent
name|oue
parameter_list|,
specifier|final
name|int
name|subSequence
parameter_list|)
block|{
name|this
operator|.
name|ctx
operator|=
name|ctx
expr_stmt|;
name|this
operator|.
name|e
operator|=
name|e
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|oue
operator|=
name|oue
expr_stmt|;
name|this
operator|.
name|subSequence
operator|=
name|subSequence
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|(
specifier|final
name|Timeout
name|timeout
parameter_list|)
block|{
if|if
condition|(
name|sendFinalChunk
operator|.
name|get
argument_list|()
operator|&&
name|subSequence
operator|>
literal|1
condition|)
block|{
specifier|final
name|HttpChunk
name|finalChunk
init|=
operator|new
name|DefaultHttpChunk
argument_list|(
name|EMPTY_BUFFER
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|sendDownstream
argument_list|(
operator|new
name|OrderedDownstreamChannelEvent
argument_list|(
name|oue
argument_list|,
name|subSequence
argument_list|,
literal|true
argument_list|,
name|finalChunk
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|HttpChunk
name|chunk
init|=
operator|new
name|DefaultHttpChunk
argument_list|(
name|copiedBuffer
argument_list|(
name|SOME_RESPONSE_TEXT
operator|+
name|uri
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|sendDownstream
argument_list|(
operator|new
name|OrderedDownstreamChannelEvent
argument_list|(
name|oue
argument_list|,
name|subSequence
argument_list|,
literal|false
argument_list|,
name|chunk
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|newTimeout
argument_list|(
operator|new
name|ChunkWriter
argument_list|(
name|ctx
argument_list|,
name|e
argument_list|,
name|uri
argument_list|,
name|oue
argument_list|,
name|subSequence
operator|+
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|uri
operator|.
name|equals
argument_list|(
name|PATH2
argument_list|)
condition|)
block|{
name|sendFinalChunk
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

