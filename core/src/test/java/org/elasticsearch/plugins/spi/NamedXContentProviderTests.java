begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins.spi
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|ParsedSimpleValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|Suggest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|term
operator|.
name|TermSuggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_class
DECL|class|NamedXContentProviderTests
specifier|public
class|class
name|NamedXContentProviderTests
extends|extends
name|ESTestCase
block|{
DECL|method|testSpiFileExists
specifier|public
name|void
name|testSpiFileExists
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|serviceFile
init|=
literal|"/META-INF/services/"
operator|+
name|NamedXContentProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|implementations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|input
init|=
name|NamedXContentProviderTests
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|serviceFile
argument_list|)
init|)
block|{
name|Streams
operator|.
name|readAllLines
argument_list|(
name|input
argument_list|,
name|implementations
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|implementations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestNamedXContentProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|implementations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNamedXContents
specifier|public
name|void
name|testNamedXContents
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|>
name|namedXContents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|NamedXContentProvider
name|service
range|:
name|ServiceLoader
operator|.
name|load
argument_list|(
name|NamedXContentProvider
operator|.
name|class
argument_list|)
control|)
block|{
name|namedXContents
operator|.
name|addAll
argument_list|(
name|service
operator|.
name|getNamedXContentParsers
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|namedXContents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Predicate
argument_list|<
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|>
argument_list|>
name|predicates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|predicates
operator|.
name|add
argument_list|(
name|e
lambda|->
name|Aggregation
operator|.
name|class
operator|.
name|equals
argument_list|(
name|e
operator|.
name|categoryClass
argument_list|)
operator|&&
literal|"test_aggregation"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|name
operator|.
name|getPreferredName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|predicates
operator|.
name|add
argument_list|(
name|e
lambda|->
name|Suggest
operator|.
name|Suggestion
operator|.
name|class
operator|.
name|equals
argument_list|(
name|e
operator|.
name|categoryClass
argument_list|)
operator|&&
literal|"test_suggestion"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|name
operator|.
name|getPreferredName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|predicates
operator|.
name|forEach
argument_list|(
name|predicate
lambda|->
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|namedXContents
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|predicate
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|TestNamedXContentProvider
specifier|public
specifier|static
class|class
name|TestNamedXContentProvider
implements|implements
name|NamedXContentProvider
block|{
DECL|method|TestNamedXContentProvider
specifier|public
name|TestNamedXContentProvider
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|getNamedXContentParsers
specifier|public
name|List
argument_list|<
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|>
name|getNamedXContentParsers
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|(
name|Aggregation
operator|.
name|class
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"test_aggregation"
argument_list|)
argument_list|,
parameter_list|(
name|parser
parameter_list|,
name|context
parameter_list|)
lambda|->
name|ParsedSimpleValue
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|,
operator|(
name|String
operator|)
name|context
argument_list|)
argument_list|)
argument_list|,
operator|new
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|(
name|Suggest
operator|.
name|Suggestion
operator|.
name|class
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"test_suggestion"
argument_list|)
argument_list|,
parameter_list|(
name|parser
parameter_list|,
name|context
parameter_list|)
lambda|->
name|TermSuggestion
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|,
operator|(
name|String
operator|)
name|context
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

