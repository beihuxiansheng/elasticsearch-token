begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodesInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|PluginInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliToolTestCase
operator|.
name|CaptureOutputTerminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalSettingsPreparer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|Network
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|http
operator|.
name|HttpRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFileAttributeView
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliTool
operator|.
name|ExitStatus
operator|.
name|USAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliToolTestCase
operator|.
name|args
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtilsTests
operator|.
name|assertFileContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|Scope
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertDirectoryExists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertFileExists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|,
name|transportClientRatio
operator|=
literal|0.0
argument_list|)
annotation|@
name|LuceneTestCase
operator|.
name|SuppressFileSystems
argument_list|(
literal|"*"
argument_list|)
comment|// TODO: clean up this test to allow extra files
comment|// TODO: jimfs is really broken here (throws wrong exception from detection method).
comment|// if its in your classpath, then do not use plugins!!!!!!
DECL|class|PluginManagerTests
specifier|public
class|class
name|PluginManagerTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|field|initialSettings
specifier|private
name|Tuple
argument_list|<
name|Settings
argument_list|,
name|Environment
argument_list|>
name|initialSettings
decl_stmt|;
DECL|field|terminal
specifier|private
name|CaptureOutputTerminal
name|terminal
init|=
operator|new
name|CaptureOutputTerminal
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|initialSettings
operator|=
name|buildInitialSettings
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"es.default.path.home"
argument_list|,
name|initialSettings
operator|.
name|v1
argument_list|()
operator|.
name|get
argument_list|(
literal|"path.home"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|initialSettings
operator|.
name|v2
argument_list|()
operator|.
name|pluginsFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Path
name|binDir
init|=
name|initialSettings
operator|.
name|v2
argument_list|()
operator|.
name|homeFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|binDir
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|binDir
argument_list|)
expr_stmt|;
block|}
name|Path
name|configDir
init|=
name|initialSettings
operator|.
name|v2
argument_list|()
operator|.
name|configFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|configDir
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|configDir
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|clearPathHome
specifier|public
name|void
name|clearPathHome
parameter_list|()
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"es.default.path.home"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatPluginNameMustBeSupplied
specifier|public
name|void
name|testThatPluginNameMustBeSupplied
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|pluginUrl
init|=
name|getPluginUrlForResource
argument_list|(
literal|"plugin_single_folder.zip"
argument_list|)
decl_stmt|;
name|assertStatus
argument_list|(
literal|"install --url "
operator|+
name|pluginUrl
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalPluginInstallSingleFolder
specifier|public
name|void
name|testLocalPluginInstallSingleFolder
parameter_list|()
throws|throws
name|Exception
block|{
comment|//When we have only a folder in top-level (no files either) we remove that folder while extracting
name|String
name|pluginName
init|=
literal|"plugin-test"
decl_stmt|;
name|String
name|pluginUrl
init|=
name|getPluginUrlForResource
argument_list|(
literal|"plugin_single_folder.zip"
argument_list|)
decl_stmt|;
name|String
name|installCommand
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --url %s"
argument_list|,
name|pluginName
argument_list|,
name|pluginUrl
argument_list|)
decl_stmt|;
name|assertStatusOk
argument_list|(
name|installCommand
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|initialSettings
operator|.
name|v1
argument_list|()
argument_list|)
expr_stmt|;
name|assertPluginLoaded
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
name|assertPluginAvailable
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalPluginInstallWithBinAndConfig
specifier|public
name|void
name|testLocalPluginInstallWithBinAndConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pluginName
init|=
literal|"plugin-test"
decl_stmt|;
name|Environment
name|env
init|=
name|initialSettings
operator|.
name|v2
argument_list|()
decl_stmt|;
name|Path
name|binDir
init|=
name|env
operator|.
name|homeFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
decl_stmt|;
name|Path
name|pluginBinDir
init|=
name|binDir
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
decl_stmt|;
name|Path
name|pluginConfigDir
init|=
name|env
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
decl_stmt|;
name|String
name|pluginUrl
init|=
name|getPluginUrlForResource
argument_list|(
literal|"plugin_with_bin_and_config.zip"
argument_list|)
decl_stmt|;
name|assertStatusOk
argument_list|(
literal|"install "
operator|+
name|pluginName
operator|+
literal|" --url "
operator|+
name|pluginUrl
operator|+
literal|" --verbose"
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertStatusOk
argument_list|(
literal|"list"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
name|pluginName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDirectoryExists
argument_list|(
name|pluginBinDir
argument_list|)
expr_stmt|;
name|assertDirectoryExists
argument_list|(
name|pluginConfigDir
argument_list|)
expr_stmt|;
name|Path
name|toolFile
init|=
name|pluginBinDir
operator|.
name|resolve
argument_list|(
literal|"tool"
argument_list|)
decl_stmt|;
name|assertFileExists
argument_list|(
name|toolFile
argument_list|)
expr_stmt|;
comment|// check that the file is marked executable, without actually checking that we can execute it.
name|PosixFileAttributeView
name|view
init|=
name|Files
operator|.
name|getFileAttributeView
argument_list|(
name|toolFile
argument_list|,
name|PosixFileAttributeView
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// the view might be null, on e.g. windows, there is nothing to check there!
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|PosixFileAttributes
name|attributes
init|=
name|view
operator|.
name|readAttributes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|attributes
operator|.
name|permissions
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|PosixFilePermission
operator|.
name|OWNER_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attributes
operator|.
name|permissions
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|PosixFilePermission
operator|.
name|OWNER_READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test for #7890      */
annotation|@
name|Test
DECL|method|testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890
specifier|public
name|void
name|testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pluginName
init|=
literal|"plugin-test"
decl_stmt|;
name|Environment
name|env
init|=
name|initialSettings
operator|.
name|v2
argument_list|()
decl_stmt|;
name|Path
name|pluginConfigDir
init|=
name|env
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
decl_stmt|;
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --url %s --verbose"
argument_list|,
name|pluginName
argument_list|,
name|getPluginUrlForResource
argument_list|(
literal|"plugin_with_config_v1.zip"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/*         First time, our plugin contains:         - config/test.txt (version1)          */
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"test.txt"
argument_list|,
literal|"version1\n"
argument_list|)
expr_stmt|;
comment|// We now remove the plugin
name|assertStatusOk
argument_list|(
literal|"remove "
operator|+
name|pluginName
argument_list|)
expr_stmt|;
comment|// We should still have test.txt
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"test.txt"
argument_list|,
literal|"version1\n"
argument_list|)
expr_stmt|;
comment|// Installing a new plugin version
comment|/*         Second time, our plugin contains:         - config/test.txt (version2)         - config/dir/testdir.txt (version1)         - config/dir/subdir/testsubdir.txt (version1)          */
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --url %s --verbose"
argument_list|,
name|pluginName
argument_list|,
name|getPluginUrlForResource
argument_list|(
literal|"plugin_with_config_v2.zip"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"test.txt"
argument_list|,
literal|"version1\n"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"test.txt.new"
argument_list|,
literal|"version2\n"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"dir/testdir.txt"
argument_list|,
literal|"version1\n"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"dir/subdir/testsubdir.txt"
argument_list|,
literal|"version1\n"
argument_list|)
expr_stmt|;
comment|// Removing
name|assertStatusOk
argument_list|(
literal|"remove "
operator|+
name|pluginName
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"test.txt"
argument_list|,
literal|"version1\n"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"test.txt.new"
argument_list|,
literal|"version2\n"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"dir/testdir.txt"
argument_list|,
literal|"version1\n"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"dir/subdir/testsubdir.txt"
argument_list|,
literal|"version1\n"
argument_list|)
expr_stmt|;
comment|// Installing a new plugin version
comment|/*         Third time, our plugin contains:         - config/test.txt (version3)         - config/test2.txt (version1)         - config/dir/testdir.txt (version2)         - config/dir/testdir2.txt (version1)         - config/dir/subdir/testsubdir.txt (version2)          */
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --url %s --verbose"
argument_list|,
name|pluginName
argument_list|,
name|getPluginUrlForResource
argument_list|(
literal|"plugin_with_config_v3.zip"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"test.txt"
argument_list|,
literal|"version1\n"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"test2.txt"
argument_list|,
literal|"version1\n"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"test.txt.new"
argument_list|,
literal|"version3\n"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"dir/testdir.txt"
argument_list|,
literal|"version1\n"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"dir/testdir.txt.new"
argument_list|,
literal|"version2\n"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"dir/testdir2.txt"
argument_list|,
literal|"version1\n"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"dir/subdir/testsubdir.txt"
argument_list|,
literal|"version1\n"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"dir/subdir/testsubdir.txt.new"
argument_list|,
literal|"version2\n"
argument_list|)
expr_stmt|;
block|}
comment|// For #7152
annotation|@
name|Test
DECL|method|testLocalPluginInstallWithBinOnly_7152
specifier|public
name|void
name|testLocalPluginInstallWithBinOnly_7152
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pluginName
init|=
literal|"plugin-test"
decl_stmt|;
name|Environment
name|env
init|=
name|initialSettings
operator|.
name|v2
argument_list|()
decl_stmt|;
name|Path
name|binDir
init|=
name|env
operator|.
name|homeFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
decl_stmt|;
name|Path
name|pluginBinDir
init|=
name|binDir
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
decl_stmt|;
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --url %s --verbose"
argument_list|,
name|pluginName
argument_list|,
name|getPluginUrlForResource
argument_list|(
literal|"plugin_with_bin_only.zip"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThatPluginIsListed
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
name|assertDirectoryExists
argument_list|(
name|pluginBinDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalPluginInstallSiteFolder
specifier|public
name|void
name|testLocalPluginInstallSiteFolder
parameter_list|()
throws|throws
name|Exception
block|{
comment|//When we have only a folder in top-level (no files either) but it's called _site, we make it work
comment|//we can either remove the folder while extracting and then re-add it manually or just leave it as it is
name|String
name|pluginName
init|=
literal|"plugin-test"
decl_stmt|;
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --url %s --verbose"
argument_list|,
name|pluginName
argument_list|,
name|getPluginUrlForResource
argument_list|(
literal|"plugin_folder_site.zip"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|initialSettings
operator|.
name|v1
argument_list|()
argument_list|)
expr_stmt|;
name|assertPluginLoaded
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
name|assertPluginAvailable
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalPluginWithoutFolders
specifier|public
name|void
name|testLocalPluginWithoutFolders
parameter_list|()
throws|throws
name|Exception
block|{
comment|//When we don't have folders at all in the top-level, but only files, we don't modify anything
name|String
name|pluginName
init|=
literal|"plugin-test"
decl_stmt|;
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --url %s --verbose"
argument_list|,
name|pluginName
argument_list|,
name|getPluginUrlForResource
argument_list|(
literal|"plugin_without_folders.zip"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|initialSettings
operator|.
name|v1
argument_list|()
argument_list|)
expr_stmt|;
name|assertPluginLoaded
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
name|assertPluginAvailable
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalPluginFolderAndFile
specifier|public
name|void
name|testLocalPluginFolderAndFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|//When we have a single top-level folder but also files in the top-level, we don't modify anything
name|String
name|pluginName
init|=
literal|"plugin-test"
decl_stmt|;
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --url %s --verbose"
argument_list|,
name|pluginName
argument_list|,
name|getPluginUrlForResource
argument_list|(
literal|"plugin_folder_file.zip"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|initialSettings
operator|.
name|v1
argument_list|()
argument_list|)
expr_stmt|;
name|assertPluginLoaded
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
name|assertPluginAvailable
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSitePluginWithSourceDoesNotInstall
specifier|public
name|void
name|testSitePluginWithSourceDoesNotInstall
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pluginName
init|=
literal|"plugin-with-source"
decl_stmt|;
name|String
name|cmd
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --url %s --verbose"
argument_list|,
name|pluginName
argument_list|,
name|getPluginUrlForResource
argument_list|(
literal|"plugin_with_sourcefiles.zip"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|status
init|=
operator|new
name|PluginManagerCliParser
argument_list|(
name|terminal
argument_list|)
operator|.
name|execute
argument_list|(
name|args
argument_list|(
name|cmd
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|status
argument_list|,
name|is
argument_list|(
name|USAGE
operator|.
name|status
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
literal|"Plugin installation assumed to be site plugin, but contains source code, aborting installation"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertPluginLoaded
specifier|private
name|void
name|assertPluginLoaded
parameter_list|(
name|String
name|pluginName
parameter_list|)
block|{
name|NodesInfoResponse
name|nodesInfoResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesInfo
argument_list|()
operator|.
name|clear
argument_list|()
operator|.
name|setPlugins
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|nodesInfoResponse
operator|.
name|getNodes
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodesInfoResponse
operator|.
name|getNodes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getPlugins
argument_list|()
operator|.
name|getInfos
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodesInfoResponse
operator|.
name|getNodes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getPlugins
argument_list|()
operator|.
name|getInfos
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|not
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|pluginFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PluginInfo
name|pluginInfo
range|:
name|nodesInfoResponse
operator|.
name|getNodes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getPlugins
argument_list|()
operator|.
name|getInfos
argument_list|()
control|)
block|{
if|if
condition|(
name|pluginInfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|pluginName
argument_list|)
condition|)
block|{
name|pluginFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertThat
argument_list|(
name|pluginFound
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertPluginAvailable
specifier|private
name|void
name|assertPluginAvailable
parameter_list|(
name|String
name|pluginName
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
specifier|final
name|HttpRequestBuilder
name|httpRequestBuilder
init|=
name|httpClient
argument_list|()
decl_stmt|;
comment|//checking that the http connector is working properly
comment|// We will try it for some seconds as it could happen that the REST interface is not yet fully started
name|assertThat
argument_list|(
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
try|try
block|{
name|HttpResponse
name|response
init|=
name|httpRequestBuilder
operator|.
name|method
argument_list|(
literal|"GET"
argument_list|)
operator|.
name|path
argument_list|(
literal|"/"
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatusCode
argument_list|()
operator|!=
name|RestStatus
operator|.
name|OK
operator|.
name|getStatus
argument_list|()
condition|)
block|{
comment|// We want to trace what's going on here before failing the test
name|logger
operator|.
name|info
argument_list|(
literal|"--> error caught [{}], headers [{}]"
argument_list|,
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|response
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> cluster state [{}]"
argument_list|,
name|internalCluster
argument_list|()
operator|.
name|clusterService
argument_list|()
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"HTTP problem"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|//checking now that the plugin is available
name|HttpResponse
name|response
init|=
name|httpClient
argument_list|()
operator|.
name|method
argument_list|(
literal|"GET"
argument_list|)
operator|.
name|path
argument_list|(
literal|"/_plugin/"
operator|+
name|pluginName
operator|+
literal|"/"
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getReasonPhrase
argument_list|()
argument_list|,
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|OK
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListInstalledEmpty
specifier|public
name|void
name|testListInstalledEmpty
parameter_list|()
throws|throws
name|IOException
block|{
name|assertStatusOk
argument_list|(
literal|"list"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
literal|"No plugin detected"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInstallPlugin
specifier|public
name|void
name|testInstallPlugin
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|pluginName
init|=
literal|"plugin-classfile"
decl_stmt|;
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --url %s --verbose"
argument_list|,
name|pluginName
argument_list|,
name|getPluginUrlForResource
argument_list|(
literal|"plugin_with_classfile.zip"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThatPluginIsListed
argument_list|(
literal|"plugin-classfile"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInstallSitePlugin
specifier|public
name|void
name|testInstallSitePlugin
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|pluginName
init|=
literal|"plugin-site"
decl_stmt|;
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --url %s --verbose"
argument_list|,
name|pluginName
argument_list|,
name|getPluginUrlForResource
argument_list|(
literal|"plugin_without_folders.zip"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThatPluginIsListed
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
comment|// We want to check that Plugin Manager moves content to _site
name|assertFileExists
argument_list|(
name|initialSettings
operator|.
name|v2
argument_list|()
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"plugin-site/_site"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|singlePluginInstallAndRemove
specifier|private
name|void
name|singlePluginInstallAndRemove
parameter_list|(
name|String
name|pluginDescriptor
parameter_list|,
name|String
name|pluginName
parameter_list|,
name|String
name|pluginCoordinates
parameter_list|)
throws|throws
name|IOException
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> trying to download and install [{}]"
argument_list|,
name|pluginDescriptor
argument_list|)
expr_stmt|;
if|if
condition|(
name|pluginCoordinates
operator|==
literal|null
condition|)
block|{
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --verbose"
argument_list|,
name|pluginDescriptor
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --url %s --verbose"
argument_list|,
name|pluginDescriptor
argument_list|,
name|pluginCoordinates
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThatPluginIsListed
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertStatusOk
argument_list|(
literal|"remove "
operator|+
name|pluginDescriptor
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
literal|"Removing "
operator|+
name|pluginDescriptor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// not listed anymore
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertStatusOk
argument_list|(
literal|"list"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|not
argument_list|(
name|hasItem
argument_list|(
name|containsString
argument_list|(
name|pluginName
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * We are ignoring by default these tests as they require to have an internet access      * To activate the test, use -Dtests.network=true      * We test regular form: username/reponame/version      * It should find it in download.elasticsearch.org service      */
annotation|@
name|Test
annotation|@
name|Network
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"fails with jar hell failures - http://build-us-00.elastic.co/job/es_core_master_oracle_6/519/testReport/"
argument_list|)
DECL|method|testInstallPluginWithElasticsearchDownloadService
specifier|public
name|void
name|testInstallPluginWithElasticsearchDownloadService
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"download.elastic.co is accessible"
argument_list|,
name|isDownloadServiceWorking
argument_list|(
literal|"download.elastic.co"
argument_list|,
literal|80
argument_list|,
literal|"/elasticsearch/ci-test.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|singlePluginInstallAndRemove
argument_list|(
literal|"elasticsearch/elasticsearch-transport-thrift/2.4.0"
argument_list|,
literal|"elasticsearch-transport-thrift"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * We are ignoring by default these tests as they require to have an internet access      * To activate the test, use -Dtests.network=true      * We test regular form: groupId/artifactId/version      * It should find it in maven central service      */
annotation|@
name|Test
annotation|@
name|Network
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"fails with jar hell failures - http://build-us-00.elastic.co/job/es_core_master_oracle_6/519/testReport/"
argument_list|)
DECL|method|testInstallPluginWithMavenCentral
specifier|public
name|void
name|testInstallPluginWithMavenCentral
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"search.maven.org is accessible"
argument_list|,
name|isDownloadServiceWorking
argument_list|(
literal|"search.maven.org"
argument_list|,
literal|80
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
literal|"repo1.maven.org is accessible"
argument_list|,
name|isDownloadServiceWorking
argument_list|(
literal|"repo1.maven.org"
argument_list|,
literal|443
argument_list|,
literal|"/maven2/org/elasticsearch/elasticsearch-transport-thrift/2.4.0/elasticsearch-transport-thrift-2.4.0.pom"
argument_list|)
argument_list|)
expr_stmt|;
name|singlePluginInstallAndRemove
argument_list|(
literal|"org.elasticsearch/elasticsearch-transport-thrift/2.4.0"
argument_list|,
literal|"elasticsearch-transport-thrift"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * We are ignoring by default these tests as they require to have an internet access      * To activate the test, use -Dtests.network=true      * We test site plugins from github: userName/repoName      * It should find it on github      */
annotation|@
name|Test
annotation|@
name|Network
DECL|method|testInstallPluginWithGithub
specifier|public
name|void
name|testInstallPluginWithGithub
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"github.com is accessible"
argument_list|,
name|isDownloadServiceWorking
argument_list|(
literal|"github.com"
argument_list|,
literal|443
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|singlePluginInstallAndRemove
argument_list|(
literal|"elasticsearch/kibana"
argument_list|,
literal|"kibana"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|isDownloadServiceWorking
specifier|private
name|boolean
name|isDownloadServiceWorking
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|resource
parameter_list|)
block|{
try|try
block|{
name|String
name|protocol
init|=
name|port
operator|==
literal|443
condition|?
literal|"https"
else|:
literal|"http"
decl_stmt|;
name|HttpResponse
name|response
init|=
operator|new
name|HttpRequestBuilder
argument_list|(
name|HttpClients
operator|.
name|createDefault
argument_list|()
argument_list|)
operator|.
name|protocol
argument_list|(
name|protocol
argument_list|)
operator|.
name|host
argument_list|(
name|host
argument_list|)
operator|.
name|port
argument_list|(
name|port
argument_list|)
operator|.
name|path
argument_list|(
name|resource
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatusCode
argument_list|()
operator|!=
literal|200
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}{}] download service is not working. Disabling current test."
argument_list|,
name|host
argument_list|,
name|resource
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}{}] download service is not working. Disabling current test."
argument_list|,
name|host
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
DECL|method|testRemovePlugin
specifier|public
name|void
name|testRemovePlugin
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We want to remove plugin with plugin short name
name|singlePluginInstallAndRemove
argument_list|(
literal|"plugintest"
argument_list|,
literal|"plugintest"
argument_list|,
name|getPluginUrlForResource
argument_list|(
literal|"plugin_without_folders.zip"
argument_list|)
argument_list|)
expr_stmt|;
comment|// We want to remove plugin with groupid/artifactid/version form
name|singlePluginInstallAndRemove
argument_list|(
literal|"groupid/plugintest/1.0.0"
argument_list|,
literal|"plugintest"
argument_list|,
name|getPluginUrlForResource
argument_list|(
literal|"plugin_without_folders.zip"
argument_list|)
argument_list|)
expr_stmt|;
comment|// We want to remove plugin with groupid/artifactid form
name|singlePluginInstallAndRemove
argument_list|(
literal|"groupid/plugintest"
argument_list|,
literal|"plugintest"
argument_list|,
name|getPluginUrlForResource
argument_list|(
literal|"plugin_without_folders.zip"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemovePlugin_NullName_ThrowsException
specifier|public
name|void
name|testRemovePlugin_NullName_ThrowsException
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|status
init|=
operator|new
name|PluginManagerCliParser
argument_list|(
name|terminal
argument_list|)
operator|.
name|execute
argument_list|(
name|args
argument_list|(
literal|"remove "
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Terminal output was: "
operator|+
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|status
argument_list|,
name|is
argument_list|(
name|USAGE
operator|.
name|status
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemovePluginWithURLForm
specifier|public
name|void
name|testRemovePluginWithURLForm
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|status
init|=
operator|new
name|PluginManagerCliParser
argument_list|(
name|terminal
argument_list|)
operator|.
name|execute
argument_list|(
name|args
argument_list|(
literal|"remove file://whatever"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
literal|"Illegal plugin name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Terminal output was: "
operator|+
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|status
argument_list|,
name|is
argument_list|(
name|USAGE
operator|.
name|status
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testForbiddenPluginNames
specifier|public
name|void
name|testForbiddenPluginNames
parameter_list|()
throws|throws
name|IOException
block|{
name|assertStatus
argument_list|(
literal|"remove elasticsearch"
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
name|assertStatus
argument_list|(
literal|"remove elasticsearch.bat"
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
name|assertStatus
argument_list|(
literal|"remove elasticsearch.in.sh"
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
name|assertStatus
argument_list|(
literal|"remove plugin"
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
name|assertStatus
argument_list|(
literal|"remove plugin.bat"
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
name|assertStatus
argument_list|(
literal|"remove service.bat"
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
name|assertStatus
argument_list|(
literal|"remove ELASTICSEARCH"
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
name|assertStatus
argument_list|(
literal|"remove ELASTICSEARCH.IN.SH"
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOfficialPluginName_ThrowsException
specifier|public
name|void
name|testOfficialPluginName_ThrowsException
parameter_list|()
throws|throws
name|IOException
block|{
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"elasticsearch-analysis-icu"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"elasticsearch-analysis-kuromoji"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"elasticsearch-analysis-phonetic"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"elasticsearch-analysis-smartcn"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"elasticsearch-analysis-stempel"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"elasticsearch-cloud-aws"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"elasticsearch-cloud-azure"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"elasticsearch-cloud-gce"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"elasticsearch-delete-by-query"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"elasticsearch-lang-javascript"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"elasticsearch-lang-python"
argument_list|)
expr_stmt|;
try|try
block|{
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"elasticsearch-mapper-attachment"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"elasticsearch-mapper-attachment should not be allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// We expect that error
block|}
block|}
annotation|@
name|Test
DECL|method|testHelpWorks
specifier|public
name|void
name|testHelpWorks
parameter_list|()
throws|throws
name|IOException
block|{
name|assertStatusOk
argument_list|(
literal|"--help"
argument_list|)
expr_stmt|;
name|assertHelp
argument_list|(
literal|"/org/elasticsearch/plugins/plugin.help"
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertStatusOk
argument_list|(
literal|"install -h"
argument_list|)
expr_stmt|;
name|assertHelp
argument_list|(
literal|"/org/elasticsearch/plugins/plugin-install.help"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|plugin
range|:
name|PluginManager
operator|.
name|OFFICIAL_PLUGINS
control|)
block|{
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
name|plugin
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertStatusOk
argument_list|(
literal|"remove --help"
argument_list|)
expr_stmt|;
name|assertHelp
argument_list|(
literal|"/org/elasticsearch/plugins/plugin-remove.help"
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertStatusOk
argument_list|(
literal|"list -h"
argument_list|)
expr_stmt|;
name|assertHelp
argument_list|(
literal|"/org/elasticsearch/plugins/plugin-list.help"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHelp
specifier|private
name|void
name|assertHelp
parameter_list|(
name|String
name|classPath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|expectedDocs
init|=
name|Streams
operator|.
name|copyToStringFromClasspath
argument_list|(
name|classPath
argument_list|)
decl_stmt|;
name|String
name|returnedDocs
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|""
argument_list|)
operator|.
name|join
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|returnedDocs
operator|.
name|trim
argument_list|()
argument_list|,
name|is
argument_list|(
name|expectedDocs
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieve a URL string that represents the resource with the given {@code resourceName}.      * @param resourceName The resource name relative to {@link PluginManagerTests}.      * @return Never {@code null}.      * @throws NullPointerException if {@code resourceName} does not point to a valid resource.      */
DECL|method|getPluginUrlForResource
specifier|private
name|String
name|getPluginUrlForResource
parameter_list|(
name|String
name|resourceName
parameter_list|)
block|{
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|PluginManagerTests
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|resourceName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
literal|"file://"
operator|+
name|uri
operator|.
name|getPath
argument_list|()
return|;
block|}
DECL|method|buildInitialSettings
specifier|private
name|Tuple
argument_list|<
name|Settings
argument_list|,
name|Environment
argument_list|>
name|buildInitialSettings
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"discovery.zen.ping.multicast.enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"http.enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|InternalSettingsPreparer
operator|.
name|prepareSettings
argument_list|(
name|settings
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|assertStatusOk
specifier|private
name|void
name|assertStatusOk
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|assertStatus
argument_list|(
name|command
argument_list|,
name|CliTool
operator|.
name|ExitStatus
operator|.
name|OK
argument_list|)
expr_stmt|;
block|}
DECL|method|assertStatus
specifier|private
name|void
name|assertStatus
parameter_list|(
name|String
name|command
parameter_list|,
name|CliTool
operator|.
name|ExitStatus
name|exitStatus
parameter_list|)
block|{
name|int
name|status
init|=
operator|new
name|PluginManagerCliParser
argument_list|(
name|terminal
argument_list|)
operator|.
name|execute
argument_list|(
name|args
argument_list|(
name|command
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Terminal output was: "
operator|+
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|status
argument_list|,
name|is
argument_list|(
name|exitStatus
operator|.
name|status
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertThatPluginIsListed
specifier|private
name|void
name|assertThatPluginIsListed
parameter_list|(
name|String
name|pluginName
parameter_list|)
block|{
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertStatusOk
argument_list|(
literal|"list"
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Terminal output was: %s"
argument_list|,
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|message
argument_list|,
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
name|pluginName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

