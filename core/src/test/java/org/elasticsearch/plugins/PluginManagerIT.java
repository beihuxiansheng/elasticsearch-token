begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliTool
operator|.
name|ExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliToolTestCase
operator|.
name|CaptureOutputTerminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalSettingsPreparer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|Network
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|http
operator|.
name|HttpRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|ssl
operator|.
name|SslContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|ssl
operator|.
name|SslHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|ssl
operator|.
name|util
operator|.
name|InsecureTrustManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|ssl
operator|.
name|util
operator|.
name|SelfSignedCertificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|SimpleFileVisitor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFileAttributeView
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliTool
operator|.
name|ExitStatus
operator|.
name|USAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliToolTestCase
operator|.
name|args
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtilsTests
operator|.
name|assertFileContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|PluginInfoTests
operator|.
name|writeProperties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|Scope
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpVersion
operator|.
name|HTTP_1_1
import|;
end_import

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|,
name|transportClientRatio
operator|=
literal|0.0
argument_list|)
annotation|@
name|LuceneTestCase
operator|.
name|SuppressFileSystems
argument_list|(
literal|"*"
argument_list|)
comment|// TODO: clean up this test to allow extra files
comment|// TODO: jimfs is really broken here (throws wrong exception from detection method).
comment|// if its in your classpath, then do not use plugins!!!!!!
DECL|class|PluginManagerIT
specifier|public
class|class
name|PluginManagerIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|environment
specifier|private
name|Environment
name|environment
decl_stmt|;
DECL|field|terminal
specifier|private
name|CaptureOutputTerminal
name|terminal
init|=
operator|new
name|CaptureOutputTerminal
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|environment
operator|=
name|buildInitialSettings
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"es.default.path.home"
argument_list|,
name|environment
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"path.home"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|binDir
init|=
name|environment
operator|.
name|binFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|binDir
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|binDir
argument_list|)
expr_stmt|;
block|}
name|Path
name|configDir
init|=
name|environment
operator|.
name|configFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|configDir
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|configDir
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|clearPathHome
specifier|public
name|void
name|clearPathHome
parameter_list|()
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"es.default.path.home"
argument_list|)
expr_stmt|;
block|}
DECL|method|writeSha1
specifier|private
name|void
name|writeSha1
parameter_list|(
name|Path
name|file
parameter_list|,
name|boolean
name|corrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|sha1Hex
init|=
name|Hashing
operator|.
name|sha1
argument_list|()
operator|.
name|hashBytes
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|file
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
init|(
name|BufferedWriter
name|out
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|file
operator|.
name|resolveSibling
argument_list|(
name|file
operator|.
name|getFileName
argument_list|()
operator|+
literal|".sha1"
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
name|sha1Hex
argument_list|)
expr_stmt|;
if|if
condition|(
name|corrupt
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"bad"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeMd5
specifier|private
name|void
name|writeMd5
parameter_list|(
name|Path
name|file
parameter_list|,
name|boolean
name|corrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|md5Hex
init|=
name|Hashing
operator|.
name|md5
argument_list|()
operator|.
name|hashBytes
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|file
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
init|(
name|BufferedWriter
name|out
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|file
operator|.
name|resolveSibling
argument_list|(
name|file
operator|.
name|getFileName
argument_list|()
operator|+
literal|".md5"
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
name|md5Hex
argument_list|)
expr_stmt|;
if|if
condition|(
name|corrupt
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"bad"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** creates a plugin .zip and returns the url for testing */
DECL|method|createPlugin
specifier|private
name|String
name|createPlugin
parameter_list|(
specifier|final
name|Path
name|structure
parameter_list|,
name|String
modifier|...
name|properties
parameter_list|)
throws|throws
name|IOException
block|{
name|writeProperties
argument_list|(
name|structure
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|Path
name|zip
init|=
name|createTempDir
argument_list|()
operator|.
name|resolve
argument_list|(
name|structure
operator|.
name|getFileName
argument_list|()
operator|+
literal|".zip"
argument_list|)
decl_stmt|;
try|try
init|(
name|ZipOutputStream
name|stream
init|=
operator|new
name|ZipOutputStream
argument_list|(
name|Files
operator|.
name|newOutputStream
argument_list|(
name|zip
argument_list|)
argument_list|)
init|)
block|{
name|Files
operator|.
name|walkFileTree
argument_list|(
name|structure
argument_list|,
operator|new
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|stream
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|structure
operator|.
name|relativize
argument_list|(
name|file
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|file
argument_list|,
name|stream
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|writeSha1
argument_list|(
name|zip
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|writeMd5
argument_list|(
name|zip
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|zip
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** creates a plugin .zip and bad checksum file and returns the url for testing */
DECL|method|createPluginWithBadChecksum
specifier|private
name|String
name|createPluginWithBadChecksum
parameter_list|(
specifier|final
name|Path
name|structure
parameter_list|,
name|String
modifier|...
name|properties
parameter_list|)
throws|throws
name|IOException
block|{
name|writeProperties
argument_list|(
name|structure
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|Path
name|zip
init|=
name|createTempDir
argument_list|()
operator|.
name|resolve
argument_list|(
name|structure
operator|.
name|getFileName
argument_list|()
operator|+
literal|".zip"
argument_list|)
decl_stmt|;
try|try
init|(
name|ZipOutputStream
name|stream
init|=
operator|new
name|ZipOutputStream
argument_list|(
name|Files
operator|.
name|newOutputStream
argument_list|(
name|zip
argument_list|)
argument_list|)
init|)
block|{
name|Files
operator|.
name|walkFileTree
argument_list|(
name|structure
argument_list|,
operator|new
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|stream
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|structure
operator|.
name|relativize
argument_list|(
name|file
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|file
argument_list|,
name|stream
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|writeSha1
argument_list|(
name|zip
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeMd5
argument_list|(
name|zip
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|zip
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testThatPluginNameMustBeSupplied
specifier|public
name|void
name|testThatPluginNameMustBeSupplied
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|pluginDir
init|=
name|createTempDir
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake-plugin"
argument_list|)
decl_stmt|;
name|String
name|pluginUrl
init|=
name|createPlugin
argument_list|(
name|pluginDir
argument_list|,
literal|"description"
argument_list|,
literal|"fake desc"
argument_list|,
literal|"name"
argument_list|,
literal|"fake-plugin"
argument_list|,
literal|"version"
argument_list|,
literal|"1.0"
argument_list|,
literal|"elasticsearch.version"
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|toString
argument_list|()
argument_list|,
literal|"java.version"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
argument_list|,
literal|"jvm"
argument_list|,
literal|"true"
argument_list|,
literal|"classname"
argument_list|,
literal|"FakePlugin"
argument_list|)
decl_stmt|;
name|assertStatus
argument_list|(
literal|"install"
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalPluginInstallWithBinAndConfig
specifier|public
name|void
name|testLocalPluginInstallWithBinAndConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pluginName
init|=
literal|"fake-plugin"
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createTempDir
argument_list|()
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
decl_stmt|;
comment|// create bin/tool and config/file
name|Files
operator|.
name|createDirectories
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"tool"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pluginUrl
init|=
name|createPlugin
argument_list|(
name|pluginDir
argument_list|,
literal|"description"
argument_list|,
literal|"fake desc"
argument_list|,
literal|"name"
argument_list|,
name|pluginName
argument_list|,
literal|"version"
argument_list|,
literal|"1.0"
argument_list|,
literal|"elasticsearch.version"
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|toString
argument_list|()
argument_list|,
literal|"java.version"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
argument_list|,
literal|"jvm"
argument_list|,
literal|"true"
argument_list|,
literal|"classname"
argument_list|,
literal|"FakePlugin"
argument_list|)
decl_stmt|;
name|Path
name|binDir
init|=
name|environment
operator|.
name|binFile
argument_list|()
decl_stmt|;
name|Path
name|pluginBinDir
init|=
name|binDir
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
decl_stmt|;
name|Path
name|pluginConfigDir
init|=
name|environment
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
decl_stmt|;
name|assertStatusOk
argument_list|(
literal|"install "
operator|+
name|pluginUrl
operator|+
literal|" --verbose"
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertStatusOk
argument_list|(
literal|"list"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
name|pluginName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDirectoryExists
argument_list|(
name|pluginBinDir
argument_list|)
expr_stmt|;
name|assertDirectoryExists
argument_list|(
name|pluginConfigDir
argument_list|)
expr_stmt|;
name|Path
name|toolFile
init|=
name|pluginBinDir
operator|.
name|resolve
argument_list|(
literal|"tool"
argument_list|)
decl_stmt|;
name|assertFileExists
argument_list|(
name|toolFile
argument_list|)
expr_stmt|;
comment|// check that the file is marked executable, without actually checking that we can execute it.
name|PosixFileAttributeView
name|view
init|=
name|Files
operator|.
name|getFileAttributeView
argument_list|(
name|toolFile
argument_list|,
name|PosixFileAttributeView
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// the view might be null, on e.g. windows, there is nothing to check there!
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|PosixFileAttributes
name|attributes
init|=
name|view
operator|.
name|readAttributes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|attributes
operator|.
name|permissions
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|PosixFilePermission
operator|.
name|OWNER_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attributes
operator|.
name|permissions
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|PosixFilePermission
operator|.
name|OWNER_READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test for #7890      */
annotation|@
name|Test
DECL|method|testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890
specifier|public
name|void
name|testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pluginName
init|=
literal|"fake-plugin"
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createTempDir
argument_list|()
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
decl_stmt|;
comment|// create config/test.txt with contents 'version1'
name|Files
operator|.
name|createDirectories
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"test.txt"
argument_list|)
argument_list|,
literal|"version1"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pluginUrl
init|=
name|createPlugin
argument_list|(
name|pluginDir
argument_list|,
literal|"description"
argument_list|,
literal|"fake desc"
argument_list|,
literal|"name"
argument_list|,
name|pluginName
argument_list|,
literal|"version"
argument_list|,
literal|"1.0"
argument_list|,
literal|"elasticsearch.version"
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|toString
argument_list|()
argument_list|,
literal|"java.version"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
argument_list|,
literal|"jvm"
argument_list|,
literal|"true"
argument_list|,
literal|"classname"
argument_list|,
literal|"FakePlugin"
argument_list|)
decl_stmt|;
name|Path
name|pluginConfigDir
init|=
name|environment
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
decl_stmt|;
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --verbose"
argument_list|,
name|pluginUrl
argument_list|)
argument_list|)
expr_stmt|;
comment|/*         First time, our plugin contains:         - config/test.txt (version1)          */
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"test.txt"
argument_list|,
literal|"version1"
argument_list|)
expr_stmt|;
comment|// We now remove the plugin
name|assertStatusOk
argument_list|(
literal|"remove "
operator|+
name|pluginName
argument_list|)
expr_stmt|;
comment|// We should still have test.txt
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"test.txt"
argument_list|,
literal|"version1"
argument_list|)
expr_stmt|;
comment|// Installing a new plugin version
comment|/*         Second time, our plugin contains:         - config/test.txt (version2)         - config/dir/testdir.txt (version1)         - config/dir/subdir/testsubdir.txt (version1)          */
name|Files
operator|.
name|write
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"test.txt"
argument_list|)
argument_list|,
literal|"version2"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"dir"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"subdir"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"dir"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"testdir.txt"
argument_list|)
argument_list|,
literal|"version1"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"dir"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"subdir"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"testsubdir.txt"
argument_list|)
argument_list|,
literal|"version1"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|pluginUrl
operator|=
name|createPlugin
argument_list|(
name|pluginDir
argument_list|,
literal|"description"
argument_list|,
literal|"fake desc"
argument_list|,
literal|"name"
argument_list|,
name|pluginName
argument_list|,
literal|"version"
argument_list|,
literal|"2.0"
argument_list|,
literal|"elasticsearch.version"
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|toString
argument_list|()
argument_list|,
literal|"java.version"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
argument_list|,
literal|"jvm"
argument_list|,
literal|"true"
argument_list|,
literal|"classname"
argument_list|,
literal|"FakePlugin"
argument_list|)
expr_stmt|;
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --verbose"
argument_list|,
name|pluginUrl
argument_list|)
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"test.txt"
argument_list|,
literal|"version1"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"test.txt.new"
argument_list|,
literal|"version2"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"dir/testdir.txt"
argument_list|,
literal|"version1"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"dir/subdir/testsubdir.txt"
argument_list|,
literal|"version1"
argument_list|)
expr_stmt|;
comment|// Removing
name|assertStatusOk
argument_list|(
literal|"remove "
operator|+
name|pluginName
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"test.txt"
argument_list|,
literal|"version1"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"test.txt.new"
argument_list|,
literal|"version2"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"dir/testdir.txt"
argument_list|,
literal|"version1"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"dir/subdir/testsubdir.txt"
argument_list|,
literal|"version1"
argument_list|)
expr_stmt|;
comment|// Installing a new plugin version
comment|/*         Third time, our plugin contains:         - config/test.txt (version3)         - config/test2.txt (version1)         - config/dir/testdir.txt (version2)         - config/dir/testdir2.txt (version1)         - config/dir/subdir/testsubdir.txt (version2)          */
name|Files
operator|.
name|write
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"test.txt"
argument_list|)
argument_list|,
literal|"version3"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"test2.txt"
argument_list|)
argument_list|,
literal|"version1"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"dir"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"testdir.txt"
argument_list|)
argument_list|,
literal|"version2"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"dir"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"testdir2.txt"
argument_list|)
argument_list|,
literal|"version1"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"dir"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"subdir"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"testsubdir.txt"
argument_list|)
argument_list|,
literal|"version2"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|pluginUrl
operator|=
name|createPlugin
argument_list|(
name|pluginDir
argument_list|,
literal|"description"
argument_list|,
literal|"fake desc"
argument_list|,
literal|"name"
argument_list|,
name|pluginName
argument_list|,
literal|"version"
argument_list|,
literal|"3.0"
argument_list|,
literal|"elasticsearch.version"
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|toString
argument_list|()
argument_list|,
literal|"java.version"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
argument_list|,
literal|"jvm"
argument_list|,
literal|"true"
argument_list|,
literal|"classname"
argument_list|,
literal|"FakePlugin"
argument_list|)
expr_stmt|;
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --verbose"
argument_list|,
name|pluginUrl
argument_list|)
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"test.txt"
argument_list|,
literal|"version1"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"test2.txt"
argument_list|,
literal|"version1"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"test.txt.new"
argument_list|,
literal|"version3"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"dir/testdir.txt"
argument_list|,
literal|"version1"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"dir/testdir.txt.new"
argument_list|,
literal|"version2"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"dir/testdir2.txt"
argument_list|,
literal|"version1"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"dir/subdir/testsubdir.txt"
argument_list|,
literal|"version1"
argument_list|)
expr_stmt|;
name|assertFileContent
argument_list|(
name|pluginConfigDir
argument_list|,
literal|"dir/subdir/testsubdir.txt.new"
argument_list|,
literal|"version2"
argument_list|)
expr_stmt|;
block|}
comment|// For #7152
annotation|@
name|Test
DECL|method|testLocalPluginInstallWithBinOnly_7152
specifier|public
name|void
name|testLocalPluginInstallWithBinOnly_7152
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pluginName
init|=
literal|"fake-plugin"
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createTempDir
argument_list|()
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
decl_stmt|;
comment|// create bin/tool
name|Files
operator|.
name|createDirectories
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"tool"
argument_list|)
argument_list|)
expr_stmt|;
empty_stmt|;
name|String
name|pluginUrl
init|=
name|createPlugin
argument_list|(
name|pluginDir
argument_list|,
literal|"description"
argument_list|,
literal|"fake desc"
argument_list|,
literal|"name"
argument_list|,
literal|"fake-plugin"
argument_list|,
literal|"version"
argument_list|,
literal|"1.0"
argument_list|,
literal|"elasticsearch.version"
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|toString
argument_list|()
argument_list|,
literal|"java.version"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
argument_list|,
literal|"jvm"
argument_list|,
literal|"true"
argument_list|,
literal|"classname"
argument_list|,
literal|"FakePlugin"
argument_list|)
decl_stmt|;
name|Path
name|binDir
init|=
name|environment
operator|.
name|binFile
argument_list|()
decl_stmt|;
name|Path
name|pluginBinDir
init|=
name|binDir
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
decl_stmt|;
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --verbose"
argument_list|,
name|pluginUrl
argument_list|)
argument_list|)
expr_stmt|;
name|assertThatPluginIsListed
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
name|assertDirectoryExists
argument_list|(
name|pluginBinDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListInstalledEmpty
specifier|public
name|void
name|testListInstalledEmpty
parameter_list|()
throws|throws
name|IOException
block|{
name|assertStatusOk
argument_list|(
literal|"list"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
literal|"No plugin detected"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListInstalledEmptyWithExistingPluginDirectory
specifier|public
name|void
name|testListInstalledEmptyWithExistingPluginDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|Files
operator|.
name|createDirectory
argument_list|(
name|environment
operator|.
name|pluginsFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatusOk
argument_list|(
literal|"list"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
literal|"No plugin detected"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInstallPlugin
specifier|public
name|void
name|testInstallPlugin
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|pluginName
init|=
literal|"fake-plugin"
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createTempDir
argument_list|()
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
decl_stmt|;
name|String
name|pluginUrl
init|=
name|createPlugin
argument_list|(
name|pluginDir
argument_list|,
literal|"description"
argument_list|,
literal|"fake desc"
argument_list|,
literal|"name"
argument_list|,
name|pluginName
argument_list|,
literal|"version"
argument_list|,
literal|"1.0"
argument_list|,
literal|"elasticsearch.version"
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|toString
argument_list|()
argument_list|,
literal|"java.version"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
argument_list|,
literal|"jvm"
argument_list|,
literal|"true"
argument_list|,
literal|"classname"
argument_list|,
literal|"FakePlugin"
argument_list|)
decl_stmt|;
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --verbose"
argument_list|,
name|pluginUrl
argument_list|)
argument_list|)
expr_stmt|;
name|assertThatPluginIsListed
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInstallSitePlugin
specifier|public
name|void
name|testInstallSitePlugin
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|pluginName
init|=
literal|"fake-plugin"
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createTempDir
argument_list|()
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"_site"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"_site"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"somefile"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pluginUrl
init|=
name|createPlugin
argument_list|(
name|pluginDir
argument_list|,
literal|"description"
argument_list|,
literal|"fake desc"
argument_list|,
literal|"name"
argument_list|,
name|pluginName
argument_list|,
literal|"version"
argument_list|,
literal|"1.0"
argument_list|,
literal|"site"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --verbose"
argument_list|,
name|pluginUrl
argument_list|)
argument_list|)
expr_stmt|;
name|assertThatPluginIsListed
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
comment|// We want to check that Plugin Manager moves content to _site
name|assertFileExists
argument_list|(
name|environment
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"_site"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInstallPluginWithBadChecksum
specifier|public
name|void
name|testInstallPluginWithBadChecksum
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|pluginName
init|=
literal|"fake-plugin"
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createTempDir
argument_list|()
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"_site"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"_site"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"somefile"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pluginUrl
init|=
name|createPluginWithBadChecksum
argument_list|(
name|pluginDir
argument_list|,
literal|"description"
argument_list|,
literal|"fake desc"
argument_list|,
literal|"version"
argument_list|,
literal|"1.0"
argument_list|,
literal|"site"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|assertStatus
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --verbose"
argument_list|,
name|pluginUrl
argument_list|)
argument_list|,
name|ExitStatus
operator|.
name|IO_ERROR
argument_list|)
expr_stmt|;
name|assertThatPluginIsNotListed
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
name|assertFileNotExists
argument_list|(
name|environment
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"_site"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|singlePluginInstallAndRemove
specifier|private
name|void
name|singlePluginInstallAndRemove
parameter_list|(
name|String
name|pluginDescriptor
parameter_list|,
name|String
name|pluginName
parameter_list|,
name|String
name|pluginCoordinates
parameter_list|)
throws|throws
name|IOException
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> trying to download and install [{}]"
argument_list|,
name|pluginDescriptor
argument_list|)
expr_stmt|;
if|if
condition|(
name|pluginCoordinates
operator|==
literal|null
condition|)
block|{
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --verbose"
argument_list|,
name|pluginDescriptor
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertStatusOk
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install %s --verbose"
argument_list|,
name|pluginCoordinates
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThatPluginIsListed
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertStatusOk
argument_list|(
literal|"remove "
operator|+
name|pluginDescriptor
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
literal|"Removing "
operator|+
name|pluginDescriptor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// not listed anymore
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertStatusOk
argument_list|(
literal|"list"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|not
argument_list|(
name|hasItem
argument_list|(
name|containsString
argument_list|(
name|pluginName
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * We are ignoring by default these tests as they require to have an internet access      * To activate the test, use -Dtests.network=true      * We test regular form: username/reponame/version      * It should find it in download.elasticsearch.org service      */
annotation|@
name|Test
annotation|@
name|Network
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"fails with jar hell failures - http://build-us-00.elastic.co/job/es_core_master_oracle_6/519/testReport/"
argument_list|)
DECL|method|testInstallPluginWithElasticsearchDownloadService
specifier|public
name|void
name|testInstallPluginWithElasticsearchDownloadService
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"download.elastic.co is accessible"
argument_list|,
name|isDownloadServiceWorking
argument_list|(
literal|"download.elastic.co"
argument_list|,
literal|80
argument_list|,
literal|"/elasticsearch/ci-test.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|singlePluginInstallAndRemove
argument_list|(
literal|"elasticsearch/elasticsearch-transport-thrift/2.4.0"
argument_list|,
literal|"elasticsearch-transport-thrift"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * We are ignoring by default these tests as they require to have an internet access      * To activate the test, use -Dtests.network=true      * We test regular form: groupId/artifactId/version      * It should find it in maven central service      */
annotation|@
name|Test
annotation|@
name|Network
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"fails with jar hell failures - http://build-us-00.elastic.co/job/es_core_master_oracle_6/519/testReport/"
argument_list|)
DECL|method|testInstallPluginWithMavenCentral
specifier|public
name|void
name|testInstallPluginWithMavenCentral
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"search.maven.org is accessible"
argument_list|,
name|isDownloadServiceWorking
argument_list|(
literal|"search.maven.org"
argument_list|,
literal|80
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
literal|"repo1.maven.org is accessible"
argument_list|,
name|isDownloadServiceWorking
argument_list|(
literal|"repo1.maven.org"
argument_list|,
literal|443
argument_list|,
literal|"/maven2/org/elasticsearch/elasticsearch-transport-thrift/2.4.0/elasticsearch-transport-thrift-2.4.0.pom"
argument_list|)
argument_list|)
expr_stmt|;
name|singlePluginInstallAndRemove
argument_list|(
literal|"org.elasticsearch/elasticsearch-transport-thrift/2.4.0"
argument_list|,
literal|"elasticsearch-transport-thrift"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * We are ignoring by default these tests as they require to have an internet access      * To activate the test, use -Dtests.network=true      * We test site plugins from github: userName/repoName      * It should find it on github      */
annotation|@
name|Test
annotation|@
name|Network
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"needs to be adapted to 2.0"
argument_list|)
DECL|method|testInstallPluginWithGithub
specifier|public
name|void
name|testInstallPluginWithGithub
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"github.com is accessible"
argument_list|,
name|isDownloadServiceWorking
argument_list|(
literal|"github.com"
argument_list|,
literal|443
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|singlePluginInstallAndRemove
argument_list|(
literal|"elasticsearch/kibana"
argument_list|,
literal|"kibana"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|isDownloadServiceWorking
specifier|private
name|boolean
name|isDownloadServiceWorking
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|resource
parameter_list|)
block|{
try|try
block|{
name|String
name|protocol
init|=
name|port
operator|==
literal|443
condition|?
literal|"https"
else|:
literal|"http"
decl_stmt|;
name|HttpResponse
name|response
init|=
operator|new
name|HttpRequestBuilder
argument_list|(
name|HttpClients
operator|.
name|createDefault
argument_list|()
argument_list|)
operator|.
name|protocol
argument_list|(
name|protocol
argument_list|)
operator|.
name|host
argument_list|(
name|host
argument_list|)
operator|.
name|port
argument_list|(
name|port
argument_list|)
operator|.
name|path
argument_list|(
name|resource
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatusCode
argument_list|()
operator|!=
literal|200
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}{}] download service is not working. Disabling current test."
argument_list|,
name|host
argument_list|,
name|resource
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}{}] download service is not working. Disabling current test."
argument_list|,
name|host
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
DECL|method|testRemovePlugin
specifier|public
name|void
name|testRemovePlugin
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pluginName
init|=
literal|"plugintest"
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createTempDir
argument_list|()
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
decl_stmt|;
name|String
name|pluginUrl
init|=
name|createPlugin
argument_list|(
name|pluginDir
argument_list|,
literal|"description"
argument_list|,
literal|"fake desc"
argument_list|,
literal|"name"
argument_list|,
name|pluginName
argument_list|,
literal|"version"
argument_list|,
literal|"1.0.0"
argument_list|,
literal|"elasticsearch.version"
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|toString
argument_list|()
argument_list|,
literal|"java.version"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
argument_list|,
literal|"jvm"
argument_list|,
literal|"true"
argument_list|,
literal|"classname"
argument_list|,
literal|"FakePlugin"
argument_list|)
decl_stmt|;
comment|// We want to remove plugin with plugin short name
name|singlePluginInstallAndRemove
argument_list|(
literal|"plugintest"
argument_list|,
literal|"plugintest"
argument_list|,
name|pluginUrl
argument_list|)
expr_stmt|;
comment|// We want to remove plugin with groupid/artifactid/version form
name|singlePluginInstallAndRemove
argument_list|(
literal|"groupid/plugintest/1.0.0"
argument_list|,
literal|"plugintest"
argument_list|,
name|pluginUrl
argument_list|)
expr_stmt|;
comment|// We want to remove plugin with groupid/artifactid form
name|singlePluginInstallAndRemove
argument_list|(
literal|"groupid/plugintest"
argument_list|,
literal|"plugintest"
argument_list|,
name|pluginUrl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemovePlugin_NullName_ThrowsException
specifier|public
name|void
name|testRemovePlugin_NullName_ThrowsException
parameter_list|()
throws|throws
name|IOException
block|{
name|assertStatus
argument_list|(
literal|"remove "
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemovePluginWithURLForm
specifier|public
name|void
name|testRemovePluginWithURLForm
parameter_list|()
throws|throws
name|Exception
block|{
name|assertStatus
argument_list|(
literal|"remove file://whatever"
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
literal|"Illegal plugin name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testForbiddenPluginNames
specifier|public
name|void
name|testForbiddenPluginNames
parameter_list|()
throws|throws
name|IOException
block|{
name|assertStatus
argument_list|(
literal|"remove elasticsearch"
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
name|assertStatus
argument_list|(
literal|"remove elasticsearch.bat"
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
name|assertStatus
argument_list|(
literal|"remove elasticsearch.in.sh"
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
name|assertStatus
argument_list|(
literal|"remove plugin"
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
name|assertStatus
argument_list|(
literal|"remove plugin.bat"
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
name|assertStatus
argument_list|(
literal|"remove service.bat"
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
name|assertStatus
argument_list|(
literal|"remove ELASTICSEARCH"
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
name|assertStatus
argument_list|(
literal|"remove ELASTICSEARCH.IN.SH"
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOfficialPluginName_ThrowsException
specifier|public
name|void
name|testOfficialPluginName_ThrowsException
parameter_list|()
throws|throws
name|IOException
block|{
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"analysis-icu"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"analysis-kuromoji"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"analysis-phonetic"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"analysis-smartcn"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"analysis-stempel"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"cloud-azure"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"cloud-gce"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"delete-by-query"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"lang-javascript"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"lang-python"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"mapper-murmur3"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"mapper-size"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"discovery-multicast"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"discovery-ec2"
argument_list|)
expr_stmt|;
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"repository-s3"
argument_list|)
expr_stmt|;
try|try
block|{
name|PluginManager
operator|.
name|checkForOfficialPlugins
argument_list|(
literal|"elasticsearch-mapper-attachment"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"elasticsearch-mapper-attachment should not be allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// We expect that error
block|}
block|}
annotation|@
name|Test
DECL|method|testThatBasicAuthIsRejectedOnHttp
specifier|public
name|void
name|testThatBasicAuthIsRejectedOnHttp
parameter_list|()
throws|throws
name|Exception
block|{
name|assertStatus
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install http://user:pass@localhost:12345/foo.zip --verbose"
argument_list|)
argument_list|,
name|CliTool
operator|.
name|ExitStatus
operator|.
name|IO_ERROR
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
literal|"Basic auth is only supported for HTTPS!"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatBasicAuthIsSupportedWithHttps
specifier|public
name|void
name|testThatBasicAuthIsSupportedWithHttps
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test requires security manager to be disabled"
argument_list|,
name|System
operator|.
name|getSecurityManager
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|SSLSocketFactory
name|defaultSocketFactory
init|=
name|HttpsURLConnection
operator|.
name|getDefaultSSLSocketFactory
argument_list|()
decl_stmt|;
name|ServerBootstrap
name|serverBootstrap
init|=
operator|new
name|ServerBootstrap
argument_list|(
operator|new
name|NioServerSocketChannelFactory
argument_list|()
argument_list|)
decl_stmt|;
name|SelfSignedCertificate
name|ssc
init|=
operator|new
name|SelfSignedCertificate
argument_list|(
literal|"localhost"
argument_list|)
decl_stmt|;
try|try
block|{
comment|//  Create a trust manager that does not validate certificate chains:
name|SSLContext
name|sc
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"SSL"
argument_list|)
decl_stmt|;
name|sc
operator|.
name|init
argument_list|(
literal|null
argument_list|,
name|InsecureTrustManagerFactory
operator|.
name|INSTANCE
operator|.
name|getTrustManagers
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|HttpsURLConnection
operator|.
name|setDefaultSSLSocketFactory
argument_list|(
name|sc
operator|.
name|getSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|HttpRequest
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|SslContext
name|sslContext
init|=
name|SslContext
operator|.
name|newServerContext
argument_list|(
name|ssc
operator|.
name|certificate
argument_list|()
argument_list|,
name|ssc
operator|.
name|privateKey
argument_list|()
argument_list|)
decl_stmt|;
name|serverBootstrap
operator|.
name|setPipelineFactory
argument_list|(
operator|new
name|ChannelPipelineFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|Channels
operator|.
name|pipeline
argument_list|(
operator|new
name|SslHandler
argument_list|(
name|sslContext
operator|.
name|newEngine
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HttpRequestDecoder
argument_list|()
argument_list|,
operator|new
name|HttpResponseEncoder
argument_list|()
argument_list|,
operator|new
name|LoggingServerHandler
argument_list|(
name|requests
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Channel
name|channel
init|=
name|serverBootstrap
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"localhost"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|port
init|=
operator|(
operator|(
name|InetSocketAddress
operator|)
name|channel
operator|.
name|getLocalAddress
argument_list|()
operator|)
operator|.
name|getPort
argument_list|()
decl_stmt|;
comment|// IO_ERROR because there is no real file delivered...
name|assertStatus
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"install https://user:pass@localhost:%s/foo.zip --verbose --timeout 1s"
argument_list|,
name|port
argument_list|)
argument_list|,
name|ExitStatus
operator|.
name|IO_ERROR
argument_list|)
expr_stmt|;
comment|// ensure that we did not try any other data source like download.elastic.co, in case we specified our own local URL
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|not
argument_list|(
name|hasItem
argument_list|(
name|containsString
argument_list|(
literal|"download.elastic.co"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|requests
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Request header did not contain Authorization header, terminal output was: %s"
argument_list|,
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|,
name|requests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|headers
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Authorization"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|,
name|requests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|headers
argument_list|()
operator|.
name|get
argument_list|(
literal|"Authorization"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Basic "
operator|+
name|Base64
operator|.
name|encodeBytes
argument_list|(
literal|"user:pass"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HttpsURLConnection
operator|.
name|setDefaultSSLSocketFactory
argument_list|(
name|defaultSocketFactory
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
name|ssc
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|LoggingServerHandler
specifier|private
specifier|static
class|class
name|LoggingServerHandler
extends|extends
name|SimpleChannelUpstreamHandler
block|{
DECL|field|requests
specifier|private
name|List
argument_list|<
name|HttpRequest
argument_list|>
name|requests
decl_stmt|;
DECL|method|LoggingServerHandler
specifier|public
name|LoggingServerHandler
parameter_list|(
name|List
argument_list|<
name|HttpRequest
argument_list|>
name|requests
parameter_list|)
block|{
name|this
operator|.
name|requests
operator|=
name|requests
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
specifier|final
name|ChannelHandlerContext
name|ctx
parameter_list|,
specifier|final
name|MessageEvent
name|e
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|HttpRequest
name|request
init|=
operator|(
name|HttpRequest
operator|)
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
specifier|final
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
name|response
init|=
operator|new
name|DefaultHttpResponse
argument_list|(
name|HTTP_1_1
argument_list|,
name|HttpResponseStatus
operator|.
name|BAD_REQUEST
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|write
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildInitialSettings
specifier|private
name|Environment
name|buildInitialSettings
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"http.enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|InternalSettingsPreparer
operator|.
name|prepareEnvironment
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|assertStatusOk
specifier|private
name|void
name|assertStatusOk
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|assertStatus
argument_list|(
name|command
argument_list|,
name|ExitStatus
operator|.
name|OK
argument_list|)
expr_stmt|;
block|}
DECL|method|assertStatus
specifier|private
name|void
name|assertStatus
parameter_list|(
name|String
name|command
parameter_list|,
name|ExitStatus
name|exitStatus
parameter_list|)
block|{
name|ExitStatus
name|status
init|=
operator|new
name|PluginManagerCliParser
argument_list|(
name|terminal
argument_list|)
operator|.
name|execute
argument_list|(
name|args
argument_list|(
name|command
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Terminal output was: "
operator|+
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|status
argument_list|,
name|is
argument_list|(
name|exitStatus
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertThatPluginIsListed
specifier|private
name|void
name|assertThatPluginIsListed
parameter_list|(
name|String
name|pluginName
parameter_list|)
block|{
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertStatusOk
argument_list|(
literal|"list"
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Terminal output was: %s"
argument_list|,
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|message
argument_list|,
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
name|pluginName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertThatPluginIsNotListed
specifier|private
name|void
name|assertThatPluginIsNotListed
parameter_list|(
name|String
name|pluginName
parameter_list|)
block|{
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertStatusOk
argument_list|(
literal|"list"
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Terminal output was: %s"
argument_list|,
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|message
argument_list|,
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|pluginName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

