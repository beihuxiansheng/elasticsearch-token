begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
DECL|class|PluginsServiceTests
specifier|public
class|class
name|PluginsServiceTests
extends|extends
name|ESTestCase
block|{
DECL|class|AdditionalSettingsPlugin1
specifier|public
specifier|static
class|class
name|AdditionalSettingsPlugin1
extends|extends
name|Plugin
block|{
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"additional-settings1"
return|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"adds additional setting 'foo.bar'"
return|;
block|}
annotation|@
name|Override
DECL|method|additionalSettings
specifier|public
name|Settings
name|additionalSettings
parameter_list|()
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|put
argument_list|(
name|IndexModule
operator|.
name|STORE_TYPE
argument_list|,
name|IndexModule
operator|.
name|Type
operator|.
name|MMAPFS
operator|.
name|getSettingsKey
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
DECL|class|AdditionalSettingsPlugin2
specifier|public
specifier|static
class|class
name|AdditionalSettingsPlugin2
extends|extends
name|Plugin
block|{
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"additional-settings2"
return|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"adds additional setting 'foo.bar'"
return|;
block|}
annotation|@
name|Override
DECL|method|additionalSettings
specifier|public
name|Settings
name|additionalSettings
parameter_list|()
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
DECL|class|FailOnModule
specifier|public
specifier|static
class|class
name|FailOnModule
extends|extends
name|Plugin
block|{
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"fail-on-module"
return|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"fails in onModule"
return|;
block|}
DECL|method|onModule
specifier|public
name|void
name|onModule
parameter_list|(
name|BrokenModule
name|brokenModule
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"boom"
argument_list|)
throw|;
block|}
block|}
DECL|class|BrokenModule
specifier|public
specifier|static
class|class
name|BrokenModule
extends|extends
name|AbstractModule
block|{
annotation|@
name|Override
DECL|method|configure
specifier|protected
name|void
name|configure
parameter_list|()
block|{         }
block|}
DECL|method|newPluginsService
specifier|static
name|PluginsService
name|newPluginsService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
modifier|...
name|classpathPlugins
parameter_list|)
block|{
return|return
operator|new
name|PluginsService
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|,
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
operator|.
name|pluginsFile
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|classpathPlugins
argument_list|)
argument_list|)
return|;
block|}
DECL|method|testAdditionalSettings
specifier|public
name|void
name|testAdditionalSettings
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"my.setting"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|put
argument_list|(
name|IndexModule
operator|.
name|STORE_TYPE
argument_list|,
name|IndexModule
operator|.
name|Type
operator|.
name|SIMPLEFS
operator|.
name|getSettingsKey
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PluginsService
name|service
init|=
name|newPluginsService
argument_list|(
name|settings
argument_list|,
name|AdditionalSettingsPlugin1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Settings
name|newSettings
init|=
name|service
operator|.
name|updatedSettings
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|newSettings
operator|.
name|get
argument_list|(
literal|"my.setting"
argument_list|)
argument_list|)
expr_stmt|;
comment|// previous settings still exist
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|newSettings
operator|.
name|get
argument_list|(
literal|"foo.bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// added setting exists
name|assertEquals
argument_list|(
name|IndexModule
operator|.
name|Type
operator|.
name|SIMPLEFS
operator|.
name|getSettingsKey
argument_list|()
argument_list|,
name|newSettings
operator|.
name|get
argument_list|(
name|IndexModule
operator|.
name|STORE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
comment|// does not override pre existing settings
block|}
DECL|method|testAdditionalSettingsClash
specifier|public
name|void
name|testAdditionalSettingsClash
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PluginsService
name|service
init|=
name|newPluginsService
argument_list|(
name|settings
argument_list|,
name|AdditionalSettingsPlugin1
operator|.
name|class
argument_list|,
name|AdditionalSettingsPlugin2
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|service
operator|.
name|updatedSettings
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception when building updated settings"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|msg
operator|.
name|contains
argument_list|(
literal|"Cannot have additional setting [foo.bar]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|msg
operator|.
name|contains
argument_list|(
literal|"plugin [additional-settings1]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|msg
operator|.
name|contains
argument_list|(
literal|"plugin [additional-settings2]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOnModuleExceptionsArePropagated
specifier|public
name|void
name|testOnModuleExceptionsArePropagated
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PluginsService
name|service
init|=
name|newPluginsService
argument_list|(
name|settings
argument_list|,
name|FailOnModule
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|service
operator|.
name|processModule
argument_list|(
operator|new
name|BrokenModule
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"boom"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"failed to invoke onModule"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boom"
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

