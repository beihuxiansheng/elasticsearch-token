begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasToString
import|;
end_import

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressFileSystems
argument_list|(
name|value
operator|=
literal|"ExtrasFS"
argument_list|)
DECL|class|PluginsServiceTests
specifier|public
class|class
name|PluginsServiceTests
extends|extends
name|ESTestCase
block|{
DECL|class|AdditionalSettingsPlugin1
specifier|public
specifier|static
class|class
name|AdditionalSettingsPlugin1
extends|extends
name|Plugin
block|{
annotation|@
name|Override
DECL|method|additionalSettings
specifier|public
name|Settings
name|additionalSettings
parameter_list|()
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|put
argument_list|(
name|IndexModule
operator|.
name|INDEX_STORE_TYPE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|IndexModule
operator|.
name|Type
operator|.
name|MMAPFS
operator|.
name|getSettingsKey
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
DECL|class|AdditionalSettingsPlugin2
specifier|public
specifier|static
class|class
name|AdditionalSettingsPlugin2
extends|extends
name|Plugin
block|{
annotation|@
name|Override
DECL|method|additionalSettings
specifier|public
name|Settings
name|additionalSettings
parameter_list|()
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
DECL|class|FilterablePlugin
specifier|public
specifier|static
class|class
name|FilterablePlugin
extends|extends
name|Plugin
implements|implements
name|ScriptPlugin
block|{}
DECL|method|newPluginsService
specifier|static
name|PluginsService
name|newPluginsService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
modifier|...
name|classpathPlugins
parameter_list|)
block|{
return|return
operator|new
name|PluginsService
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|,
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
operator|.
name|pluginsFile
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|classpathPlugins
argument_list|)
argument_list|)
return|;
block|}
DECL|method|testAdditionalSettings
specifier|public
name|void
name|testAdditionalSettings
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"my.setting"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|put
argument_list|(
name|IndexModule
operator|.
name|INDEX_STORE_TYPE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|IndexModule
operator|.
name|Type
operator|.
name|SIMPLEFS
operator|.
name|getSettingsKey
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PluginsService
name|service
init|=
name|newPluginsService
argument_list|(
name|settings
argument_list|,
name|AdditionalSettingsPlugin1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Settings
name|newSettings
init|=
name|service
operator|.
name|updatedSettings
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|newSettings
operator|.
name|get
argument_list|(
literal|"my.setting"
argument_list|)
argument_list|)
expr_stmt|;
comment|// previous settings still exist
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|newSettings
operator|.
name|get
argument_list|(
literal|"foo.bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// added setting exists
name|assertEquals
argument_list|(
name|IndexModule
operator|.
name|Type
operator|.
name|SIMPLEFS
operator|.
name|getSettingsKey
argument_list|()
argument_list|,
name|newSettings
operator|.
name|get
argument_list|(
name|IndexModule
operator|.
name|INDEX_STORE_TYPE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// does not override pre existing settings
block|}
DECL|method|testAdditionalSettingsClash
specifier|public
name|void
name|testAdditionalSettingsClash
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PluginsService
name|service
init|=
name|newPluginsService
argument_list|(
name|settings
argument_list|,
name|AdditionalSettingsPlugin1
operator|.
name|class
argument_list|,
name|AdditionalSettingsPlugin2
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|service
operator|.
name|updatedSettings
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception when building updated settings"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|msg
operator|.
name|contains
argument_list|(
literal|"Cannot have additional setting [foo.bar]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|msg
operator|.
name|contains
argument_list|(
literal|"plugin ["
operator|+
name|AdditionalSettingsPlugin1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|msg
operator|.
name|contains
argument_list|(
literal|"plugin ["
operator|+
name|AdditionalSettingsPlugin2
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testExistingPluginMissingDescriptor
specifier|public
name|void
name|testExistingPluginMissingDescriptor
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|pluginsDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|pluginsDir
operator|.
name|resolve
argument_list|(
literal|"plugin-missing-descriptor"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|PluginsService
operator|.
name|getPluginBundles
argument_list|(
name|pluginsDir
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Could not load plugin descriptor for existing plugin [plugin-missing-descriptor]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFilterPlugins
specifier|public
name|void
name|testFilterPlugins
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"my.setting"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|put
argument_list|(
name|IndexModule
operator|.
name|INDEX_STORE_TYPE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|IndexModule
operator|.
name|Type
operator|.
name|SIMPLEFS
operator|.
name|getSettingsKey
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PluginsService
name|service
init|=
name|newPluginsService
argument_list|(
name|settings
argument_list|,
name|AdditionalSettingsPlugin1
operator|.
name|class
argument_list|,
name|FilterablePlugin
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ScriptPlugin
argument_list|>
name|scriptPlugins
init|=
name|service
operator|.
name|filterPlugins
argument_list|(
name|ScriptPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scriptPlugins
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FilterablePlugin
operator|.
name|class
argument_list|,
name|scriptPlugins
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testHiddenFiles
specifier|public
name|void
name|testHiddenFiles
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|home
init|=
name|createTempDir
argument_list|()
decl_stmt|;
specifier|final
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|home
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|hidden
init|=
name|home
operator|.
name|resolve
argument_list|(
literal|"plugins"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|".hidden"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|hidden
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|IllegalStateException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|newPluginsService
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"Could not load plugin descriptor for existing plugin [.hidden]"
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
name|expected
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStartupWithRemovingMarker
specifier|public
name|void
name|testStartupWithRemovingMarker
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|home
init|=
name|createTempDir
argument_list|()
decl_stmt|;
specifier|final
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|home
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|fake
init|=
name|home
operator|.
name|resolve
argument_list|(
literal|"plugins"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|fake
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|fake
operator|.
name|resolve
argument_list|(
literal|"plugin.jar"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|removing
init|=
name|home
operator|.
name|resolve
argument_list|(
literal|"plugins"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|".removing-fake"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|removing
argument_list|)
expr_stmt|;
name|PluginTestUtil
operator|.
name|writeProperties
argument_list|(
name|fake
argument_list|,
literal|"description"
argument_list|,
literal|"fake"
argument_list|,
literal|"name"
argument_list|,
literal|"fake"
argument_list|,
literal|"version"
argument_list|,
literal|"1.0.0"
argument_list|,
literal|"elasticsearch.version"
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|toString
argument_list|()
argument_list|,
literal|"java.version"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
argument_list|,
literal|"classname"
argument_list|,
literal|"Fake"
argument_list|,
literal|"has.native.controller"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
specifier|final
name|IllegalStateException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|newPluginsService
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"found file [%s] from a failed attempt to remove the plugin [fake]; execute [elasticsearch-plugin remove fake]"
argument_list|,
name|removing
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
name|expected
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

