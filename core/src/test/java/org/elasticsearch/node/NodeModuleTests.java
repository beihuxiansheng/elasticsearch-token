begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|NodeModuleTests
specifier|public
class|class
name|NodeModuleTests
extends|extends
name|ESTestCase
block|{
DECL|method|testIsNodeIngestEnabledSettings
specifier|public
name|void
name|testIsNodeIngestEnabledSettings
parameter_list|()
block|{
name|assertThat
argument_list|(
name|NodeModule
operator|.
name|isNodeIngestEnabled
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|NodeModule
operator|.
name|isNodeIngestEnabled
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.ingest"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|NodeModule
operator|.
name|isNodeIngestEnabled
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.ingest"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|NodeModule
operator|.
name|isNodeIngestEnabled
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.ingest"
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|NodeModule
operator|.
name|isNodeIngestEnabled
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.ingest"
argument_list|,
literal|"false"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|NodeModule
operator|.
name|isNodeIngestEnabled
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.ingest"
argument_list|,
literal|"off"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|NodeModule
operator|.
name|isNodeIngestEnabled
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.ingest"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|NodeModule
operator|.
name|isNodeIngestEnabled
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.ingest"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsIngestEnabledAttributes
specifier|public
name|void
name|testIsIngestEnabledAttributes
parameter_list|()
block|{
name|assertThat
argument_list|(
name|NodeModule
operator|.
name|isNodeIngestEnabled
argument_list|(
name|ImmutableOpenMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|builder
init|=
name|ImmutableOpenMap
operator|.
expr|<
name|String
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"ingest"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|NodeModule
operator|.
name|isNodeIngestEnabled
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|ImmutableOpenMap
operator|.
expr|<
name|String
operator|,
name|String
operator|>
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"ingest"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|NodeModule
operator|.
name|isNodeIngestEnabled
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|ImmutableOpenMap
operator|.
expr|<
name|String
operator|,
name|String
operator|>
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"ingest"
argument_list|,
literal|"off"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|NodeModule
operator|.
name|isNodeIngestEnabled
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|ImmutableOpenMap
operator|.
expr|<
name|String
operator|,
name|String
operator|>
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"ingest"
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|NodeModule
operator|.
name|isNodeIngestEnabled
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|ImmutableOpenMap
operator|.
expr|<
name|String
operator|,
name|String
operator|>
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"ingest"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|NodeModule
operator|.
name|isNodeIngestEnabled
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsIngestEnabledMethodsReturnTheSameValue
specifier|public
name|void
name|testIsIngestEnabledMethodsReturnTheSameValue
parameter_list|()
block|{
name|String
name|randomString
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|randomString
operator|=
name|randomFrom
argument_list|(
literal|"true"
argument_list|,
literal|"false"
argument_list|,
literal|"on"
argument_list|,
literal|"off"
argument_list|,
literal|"yes"
argument_list|,
literal|"no"
argument_list|,
literal|"0"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|randomString
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.ingest"
argument_list|,
name|randomString
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|builder
init|=
name|ImmutableOpenMap
operator|.
expr|<
name|String
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"ingest"
argument_list|,
name|randomString
argument_list|)
expr_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|NodeModule
operator|.
name|isNodeIngestEnabled
argument_list|(
name|settings
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|NodeModule
operator|.
name|isNodeIngestEnabled
argument_list|(
name|attributes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

