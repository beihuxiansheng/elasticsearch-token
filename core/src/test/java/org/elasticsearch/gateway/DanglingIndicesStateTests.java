begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|DanglingIndicesStateTests
specifier|public
class|class
name|DanglingIndicesStateTests
extends|extends
name|ESTestCase
block|{
DECL|field|indexSettings
specifier|private
specifier|static
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|method|testCleanupWhenEmpty
specifier|public
name|void
name|testCleanupWhenEmpty
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|NodeEnvironment
name|env
init|=
name|newNodeEnvironment
argument_list|()
init|)
block|{
name|MetaStateService
name|metaStateService
init|=
operator|new
name|MetaStateService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|DanglingIndicesState
name|danglingState
init|=
operator|new
name|DanglingIndicesState
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|env
argument_list|,
name|metaStateService
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|danglingState
operator|.
name|getDanglingIndices
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|danglingState
operator|.
name|cleanupAllocatedDangledIndices
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|danglingState
operator|.
name|getDanglingIndices
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDanglingProcessing
specifier|public
name|void
name|testDanglingProcessing
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|NodeEnvironment
name|env
init|=
name|newNodeEnvironment
argument_list|()
init|)
block|{
name|MetaStateService
name|metaStateService
init|=
operator|new
name|MetaStateService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|DanglingIndicesState
name|danglingState
init|=
operator|new
name|DanglingIndicesState
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|env
argument_list|,
name|metaStateService
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
name|dangledIndex
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|settings
argument_list|(
name|indexSettings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|metaStateService
operator|.
name|writeIndex
argument_list|(
literal|"test_write"
argument_list|,
name|dangledIndex
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// check that several runs when not in the metadata still keep the dangled index around
name|int
name|numberOfChecks
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfChecks
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|newDanglingIndices
init|=
name|danglingState
operator|.
name|findNewDanglingIndices
argument_list|(
name|metaData
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newDanglingIndices
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newDanglingIndices
operator|.
name|keySet
argument_list|()
argument_list|,
name|Matchers
operator|.
name|hasItems
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|danglingState
operator|.
name|getDanglingIndices
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfChecks
condition|;
name|i
operator|++
control|)
block|{
name|danglingState
operator|.
name|findNewAndAddDanglingIndices
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|danglingState
operator|.
name|getDanglingIndices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|danglingState
operator|.
name|getDanglingIndices
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|Matchers
operator|.
name|hasItems
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// simulate allocation to the metadata
name|metaData
operator|=
name|MetaData
operator|.
name|builder
argument_list|(
name|metaData
argument_list|)
operator|.
name|put
argument_list|(
name|dangledIndex
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// check that several runs when in the metadata, but not cleaned yet, still keeps dangled
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfChecks
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|newDanglingIndices
init|=
name|danglingState
operator|.
name|findNewDanglingIndices
argument_list|(
name|metaData
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newDanglingIndices
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|danglingState
operator|.
name|getDanglingIndices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|danglingState
operator|.
name|getDanglingIndices
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|Matchers
operator|.
name|hasItems
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|danglingState
operator|.
name|cleanupAllocatedDangledIndices
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|danglingState
operator|.
name|getDanglingIndices
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRenameOfIndexState
specifier|public
name|void
name|testRenameOfIndexState
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|NodeEnvironment
name|env
init|=
name|newNodeEnvironment
argument_list|()
init|)
block|{
name|MetaStateService
name|metaStateService
init|=
operator|new
name|MetaStateService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|DanglingIndicesState
name|danglingState
init|=
operator|new
name|DanglingIndicesState
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|env
argument_list|,
name|metaStateService
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
name|dangledIndex
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|settings
argument_list|(
name|indexSettings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|metaStateService
operator|.
name|writeIndex
argument_list|(
literal|"test_write"
argument_list|,
name|dangledIndex
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|env
operator|.
name|indexPaths
argument_list|(
literal|"test1"
argument_list|)
control|)
block|{
name|Files
operator|.
name|move
argument_list|(
name|path
argument_list|,
name|path
operator|.
name|getParent
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"test1_renamed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|newDanglingIndices
init|=
name|danglingState
operator|.
name|findNewDanglingIndices
argument_list|(
name|metaData
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newDanglingIndices
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newDanglingIndices
operator|.
name|keySet
argument_list|()
argument_list|,
name|Matchers
operator|.
name|hasItems
argument_list|(
literal|"test1_renamed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

