begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|cluster
operator|.
name|TestClusterService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|GatewayTests
specifier|public
class|class
name|GatewayTests
extends|extends
name|ESTestCase
block|{
DECL|method|testCalcRequiredAllocations
specifier|public
name|void
name|testCalcRequiredAllocations
parameter_list|()
block|{
name|MockGateway
name|gateway
init|=
operator|new
name|MockGateway
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|TestClusterService
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|nodeCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expectedResult
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedResult
operator|.
name|put
argument_list|(
literal|"quorum"
argument_list|,
name|nodeCount
operator|>
literal|2
condition|?
name|nodeCount
operator|/
literal|2
operator|+
literal|1
else|:
literal|1
argument_list|)
expr_stmt|;
name|expectedResult
operator|.
name|put
argument_list|(
literal|"quorum-1"
argument_list|,
name|nodeCount
operator|>
literal|2
condition|?
operator|(
name|nodeCount
operator|+
literal|1
operator|)
operator|/
literal|2
else|:
literal|1
argument_list|)
expr_stmt|;
name|expectedResult
operator|.
name|put
argument_list|(
literal|"half"
argument_list|,
name|expectedResult
operator|.
name|get
argument_list|(
literal|"quorum-1"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedResult
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResult
operator|.
name|put
argument_list|(
literal|"full"
argument_list|,
name|nodeCount
argument_list|)
expr_stmt|;
name|expectedResult
operator|.
name|put
argument_list|(
literal|"all"
argument_list|,
name|nodeCount
argument_list|)
expr_stmt|;
name|expectedResult
operator|.
name|put
argument_list|(
literal|"full-1"
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|nodeCount
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expectedResult
operator|.
name|put
argument_list|(
literal|"all-1"
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|nodeCount
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|expectedResult
operator|.
name|put
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|expectedResult
operator|.
name|put
argument_list|(
name|randomUnicodeOfCodepointLength
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|setting
range|:
name|expectedResult
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
literal|"unexpected result for setting ["
operator|+
name|setting
operator|+
literal|"]"
argument_list|,
name|gateway
operator|.
name|calcRequiredAllocations
argument_list|(
name|setting
argument_list|,
name|nodeCount
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedResult
operator|.
name|get
argument_list|(
name|setting
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MockGateway
specifier|static
class|class
name|MockGateway
extends|extends
name|Gateway
block|{
DECL|method|MockGateway
name|MockGateway
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|clusterService
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|calcRequiredAllocations
specifier|public
name|int
name|calcRequiredAllocations
parameter_list|(
name|String
name|setting
parameter_list|,
name|int
name|nodeCount
parameter_list|)
block|{
return|return
name|super
operator|.
name|calcRequiredAllocations
argument_list|(
name|setting
argument_list|,
name|nodeCount
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

