begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|IndexStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|ShardStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalTestCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalTestCluster
operator|.
name|RestartCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|store
operator|.
name|MockFSIndexStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|termQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|numDataNodes
operator|=
literal|0
argument_list|,
name|scope
operator|=
name|Scope
operator|.
name|TEST
argument_list|)
DECL|class|RecoveryFromGatewayIT
specifier|public
class|class
name|RecoveryFromGatewayIT
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|MockFSIndexStore
operator|.
name|TestPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|testOneNodeRecoverFromGateway
specifier|public
name|void
name|testOneNodeRecoverFromGateway
parameter_list|()
throws|throws
name|Exception
block|{
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"appAccountIds"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"10990239"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"appAccountIds"
argument_list|)
operator|.
name|value
argument_list|(
literal|14
argument_list|)
operator|.
name|value
argument_list|(
literal|179
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"10990473"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"appAccountIds"
argument_list|)
operator|.
name|value
argument_list|(
literal|14
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"10990513"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"appAccountIds"
argument_list|)
operator|.
name|value
argument_list|(
literal|14
argument_list|)
operator|.
name|value
argument_list|(
literal|179
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"10990695"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"appAccountIds"
argument_list|)
operator|.
name|value
argument_list|(
literal|14
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"11026351"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"appAccountIds"
argument_list|)
operator|.
name|value
argument_list|(
literal|14
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"appAccountIds"
argument_list|,
literal|179
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// wait for primary allocations here otherwise if we have a lot of shards we might have a
comment|// shard that is still in post recovery when we restart and the ensureYellow() below will timeout
name|Map
argument_list|<
name|String
argument_list|,
name|long
index|[]
argument_list|>
name|primaryTerms
init|=
name|assertAndCapturePrimaryTerms
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|fullRestart
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Running Cluster Health (wait for the shards to startup)"
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|primaryTerms
operator|=
name|assertAndCapturePrimaryTerms
argument_list|(
name|primaryTerms
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"appAccountIds"
argument_list|,
literal|179
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|fullRestart
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Running Cluster Health (wait for the shards to startup)"
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|primaryTerms
operator|=
name|assertAndCapturePrimaryTerms
argument_list|(
name|primaryTerms
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"appAccountIds"
argument_list|,
literal|179
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAndCapturePrimaryTerms
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|long
index|[]
argument_list|>
name|assertAndCapturePrimaryTerms
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|long
index|[]
argument_list|>
name|previousTerms
parameter_list|)
block|{
if|if
condition|(
name|previousTerms
operator|==
literal|null
condition|)
block|{
name|previousTerms
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|long
index|[]
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ClusterState
name|state
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexMetaData
argument_list|>
name|cursor
range|:
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|cursor
operator|.
name|value
decl_stmt|;
specifier|final
name|String
name|index
init|=
name|indexMetaData
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|long
index|[]
name|previous
init|=
name|previousTerms
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
name|current
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|indexMetaData
operator|.
name|getNumberOfShards
argument_list|()
argument_list|)
operator|.
name|mapToLong
argument_list|(
name|indexMetaData
operator|::
name|primaryTerm
argument_list|)
operator|.
name|toArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
literal|"number of terms changed for index ["
operator|+
name|index
operator|+
literal|"]"
argument_list|,
name|current
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|previous
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|shard
init|=
literal|0
init|;
name|shard
operator|<
name|current
operator|.
name|length
condition|;
name|shard
operator|++
control|)
block|{
name|assertThat
argument_list|(
literal|"primary term didn't increase for ["
operator|+
name|index
operator|+
literal|"]["
operator|+
name|shard
operator|+
literal|"]"
argument_list|,
name|current
index|[
name|shard
index|]
argument_list|,
name|greaterThan
argument_list|(
name|previous
index|[
name|shard
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|testSingleNodeNoFlush
specifier|public
name|void
name|testSingleNodeNoFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"num"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"integer"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
comment|// note: default replica settings are tied to #data nodes-1 which is 0 here. We can do with 1 in this test.
name|int
name|numberOfShards
init|=
name|numberOfShards
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|numberOfShards
argument_list|()
argument_list|,
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|value1Docs
decl_stmt|;
name|int
name|value2Docs
decl_stmt|;
name|boolean
name|indexToAllShards
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexToAllShards
condition|)
block|{
comment|// insert enough docs so all shards will have a doc
name|value1Docs
operator|=
name|randomIntBetween
argument_list|(
name|numberOfShards
operator|*
literal|10
argument_list|,
name|numberOfShards
operator|*
literal|20
argument_list|)
expr_stmt|;
name|value2Docs
operator|=
name|randomIntBetween
argument_list|(
name|numberOfShards
operator|*
literal|10
argument_list|,
name|numberOfShards
operator|*
literal|20
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// insert a two docs, some shards will not have anything
name|value1Docs
operator|=
literal|1
expr_stmt|;
name|value2Docs
operator|=
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
operator|+
name|randomInt
argument_list|(
literal|100
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|Math
operator|.
name|max
argument_list|(
name|value1Docs
argument_list|,
name|value2Docs
argument_list|)
condition|;
name|id
operator|++
control|)
block|{
if|if
condition|(
name|id
operator|<
name|value1Docs
condition|)
block|{
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1_"
operator|+
name|id
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"num"
argument_list|)
operator|.
name|value
argument_list|(
literal|14
argument_list|)
operator|.
name|value
argument_list|(
literal|179
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|<
name|value2Docs
condition|)
block|{
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2_"
operator|+
name|id
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"num"
argument_list|)
operator|.
name|value
argument_list|(
literal|14
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|randomInt
argument_list|(
literal|10
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|value1Docs
operator|+
name|value2Docs
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|value1Docs
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|value2Docs
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"num"
argument_list|,
literal|179
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|value1Docs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|indexToAllShards
condition|)
block|{
comment|// we have to verify primaries are started for them to be restored
name|logger
operator|.
name|info
argument_list|(
literal|"Ensure all primaries have been started"
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|long
index|[]
argument_list|>
name|primaryTerms
init|=
name|assertAndCapturePrimaryTerms
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|fullRestart
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Running Cluster Health (wait for the shards to startup)"
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|primaryTerms
operator|=
name|assertAndCapturePrimaryTerms
argument_list|(
name|primaryTerms
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|randomInt
argument_list|(
literal|10
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|value1Docs
operator|+
name|value2Docs
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|value1Docs
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|value2Docs
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"num"
argument_list|,
literal|179
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|value1Docs
argument_list|)
expr_stmt|;
block|}
name|internalCluster
argument_list|()
operator|.
name|fullRestart
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Running Cluster Health (wait for the shards to startup)"
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|primaryTerms
operator|=
name|assertAndCapturePrimaryTerms
argument_list|(
name|primaryTerms
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|randomInt
argument_list|(
literal|10
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|value1Docs
operator|+
name|value2Docs
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|value1Docs
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|value2Docs
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"num"
argument_list|,
literal|179
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|value1Docs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSingleNodeWithFlush
specifier|public
name|void
name|testSingleNodeWithFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|flush
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// wait for primary allocations here otherwise if we have a lot of shards we might have a
comment|// shard that is still in post recovery when we restart and the ensureYellow() below will timeout
name|Map
argument_list|<
name|String
argument_list|,
name|long
index|[]
argument_list|>
name|primaryTerms
init|=
name|assertAndCapturePrimaryTerms
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|fullRestart
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Running Cluster Health (wait for the shards to startup)"
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|primaryTerms
operator|=
name|assertAndCapturePrimaryTerms
argument_list|(
name|primaryTerms
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|internalCluster
argument_list|()
operator|.
name|fullRestart
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Running Cluster Health (wait for the shards to startup)"
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|primaryTerms
operator|=
name|assertAndCapturePrimaryTerms
argument_list|(
name|primaryTerms
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTwoNodeFirstNodeCleared
specifier|public
name|void
name|testTwoNodeFirstNodeCleared
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|firstNode
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|flush
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Running Cluster Health (wait for the shards to startup)"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|long
index|[]
argument_list|>
name|primaryTerms
init|=
name|assertAndCapturePrimaryTerms
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|fullRestart
argument_list|(
operator|new
name|RestartCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Settings
name|onNodeStopped
parameter_list|(
name|String
name|nodeName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"gateway.recover_after_nodes"
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|clearData
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
return|return
name|firstNode
operator|.
name|equals
argument_list|(
name|nodeName
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Running Cluster Health (wait for the shards to startup)"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|primaryTerms
operator|=
name|assertAndCapturePrimaryTerms
argument_list|(
name|primaryTerms
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLatestVersionLoaded
specifier|public
name|void
name|testLatestVersionLoaded
parameter_list|()
throws|throws
name|Exception
block|{
comment|// clean two nodes
name|internalCluster
argument_list|()
operator|.
name|startNodes
argument_list|(
literal|2
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"gateway.recover_after_nodes"
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> running cluster_health (wait for the shards to startup)"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|String
name|metaDataUuid
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|clusterUUID
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|metaDataUuid
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
literal|"_na_"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> closing first node, and indexing more data to the second node"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopRandomDataNode
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> one node is closed - start indexing data into the second one"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value3"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// TODO: remove once refresh doesn't fail immediately if there a master block:
comment|// https://github.com/elastic/elasticsearch/issues/9997
comment|// client().admin().cluster().prepareHealth("test").setWaitForYellowStatus().get();
name|logger
operator|.
name|info
argument_list|(
literal|"--> refreshing all indices after indexing is complete"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> checking if documents exist, there should be 3"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> add some metadata, additional type and template"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutTemplate
argument_list|(
literal|"template_1"
argument_list|)
operator|.
name|setTemplate
argument_list|(
literal|"te*"
argument_list|)
operator|.
name|setOrder
argument_list|(
literal|0
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAliases
argument_list|()
operator|.
name|addAlias
argument_list|(
literal|"test"
argument_list|,
literal|"test_alias"
argument_list|,
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> stopping the second node"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopRandomDataNode
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting the two nodes back"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNodes
argument_list|(
literal|2
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"gateway.recover_after_nodes"
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> running cluster_health (wait for the shards to startup)"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|clusterUUID
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|metaDataUuid
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
name|ClusterState
name|state
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapping
argument_list|(
literal|"type2"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|templates
argument_list|()
operator|.
name|get
argument_list|(
literal|"template_1"
argument_list|)
operator|.
name|patterns
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"te*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getAliases
argument_list|()
operator|.
name|get
argument_list|(
literal|"test_alias"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getAliases
argument_list|()
operator|.
name|get
argument_list|(
literal|"test_alias"
argument_list|)
operator|.
name|filter
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReuseInFileBasedPeerRecovery
specifier|public
name|void
name|testReuseInFileBasedPeerRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|internalCluster
argument_list|()
operator|.
name|startMasterOnlyNode
argument_list|()
expr_stmt|;
specifier|final
name|String
name|primaryNode
init|=
name|internalCluster
argument_list|()
operator|.
name|startDataOnlyNode
argument_list|(
name|nodeSettings
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// create the index with our mapping
name|client
argument_list|(
name|primaryNode
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_replicas"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> indexing docs"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1024
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|(
name|primaryNode
argument_list|)
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|client
argument_list|(
name|primaryNode
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// start the replica node; we do this after indexing so a file-based recovery is triggered to ensure the files are identical
specifier|final
name|String
name|replicaNode
init|=
name|internalCluster
argument_list|()
operator|.
name|startDataOnlyNode
argument_list|(
name|nodeSettings
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
specifier|final
name|RecoveryResponse
name|initialRecoveryReponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRecoveries
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|RecoveryState
name|recoveryState
range|:
name|initialRecoveryReponse
operator|.
name|shardRecoveryStates
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
control|)
block|{
if|if
condition|(
name|recoveryState
operator|.
name|getTargetNode
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|replicaNode
argument_list|)
condition|)
block|{
for|for
control|(
specifier|final
name|RecoveryState
operator|.
name|File
name|file
range|:
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|fileDetails
argument_list|()
control|)
block|{
name|files
operator|.
name|add
argument_list|(
name|file
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> restart replica node"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|restartNode
argument_list|(
name|replicaNode
argument_list|,
operator|new
name|RestartCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Settings
name|onNodeStopped
parameter_list|(
name|String
name|nodeName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// index some more documents; we expect to reuse the files that already exist on the replica
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1024
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|(
name|primaryNode
argument_list|)
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
comment|// prevent a sequence-number-based recovery from being possible
name|client
argument_list|(
name|primaryNode
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|onNodeStopped
argument_list|(
name|nodeName
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
specifier|final
name|RecoveryResponse
name|recoveryResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRecoveries
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|RecoveryState
name|recoveryState
range|:
name|recoveryResponse
operator|.
name|shardRecoveryStates
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
control|)
block|{
name|long
name|recovered
init|=
literal|0
decl_stmt|;
name|long
name|reused
init|=
literal|0
decl_stmt|;
name|int
name|filesRecovered
init|=
literal|0
decl_stmt|;
name|int
name|filesReused
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|RecoveryState
operator|.
name|File
name|file
range|:
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|fileDetails
argument_list|()
control|)
block|{
if|if
condition|(
name|files
operator|.
name|contains
argument_list|(
name|file
operator|.
name|name
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|recovered
operator|+=
name|file
operator|.
name|length
argument_list|()
expr_stmt|;
name|filesRecovered
operator|++
expr_stmt|;
block|}
else|else
block|{
name|reused
operator|+=
name|file
operator|.
name|length
argument_list|()
expr_stmt|;
name|filesReused
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|recoveryState
operator|.
name|getPrimary
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|recoveredBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|reusedBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|totalBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|recoveredFileCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|reusedFileCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|totalFileCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> replica shard {} recovered from {} to {}, recovered {}, reuse {}"
argument_list|,
name|recoveryState
operator|.
name|getShardId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|recoveryState
operator|.
name|getSourceNode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|recoveryState
operator|.
name|getTargetNode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|recoveredBytes
argument_list|()
argument_list|,
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|reusedBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"bytes should have been recovered"
argument_list|,
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|recoveredBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|recovered
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"data should have been reused"
argument_list|,
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|reusedBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
comment|// we have to recover the segments file since we commit the translog ID on engine startup
name|assertThat
argument_list|(
literal|"all existing files should be reused, byte count mismatch"
argument_list|,
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|reusedBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|reused
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|reusedBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|totalBytes
argument_list|()
operator|-
name|recovered
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"the segment from the last round of indexing should be recovered"
argument_list|,
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|recoveredFileCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|filesRecovered
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"all existing files should be reused, file count mismatch"
argument_list|,
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|reusedFileCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|filesReused
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|reusedFileCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|totalFileCount
argument_list|()
operator|-
name|filesRecovered
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"> 0 files should be reused"
argument_list|,
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|reusedFileCount
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"no translog ops should be recovered"
argument_list|,
name|recoveryState
operator|.
name|getTranslog
argument_list|()
operator|.
name|recoveredOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertSyncIdsNotNull
specifier|public
name|void
name|assertSyncIdsNotNull
parameter_list|()
block|{
name|IndexStats
name|indexStats
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
for|for
control|(
name|ShardStats
name|shardStats
range|:
name|indexStats
operator|.
name|getShards
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|shardStats
operator|.
name|getCommitStats
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRecoveryDifferentNodeOrderStartup
specifier|public
name|void
name|testRecoveryDifferentNodeOrderStartup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we need different data paths so we make sure we start the second node fresh
specifier|final
name|Path
name|pathNode1
init|=
name|createTempDir
argument_list|()
decl_stmt|;
specifier|final
name|String
name|node_1
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_DATA_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|pathNode1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|pathNode2
init|=
name|createTempDir
argument_list|()
decl_stmt|;
specifier|final
name|String
name|node_2
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_DATA_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|pathNode2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|long
index|[]
argument_list|>
name|primaryTerms
init|=
name|assertAndCapturePrimaryTerms
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|InternalTestCluster
operator|.
name|nameFilter
argument_list|(
name|node_1
argument_list|)
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|InternalTestCluster
operator|.
name|nameFilter
argument_list|(
name|node_2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|InternalTestCluster
operator|.
name|nameFilter
argument_list|(
name|node_2
argument_list|)
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|InternalTestCluster
operator|.
name|nameFilter
argument_list|(
name|node_1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// start the second node again
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_DATA_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|pathNode2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|primaryTerms
operator|=
name|assertAndCapturePrimaryTerms
argument_list|(
name|primaryTerms
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareExists
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testStartedShardFoundIfStateNotYetProcessed
specifier|public
name|void
name|testStartedShardFoundIfStateNotYetProcessed
parameter_list|()
throws|throws
name|Exception
block|{
comment|// nodes may need to report the shards they processed the initial recovered cluster state from the master
specifier|final
name|String
name|nodeName
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Index
name|index
init|=
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|flush
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|corrupt
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|fullRestart
argument_list|(
operator|new
name|RestartCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Settings
name|onNodeStopped
parameter_list|(
name|String
name|nodeName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// make sure state is not recovered
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|GatewayService
operator|.
name|RECOVER_AFTER_NODES_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|corrupt
condition|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|,
name|nodeName
argument_list|)
operator|.
name|availableShardPaths
argument_list|(
name|shardId
argument_list|)
control|)
block|{
specifier|final
name|Path
name|indexPath
init|=
name|path
operator|.
name|resolve
argument_list|(
name|ShardPath
operator|.
name|INDEX_FOLDER_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|indexPath
argument_list|)
condition|)
block|{
comment|// multi data path might only have one path in use
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|indexPath
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|item
range|:
name|stream
control|)
block|{
if|if
condition|(
name|item
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"segments_"
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"--> deleting [{}]"
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|DiscoveryNode
name|node
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|,
name|nodeName
argument_list|)
operator|.
name|localNode
argument_list|()
decl_stmt|;
name|TransportNodesListGatewayStartedShards
operator|.
name|NodesGatewayStartedShards
name|response
decl_stmt|;
name|response
operator|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportNodesListGatewayStartedShards
operator|.
name|class
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|TransportNodesListGatewayStartedShards
operator|.
name|Request
argument_list|(
name|shardId
argument_list|,
operator|new
name|DiscoveryNode
index|[]
block|{
name|node
block|}
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodes
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|allocationId
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|corrupt
condition|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|storeException
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|storeException
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// start another node so cluster consistency checks won't time out due to the lack of state
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

