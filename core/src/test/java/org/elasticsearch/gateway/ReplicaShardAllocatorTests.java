begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|TestShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDeciders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|SameShardAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|StoreFileMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|store
operator|.
name|TransportNodesListShardStoreMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ESAllocationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|ReplicaShardAllocatorTests
specifier|public
class|class
name|ReplicaShardAllocatorTests
extends|extends
name|ESAllocationTestCase
block|{
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|node1
specifier|private
specifier|final
name|DiscoveryNode
name|node1
init|=
name|newNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
DECL|field|node2
specifier|private
specifier|final
name|DiscoveryNode
name|node2
init|=
name|newNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
DECL|field|node3
specifier|private
specifier|final
name|DiscoveryNode
name|node3
init|=
name|newNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
DECL|field|testAllocator
specifier|private
name|TestAllocator
name|testAllocator
decl_stmt|;
annotation|@
name|Before
DECL|method|buildTestAllocator
specifier|public
name|void
name|buildTestAllocator
parameter_list|()
block|{
name|this
operator|.
name|testAllocator
operator|=
operator|new
name|TestAllocator
argument_list|()
expr_stmt|;
block|}
comment|/**      * Verifies that when we are still fetching data in an async manner, the replica shard moves to ignore unassigned.      */
DECL|method|testNoAsyncFetchData
specifier|public
name|void
name|testNoAsyncFetchData
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|onePrimaryOnNode1And1Replica
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|clean
argument_list|()
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verifies that on index creation, we don't go and fetch data, but keep the replica shard unassigned to let      * the shard allocator to allocate it. There isn't a copy around to find anyhow.      */
DECL|method|testNoAsyncFetchOnIndexCreation
specifier|public
name|void
name|testNoAsyncFetchOnIndexCreation
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|onePrimaryOnNode1And1Replica
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|INDEX_CREATED
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|clean
argument_list|()
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|testAllocator
operator|.
name|getFetchDataCalledAndClean
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verifies that for anything but index creation, fetch data ends up being called, since we need to go and try      * and find a better copy for the shard.      */
DECL|method|testAsyncFetchOnAnythingButIndexCreation
specifier|public
name|void
name|testAsyncFetchOnAnythingButIndexCreation
parameter_list|()
block|{
name|UnassignedInfo
operator|.
name|Reason
name|reason
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|complementOf
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|INDEX_CREATED
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|RoutingAllocation
name|allocation
init|=
name|onePrimaryOnNode1And1Replica
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|reason
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|clean
argument_list|()
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"failed with reason "
operator|+
name|reason
argument_list|,
name|testAllocator
operator|.
name|getFetchDataCalledAndClean
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verifies that when there is a full match (syncId and files) we allocate it to matching node.      */
DECL|method|testSimpleFullMatchAllocation
specifier|public
name|void
name|testSimpleFullMatchAllocation
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|onePrimaryOnNode1And1Replica
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|nodeToMatch
init|=
name|randomBoolean
argument_list|()
condition|?
name|node2
else|:
name|node3
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
operator|.
name|addData
argument_list|(
name|nodeToMatch
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|nodeToMatch
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verifies that when there is a sync id match but no files match, we allocate it to matching node.      */
DECL|method|testSyncIdMatch
specifier|public
name|void
name|testSyncIdMatch
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|onePrimaryOnNode1And1Replica
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|nodeToMatch
init|=
name|randomBoolean
argument_list|()
condition|?
name|node2
else|:
name|node3
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
operator|.
name|addData
argument_list|(
name|nodeToMatch
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"NO_MATCH_CHECKSUM"
argument_list|)
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|nodeToMatch
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verifies that when there is no sync id match but files match, we allocate it to matching node.      */
DECL|method|testFileChecksumMatch
specifier|public
name|void
name|testFileChecksumMatch
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|onePrimaryOnNode1And1Replica
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|nodeToMatch
init|=
name|randomBoolean
argument_list|()
condition|?
name|node2
else|:
name|node3
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
operator|.
name|addData
argument_list|(
name|nodeToMatch
argument_list|,
literal|"NO_MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|nodeToMatch
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * When we can't find primary data, but still find replica data, we go ahead and keep it unassigned      * to be allocated. This is today behavior, which relies on a primary corruption identified with      * adding a replica and having that replica actually recover and cause the corruption to be identified      * See CorruptFileTest#      */
DECL|method|testNoPrimaryData
specifier|public
name|void
name|testNoPrimaryData
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|onePrimaryOnNode1And1Replica
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node2
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verifies that when there is primary data, but no data at all on other nodes, the shard keeps      * unassigned to be allocated later on.      */
DECL|method|testNoDataForReplicaOnAnyNode
specifier|public
name|void
name|testNoDataForReplicaOnAnyNode
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|onePrimaryOnNode1And1Replica
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verifies that when there is primary data, but no matching data at all on other nodes, the shard keeps      * unassigned to be allocated later on.      */
DECL|method|testNoMatchingFilesForReplicaOnAnyNode
specifier|public
name|void
name|testNoMatchingFilesForReplicaOnAnyNode
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|onePrimaryOnNode1And1Replica
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
operator|.
name|addData
argument_list|(
name|node2
argument_list|,
literal|"NO_MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"NO_MATCH_CHECKSUM"
argument_list|)
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * When there is no decision or throttle decision across all nodes for the shard, make sure the shard      * moves to the ignore unassigned list.      */
DECL|method|testNoOrThrottleDecidersRemainsInUnassigned
specifier|public
name|void
name|testNoOrThrottleDecidersRemainsInUnassigned
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|onePrimaryOnNode1And1Replica
argument_list|(
name|randomBoolean
argument_list|()
condition|?
name|noAllocationDeciders
argument_list|()
else|:
name|throttleAllocationDeciders
argument_list|()
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
operator|.
name|addData
argument_list|(
name|node2
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests when the node to allocate to due to matching is being throttled, we move the shard to ignored      * to wait till throttling on it is done.      */
DECL|method|testThrottleWhenAllocatingToMatchingNode
specifier|public
name|void
name|testThrottleWhenAllocatingToMatchingNode
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|onePrimaryOnNode1And1Replica
argument_list|(
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|TestAllocateDecision
argument_list|(
name|Decision
operator|.
name|YES
argument_list|)
argument_list|,
operator|new
name|SameShardAllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
operator|new
name|AllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Decision
name|canAllocate
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingNode
name|node
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|node
argument_list|()
operator|.
name|equals
argument_list|(
name|node2
argument_list|)
condition|)
block|{
return|return
name|Decision
operator|.
name|THROTTLE
return|;
block|}
return|return
name|Decision
operator|.
name|YES
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
operator|.
name|addData
argument_list|(
name|node2
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDelayedAllocation
specifier|public
name|void
name|testDelayedAllocation
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|onePrimaryOnNode1And1Replica
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|NODE_LEFT
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// we sometime return empty list of files, make sure we test this as well
name|testAllocator
operator|.
name|addData
argument_list|(
name|node2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|allocation
operator|=
name|onePrimaryOnNode1And1Replica
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|NODE_LEFT
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node2
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|node2
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCancelRecoveryBetterSyncId
specifier|public
name|void
name|testCancelRecoveryBetterSyncId
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|onePrimaryOnNode1And1ReplicaRecovering
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
operator|.
name|addData
argument_list|(
name|node2
argument_list|,
literal|"NO_MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
operator|.
name|addData
argument_list|(
name|node3
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|processExistingRecoveries
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotCancellingRecoveryIfSyncedOnExistingRecovery
specifier|public
name|void
name|testNotCancellingRecoveryIfSyncedOnExistingRecovery
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|onePrimaryOnNode1And1ReplicaRecovering
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
operator|.
name|addData
argument_list|(
name|node2
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
operator|.
name|addData
argument_list|(
name|node3
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"MATCH"
else|:
literal|"NO_MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|processExistingRecoveries
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotCancellingRecovery
specifier|public
name|void
name|testNotCancellingRecovery
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|onePrimaryOnNode1And1ReplicaRecovering
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
operator|.
name|addData
argument_list|(
name|node2
argument_list|,
literal|"MATCH"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"file1"
argument_list|,
literal|10
argument_list|,
literal|"MATCH_CHECKSUM"
argument_list|)
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|processExistingRecoveries
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|onePrimaryOnNode1And1Replica
specifier|private
name|RoutingAllocation
name|onePrimaryOnNode1And1Replica
parameter_list|(
name|AllocationDeciders
name|deciders
parameter_list|)
block|{
return|return
name|onePrimaryOnNode1And1Replica
argument_list|(
name|deciders
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|CLUSTER_RECOVERED
argument_list|)
return|;
block|}
DECL|method|onePrimaryOnNode1And1Replica
specifier|private
name|RoutingAllocation
name|onePrimaryOnNode1And1Replica
parameter_list|(
name|AllocationDeciders
name|deciders
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|UnassignedInfo
operator|.
name|Reason
name|reason
parameter_list|)
block|{
name|ShardRouting
name|primaryShard
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|shardId
argument_list|,
name|node1
operator|.
name|getId
argument_list|()
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|settings
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
operator|.
name|putInSyncAllocationIds
argument_list|(
literal|0
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|primaryShard
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// mark shard as delayed if reason is NODE_LEFT
name|boolean
name|delayed
init|=
name|reason
operator|==
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|NODE_LEFT
operator|&&
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|.
name|nanos
argument_list|()
operator|>
literal|0
decl_stmt|;
name|int
name|failedAllocations
init|=
name|reason
operator|==
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|ALLOCATION_FAILED
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|addIndexShard
argument_list|(
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
name|shardId
argument_list|)
operator|.
name|addShard
argument_list|(
name|primaryShard
argument_list|)
operator|.
name|addShard
argument_list|(
name|ShardRouting
operator|.
name|newUnassigned
argument_list|(
name|shardId
argument_list|,
literal|false
argument_list|,
name|RecoverySource
operator|.
name|PeerRecoverySource
operator|.
name|INSTANCE
argument_list|,
operator|new
name|UnassignedInfo
argument_list|(
name|reason
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|failedAllocations
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|delayed
argument_list|,
name|UnassignedInfo
operator|.
name|AllocationStatus
operator|.
name|NO_ATTEMPT
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|node1
argument_list|)
operator|.
name|add
argument_list|(
name|node2
argument_list|)
operator|.
name|add
argument_list|(
name|node3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|RoutingAllocation
argument_list|(
name|deciders
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|state
argument_list|,
literal|false
argument_list|)
argument_list|,
name|state
argument_list|,
name|ClusterInfo
operator|.
name|EMPTY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|onePrimaryOnNode1And1ReplicaRecovering
specifier|private
name|RoutingAllocation
name|onePrimaryOnNode1And1ReplicaRecovering
parameter_list|(
name|AllocationDeciders
name|deciders
parameter_list|)
block|{
name|ShardRouting
name|primaryShard
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|shardId
argument_list|,
name|node1
operator|.
name|getId
argument_list|()
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
operator|.
name|putInSyncAllocationIds
argument_list|(
literal|0
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|primaryShard
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|addIndexShard
argument_list|(
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
name|shardId
argument_list|)
operator|.
name|addShard
argument_list|(
name|primaryShard
argument_list|)
operator|.
name|addShard
argument_list|(
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|shardId
argument_list|,
name|node2
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|CLUSTER_RECOVERED
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|node1
argument_list|)
operator|.
name|add
argument_list|(
name|node2
argument_list|)
operator|.
name|add
argument_list|(
name|node3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|RoutingAllocation
argument_list|(
name|deciders
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|state
argument_list|,
literal|false
argument_list|)
argument_list|,
name|state
argument_list|,
name|ClusterInfo
operator|.
name|EMPTY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|class|TestAllocator
class|class
name|TestAllocator
extends|extends
name|ReplicaShardAllocator
block|{
DECL|field|data
specifier|private
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|TransportNodesListShardStoreMetaData
operator|.
name|StoreFilesMetaData
argument_list|>
name|data
init|=
literal|null
decl_stmt|;
DECL|field|fetchDataCalled
specifier|private
name|AtomicBoolean
name|fetchDataCalled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|TestAllocator
specifier|public
name|TestAllocator
parameter_list|()
block|{
name|super
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
DECL|method|clean
specifier|public
name|void
name|clean
parameter_list|()
block|{
name|data
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|cleanWithEmptyData
specifier|public
name|void
name|cleanWithEmptyData
parameter_list|()
block|{
name|data
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|getFetchDataCalledAndClean
specifier|public
name|boolean
name|getFetchDataCalledAndClean
parameter_list|()
block|{
return|return
name|fetchDataCalled
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
return|;
block|}
DECL|method|addData
specifier|public
name|TestAllocator
name|addData
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|String
name|syncId
parameter_list|,
name|StoreFileMetaData
modifier|...
name|files
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|data
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|filesAsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|StoreFileMetaData
name|file
range|:
name|files
control|)
block|{
name|filesAsMap
operator|.
name|put
argument_list|(
name|file
operator|.
name|name
argument_list|()
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commitData
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|syncId
operator|!=
literal|null
condition|)
block|{
name|commitData
operator|.
name|put
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|put
argument_list|(
name|node
argument_list|,
operator|new
name|TransportNodesListShardStoreMetaData
operator|.
name|StoreFilesMetaData
argument_list|(
name|shardId
argument_list|,
operator|new
name|Store
operator|.
name|MetadataSnapshot
argument_list|(
name|unmodifiableMap
argument_list|(
name|filesAsMap
argument_list|)
argument_list|,
name|unmodifiableMap
argument_list|(
name|commitData
argument_list|)
argument_list|,
name|randomInt
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|fetchData
specifier|protected
name|AsyncShardFetch
operator|.
name|FetchResult
argument_list|<
name|TransportNodesListShardStoreMetaData
operator|.
name|NodeStoreFilesMetaData
argument_list|>
name|fetchData
parameter_list|(
name|ShardRouting
name|shard
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
name|fetchDataCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|TransportNodesListShardStoreMetaData
operator|.
name|NodeStoreFilesMetaData
argument_list|>
name|tData
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|tData
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|DiscoveryNode
argument_list|,
name|TransportNodesListShardStoreMetaData
operator|.
name|StoreFilesMetaData
argument_list|>
name|entry
range|:
name|data
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|tData
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|TransportNodesListShardStoreMetaData
operator|.
name|NodeStoreFilesMetaData
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|AsyncShardFetch
operator|.
name|FetchResult
argument_list|<>
argument_list|(
name|shardId
argument_list|,
name|tData
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hasInitiatedFetching
specifier|protected
name|boolean
name|hasInitiatedFetching
parameter_list|(
name|ShardRouting
name|shard
parameter_list|)
block|{
return|return
name|fetchDataCalled
operator|.
name|get
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

