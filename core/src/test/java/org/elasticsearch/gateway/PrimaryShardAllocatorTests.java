begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ESAllocationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterStateHealth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
operator|.
name|SnapshotRecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
operator|.
name|AllocationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDeciders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|ShardLockObtainFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|CLUSTER_RECOVERED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|INDEX_CREATED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|INDEX_REOPENED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_class
DECL|class|PrimaryShardAllocatorTests
specifier|public
class|class
name|PrimaryShardAllocatorTests
extends|extends
name|ESAllocationTestCase
block|{
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|node1
specifier|private
specifier|final
name|DiscoveryNode
name|node1
init|=
name|newNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
DECL|field|node2
specifier|private
specifier|final
name|DiscoveryNode
name|node2
init|=
name|newNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
DECL|field|node3
specifier|private
specifier|final
name|DiscoveryNode
name|node3
init|=
name|newNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
DECL|field|testAllocator
specifier|private
name|TestAllocator
name|testAllocator
decl_stmt|;
comment|/**      * needed due to random usage of {@link IndexMetaData#INDEX_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE_SETTING}. removed once      * shadow replicas are removed.      */
annotation|@
name|Override
DECL|method|enableWarningsCheck
specifier|protected
name|boolean
name|enableWarningsCheck
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Before
DECL|method|buildTestAllocator
specifier|public
name|void
name|buildTestAllocator
parameter_list|()
block|{
name|this
operator|.
name|testAllocator
operator|=
operator|new
name|TestAllocator
argument_list|()
expr_stmt|;
block|}
DECL|method|testNoProcessPrimaryNotAllocatedBefore
specifier|public
name|void
name|testNoProcessPrimaryNotAllocatedBefore
parameter_list|()
block|{
specifier|final
name|RoutingAllocation
name|allocation
decl_stmt|;
comment|// with old version, we can't know if a shard was allocated before or not
name|allocation
operator|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
name|randomFrom
argument_list|(
name|INDEX_CREATED
argument_list|,
name|CLUSTER_RECOVERED
argument_list|,
name|INDEX_REOPENED
argument_list|)
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when async fetch returns that there is no data, the shard will not be allocated.      */
DECL|method|testNoAsyncFetchData
specifier|public
name|void
name|testNoAsyncFetchData
parameter_list|()
block|{
specifier|final
name|RoutingAllocation
name|allocation
init|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
name|CLUSTER_RECOVERED
argument_list|,
literal|"allocId"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests when the node returns that no data was found for it (null for allocation id),      * it will be moved to ignore unassigned.      */
DECL|method|testNoAllocationFound
specifier|public
name|void
name|testNoAllocationFound
parameter_list|()
block|{
specifier|final
name|RoutingAllocation
name|allocation
init|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
name|CLUSTER_RECOVERED
argument_list|,
literal|"allocId"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests when the node returns data with a shard allocation id that does not match active allocation ids, it will be moved to ignore unassigned.      */
DECL|method|testNoMatchingAllocationIdFound
specifier|public
name|void
name|testNoMatchingAllocationIdFound
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
name|CLUSTER_RECOVERED
argument_list|,
literal|"id2"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"id1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests when the node returns that no data was found for it, it will be moved to ignore unassigned.      */
DECL|method|testStoreException
specifier|public
name|void
name|testStoreException
parameter_list|()
block|{
specifier|final
name|RoutingAllocation
name|allocation
init|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
name|CLUSTER_RECOVERED
argument_list|,
literal|"allocId1"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"allocId1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
operator|new
name|CorruptIndexException
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when the node returns a ShardLockObtainFailedException, it will be considered as a valid shard copy      */
DECL|method|testShardLockObtainFailedException
specifier|public
name|void
name|testShardLockObtainFailedException
parameter_list|()
block|{
specifier|final
name|RoutingAllocation
name|allocation
init|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
name|CLUSTER_RECOVERED
argument_list|,
literal|"allocId1"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"allocId1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
operator|new
name|ShardLockObtainFailedException
argument_list|(
name|shardId
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|node1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that allocation id is reused
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"allocId1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when one node returns a ShardLockObtainFailedException and another properly loads the store, it will      * select the second node as target      */
DECL|method|testShardLockObtainFailedExceptionPreferOtherValidCopies
specifier|public
name|void
name|testShardLockObtainFailedExceptionPreferOtherValidCopies
parameter_list|()
block|{
name|String
name|allocId1
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|String
name|allocId2
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|RoutingAllocation
name|allocation
init|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
name|CLUSTER_RECOVERED
argument_list|,
name|allocId1
argument_list|,
name|allocId2
argument_list|)
decl_stmt|;
empty_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
name|allocId1
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
operator|new
name|ShardLockObtainFailedException
argument_list|(
name|shardId
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node2
argument_list|,
name|allocId2
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|node2
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that allocation id is reused
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|allocId2
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when there is a node to allocate the shard to, it will be allocated to it.      */
DECL|method|testFoundAllocationAndAllocating
specifier|public
name|void
name|testFoundAllocationAndAllocating
parameter_list|()
block|{
specifier|final
name|RoutingAllocation
name|allocation
init|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
name|randomFrom
argument_list|(
name|CLUSTER_RECOVERED
argument_list|,
name|INDEX_REOPENED
argument_list|)
argument_list|,
literal|"allocId1"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"allocId1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|node1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that allocation id is reused
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"allocId1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when the nodes with prior copies of the given shard all return a decision of NO, but      * {@link AllocationDecider#canForceAllocatePrimary(ShardRouting, RoutingNode, RoutingAllocation)}      * returns a YES decision for at least one of those NO nodes, then we force allocate to one of them      */
DECL|method|testForceAllocatePrimary
specifier|public
name|void
name|testForceAllocatePrimary
parameter_list|()
block|{
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"allocId1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|AllocationDeciders
name|deciders
init|=
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
comment|// since the deciders return a NO decision for allocating a shard (due to the guaranteed NO decision from the second decider),
comment|// the allocator will see if it can force assign the primary, where the decision will be YES
operator|new
name|TestAllocateDecision
argument_list|(
name|randomBoolean
argument_list|()
condition|?
name|Decision
operator|.
name|YES
else|:
name|Decision
operator|.
name|NO
argument_list|)
argument_list|,
name|getNoDeciderThatAllowsForceAllocate
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RoutingAllocation
name|allocation
init|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|deciders
argument_list|,
name|CLUSTER_RECOVERED
argument_list|,
literal|"allocId1"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|node1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when the nodes with prior copies of the given shard all return a decision of NO, and      * {@link AllocationDecider#canForceAllocatePrimary(ShardRouting, RoutingNode, RoutingAllocation)}      * returns a NO or THROTTLE decision for a node, then we do not force allocate to that node.      */
DECL|method|testDontAllocateOnNoOrThrottleForceAllocationDecision
specifier|public
name|void
name|testDontAllocateOnNoOrThrottleForceAllocationDecision
parameter_list|()
block|{
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"allocId1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|forceDecisionNo
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|AllocationDeciders
name|deciders
init|=
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
comment|// since both deciders here return a NO decision for allocating a shard,
comment|// the allocator will see if it can force assign the primary, where the decision will be either NO or THROTTLE,
comment|// so the shard will remain un-initialized
operator|new
name|TestAllocateDecision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|)
argument_list|,
name|forceDecisionNo
condition|?
name|getNoDeciderThatDeniesForceAllocate
argument_list|()
else|:
name|getNoDeciderThatThrottlesForceAllocate
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RoutingAllocation
name|allocation
init|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|deciders
argument_list|,
name|CLUSTER_RECOVERED
argument_list|,
literal|"allocId1"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|ignored
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ignored
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ignored
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|unassignedInfo
argument_list|()
operator|.
name|getLastAllocationStatus
argument_list|()
argument_list|,
name|forceDecisionNo
condition|?
name|AllocationStatus
operator|.
name|DECIDERS_NO
else|:
name|AllocationStatus
operator|.
name|DECIDERS_THROTTLED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when the nodes with prior copies of the given shard return a THROTTLE decision,      * then we do not force allocate to that node but instead throttle.      */
DECL|method|testDontForceAllocateOnThrottleDecision
specifier|public
name|void
name|testDontForceAllocateOnThrottleDecision
parameter_list|()
block|{
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"allocId1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|AllocationDeciders
name|deciders
init|=
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
comment|// since we have a NO decision for allocating a shard (because the second decider returns a NO decision),
comment|// the allocator will see if it can force assign the primary, and in this case,
comment|// the TestAllocateDecision's decision for force allocating is to THROTTLE (using
comment|// the default behavior) so despite the other decider's decision to return YES for
comment|// force allocating the shard, we still THROTTLE due to the decision from TestAllocateDecision
operator|new
name|TestAllocateDecision
argument_list|(
name|Decision
operator|.
name|THROTTLE
argument_list|)
argument_list|,
name|getNoDeciderThatAllowsForceAllocate
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RoutingAllocation
name|allocation
init|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|deciders
argument_list|,
name|CLUSTER_RECOVERED
argument_list|,
literal|"allocId1"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|ignored
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ignored
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ignored
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|unassignedInfo
argument_list|()
operator|.
name|getLastAllocationStatus
argument_list|()
argument_list|,
name|AllocationStatus
operator|.
name|DECIDERS_THROTTLED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when there was a node that previously had the primary, it will be allocated to that same node again.      */
DECL|method|testPreferAllocatingPreviousPrimary
specifier|public
name|void
name|testPreferAllocatingPreviousPrimary
parameter_list|()
block|{
name|String
name|primaryAllocId
init|=
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
decl_stmt|;
name|String
name|replicaAllocId
init|=
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
decl_stmt|;
name|RoutingAllocation
name|allocation
init|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
name|randomFrom
argument_list|(
name|CLUSTER_RECOVERED
argument_list|,
name|INDEX_REOPENED
argument_list|)
argument_list|,
name|primaryAllocId
argument_list|,
name|replicaAllocId
argument_list|)
decl_stmt|;
name|boolean
name|node1HasPrimaryShard
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
name|node1HasPrimaryShard
condition|?
name|primaryAllocId
else|:
name|replicaAllocId
argument_list|,
name|node1HasPrimaryShard
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node2
argument_list|,
name|node1HasPrimaryShard
condition|?
name|replicaAllocId
else|:
name|primaryAllocId
argument_list|,
operator|!
name|node1HasPrimaryShard
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|DiscoveryNode
name|allocatedNode
init|=
name|node1HasPrimaryShard
condition|?
name|node1
else|:
name|node2
decl_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|allocatedNode
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when there is a node to allocate to, but it is throttling (and it is the only one),      * it will be moved to ignore unassigned until it can be allocated to.      */
DECL|method|testFoundAllocationButThrottlingDecider
specifier|public
name|void
name|testFoundAllocationButThrottlingDecider
parameter_list|()
block|{
specifier|final
name|RoutingAllocation
name|allocation
init|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|throttleAllocationDeciders
argument_list|()
argument_list|,
name|CLUSTER_RECOVERED
argument_list|,
literal|"allocId1"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"allocId1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when there is a node to be allocated to, but it the decider said "no", we still      * force the allocation to it.      */
DECL|method|testFoundAllocationButNoDecider
specifier|public
name|void
name|testFoundAllocationButNoDecider
parameter_list|()
block|{
specifier|final
name|RoutingAllocation
name|allocation
init|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|noAllocationDeciders
argument_list|()
argument_list|,
name|CLUSTER_RECOVERED
argument_list|,
literal|"allocId1"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"allocId1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
empty_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|node1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when restoring from a snapshot and we find a node with a shard copy and allocation      * deciders say yes, we allocate to that node.      */
DECL|method|testRestore
specifier|public
name|void
name|testRestore
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|getRestoreRoutingAllocation
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
literal|"allocId"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"some allocId"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when restoring from a snapshot and we find a node with a shard copy and allocation      * deciders say throttle, we add it to ignored shards.      */
DECL|method|testRestoreThrottle
specifier|public
name|void
name|testRestoreThrottle
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|getRestoreRoutingAllocation
argument_list|(
name|throttleAllocationDeciders
argument_list|()
argument_list|,
literal|"allocId"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"some allocId"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when restoring from a snapshot and we find a node with a shard copy but allocation      * deciders say no, we still allocate to that node.      */
DECL|method|testRestoreForcesAllocateIfShardAvailable
specifier|public
name|void
name|testRestoreForcesAllocateIfShardAvailable
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|getRestoreRoutingAllocation
argument_list|(
name|noAllocationDeciders
argument_list|()
argument_list|,
literal|"allocId"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"some allocId"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when restoring from a snapshot and we don't find a node with a shard copy, the shard will remain in      * the unassigned list to be allocated later.      */
DECL|method|testRestoreDoesNotAssignIfNoShardAvailable
specifier|public
name|void
name|testRestoreDoesNotAssignIfNoShardAvailable
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|getRestoreRoutingAllocation
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
literal|"allocId"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
expr_stmt|;
block|}
DECL|method|getRestoreRoutingAllocation
specifier|private
name|RoutingAllocation
name|getRestoreRoutingAllocation
parameter_list|(
name|AllocationDeciders
name|allocationDeciders
parameter_list|,
name|String
modifier|...
name|allocIds
parameter_list|)
block|{
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
operator|.
name|putInSyncAllocationIds
argument_list|(
literal|0
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|allocIds
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Snapshot
name|snapshot
init|=
operator|new
name|Snapshot
argument_list|(
literal|"test"
argument_list|,
operator|new
name|SnapshotId
argument_list|(
literal|"test"
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsRestore
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
operator|new
name|SnapshotRecoverySource
argument_list|(
name|snapshot
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|node1
argument_list|)
operator|.
name|add
argument_list|(
name|node2
argument_list|)
operator|.
name|add
argument_list|(
name|node3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|RoutingAllocation
argument_list|(
name|allocationDeciders
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|state
argument_list|,
literal|false
argument_list|)
argument_list|,
name|state
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Tests that when recovering using "recover_on_any_node" and we find a node with a shard copy and allocation      * deciders say yes, we allocate to that node.      */
DECL|method|testRecoverOnAnyNode
specifier|public
name|void
name|testRecoverOnAnyNode
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|getRecoverOnAnyNodeRoutingAllocation
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
literal|"allocId"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"allocId"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|RED
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when recovering using "recover_on_any_node" and we find a node with a shard copy and allocation      * deciders say throttle, we add it to ignored shards.      */
DECL|method|testRecoverOnAnyNodeThrottle
specifier|public
name|void
name|testRecoverOnAnyNodeThrottle
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|getRecoverOnAnyNodeRoutingAllocation
argument_list|(
name|throttleAllocationDeciders
argument_list|()
argument_list|,
literal|"allocId"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"allocId"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when recovering using "recover_on_any_node" and we find a node with a shard copy but allocation      * deciders say no, we still allocate to that node.      */
DECL|method|testRecoverOnAnyNodeForcesAllocateIfShardAvailable
specifier|public
name|void
name|testRecoverOnAnyNodeForcesAllocateIfShardAvailable
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|getRecoverOnAnyNodeRoutingAllocation
argument_list|(
name|noAllocationDeciders
argument_list|()
argument_list|,
literal|"allocId"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|"allocId"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|RED
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when recovering using "recover_on_any_node" and we don't find a node with a shard copy we let      * BalancedShardAllocator assign the shard      */
DECL|method|testRecoverOnAnyNodeDoesNotAssignIfNoShardAvailable
specifier|public
name|void
name|testRecoverOnAnyNodeDoesNotAssignIfNoShardAvailable
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|getRecoverOnAnyNodeRoutingAllocation
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
literal|"allocId"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodesChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterHealthStatus
argument_list|(
name|allocation
argument_list|,
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
expr_stmt|;
block|}
DECL|method|getRecoverOnAnyNodeRoutingAllocation
specifier|private
name|RoutingAllocation
name|getRecoverOnAnyNodeRoutingAllocation
parameter_list|(
name|AllocationDeciders
name|allocationDeciders
parameter_list|,
name|String
modifier|...
name|allocIds
parameter_list|)
block|{
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHARED_FILESYSTEM
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
operator|.
name|putInSyncAllocationIds
argument_list|(
literal|0
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|allocIds
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsRestore
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
operator|new
name|SnapshotRecoverySource
argument_list|(
operator|new
name|Snapshot
argument_list|(
literal|"test"
argument_list|,
operator|new
name|SnapshotId
argument_list|(
literal|"test"
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|node1
argument_list|)
operator|.
name|add
argument_list|(
name|node2
argument_list|)
operator|.
name|add
argument_list|(
name|node3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|RoutingAllocation
argument_list|(
name|allocationDeciders
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|state
argument_list|,
literal|false
argument_list|)
argument_list|,
name|state
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|routingAllocationWithOnePrimaryNoReplicas
specifier|private
name|RoutingAllocation
name|routingAllocationWithOnePrimaryNoReplicas
parameter_list|(
name|AllocationDeciders
name|deciders
parameter_list|,
name|UnassignedInfo
operator|.
name|Reason
name|reason
parameter_list|,
name|String
modifier|...
name|activeAllocationIds
parameter_list|)
block|{
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
operator|.
name|putInSyncAllocationIds
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|activeAllocationIds
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
operator|.
name|Builder
name|routingTableBuilder
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|reason
condition|)
block|{
case|case
name|INDEX_CREATED
case|:
name|routingTableBuilder
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|CLUSTER_RECOVERED
case|:
name|routingTableBuilder
operator|.
name|addAsRecovery
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|INDEX_REOPENED
case|:
name|routingTableBuilder
operator|.
name|addAsFromCloseToOpen
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can't do "
operator|+
name|reason
operator|+
literal|" for you. teach me"
argument_list|)
throw|;
block|}
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTableBuilder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|node1
argument_list|)
operator|.
name|add
argument_list|(
name|node2
argument_list|)
operator|.
name|add
argument_list|(
name|node3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|RoutingAllocation
argument_list|(
name|deciders
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|state
argument_list|,
literal|false
argument_list|)
argument_list|,
name|state
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|assertClusterHealthStatus
specifier|private
name|void
name|assertClusterHealthStatus
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|,
name|ClusterHealthStatus
name|expectedStatus
parameter_list|)
block|{
name|RoutingTable
name|oldRoutingTable
init|=
name|allocation
operator|.
name|routingTable
argument_list|()
decl_stmt|;
name|RoutingNodes
name|newRoutingNodes
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
specifier|final
name|RoutingTable
name|newRoutingTable
init|=
operator|new
name|RoutingTable
operator|.
name|Builder
argument_list|()
operator|.
name|updateNodes
argument_list|(
name|oldRoutingTable
operator|.
name|version
argument_list|()
argument_list|,
name|newRoutingNodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"test-cluster"
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|(
name|newRoutingTable
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterStateHealth
name|clusterStateHealth
init|=
operator|new
name|ClusterStateHealth
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|clusterStateHealth
operator|.
name|getStatus
argument_list|()
operator|.
name|ordinal
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|expectedStatus
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getNoDeciderThatAllowsForceAllocate
specifier|private
name|AllocationDecider
name|getNoDeciderThatAllowsForceAllocate
parameter_list|()
block|{
return|return
name|getNoDeciderWithForceAllocate
argument_list|(
name|Decision
operator|.
name|YES
argument_list|)
return|;
block|}
DECL|method|getNoDeciderThatThrottlesForceAllocate
specifier|private
name|AllocationDecider
name|getNoDeciderThatThrottlesForceAllocate
parameter_list|()
block|{
return|return
name|getNoDeciderWithForceAllocate
argument_list|(
name|Decision
operator|.
name|THROTTLE
argument_list|)
return|;
block|}
DECL|method|getNoDeciderThatDeniesForceAllocate
specifier|private
name|AllocationDecider
name|getNoDeciderThatDeniesForceAllocate
parameter_list|()
block|{
return|return
name|getNoDeciderWithForceAllocate
argument_list|(
name|Decision
operator|.
name|NO
argument_list|)
return|;
block|}
DECL|method|getNoDeciderWithForceAllocate
specifier|private
name|AllocationDecider
name|getNoDeciderWithForceAllocate
parameter_list|(
specifier|final
name|Decision
name|forceAllocateDecision
parameter_list|)
block|{
return|return
operator|new
name|TestAllocateDecision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Decision
name|canForceAllocatePrimary
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingNode
name|node
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
assert|assert
name|shardRouting
operator|.
name|primary
argument_list|()
operator|:
literal|"cannot force allocate a non-primary shard "
operator|+
name|shardRouting
assert|;
return|return
name|forceAllocateDecision
return|;
block|}
block|}
return|;
block|}
DECL|class|TestAllocator
class|class
name|TestAllocator
extends|extends
name|PrimaryShardAllocator
block|{
DECL|field|data
specifier|private
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|TransportNodesListGatewayStartedShards
operator|.
name|NodeGatewayStartedShards
argument_list|>
name|data
decl_stmt|;
DECL|method|TestAllocator
name|TestAllocator
parameter_list|()
block|{
name|super
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
DECL|method|clear
specifier|public
name|TestAllocator
name|clear
parameter_list|()
block|{
name|data
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addData
specifier|public
name|TestAllocator
name|addData
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|String
name|allocationId
parameter_list|,
name|boolean
name|primary
parameter_list|)
block|{
return|return
name|addData
argument_list|(
name|node
argument_list|,
name|allocationId
argument_list|,
name|primary
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|addData
specifier|public
name|TestAllocator
name|addData
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|String
name|allocationId
parameter_list|,
name|boolean
name|primary
parameter_list|,
annotation|@
name|Nullable
name|Exception
name|storeException
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|data
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|data
operator|.
name|put
argument_list|(
name|node
argument_list|,
operator|new
name|TransportNodesListGatewayStartedShards
operator|.
name|NodeGatewayStartedShards
argument_list|(
name|node
argument_list|,
name|allocationId
argument_list|,
name|primary
argument_list|,
name|storeException
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|fetchData
specifier|protected
name|AsyncShardFetch
operator|.
name|FetchResult
argument_list|<
name|TransportNodesListGatewayStartedShards
operator|.
name|NodeGatewayStartedShards
argument_list|>
name|fetchData
parameter_list|(
name|ShardRouting
name|shard
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
return|return
operator|new
name|AsyncShardFetch
operator|.
name|FetchResult
argument_list|<>
argument_list|(
name|shardId
argument_list|,
name|data
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

