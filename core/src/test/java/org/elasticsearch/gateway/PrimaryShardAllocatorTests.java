begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|SnapshotId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RestoreSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDeciders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardStateMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESAllocationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|PrimaryShardAllocatorTests
specifier|public
class|class
name|PrimaryShardAllocatorTests
extends|extends
name|ESAllocationTestCase
block|{
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|node1
specifier|private
specifier|final
name|DiscoveryNode
name|node1
init|=
name|newNode
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
DECL|field|node2
specifier|private
specifier|final
name|DiscoveryNode
name|node2
init|=
name|newNode
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
DECL|field|node3
specifier|private
specifier|final
name|DiscoveryNode
name|node3
init|=
name|newNode
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
DECL|field|testAllocator
specifier|private
name|TestAllocator
name|testAllocator
decl_stmt|;
annotation|@
name|Before
DECL|method|buildTestAllocator
specifier|public
name|void
name|buildTestAllocator
parameter_list|()
block|{
name|this
operator|.
name|testAllocator
operator|=
operator|new
name|TestAllocator
argument_list|()
expr_stmt|;
block|}
DECL|method|testNoProcessPrimaryNotAllocatedBefore
specifier|public
name|void
name|testNoProcessPrimaryNotAllocatedBefore
parameter_list|()
block|{
specifier|final
name|RoutingAllocation
name|allocation
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|allocation
operator|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allocation
operator|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Version
operator|.
name|V_2_1_0
argument_list|)
expr_stmt|;
block|}
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when async fetch returns that there is no data, the shard will not be allocated.      */
DECL|method|testNoAsyncFetchData
specifier|public
name|void
name|testNoAsyncFetchData
parameter_list|()
block|{
specifier|final
name|RoutingAllocation
name|allocation
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|allocation
operator|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
literal|"allocId"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allocation
operator|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Version
operator|.
name|V_2_1_0
argument_list|)
expr_stmt|;
block|}
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests when the node returns that no data was found for it ({@link ShardStateMetaData#NO_VERSION} for version and null for allocation id),      * it will be moved to ignore unassigned.      */
DECL|method|testNoAllocationFound
specifier|public
name|void
name|testNoAllocationFound
parameter_list|()
block|{
specifier|final
name|RoutingAllocation
name|allocation
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|allocation
operator|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
literal|"allocId"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allocation
operator|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Version
operator|.
name|V_2_1_0
argument_list|)
expr_stmt|;
block|}
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
name|ShardStateMetaData
operator|.
name|NO_VERSION
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests when the node returns data with a shard allocation id that does not match active allocation ids, it will be moved to ignore unassigned.      */
DECL|method|testNoMatchingAllocationIdFound
specifier|public
name|void
name|testNoMatchingAllocationIdFound
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
literal|"id2"
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
name|ShardStateMetaData
operator|.
name|NO_VERSION
argument_list|,
literal|"id1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when there is a node to allocate the shard to, and there are no active allocation ids, it will be allocated to it.      * This is the case when we have old shards from pre-3.0 days.      */
DECL|method|testNoActiveAllocationIds
specifier|public
name|void
name|testNoActiveAllocationIds
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Version
operator|.
name|V_2_1_1
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|node1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests when the node returns that no data was found for it, it will be moved to ignore unassigned.      */
DECL|method|testStoreException
specifier|public
name|void
name|testStoreException
parameter_list|()
block|{
specifier|final
name|RoutingAllocation
name|allocation
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|allocation
operator|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
literal|false
argument_list|,
name|randomFrom
argument_list|(
name|Version
operator|.
name|V_2_0_0
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
literal|"allocId1"
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
name|ShardStateMetaData
operator|.
name|NO_VERSION
argument_list|,
literal|"allocId1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
operator|new
name|CorruptIndexException
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allocation
operator|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Version
operator|.
name|V_2_1_1
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
operator|new
name|CorruptIndexException
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when there is a node to allocate the shard to, it will be allocated to it.      */
DECL|method|testFoundAllocationAndAllocating
specifier|public
name|void
name|testFoundAllocationAndAllocating
parameter_list|()
block|{
specifier|final
name|RoutingAllocation
name|allocation
decl_stmt|;
name|boolean
name|useAllocationIds
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|useAllocationIds
condition|)
block|{
name|allocation
operator|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
literal|false
argument_list|,
name|randomFrom
argument_list|(
name|Version
operator|.
name|V_2_0_0
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
literal|"allocId1"
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
name|ShardStateMetaData
operator|.
name|NO_VERSION
argument_list|,
literal|"allocId1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allocation
operator|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Version
operator|.
name|V_2_2_0
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|node1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|useAllocationIds
condition|)
block|{
comment|// check that allocation id is reused
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"allocId1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Tests that when there was a node that previously had the primary, it will be allocated to that same node again.      */
DECL|method|testPreferAllocatingPreviousPrimary
specifier|public
name|void
name|testPreferAllocatingPreviousPrimary
parameter_list|()
block|{
name|String
name|primaryAllocId
init|=
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
decl_stmt|;
name|String
name|replicaAllocId
init|=
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
decl_stmt|;
name|RoutingAllocation
name|allocation
init|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
literal|false
argument_list|,
name|randomFrom
argument_list|(
name|Version
operator|.
name|V_2_0_0
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
name|primaryAllocId
argument_list|,
name|replicaAllocId
argument_list|)
decl_stmt|;
name|boolean
name|node1HasPrimaryShard
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
name|ShardStateMetaData
operator|.
name|NO_VERSION
argument_list|,
name|node1HasPrimaryShard
condition|?
name|primaryAllocId
else|:
name|replicaAllocId
argument_list|,
name|node1HasPrimaryShard
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node2
argument_list|,
name|ShardStateMetaData
operator|.
name|NO_VERSION
argument_list|,
name|node1HasPrimaryShard
condition|?
name|replicaAllocId
else|:
name|primaryAllocId
argument_list|,
operator|!
name|node1HasPrimaryShard
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|DiscoveryNode
name|allocatedNode
init|=
name|node1HasPrimaryShard
condition|?
name|node1
else|:
name|node2
decl_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|allocatedNode
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when there is a node to allocate to, but it is throttling (and it is the only one),      * it will be moved to ignore unassigned until it can be allocated to.      */
DECL|method|testFoundAllocationButThrottlingDecider
specifier|public
name|void
name|testFoundAllocationButThrottlingDecider
parameter_list|()
block|{
specifier|final
name|RoutingAllocation
name|allocation
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|allocation
operator|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|throttleAllocationDeciders
argument_list|()
argument_list|,
literal|false
argument_list|,
name|randomFrom
argument_list|(
name|Version
operator|.
name|V_2_0_0
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
literal|"allocId1"
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
name|ShardStateMetaData
operator|.
name|NO_VERSION
argument_list|,
literal|"allocId1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allocation
operator|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|throttleAllocationDeciders
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Version
operator|.
name|V_2_2_0
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when there is a node to be allocated to, but it the decider said "no", we still      * force the allocation to it.      */
DECL|method|testFoundAllocationButNoDecider
specifier|public
name|void
name|testFoundAllocationButNoDecider
parameter_list|()
block|{
specifier|final
name|RoutingAllocation
name|allocation
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|allocation
operator|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|noAllocationDeciders
argument_list|()
argument_list|,
literal|false
argument_list|,
name|randomFrom
argument_list|(
name|Version
operator|.
name|V_2_0_0
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
literal|"allocId1"
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
name|ShardStateMetaData
operator|.
name|NO_VERSION
argument_list|,
literal|"allocId1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allocation
operator|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|noAllocationDeciders
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Version
operator|.
name|V_2_0_0
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|node1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that the highest version node is chosen for allocation.      */
DECL|method|testAllocateToTheHighestVersionOnLegacyIndex
specifier|public
name|void
name|testAllocateToTheHighestVersionOnLegacyIndex
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Version
operator|.
name|V_2_0_0
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|addData
argument_list|(
name|node2
argument_list|,
literal|12
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|node2
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that shard with allocation id is chosen if such a shard is available in version-based allocation mode. This happens if a shard      * was already selected in a 5.x cluster as primary for recovery, was initialized (and wrote a new state file) but did not make it to      * STARTED state before the cluster crashed (otherwise list of active allocation ids would be non-empty and allocation id - based      * allocation mode would be chosen).      */
DECL|method|testVersionBasedAllocationPrefersShardWithAllocationId
specifier|public
name|void
name|testVersionBasedAllocationPrefersShardWithAllocationId
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|routingAllocationWithOnePrimaryNoReplicas
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Version
operator|.
name|V_2_0_0
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node2
argument_list|,
name|ShardStateMetaData
operator|.
name|NO_VERSION
argument_list|,
literal|"some allocId"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node3
argument_list|,
literal|12
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|node2
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"some allocId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when restoring from a snapshot and we find a node with a shard copy and allocation      * deciders say yes, we allocate to that node.      */
DECL|method|testRestore
specifier|public
name|void
name|testRestore
parameter_list|()
block|{
name|boolean
name|shardStateHasAllocationId
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|String
name|allocationId
init|=
name|shardStateHasAllocationId
condition|?
literal|"some allocId"
else|:
literal|null
decl_stmt|;
name|long
name|legacyVersion
init|=
name|shardStateHasAllocationId
condition|?
name|ShardStateMetaData
operator|.
name|NO_VERSION
else|:
literal|1
decl_stmt|;
name|boolean
name|clusterHasActiveAllocationIds
init|=
name|shardStateHasAllocationId
condition|?
name|randomBoolean
argument_list|()
else|:
literal|false
decl_stmt|;
name|RoutingAllocation
name|allocation
init|=
name|getRestoreRoutingAllocation
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
name|clusterHasActiveAllocationIds
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
name|legacyVersion
argument_list|,
name|allocationId
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when restoring from a snapshot and we find a node with a shard copy and allocation      * deciders say throttle, we add it to ignored shards.      */
DECL|method|testRestoreThrottle
specifier|public
name|void
name|testRestoreThrottle
parameter_list|()
block|{
name|boolean
name|shardStateHasAllocationId
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|String
name|allocationId
init|=
name|shardStateHasAllocationId
condition|?
literal|"some allocId"
else|:
literal|null
decl_stmt|;
name|long
name|legacyVersion
init|=
name|shardStateHasAllocationId
condition|?
name|ShardStateMetaData
operator|.
name|NO_VERSION
else|:
literal|1
decl_stmt|;
name|boolean
name|clusterHasActiveAllocationIds
init|=
name|shardStateHasAllocationId
condition|?
name|randomBoolean
argument_list|()
else|:
literal|false
decl_stmt|;
name|RoutingAllocation
name|allocation
init|=
name|getRestoreRoutingAllocation
argument_list|(
name|throttleAllocationDeciders
argument_list|()
argument_list|,
name|clusterHasActiveAllocationIds
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
name|legacyVersion
argument_list|,
name|allocationId
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when restoring from a snapshot and we find a node with a shard copy but allocation      * deciders say no, we still allocate to that node.      */
DECL|method|testRestoreForcesAllocateIfShardAvailable
specifier|public
name|void
name|testRestoreForcesAllocateIfShardAvailable
parameter_list|()
block|{
name|boolean
name|shardStateHasAllocationId
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|String
name|allocationId
init|=
name|shardStateHasAllocationId
condition|?
literal|"some allocId"
else|:
literal|null
decl_stmt|;
name|long
name|legacyVersion
init|=
name|shardStateHasAllocationId
condition|?
name|ShardStateMetaData
operator|.
name|NO_VERSION
else|:
literal|1
decl_stmt|;
name|boolean
name|clusterHasActiveAllocationIds
init|=
name|shardStateHasAllocationId
condition|?
name|randomBoolean
argument_list|()
else|:
literal|false
decl_stmt|;
name|RoutingAllocation
name|allocation
init|=
name|getRestoreRoutingAllocation
argument_list|(
name|noAllocationDeciders
argument_list|()
argument_list|,
name|clusterHasActiveAllocationIds
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
name|legacyVersion
argument_list|,
name|allocationId
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when restoring from a snapshot and we don't find a node with a shard copy, the shard will remain in      * the unassigned list to be allocated later.      */
DECL|method|testRestoreDoesNotAssignIfNoShardAvailable
specifier|public
name|void
name|testRestoreDoesNotAssignIfNoShardAvailable
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|getRestoreRoutingAllocation
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
name|ShardStateMetaData
operator|.
name|NO_VERSION
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getRestoreRoutingAllocation
specifier|private
name|RoutingAllocation
name|getRestoreRoutingAllocation
parameter_list|(
name|AllocationDeciders
name|allocationDeciders
parameter_list|,
name|boolean
name|hasActiveAllocation
parameter_list|)
block|{
name|Version
name|version
init|=
name|hasActiveAllocation
condition|?
name|Version
operator|.
name|CURRENT
else|:
name|Version
operator|.
name|V_2_0_0
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|version
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
operator|.
name|putActiveAllocationIds
argument_list|(
literal|0
argument_list|,
name|hasActiveAllocation
condition|?
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"allocId"
argument_list|)
else|:
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsRestore
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
operator|new
name|RestoreSource
argument_list|(
operator|new
name|SnapshotId
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|version
argument_list|,
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|node1
argument_list|)
operator|.
name|put
argument_list|(
name|node2
argument_list|)
operator|.
name|put
argument_list|(
name|node3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|RoutingAllocation
argument_list|(
name|allocationDeciders
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|state
argument_list|,
literal|false
argument_list|)
argument_list|,
name|state
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Tests that when recovering using "recover_on_any_node" and we find a node with a shard copy and allocation      * deciders say yes, we allocate to that node.      */
DECL|method|testRecoverOnAnyNode
specifier|public
name|void
name|testRecoverOnAnyNode
parameter_list|()
block|{
name|boolean
name|hasActiveAllocation
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|String
name|allocationId
init|=
name|hasActiveAllocation
condition|?
literal|"allocId"
else|:
literal|null
decl_stmt|;
name|long
name|legacyVersion
init|=
name|hasActiveAllocation
condition|?
name|ShardStateMetaData
operator|.
name|NO_VERSION
else|:
literal|1
decl_stmt|;
name|RoutingAllocation
name|allocation
init|=
name|getRecoverOnAnyNodeRoutingAllocation
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
name|hasActiveAllocation
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
name|legacyVersion
argument_list|,
name|allocationId
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when recovering using "recover_on_any_node" and we find a node with a shard copy and allocation      * deciders say throttle, we add it to ignored shards.      */
DECL|method|testRecoverOnAnyNodeThrottle
specifier|public
name|void
name|testRecoverOnAnyNodeThrottle
parameter_list|()
block|{
name|boolean
name|hasActiveAllocation
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|String
name|allocationId
init|=
name|hasActiveAllocation
condition|?
literal|"allocId"
else|:
literal|null
decl_stmt|;
name|long
name|legacyVersion
init|=
name|hasActiveAllocation
condition|?
name|ShardStateMetaData
operator|.
name|NO_VERSION
else|:
literal|1
decl_stmt|;
name|RoutingAllocation
name|allocation
init|=
name|getRecoverOnAnyNodeRoutingAllocation
argument_list|(
name|throttleAllocationDeciders
argument_list|()
argument_list|,
name|hasActiveAllocation
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
name|legacyVersion
argument_list|,
name|allocationId
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when recovering using "recover_on_any_node" and we find a node with a shard copy but allocation      * deciders say no, we still allocate to that node.      */
DECL|method|testRecoverOnAnyNodeForcesAllocateIfShardAvailable
specifier|public
name|void
name|testRecoverOnAnyNodeForcesAllocateIfShardAvailable
parameter_list|()
block|{
name|boolean
name|hasActiveAllocation
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|String
name|allocationId
init|=
name|hasActiveAllocation
condition|?
literal|"allocId"
else|:
literal|null
decl_stmt|;
name|long
name|legacyVersion
init|=
name|hasActiveAllocation
condition|?
name|ShardStateMetaData
operator|.
name|NO_VERSION
else|:
literal|1
decl_stmt|;
name|RoutingAllocation
name|allocation
init|=
name|getRecoverOnAnyNodeRoutingAllocation
argument_list|(
name|noAllocationDeciders
argument_list|()
argument_list|,
name|hasActiveAllocation
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
name|legacyVersion
argument_list|,
name|allocationId
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when recovering using "recover_on_any_node" and we don't find a node with a shard copy we let      * BalancedShardAllocator assign the shard      */
DECL|method|testRecoverOnAnyNodeDoesNotAssignIfNoShardAvailable
specifier|public
name|void
name|testRecoverOnAnyNodeDoesNotAssignIfNoShardAvailable
parameter_list|()
block|{
name|RoutingAllocation
name|allocation
init|=
name|getRecoverOnAnyNodeRoutingAllocation
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
name|ShardStateMetaData
operator|.
name|NO_VERSION
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getRecoverOnAnyNodeRoutingAllocation
specifier|private
name|RoutingAllocation
name|getRecoverOnAnyNodeRoutingAllocation
parameter_list|(
name|AllocationDeciders
name|allocationDeciders
parameter_list|,
name|boolean
name|hasActiveAllocation
parameter_list|)
block|{
name|Version
name|version
init|=
name|hasActiveAllocation
condition|?
name|Version
operator|.
name|CURRENT
else|:
name|Version
operator|.
name|V_2_0_0
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|version
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHARED_FILESYSTEM
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
operator|.
name|putActiveAllocationIds
argument_list|(
literal|0
argument_list|,
name|hasActiveAllocation
condition|?
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"allocId"
argument_list|)
else|:
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsRestore
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
operator|new
name|RestoreSource
argument_list|(
operator|new
name|SnapshotId
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|node1
argument_list|)
operator|.
name|put
argument_list|(
name|node2
argument_list|)
operator|.
name|put
argument_list|(
name|node3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|RoutingAllocation
argument_list|(
name|allocationDeciders
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|state
argument_list|,
literal|false
argument_list|)
argument_list|,
name|state
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Tests that only when enough copies of the shard exists we are going to allocate it. This test      * verifies that with same version (1), and quorum allocation.      */
DECL|method|testEnoughCopiesFoundForAllocationOnLegacyIndex
specifier|public
name|void
name|testEnoughCopiesFoundForAllocationOnLegacyIndex
parameter_list|()
block|{
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|V_2_0_0
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsRecovery
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|node1
argument_list|)
operator|.
name|put
argument_list|(
name|node2
argument_list|)
operator|.
name|put
argument_list|(
name|node3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingAllocation
name|allocation
init|=
operator|new
name|RoutingAllocation
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|state
argument_list|,
literal|false
argument_list|)
argument_list|,
name|state
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// replicas
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|allocation
operator|=
operator|new
name|RoutingAllocation
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|state
argument_list|,
literal|false
argument_list|)
argument_list|,
name|state
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|changed
operator|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// replicas
name|testAllocator
operator|.
name|addData
argument_list|(
name|node2
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|allocation
operator|=
operator|new
name|RoutingAllocation
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|state
argument_list|,
literal|false
argument_list|)
argument_list|,
name|state
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|changed
operator|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// replicas
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
name|node2
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|node1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that only when enough copies of the shard exists we are going to allocate it. This test      * verifies that even with different version, we treat different versions as a copy, and count them.      */
DECL|method|testEnoughCopiesFoundForAllocationOnLegacyIndexWithDifferentVersion
specifier|public
name|void
name|testEnoughCopiesFoundForAllocationOnLegacyIndexWithDifferentVersion
parameter_list|()
block|{
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|V_2_0_0
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsRecovery
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|node1
argument_list|)
operator|.
name|put
argument_list|(
name|node2
argument_list|)
operator|.
name|put
argument_list|(
name|node3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingAllocation
name|allocation
init|=
operator|new
name|RoutingAllocation
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|state
argument_list|,
literal|false
argument_list|)
argument_list|,
name|state
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// replicas
name|testAllocator
operator|.
name|addData
argument_list|(
name|node1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|allocation
operator|=
operator|new
name|RoutingAllocation
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|state
argument_list|,
literal|false
argument_list|)
argument_list|,
name|state
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|changed
operator|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// replicas
name|testAllocator
operator|.
name|addData
argument_list|(
name|node2
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|allocation
operator|=
operator|new
name|RoutingAllocation
argument_list|(
name|yesAllocationDeciders
argument_list|()
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|state
argument_list|,
literal|false
argument_list|)
argument_list|,
name|state
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|changed
operator|=
name|testAllocator
operator|.
name|allocateUnassigned
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changed
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|ignored
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// replicas
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|node2
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|routingAllocationWithOnePrimaryNoReplicas
specifier|private
name|RoutingAllocation
name|routingAllocationWithOnePrimaryNoReplicas
parameter_list|(
name|AllocationDeciders
name|deciders
parameter_list|,
name|boolean
name|asNew
parameter_list|,
name|Version
name|version
parameter_list|,
name|String
modifier|...
name|activeAllocationIds
parameter_list|)
block|{
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|version
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
operator|.
name|putActiveAllocationIds
argument_list|(
literal|0
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|activeAllocationIds
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
operator|.
name|Builder
name|routingTableBuilder
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|asNew
condition|)
block|{
name|routingTableBuilder
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|routingTableBuilder
operator|.
name|addAsRecovery
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTableBuilder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|node1
argument_list|)
operator|.
name|put
argument_list|(
name|node2
argument_list|)
operator|.
name|put
argument_list|(
name|node3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|RoutingAllocation
argument_list|(
name|deciders
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|state
argument_list|,
literal|false
argument_list|)
argument_list|,
name|state
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|class|TestAllocator
class|class
name|TestAllocator
extends|extends
name|PrimaryShardAllocator
block|{
DECL|field|data
specifier|private
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|TransportNodesListGatewayStartedShards
operator|.
name|NodeGatewayStartedShards
argument_list|>
name|data
decl_stmt|;
DECL|method|TestAllocator
specifier|public
name|TestAllocator
parameter_list|()
block|{
name|super
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
DECL|method|clear
specifier|public
name|TestAllocator
name|clear
parameter_list|()
block|{
name|data
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addData
specifier|public
name|TestAllocator
name|addData
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|long
name|version
parameter_list|,
name|String
name|allocationId
parameter_list|,
name|boolean
name|primary
parameter_list|)
block|{
return|return
name|addData
argument_list|(
name|node
argument_list|,
name|version
argument_list|,
name|allocationId
argument_list|,
name|primary
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|addData
specifier|public
name|TestAllocator
name|addData
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|long
name|version
parameter_list|,
name|String
name|allocationId
parameter_list|,
name|boolean
name|primary
parameter_list|,
annotation|@
name|Nullable
name|Throwable
name|storeException
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|data
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|data
operator|.
name|put
argument_list|(
name|node
argument_list|,
operator|new
name|TransportNodesListGatewayStartedShards
operator|.
name|NodeGatewayStartedShards
argument_list|(
name|node
argument_list|,
name|version
argument_list|,
name|allocationId
argument_list|,
name|primary
argument_list|,
name|storeException
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|fetchData
specifier|protected
name|AsyncShardFetch
operator|.
name|FetchResult
argument_list|<
name|TransportNodesListGatewayStartedShards
operator|.
name|NodeGatewayStartedShards
argument_list|>
name|fetchData
parameter_list|(
name|ShardRouting
name|shard
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
return|return
operator|new
name|AsyncShardFetch
operator|.
name|FetchResult
argument_list|<>
argument_list|(
name|shardId
argument_list|,
name|data
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

