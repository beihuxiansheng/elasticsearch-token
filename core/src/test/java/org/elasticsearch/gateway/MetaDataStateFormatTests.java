begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ChecksumIndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockDirectoryWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|SimpleFSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|startsWith
import|;
end_import

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressFileSystems
argument_list|(
literal|"ExtrasFS"
argument_list|)
comment|// TODO: fix test to work with ExtrasFS
DECL|class|MetaDataStateFormatTests
specifier|public
class|class
name|MetaDataStateFormatTests
extends|extends
name|ESTestCase
block|{
comment|/**      * Ensure we can read a pre-generated cluster state.      */
DECL|method|testReadClusterState
specifier|public
name|void
name|testReadClusterState
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
specifier|final
name|MetaDataStateFormat
argument_list|<
name|MetaData
argument_list|>
name|format
init|=
operator|new
name|MetaDataStateFormat
argument_list|<
name|MetaData
argument_list|>
argument_list|(
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
literal|"global-"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|MetaData
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|fail
argument_list|(
literal|"this test doesn't write"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MetaData
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|MetaData
operator|.
name|Builder
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Path
name|tmp
init|=
name|createTempDir
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|resource
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"global-3.st"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|resource
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|tmp
operator|.
name|resolve
argument_list|(
literal|"global-3.st"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|resource
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|MetaData
name|read
init|=
name|format
operator|.
name|read
argument_list|(
name|dst
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|read
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|read
operator|.
name|clusterUUID
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"3O1tDF1IRB6fSJ-GrTMUtg"
argument_list|)
argument_list|)
expr_stmt|;
comment|// indices are empty since they are serialized separately
block|}
DECL|method|testReadWriteState
specifier|public
name|void
name|testReadWriteState
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
index|[]
name|dirs
init|=
operator|new
name|Path
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
name|createTempDir
argument_list|()
expr_stmt|;
block|}
specifier|final
name|long
name|id
init|=
name|addDummyFiles
argument_list|(
literal|"foo-"
argument_list|,
name|dirs
argument_list|)
decl_stmt|;
name|Format
name|format
init|=
operator|new
name|Format
argument_list|(
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
literal|"foo-"
argument_list|)
decl_stmt|;
name|DummyState
name|state
init|=
operator|new
name|DummyState
argument_list|(
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|randomInt
argument_list|()
argument_list|,
name|randomLong
argument_list|()
argument_list|,
name|randomDouble
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|version
init|=
name|between
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|/
literal|2
argument_list|)
decl_stmt|;
name|format
operator|.
name|write
argument_list|(
name|state
argument_list|,
name|version
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|file
range|:
name|dirs
control|)
block|{
name|Path
index|[]
name|list
init|=
name|content
argument_list|(
literal|"*"
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
index|[
literal|0
index|]
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|stateDir
init|=
name|list
index|[
literal|0
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|stateDir
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|content
argument_list|(
literal|"foo-*"
argument_list|,
name|stateDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
index|[
literal|0
index|]
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo-"
operator|+
name|id
operator|+
literal|".st"
argument_list|)
argument_list|)
expr_stmt|;
name|DummyState
name|read
init|=
name|format
operator|.
name|read
argument_list|(
name|list
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|read
argument_list|,
name|equalTo
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|version2
init|=
name|between
argument_list|(
name|version
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|DummyState
name|state2
init|=
operator|new
name|DummyState
argument_list|(
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|randomInt
argument_list|()
argument_list|,
name|randomLong
argument_list|()
argument_list|,
name|randomDouble
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|format
operator|.
name|write
argument_list|(
name|state2
argument_list|,
name|version2
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|file
range|:
name|dirs
control|)
block|{
name|Path
index|[]
name|list
init|=
name|content
argument_list|(
literal|"*"
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
index|[
literal|0
index|]
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|stateDir
init|=
name|list
index|[
literal|0
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|stateDir
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|content
argument_list|(
literal|"foo-*"
argument_list|,
name|stateDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
index|[
literal|0
index|]
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo-"
operator|+
operator|(
name|id
operator|+
literal|1
operator|)
operator|+
literal|".st"
argument_list|)
argument_list|)
expr_stmt|;
name|DummyState
name|read
init|=
name|format
operator|.
name|read
argument_list|(
name|list
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|read
argument_list|,
name|equalTo
argument_list|(
name|state2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testVersionMismatch
specifier|public
name|void
name|testVersionMismatch
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
index|[]
name|dirs
init|=
operator|new
name|Path
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
name|createTempDir
argument_list|()
expr_stmt|;
block|}
specifier|final
name|long
name|id
init|=
name|addDummyFiles
argument_list|(
literal|"foo-"
argument_list|,
name|dirs
argument_list|)
decl_stmt|;
name|Format
name|format
init|=
operator|new
name|Format
argument_list|(
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
literal|"foo-"
argument_list|)
decl_stmt|;
name|DummyState
name|state
init|=
operator|new
name|DummyState
argument_list|(
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|randomInt
argument_list|()
argument_list|,
name|randomLong
argument_list|()
argument_list|,
name|randomDouble
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|version
init|=
name|between
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|/
literal|2
argument_list|)
decl_stmt|;
name|format
operator|.
name|write
argument_list|(
name|state
argument_list|,
name|version
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|file
range|:
name|dirs
control|)
block|{
name|Path
index|[]
name|list
init|=
name|content
argument_list|(
literal|"*"
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
index|[
literal|0
index|]
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|stateDir
init|=
name|list
index|[
literal|0
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|stateDir
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|content
argument_list|(
literal|"foo-*"
argument_list|,
name|stateDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
index|[
literal|0
index|]
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo-"
operator|+
name|id
operator|+
literal|".st"
argument_list|)
argument_list|)
expr_stmt|;
name|DummyState
name|read
init|=
name|format
operator|.
name|read
argument_list|(
name|list
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|read
argument_list|,
name|equalTo
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCorruption
specifier|public
name|void
name|testCorruption
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
index|[]
name|dirs
init|=
operator|new
name|Path
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
name|createTempDir
argument_list|()
expr_stmt|;
block|}
specifier|final
name|long
name|id
init|=
name|addDummyFiles
argument_list|(
literal|"foo-"
argument_list|,
name|dirs
argument_list|)
decl_stmt|;
name|Format
name|format
init|=
operator|new
name|Format
argument_list|(
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
literal|"foo-"
argument_list|)
decl_stmt|;
name|DummyState
name|state
init|=
operator|new
name|DummyState
argument_list|(
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|randomInt
argument_list|()
argument_list|,
name|randomLong
argument_list|()
argument_list|,
name|randomDouble
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|version
init|=
name|between
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|/
literal|2
argument_list|)
decl_stmt|;
name|format
operator|.
name|write
argument_list|(
name|state
argument_list|,
name|version
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|file
range|:
name|dirs
control|)
block|{
name|Path
index|[]
name|list
init|=
name|content
argument_list|(
literal|"*"
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
index|[
literal|0
index|]
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|stateDir
init|=
name|list
index|[
literal|0
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|stateDir
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|content
argument_list|(
literal|"foo-*"
argument_list|,
name|stateDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
index|[
literal|0
index|]
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo-"
operator|+
name|id
operator|+
literal|".st"
argument_list|)
argument_list|)
expr_stmt|;
name|DummyState
name|read
init|=
name|format
operator|.
name|read
argument_list|(
name|list
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|read
argument_list|,
name|equalTo
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
comment|// now corrupt it
name|corruptFile
argument_list|(
name|list
index|[
literal|0
index|]
argument_list|,
name|logger
argument_list|)
expr_stmt|;
try|try
block|{
name|format
operator|.
name|read
argument_list|(
name|list
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"corrupted file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptStateException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
DECL|method|corruptFile
specifier|public
specifier|static
name|void
name|corruptFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|fileToCorrupt
init|=
name|file
decl_stmt|;
try|try
init|(
specifier|final
name|SimpleFSDirectory
name|dir
init|=
operator|new
name|SimpleFSDirectory
argument_list|(
name|fileToCorrupt
operator|.
name|getParent
argument_list|()
argument_list|)
init|)
block|{
name|long
name|checksumBeforeCorruption
decl_stmt|;
try|try
init|(
name|IndexInput
name|input
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|fileToCorrupt
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|checksumBeforeCorruption
operator|=
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|FileChannel
name|raf
init|=
name|FileChannel
operator|.
name|open
argument_list|(
name|fileToCorrupt
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
init|)
block|{
name|raf
operator|.
name|position
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|raf
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|filePointer
init|=
name|raf
operator|.
name|position
argument_list|()
decl_stmt|;
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|raf
operator|.
name|read
argument_list|(
name|bb
argument_list|)
expr_stmt|;
name|bb
operator|.
name|flip
argument_list|()
expr_stmt|;
name|byte
name|oldValue
init|=
name|bb
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
name|newValue
init|=
operator|(
name|byte
operator|)
operator|~
name|oldValue
decl_stmt|;
name|bb
operator|.
name|put
argument_list|(
literal|0
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|raf
operator|.
name|write
argument_list|(
name|bb
argument_list|,
name|filePointer
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Corrupting file {} --  flipping at position {} from {} to {} "
argument_list|,
name|fileToCorrupt
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|filePointer
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|oldValue
argument_list|)
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|checksumAfterCorruption
decl_stmt|;
name|long
name|actualChecksumAfterCorruption
decl_stmt|;
try|try
init|(
name|ChecksumIndexInput
name|input
init|=
name|dir
operator|.
name|openChecksumInput
argument_list|(
name|fileToCorrupt
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|input
operator|.
name|getFilePointer
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|.
name|seek
argument_list|(
name|input
operator|.
name|length
argument_list|()
operator|-
literal|8
argument_list|)
expr_stmt|;
comment|// one long is the checksum... 8 bytes
name|checksumAfterCorruption
operator|=
name|input
operator|.
name|getChecksum
argument_list|()
expr_stmt|;
name|actualChecksumAfterCorruption
operator|=
name|input
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Checksum before: ["
argument_list|)
operator|.
name|append
argument_list|(
name|checksumBeforeCorruption
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" after: ["
argument_list|)
operator|.
name|append
argument_list|(
name|checksumAfterCorruption
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" checksum value after corruption: "
argument_list|)
operator|.
name|append
argument_list|(
name|actualChecksumAfterCorruption
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" file: "
argument_list|)
operator|.
name|append
argument_list|(
name|fileToCorrupt
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" length: "
argument_list|)
operator|.
name|append
argument_list|(
name|dir
operator|.
name|fileLength
argument_list|(
name|fileToCorrupt
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
literal|"Checksum collision - "
operator|+
name|msg
operator|.
name|toString
argument_list|()
argument_list|,
name|checksumAfterCorruption
operator|!=
name|checksumBeforeCorruption
comment|// collision
operator|||
name|actualChecksumAfterCorruption
operator|!=
name|checksumBeforeCorruption
argument_list|)
expr_stmt|;
comment|// checksum corrupted
block|}
block|}
comment|// If the latest version doesn't use the legacy format while previous versions do, then fail hard
DECL|method|testLatestVersionDoesNotUseLegacy
specifier|public
name|void
name|testLatestVersionDoesNotUseLegacy
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ToXContent
operator|.
name|Params
name|params
init|=
name|ToXContent
operator|.
name|EMPTY_PARAMS
decl_stmt|;
name|MetaDataStateFormat
argument_list|<
name|MetaData
argument_list|>
name|format
init|=
name|MetaStateService
operator|.
name|globalStateFormat
argument_list|(
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|params
argument_list|)
decl_stmt|;
specifier|final
name|Path
index|[]
name|dirs
init|=
operator|new
name|Path
index|[
literal|2
index|]
decl_stmt|;
name|dirs
index|[
literal|0
index|]
operator|=
name|createTempDir
argument_list|()
expr_stmt|;
name|dirs
index|[
literal|1
index|]
operator|=
name|createTempDir
argument_list|()
expr_stmt|;
for|for
control|(
name|Path
name|dir
range|:
name|dirs
control|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|dir1
init|=
name|randomFrom
argument_list|(
name|dirs
argument_list|)
decl_stmt|;
specifier|final
name|int
name|v1
init|=
name|randomInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// write a first state file in the new format
name|format
operator|.
name|write
argument_list|(
name|randomMeta
argument_list|()
argument_list|,
name|v1
argument_list|,
name|dir1
argument_list|)
expr_stmt|;
comment|// write older state files in the old format but with a newer version
specifier|final
name|int
name|numLegacyFiles
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLegacyFiles
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|Path
name|dir2
init|=
name|randomFrom
argument_list|(
name|dirs
argument_list|)
decl_stmt|;
specifier|final
name|int
name|v2
init|=
name|v1
operator|+
literal|1
operator|+
name|randomInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
try|try
init|(
name|XContentBuilder
name|xcontentBuilder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|format
operator|.
name|format
argument_list|()
argument_list|,
name|Files
operator|.
name|newOutputStream
argument_list|(
name|dir2
operator|.
name|resolve
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
operator|.
name|resolve
argument_list|(
name|MetaStateService
operator|.
name|GLOBAL_STATE_FILE_PREFIX
operator|+
name|v2
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|xcontentBuilder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|MetaData
operator|.
name|Builder
operator|.
name|toXContent
argument_list|(
name|randomMeta
argument_list|()
argument_list|,
name|xcontentBuilder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|xcontentBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|format
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"latest version can not be read"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"Could not find a state file to recover from among "
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// write the next state file in the new format and ensure it get's a higher ID
specifier|final
name|MetaData
name|meta
init|=
name|randomMeta
argument_list|()
decl_stmt|;
name|format
operator|.
name|write
argument_list|(
name|meta
argument_list|,
name|v1
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
specifier|final
name|MetaData
name|metaData
init|=
name|format
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|dirs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|clusterUUID
argument_list|()
argument_list|,
name|metaData
operator|.
name|clusterUUID
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|path
init|=
name|randomFrom
argument_list|(
name|dirs
argument_list|)
decl_stmt|;
specifier|final
name|Path
index|[]
name|files
init|=
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|path
operator|.
name|resolve
argument_list|(
literal|"_state"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"global-"
operator|+
name|format
operator|.
name|findMaxStateId
argument_list|(
literal|"global-"
argument_list|,
name|dirs
argument_list|)
operator|+
literal|".st"
argument_list|,
name|files
index|[
literal|0
index|]
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// If both the legacy and the new format are available for the latest version, prefer the new format
DECL|method|testPrefersNewerFormat
specifier|public
name|void
name|testPrefersNewerFormat
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ToXContent
operator|.
name|Params
name|params
init|=
name|ToXContent
operator|.
name|EMPTY_PARAMS
decl_stmt|;
name|MetaDataStateFormat
argument_list|<
name|MetaData
argument_list|>
name|format
init|=
name|MetaStateService
operator|.
name|globalStateFormat
argument_list|(
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|params
argument_list|)
decl_stmt|;
specifier|final
name|Path
index|[]
name|dirs
init|=
operator|new
name|Path
index|[
literal|2
index|]
decl_stmt|;
name|dirs
index|[
literal|0
index|]
operator|=
name|createTempDir
argument_list|()
expr_stmt|;
name|dirs
index|[
literal|1
index|]
operator|=
name|createTempDir
argument_list|()
expr_stmt|;
for|for
control|(
name|Path
name|dir
range|:
name|dirs
control|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|dir
operator|.
name|resolve
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|v
init|=
name|randomInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|MetaData
name|meta
init|=
name|randomMeta
argument_list|()
decl_stmt|;
name|String
name|uuid
init|=
name|meta
operator|.
name|clusterUUID
argument_list|()
decl_stmt|;
comment|// write a first state file in the old format
specifier|final
name|Path
name|dir2
init|=
name|randomFrom
argument_list|(
name|dirs
argument_list|)
decl_stmt|;
name|MetaData
name|meta2
init|=
name|randomMeta
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|meta2
operator|.
name|clusterUUID
argument_list|()
operator|.
name|equals
argument_list|(
name|uuid
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|XContentBuilder
name|xcontentBuilder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|format
operator|.
name|format
argument_list|()
argument_list|,
name|Files
operator|.
name|newOutputStream
argument_list|(
name|dir2
operator|.
name|resolve
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
operator|.
name|resolve
argument_list|(
name|MetaStateService
operator|.
name|GLOBAL_STATE_FILE_PREFIX
operator|+
name|v
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|xcontentBuilder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|MetaData
operator|.
name|Builder
operator|.
name|toXContent
argument_list|(
name|randomMeta
argument_list|()
argument_list|,
name|xcontentBuilder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|xcontentBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
comment|// write a second state file in the new format but with the same version
name|format
operator|.
name|write
argument_list|(
name|meta
argument_list|,
name|v
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
name|MetaData
name|state
init|=
name|format
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|dirs
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path
init|=
name|randomFrom
argument_list|(
name|dirs
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|path
operator|.
name|resolve
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"global-"
operator|+
operator|(
name|v
operator|+
literal|1
operator|)
operator|+
literal|".st"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|state
operator|.
name|clusterUUID
argument_list|()
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
block|}
DECL|method|testLoadState
specifier|public
name|void
name|testLoadState
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ToXContent
operator|.
name|Params
name|params
init|=
name|ToXContent
operator|.
name|EMPTY_PARAMS
decl_stmt|;
specifier|final
name|Path
index|[]
name|dirs
init|=
operator|new
name|Path
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
index|]
decl_stmt|;
name|int
name|numStates
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|int
name|numLegacy
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|numStates
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MetaData
argument_list|>
name|meta
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numStates
condition|;
name|i
operator|++
control|)
block|{
name|meta
operator|.
name|add
argument_list|(
name|randomMeta
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Path
argument_list|>
name|corruptedFiles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|MetaDataStateFormat
argument_list|<
name|MetaData
argument_list|>
name|format
init|=
name|MetaStateService
operator|.
name|globalStateFormat
argument_list|(
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|params
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
name|createTempDir
argument_list|()
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|dirs
index|[
name|i
index|]
operator|.
name|resolve
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numLegacy
condition|;
name|j
operator|++
control|)
block|{
name|XContentType
name|type
init|=
name|format
operator|.
name|format
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
operator|&&
operator|(
name|j
argument_list|<
name|numStates
operator|-
literal|1
operator|||
name|dirs
operator|.
name|length
argument_list|>
literal|0
operator|&&
name|i
operator|!=
literal|0
operator|)
condition|)
block|{
name|Path
name|file
init|=
name|dirs
index|[
name|i
index|]
operator|.
name|resolve
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"global-"
operator|+
name|j
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|// randomly create 0-byte files -- there is extra logic to skip them
block|}
else|else
block|{
try|try
init|(
name|XContentBuilder
name|xcontentBuilder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|type
argument_list|,
name|Files
operator|.
name|newOutputStream
argument_list|(
name|dirs
index|[
name|i
index|]
operator|.
name|resolve
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"global-"
operator|+
name|j
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|xcontentBuilder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|MetaData
operator|.
name|Builder
operator|.
name|toXContent
argument_list|(
name|meta
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|,
name|xcontentBuilder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|xcontentBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|j
init|=
name|numLegacy
init|;
name|j
operator|<
name|numStates
condition|;
name|j
operator|++
control|)
block|{
name|format
operator|.
name|write
argument_list|(
name|meta
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|,
name|j
argument_list|,
name|dirs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
operator|&&
operator|(
name|j
argument_list|<
name|numStates
operator|-
literal|1
operator|||
name|dirs
operator|.
name|length
argument_list|>
literal|0
operator|&&
name|i
operator|!=
literal|0
operator|)
condition|)
block|{
comment|// corrupt a file that we do not necessarily need here....
name|Path
name|file
init|=
name|dirs
index|[
name|i
index|]
operator|.
name|resolve
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"global-"
operator|+
name|j
operator|+
literal|".st"
argument_list|)
decl_stmt|;
name|corruptedFiles
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|MetaDataStateFormatTests
operator|.
name|corruptFile
argument_list|(
name|file
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|dirList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|dirs
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|dirList
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|MetaData
name|loadedMetaData
init|=
name|format
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|dirList
operator|.
name|toArray
argument_list|(
operator|new
name|Path
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|MetaData
name|latestMetaData
init|=
name|meta
operator|.
name|get
argument_list|(
name|numStates
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|loadedMetaData
operator|.
name|clusterUUID
argument_list|()
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
literal|"_na_"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loadedMetaData
operator|.
name|clusterUUID
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|latestMetaData
operator|.
name|clusterUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|indices
init|=
name|loadedMetaData
operator|.
name|indices
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|indices
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|latestMetaData
operator|.
name|indices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexMetaData
name|original
range|:
name|latestMetaData
control|)
block|{
name|IndexMetaData
name|deserialized
init|=
name|indices
operator|.
name|get
argument_list|(
name|original
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deserialized
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deserialized
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|original
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deserialized
operator|.
name|getNumberOfReplicas
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|original
operator|.
name|getNumberOfReplicas
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deserialized
operator|.
name|getNumberOfShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|original
operator|.
name|getNumberOfShards
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// now corrupt all the latest ones and make sure we fail to load the state
if|if
condition|(
name|numStates
operator|>
name|numLegacy
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|file
init|=
name|dirs
index|[
name|i
index|]
operator|.
name|resolve
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"global-"
operator|+
operator|(
name|numStates
operator|-
literal|1
operator|)
operator|+
literal|".st"
argument_list|)
decl_stmt|;
if|if
condition|(
name|corruptedFiles
operator|.
name|contains
argument_list|(
name|file
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|MetaDataStateFormatTests
operator|.
name|corruptFile
argument_list|(
name|file
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|format
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|dirList
operator|.
name|toArray
argument_list|(
operator|new
name|Path
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"latest version can not be read"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ExceptionsHelper
operator|.
name|unwrap
argument_list|(
name|ex
argument_list|,
name|CorruptIndexException
operator|.
name|class
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|randomMeta
specifier|private
name|MetaData
name|randomMeta
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|numIndices
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
decl_stmt|;
name|mdBuilder
operator|.
name|generateClusterUuidIfNeeded
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIndices
condition|;
name|i
operator|++
control|)
block|{
name|mdBuilder
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
operator|+
literal|"idx-"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mdBuilder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|indexBuilder
specifier|private
name|IndexMetaData
operator|.
name|Builder
name|indexBuilder
parameter_list|(
name|String
name|index
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|index
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|class|Format
specifier|private
class|class
name|Format
extends|extends
name|MetaDataStateFormat
argument_list|<
name|DummyState
argument_list|>
block|{
DECL|method|Format
name|Format
parameter_list|(
name|XContentType
name|format
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|super
argument_list|(
name|format
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|void
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|DummyState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|state
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fromXContent
specifier|public
name|DummyState
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DummyState
argument_list|()
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newDirectory
specifier|protected
name|Directory
name|newDirectory
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|MockDirectoryWrapper
name|mock
init|=
operator|new
name|MockDirectoryWrapper
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|super
operator|.
name|newDirectory
argument_list|(
name|dir
argument_list|)
argument_list|)
decl_stmt|;
name|closeAfterSuite
argument_list|(
name|mock
argument_list|)
expr_stmt|;
return|return
name|mock
return|;
block|}
block|}
DECL|class|DummyState
specifier|private
specifier|static
class|class
name|DummyState
implements|implements
name|ToXContent
block|{
DECL|field|string
name|String
name|string
decl_stmt|;
DECL|field|aInt
name|int
name|aInt
decl_stmt|;
DECL|field|aLong
name|long
name|aLong
decl_stmt|;
DECL|field|aDouble
name|double
name|aDouble
decl_stmt|;
DECL|field|aBoolean
name|boolean
name|aBoolean
decl_stmt|;
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DummyState{"
operator|+
literal|"string='"
operator|+
name|string
operator|+
literal|'\''
operator|+
literal|", aInt="
operator|+
name|aInt
operator|+
literal|", aLong="
operator|+
name|aLong
operator|+
literal|", aDouble="
operator|+
name|aDouble
operator|+
literal|", aBoolean="
operator|+
name|aBoolean
operator|+
literal|'}'
return|;
block|}
DECL|method|DummyState
specifier|public
name|DummyState
parameter_list|(
name|String
name|string
parameter_list|,
name|int
name|aInt
parameter_list|,
name|long
name|aLong
parameter_list|,
name|double
name|aDouble
parameter_list|,
name|boolean
name|aBoolean
parameter_list|)
block|{
name|this
operator|.
name|string
operator|=
name|string
expr_stmt|;
name|this
operator|.
name|aInt
operator|=
name|aInt
expr_stmt|;
name|this
operator|.
name|aLong
operator|=
name|aLong
expr_stmt|;
name|this
operator|.
name|aDouble
operator|=
name|aDouble
expr_stmt|;
name|this
operator|.
name|aBoolean
operator|=
name|aBoolean
expr_stmt|;
block|}
DECL|method|DummyState
specifier|public
name|DummyState
parameter_list|()
block|{          }
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"string"
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"int"
argument_list|,
name|aInt
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"long"
argument_list|,
name|aLong
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"double"
argument_list|,
name|aDouble
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"boolean"
argument_list|,
name|aBoolean
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|DummyState
name|that
init|=
operator|(
name|DummyState
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|aBoolean
operator|!=
name|that
operator|.
name|aBoolean
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|that
operator|.
name|aDouble
argument_list|,
name|aDouble
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|aInt
operator|!=
name|that
operator|.
name|aInt
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|aLong
operator|!=
name|that
operator|.
name|aLong
condition|)
return|return
literal|false
return|;
return|return
name|string
operator|.
name|equals
argument_list|(
name|that
operator|.
name|string
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
decl_stmt|;
name|long
name|temp
decl_stmt|;
name|result
operator|=
name|string
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|aInt
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|Long
operator|.
name|hashCode
argument_list|(
name|aLong
argument_list|)
expr_stmt|;
name|temp
operator|=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|aDouble
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|Long
operator|.
name|hashCode
argument_list|(
name|temp
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|aBoolean
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|parse
specifier|public
name|DummyState
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fieldName
init|=
literal|null
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// start object
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|fieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|assertTrue
argument_list|(
literal|"string"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
name|string
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
switch|switch
condition|(
name|fieldName
condition|)
block|{
case|case
literal|"double"
case|:
name|aDouble
operator|=
name|parser
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"int"
case|:
name|aInt
operator|=
name|parser
operator|.
name|intValue
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"long"
case|:
name|aLong
operator|=
name|parser
operator|.
name|longValue
argument_list|()
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"unexpected numeric value "
operator|+
name|token
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_BOOLEAN
condition|)
block|{
name|assertTrue
argument_list|(
literal|"boolean"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
name|aBoolean
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"unexpected value "
operator|+
name|token
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
block|}
DECL|method|content
specifier|public
name|Path
index|[]
name|content
parameter_list|(
name|String
name|glob
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|dir
argument_list|,
name|glob
argument_list|)
init|)
block|{
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|stream
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|toArray
argument_list|(
name|length
lambda|->
operator|new
name|Path
index|[
name|length
index|]
argument_list|)
return|;
block|}
block|}
DECL|method|addDummyFiles
specifier|public
name|long
name|addDummyFiles
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Path
modifier|...
name|paths
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|realId
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|Path
name|stateDir
init|=
name|path
operator|.
name|resolve
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|stateDir
argument_list|)
expr_stmt|;
name|String
name|actualPrefix
init|=
name|prefix
decl_stmt|;
name|int
name|id
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|actualPrefix
operator|=
literal|"dummy-"
expr_stmt|;
block|}
else|else
block|{
name|realId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|realId
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|OutputStream
name|stream
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|stateDir
operator|.
name|resolve
argument_list|(
name|actualPrefix
operator|+
name|id
operator|+
name|MetaDataStateFormat
operator|.
name|STATE_FILE_EXTENSION
argument_list|)
argument_list|)
init|)
block|{
name|stream
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|realId
operator|+
literal|1
return|;
block|}
block|}
end_class

end_unit

