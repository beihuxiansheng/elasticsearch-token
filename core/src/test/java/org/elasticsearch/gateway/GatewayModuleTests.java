begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|ModuleTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_class
DECL|class|GatewayModuleTests
specifier|public
class|class
name|GatewayModuleTests
extends|extends
name|ModuleTestCase
block|{
DECL|method|testCustomGateway
specifier|public
name|void
name|testCustomGateway
parameter_list|()
block|{
name|GatewayModule
name|gatewayModule
init|=
operator|new
name|GatewayModule
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|GatewayModule
operator|.
name|GATEWAY_TYPE_KEY
argument_list|,
literal|"mock"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|gatewayModule
operator|.
name|registerGatewayType
argument_list|(
literal|"mock"
argument_list|,
name|MockGateway
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertBinding
argument_list|(
name|gatewayModule
argument_list|,
name|Gateway
operator|.
name|class
argument_list|,
name|MockGateway
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultGateway
specifier|public
name|void
name|testDefaultGateway
parameter_list|()
block|{
name|GatewayModule
name|gatewayModule
init|=
operator|new
name|GatewayModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|assertBinding
argument_list|(
name|gatewayModule
argument_list|,
name|Gateway
operator|.
name|class
argument_list|,
name|Gateway
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|class|MockGateway
specifier|public
specifier|static
class|class
name|MockGateway
extends|extends
name|Gateway
block|{
annotation|@
name|Inject
DECL|method|MockGateway
specifier|public
name|MockGateway
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|NodeEnvironment
name|nodeEnv
parameter_list|,
name|GatewayMetaState
name|metaState
parameter_list|,
name|TransportNodesListGatewayMetaState
name|listGatewayMetaState
parameter_list|,
name|ClusterName
name|clusterName
parameter_list|,
name|Discovery
name|discovery
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|clusterService
argument_list|,
name|nodeEnv
argument_list|,
name|metaState
argument_list|,
name|listGatewayMetaState
argument_list|,
name|clusterName
argument_list|,
name|discovery
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

