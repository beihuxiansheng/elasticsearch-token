begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.env
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|env
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|IndexSettingsModule
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|arrayWithSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|empty
import|;
end_import

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressFileSystems
argument_list|(
literal|"ExtrasFS"
argument_list|)
comment|// TODO: fix test to allow extras
DECL|class|NodeEnvironmentTests
specifier|public
class|class
name|NodeEnvironmentTests
extends|extends
name|ESTestCase
block|{
DECL|field|idxSettings
specifier|private
specifier|final
name|IndexSettings
name|idxSettings
init|=
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
literal|"foo"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
DECL|method|testNodeLockSillySettings
specifier|public
name|void
name|testNodeLockSillySettings
parameter_list|()
block|{
try|try
block|{
name|NodeEnvironment
operator|.
name|MAX_LOCAL_STORAGE_NODES_SETTING
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|NodeEnvironment
operator|.
name|MAX_LOCAL_STORAGE_NODES_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|between
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"must be>= 1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Even though its silly MAXINT nodes is a-ok!
name|int
name|value
init|=
name|between
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|int
name|max
init|=
name|NodeEnvironment
operator|.
name|MAX_LOCAL_STORAGE_NODES_SETTING
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|NodeEnvironment
operator|.
name|MAX_LOCAL_STORAGE_NODES_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
DECL|method|testNodeLockSingleEnvironment
specifier|public
name|void
name|testNodeLockSingleEnvironment
parameter_list|()
throws|throws
name|IOException
block|{
name|NodeEnvironment
name|env
init|=
name|newNodeEnvironment
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|NodeEnvironment
operator|.
name|MAX_LOCAL_STORAGE_NODES_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|env
operator|.
name|getSettings
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dataPaths
init|=
name|Environment
operator|.
name|PATH_DATA_SETTING
operator|.
name|get
argument_list|(
name|env
operator|.
name|getSettings
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Reuse the same location and attempt to lock again
operator|new
name|NodeEnvironment
argument_list|(
name|settings
argument_list|,
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"env has already locked all the data directories it is allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Failed to obtain node lock"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Close the environment that holds the lock and make sure we can get the lock after release
name|env
operator|.
name|close
argument_list|()
expr_stmt|;
name|env
operator|=
operator|new
name|NodeEnvironment
argument_list|(
name|settings
argument_list|,
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|nodeDataPaths
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
name|dataPaths
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataPaths
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|env
operator|.
name|nodeDataPaths
argument_list|()
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
name|dataPaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|env
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|lockedShards
argument_list|()
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"System.out.*"
argument_list|)
DECL|method|testSegmentInfosTracing
specifier|public
name|void
name|testSegmentInfosTracing
parameter_list|()
block|{
comment|// Defaults to not hooking up std out
name|assertNull
argument_list|(
name|SegmentInfos
operator|.
name|getInfoStream
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// False means don't hook up std out
name|NodeEnvironment
operator|.
name|applySegmentInfosTrace
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|NodeEnvironment
operator|.
name|ENABLE_LUCENE_SEGMENT_INFOS_TRACE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|SegmentInfos
operator|.
name|getInfoStream
argument_list|()
argument_list|)
expr_stmt|;
comment|// But true means hook std out up statically
name|NodeEnvironment
operator|.
name|applySegmentInfosTrace
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|NodeEnvironment
operator|.
name|ENABLE_LUCENE_SEGMENT_INFOS_TRACE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|SegmentInfos
operator|.
name|getInfoStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Clean up after ourselves
name|SegmentInfos
operator|.
name|setInfoStream
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNodeLockMultipleEnvironment
specifier|public
name|void
name|testNodeLockMultipleEnvironment
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|NodeEnvironment
name|first
init|=
name|newNodeEnvironment
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dataPaths
init|=
name|Environment
operator|.
name|PATH_DATA_SETTING
operator|.
name|get
argument_list|(
name|first
operator|.
name|getSettings
argument_list|()
argument_list|)
decl_stmt|;
name|NodeEnvironment
name|second
init|=
operator|new
name|NodeEnvironment
argument_list|(
name|first
operator|.
name|getSettings
argument_list|()
argument_list|,
operator|new
name|Environment
argument_list|(
name|first
operator|.
name|getSettings
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|first
operator|.
name|nodeDataPaths
argument_list|()
operator|.
name|length
argument_list|,
name|dataPaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|second
operator|.
name|nodeDataPaths
argument_list|()
operator|.
name|length
argument_list|,
name|dataPaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataPaths
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|first
operator|.
name|nodeDataPaths
argument_list|()
index|[
name|i
index|]
operator|.
name|getParent
argument_list|()
argument_list|,
name|second
operator|.
name|nodeDataPaths
argument_list|()
index|[
name|i
index|]
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
expr_stmt|;
block|}
DECL|method|testShardLock
specifier|public
name|void
name|testShardLock
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|NodeEnvironment
name|env
init|=
name|newNodeEnvironment
argument_list|()
decl_stmt|;
name|ShardLock
name|fooLock
init|=
name|env
operator|.
name|shardLock
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|fooLock
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|env
operator|.
name|shardLock
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"shard is locked"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
for|for
control|(
name|Path
name|path
range|:
name|env
operator|.
name|indexPaths
argument_list|(
literal|"foo"
argument_list|)
control|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|path
operator|.
name|resolve
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|path
operator|.
name|resolve
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|env
operator|.
name|lockAllForIndex
argument_list|(
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
name|idxSettings
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"shard 0 is locked"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|fooLock
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// can lock again?
name|env
operator|.
name|shardLock
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ShardLock
argument_list|>
name|locks
init|=
name|env
operator|.
name|lockAllForIndex
argument_list|(
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
name|idxSettings
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|env
operator|.
name|shardLock
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"shard is locked"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|locks
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"LockedShards: "
operator|+
name|env
operator|.
name|lockedShards
argument_list|()
argument_list|,
name|env
operator|.
name|lockedShards
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|env
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetAllIndices
specifier|public
name|void
name|testGetAllIndices
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|NodeEnvironment
name|env
init|=
name|newNodeEnvironment
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numIndices
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIndices
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|env
operator|.
name|indexPaths
argument_list|(
literal|"foo"
operator|+
name|i
argument_list|)
control|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|indices
init|=
name|env
operator|.
name|findAllIndices
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|indices
operator|.
name|size
argument_list|()
argument_list|,
name|numIndices
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIndices
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|indices
operator|.
name|contains
argument_list|(
literal|"foo"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"LockedShards: "
operator|+
name|env
operator|.
name|lockedShards
argument_list|()
argument_list|,
name|env
operator|.
name|lockedShards
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|env
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDeleteSafe
specifier|public
name|void
name|testDeleteSafe
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|NodeEnvironment
name|env
init|=
name|newNodeEnvironment
argument_list|()
decl_stmt|;
name|ShardLock
name|fooLock
init|=
name|env
operator|.
name|shardLock
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|fooLock
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|env
operator|.
name|indexPaths
argument_list|(
literal|"foo"
argument_list|)
control|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|path
operator|.
name|resolve
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|path
operator|.
name|resolve
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|env
operator|.
name|deleteShardDirectorySafe
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|idxSettings
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"shard is locked"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
for|for
control|(
name|Path
name|path
range|:
name|env
operator|.
name|indexPaths
argument_list|(
literal|"foo"
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|path
operator|.
name|resolve
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|path
operator|.
name|resolve
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|env
operator|.
name|deleteShardDirectorySafe
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|idxSettings
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|env
operator|.
name|indexPaths
argument_list|(
literal|"foo"
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|path
operator|.
name|resolve
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|path
operator|.
name|resolve
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|env
operator|.
name|deleteIndexDirectorySafe
argument_list|(
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
name|idxSettings
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"shard is locked"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|fooLock
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|env
operator|.
name|indexPaths
argument_list|(
literal|"foo"
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|threadException
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|blockLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|start
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unexpected error"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|threadException
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|blockLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|start
operator|.
name|await
argument_list|()
expr_stmt|;
try|try
init|(
name|ShardLock
name|autoCloses
init|=
name|env
operator|.
name|shardLock
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|)
init|)
block|{
name|blockLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|blockLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
name|start
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|blockLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|env
operator|.
name|deleteIndexDirectorySafe
argument_list|(
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|5000
argument_list|,
name|idxSettings
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|env
operator|.
name|indexPaths
argument_list|(
literal|"foo"
argument_list|)
control|)
block|{
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"LockedShards: "
operator|+
name|env
operator|.
name|lockedShards
argument_list|()
argument_list|,
name|env
operator|.
name|lockedShards
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|env
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testStressShardLock
specifier|public
name|void
name|testStressShardLock
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
class|class
name|Int
block|{
name|int
name|value
init|=
literal|0
decl_stmt|;
block|}
specifier|final
name|NodeEnvironment
name|env
init|=
name|newNodeEnvironment
argument_list|()
decl_stmt|;
specifier|final
name|int
name|shards
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|Int
index|[]
name|counts
init|=
operator|new
name|Int
index|[
name|shards
index|]
decl_stmt|;
specifier|final
name|AtomicInteger
index|[]
name|countsAtomic
init|=
operator|new
name|AtomicInteger
index|[
name|shards
index|]
decl_stmt|;
specifier|final
name|AtomicInteger
index|[]
name|flipFlop
init|=
operator|new
name|AtomicInteger
index|[
name|shards
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|counts
index|[
name|i
index|]
operator|=
operator|new
name|Int
argument_list|()
expr_stmt|;
name|countsAtomic
index|[
name|i
index|]
operator|=
operator|new
name|AtomicInteger
argument_list|()
expr_stmt|;
name|flipFlop
index|[
name|i
index|]
operator|=
operator|new
name|AtomicInteger
argument_list|()
expr_stmt|;
block|}
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
index|]
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10000
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|int
name|shard
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|counts
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
try|try
init|(
name|ShardLock
name|autoCloses
init|=
name|env
operator|.
name|shardLock
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|,
name|shard
argument_list|)
argument_list|,
name|scaledRandomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
init|)
block|{
name|counts
index|[
name|shard
index|]
operator|.
name|value
operator|++
expr_stmt|;
name|countsAtomic
index|[
name|shard
index|]
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|flipFlop
index|[
name|shard
index|]
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|flipFlop
index|[
name|shard
index|]
operator|.
name|decrementAndGet
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// fire the threads up
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"LockedShards: "
operator|+
name|env
operator|.
name|lockedShards
argument_list|()
argument_list|,
name|env
operator|.
name|lockedShards
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|counts
index|[
name|i
index|]
operator|.
name|value
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|flipFlop
index|[
name|i
index|]
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|counts
index|[
name|i
index|]
operator|.
name|value
argument_list|,
name|countsAtomic
index|[
name|i
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|env
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testCustomDataPaths
specifier|public
name|void
name|testCustomDataPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|dataPaths
init|=
name|tmpPaths
argument_list|()
decl_stmt|;
name|NodeEnvironment
name|env
init|=
name|newNodeEnvironment
argument_list|(
name|dataPaths
argument_list|,
literal|"/tmp"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|IndexSettings
name|s1
init|=
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
literal|"myindex"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|IndexSettings
name|s2
init|=
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
literal|"myindex"
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
literal|"/tmp/foo"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"myindex"
argument_list|,
literal|"_na_"
argument_list|)
decl_stmt|;
name|ShardId
name|sid
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"no settings should mean no custom data path"
argument_list|,
name|s1
operator|.
name|hasCustomDataPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"settings with path_data should have a custom data path"
argument_list|,
name|s2
operator|.
name|hasCustomDataPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|availableShardPaths
argument_list|(
name|sid
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|env
operator|.
name|availableShardPaths
argument_list|(
name|sid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|resolveCustomLocation
argument_list|(
name|s2
argument_list|,
name|sid
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/tmp/foo/0/myindex/0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"shard paths with a custom data_path should contain only regular paths"
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|sid
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|stringsToPaths
argument_list|(
name|dataPaths
argument_list|,
literal|"elasticsearch/nodes/0/indices/myindex/0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"index paths uses the regular template"
argument_list|,
name|env
operator|.
name|indexPaths
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|stringsToPaths
argument_list|(
name|dataPaths
argument_list|,
literal|"elasticsearch/nodes/0/indices/myindex"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|env
operator|.
name|close
argument_list|()
expr_stmt|;
name|NodeEnvironment
name|env2
init|=
name|newNodeEnvironment
argument_list|(
name|dataPaths
argument_list|,
literal|"/tmp"
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|NodeEnvironment
operator|.
name|ADD_NODE_ID_TO_CUSTOM_PATH
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|env2
operator|.
name|availableShardPaths
argument_list|(
name|sid
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|env2
operator|.
name|availableShardPaths
argument_list|(
name|sid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env2
operator|.
name|resolveCustomLocation
argument_list|(
name|s2
argument_list|,
name|sid
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/tmp/foo/myindex/0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"shard paths with a custom data_path should contain only regular paths"
argument_list|,
name|env2
operator|.
name|availableShardPaths
argument_list|(
name|sid
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|stringsToPaths
argument_list|(
name|dataPaths
argument_list|,
literal|"elasticsearch/nodes/0/indices/myindex/0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"index paths uses the regular template"
argument_list|,
name|env2
operator|.
name|indexPaths
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|stringsToPaths
argument_list|(
name|dataPaths
argument_list|,
literal|"elasticsearch/nodes/0/indices/myindex"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|env2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Converts an array of Strings to an array of Paths, adding an additional child if specified */
DECL|method|stringsToPaths
specifier|private
name|Path
index|[]
name|stringsToPaths
parameter_list|(
name|String
index|[]
name|strings
parameter_list|,
name|String
name|additional
parameter_list|)
block|{
name|Path
index|[]
name|locations
init|=
operator|new
name|Path
index|[
name|strings
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|locations
index|[
name|i
index|]
operator|=
name|PathUtils
operator|.
name|get
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|,
name|additional
argument_list|)
expr_stmt|;
block|}
return|return
name|locations
return|;
block|}
annotation|@
name|Override
DECL|method|tmpPaths
specifier|public
name|String
index|[]
name|tmpPaths
parameter_list|()
block|{
specifier|final
name|int
name|numPaths
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|absPaths
init|=
operator|new
name|String
index|[
name|numPaths
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPaths
condition|;
name|i
operator|++
control|)
block|{
name|absPaths
index|[
name|i
index|]
operator|=
name|createTempDir
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|absPaths
return|;
block|}
annotation|@
name|Override
DECL|method|newNodeEnvironment
specifier|public
name|NodeEnvironment
name|newNodeEnvironment
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|newNodeEnvironment
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newNodeEnvironment
specifier|public
name|NodeEnvironment
name|newNodeEnvironment
parameter_list|(
name|Settings
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|putArray
argument_list|(
name|Environment
operator|.
name|PATH_DATA_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|tmpPaths
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|NodeEnvironment
argument_list|(
name|build
argument_list|,
operator|new
name|Environment
argument_list|(
name|build
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newNodeEnvironment
specifier|public
name|NodeEnvironment
name|newNodeEnvironment
parameter_list|(
name|String
index|[]
name|dataPaths
parameter_list|,
name|Settings
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|putArray
argument_list|(
name|Environment
operator|.
name|PATH_DATA_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|dataPaths
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|NodeEnvironment
argument_list|(
name|build
argument_list|,
operator|new
name|Environment
argument_list|(
name|build
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newNodeEnvironment
specifier|public
name|NodeEnvironment
name|newNodeEnvironment
parameter_list|(
name|String
index|[]
name|dataPaths
parameter_list|,
name|String
name|sharedDataPath
parameter_list|,
name|Settings
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_SHARED_DATA_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|sharedDataPath
argument_list|)
operator|.
name|putArray
argument_list|(
name|Environment
operator|.
name|PATH_DATA_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|dataPaths
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|NodeEnvironment
argument_list|(
name|build
argument_list|,
operator|new
name|Environment
argument_list|(
name|build
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

