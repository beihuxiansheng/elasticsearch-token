begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch
package|package
name|org
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|NoShardAvailableActionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|RoutingMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ShardSearchFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|NoNodeAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|breaker
operator|.
name|CircuitBreakingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoverySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardRecoveringException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchContextMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|TestSearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|RemoteTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertToXContentEquivalent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|hasItem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|hasItems
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|startsWith
import|;
end_import

begin_class
DECL|class|ElasticsearchExceptionTests
specifier|public
class|class
name|ElasticsearchExceptionTests
extends|extends
name|ESTestCase
block|{
DECL|method|testStatus
specifier|public
name|void
name|testStatus
parameter_list|()
block|{
name|ElasticsearchException
name|exception
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|status
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"test"
argument_list|,
operator|new
name|RuntimeException
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|status
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"test"
argument_list|,
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|status
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|=
operator|new
name|RemoteTransportException
argument_list|(
literal|"test"
argument_list|,
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|status
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|=
operator|new
name|RemoteTransportException
argument_list|(
literal|"test"
argument_list|,
operator|new
name|ResourceAlreadyExistsException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|status
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|BAD_REQUEST
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|=
operator|new
name|RemoteTransportException
argument_list|(
literal|"test"
argument_list|,
operator|new
name|IllegalArgumentException
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|status
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|BAD_REQUEST
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|=
operator|new
name|RemoteTransportException
argument_list|(
literal|"test"
argument_list|,
operator|new
name|IllegalStateException
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|status
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGuessRootCause
specifier|public
name|void
name|testGuessRootCause
parameter_list|()
block|{
block|{
name|ElasticsearchException
name|exception
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|ElasticsearchException
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|IndexNotFoundException
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|RuntimeException
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ElasticsearchException
index|[]
name|rootCauses
init|=
name|exception
operator|.
name|guessRootCauses
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|rootCauses
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ElasticsearchException
operator|.
name|getExceptionName
argument_list|(
name|rootCauses
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|"index_not_found_exception"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rootCauses
index|[
literal|0
index|]
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"no such index"
argument_list|)
expr_stmt|;
name|ShardSearchFailure
name|failure
init|=
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|ParsingException
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"foobar"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node_1"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ShardSearchFailure
name|failure1
init|=
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|ParsingException
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"foobar"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node_1"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|SearchPhaseExecutionException
name|ex
init|=
operator|new
name|SearchPhaseExecutionException
argument_list|(
literal|"search"
argument_list|,
literal|"all shards failed"
argument_list|,
operator|new
name|ShardSearchFailure
index|[]
block|{
name|failure
block|,
name|failure1
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|rootCauses
operator|=
operator|(
name|randomBoolean
argument_list|()
condition|?
operator|new
name|RemoteTransportException
argument_list|(
literal|"remoteboom"
argument_list|,
name|ex
argument_list|)
else|:
name|ex
operator|)
operator|.
name|guessRootCauses
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rootCauses
operator|=
name|ElasticsearchException
operator|.
name|guessRootCauses
argument_list|(
name|randomBoolean
argument_list|()
condition|?
operator|new
name|RemoteTransportException
argument_list|(
literal|"remoteboom"
argument_list|,
name|ex
argument_list|)
else|:
name|ex
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ElasticsearchException
operator|.
name|getExceptionName
argument_list|(
name|rootCauses
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|"parsing_exception"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rootCauses
index|[
literal|0
index|]
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|oneLevel
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|RuntimeException
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
decl_stmt|;
name|rootCauses
operator|=
name|oneLevel
operator|.
name|guessRootCauses
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ElasticsearchException
operator|.
name|getExceptionName
argument_list|(
name|rootCauses
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|"exception"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rootCauses
index|[
literal|0
index|]
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
block|}
block|{
name|ShardSearchFailure
name|failure
init|=
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|ParsingException
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"foobar"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node_1"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ShardSearchFailure
name|failure1
init|=
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|QueryShardException
argument_list|(
operator|new
name|Index
argument_list|(
literal|"foo1"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|"foobar"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node_1"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"foo1"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ShardSearchFailure
name|failure2
init|=
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|QueryShardException
argument_list|(
operator|new
name|Index
argument_list|(
literal|"foo1"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|"foobar"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node_1"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"foo1"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|SearchPhaseExecutionException
name|ex
init|=
operator|new
name|SearchPhaseExecutionException
argument_list|(
literal|"search"
argument_list|,
literal|"all shards failed"
argument_list|,
operator|new
name|ShardSearchFailure
index|[]
block|{
name|failure
block|,
name|failure1
block|,
name|failure2
block|}
argument_list|)
decl_stmt|;
specifier|final
name|ElasticsearchException
index|[]
name|rootCauses
init|=
name|ex
operator|.
name|guessRootCauses
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|rootCauses
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ElasticsearchException
operator|.
name|getExceptionName
argument_list|(
name|rootCauses
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|"parsing_exception"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rootCauses
index|[
literal|0
index|]
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|ParsingException
operator|)
name|rootCauses
index|[
literal|0
index|]
operator|)
operator|.
name|getLineNumber
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|ParsingException
operator|)
name|rootCauses
index|[
literal|0
index|]
operator|)
operator|.
name|getColumnNumber
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ElasticsearchException
operator|.
name|getExceptionName
argument_list|(
name|rootCauses
index|[
literal|1
index|]
argument_list|)
argument_list|,
literal|"query_shard_exception"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|rootCauses
index|[
literal|1
index|]
operator|)
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"foo1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rootCauses
index|[
literal|1
index|]
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|ElasticsearchException
index|[]
name|foobars
init|=
name|ElasticsearchException
operator|.
name|guessRootCauses
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|foobars
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foobars
index|[
literal|0
index|]
operator|instanceof
name|ElasticsearchException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foobars
index|[
literal|0
index|]
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foobars
index|[
literal|0
index|]
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foobars
index|[
literal|0
index|]
operator|.
name|getExceptionName
argument_list|()
argument_list|,
literal|"illegal_argument_exception"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDeduplicate
specifier|public
name|void
name|testDeduplicate
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|ShardSearchFailure
name|failure
init|=
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|ParsingException
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"foobar"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node_1"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ShardSearchFailure
name|failure1
init|=
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|ParsingException
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"foobar"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node_1"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|SearchPhaseExecutionException
name|ex
init|=
operator|new
name|SearchPhaseExecutionException
argument_list|(
literal|"search"
argument_list|,
literal|"all shards failed"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|failure1
operator|.
name|getCause
argument_list|()
else|:
name|failure
operator|.
name|getCause
argument_list|()
argument_list|,
operator|new
name|ShardSearchFailure
index|[]
block|{
name|failure
block|,
name|failure1
block|}
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|ex
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|String
name|expected
init|=
literal|"{\"type\":\"search_phase_execution_exception\",\"reason\":\"all shards failed\",\"phase\":\"search\","
operator|+
literal|"\"grouped\":true,\"failed_shards\":[{\"shard\":1,\"index\":\"foo\",\"node\":\"node_1\",\"reason\":"
operator|+
literal|"{\"type\":\"parsing_exception\",\"reason\":\"foobar\",\"line\":1,\"col\":2}}]}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|ShardSearchFailure
name|failure
init|=
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|ParsingException
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"foobar"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node_1"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ShardSearchFailure
name|failure1
init|=
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|QueryShardException
argument_list|(
operator|new
name|Index
argument_list|(
literal|"foo1"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|"foobar"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node_1"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"foo1"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ShardSearchFailure
name|failure2
init|=
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|QueryShardException
argument_list|(
operator|new
name|Index
argument_list|(
literal|"foo1"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|"foobar"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node_1"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"foo1"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|SearchPhaseExecutionException
name|ex
init|=
operator|new
name|SearchPhaseExecutionException
argument_list|(
literal|"search"
argument_list|,
literal|"all shards failed"
argument_list|,
operator|new
name|ShardSearchFailure
index|[]
block|{
name|failure
block|,
name|failure1
block|,
name|failure2
block|}
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|ex
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|String
name|expected
init|=
literal|"{\"type\":\"search_phase_execution_exception\",\"reason\":\"all shards failed\","
operator|+
literal|"\"phase\":\"search\",\"grouped\":true,\"failed_shards\":[{\"shard\":1,\"index\":\"foo\",\"node\":\"node_1\","
operator|+
literal|"\"reason\":{\"type\":\"parsing_exception\",\"reason\":\"foobar\",\"line\":1,\"col\":2}},{\"shard\":1,"
operator|+
literal|"\"index\":\"foo1\",\"node\":\"node_1\",\"reason\":{\"type\":\"query_shard_exception\",\"reason\":\"foobar\","
operator|+
literal|"\"index_uuid\":\"_na_\",\"index\":\"foo1\"}}]}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|ShardSearchFailure
name|failure
init|=
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|ParsingException
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"foobar"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node_1"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ShardSearchFailure
name|failure1
init|=
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|ParsingException
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"foobar"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node_1"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|NullPointerException
name|nullPointerException
init|=
operator|new
name|NullPointerException
argument_list|()
decl_stmt|;
name|SearchPhaseExecutionException
name|ex
init|=
operator|new
name|SearchPhaseExecutionException
argument_list|(
literal|"search"
argument_list|,
literal|"all shards failed"
argument_list|,
name|nullPointerException
argument_list|,
operator|new
name|ShardSearchFailure
index|[]
block|{
name|failure
block|,
name|failure1
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nullPointerException
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|ex
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|String
name|expected
init|=
literal|"{\"type\":\"search_phase_execution_exception\",\"reason\":\"all shards failed\","
operator|+
literal|"\"phase\":\"search\",\"grouped\":true,\"failed_shards\":[{\"shard\":1,\"index\":\"foo\",\"node\":\"node_1\","
operator|+
literal|"\"reason\":{\"type\":\"parsing_exception\",\"reason\":\"foobar\",\"line\":1,\"col\":2}}],"
operator|+
literal|"\"caused_by\":{\"type\":\"null_pointer_exception\",\"reason\":null}}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Check whether this exception contains an exception of the given type:      * either it is of the given class itself or it contains a nested cause      * of the given type.      *      * @param exType the exception type to look for      * @return whether there is a nested exception of the specified type      */
DECL|method|contains
specifier|private
specifier|static
name|boolean
name|contains
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|exType
parameter_list|)
block|{
if|if
condition|(
name|exType
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Throwable
name|cause
init|=
name|t
init|;
name|t
operator|!=
literal|null
condition|;
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
control|)
block|{
if|if
condition|(
name|exType
operator|.
name|isInstance
argument_list|(
name|cause
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|testGetRootCause
specifier|public
name|void
name|testGetRootCause
parameter_list|()
block|{
name|Exception
name|root
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"foobar"
argument_list|)
decl_stmt|;
name|ElasticsearchException
name|exception
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|ElasticsearchException
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|IllegalArgumentException
argument_list|(
literal|"index is closed"
argument_list|,
name|root
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|exception
operator|.
name|getRootCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|contains
argument_list|(
name|exception
argument_list|,
name|RuntimeException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|contains
argument_list|(
name|exception
argument_list|,
name|EOFException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|ElasticsearchException
name|exception
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|ElasticsearchException
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|IllegalArgumentException
argument_list|(
literal|"index is closed"
argument_list|,
operator|new
name|RuntimeException
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ElasticsearchException[foo]; nested: ElasticsearchException[bar]; nested: IllegalArgumentException"
operator|+
literal|"[index is closed]; nested: RuntimeException[foobar];"
argument_list|,
name|exception
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToXContent
specifier|public
name|void
name|testToXContent
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|ElasticsearchException
name|e
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertExceptionAsJson
argument_list|(
name|e
argument_list|,
literal|"{\"type\":\"exception\",\"reason\":\"test\"}"
argument_list|)
expr_stmt|;
block|}
block|{
name|ElasticsearchException
name|e
init|=
operator|new
name|IndexShardRecoveringException
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"_test"
argument_list|,
literal|"_0"
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|assertExceptionAsJson
argument_list|(
name|e
argument_list|,
literal|"{\"type\":\"index_shard_recovering_exception\","
operator|+
literal|"\"reason\":\"CurrentState[RECOVERING] Already recovering\",\"index_uuid\":\"_0\","
operator|+
literal|"\"shard\":\"5\",\"index\":\"_test\"}"
argument_list|)
expr_stmt|;
block|}
block|{
name|ElasticsearchException
name|e
init|=
operator|new
name|BroadcastShardOperationFailedException
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"_index"
argument_list|,
literal|"_uuid"
argument_list|,
literal|12
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|IllegalStateException
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertExceptionAsJson
argument_list|(
name|e
argument_list|,
literal|"{\"type\":\"illegal_state_exception\",\"reason\":\"bar\"}"
argument_list|)
expr_stmt|;
block|}
block|{
name|ElasticsearchException
name|e
init|=
operator|new
name|ElasticsearchException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertExceptionAsJson
argument_list|(
name|e
argument_list|,
literal|"{\"type\":\"exception\",\"reason\":\"java.lang.IllegalArgumentException: foo\","
operator|+
literal|"\"caused_by\":{\"type\":\"illegal_argument_exception\",\"reason\":\"foo\"}}"
argument_list|)
expr_stmt|;
block|}
block|{
name|ElasticsearchException
name|e
init|=
operator|new
name|SearchParseException
argument_list|(
operator|new
name|TestSearchContext
argument_list|(
literal|null
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|XContentLocation
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertExceptionAsJson
argument_list|(
name|e
argument_list|,
literal|"{\"type\":\"search_parse_exception\",\"reason\":\"foo\",\"line\":1,\"col\":0}"
argument_list|)
expr_stmt|;
block|}
block|{
name|ElasticsearchException
name|ex
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|ElasticsearchException
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|IllegalArgumentException
argument_list|(
literal|"index is closed"
argument_list|,
operator|new
name|RuntimeException
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertExceptionAsJson
argument_list|(
name|ex
argument_list|,
literal|"{\"type\":\"exception\",\"reason\":\"foo\",\"caused_by\":{\"type\":\"exception\","
operator|+
literal|"\"reason\":\"bar\",\"caused_by\":{\"type\":\"illegal_argument_exception\",\"reason\":\"index is closed\","
operator|+
literal|"\"caused_by\":{\"type\":\"runtime_exception\",\"reason\":\"foobar\"}}}}"
argument_list|)
expr_stmt|;
block|}
block|{
name|ElasticsearchException
name|e
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|IllegalStateException
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertExceptionAsJson
argument_list|(
name|e
argument_list|,
literal|"{\"type\":\"exception\",\"reason\":\"foo\","
operator|+
literal|"\"caused_by\":{\"type\":\"illegal_state_exception\",\"reason\":\"bar\"}}"
argument_list|)
expr_stmt|;
comment|// Test the same exception but with the "rest.exception.stacktrace.skip" parameter disabled: the stack_trace must be present
comment|// in the JSON. Since the stack can be large, it only checks the beginning of the JSON.
name|ToXContent
operator|.
name|Params
name|params
init|=
operator|new
name|ToXContent
operator|.
name|MapParams
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ElasticsearchException
operator|.
name|REST_EXCEPTION_SKIP_STACK_TRACE
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|actual
decl_stmt|;
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|e
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|actual
operator|=
name|builder
operator|.
name|string
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|actual
argument_list|,
name|startsWith
argument_list|(
literal|"{\"type\":\"exception\",\"reason\":\"foo\","
operator|+
literal|"\"caused_by\":{\"type\":\"illegal_state_exception\",\"reason\":\"bar\","
operator|+
literal|"\"stack_trace\":\"java.lang.IllegalStateException: bar"
operator|+
operator|(
name|Constants
operator|.
name|WINDOWS
condition|?
literal|"\\r\\n"
else|:
literal|"\\n"
operator|)
operator|+
literal|"\\tat org.elasticsearch."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGenerateThrowableToXContent
specifier|public
name|void
name|testGenerateThrowableToXContent
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|Exception
name|ex
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// just a wrapper which is omitted
name|ex
operator|=
operator|new
name|RemoteTransportException
argument_list|(
literal|"foobar"
argument_list|,
operator|new
name|FileNotFoundException
argument_list|(
literal|"foo not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ex
operator|=
operator|new
name|FileNotFoundException
argument_list|(
literal|"foo not found"
argument_list|)
expr_stmt|;
block|}
name|assertExceptionAsJson
argument_list|(
name|ex
argument_list|,
literal|"{\"type\":\"file_not_found_exception\",\"reason\":\"foo not found\"}"
argument_list|)
expr_stmt|;
block|}
block|{
name|ParsingException
name|ex
init|=
operator|new
name|ParsingException
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"foobar"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertExceptionAsJson
argument_list|(
name|ex
argument_list|,
literal|"{\"type\":\"parsing_exception\",\"reason\":\"foobar\",\"line\":1,\"col\":2}"
argument_list|)
expr_stmt|;
block|}
block|{
comment|// test equivalence
name|ElasticsearchException
name|ex
init|=
operator|new
name|RemoteTransportException
argument_list|(
literal|"foobar"
argument_list|,
operator|new
name|FileNotFoundException
argument_list|(
literal|"foo not found"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|toXContentString
init|=
name|Strings
operator|.
name|toString
argument_list|(
name|ex
argument_list|)
decl_stmt|;
name|String
name|throwableString
init|=
name|Strings
operator|.
name|toString
argument_list|(
parameter_list|(
name|builder
parameter_list|,
name|params
parameter_list|)
lambda|->
block|{
name|ElasticsearchException
operator|.
name|generateThrowableXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|throwableString
argument_list|,
name|toXContentString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"type\":\"file_not_found_exception\",\"reason\":\"foo not found\"}"
argument_list|,
name|toXContentString
argument_list|)
expr_stmt|;
block|}
block|{
comment|// render header and metadata
name|ParsingException
name|ex
init|=
operator|new
name|ParsingException
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"foobar"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ex
operator|.
name|addMetadata
argument_list|(
literal|"es.test1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|ex
operator|.
name|addMetadata
argument_list|(
literal|"es.test2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|ex
operator|.
name|addHeader
argument_list|(
literal|"test"
argument_list|,
literal|"some value"
argument_list|)
expr_stmt|;
name|ex
operator|.
name|addHeader
argument_list|(
literal|"test_multi"
argument_list|,
literal|"some value"
argument_list|,
literal|"another value"
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"{\"type\":\"parsing_exception\",\"reason\":\"foobar\",\"line\":1,\"col\":2,"
operator|+
literal|"\"test1\":\"value1\",\"test2\":\"value2\","
operator|+
literal|"\"header\":{\"test_multi\":"
operator|+
literal|"[\"some value\",\"another value\"],\"test\":\"some value\"}}"
decl_stmt|;
name|assertExceptionAsJson
argument_list|(
name|ex
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testToXContentWithHeadersAndMetadata
specifier|public
name|void
name|testToXContentWithHeadersAndMetadata
parameter_list|()
throws|throws
name|IOException
block|{
name|ElasticsearchException
name|e
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|ElasticsearchException
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|ElasticsearchException
argument_list|(
literal|"baz"
argument_list|,
operator|new
name|ClusterBlockException
argument_list|(
name|singleton
argument_list|(
name|DiscoverySettings
operator|.
name|NO_MASTER_BLOCK_WRITES
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|e
operator|.
name|addHeader
argument_list|(
literal|"foo_0"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|e
operator|.
name|addHeader
argument_list|(
literal|"foo_1"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|e
operator|.
name|addMetadata
argument_list|(
literal|"es.metadata_foo_0"
argument_list|,
literal|"foo_0"
argument_list|)
expr_stmt|;
name|e
operator|.
name|addMetadata
argument_list|(
literal|"es.metadata_foo_1"
argument_list|,
literal|"foo_1"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|expectedJson
init|=
literal|"{"
operator|+
literal|"\"type\":\"exception\","
operator|+
literal|"\"reason\":\"foo\","
operator|+
literal|"\"metadata_foo_0\":\"foo_0\","
operator|+
literal|"\"metadata_foo_1\":\"foo_1\","
operator|+
literal|"\"caused_by\":{"
operator|+
literal|"\"type\":\"exception\","
operator|+
literal|"\"reason\":\"bar\","
operator|+
literal|"\"caused_by\":{"
operator|+
literal|"\"type\":\"exception\","
operator|+
literal|"\"reason\":\"baz\","
operator|+
literal|"\"caused_by\":{"
operator|+
literal|"\"type\":\"cluster_block_exception\","
operator|+
literal|"\"reason\":\"blocked by: [SERVICE_UNAVAILABLE/2/no master];\""
operator|+
literal|"}"
operator|+
literal|"}"
operator|+
literal|"},"
operator|+
literal|"\"header\":{"
operator|+
literal|"\"foo_0\":\"0\","
operator|+
literal|"\"foo_1\":\"1\""
operator|+
literal|"}"
operator|+
literal|"}"
decl_stmt|;
name|assertExceptionAsJson
argument_list|(
name|e
argument_list|,
name|expectedJson
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|parsed
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
argument_list|,
name|expectedJson
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parsed
operator|=
name|ElasticsearchException
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|parsed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parsed
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Elasticsearch exception [type=exception, reason=foo]"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsed
operator|.
name|getHeaderKeys
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parsed
operator|.
name|getHeader
argument_list|(
literal|"foo_0"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parsed
operator|.
name|getHeader
argument_list|(
literal|"foo_1"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsed
operator|.
name|getMetadataKeys
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parsed
operator|.
name|getMetadata
argument_list|(
literal|"es.metadata_foo_0"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"foo_0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parsed
operator|.
name|getMetadata
argument_list|(
literal|"es.metadata_foo_1"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"foo_1"
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|cause
init|=
operator|(
name|ElasticsearchException
operator|)
name|parsed
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Elasticsearch exception [type=exception, reason=bar]"
argument_list|)
expr_stmt|;
name|cause
operator|=
operator|(
name|ElasticsearchException
operator|)
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Elasticsearch exception [type=exception, reason=baz]"
argument_list|)
expr_stmt|;
name|cause
operator|=
operator|(
name|ElasticsearchException
operator|)
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Elasticsearch exception [type=cluster_block_exception, reason=blocked by: [SERVICE_UNAVAILABLE/2/no master];]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromXContent
specifier|public
name|void
name|testFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|XContent
name|xContent
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|xContent
argument_list|()
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|xContent
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"reason"
argument_list|,
literal|"something went wrong"
argument_list|)
operator|.
name|field
argument_list|(
literal|"stack_trace"
argument_list|,
literal|"..."
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|ElasticsearchException
name|parsed
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContent
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parsed
operator|=
name|ElasticsearchException
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|parsed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parsed
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Elasticsearch exception [type=foo, reason=something went wrong, stack_trace=...]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromXContentWithCause
specifier|public
name|void
name|testFromXContentWithCause
parameter_list|()
throws|throws
name|IOException
block|{
name|ElasticsearchException
name|e
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|ElasticsearchException
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|ElasticsearchException
argument_list|(
literal|"baz"
argument_list|,
operator|new
name|RoutingMissingException
argument_list|(
literal|"_test"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|XContent
name|xContent
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|xContent
argument_list|()
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|xContent
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|value
argument_list|(
name|e
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|ElasticsearchException
name|parsed
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|builder
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parsed
operator|=
name|ElasticsearchException
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|parsed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parsed
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Elasticsearch exception [type=exception, reason=foo]"
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|cause
init|=
operator|(
name|ElasticsearchException
operator|)
name|parsed
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Elasticsearch exception [type=exception, reason=bar]"
argument_list|)
expr_stmt|;
name|cause
operator|=
operator|(
name|ElasticsearchException
operator|)
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Elasticsearch exception [type=exception, reason=baz]"
argument_list|)
expr_stmt|;
name|cause
operator|=
operator|(
name|ElasticsearchException
operator|)
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Elasticsearch exception [type=routing_missing_exception, reason=routing is required for [_test]/[_type]/[_id]]"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getHeaderKeys
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getMetadataKeys
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getMetadata
argument_list|(
literal|"es.index"
argument_list|)
argument_list|,
name|hasItem
argument_list|(
literal|"_test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getMetadata
argument_list|(
literal|"es.index_uuid"
argument_list|)
argument_list|,
name|hasItem
argument_list|(
literal|"_na_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromXContentWithHeadersAndMetadata
specifier|public
name|void
name|testFromXContentWithHeadersAndMetadata
parameter_list|()
throws|throws
name|IOException
block|{
name|RoutingMissingException
name|routing
init|=
operator|new
name|RoutingMissingException
argument_list|(
literal|"_test"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|)
decl_stmt|;
name|ElasticsearchException
name|baz
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"baz"
argument_list|,
name|routing
argument_list|)
decl_stmt|;
name|baz
operator|.
name|addHeader
argument_list|(
literal|"baz_0"
argument_list|,
literal|"baz0"
argument_list|)
expr_stmt|;
name|baz
operator|.
name|addMetadata
argument_list|(
literal|"es.baz_1"
argument_list|,
literal|"baz1"
argument_list|)
expr_stmt|;
name|baz
operator|.
name|addHeader
argument_list|(
literal|"baz_2"
argument_list|,
literal|"baz2"
argument_list|)
expr_stmt|;
name|baz
operator|.
name|addMetadata
argument_list|(
literal|"es.baz_3"
argument_list|,
literal|"baz3"
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|bar
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"bar"
argument_list|,
name|baz
argument_list|)
decl_stmt|;
name|bar
operator|.
name|addMetadata
argument_list|(
literal|"es.bar_0"
argument_list|,
literal|"bar0"
argument_list|)
expr_stmt|;
name|bar
operator|.
name|addHeader
argument_list|(
literal|"bar_1"
argument_list|,
literal|"bar1"
argument_list|)
expr_stmt|;
name|bar
operator|.
name|addMetadata
argument_list|(
literal|"es.bar_2"
argument_list|,
literal|"bar2"
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|foo
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"foo"
argument_list|,
name|bar
argument_list|)
decl_stmt|;
name|foo
operator|.
name|addMetadata
argument_list|(
literal|"es.foo_0"
argument_list|,
literal|"foo0"
argument_list|)
expr_stmt|;
name|foo
operator|.
name|addHeader
argument_list|(
literal|"foo_1"
argument_list|,
literal|"foo1"
argument_list|)
expr_stmt|;
specifier|final
name|XContent
name|xContent
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|xContent
argument_list|()
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|xContent
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|value
argument_list|(
name|foo
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|ElasticsearchException
name|parsed
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|builder
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parsed
operator|=
name|ElasticsearchException
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|parsed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parsed
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Elasticsearch exception [type=exception, reason=foo]"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsed
operator|.
name|getHeaderKeys
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsed
operator|.
name|getHeader
argument_list|(
literal|"foo_1"
argument_list|)
argument_list|,
name|hasItem
argument_list|(
literal|"foo1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsed
operator|.
name|getMetadataKeys
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsed
operator|.
name|getMetadata
argument_list|(
literal|"es.foo_0"
argument_list|)
argument_list|,
name|hasItem
argument_list|(
literal|"foo0"
argument_list|)
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|cause
init|=
operator|(
name|ElasticsearchException
operator|)
name|parsed
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Elasticsearch exception [type=exception, reason=bar]"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getHeaderKeys
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getHeader
argument_list|(
literal|"bar_1"
argument_list|)
argument_list|,
name|hasItem
argument_list|(
literal|"bar1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getMetadataKeys
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getMetadata
argument_list|(
literal|"es.bar_0"
argument_list|)
argument_list|,
name|hasItem
argument_list|(
literal|"bar0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getMetadata
argument_list|(
literal|"es.bar_2"
argument_list|)
argument_list|,
name|hasItem
argument_list|(
literal|"bar2"
argument_list|)
argument_list|)
expr_stmt|;
name|cause
operator|=
operator|(
name|ElasticsearchException
operator|)
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Elasticsearch exception [type=exception, reason=baz]"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getHeaderKeys
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getHeader
argument_list|(
literal|"baz_0"
argument_list|)
argument_list|,
name|hasItem
argument_list|(
literal|"baz0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getHeader
argument_list|(
literal|"baz_2"
argument_list|)
argument_list|,
name|hasItem
argument_list|(
literal|"baz2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getMetadataKeys
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getMetadata
argument_list|(
literal|"es.baz_1"
argument_list|)
argument_list|,
name|hasItem
argument_list|(
literal|"baz1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getMetadata
argument_list|(
literal|"es.baz_3"
argument_list|)
argument_list|,
name|hasItem
argument_list|(
literal|"baz3"
argument_list|)
argument_list|)
expr_stmt|;
name|cause
operator|=
operator|(
name|ElasticsearchException
operator|)
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Elasticsearch exception [type=routing_missing_exception, reason=routing is required for [_test]/[_type]/[_id]]"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getHeaderKeys
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getMetadataKeys
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getMetadata
argument_list|(
literal|"es.index"
argument_list|)
argument_list|,
name|hasItem
argument_list|(
literal|"_test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getMetadata
argument_list|(
literal|"es.index_uuid"
argument_list|)
argument_list|,
name|hasItem
argument_list|(
literal|"_na_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that some values like arrays of numbers are ignored when parsing back      * an exception.      */
DECL|method|testFromXContentWithIgnoredMetadataAndHeaders
specifier|public
name|void
name|testFromXContentWithIgnoredMetadataAndHeaders
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|XContent
name|xContent
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|xContent
argument_list|()
decl_stmt|;
comment|// The exception content to parse is built using a XContentBuilder
comment|// because the current Java API does not allow to add metadata/headers
comment|// of other types than list of strings.
name|BytesReference
name|originalBytes
decl_stmt|;
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|xContent
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"metadata_int"
argument_list|,
literal|1
argument_list|)
operator|.
name|array
argument_list|(
literal|"metadata_array_of_ints"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|8
block|,
literal|13
block|,
literal|21
block|}
argument_list|)
operator|.
name|field
argument_list|(
literal|"reason"
argument_list|,
literal|"Custom reason"
argument_list|)
operator|.
name|array
argument_list|(
literal|"metadata_array_of_boolean"
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|}
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"metadata_array_of_objects"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"object_array_one"
argument_list|,
literal|"value_one"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"object_array_two"
argument_list|,
literal|"value_two"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"custom_exception"
argument_list|)
operator|.
name|field
argument_list|(
literal|"metadata_long"
argument_list|,
literal|1L
argument_list|)
operator|.
name|array
argument_list|(
literal|"metadata_array_of_longs"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|2L
block|,
literal|3L
block|,
literal|5L
block|}
argument_list|)
operator|.
name|field
argument_list|(
literal|"metadata_other"
argument_list|,
literal|"some metadata"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"header"
argument_list|)
operator|.
name|field
argument_list|(
literal|"header_string"
argument_list|,
literal|"some header"
argument_list|)
operator|.
name|array
argument_list|(
literal|"header_array_of_strings"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|,
literal|"baz"
block|}
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"metadata_object"
argument_list|)
operator|.
name|field
argument_list|(
literal|"object_field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|originalBytes
operator|=
name|builder
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
name|ElasticsearchException
name|parsedException
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContent
argument_list|,
name|originalBytes
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parsedException
operator|=
name|ElasticsearchException
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|parsedException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Elasticsearch exception [type=custom_exception, reason=Custom reason]"
argument_list|,
name|parsedException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parsedException
operator|.
name|getHeaderKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedException
operator|.
name|getHeader
argument_list|(
literal|"header_string"
argument_list|)
argument_list|,
name|hasItem
argument_list|(
literal|"some header"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedException
operator|.
name|getHeader
argument_list|(
literal|"header_array_of_strings"
argument_list|)
argument_list|,
name|hasItems
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsedException
operator|.
name|getMetadataKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedException
operator|.
name|getMetadata
argument_list|(
literal|"es.metadata_other"
argument_list|)
argument_list|,
name|hasItem
argument_list|(
literal|"some metadata"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testThrowableToAndFromXContent
specifier|public
name|void
name|testThrowableToAndFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|XContent
name|xContent
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|xContent
argument_list|()
decl_stmt|;
specifier|final
name|Tuple
argument_list|<
name|Throwable
argument_list|,
name|ElasticsearchException
argument_list|>
name|exceptions
init|=
name|randomExceptions
argument_list|()
decl_stmt|;
specifier|final
name|Throwable
name|throwable
init|=
name|exceptions
operator|.
name|v1
argument_list|()
decl_stmt|;
name|BytesReference
name|throwableBytes
init|=
name|XContentHelper
operator|.
name|toXContent
argument_list|(
parameter_list|(
name|builder
parameter_list|,
name|params
parameter_list|)
lambda|->
block|{
name|ElasticsearchException
operator|.
name|generateThrowableXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
argument_list|,
name|xContent
operator|.
name|type
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|ElasticsearchException
name|parsedException
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContent
argument_list|,
name|throwableBytes
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parsedException
operator|=
name|ElasticsearchException
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertDeepEquals
argument_list|(
name|exceptions
operator|.
name|v2
argument_list|()
argument_list|,
name|parsedException
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnknownFailureToAndFromXContent
specifier|public
name|void
name|testUnknownFailureToAndFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|XContent
name|xContent
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|xContent
argument_list|()
decl_stmt|;
name|BytesReference
name|failureBytes
init|=
name|XContentHelper
operator|.
name|toXContent
argument_list|(
parameter_list|(
name|builder
parameter_list|,
name|params
parameter_list|)
lambda|->
block|{
comment|// Prints a null failure using generateFailureXContent()
name|ElasticsearchException
operator|.
name|generateFailureXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
argument_list|,
name|xContent
operator|.
name|type
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|ElasticsearchException
name|parsedFailure
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContent
argument_list|,
name|failureBytes
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parsedFailure
operator|=
name|ElasticsearchException
operator|.
name|failureFromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Failure was null, expecting a "unknown" reason
name|assertEquals
argument_list|(
literal|"Elasticsearch exception [type=exception, reason=unknown]"
argument_list|,
name|parsedFailure
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parsedFailure
operator|.
name|getHeaders
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parsedFailure
operator|.
name|getMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailureToAndFromXContentWithNoDetails
specifier|public
name|void
name|testFailureToAndFromXContentWithNoDetails
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|XContent
name|xContent
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|xContent
argument_list|()
decl_stmt|;
specifier|final
name|Exception
name|failure
init|=
operator|(
name|Exception
operator|)
name|randomExceptions
argument_list|()
operator|.
name|v1
argument_list|()
decl_stmt|;
name|BytesReference
name|failureBytes
init|=
name|XContentHelper
operator|.
name|toXContent
argument_list|(
parameter_list|(
name|builder
parameter_list|,
name|params
parameter_list|)
lambda|->
block|{
name|ElasticsearchException
operator|.
name|generateFailureXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|failure
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
argument_list|,
name|xContent
operator|.
name|type
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContent
argument_list|,
name|failureBytes
argument_list|)
init|)
block|{
name|failureBytes
operator|=
name|shuffleXContent
argument_list|(
name|parser
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
name|ElasticsearchException
name|parsedFailure
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContent
argument_list|,
name|failureBytes
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parsedFailure
operator|=
name|ElasticsearchException
operator|.
name|failureFromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|parsedFailure
argument_list|)
expr_stmt|;
name|String
name|reason
decl_stmt|;
if|if
condition|(
name|failure
operator|instanceof
name|ElasticsearchException
condition|)
block|{
name|reason
operator|=
name|failure
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"["
operator|+
name|failure
operator|.
name|getMessage
argument_list|()
operator|+
literal|"]"
expr_stmt|;
block|}
else|else
block|{
name|reason
operator|=
literal|"No ElasticsearchException found"
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ElasticsearchException
operator|.
name|buildMessage
argument_list|(
literal|"exception"
argument_list|,
name|reason
argument_list|,
literal|null
argument_list|)
argument_list|,
name|parsedFailure
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parsedFailure
operator|.
name|getHeaders
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parsedFailure
operator|.
name|getMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parsedFailure
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailureToAndFromXContentWithDetails
specifier|public
name|void
name|testFailureToAndFromXContentWithDetails
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|XContent
name|xContent
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|xContent
argument_list|()
decl_stmt|;
name|Exception
name|failure
decl_stmt|;
name|Throwable
name|failureCause
decl_stmt|;
name|ElasticsearchException
name|expected
decl_stmt|;
name|ElasticsearchException
name|expectedCause
decl_stmt|;
name|ElasticsearchException
name|suppressed
decl_stmt|;
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
comment|// Simple elasticsearch exception without cause
name|failure
operator|=
operator|new
name|NoNodeAvailableException
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=no_node_available_exception, reason=A]"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addSuppressed
argument_list|(
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=no_node_available_exception, reason=A]"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|// Simple elasticsearch exception with headers (other metadata of type number are not parsed)
name|failure
operator|=
operator|new
name|CircuitBreakingException
argument_list|(
literal|"B"
argument_list|,
literal|5_000
argument_list|,
literal|2_000
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ElasticsearchException
operator|)
name|failure
operator|)
operator|.
name|addHeader
argument_list|(
literal|"header_name"
argument_list|,
literal|"0"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=circuit_breaking_exception, reason=B]"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addHeader
argument_list|(
literal|"header_name"
argument_list|,
literal|"0"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|suppressed
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=circuit_breaking_exception, reason=B]"
argument_list|)
expr_stmt|;
name|suppressed
operator|.
name|addHeader
argument_list|(
literal|"header_name"
argument_list|,
literal|"0"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addSuppressed
argument_list|(
name|suppressed
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// Elasticsearch exception with a cause, headers and parsable metadata
name|failureCause
operator|=
operator|new
name|NullPointerException
argument_list|(
literal|"var is null"
argument_list|)
expr_stmt|;
name|failure
operator|=
operator|new
name|ScriptException
argument_list|(
literal|"C"
argument_list|,
name|failureCause
argument_list|,
name|singletonList
argument_list|(
literal|"stack"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|"painless"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ElasticsearchException
operator|)
name|failure
operator|)
operator|.
name|addHeader
argument_list|(
literal|"script_name"
argument_list|,
literal|"my_script"
argument_list|)
expr_stmt|;
name|expectedCause
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=null_pointer_exception, reason=var is null]"
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=script_exception, reason=C]"
argument_list|,
name|expectedCause
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addHeader
argument_list|(
literal|"script_name"
argument_list|,
literal|"my_script"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addMetadata
argument_list|(
literal|"es.lang"
argument_list|,
literal|"painless"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addMetadata
argument_list|(
literal|"es.script"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addMetadata
argument_list|(
literal|"es.script_stack"
argument_list|,
literal|"stack"
argument_list|)
expr_stmt|;
name|suppressed
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=script_exception, reason=C]"
argument_list|)
expr_stmt|;
name|suppressed
operator|.
name|addHeader
argument_list|(
literal|"script_name"
argument_list|,
literal|"my_script"
argument_list|)
expr_stmt|;
name|suppressed
operator|.
name|addMetadata
argument_list|(
literal|"es.lang"
argument_list|,
literal|"painless"
argument_list|)
expr_stmt|;
name|suppressed
operator|.
name|addMetadata
argument_list|(
literal|"es.script"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|suppressed
operator|.
name|addMetadata
argument_list|(
literal|"es.script_stack"
argument_list|,
literal|"stack"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addSuppressed
argument_list|(
name|suppressed
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// JDK exception without cause
name|failure
operator|=
operator|new
name|IllegalStateException
argument_list|(
literal|"D"
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=illegal_state_exception, reason=D]"
argument_list|)
expr_stmt|;
name|suppressed
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=illegal_state_exception, reason=D]"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addSuppressed
argument_list|(
name|suppressed
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// JDK exception with cause
name|failureCause
operator|=
operator|new
name|RoutingMissingException
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|failure
operator|=
operator|new
name|RuntimeException
argument_list|(
literal|"E"
argument_list|,
name|failureCause
argument_list|)
expr_stmt|;
name|expectedCause
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=routing_missing_exception, "
operator|+
literal|"reason=routing is required for [idx]/[type]/[id]]"
argument_list|)
expr_stmt|;
name|expectedCause
operator|.
name|addMetadata
argument_list|(
literal|"es.index"
argument_list|,
literal|"idx"
argument_list|)
expr_stmt|;
name|expectedCause
operator|.
name|addMetadata
argument_list|(
literal|"es.index_uuid"
argument_list|,
literal|"_na_"
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=runtime_exception, reason=E]"
argument_list|,
name|expectedCause
argument_list|)
expr_stmt|;
name|suppressed
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=runtime_exception, reason=E]"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addSuppressed
argument_list|(
name|suppressed
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// Wrapped exception with cause
name|failureCause
operator|=
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"File exists"
argument_list|)
expr_stmt|;
name|failure
operator|=
operator|new
name|BroadcastShardOperationFailedException
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"_index"
argument_list|,
literal|"_uuid"
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|"F"
argument_list|,
name|failureCause
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=file_already_exists_exception, reason=File exists]"
argument_list|)
expr_stmt|;
comment|// strangely, the wrapped exception appears as the root cause...
name|suppressed
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=broadcast_shard_operation_failed_exception, "
operator|+
literal|"reason=F]"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addSuppressed
argument_list|(
name|suppressed
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// SearchPhaseExecutionException with cause and multiple failures
name|DiscoveryNode
name|node
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node_g"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|failureCause
operator|=
operator|new
name|NodeClosedException
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|failureCause
operator|=
operator|new
name|NoShardAvailableActionException
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"_index_g"
argument_list|,
literal|"_uuid_g"
argument_list|,
literal|6
argument_list|)
argument_list|,
literal|"node_g"
argument_list|,
name|failureCause
argument_list|)
expr_stmt|;
name|ShardSearchFailure
index|[]
name|shardFailures
init|=
operator|new
name|ShardSearchFailure
index|[]
block|{
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|ParsingException
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|"Parsing g"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node_g"
argument_list|,
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"_index_g"
argument_list|,
literal|"_uuid_g"
argument_list|)
argument_list|,
literal|61
argument_list|)
argument_list|)
argument_list|)
block|,
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|RepositoryException
argument_list|(
literal|"repository_g"
argument_list|,
literal|"Repo"
argument_list|)
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node_g"
argument_list|,
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"_index_g"
argument_list|,
literal|"_uuid_g"
argument_list|)
argument_list|,
literal|62
argument_list|)
argument_list|)
argument_list|)
block|,
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|SearchContextMissingException
argument_list|(
literal|0L
argument_list|)
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
name|failure
operator|=
operator|new
name|SearchPhaseExecutionException
argument_list|(
literal|"phase_g"
argument_list|,
literal|"G"
argument_list|,
name|failureCause
argument_list|,
name|shardFailures
argument_list|)
expr_stmt|;
name|expectedCause
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=node_closed_exception, "
operator|+
literal|"reason=node closed "
operator|+
name|node
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|expectedCause
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=no_shard_available_action_exception, "
operator|+
literal|"reason=node_g]"
argument_list|,
name|expectedCause
argument_list|)
expr_stmt|;
name|expectedCause
operator|.
name|addMetadata
argument_list|(
literal|"es.index"
argument_list|,
literal|"_index_g"
argument_list|)
expr_stmt|;
name|expectedCause
operator|.
name|addMetadata
argument_list|(
literal|"es.index_uuid"
argument_list|,
literal|"_uuid_g"
argument_list|)
expr_stmt|;
name|expectedCause
operator|.
name|addMetadata
argument_list|(
literal|"es.shard"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=search_phase_execution_exception, "
operator|+
literal|"reason=G]"
argument_list|,
name|expectedCause
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addMetadata
argument_list|(
literal|"es.phase"
argument_list|,
literal|"phase_g"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addSuppressed
argument_list|(
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=parsing_exception, reason=Parsing g]"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addSuppressed
argument_list|(
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=repository_exception, "
operator|+
literal|"reason=[repository_g] Repo]"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addSuppressed
argument_list|(
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=search_context_missing_exception, "
operator|+
literal|"reason=No search context found for id [0]]"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Failed to generate randomized failure"
argument_list|)
throw|;
block|}
name|Exception
name|finalFailure
init|=
name|failure
decl_stmt|;
name|BytesReference
name|failureBytes
init|=
name|XContentHelper
operator|.
name|toXContent
argument_list|(
parameter_list|(
name|builder
parameter_list|,
name|params
parameter_list|)
lambda|->
block|{
name|ElasticsearchException
operator|.
name|generateFailureXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|finalFailure
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
argument_list|,
name|xContent
operator|.
name|type
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContent
argument_list|,
name|failureBytes
argument_list|)
init|)
block|{
name|failureBytes
operator|=
name|shuffleXContent
argument_list|(
name|parser
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
name|ElasticsearchException
name|parsedFailure
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContent
argument_list|,
name|failureBytes
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parsedFailure
operator|=
name|ElasticsearchException
operator|.
name|failureFromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|parsedFailure
argument_list|)
expr_stmt|;
block|}
comment|/**      * Builds a {@link ToXContent} using a JSON XContentBuilder and check the resulting string with the given {@link Matcher}.      *      * By default, the stack trace of the exception is not rendered. The parameter `errorTrace` forces the stack trace to      * be rendered like the REST API does when the "error_trace" parameter is set to true.      */
DECL|method|assertToXContentAsJson
specifier|private
specifier|static
name|void
name|assertToXContentAsJson
parameter_list|(
name|ToXContent
name|e
parameter_list|,
name|String
name|expectedJson
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesReference
name|actual
init|=
name|XContentHelper
operator|.
name|toXContent
argument_list|(
name|e
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|assertToXContentEquivalent
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|expectedJson
argument_list|)
argument_list|,
name|actual
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
expr_stmt|;
block|}
DECL|method|assertExceptionAsJson
specifier|private
specifier|static
name|void
name|assertExceptionAsJson
parameter_list|(
name|Exception
name|e
parameter_list|,
name|String
name|expectedJson
parameter_list|)
throws|throws
name|IOException
block|{
name|assertToXContentAsJson
argument_list|(
parameter_list|(
name|builder
parameter_list|,
name|params
parameter_list|)
lambda|->
block|{
name|ElasticsearchException
operator|.
name|generateThrowableXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
argument_list|,
name|expectedJson
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDeepEquals
specifier|public
specifier|static
name|void
name|assertDeepEquals
parameter_list|(
name|ElasticsearchException
name|expected
parameter_list|,
name|ElasticsearchException
name|actual
parameter_list|)
block|{
do|do
block|{
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|,
name|actual
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|actual
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|actual
operator|.
name|getMetadata
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getResourceType
argument_list|()
argument_list|,
name|actual
operator|.
name|getResourceType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getResourceId
argument_list|()
argument_list|,
name|actual
operator|.
name|getResourceId
argument_list|()
argument_list|)
expr_stmt|;
name|Throwable
index|[]
name|expectedSuppressed
init|=
name|expected
operator|.
name|getSuppressed
argument_list|()
decl_stmt|;
name|Throwable
index|[]
name|actualSuppressed
init|=
name|actual
operator|.
name|getSuppressed
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedSuppressed
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|actualSuppressed
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|actualSuppressed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSuppressed
operator|.
name|length
argument_list|,
name|actualSuppressed
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedSuppressed
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertDeepEquals
argument_list|(
operator|(
name|ElasticsearchException
operator|)
name|expectedSuppressed
index|[
name|i
index|]
argument_list|,
operator|(
name|ElasticsearchException
operator|)
name|actualSuppressed
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|expected
operator|=
operator|(
name|ElasticsearchException
operator|)
name|expected
operator|.
name|getCause
argument_list|()
expr_stmt|;
name|actual
operator|=
operator|(
name|ElasticsearchException
operator|)
name|actual
operator|.
name|getCause
argument_list|()
expr_stmt|;
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|expected
operator|!=
literal|null
condition|)
do|;
block|}
DECL|method|randomExceptions
specifier|public
specifier|static
name|Tuple
argument_list|<
name|Throwable
argument_list|,
name|ElasticsearchException
argument_list|>
name|randomExceptions
parameter_list|()
block|{
name|Throwable
name|actual
decl_stmt|;
name|ElasticsearchException
name|expected
decl_stmt|;
name|int
name|type
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|0
case|:
name|actual
operator|=
operator|new
name|ClusterBlockException
argument_list|(
name|singleton
argument_list|(
name|DiscoverySettings
operator|.
name|NO_MASTER_BLOCK_WRITES
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=cluster_block_exception, "
operator|+
literal|"reason=blocked by: [SERVICE_UNAVAILABLE/2/no master];]"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|actual
operator|=
operator|new
name|CircuitBreakingException
argument_list|(
literal|"Data too large"
argument_list|,
literal|123
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=circuit_breaking_exception, reason=Data too large]"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|actual
operator|=
operator|new
name|SearchParseException
argument_list|(
operator|new
name|TestSearchContext
argument_list|(
literal|null
argument_list|)
argument_list|,
literal|"Parse failure"
argument_list|,
operator|new
name|XContentLocation
argument_list|(
literal|12
argument_list|,
literal|98
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=search_parse_exception, reason=Parse failure]"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|actual
operator|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Closed resource"
argument_list|,
operator|new
name|RuntimeException
argument_list|(
literal|"Resource"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=illegal_argument_exception, reason=Closed resource]"
argument_list|,
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=runtime_exception, reason=Resource]"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|actual
operator|=
operator|new
name|SearchPhaseExecutionException
argument_list|(
literal|"search"
argument_list|,
literal|"all shards failed"
argument_list|,
operator|new
name|ShardSearchFailure
index|[]
block|{
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|ParsingException
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"foobar"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node_1"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=search_phase_execution_exception, "
operator|+
literal|"reason=all shards failed]"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addMetadata
argument_list|(
literal|"es.phase"
argument_list|,
literal|"search"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|actual
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Parsing failed"
argument_list|,
operator|new
name|ParsingException
argument_list|(
literal|9
argument_list|,
literal|42
argument_list|,
literal|"Wrong state"
argument_list|,
operator|new
name|NullPointerException
argument_list|(
literal|"Unexpected null value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|expectedCause
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=parsing_exception, "
operator|+
literal|"reason=Wrong state]"
argument_list|,
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=null_pointer_exception, "
operator|+
literal|"reason=Unexpected null value]"
argument_list|)
argument_list|)
decl_stmt|;
name|expected
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=exception, reason=Parsing failed]"
argument_list|,
name|expectedCause
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"No randomized exceptions generated for type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|actual
operator|instanceof
name|ElasticsearchException
condition|)
block|{
name|ElasticsearchException
name|actualException
init|=
operator|(
name|ElasticsearchException
operator|)
name|actual
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|nbHeaders
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|randomHeaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|nbHeaders
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbHeaders
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|nbValues
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nbValues
condition|;
name|j
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|frequently
argument_list|()
condition|?
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
else|:
literal|""
argument_list|)
expr_stmt|;
block|}
name|randomHeaders
operator|.
name|put
argument_list|(
literal|"header_"
operator|+
name|i
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|randomHeaders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|actualException
operator|.
name|addHeader
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addHeader
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
comment|// Empty or null headers are not printed out by the toXContent method
name|actualException
operator|.
name|addHeader
argument_list|(
literal|"ignored"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|emptyList
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|nbMetadata
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|randomMetadata
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|nbMetadata
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbMetadata
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|nbValues
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nbValues
condition|;
name|j
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|frequently
argument_list|()
condition|?
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
else|:
literal|""
argument_list|)
expr_stmt|;
block|}
name|randomMetadata
operator|.
name|put
argument_list|(
literal|"es.metadata_"
operator|+
name|i
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|randomMetadata
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|actualException
operator|.
name|addMetadata
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addMetadata
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
comment|// Empty or null metadata are not printed out by the toXContent method
name|actualException
operator|.
name|addMetadata
argument_list|(
literal|"es.ignored"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|emptyList
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|nbResources
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbResources
condition|;
name|i
operator|++
control|)
block|{
name|String
name|resourceType
init|=
literal|"type_"
operator|+
name|i
decl_stmt|;
name|String
index|[]
name|resourceIds
init|=
operator|new
name|String
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|resourceIds
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|resourceIds
index|[
name|j
index|]
operator|=
name|frequently
argument_list|()
condition|?
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
else|:
literal|""
expr_stmt|;
block|}
name|actualException
operator|.
name|setResources
argument_list|(
name|resourceType
argument_list|,
name|resourceIds
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setResources
argument_list|(
name|resourceType
argument_list|,
name|resourceIds
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
return|;
block|}
block|}
end_class

end_unit

