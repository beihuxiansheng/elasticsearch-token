begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.tribe
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|tribe
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodesInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|MasterNotDiscoveredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ping
operator|.
name|unicast
operator|.
name|UnicastZenPing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalTestCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|NodeConfigurationSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|TestCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_comment
comment|/**  * Note, when talking to tribe client, no need to set the local flag on master read operations, it  * does it by default.  */
end_comment

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressFileSystems
argument_list|(
literal|"ExtrasFS"
argument_list|)
comment|// doesn't work with potential multi data path from test cluster yet
DECL|class|TribeIT
specifier|public
class|class
name|TribeIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|SECOND_CLUSTER_NODE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|SECOND_CLUSTER_NODE_PREFIX
init|=
literal|"node_tribe2"
decl_stmt|;
DECL|field|cluster2
specifier|private
specifier|static
name|InternalTestCluster
name|cluster2
decl_stmt|;
DECL|field|tribeNode
specifier|private
name|Node
name|tribeNode
decl_stmt|;
DECL|field|tribeClient
specifier|private
name|Client
name|tribeClient
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupSecondCluster
specifier|public
specifier|static
name|void
name|setupSecondCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|ESIntegTestCase
operator|.
name|beforeClass
argument_list|()
expr_stmt|;
name|NodeConfigurationSource
name|nodeConfigurationSource
init|=
operator|new
name|NodeConfigurationSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|NetworkModule
operator|.
name|HTTP_ENABLED
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Settings
name|transportClientSettings
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|cluster2
operator|=
operator|new
name|InternalTestCluster
argument_list|(
name|InternalTestCluster
operator|.
name|configuredNodeMode
argument_list|()
argument_list|,
name|randomLong
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|Strings
operator|.
name|randomBase64UUID
argument_list|(
name|getRandom
argument_list|()
argument_list|)
argument_list|,
name|nodeConfigurationSource
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|SECOND_CLUSTER_NODE_PREFIX
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
expr_stmt|;
name|cluster2
operator|.
name|beforeTest
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|cluster2
operator|.
name|ensureAtLeastNumDataNodes
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDownSecondCluster
specifier|public
specifier|static
name|void
name|tearDownSecondCluster
parameter_list|()
block|{
if|if
condition|(
name|cluster2
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|cluster2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cluster2
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|After
DECL|method|tearDownTribeNode
specifier|public
name|void
name|tearDownTribeNode
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster2
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|cluster2
operator|.
name|wipe
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster2
operator|.
name|afterTest
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tribeNode
operator|!=
literal|null
condition|)
block|{
name|tribeNode
operator|.
name|close
argument_list|()
expr_stmt|;
name|tribeNode
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|setupTribeNode
specifier|private
name|void
name|setupTribeNode
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|asMap
init|=
name|internalCluster
argument_list|()
operator|.
name|getDefaultSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
name|Settings
operator|.
name|Builder
name|tribe1Defaults
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Settings
operator|.
name|Builder
name|tribe2Defaults
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|asMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|tribe1Defaults
operator|.
name|put
argument_list|(
literal|"tribe.t1."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|tribe2Defaults
operator|.
name|put
argument_list|(
literal|"tribe.t2."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// give each tribe it's unicast hosts to connect to
name|tribe1Defaults
operator|.
name|putArray
argument_list|(
literal|"tribe.t1."
operator|+
name|UnicastZenPing
operator|.
name|DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|getUnicastHosts
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tribe1Defaults
operator|.
name|putArray
argument_list|(
literal|"tribe.t2."
operator|+
name|UnicastZenPing
operator|.
name|DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|getUnicastHosts
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Settings
name|merged
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"tribe.t1.cluster.name"
argument_list|,
name|internalCluster
argument_list|()
operator|.
name|getClusterName
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"tribe.t2.cluster.name"
argument_list|,
name|cluster2
operator|.
name|getClusterName
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"tribe.blocks.write"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"tribe.blocks.read"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|tribe1Defaults
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|tribe2Defaults
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|getDefaultSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
literal|"tribe_node"
argument_list|)
comment|// make sure we can identify threads from this node
operator|.
name|build
argument_list|()
decl_stmt|;
name|tribeNode
operator|=
operator|new
name|Node
argument_list|(
name|merged
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|tribeClient
operator|=
name|tribeNode
operator|.
name|client
argument_list|()
expr_stmt|;
block|}
DECL|method|testGlobalReadWriteBlocks
specifier|public
name|void
name|testGlobalReadWriteBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"create 2 indices, test1 on t1, and test2 on t2"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|setupTribeNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"tribe.blocks.write"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"tribe.blocks.metadata"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"wait till tribe has the same nodes as the 2 clusters"
argument_list|)
expr_stmt|;
name|awaitSameNodeCounts
argument_list|()
expr_stmt|;
comment|// wait till the tribe node connected to the cluster, by checking if the index exists in the cluster state
name|logger
operator|.
name|info
argument_list|(
literal|"wait till test1 and test2 exists in the tribe node state"
argument_list|)
expr_stmt|;
name|awaitIndicesInClusterState
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
try|try
block|{
name|tribeClient
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"cluster block should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClusterBlockException
name|e
parameter_list|)
block|{
comment|// all is well!
block|}
try|try
block|{
name|tribeClient
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareForceMerge
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"cluster block should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClusterBlockException
name|e
parameter_list|)
block|{
comment|// all is well!
block|}
try|try
block|{
name|tribeClient
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareForceMerge
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"cluster block should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClusterBlockException
name|e
parameter_list|)
block|{
comment|// all is well!
block|}
block|}
DECL|method|testIndexWriteBlocks
specifier|public
name|void
name|testIndexWriteBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"create 2 indices, test1 on t1, and test2 on t2"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"block_test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"block_test2"
argument_list|)
argument_list|)
expr_stmt|;
name|setupTribeNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"tribe.blocks.write.indices"
argument_list|,
literal|"block_*"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"wait till tribe has the same nodes as the 2 clusters"
argument_list|)
expr_stmt|;
name|awaitSameNodeCounts
argument_list|()
expr_stmt|;
comment|// wait till the tribe node connected to the cluster, by checking if the index exists in the cluster state
name|logger
operator|.
name|info
argument_list|(
literal|"wait till test1 and test2 exists in the tribe node state"
argument_list|)
expr_stmt|;
name|awaitIndicesInClusterState
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|,
literal|"block_test1"
argument_list|,
literal|"block_test2"
argument_list|)
expr_stmt|;
name|tribeClient
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
try|try
block|{
name|tribeClient
operator|.
name|prepareIndex
argument_list|(
literal|"block_test1"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"cluster block should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClusterBlockException
name|e
parameter_list|)
block|{
comment|// all is well!
block|}
name|tribeClient
operator|.
name|prepareIndex
argument_list|(
literal|"test2"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
try|try
block|{
name|tribeClient
operator|.
name|prepareIndex
argument_list|(
literal|"block_test2"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"cluster block should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClusterBlockException
name|e
parameter_list|)
block|{
comment|// all is well!
block|}
block|}
DECL|method|testOnConflictDrop
specifier|public
name|void
name|testOnConflictDrop
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"create 2 indices, test1 on t1, and test2 on t2"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster
argument_list|()
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"conflict"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"conflict"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster
argument_list|()
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|setupTribeNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"tribe.on_conflict"
argument_list|,
literal|"drop"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"wait till tribe has the same nodes as the 2 clusters"
argument_list|)
expr_stmt|;
name|awaitSameNodeCounts
argument_list|()
expr_stmt|;
comment|// wait till the tribe node connected to the cluster, by checking if the index exists in the cluster state
name|logger
operator|.
name|info
argument_list|(
literal|"wait till test1 and test2 exists in the tribe node state"
argument_list|)
expr_stmt|;
name|awaitIndicesInClusterState
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tribeClient
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"tribe.name"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tribeClient
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"tribe.name"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tribeClient
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
literal|"conflict"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOnConflictPrefer
specifier|public
name|void
name|testOnConflictPrefer
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnConflictPrefer
argument_list|(
name|randomBoolean
argument_list|()
condition|?
literal|"t1"
else|:
literal|"t2"
argument_list|)
expr_stmt|;
block|}
DECL|method|testOnConflictPrefer
specifier|private
name|void
name|testOnConflictPrefer
parameter_list|(
name|String
name|tribe
parameter_list|)
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"testing preference for tribe {}"
argument_list|,
name|tribe
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"create 2 indices, test1 on t1, and test2 on t2"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"conflict"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"conflict"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|setupTribeNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"tribe.on_conflict"
argument_list|,
literal|"prefer_"
operator|+
name|tribe
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"wait till tribe has the same nodes as the 2 clusters"
argument_list|)
expr_stmt|;
name|awaitSameNodeCounts
argument_list|()
expr_stmt|;
comment|// wait till the tribe node connected to the cluster, by checking if the index exists in the cluster state
name|logger
operator|.
name|info
argument_list|(
literal|"wait till test1 and test2 exists in the tribe node state"
argument_list|)
expr_stmt|;
name|awaitIndicesInClusterState
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|,
literal|"conflict"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tribeClient
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"tribe.name"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tribeClient
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"tribe.name"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tribeClient
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"conflict"
argument_list|)
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"tribe.name"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|tribe
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTribeOnOneCluster
specifier|public
name|void
name|testTribeOnOneCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|setupTribeNode
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"create 2 indices, test1 on t1, and test2 on t2"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait till the tribe node connected to the cluster, by checking if the index exists in the cluster state
name|logger
operator|.
name|info
argument_list|(
literal|"wait till test1 and test2 exists in the tribe node state"
argument_list|)
expr_stmt|;
name|awaitIndicesInClusterState
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"wait till tribe has the same nodes as the 2 clusters"
argument_list|)
expr_stmt|;
name|awaitSameNodeCounts
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tribeClient
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"create 2 docs through the tribe node"
argument_list|)
expr_stmt|;
name|tribeClient
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|tribeClient
operator|.
name|prepareIndex
argument_list|(
literal|"test2"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|tribeClient
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"verify they are there"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|tribeClient
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|tribeClient
operator|.
name|prepareSearch
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ClusterState
name|tribeState
init|=
name|tribeNode
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tribeState
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|mapping
argument_list|(
literal|"type1"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tribeState
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|mapping
argument_list|(
literal|"type1"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"write to another type"
argument_list|)
expr_stmt|;
name|tribeClient
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type2"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|tribeClient
operator|.
name|prepareIndex
argument_list|(
literal|"test2"
argument_list|,
literal|"type2"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|tribeClient
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"verify they are there"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|tribeClient
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|4l
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|tribeClient
operator|.
name|prepareSearch
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|4l
argument_list|)
expr_stmt|;
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ClusterState
name|tribeState
init|=
name|tribeNode
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tribeState
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|mapping
argument_list|(
literal|"type1"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tribeState
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|mapping
argument_list|(
literal|"type2"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tribeState
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|mapping
argument_list|(
literal|"type1"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tribeState
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|mapping
argument_list|(
literal|"type2"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"make sure master level write operations fail... (we don't really have a master)"
argument_list|)
expr_stmt|;
try|try
block|{
name|tribeClient
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"tribe_index"
argument_list|)
operator|.
name|setMasterNodeTimeout
argument_list|(
literal|"10ms"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MasterNotDiscoveredException
name|e
parameter_list|)
block|{
comment|// all is well!
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"delete an index, and make sure its reflected"
argument_list|)
expr_stmt|;
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|awaitIndicesNotInClusterState
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
try|try
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"stop a node, make sure its reflected"
argument_list|)
expr_stmt|;
name|cluster2
operator|.
name|stopRandomDataNode
argument_list|()
expr_stmt|;
name|awaitSameNodeCounts
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cluster2
operator|.
name|startNode
argument_list|()
expr_stmt|;
name|awaitSameNodeCounts
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testCloseAndOpenIndex
specifier|public
name|void
name|testCloseAndOpenIndex
parameter_list|()
throws|throws
name|Exception
block|{
comment|//create an index and close it even before starting the tribe node
name|assertAcked
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|internalCluster
argument_list|()
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClose
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|setupTribeNode
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|awaitSameNodeCounts
argument_list|()
expr_stmt|;
comment|//the closed index is not part of the tribe node cluster state
name|ClusterState
name|tribeState
init|=
name|tribeNode
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tribeState
operator|.
name|getMetaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
literal|"test1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|//open the index, it becomes part of the tribe node cluster state
name|assertAcked
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOpen
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|awaitIndicesInClusterState
argument_list|(
literal|"test1"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|internalCluster
argument_list|()
argument_list|)
expr_stmt|;
comment|//create a second index, wait till it is seen from within the tribe node
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|awaitIndicesInClusterState
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|cluster2
argument_list|)
expr_stmt|;
comment|//close the second index, wait till it gets removed from the tribe node cluster state
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClose
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|awaitIndicesNotInClusterState
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
comment|//open the second index, wait till it gets added back to the tribe node cluster state
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOpen
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|awaitIndicesInClusterState
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|cluster2
argument_list|)
expr_stmt|;
block|}
DECL|method|awaitIndicesInClusterState
specifier|private
name|void
name|awaitIndicesInClusterState
parameter_list|(
specifier|final
name|String
modifier|...
name|indices
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ClusterState
name|tribeState
init|=
name|tribeNode
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|assertTrue
argument_list|(
name|tribeState
operator|.
name|getMetaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tribeState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|awaitIndicesNotInClusterState
specifier|private
name|void
name|awaitIndicesNotInClusterState
parameter_list|(
specifier|final
name|String
modifier|...
name|indices
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ClusterState
name|tribeState
init|=
name|tribeNode
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|assertFalse
argument_list|(
name|tribeState
operator|.
name|getMetaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tribeState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureGreen
specifier|private
name|void
name|ensureGreen
parameter_list|(
name|TestCluster
name|testCluster
parameter_list|)
block|{
name|ClusterHealthResponse
name|actionGet
init|=
name|testCluster
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|Requests
operator|.
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
operator|.
name|waitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|waitForRelocatingShards
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|actionGet
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"ensureGreen timed out, cluster state:\n{}\n{}"
argument_list|,
name|testCluster
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|testCluster
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePendingClusterTasks
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"timed out waiting for green state"
argument_list|,
name|actionGet
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|actionGet
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|awaitSameNodeCounts
specifier|private
name|void
name|awaitSameNodeCounts
parameter_list|()
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|DiscoveryNodes
name|tribeNodes
init|=
name|tribeNode
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|countDataNodesForTribe
argument_list|(
literal|"t1"
argument_list|,
name|tribeNodes
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getNodes
argument_list|()
operator|.
name|dataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|countDataNodesForTribe
argument_list|(
literal|"t2"
argument_list|,
name|tribeNodes
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getNodes
argument_list|()
operator|.
name|dataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|countDataNodesForTribe
specifier|private
name|int
name|countDataNodesForTribe
parameter_list|(
name|String
name|tribeName
parameter_list|,
name|DiscoveryNodes
name|nodes
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|dataNode
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|tribeName
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"tribe.name"
argument_list|)
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
DECL|method|getUnicastHosts
specifier|public
name|String
index|[]
name|getUnicastHosts
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|unicastHosts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|NodesInfoResponse
name|nodeInfos
init|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesInfo
argument_list|()
operator|.
name|clear
argument_list|()
operator|.
name|setTransport
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeInfo
name|info
range|:
name|nodeInfos
operator|.
name|getNodes
argument_list|()
control|)
block|{
name|TransportAddress
name|address
init|=
name|info
operator|.
name|getTransport
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
decl_stmt|;
name|unicastHosts
operator|.
name|add
argument_list|(
name|address
operator|.
name|getAddress
argument_list|()
operator|+
literal|":"
operator|+
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|unicastHosts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|unicastHosts
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

