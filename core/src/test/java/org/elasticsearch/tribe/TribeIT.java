begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.tribe
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|tribe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|DestructiveOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoverySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|MasterNotDiscoveredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalTestCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|NodeConfigurationSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|MockTcpTransportPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsInAnyOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_comment
comment|/**  * Note, when talking to tribe client, no need to set the local flag on master read operations, it  * does it by default.  */
end_comment

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ESIntegTestCase
operator|.
name|Scope
operator|.
name|SUITE
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|,
name|numClientNodes
operator|=
literal|0
argument_list|,
name|transportClientRatio
operator|=
literal|0.0
argument_list|)
DECL|class|TribeIT
specifier|public
class|class
name|TribeIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|TRIBE_NODE
specifier|private
specifier|static
specifier|final
name|String
name|TRIBE_NODE
init|=
literal|"tribe_node"
decl_stmt|;
DECL|field|cluster1
specifier|private
specifier|static
name|InternalTestCluster
name|cluster1
decl_stmt|;
DECL|field|cluster2
specifier|private
specifier|static
name|InternalTestCluster
name|cluster2
decl_stmt|;
comment|/**      * A predicate that is used to select none of the remote clusters      **/
DECL|field|NONE
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|InternalTestCluster
argument_list|>
name|NONE
init|=
name|c
lambda|->
literal|false
decl_stmt|;
comment|/**      * A predicate that is used to select the remote cluster 1 only      **/
DECL|field|CLUSTER1_ONLY
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|InternalTestCluster
argument_list|>
name|CLUSTER1_ONLY
init|=
name|c
lambda|->
name|c
operator|.
name|getClusterName
argument_list|()
operator|.
name|equals
argument_list|(
name|cluster1
operator|.
name|getClusterName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * A predicate that is used to select the remote cluster 2 only      **/
DECL|field|CLUSTER2_ONLY
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|InternalTestCluster
argument_list|>
name|CLUSTER2_ONLY
init|=
name|c
lambda|->
name|c
operator|.
name|getClusterName
argument_list|()
operator|.
name|equals
argument_list|(
name|cluster2
operator|.
name|getClusterName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * A predicate that is used to select the the two remote clusters      **/
DECL|field|ALL
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|InternalTestCluster
argument_list|>
name|ALL
init|=
name|c
lambda|->
literal|true
decl_stmt|;
annotation|@
name|Override
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|super
operator|.
name|nodeSettings
argument_list|(
name|nodeOrdinal
argument_list|)
argument_list|)
comment|// Required to delete _all indices on remote clusters
operator|.
name|put
argument_list|(
name|DestructiveOperations
operator|.
name|REQUIRES_NAME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|getMockPlugins
argument_list|()
return|;
block|}
annotation|@
name|Before
DECL|method|startRemoteClusters
specifier|public
name|void
name|startRemoteClusters
parameter_list|()
block|{
specifier|final
name|int
name|minNumDataNodes
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|maxNumDataNodes
init|=
literal|4
decl_stmt|;
specifier|final
name|NodeConfigurationSource
name|nodeConfigurationSource
init|=
name|getNodeConfigSource
argument_list|()
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|plugins
init|=
name|nodePlugins
argument_list|()
decl_stmt|;
if|if
condition|(
name|cluster1
operator|==
literal|null
condition|)
block|{
name|cluster1
operator|=
operator|new
name|InternalTestCluster
argument_list|(
name|randomLong
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
literal|true
argument_list|,
name|minNumDataNodes
argument_list|,
name|maxNumDataNodes
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|nodeConfigurationSource
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|"cluster_1"
argument_list|,
name|plugins
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cluster2
operator|==
literal|null
condition|)
block|{
name|cluster2
operator|=
operator|new
name|InternalTestCluster
argument_list|(
name|randomLong
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
literal|true
argument_list|,
name|minNumDataNodes
argument_list|,
name|maxNumDataNodes
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|nodeConfigurationSource
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|"cluster_2"
argument_list|,
name|plugins
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doWithAllClusters
argument_list|(
name|c
lambda|->
block|{
try|try
block|{
name|c
operator|.
name|beforeTest
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|c
operator|.
name|ensureAtLeastNumDataNodes
argument_list|(
name|minNumDataNodes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to set up remote cluster ["
operator|+
name|c
operator|.
name|getClusterName
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|wipeRemoteClusters
specifier|public
name|void
name|wipeRemoteClusters
parameter_list|()
block|{
name|doWithAllClusters
argument_list|(
name|c
lambda|->
block|{
specifier|final
name|String
name|clusterName
init|=
name|c
operator|.
name|getClusterName
argument_list|()
decl_stmt|;
try|try
block|{
name|c
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|MetaData
operator|.
name|ALL
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|c
operator|.
name|afterTest
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to clean up remote cluster ["
operator|+
name|clusterName
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|stopRemoteClusters
specifier|public
specifier|static
name|void
name|stopRemoteClusters
parameter_list|()
block|{
try|try
block|{
name|doWithAllClusters
argument_list|(
name|InternalTestCluster
operator|::
name|close
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster1
operator|=
literal|null
expr_stmt|;
name|cluster2
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|startTribeNode
specifier|private
name|Releasable
name|startTribeNode
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|startTribeNode
argument_list|(
name|ALL
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
return|;
block|}
DECL|method|startTribeNode
specifier|private
name|Releasable
name|startTribeNode
parameter_list|(
name|Predicate
argument_list|<
name|InternalTestCluster
argument_list|>
name|filter
parameter_list|,
name|Settings
name|settings
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|node
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|createTribeSettings
argument_list|(
name|filter
argument_list|)
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
return|return
parameter_list|()
lambda|->
block|{
try|try
block|{
while|while
condition|(
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|s
lambda|->
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to close tribe node ["
operator|+
name|node
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|;
block|}
DECL|method|createTribeSettings
specifier|private
name|Settings
operator|.
name|Builder
name|createTribeSettings
parameter_list|(
name|Predicate
argument_list|<
name|InternalTestCluster
argument_list|>
name|filter
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|filter
argument_list|)
expr_stmt|;
specifier|final
name|Settings
operator|.
name|Builder
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|Node
operator|.
name|NODE_NAME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|TRIBE_NODE
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|Node
operator|.
name|NODE_DATA_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|Node
operator|.
name|NODE_MASTER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|NetworkModule
operator|.
name|HTTP_ENABLED
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|NetworkModule
operator|.
name|TRANSPORT_TYPE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|MockTcpTransportPlugin
operator|.
name|MOCK_TCP_TRANSPORT_NAME
argument_list|)
expr_stmt|;
name|doWithAllClusters
argument_list|(
name|filter
argument_list|,
name|c
lambda|->
block|{
name|String
name|tribeSetting
init|=
literal|"tribe."
operator|+
name|c
operator|.
name|getClusterName
argument_list|()
operator|+
literal|"."
decl_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|tribeSetting
operator|+
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|c
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|tribeSetting
operator|+
name|DiscoverySettings
operator|.
name|INITIAL_STATE_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"100ms"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|tribeSetting
operator|+
name|NetworkModule
operator|.
name|TRANSPORT_TYPE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|MockTcpTransportPlugin
operator|.
name|MOCK_TCP_TRANSPORT_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|settings
return|;
block|}
DECL|method|testGlobalReadWriteBlocks
specifier|public
name|void
name|testGlobalReadWriteBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|additionalSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"tribe.blocks.write"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"tribe.blocks.metadata"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
init|(
name|Releasable
name|tribeNode
init|=
name|startTribeNode
argument_list|(
name|ALL
argument_list|,
name|additionalSettings
argument_list|)
init|)
block|{
comment|// Creates 2 indices, test1 on cluster1 and test2 on cluster2
name|assertAcked
argument_list|(
name|cluster1
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|cluster1
operator|.
name|client
argument_list|()
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the tribe node to connect to the two remote clusters
name|assertNodes
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
comment|// Wait for the tribe node to retrieve the indices into its cluster state
name|assertIndicesExist
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
comment|// Writes not allowed through the tribe node
name|ClusterBlockException
name|e
init|=
name|expectThrows
argument_list|(
name|ClusterBlockException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"blocked by: [BAD_REQUEST/11/tribe node, write not allowed]"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|ClusterBlockException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test2"
argument_list|,
literal|"type2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"blocked by: [BAD_REQUEST/11/tribe node, write not allowed]"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|ClusterBlockException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareForceMerge
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"blocked by: [BAD_REQUEST/10/tribe node, metadata not allowed]"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|ClusterBlockException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareForceMerge
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"blocked by: [BAD_REQUEST/10/tribe node, metadata not allowed]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIndexWriteBlocks
specifier|public
name|void
name|testIndexWriteBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|additionalSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"tribe.blocks.write.indices"
argument_list|,
literal|"block_*"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
init|(
name|Releasable
name|tribeNode
init|=
name|startTribeNode
argument_list|(
name|ALL
argument_list|,
name|additionalSettings
argument_list|)
init|)
block|{
comment|// Creates 2 indices on each remote cluster, test1 and block_test1 on cluster1 and test2 and block_test2 on cluster2
name|assertAcked
argument_list|(
name|cluster1
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster1
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"block_test1"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|cluster1
operator|.
name|client
argument_list|()
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"block_test2"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the tribe node to connect to the two remote clusters
name|assertNodes
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
comment|// Wait for the tribe node to retrieve the indices into its cluster state
name|assertIndicesExist
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"test1"
argument_list|,
literal|"test2"
argument_list|,
literal|"block_test1"
argument_list|,
literal|"block_test2"
argument_list|)
expr_stmt|;
comment|// Writes allowed through the tribe node for test1/test2 indices
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test2"
argument_list|,
literal|"type2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ClusterBlockException
name|e
decl_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|ClusterBlockException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"block_test1"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"blocked by: [FORBIDDEN/8/index write (api)]"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|ClusterBlockException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"block_test2"
argument_list|,
literal|"type2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"blocked by: [FORBIDDEN/8/index write (api)]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOnConflictDrop
specifier|public
name|void
name|testOnConflictDrop
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|additionalSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"tribe.on_conflict"
argument_list|,
literal|"drop"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
init|(
name|Releasable
name|tribeNode
init|=
name|startTribeNode
argument_list|(
name|ALL
argument_list|,
name|additionalSettings
argument_list|)
init|)
block|{
comment|// Creates 2 indices on each remote cluster, test1 and conflict on cluster1 and test2 and also conflict on cluster2
name|assertAcked
argument_list|(
name|cluster1
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster1
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"conflict"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|cluster1
operator|.
name|client
argument_list|()
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"conflict"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the tribe node to connect to the two remote clusters
name|assertNodes
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
comment|// Wait for the tribe node to retrieve the indices into its cluster state
name|assertIndicesExist
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
literal|"test1"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"tribe.name"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|cluster1
operator|.
name|getClusterName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
literal|"test2"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"tribe.name"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|cluster2
operator|.
name|getClusterName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
literal|"conflict"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOnConflictPrefer
specifier|public
name|void
name|testOnConflictPrefer
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|preference
init|=
name|randomFrom
argument_list|(
name|cluster1
argument_list|,
name|cluster2
argument_list|)
operator|.
name|getClusterName
argument_list|()
decl_stmt|;
name|Settings
name|additionalSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"tribe.on_conflict"
argument_list|,
literal|"prefer_"
operator|+
name|preference
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
init|(
name|Releasable
name|tribeNode
init|=
name|startTribeNode
argument_list|(
name|ALL
argument_list|,
name|additionalSettings
argument_list|)
init|)
block|{
name|assertAcked
argument_list|(
name|cluster1
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster1
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"shared"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|cluster1
operator|.
name|client
argument_list|()
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"shared"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the tribe node to connect to the two remote clusters
name|assertNodes
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
comment|// Wait for the tribe node to retrieve the indices into its cluster state
name|assertIndicesExist
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"test1"
argument_list|,
literal|"test2"
argument_list|,
literal|"shared"
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
literal|"test1"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"tribe.name"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|cluster1
operator|.
name|getClusterName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
literal|"test2"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"tribe.name"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|cluster2
operator|.
name|getClusterName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
literal|"shared"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"shared"
argument_list|)
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"tribe.name"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|preference
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTribeOnOneCluster
specifier|public
name|void
name|testTribeOnOneCluster
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Releasable
name|tribeNode
init|=
name|startTribeNode
argument_list|()
init|)
block|{
comment|// Creates 2 indices, test1 on cluster1 and test2 on cluster2
name|assertAcked
argument_list|(
name|cluster1
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|cluster1
operator|.
name|client
argument_list|()
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the tribe node to connect to the two remote clusters
name|assertNodes
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
comment|// Wait for the tribe node to retrieve the indices into its cluster state
name|assertIndicesExist
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
comment|// Creates two docs using the tribe node
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test2"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that documents are searchable using the tribe node
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
comment|// Using assertBusy to check that the mappings are in the tribe node cluster state
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
name|ClusterState
name|clusterState
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|mapping
argument_list|(
literal|"type1"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|mapping
argument_list|(
literal|"type1"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// More documents with another type
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type2"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test2"
argument_list|,
literal|"type2"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
name|ClusterState
name|clusterState
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|mapping
argument_list|(
literal|"type1"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|mapping
argument_list|(
literal|"type2"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|mapping
argument_list|(
literal|"type1"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|mapping
argument_list|(
literal|"type2"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// Make sure master level write operations fail... (we don't really have a master)
name|expectThrows
argument_list|(
name|MasterNotDiscoveredException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"tribe_index"
argument_list|)
operator|.
name|setMasterNodeTimeout
argument_list|(
literal|"10ms"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// Now delete an index and makes sure it's reflected in cluster state
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
name|ClusterState
name|clusterState
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|clusterState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|hasIndex
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCloseAndOpenIndex
specifier|public
name|void
name|testCloseAndOpenIndex
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Creates an index on remote cluster 1
name|assertTrue
argument_list|(
name|cluster1
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"first"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|cluster1
operator|.
name|client
argument_list|()
argument_list|)
expr_stmt|;
comment|// Closes the index
name|assertTrue
argument_list|(
name|cluster1
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClose
argument_list|(
literal|"first"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Releasable
name|tribeNode
init|=
name|startTribeNode
argument_list|()
init|)
block|{
comment|// Wait for the tribe node to connect to the two remote clusters
name|assertNodes
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
comment|// The closed index is not part of the tribe node cluster state
name|ClusterState
name|clusterState
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|clusterState
operator|.
name|getMetaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Open the index, it becomes part of the tribe node cluster state
name|assertTrue
argument_list|(
name|cluster1
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOpen
argument_list|(
literal|"first"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|assertIndicesExist
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"first"
argument_list|)
expr_stmt|;
comment|// Create a second index, wait till it is seen from within the tribe node
name|assertTrue
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"second"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|assertIndicesExist
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"first"
argument_list|,
literal|"second"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
argument_list|)
expr_stmt|;
comment|// Close the second index, wait till it gets removed from the tribe node cluster state
name|assertTrue
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClose
argument_list|(
literal|"second"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|assertIndicesExist
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"first"
argument_list|)
expr_stmt|;
comment|// Open the second index, wait till it gets added back to the tribe node cluster state
name|assertTrue
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOpen
argument_list|(
literal|"second"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|assertIndicesExist
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"first"
argument_list|,
literal|"second"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|cluster2
operator|.
name|client
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test that the tribe node's cluster state correctly reflect the number of nodes      * of the remote clusters the tribe node is connected to.      */
DECL|method|testClusterStateNodes
specifier|public
name|void
name|testClusterStateNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Predicate
argument_list|<
name|InternalTestCluster
argument_list|>
argument_list|>
name|predicates
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|NONE
argument_list|,
name|CLUSTER1_ONLY
argument_list|,
name|CLUSTER2_ONLY
argument_list|,
name|ALL
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|predicates
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Predicate
argument_list|<
name|InternalTestCluster
argument_list|>
name|predicate
range|:
name|predicates
control|)
block|{
try|try
init|(
name|Releasable
name|tribeNode
init|=
name|startTribeNode
argument_list|(
name|predicate
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
init|)
block|{
name|assertNodes
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertIndicesExist
specifier|private
name|void
name|assertIndicesExist
parameter_list|(
name|Client
name|client
parameter_list|,
name|String
modifier|...
name|indices
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
name|ClusterState
name|state
init|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|setRoutingTable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMetaData
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getMetaData
argument_list|()
operator|.
name|getIndices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indices
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|assertTrue
argument_list|(
name|state
operator|.
name|getMetaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureGreen
specifier|private
name|void
name|ensureGreen
parameter_list|(
name|Client
name|client
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
name|ClusterHealthResponse
name|clusterHealthResponse
init|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForActiveShards
argument_list|(
literal|0
argument_list|)
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForNoRelocatingShards
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterHealthResponse
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNodes
specifier|private
specifier|static
name|void
name|assertNodes
parameter_list|(
name|Predicate
argument_list|<
name|InternalTestCluster
argument_list|>
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|expectedNodes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
argument_list|)
decl_stmt|;
name|doWithAllClusters
argument_list|(
name|filter
argument_list|,
name|c
lambda|->
block|{
comment|// Adds the tribe client node dedicated to this remote cluster
for|for
control|(
name|String
name|tribeNode
range|:
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
control|)
block|{
name|expectedNodes
operator|.
name|add
argument_list|(
name|tribeNode
operator|+
literal|"/"
operator|+
name|c
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Adds the remote clusters nodes names
name|Collections
operator|.
name|addAll
argument_list|(
name|expectedNodes
argument_list|,
name|c
operator|.
name|getNodeNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
name|ClusterState
name|state
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|setNodes
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|state
operator|.
name|getNodes
argument_list|()
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|DiscoveryNode
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|nodes
argument_list|,
name|containsInAnyOrder
argument_list|(
name|expectedNodes
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|doWithAllClusters
specifier|private
specifier|static
name|void
name|doWithAllClusters
parameter_list|(
name|Consumer
argument_list|<
name|InternalTestCluster
argument_list|>
name|consumer
parameter_list|)
block|{
name|doWithAllClusters
argument_list|(
name|cluster
lambda|->
name|cluster
operator|!=
literal|null
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
DECL|method|doWithAllClusters
specifier|private
specifier|static
name|void
name|doWithAllClusters
parameter_list|(
name|Predicate
argument_list|<
name|InternalTestCluster
argument_list|>
name|predicate
parameter_list|,
name|Consumer
argument_list|<
name|InternalTestCluster
argument_list|>
name|consumer
parameter_list|)
block|{
name|Stream
operator|.
name|of
argument_list|(
name|cluster1
argument_list|,
name|cluster2
argument_list|)
operator|.
name|filter
argument_list|(
name|predicate
argument_list|)
operator|.
name|forEach
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

