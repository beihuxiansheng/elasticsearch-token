begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_class
DECL|class|SecurityTests
specifier|public
class|class
name|SecurityTests
extends|extends
name|ESTestCase
block|{
DECL|method|testEnsureExists
specifier|public
name|void
name|testEnsureExists
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
name|createTempDir
argument_list|()
decl_stmt|;
comment|// directory exists
name|Path
name|exists
init|=
name|p
operator|.
name|resolve
argument_list|(
literal|"exists"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|exists
argument_list|)
expr_stmt|;
name|Security
operator|.
name|ensureDirectoryExists
argument_list|(
name|exists
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createTempFile
argument_list|(
name|exists
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnsureNotExists
specifier|public
name|void
name|testEnsureNotExists
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
name|createTempDir
argument_list|()
decl_stmt|;
comment|// directory does not exist: create it
name|Path
name|notExists
init|=
name|p
operator|.
name|resolve
argument_list|(
literal|"notexists"
argument_list|)
decl_stmt|;
name|Security
operator|.
name|ensureDirectoryExists
argument_list|(
name|notExists
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createTempFile
argument_list|(
name|notExists
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnsureRegularFile
specifier|public
name|void
name|testEnsureRegularFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
name|createTempDir
argument_list|()
decl_stmt|;
comment|// regular file
name|Path
name|regularFile
init|=
name|p
operator|.
name|resolve
argument_list|(
literal|"regular"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|regularFile
argument_list|)
expr_stmt|;
try|try
block|{
name|Security
operator|.
name|ensureDirectoryExists
argument_list|(
name|regularFile
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{}
block|}
comment|/** can't execute processes */
DECL|method|testProcessExecution
specifier|public
name|void
name|testProcessExecution
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test requires security manager"
argument_list|,
name|System
operator|.
name|getSecurityManager
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
literal|"ls"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|expected
parameter_list|)
block|{}
block|}
block|}
end_class

end_unit

