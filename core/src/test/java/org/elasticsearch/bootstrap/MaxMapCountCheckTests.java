begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressLoggerChecks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|MaxMapCountCheckTests
specifier|public
class|class
name|MaxMapCountCheckTests
extends|extends
name|ESTestCase
block|{
DECL|method|testGetMaxMapCountOnLinux
specifier|public
name|void
name|testGetMaxMapCountOnLinux
parameter_list|()
block|{
if|if
condition|(
name|Constants
operator|.
name|LINUX
condition|)
block|{
specifier|final
name|BootstrapCheck
operator|.
name|MaxMapCountCheck
name|check
init|=
operator|new
name|BootstrapCheck
operator|.
name|MaxMapCountCheck
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|check
operator|.
name|getMaxMapCount
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressLoggerChecks
argument_list|(
name|reason
operator|=
literal|"mock usage"
argument_list|)
DECL|method|testGetMaxMapCount
specifier|public
name|void
name|testGetMaxMapCount
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|long
name|procSysVmMaxMapCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|BufferedReader
name|reader
init|=
name|mock
argument_list|(
name|BufferedReader
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|procSysVmMaxMapCount
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|procSysVmMaxMapCountPath
init|=
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/proc/sys/vm/max_map_count"
argument_list|)
decl_stmt|;
name|BootstrapCheck
operator|.
name|MaxMapCountCheck
name|check
init|=
operator|new
name|BootstrapCheck
operator|.
name|MaxMapCountCheck
argument_list|()
block|{
annotation|@
name|Override
name|BufferedReader
name|getBufferedReader
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|path
argument_list|,
name|procSysVmMaxMapCountPath
argument_list|)
expr_stmt|;
return|return
name|reader
return|;
block|}
block|}
decl_stmt|;
name|assertThat
argument_list|(
name|check
operator|.
name|getMaxMapCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|procSysVmMaxMapCount
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|reader
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|reset
argument_list|(
name|reader
argument_list|)
expr_stmt|;
specifier|final
name|IOException
name|ioException
init|=
operator|new
name|IOException
argument_list|(
literal|"fatal"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|ioException
argument_list|)
expr_stmt|;
specifier|final
name|Logger
name|logger
init|=
name|mock
argument_list|(
name|Logger
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|check
operator|.
name|getMaxMapCount
argument_list|(
name|logger
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|logger
argument_list|)
operator|.
name|warn
argument_list|(
name|argThat
argument_list|(
name|argumentMatcher
argument_list|(
literal|"I/O exception while trying to read [/proc/sys/vm/max_map_count]"
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|ioException
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|reader
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|reset
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|logger
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"eof"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|check
operator|.
name|getMaxMapCount
argument_list|(
name|logger
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|logger
argument_list|)
operator|.
name|warn
argument_list|(
name|argThat
argument_list|(
name|argumentMatcher
argument_list|(
literal|"unable to parse vm.max_map_count [eof]"
argument_list|)
argument_list|)
argument_list|,
name|any
argument_list|(
name|NumberFormatException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|reader
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|argumentMatcher
specifier|private
name|ArgumentMatcher
argument_list|<
name|Supplier
argument_list|<
name|?
argument_list|>
argument_list|>
name|argumentMatcher
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
return|return
operator|new
name|ArgumentMatcher
argument_list|<
name|Supplier
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
specifier|final
name|Supplier
argument_list|<
name|?
argument_list|>
name|supplier
init|=
operator|(
name|Supplier
argument_list|<
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
specifier|final
name|ParameterizedMessage
name|parameterizedMessage
init|=
operator|(
name|ParameterizedMessage
operator|)
name|supplier
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|parameterizedMessage
operator|.
name|getFormattedMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|message
argument_list|)
return|;
block|}
block|}
empty_stmt|;
block|}
DECL|method|testMaxMapCountCheckRead
specifier|public
name|void
name|testMaxMapCountCheckRead
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|rawProcSysVmMaxMapCount
init|=
name|Long
operator|.
name|toString
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BufferedReader
name|reader
init|=
name|mock
argument_list|(
name|BufferedReader
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rawProcSysVmMaxMapCount
argument_list|)
expr_stmt|;
specifier|final
name|BootstrapCheck
operator|.
name|MaxMapCountCheck
name|check
init|=
operator|new
name|BootstrapCheck
operator|.
name|MaxMapCountCheck
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|check
operator|.
name|readProcSysVmMaxMapCount
argument_list|(
name|reader
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|rawProcSysVmMaxMapCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMaxMapCountCheckParse
specifier|public
name|void
name|testMaxMapCountCheckParse
parameter_list|()
block|{
specifier|final
name|long
name|procSysVmMaxMapCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|BootstrapCheck
operator|.
name|MaxMapCountCheck
name|check
init|=
operator|new
name|BootstrapCheck
operator|.
name|MaxMapCountCheck
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|check
operator|.
name|parseProcSysVmMaxMapCount
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|procSysVmMaxMapCount
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|procSysVmMaxMapCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

