begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|BoundTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|BootstrapCheckTests
specifier|public
class|class
name|BootstrapCheckTests
extends|extends
name|ESTestCase
block|{
DECL|method|testNonProductionMode
specifier|public
name|void
name|testNonProductionMode
parameter_list|()
block|{
comment|// nothing should happen since we are in non-production mode
specifier|final
name|List
argument_list|<
name|TransportAddress
argument_list|>
name|transportAddresses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|TransportAddress
name|localTransportAddress
init|=
name|mock
argument_list|(
name|TransportAddress
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|localTransportAddress
operator|.
name|isLoopbackOrLinkLocalAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|transportAddresses
operator|.
name|add
argument_list|(
name|localTransportAddress
argument_list|)
expr_stmt|;
block|}
name|TransportAddress
name|publishAddress
init|=
name|mock
argument_list|(
name|TransportAddress
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|publishAddress
operator|.
name|isLoopbackOrLinkLocalAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BoundTransportAddress
name|boundTransportAddress
init|=
name|mock
argument_list|(
name|BoundTransportAddress
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|boundTransportAddress
operator|.
name|boundAddresses
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|transportAddresses
operator|.
name|toArray
argument_list|(
operator|new
name|TransportAddress
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|boundTransportAddress
operator|.
name|publishAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|publishAddress
argument_list|)
expr_stmt|;
name|BootstrapCheck
operator|.
name|check
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|boundTransportAddress
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnforceLimitsWhenBoundToNonLocalAddress
specifier|public
name|void
name|testEnforceLimitsWhenBoundToNonLocalAddress
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|TransportAddress
argument_list|>
name|transportAddresses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|TransportAddress
name|nonLocalTransportAddress
init|=
name|mock
argument_list|(
name|TransportAddress
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nonLocalTransportAddress
operator|.
name|isLoopbackOrLinkLocalAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|transportAddresses
operator|.
name|add
argument_list|(
name|nonLocalTransportAddress
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|7
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|TransportAddress
name|randomTransportAddress
init|=
name|mock
argument_list|(
name|TransportAddress
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|randomTransportAddress
operator|.
name|isLoopbackOrLinkLocalAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|transportAddresses
operator|.
name|add
argument_list|(
name|randomTransportAddress
argument_list|)
expr_stmt|;
block|}
specifier|final
name|TransportAddress
name|publishAddress
init|=
name|mock
argument_list|(
name|TransportAddress
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|publishAddress
operator|.
name|isLoopbackOrLinkLocalAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|BoundTransportAddress
name|boundTransportAddress
init|=
name|mock
argument_list|(
name|BoundTransportAddress
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|transportAddresses
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|boundTransportAddress
operator|.
name|boundAddresses
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|transportAddresses
operator|.
name|toArray
argument_list|(
operator|new
name|TransportAddress
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|boundTransportAddress
operator|.
name|publishAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|publishAddress
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|BootstrapCheck
operator|.
name|enforceLimits
argument_list|(
name|boundTransportAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnforceLimitsWhenPublishingToNonLocalAddress
specifier|public
name|void
name|testEnforceLimitsWhenPublishingToNonLocalAddress
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|TransportAddress
argument_list|>
name|transportAddresses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|TransportAddress
name|randomTransportAddress
init|=
name|mock
argument_list|(
name|TransportAddress
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|randomTransportAddress
operator|.
name|isLoopbackOrLinkLocalAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|transportAddresses
operator|.
name|add
argument_list|(
name|randomTransportAddress
argument_list|)
expr_stmt|;
block|}
specifier|final
name|TransportAddress
name|publishAddress
init|=
name|mock
argument_list|(
name|TransportAddress
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|publishAddress
operator|.
name|isLoopbackOrLinkLocalAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|BoundTransportAddress
name|boundTransportAddress
init|=
name|mock
argument_list|(
name|BoundTransportAddress
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|boundTransportAddress
operator|.
name|boundAddresses
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|transportAddresses
operator|.
name|toArray
argument_list|(
operator|new
name|TransportAddress
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|boundTransportAddress
operator|.
name|publishAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|publishAddress
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|BootstrapCheck
operator|.
name|enforceLimits
argument_list|(
name|boundTransportAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExceptionAggregation
specifier|public
name|void
name|testExceptionAggregation
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|BootstrapCheck
operator|.
name|Check
argument_list|>
name|checks
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|BootstrapCheck
operator|.
name|Check
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|errorMessage
parameter_list|()
block|{
return|return
literal|"first"
return|;
block|}
block|}
argument_list|,
operator|new
name|BootstrapCheck
operator|.
name|Check
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|errorMessage
parameter_list|()
block|{
return|return
literal|"second"
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|RuntimeException
name|e
init|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|checks
argument_list|,
literal|"testExceptionAggregation"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"bootstrap checks failed"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"first"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"second"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Throwable
index|[]
name|suppressed
init|=
name|e
operator|.
name|getSuppressed
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|suppressed
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|suppressed
index|[
literal|0
index|]
argument_list|,
name|instanceOf
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|suppressed
index|[
literal|0
index|]
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"first"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|suppressed
index|[
literal|1
index|]
argument_list|,
name|instanceOf
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|suppressed
index|[
literal|1
index|]
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"second"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHeapSizeCheck
specifier|public
name|void
name|testHeapSizeCheck
parameter_list|()
block|{
specifier|final
name|int
name|initial
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|max
init|=
name|randomIntBetween
argument_list|(
name|initial
operator|+
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|initialHeapSize
init|=
operator|new
name|AtomicLong
argument_list|(
name|initial
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|maxHeapSize
init|=
operator|new
name|AtomicLong
argument_list|(
name|max
argument_list|)
decl_stmt|;
specifier|final
name|BootstrapCheck
operator|.
name|HeapSizeCheck
name|check
init|=
operator|new
name|BootstrapCheck
operator|.
name|HeapSizeCheck
argument_list|()
block|{
annotation|@
name|Override
name|long
name|getInitialHeapSize
parameter_list|()
block|{
return|return
name|initialHeapSize
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
name|long
name|getMaxHeapSize
parameter_list|()
block|{
return|return
name|maxHeapSize
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|RuntimeException
name|e
init|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|check
argument_list|)
argument_list|,
literal|"testHeapSizeCheck"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"initial heap size ["
operator|+
name|initialHeapSize
operator|.
name|get
argument_list|()
operator|+
literal|"] "
operator|+
literal|"not equal to maximum heap size ["
operator|+
name|maxHeapSize
operator|.
name|get
argument_list|()
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
name|initialHeapSize
operator|.
name|set
argument_list|(
name|maxHeapSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|check
argument_list|)
argument_list|,
literal|"testHeapSizeCheck"
argument_list|)
expr_stmt|;
comment|// nothing should happen if the initial heap size or the max
comment|// heap size is not available
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|initialHeapSize
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maxHeapSize
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|check
argument_list|)
argument_list|,
literal|"testHeapSizeCheck"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileDescriptorLimits
specifier|public
name|void
name|testFileDescriptorLimits
parameter_list|()
block|{
specifier|final
name|boolean
name|osX
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
comment|// simulates OS X versus non-OS X
specifier|final
name|int
name|limit
init|=
name|osX
condition|?
literal|10240
else|:
literal|1
operator|<<
literal|16
decl_stmt|;
specifier|final
name|AtomicLong
name|maxFileDescriptorCount
init|=
operator|new
name|AtomicLong
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|limit
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BootstrapCheck
operator|.
name|FileDescriptorCheck
name|check
decl_stmt|;
if|if
condition|(
name|osX
condition|)
block|{
name|check
operator|=
operator|new
name|BootstrapCheck
operator|.
name|OsXFileDescriptorCheck
argument_list|()
block|{
annotation|@
name|Override
name|long
name|getMaxFileDescriptorCount
parameter_list|()
block|{
return|return
name|maxFileDescriptorCount
operator|.
name|get
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|check
operator|=
operator|new
name|BootstrapCheck
operator|.
name|FileDescriptorCheck
argument_list|()
block|{
annotation|@
name|Override
name|long
name|getMaxFileDescriptorCount
parameter_list|()
block|{
return|return
name|maxFileDescriptorCount
operator|.
name|get
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
specifier|final
name|RuntimeException
name|e
init|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|check
argument_list|)
argument_list|,
literal|"testFileDescriptorLimits"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"max file descriptors"
argument_list|)
argument_list|)
expr_stmt|;
name|maxFileDescriptorCount
operator|.
name|set
argument_list|(
name|randomIntBetween
argument_list|(
name|limit
operator|+
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|check
argument_list|)
argument_list|,
literal|"testFileDescriptorLimits"
argument_list|)
expr_stmt|;
comment|// nothing should happen if current file descriptor count is
comment|// not available
name|maxFileDescriptorCount
operator|.
name|set
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|check
argument_list|)
argument_list|,
literal|"testFileDescriptorLimits"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileDescriptorLimitsThrowsOnInvalidLimit
specifier|public
name|void
name|testFileDescriptorLimitsThrowsOnInvalidLimit
parameter_list|()
block|{
specifier|final
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|BootstrapCheck
operator|.
name|FileDescriptorCheck
argument_list|(
operator|-
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"limit must be positive but was"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMlockallCheck
specifier|public
name|void
name|testMlockallCheck
parameter_list|()
block|{
class|class
name|MlockallCheckTestCase
block|{
specifier|private
specifier|final
name|boolean
name|mlockallSet
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isMemoryLocked
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|shouldFail
decl_stmt|;
specifier|public
name|MlockallCheckTestCase
parameter_list|(
specifier|final
name|boolean
name|mlockallSet
parameter_list|,
specifier|final
name|boolean
name|isMemoryLocked
parameter_list|,
specifier|final
name|boolean
name|shouldFail
parameter_list|)
block|{
name|this
operator|.
name|mlockallSet
operator|=
name|mlockallSet
expr_stmt|;
name|this
operator|.
name|isMemoryLocked
operator|=
name|isMemoryLocked
expr_stmt|;
name|this
operator|.
name|shouldFail
operator|=
name|shouldFail
expr_stmt|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|MlockallCheckTestCase
argument_list|>
name|testCases
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|testCases
operator|.
name|add
argument_list|(
operator|new
name|MlockallCheckTestCase
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|testCases
operator|.
name|add
argument_list|(
operator|new
name|MlockallCheckTestCase
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|testCases
operator|.
name|add
argument_list|(
operator|new
name|MlockallCheckTestCase
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|testCases
operator|.
name|add
argument_list|(
operator|new
name|MlockallCheckTestCase
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|MlockallCheckTestCase
name|testCase
range|:
name|testCases
control|)
block|{
specifier|final
name|BootstrapCheck
operator|.
name|MlockallCheck
name|check
init|=
operator|new
name|BootstrapCheck
operator|.
name|MlockallCheck
argument_list|(
name|testCase
operator|.
name|mlockallSet
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|isMemoryLocked
parameter_list|()
block|{
return|return
name|testCase
operator|.
name|isMemoryLocked
return|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|testCase
operator|.
name|shouldFail
condition|)
block|{
specifier|final
name|RuntimeException
name|e
init|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|check
argument_list|)
argument_list|,
literal|"testFileDescriptorLimitsThrowsOnInvalidLimit"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"memory locking requested for elasticsearch process but memory is not locked"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// nothing should happen
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|check
argument_list|)
argument_list|,
literal|"testFileDescriptorLimitsThrowsOnInvalidLimit"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testMaxNumberOfThreadsCheck
specifier|public
name|void
name|testMaxNumberOfThreadsCheck
parameter_list|()
block|{
specifier|final
name|int
name|limit
init|=
literal|1
operator|<<
literal|11
decl_stmt|;
specifier|final
name|AtomicLong
name|maxNumberOfThreads
init|=
operator|new
name|AtomicLong
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|limit
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BootstrapCheck
operator|.
name|MaxNumberOfThreadsCheck
name|check
init|=
operator|new
name|BootstrapCheck
operator|.
name|MaxNumberOfThreadsCheck
argument_list|()
block|{
annotation|@
name|Override
name|long
name|getMaxNumberOfThreads
parameter_list|()
block|{
return|return
name|maxNumberOfThreads
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|RuntimeException
name|e
init|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|check
argument_list|)
argument_list|,
literal|"testMaxNumberOfThreadsCheck"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"max number of threads"
argument_list|)
argument_list|)
expr_stmt|;
name|maxNumberOfThreads
operator|.
name|set
argument_list|(
name|randomIntBetween
argument_list|(
name|limit
operator|+
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|check
argument_list|)
argument_list|,
literal|"testMaxNumberOfThreadsCheck"
argument_list|)
expr_stmt|;
comment|// nothing should happen if current max number of threads is
comment|// not available
name|maxNumberOfThreads
operator|.
name|set
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|check
argument_list|)
argument_list|,
literal|"testMaxNumberOfThreadsCheck"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMaxSizeVirtualMemory
specifier|public
name|void
name|testMaxSizeVirtualMemory
parameter_list|()
block|{
specifier|final
name|long
name|rlimInfinity
init|=
name|Constants
operator|.
name|MAC_OS_X
condition|?
literal|9223372036854775807L
else|:
operator|-
literal|1L
decl_stmt|;
specifier|final
name|AtomicLong
name|maxSizeVirtualMemory
init|=
operator|new
name|AtomicLong
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BootstrapCheck
operator|.
name|MaxSizeVirtualMemoryCheck
name|check
init|=
operator|new
name|BootstrapCheck
operator|.
name|MaxSizeVirtualMemoryCheck
argument_list|()
block|{
annotation|@
name|Override
name|long
name|getMaxSizeVirtualMemory
parameter_list|()
block|{
return|return
name|maxSizeVirtualMemory
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
name|long
name|getRlimInfinity
parameter_list|()
block|{
return|return
name|rlimInfinity
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|RuntimeException
name|e
init|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|check
argument_list|)
argument_list|,
literal|"testMaxSizeVirtualMemory"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"max size virtual memory"
argument_list|)
argument_list|)
expr_stmt|;
name|maxSizeVirtualMemory
operator|.
name|set
argument_list|(
name|rlimInfinity
argument_list|)
expr_stmt|;
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|check
argument_list|)
argument_list|,
literal|"testMaxSizeVirtualMemory"
argument_list|)
expr_stmt|;
comment|// nothing should happen if max size virtual memory is not
comment|// available
name|maxSizeVirtualMemory
operator|.
name|set
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|check
argument_list|)
argument_list|,
literal|"testMaxSizeVirtualMemory"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMaxMapCountCheck
specifier|public
name|void
name|testMaxMapCountCheck
parameter_list|()
block|{
specifier|final
name|int
name|limit
init|=
literal|1
operator|<<
literal|18
decl_stmt|;
specifier|final
name|AtomicLong
name|maxMapCount
init|=
operator|new
name|AtomicLong
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|limit
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BootstrapCheck
operator|.
name|MaxMapCountCheck
name|check
init|=
operator|new
name|BootstrapCheck
operator|.
name|MaxMapCountCheck
argument_list|()
block|{
annotation|@
name|Override
name|long
name|getMaxMapCount
parameter_list|()
block|{
return|return
name|maxMapCount
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|RuntimeException
name|e
init|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|check
argument_list|)
argument_list|,
literal|"testMaxMapCountCheck"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"max virtual memory areas vm.max_map_count"
argument_list|)
argument_list|)
expr_stmt|;
name|maxMapCount
operator|.
name|set
argument_list|(
name|randomIntBetween
argument_list|(
name|limit
operator|+
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|check
argument_list|)
argument_list|,
literal|"testMaxMapCountCheck"
argument_list|)
expr_stmt|;
comment|// nothing should happen if current vm.max_map_count is not
comment|// available
name|maxMapCount
operator|.
name|set
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|check
argument_list|)
argument_list|,
literal|"testMaxMapCountCheck"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinMasterNodes
specifier|public
name|void
name|testMinMasterNodes
parameter_list|()
block|{
name|boolean
name|isSet
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|BootstrapCheck
operator|.
name|Check
name|check
init|=
operator|new
name|BootstrapCheck
operator|.
name|MinMasterNodesCheck
argument_list|(
name|isSet
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|check
operator|.
name|check
argument_list|()
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|isSet
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BootstrapCheck
operator|.
name|Check
argument_list|>
name|defaultChecks
init|=
name|BootstrapCheck
operator|.
name|checks
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|BootstrapCheck
operator|.
name|check
argument_list|(
literal|true
argument_list|,
name|defaultChecks
argument_list|,
literal|"testMinMasterNodes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

