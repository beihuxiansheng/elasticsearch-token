begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOError
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|ElasticsearchUncaughtExceptionHandlerTests
specifier|public
class|class
name|ElasticsearchUncaughtExceptionHandlerTests
extends|extends
name|ESTestCase
block|{
DECL|field|expectedStatus
specifier|private
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Error
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|expectedStatus
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Error
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|expectedStatus
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedStatus
operator|.
name|put
argument_list|(
name|InternalError
operator|.
name|class
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|expectedStatus
operator|.
name|put
argument_list|(
name|OutOfMemoryError
operator|.
name|class
argument_list|,
literal|127
argument_list|)
expr_stmt|;
name|expectedStatus
operator|.
name|put
argument_list|(
name|StackOverflowError
operator|.
name|class
argument_list|,
literal|126
argument_list|)
expr_stmt|;
name|expectedStatus
operator|.
name|put
argument_list|(
name|UnknownError
operator|.
name|class
argument_list|,
literal|125
argument_list|)
expr_stmt|;
name|expectedStatus
operator|.
name|put
argument_list|(
name|IOError
operator|.
name|class
argument_list|,
literal|124
argument_list|)
expr_stmt|;
name|this
operator|.
name|expectedStatus
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|expectedStatus
argument_list|)
expr_stmt|;
block|}
DECL|method|testUncaughtError
specifier|public
name|void
name|testUncaughtError
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|Error
name|error
init|=
name|randomFrom
argument_list|(
operator|new
name|InternalError
argument_list|()
argument_list|,
operator|new
name|OutOfMemoryError
argument_list|()
argument_list|,
operator|new
name|StackOverflowError
argument_list|()
argument_list|,
operator|new
name|UnknownError
argument_list|()
argument_list|,
operator|new
name|IOError
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"fatal"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Error
argument_list|()
block|{}
argument_list|)
decl_stmt|;
specifier|final
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
throw|throw
name|error
throw|;
block|}
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|halt
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|observedStatus
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|String
argument_list|>
name|threadNameReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|throwableReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|thread
operator|.
name|setUncaughtExceptionHandler
argument_list|(
operator|new
name|ElasticsearchUncaughtExceptionHandler
argument_list|(
parameter_list|()
lambda|->
literal|"testUncaughtError"
argument_list|)
block|{              @
name|Override
name|void
name|halt
argument_list|(
name|int
name|status
argument_list|)
block|{
name|halt
operator|.
name|set
argument_list|(
literal|true
argument_list|)
block|;
name|observedStatus
operator|.
name|set
argument_list|(
name|status
argument_list|)
block|;             }
expr|@
name|Override
name|void
name|onFatalUncaught
argument_list|(
name|String
name|threadName
argument_list|,
name|Throwable
name|t
argument_list|)
block|{
name|threadNameReference
operator|.
name|set
argument_list|(
name|threadName
argument_list|)
block|;
name|throwableReference
operator|.
name|set
argument_list|(
name|t
argument_list|)
block|;             }
expr|@
name|Override
name|void
name|onNonFatalUncaught
argument_list|(
name|String
name|threadName
argument_list|,
name|Throwable
name|t
argument_list|)
block|{
name|fail
argument_list|()
block|;             }
block|}
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|halt
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|status
decl_stmt|;
if|if
condition|(
name|expectedStatus
operator|.
name|containsKey
argument_list|(
name|error
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|status
operator|=
name|expectedStatus
operator|.
name|get
argument_list|(
name|error
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|status
operator|=
literal|1
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|observedStatus
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threadNameReference
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|throwableReference
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUncaughtException
specifier|public
name|void
name|testUncaughtException
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|RuntimeException
name|e
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"boom"
argument_list|)
decl_stmt|;
specifier|final
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
throw|throw
name|e
throw|;
block|}
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|String
argument_list|>
name|threadNameReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|throwableReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|thread
operator|.
name|setUncaughtExceptionHandler
argument_list|(
operator|new
name|ElasticsearchUncaughtExceptionHandler
argument_list|(
parameter_list|()
lambda|->
literal|"testUncaughtException"
argument_list|)
block|{             @
name|Override
name|void
name|halt
argument_list|(
name|int
name|status
argument_list|)
block|{
name|fail
argument_list|()
block|;             }
expr|@
name|Override
name|void
name|onFatalUncaught
argument_list|(
name|String
name|threadName
argument_list|,
name|Throwable
name|t
argument_list|)
block|{
name|fail
argument_list|()
block|;             }
expr|@
name|Override
name|void
name|onNonFatalUncaught
argument_list|(
name|String
name|threadName
argument_list|,
name|Throwable
name|t
argument_list|)
block|{
name|threadNameReference
operator|.
name|set
argument_list|(
name|threadName
argument_list|)
block|;
name|throwableReference
operator|.
name|set
argument_list|(
name|t
argument_list|)
block|;             }
block|}
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|threadNameReference
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|throwableReference
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsFatalCause
specifier|public
name|void
name|testIsFatalCause
parameter_list|()
block|{
name|assertFatal
argument_list|(
operator|new
name|MergePolicy
operator|.
name|MergeException
argument_list|(
operator|new
name|OutOfMemoryError
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFatal
argument_list|(
operator|new
name|OutOfMemoryError
argument_list|()
argument_list|)
expr_stmt|;
name|assertFatal
argument_list|(
operator|new
name|StackOverflowError
argument_list|()
argument_list|)
expr_stmt|;
name|assertFatal
argument_list|(
operator|new
name|InternalError
argument_list|()
argument_list|)
expr_stmt|;
name|assertFatal
argument_list|(
operator|new
name|UnknownError
argument_list|()
argument_list|)
expr_stmt|;
name|assertFatal
argument_list|(
operator|new
name|IOError
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNonFatal
argument_list|(
operator|new
name|RuntimeException
argument_list|()
argument_list|)
expr_stmt|;
name|assertNonFatal
argument_list|(
operator|new
name|UncheckedIOException
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFatal
specifier|private
name|void
name|assertFatal
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ElasticsearchUncaughtExceptionHandler
operator|.
name|isFatalUncaught
argument_list|(
name|cause
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNonFatal
specifier|private
name|void
name|assertNonFatal
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|ElasticsearchUncaughtExceptionHandler
operator|.
name|isFatalUncaught
argument_list|(
name|cause
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

