begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|process
operator|.
name|ProcessProbe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_class
DECL|class|BootstrapSettingsTests
specifier|public
class|class
name|BootstrapSettingsTests
extends|extends
name|ESTestCase
block|{
DECL|method|testDefaultSettings
specifier|public
name|void
name|testDefaultSettings
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|BootstrapSettings
operator|.
name|SECURITY_FILTER_BAD_DEFAULTS_SETTING
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|BootstrapSettings
operator|.
name|MLOCKALL_SETTING
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|BootstrapSettings
operator|.
name|SECCOMP_SETTING
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|BootstrapSettings
operator|.
name|CTRLHANDLER_SETTING
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"this feature is disabled for snapshot builds, for now - see #16835"
argument_list|)
DECL|method|testEnforceMaxFileDescriptorLimits
specifier|public
name|void
name|testEnforceMaxFileDescriptorLimits
parameter_list|()
block|{
comment|// nothing should happen since we are in OOB mode
name|Bootstrap
operator|.
name|enforceOrLogLimits
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|randomFrom
argument_list|(
name|Bootstrap
operator|.
name|ENFORCE_SETTINGS
operator|.
name|toArray
argument_list|(
operator|new
name|Setting
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"127.0.0.1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|long
name|maxFileDescriptorCount
init|=
name|ProcessProbe
operator|.
name|getInstance
argument_list|()
operator|.
name|getMaxFileDescriptorCount
argument_list|()
decl_stmt|;
try|try
block|{
name|Bootstrap
operator|.
name|enforceOrLogLimits
argument_list|(
name|build
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxFileDescriptorCount
operator|!=
operator|-
literal|1
operator|&&
name|maxFileDescriptorCount
operator|<
operator|(
literal|1
operator|<<
literal|16
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"must have enforced limits: "
operator|+
name|maxFileDescriptorCount
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"max file descriptors"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

