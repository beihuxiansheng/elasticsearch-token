begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|JNANativesTests
specifier|public
class|class
name|JNANativesTests
extends|extends
name|ESTestCase
block|{
annotation|@
name|Test
DECL|method|testMlockall
specifier|public
name|void
name|testMlockall
parameter_list|()
block|{
if|if
condition|(
name|Constants
operator|.
name|MAC_OS_X
condition|)
block|{
name|assertFalse
argument_list|(
literal|"Memory locking is not available on OS X platforms"
argument_list|,
name|JNANatives
operator|.
name|LOCAL_MLOCKALL
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConsoleCtrlHandler
specifier|public
name|void
name|testConsoleCtrlHandler
parameter_list|()
block|{
if|if
condition|(
name|Constants
operator|.
name|WINDOWS
condition|)
block|{
name|assertNotNull
argument_list|(
name|JNAKernel32Library
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|JNAKernel32Library
operator|.
name|getInstance
argument_list|()
operator|.
name|getCallbacks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|JNAKernel32Library
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|JNAKernel32Library
operator|.
name|getInstance
argument_list|()
operator|.
name|getCallbacks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

