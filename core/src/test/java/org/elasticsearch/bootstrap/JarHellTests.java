begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_class
DECL|class|JarHellTests
specifier|public
class|class
name|JarHellTests
extends|extends
name|ESTestCase
block|{
DECL|method|makeJar
name|URL
name|makeJar
parameter_list|(
name|Path
name|dir
parameter_list|,
name|String
name|name
parameter_list|,
name|Manifest
name|manifest
parameter_list|,
name|String
modifier|...
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|jarpath
init|=
name|dir
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ZipOutputStream
name|out
decl_stmt|;
if|if
condition|(
name|manifest
operator|==
literal|null
condition|)
block|{
name|out
operator|=
operator|new
name|JarOutputStream
argument_list|(
name|Files
operator|.
name|newOutputStream
argument_list|(
name|jarpath
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|=
operator|new
name|JarOutputStream
argument_list|(
name|Files
operator|.
name|newOutputStream
argument_list|(
name|jarpath
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE
argument_list|)
argument_list|,
name|manifest
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|out
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|jarpath
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
return|;
block|}
DECL|method|makeFile
name|URL
name|makeFile
parameter_list|(
name|Path
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|filepath
init|=
name|dir
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Files
operator|.
name|newOutputStream
argument_list|(
name|filepath
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|dir
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
return|;
block|}
DECL|method|testDifferentJars
specifier|public
name|void
name|testDifferentJars
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|URL
index|[]
name|jars
init|=
block|{
name|makeJar
argument_list|(
name|dir
argument_list|,
literal|"foo.jar"
argument_list|,
literal|null
argument_list|,
literal|"DuplicateClass.class"
argument_list|)
block|,
name|makeJar
argument_list|(
name|dir
argument_list|,
literal|"bar.jar"
argument_list|,
literal|null
argument_list|,
literal|"DuplicateClass.class"
argument_list|)
block|}
decl_stmt|;
try|try
block|{
name|JarHell
operator|.
name|checkJarHell
argument_list|(
name|jars
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"jar hell!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"DuplicateClass"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"bar.jar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDuplicateClasspathLeniency
specifier|public
name|void
name|testDuplicateClasspathLeniency
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|URL
name|jar
init|=
name|makeJar
argument_list|(
name|dir
argument_list|,
literal|"foo.jar"
argument_list|,
literal|null
argument_list|,
literal|"Foo.class"
argument_list|)
decl_stmt|;
name|URL
index|[]
name|jars
init|=
block|{
name|jar
block|,
name|jar
block|}
decl_stmt|;
name|JarHell
operator|.
name|checkJarHell
argument_list|(
name|jars
argument_list|)
expr_stmt|;
block|}
DECL|method|testDirsOnClasspath
specifier|public
name|void
name|testDirsOnClasspath
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir1
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|dir2
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|URL
index|[]
name|dirs
init|=
block|{
name|makeFile
argument_list|(
name|dir1
argument_list|,
literal|"DuplicateClass.class"
argument_list|)
block|,
name|makeFile
argument_list|(
name|dir2
argument_list|,
literal|"DuplicateClass.class"
argument_list|)
block|}
decl_stmt|;
try|try
block|{
name|JarHell
operator|.
name|checkJarHell
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"jar hell!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"DuplicateClass"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|dir1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|dir2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDirAndJar
specifier|public
name|void
name|testDirAndJar
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir1
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|dir2
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|URL
index|[]
name|dirs
init|=
block|{
name|makeJar
argument_list|(
name|dir1
argument_list|,
literal|"foo.jar"
argument_list|,
literal|null
argument_list|,
literal|"DuplicateClass.class"
argument_list|)
block|,
name|makeFile
argument_list|(
name|dir2
argument_list|,
literal|"DuplicateClass.class"
argument_list|)
block|}
decl_stmt|;
try|try
block|{
name|JarHell
operator|.
name|checkJarHell
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"jar hell!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"DuplicateClass"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|dir2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLog4jLeniency
specifier|public
name|void
name|testLog4jLeniency
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|URL
index|[]
name|jars
init|=
block|{
name|makeJar
argument_list|(
name|dir
argument_list|,
literal|"foo.jar"
argument_list|,
literal|null
argument_list|,
literal|"org/apache/log4j/DuplicateClass.class"
argument_list|)
block|,
name|makeJar
argument_list|(
name|dir
argument_list|,
literal|"bar.jar"
argument_list|,
literal|null
argument_list|,
literal|"org/apache/log4j/DuplicateClass.class"
argument_list|)
block|}
decl_stmt|;
name|JarHell
operator|.
name|checkJarHell
argument_list|(
name|jars
argument_list|)
expr_stmt|;
block|}
DECL|method|testBaseDateTimeLeniency
specifier|public
name|void
name|testBaseDateTimeLeniency
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|URL
index|[]
name|jars
init|=
block|{
name|makeJar
argument_list|(
name|dir
argument_list|,
literal|"foo.jar"
argument_list|,
literal|null
argument_list|,
literal|"org/joda/time/base/BaseDateTime.class"
argument_list|)
block|,
name|makeJar
argument_list|(
name|dir
argument_list|,
literal|"bar.jar"
argument_list|,
literal|null
argument_list|,
literal|"org/joda/time/base/BaseDateTime.class"
argument_list|)
block|}
decl_stmt|;
name|JarHell
operator|.
name|checkJarHell
argument_list|(
name|jars
argument_list|)
expr_stmt|;
block|}
DECL|method|testWithinSingleJar
specifier|public
name|void
name|testWithinSingleJar
parameter_list|()
throws|throws
name|Exception
block|{
comment|// the java api for zip file does not allow creating duplicate entries (good!) so
comment|// this bogus jar had to be constructed with ant
name|URL
index|[]
name|jars
init|=
block|{
name|JarHellTests
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"duplicate-classes.jar"
argument_list|)
block|}
decl_stmt|;
try|try
block|{
name|JarHell
operator|.
name|checkJarHell
argument_list|(
name|jars
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"jar hell!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"DuplicateClass"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"duplicate-classes.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"exists multiple times in jar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testXmlBeansLeniency
specifier|public
name|void
name|testXmlBeansLeniency
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
index|[]
name|jars
init|=
block|{
name|JarHellTests
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"duplicate-xmlbeans-classes.jar"
argument_list|)
block|}
decl_stmt|;
name|JarHell
operator|.
name|checkJarHell
argument_list|(
name|jars
argument_list|)
expr_stmt|;
block|}
DECL|method|testRequiredJDKVersionTooOld
specifier|public
name|void
name|testRequiredJDKVersionTooOld
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|current
init|=
name|JavaVersion
operator|.
name|current
argument_list|()
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|target
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|current
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|current
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|target
operator|.
name|add
argument_list|(
name|current
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|JavaVersion
name|targetVersion
init|=
name|JavaVersion
operator|.
name|parse
argument_list|(
name|Strings
operator|.
name|collectionToDelimitedString
argument_list|(
name|target
argument_list|,
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
operator|new
name|Manifest
argument_list|()
decl_stmt|;
name|Attributes
name|attributes
init|=
name|manifest
operator|.
name|getMainAttributes
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|MANIFEST_VERSION
argument_list|,
literal|"1.0.0"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
operator|new
name|Attributes
operator|.
name|Name
argument_list|(
literal|"X-Compile-Target-JDK"
argument_list|)
argument_list|,
name|targetVersion
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|URL
index|[]
name|jars
init|=
block|{
name|makeJar
argument_list|(
name|dir
argument_list|,
literal|"foo.jar"
argument_list|,
name|manifest
argument_list|,
literal|"Foo.class"
argument_list|)
block|}
decl_stmt|;
try|try
block|{
name|JarHell
operator|.
name|checkJarHell
argument_list|(
name|jars
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"requires Java "
operator|+
name|targetVersion
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"your system: "
operator|+
name|JavaVersion
operator|.
name|current
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBadJDKVersionInJar
specifier|public
name|void
name|testBadJDKVersionInJar
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Manifest
name|manifest
init|=
operator|new
name|Manifest
argument_list|()
decl_stmt|;
name|Attributes
name|attributes
init|=
name|manifest
operator|.
name|getMainAttributes
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|MANIFEST_VERSION
argument_list|,
literal|"1.0.0"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
operator|new
name|Attributes
operator|.
name|Name
argument_list|(
literal|"X-Compile-Target-JDK"
argument_list|)
argument_list|,
literal|"bogus"
argument_list|)
expr_stmt|;
name|URL
index|[]
name|jars
init|=
block|{
name|makeJar
argument_list|(
name|dir
argument_list|,
literal|"foo.jar"
argument_list|,
name|manifest
argument_list|,
literal|"Foo.class"
argument_list|)
block|}
decl_stmt|;
try|try
block|{
name|JarHell
operator|.
name|checkJarHell
argument_list|(
name|jars
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"version string must be a sequence of nonnegative decimal integers separated by \".\"'s and may have leading zeros but was bogus"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** make sure if a plugin is compiled against the same ES version, it works */
DECL|method|testGoodESVersionInJar
specifier|public
name|void
name|testGoodESVersionInJar
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Manifest
name|manifest
init|=
operator|new
name|Manifest
argument_list|()
decl_stmt|;
name|Attributes
name|attributes
init|=
name|manifest
operator|.
name|getMainAttributes
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|MANIFEST_VERSION
argument_list|,
literal|"1.0.0"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
operator|new
name|Attributes
operator|.
name|Name
argument_list|(
literal|"X-Compile-Elasticsearch-Version"
argument_list|)
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|URL
index|[]
name|jars
init|=
block|{
name|makeJar
argument_list|(
name|dir
argument_list|,
literal|"foo.jar"
argument_list|,
name|manifest
argument_list|,
literal|"Foo.class"
argument_list|)
block|}
decl_stmt|;
name|JarHell
operator|.
name|checkJarHell
argument_list|(
name|jars
argument_list|)
expr_stmt|;
block|}
comment|/** make sure if a plugin is compiled against a different ES version, it fails */
DECL|method|testBadESVersionInJar
specifier|public
name|void
name|testBadESVersionInJar
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Manifest
name|manifest
init|=
operator|new
name|Manifest
argument_list|()
decl_stmt|;
name|Attributes
name|attributes
init|=
name|manifest
operator|.
name|getMainAttributes
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|MANIFEST_VERSION
argument_list|,
literal|"1.0.0"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
operator|new
name|Attributes
operator|.
name|Name
argument_list|(
literal|"X-Compile-Elasticsearch-Version"
argument_list|)
argument_list|,
literal|"1.0-bogus"
argument_list|)
expr_stmt|;
name|URL
index|[]
name|jars
init|=
block|{
name|makeJar
argument_list|(
name|dir
argument_list|,
literal|"foo.jar"
argument_list|,
name|manifest
argument_list|,
literal|"Foo.class"
argument_list|)
block|}
decl_stmt|;
try|try
block|{
name|JarHell
operator|.
name|checkJarHell
argument_list|(
name|jars
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"requires Elasticsearch 1.0-bogus"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testValidVersions
specifier|public
name|void
name|testValidVersions
parameter_list|()
block|{
name|String
index|[]
name|versions
init|=
operator|new
name|String
index|[]
block|{
literal|"1.7"
block|,
literal|"1.7.0"
block|,
literal|"0.1.7"
block|,
literal|"1.7.0.80"
block|}
decl_stmt|;
for|for
control|(
name|String
name|version
range|:
name|versions
control|)
block|{
try|try
block|{
name|JarHell
operator|.
name|checkVersionFormat
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|version
operator|+
literal|" should be accepted as a valid version format"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testInvalidVersions
specifier|public
name|void
name|testInvalidVersions
parameter_list|()
block|{
name|String
index|[]
name|versions
init|=
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"1.7.0_80"
block|,
literal|"1.7."
block|}
decl_stmt|;
for|for
control|(
name|String
name|version
range|:
name|versions
control|)
block|{
try|try
block|{
name|JarHell
operator|.
name|checkVersionFormat
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"\""
operator|+
name|version
operator|+
literal|"\""
operator|+
literal|" should be rejected as an invalid version format"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{             }
block|}
block|}
comment|// classpath testing is system specific, so we just write separate tests for *nix and windows cases
comment|/**      * Parse a simple classpath with two elements on unix      */
DECL|method|testParseClassPathUnix
specifier|public
name|void
name|testParseClassPathUnix
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test is designed for unix-like systems only"
argument_list|,
literal|":"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
literal|"test is designed for unix-like systems only"
argument_list|,
literal|"/"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|element1
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|element2
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|URL
name|expected
index|[]
init|=
block|{
name|element1
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
block|,
name|element2
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
block|}
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|JarHell
operator|.
name|parseClassPath
argument_list|(
name|element1
operator|.
name|toString
argument_list|()
operator|+
literal|":"
operator|+
name|element2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Make sure an old unix classpath with an empty element (implicitly CWD: i'm looking at you 1.x ES scripts) fails      */
DECL|method|testEmptyClassPathUnix
specifier|public
name|void
name|testEmptyClassPathUnix
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test is designed for unix-like systems only"
argument_list|,
literal|":"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
literal|"test is designed for unix-like systems only"
argument_list|,
literal|"/"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|JarHell
operator|.
name|parseClassPath
argument_list|(
literal|":/element1:/element2"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"should not contain empty elements"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Parse a simple classpath with two elements on windows      */
DECL|method|testParseClassPathWindows
specifier|public
name|void
name|testParseClassPathWindows
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test is designed for windows-like systems only"
argument_list|,
literal|";"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
literal|"test is designed for windows-like systems only"
argument_list|,
literal|"\\"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|element1
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|element2
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|URL
name|expected
index|[]
init|=
block|{
name|element1
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
block|,
name|element2
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
block|}
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|JarHell
operator|.
name|parseClassPath
argument_list|(
name|element1
operator|.
name|toString
argument_list|()
operator|+
literal|";"
operator|+
name|element2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Make sure an old windows classpath with an empty element (implicitly CWD: i'm looking at you 1.x ES scripts) fails      */
DECL|method|testEmptyClassPathWindows
specifier|public
name|void
name|testEmptyClassPathWindows
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test is designed for windows-like systems only"
argument_list|,
literal|";"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
literal|"test is designed for windows-like systems only"
argument_list|,
literal|"\\"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|JarHell
operator|.
name|parseClassPath
argument_list|(
literal|";c:\\element1;c:\\element2"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"should not contain empty elements"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Make sure a "bogus" windows classpath element is accepted, java's classpath parsing accepts it,      * therefore eclipse OSGI code does it :)      */
DECL|method|testCrazyEclipseClassPathWindows
specifier|public
name|void
name|testCrazyEclipseClassPathWindows
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test is designed for windows-like systems only"
argument_list|,
literal|";"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
literal|"test is designed for windows-like systems only"
argument_list|,
literal|"\\"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|URL
name|expected
index|[]
init|=
block|{
name|PathUtils
operator|.
name|get
argument_list|(
literal|"c:\\element1"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
block|,
name|PathUtils
operator|.
name|get
argument_list|(
literal|"c:\\element2"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
block|,
name|PathUtils
operator|.
name|get
argument_list|(
literal|"c:\\element3"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
block|,
name|PathUtils
operator|.
name|get
argument_list|(
literal|"c:\\element 4"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
block|,         }
decl_stmt|;
name|URL
name|actual
index|[]
init|=
name|JarHell
operator|.
name|parseClassPath
argument_list|(
literal|"c:\\element1;c:\\element2;/c:/element3;/c:/element 4"
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

