begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilePermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|CodeSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PermissionCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|ProtectionDomain
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_comment
comment|/**   * Tests for ESPolicy  *<p>  * Most unit tests won't run under security manager, since we don't allow   * access to the policy (you cannot construct it)  */
end_comment

begin_class
DECL|class|ESPolicyTests
specifier|public
class|class
name|ESPolicyTests
extends|extends
name|ESTestCase
block|{
comment|/**       * Test policy with null codesource.      *<p>      * This can happen when restricting privileges with doPrivileged,      * even though ProtectionDomain's ctor javadocs might make you think      * that the policy won't be consulted.      */
DECL|method|testNullCodeSource
specifier|public
name|void
name|testNullCodeSource
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test cannot run with security manager"
argument_list|,
name|System
operator|.
name|getSecurityManager
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|PermissionCollection
name|noPermissions
init|=
operator|new
name|Permissions
argument_list|()
decl_stmt|;
name|ESPolicy
name|policy
init|=
operator|new
name|ESPolicy
argument_list|(
name|noPermissions
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|policy
operator|.
name|implies
argument_list|(
operator|new
name|ProtectionDomain
argument_list|(
literal|null
argument_list|,
name|noPermissions
argument_list|)
argument_list|,
operator|new
name|FilePermission
argument_list|(
literal|"foo"
argument_list|,
literal|"read"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**       * test with null location      *<p>      * its unclear when/if this happens, see https://bugs.openjdk.java.net/browse/JDK-8129972      */
DECL|method|testNullLocation
specifier|public
name|void
name|testNullLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test cannot run with security manager"
argument_list|,
name|System
operator|.
name|getSecurityManager
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|PermissionCollection
name|noPermissions
init|=
operator|new
name|Permissions
argument_list|()
decl_stmt|;
name|ESPolicy
name|policy
init|=
operator|new
name|ESPolicy
argument_list|(
name|noPermissions
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|policy
operator|.
name|implies
argument_list|(
operator|new
name|ProtectionDomain
argument_list|(
operator|new
name|CodeSource
argument_list|(
literal|null
argument_list|,
operator|(
name|Certificate
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
name|noPermissions
argument_list|)
argument_list|,
operator|new
name|FilePermission
argument_list|(
literal|"foo"
argument_list|,
literal|"read"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**       * test restricting privileges to no permissions actually works      */
DECL|method|testRestrictPrivileges
specifier|public
name|void
name|testRestrictPrivileges
parameter_list|()
block|{
name|assumeTrue
argument_list|(
literal|"test requires security manager"
argument_list|,
name|System
operator|.
name|getSecurityManager
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"this test needs to be fixed: user.home not available by policy"
argument_list|)
expr_stmt|;
block|}
name|PermissionCollection
name|noPermissions
init|=
operator|new
name|Permissions
argument_list|()
decl_stmt|;
name|AccessControlContext
name|noPermissionsAcc
init|=
operator|new
name|AccessControlContext
argument_list|(
operator|new
name|ProtectionDomain
index|[]
block|{
operator|new
name|ProtectionDomain
argument_list|(
literal|null
argument_list|,
name|noPermissions
argument_list|)
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|run
parameter_list|()
block|{
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"access should have been denied"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|noPermissionsAcc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|expected
parameter_list|)
block|{
comment|// expected exception
block|}
block|}
block|}
end_class

end_unit

