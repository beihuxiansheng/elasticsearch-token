begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch
package|package
name|org
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonLocation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|groovy
operator|.
name|runtime
operator|.
name|typehandling
operator|.
name|GroovyCastException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|FailedNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|RoutingMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|TimestampParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ShardSearchFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|SnapshotId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IllegalShardRoutingStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTableValidation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|TestShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|breaker
operator|.
name|CircuitBreakingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NotSerializableExceptionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|LocalTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoverySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AlreadyExpiredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|CreateFailedEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|IndexFailedEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|RecoveryEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MergeMappingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IllegalIndexShardStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|TranslogRecoveryPerformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexTemplateAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexTemplateMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidIndexTemplateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoverFilesRecoveryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
operator|.
name|PercolateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|alias
operator|.
name|delete
operator|.
name|AliasesNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchContextMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|warmer
operator|.
name|IndexWarmerMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|TestSearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ActionNotFoundTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ActionTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ExceptionSerializationTests
specifier|public
class|class
name|ExceptionSerializationTests
extends|extends
name|ESTestCase
block|{
DECL|method|testExceptionRegistration
specifier|public
name|void
name|testExceptionRegistration
parameter_list|()
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
throws|,
name|URISyntaxException
block|{
specifier|final
name|Set
argument_list|<
name|Class
argument_list|>
name|notRegistered
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Class
argument_list|>
name|hasDedicatedWrite
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|registered
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|String
name|path
init|=
literal|"/org/elasticsearch"
decl_stmt|;
specifier|final
name|Path
name|startPath
init|=
name|PathUtils
operator|.
name|get
argument_list|(
name|ElasticsearchException
operator|.
name|class
operator|.
name|getProtectionDomain
argument_list|()
operator|.
name|getCodeSource
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"org"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"elasticsearch"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|?
extends|extends
name|Class
argument_list|>
name|ignore
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|parser
operator|.
name|RestTestParseException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|TestQueryParsingException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|RestException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|CancellableThreadsTest
operator|.
name|CustomException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|BytesRestResponseTests
operator|.
name|WithHeadersException
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|AbstractClientHeadersTests
operator|.
name|InternalException
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileVisitor
argument_list|<
name|Path
argument_list|>
name|visitor
init|=
operator|new
name|FileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
specifier|private
name|Path
name|pkgPrefix
init|=
name|PathUtils
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|preVisitDirectory
parameter_list|(
name|Path
name|dir
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|next
init|=
name|pkgPrefix
operator|.
name|resolve
argument_list|(
name|dir
operator|.
name|getFileName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ignore
operator|.
name|contains
argument_list|(
name|next
argument_list|)
condition|)
block|{
return|return
name|FileVisitResult
operator|.
name|SKIP_SUBTREE
return|;
block|}
name|pkgPrefix
operator|=
name|next
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|String
name|filename
init|=
name|file
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|filename
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|loadClass
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|ignore
operator|.
name|contains
argument_list|(
name|clazz
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|==
literal|false
operator|&&
name|Modifier
operator|.
name|isInterface
argument_list|(
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|==
literal|false
operator|&&
name|isEsException
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
if|if
condition|(
name|ElasticsearchException
operator|.
name|isRegistered
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|false
operator|&&
name|ElasticsearchException
operator|.
name|class
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getEnclosingClass
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|notRegistered
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ElasticsearchException
operator|.
name|isRegistered
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|registered
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|clazz
operator|.
name|getDeclaredMethod
argument_list|(
literal|"writeTo"
argument_list|,
name|StreamOutput
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|hasDedicatedWrite
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// fair enough
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
specifier|private
name|boolean
name|isEsException
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|ElasticsearchException
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
return|;
block|}
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|StringBuilder
name|pkg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|pkgPrefix
control|)
block|{
name|pkg
operator|.
name|append
argument_list|(
name|p
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
name|pkg
operator|.
name|append
argument_list|(
name|filename
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|filename
operator|.
name|length
argument_list|()
operator|-
literal|6
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|pkg
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFileFailed
parameter_list|(
name|Path
name|file
parameter_list|,
name|IOException
name|exc
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
name|exc
throw|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|postVisitDirectory
parameter_list|(
name|Path
name|dir
parameter_list|,
name|IOException
name|exc
parameter_list|)
throws|throws
name|IOException
block|{
name|pkgPrefix
operator|=
name|pkgPrefix
operator|.
name|getParent
argument_list|()
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
decl_stmt|;
name|Files
operator|.
name|walkFileTree
argument_list|(
name|startPath
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|testStartPath
init|=
name|PathUtils
operator|.
name|get
argument_list|(
name|ExceptionSerializationTests
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|path
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|Files
operator|.
name|walkFileTree
argument_list|(
name|testStartPath
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|notRegistered
operator|.
name|remove
argument_list|(
name|TestException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|notRegistered
operator|.
name|remove
argument_list|(
name|UnknownHeaderException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Classes subclassing ElasticsearchException must be registered \n"
operator|+
name|notRegistered
operator|.
name|toString
argument_list|()
argument_list|,
name|notRegistered
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|registered
operator|.
name|removeAll
argument_list|(
name|ElasticsearchException
operator|.
name|getRegisteredKeys
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check
name|assertEquals
argument_list|(
name|registered
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|registered
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|TestException
specifier|public
specifier|static
specifier|final
class|class
name|TestException
extends|extends
name|ElasticsearchException
block|{
DECL|method|TestException
specifier|public
name|TestException
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|serialize
specifier|private
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|T
name|serialize
parameter_list|(
name|T
name|exception
parameter_list|)
throws|throws
name|IOException
block|{
name|ElasticsearchAssertions
operator|.
name|assertVersionSerializable
argument_list|(
name|VersionUtils
operator|.
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeThrowable
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|StreamInput
name|in
init|=
name|StreamInput
operator|.
name|wrap
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|in
operator|.
name|readThrowable
argument_list|()
return|;
block|}
DECL|method|testIllegalShardRoutingStateException
specifier|public
name|void
name|testIllegalShardRoutingStateException
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardRouting
name|routing
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|,
literal|"xyz"
argument_list|,
literal|"def"
argument_list|,
literal|false
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|String
name|routingAsString
init|=
name|routing
operator|.
name|toString
argument_list|()
decl_stmt|;
name|IllegalShardRoutingStateException
name|serialize
init|=
name|serialize
argument_list|(
operator|new
name|IllegalShardRoutingStateException
argument_list|(
name|routing
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|NullPointerException
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|serialize
operator|.
name|shard
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|routing
argument_list|,
name|serialize
operator|.
name|shard
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|routingAsString
operator|+
literal|": foo"
argument_list|,
name|serialize
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|serialize
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
name|serialize
operator|=
name|serialize
argument_list|(
operator|new
name|IllegalShardRoutingStateException
argument_list|(
name|routing
argument_list|,
literal|"bar"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|serialize
operator|.
name|shard
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|routing
argument_list|,
name|serialize
operator|.
name|shard
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|routingAsString
operator|+
literal|": bar"
argument_list|,
name|serialize
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|serialize
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryParsingException
specifier|public
name|void
name|testQueryParsingException
parameter_list|()
throws|throws
name|IOException
block|{
name|QueryParsingException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|QueryParsingException
argument_list|(
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"fobar"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"fobar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getLineNumber
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getColumnNumber
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ex
operator|=
name|serialize
argument_list|(
operator|new
name|QueryParsingException
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getLineNumber
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getColumnNumber
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testSearchException
specifier|public
name|void
name|testSearchException
parameter_list|()
throws|throws
name|IOException
block|{
name|SearchShardTarget
name|target
init|=
operator|new
name|SearchShardTarget
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SearchException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|SearchException
argument_list|(
name|target
argument_list|,
literal|"hello world"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|target
argument_list|,
name|ex
operator|.
name|shard
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
name|ex
operator|=
name|serialize
argument_list|(
operator|new
name|SearchException
argument_list|(
literal|null
argument_list|,
literal|"hello world"
argument_list|,
operator|new
name|NullPointerException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|shard
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
block|}
DECL|method|testAlreadyExpiredException
specifier|public
name|void
name|testAlreadyExpiredException
parameter_list|()
throws|throws
name|IOException
block|{
name|AlreadyExpiredException
name|alreadyExpiredException
init|=
name|serialize
argument_list|(
operator|new
name|AlreadyExpiredException
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"index"
argument_list|,
name|alreadyExpiredException
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"type"
argument_list|,
name|alreadyExpiredException
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|alreadyExpiredException
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|alreadyExpiredException
operator|.
name|ttl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|alreadyExpiredException
operator|.
name|timestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|alreadyExpiredException
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|alreadyExpiredException
operator|=
name|serialize
argument_list|(
operator|new
name|AlreadyExpiredException
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|alreadyExpiredException
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|alreadyExpiredException
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|alreadyExpiredException
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|alreadyExpiredException
operator|.
name|ttl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|alreadyExpiredException
operator|.
name|timestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3
argument_list|,
name|alreadyExpiredException
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateFailedEngineException
specifier|public
name|void
name|testCreateFailedEngineException
parameter_list|()
throws|throws
name|IOException
block|{
name|CreateFailedEngineException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|CreateFailedEngineException
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"idx"
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getShardId
argument_list|()
argument_list|,
operator|new
name|ShardId
argument_list|(
literal|"idx"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"type"
argument_list|,
name|ex
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|ex
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|=
name|serialize
argument_list|(
operator|new
name|CreateFailedEngineException
argument_list|(
literal|null
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
operator|new
name|NullPointerException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"type"
argument_list|,
name|ex
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|ex
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeMappingException
specifier|public
name|void
name|testMergeMappingException
parameter_list|()
throws|throws
name|IOException
block|{
name|MergeMappingException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|MergeMappingException
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"one"
block|,
literal|"two"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|ex
operator|.
name|failures
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"one"
block|,
literal|"two"
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testActionNotFoundTransportException
specifier|public
name|void
name|testActionNotFoundTransportException
parameter_list|()
throws|throws
name|IOException
block|{
name|ActionNotFoundTransportException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|ActionNotFoundTransportException
argument_list|(
literal|"AACCCTION"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AACCCTION"
argument_list|,
name|ex
operator|.
name|action
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No handler for action [AACCCTION]"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSnapshotException
specifier|public
name|void
name|testSnapshotException
parameter_list|()
throws|throws
name|IOException
block|{
name|SnapshotException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|SnapshotException
argument_list|(
operator|new
name|SnapshotId
argument_list|(
literal|"repo"
argument_list|,
literal|"snap"
argument_list|)
argument_list|,
literal|"no such snapshot"
argument_list|,
operator|new
name|NullPointerException
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|snapshot
argument_list|()
argument_list|,
operator|new
name|SnapshotId
argument_list|(
literal|"repo"
argument_list|,
literal|"snap"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"[repo:snap] no such snapshot"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
name|ex
operator|=
name|serialize
argument_list|(
operator|new
name|SnapshotException
argument_list|(
literal|null
argument_list|,
literal|"no such snapshot"
argument_list|,
operator|new
name|NullPointerException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|snapshot
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"[_na] no such snapshot"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
block|}
DECL|method|testRecoverFilesRecoveryException
specifier|public
name|void
name|testRecoverFilesRecoveryException
parameter_list|()
throws|throws
name|IOException
block|{
name|ShardId
name|id
init|=
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ByteSizeValue
name|bytes
init|=
operator|new
name|ByteSizeValue
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|RecoverFilesRecoveryException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|RecoverFilesRecoveryException
argument_list|(
name|id
argument_list|,
literal|10
argument_list|,
name|bytes
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getShardId
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|numberOfFiles
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|totalFilesSize
argument_list|()
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Failed to transfer [10] files with total size of ["
operator|+
name|bytes
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|=
name|serialize
argument_list|(
operator|new
name|RecoverFilesRecoveryException
argument_list|(
literal|null
argument_list|,
literal|10
argument_list|,
name|bytes
argument_list|,
operator|new
name|NullPointerException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|numberOfFiles
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|totalFilesSize
argument_list|()
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Failed to transfer [10] files with total size of ["
operator|+
name|bytes
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexTemplateAlreadyExistsException
specifier|public
name|void
name|testIndexTemplateAlreadyExistsException
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexTemplateAlreadyExistsException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|IndexTemplateAlreadyExistsException
argument_list|(
literal|"the dude abides!"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"the dude abides!"
argument_list|,
name|ex
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"index_template [the dude abides!] already exists"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|=
name|serialize
argument_list|(
operator|new
name|IndexTemplateAlreadyExistsException
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"index_template [null] already exists"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBatchOperationException
specifier|public
name|void
name|testBatchOperationException
parameter_list|()
throws|throws
name|IOException
block|{
name|ShardId
name|id
init|=
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TranslogRecoveryPerformer
operator|.
name|BatchOperationException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|TranslogRecoveryPerformer
operator|.
name|BatchOperationException
argument_list|(
name|id
argument_list|,
literal|"batched the fucker"
argument_list|,
literal|666
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getShardId
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|666
argument_list|,
name|ex
operator|.
name|completedOperations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"batched the fucker"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|=
name|serialize
argument_list|(
operator|new
name|TranslogRecoveryPerformer
operator|.
name|BatchOperationException
argument_list|(
literal|null
argument_list|,
literal|"batched the fucker"
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|NullPointerException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ex
operator|.
name|completedOperations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"batched the fucker"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidIndexTemplateException
specifier|public
name|void
name|testInvalidIndexTemplateException
parameter_list|()
throws|throws
name|IOException
block|{
name|InvalidIndexTemplateException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|InvalidIndexTemplateException
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"index_template [foo] invalid, cause [bar]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|name
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|ex
operator|=
name|serialize
argument_list|(
operator|new
name|InvalidIndexTemplateException
argument_list|(
literal|null
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"index_template [null] invalid, cause [bar]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|name
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testActionTransportException
specifier|public
name|void
name|testActionTransportException
parameter_list|()
throws|throws
name|IOException
block|{
name|ActionTransportException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|ActionTransportException
argument_list|(
literal|"name?"
argument_list|,
operator|new
name|LocalTransportAddress
argument_list|(
literal|"dead.end:666"
argument_list|)
argument_list|,
literal|"ACTION BABY!"
argument_list|,
literal|"message?"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ACTION BABY!"
argument_list|,
name|ex
operator|.
name|action
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LocalTransportAddress
argument_list|(
literal|"dead.end:666"
argument_list|)
argument_list|,
name|ex
operator|.
name|address
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[name?][local[dead.end:666]][ACTION BABY!] message?"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSearchContextMissingException
specifier|public
name|void
name|testSearchContextMissingException
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|id
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|SearchContextMissingException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|SearchContextMissingException
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|ex
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPercolateException
specifier|public
name|void
name|testPercolateException
parameter_list|()
throws|throws
name|IOException
block|{
name|ShardId
name|id
init|=
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|PercolateException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|PercolateException
argument_list|(
name|id
argument_list|,
literal|"percolate my ass"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|ex
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"percolate my ass"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|=
name|serialize
argument_list|(
operator|new
name|PercolateException
argument_list|(
name|id
argument_list|,
literal|"percolate my ass"
argument_list|,
operator|new
name|NullPointerException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|ex
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"percolate my ass"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
block|}
DECL|method|testRoutingValidationException
specifier|public
name|void
name|testRoutingValidationException
parameter_list|()
throws|throws
name|IOException
block|{
name|RoutingTableValidation
name|validation
init|=
operator|new
name|RoutingTableValidation
argument_list|()
decl_stmt|;
name|validation
operator|.
name|addIndexFailure
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|RoutingValidationException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|RoutingValidationException
argument_list|(
name|validation
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[Index [foo]: bar]"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|validation
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
operator|.
name|validation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCircuitBreakingException
specifier|public
name|void
name|testCircuitBreakingException
parameter_list|()
throws|throws
name|IOException
block|{
name|CircuitBreakingException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|CircuitBreakingException
argument_list|(
literal|"I hate to say I told you so..."
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"I hate to say I told you so..."
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|ex
operator|.
name|getByteLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ex
operator|.
name|getBytesWanted
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTimestampParsingException
specifier|public
name|void
name|testTimestampParsingException
parameter_list|()
throws|throws
name|IOException
block|{
name|TimestampParsingException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|TimestampParsingException
argument_list|(
literal|"TIMESTAMP"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"failed to parse timestamp [TIMESTAMP]"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TIMESTAMP"
argument_list|,
name|ex
operator|.
name|timestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexFailedEngineException
specifier|public
name|void
name|testIndexFailedEngineException
parameter_list|()
throws|throws
name|IOException
block|{
name|ShardId
name|id
init|=
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|IndexFailedEngineException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|IndexFailedEngineException
argument_list|(
name|id
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getShardId
argument_list|()
argument_list|,
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"type"
argument_list|,
name|ex
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|ex
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|=
name|serialize
argument_list|(
operator|new
name|IndexFailedEngineException
argument_list|(
literal|null
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
operator|new
name|NullPointerException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"type"
argument_list|,
name|ex
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|ex
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
block|}
DECL|method|testAliasesMissingException
specifier|public
name|void
name|testAliasesMissingException
parameter_list|()
throws|throws
name|IOException
block|{
name|AliasesNotFoundException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|AliasesNotFoundException
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"aliases [one, two, three] missing"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aliases"
argument_list|,
name|ex
operator|.
name|getResourceType
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"one"
block|,
literal|"two"
block|,
literal|"three"
block|}
argument_list|,
name|ex
operator|.
name|getResourceId
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSearchParseException
specifier|public
name|void
name|testSearchParseException
parameter_list|()
throws|throws
name|IOException
block|{
name|SearchContext
name|ctx
init|=
operator|new
name|TestSearchContext
argument_list|()
decl_stmt|;
name|SearchParseException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|SearchParseException
argument_list|(
name|ctx
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|XContentLocation
argument_list|(
literal|66
argument_list|,
literal|666
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|66
argument_list|,
name|ex
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|666
argument_list|,
name|ex
operator|.
name|getColumnNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ctx
operator|.
name|shardTarget
argument_list|()
argument_list|,
name|ex
operator|.
name|shard
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIllegalIndexShardStateException
specifier|public
name|void
name|testIllegalIndexShardStateException
parameter_list|()
throws|throws
name|IOException
block|{
name|ShardId
name|id
init|=
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|IndexShardState
name|state
init|=
name|randomFrom
argument_list|(
name|IndexShardState
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|IllegalIndexShardStateException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|IllegalIndexShardStateException
argument_list|(
name|id
argument_list|,
name|state
argument_list|,
literal|"come back later buddy"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|ex
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CurrentState["
operator|+
name|state
operator|.
name|name
argument_list|()
operator|+
literal|"] come back later buddy"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|state
argument_list|,
name|ex
operator|.
name|currentState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConnectTransportException
specifier|public
name|void
name|testConnectTransportException
parameter_list|()
throws|throws
name|IOException
block|{
name|DiscoveryNode
name|node
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"thenode"
argument_list|,
operator|new
name|LocalTransportAddress
argument_list|(
literal|"dead.end:666"
argument_list|)
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|ConnectTransportException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"msg"
argument_list|,
literal|"action"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[][local[dead.end:666]][action] msg"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|node
argument_list|,
name|ex
operator|.
name|node
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"action"
argument_list|,
name|ex
operator|.
name|action
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|=
name|serialize
argument_list|(
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"msg"
argument_list|,
literal|"action"
argument_list|,
operator|new
name|NullPointerException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[][local[dead.end:666]][action] msg"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|node
argument_list|,
name|ex
operator|.
name|node
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"action"
argument_list|,
name|ex
operator|.
name|action
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
block|}
DECL|method|testSearchPhaseExecutionException
specifier|public
name|void
name|testSearchPhaseExecutionException
parameter_list|()
throws|throws
name|IOException
block|{
name|ShardSearchFailure
index|[]
name|empty
init|=
operator|new
name|ShardSearchFailure
index|[
literal|0
index|]
decl_stmt|;
name|SearchPhaseExecutionException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|SearchPhaseExecutionException
argument_list|(
literal|"boom"
argument_list|,
literal|"baam"
argument_list|,
operator|new
name|NullPointerException
argument_list|()
argument_list|,
name|empty
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"boom"
argument_list|,
name|ex
operator|.
name|getPhaseName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"baam"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|empty
operator|.
name|length
argument_list|,
name|ex
operator|.
name|shardFailures
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|ShardSearchFailure
index|[]
name|one
init|=
operator|new
name|ShardSearchFailure
index|[]
block|{
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"nono!"
argument_list|)
argument_list|)
block|}
decl_stmt|;
name|ex
operator|=
name|serialize
argument_list|(
operator|new
name|SearchPhaseExecutionException
argument_list|(
literal|"boom"
argument_list|,
literal|"baam"
argument_list|,
operator|new
name|NullPointerException
argument_list|()
argument_list|,
name|one
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boom"
argument_list|,
name|ex
operator|.
name|getPhaseName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"baam"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|one
operator|.
name|length
argument_list|,
name|ex
operator|.
name|shardFailures
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|shardFailures
argument_list|()
index|[
literal|0
index|]
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
block|}
DECL|method|testRoutingMissingException
specifier|public
name|void
name|testRoutingMissingException
parameter_list|()
throws|throws
name|IOException
block|{
name|RoutingMissingException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|RoutingMissingException
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"idx"
argument_list|,
name|ex
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"type"
argument_list|,
name|ex
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|ex
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"routing is required for [idx]/[type]/[id]"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRepositoryException
specifier|public
name|void
name|testRepositoryException
parameter_list|()
throws|throws
name|IOException
block|{
name|RepositoryException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|RepositoryException
argument_list|(
literal|"repo"
argument_list|,
literal|"msg"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"repo"
argument_list|,
name|ex
operator|.
name|repository
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[repo] msg"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|=
name|serialize
argument_list|(
operator|new
name|RepositoryException
argument_list|(
literal|null
argument_list|,
literal|"msg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|repository
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[_na] msg"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexWarmerMissingException
specifier|public
name|void
name|testIndexWarmerMissingException
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexWarmerMissingException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|IndexWarmerMissingException
argument_list|(
literal|"w1"
argument_list|,
literal|"w2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"index_warmer [w1, w2] missing"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"w1"
block|,
literal|"w2"
block|}
argument_list|,
name|ex
operator|.
name|names
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexTemplateMissingException
specifier|public
name|void
name|testIndexTemplateMissingException
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexTemplateMissingException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|IndexTemplateMissingException
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"index_template [name] missing"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
name|ex
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|=
name|serialize
argument_list|(
operator|new
name|IndexTemplateMissingException
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"index_template [null] missing"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRecoveryEngineException
specifier|public
name|void
name|testRecoveryEngineException
parameter_list|()
throws|throws
name|IOException
block|{
name|ShardId
name|id
init|=
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RecoveryEngineException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|RecoveryEngineException
argument_list|(
name|id
argument_list|,
literal|10
argument_list|,
literal|"total failure"
argument_list|,
operator|new
name|NullPointerException
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|ex
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Phase[10] total failure"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|ex
operator|.
name|phase
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|=
name|serialize
argument_list|(
operator|new
name|RecoveryEngineException
argument_list|(
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|"total failure"
argument_list|,
operator|new
name|NullPointerException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ex
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ex
operator|.
name|phase
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailedNodeException
specifier|public
name|void
name|testFailedNodeException
parameter_list|()
throws|throws
name|IOException
block|{
name|FailedNodeException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|FailedNodeException
argument_list|(
literal|"the node"
argument_list|,
literal|"the message"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"the node"
argument_list|,
name|ex
operator|.
name|nodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"the message"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testClusterBlockException
specifier|public
name|void
name|testClusterBlockException
parameter_list|()
throws|throws
name|IOException
block|{
name|ClusterBlockException
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|ClusterBlockException
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|DiscoverySettings
operator|.
name|NO_MASTER_BLOCK_WRITES
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"blocked by: [SERVICE_UNAVAILABLE/2/no master];"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|blocks
argument_list|()
operator|.
name|contains
argument_list|(
name|DiscoverySettings
operator|.
name|NO_MASTER_BLOCK_WRITES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ex
operator|.
name|blocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|toXContent
specifier|private
name|String
name|toXContent
parameter_list|(
name|ToXContent
name|x
parameter_list|)
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|x
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
operator|new
name|ToXContent
operator|.
name|MapParams
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ElasticsearchException
operator|.
name|REST_EXCEPTION_SKIP_STACK_TRACE
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|"{ \"error\" : \""
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\"}"
return|;
block|}
block|}
DECL|method|testNotSerializableExceptionWrapper
specifier|public
name|void
name|testNotSerializableExceptionWrapper
parameter_list|()
throws|throws
name|IOException
block|{
name|NotSerializableExceptionWrapper
name|ex
init|=
name|serialize
argument_list|(
operator|new
name|NotSerializableExceptionWrapper
argument_list|(
operator|new
name|NullPointerException
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"type\":\"null_pointer_exception\",\"reason\":null}"
argument_list|,
name|toXContent
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
name|ex
operator|=
name|serialize
argument_list|(
operator|new
name|NotSerializableExceptionWrapper
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"nono!"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"type\":\"illegal_argument_exception\",\"reason\":\"nono!\"}"
argument_list|,
name|toXContent
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
name|Throwable
index|[]
name|unknowns
init|=
operator|new
name|Throwable
index|[]
block|{
operator|new
name|JsonParseException
argument_list|(
literal|"foobar"
argument_list|,
operator|new
name|JsonLocation
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
block|,
operator|new
name|GroovyCastException
argument_list|(
literal|"boom boom boom"
argument_list|)
block|,
operator|new
name|IOException
argument_list|(
literal|"booom"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|Throwable
name|t
range|:
name|unknowns
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|t
operator|.
name|addSuppressed
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"suppressed"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|addSuppressed
argument_list|(
operator|new
name|NullPointerException
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Throwable
name|deserialized
init|=
name|serialize
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|deserialized
operator|instanceof
name|NotSerializableExceptionWrapper
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|t
operator|.
name|getStackTrace
argument_list|()
argument_list|,
name|deserialized
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|getSuppressed
argument_list|()
operator|.
name|length
argument_list|,
name|deserialized
operator|.
name|getSuppressed
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|getSuppressed
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|deserialized
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
operator|instanceof
name|NotSerializableExceptionWrapper
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|t
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
operator|.
name|getStackTrace
argument_list|()
argument_list|,
name|deserialized
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deserialized
operator|.
name|getSuppressed
argument_list|()
index|[
literal|1
index|]
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testWithRestHeadersException
specifier|public
name|void
name|testWithRestHeadersException
parameter_list|()
throws|throws
name|IOException
block|{
name|ElasticsearchException
name|ex
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"msg"
argument_list|)
decl_stmt|;
name|ex
operator|.
name|addHeader
argument_list|(
literal|"foo"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|ex
operator|=
name|serialize
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"msg"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ex
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|ex
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|ex
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|RestStatus
name|status
init|=
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
comment|// ensure we are carrying over the headers even if not serialized
name|UnknownHeaderException
name|uhe
init|=
operator|new
name|UnknownHeaderException
argument_list|(
literal|"msg"
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|uhe
operator|.
name|addHeader
argument_list|(
literal|"foo"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|serialize
init|=
name|serialize
argument_list|(
operator|(
name|ElasticsearchException
operator|)
name|uhe
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|serialize
operator|instanceof
name|NotSerializableExceptionWrapper
argument_list|)
expr_stmt|;
name|NotSerializableExceptionWrapper
name|e
init|=
operator|(
name|NotSerializableExceptionWrapper
operator|)
name|serialize
decl_stmt|;
name|assertEquals
argument_list|(
literal|"msg"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|e
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|e
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|e
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|status
argument_list|,
name|e
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|UnknownHeaderException
specifier|public
specifier|static
class|class
name|UnknownHeaderException
extends|extends
name|ElasticsearchException
block|{
DECL|field|status
specifier|private
specifier|final
name|RestStatus
name|status
decl_stmt|;
DECL|method|UnknownHeaderException
specifier|public
name|UnknownHeaderException
parameter_list|(
name|String
name|msg
parameter_list|,
name|RestStatus
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|status
specifier|public
name|RestStatus
name|status
parameter_list|()
block|{
return|return
name|status
return|;
block|}
block|}
DECL|method|testElasticsearchSecurityException
specifier|public
name|void
name|testElasticsearchSecurityException
parameter_list|()
throws|throws
name|IOException
block|{
name|ElasticsearchSecurityException
name|ex
init|=
operator|new
name|ElasticsearchSecurityException
argument_list|(
literal|"user [{}] is not allowed"
argument_list|,
name|RestStatus
operator|.
name|UNAUTHORIZED
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|ElasticsearchSecurityException
name|e
init|=
name|serialize
argument_list|(
name|ex
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|status
argument_list|()
argument_list|,
name|e
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RestStatus
operator|.
name|UNAUTHORIZED
argument_list|,
name|e
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInterruptedException
specifier|public
name|void
name|testInterruptedException
parameter_list|()
throws|throws
name|IOException
block|{
name|InterruptedException
name|orig
init|=
name|randomBoolean
argument_list|()
condition|?
operator|new
name|InterruptedException
argument_list|(
literal|"boom"
argument_list|)
else|:
operator|new
name|InterruptedException
argument_list|()
decl_stmt|;
name|InterruptedException
name|ex
init|=
name|serialize
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|orig
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|UnknownException
specifier|public
specifier|static
class|class
name|UnknownException
extends|extends
name|Exception
block|{
DECL|method|UnknownException
specifier|public
name|UnknownException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|UnknownException
specifier|public
name|UnknownException
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

