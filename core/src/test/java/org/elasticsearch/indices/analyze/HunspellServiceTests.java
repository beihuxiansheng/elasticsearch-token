begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.analyze
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analyze
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|hunspell
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|HunspellService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|HunspellService
operator|.
name|HUNSPELL_IGNORE_CASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|HunspellService
operator|.
name|HUNSPELL_LAZY_LOAD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|HunspellServiceTests
specifier|public
class|class
name|HunspellServiceTests
extends|extends
name|ESTestCase
block|{
DECL|method|testLocaleDirectoryWithNodeLevelConfig
specifier|public
name|void
name|testLocaleDirectoryWithNodeLevelConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_CONF_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|getDataPath
argument_list|(
literal|"/indices/analyze/conf_dir"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|HUNSPELL_LAZY_LOAD
operator|.
name|getKey
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|HUNSPELL_IGNORE_CASE
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Dictionary
name|dictionary
init|=
operator|new
name|HunspellService
argument_list|(
name|settings
argument_list|,
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|getDictionary
argument_list|(
literal|"en_US"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|dictionary
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dictionary
operator|.
name|getIgnoreCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLocaleDirectoryWithLocaleSpecificConfig
specifier|public
name|void
name|testLocaleDirectoryWithLocaleSpecificConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_CONF_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|getDataPath
argument_list|(
literal|"/indices/analyze/conf_dir"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|HUNSPELL_LAZY_LOAD
operator|.
name|getKey
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|HUNSPELL_IGNORE_CASE
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"indices.analysis.hunspell.dictionary.en_US.strict_affix_parsing"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"indices.analysis.hunspell.dictionary.en_US.ignore_case"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Dictionary
name|dictionary
init|=
operator|new
name|HunspellService
argument_list|(
name|settings
argument_list|,
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|getDictionary
argument_list|(
literal|"en_US"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|dictionary
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dictionary
operator|.
name|getIgnoreCase
argument_list|()
argument_list|)
expr_stmt|;
comment|// testing that dictionary specific settings override node level settings
name|dictionary
operator|=
operator|new
name|HunspellService
argument_list|(
name|settings
argument_list|,
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|getDictionary
argument_list|(
literal|"en_US_custom"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dictionary
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dictionary
operator|.
name|getIgnoreCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDicWithNoAff
specifier|public
name|void
name|testDicWithNoAff
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_CONF_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|getDataPath
argument_list|(
literal|"/indices/analyze/no_aff_conf_dir"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|HUNSPELL_LAZY_LOAD
operator|.
name|getKey
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IllegalStateException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|HunspellService
argument_list|(
name|settings
argument_list|,
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|getDictionary
argument_list|(
literal|"en_US"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"failed to load hunspell dictionary for locale: en_US"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"Missing affix file"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDicWithTwoAffs
specifier|public
name|void
name|testDicWithTwoAffs
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_CONF_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|getDataPath
argument_list|(
literal|"/indices/analyze/two_aff_conf_dir"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|HUNSPELL_LAZY_LOAD
operator|.
name|getKey
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IllegalStateException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|HunspellService
argument_list|(
name|settings
argument_list|,
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|getDictionary
argument_list|(
literal|"en_US"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"failed to load hunspell dictionary for locale: en_US"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"Too many affix files"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

