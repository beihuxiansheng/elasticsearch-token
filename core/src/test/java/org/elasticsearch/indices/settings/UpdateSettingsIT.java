begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LogEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|AbstractAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|filter
operator|.
name|RegexFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|settings
operator|.
name|get
operator|.
name|GetSettingsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|settings
operator|.
name|put
operator|.
name|UpdateSettingsRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|MergePolicyConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|MergeSchedulerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|VersionConflictEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_BLOCKS_METADATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_BLOCKS_READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_BLOCKS_WRITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_READ_ONLY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertBlocked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|UpdateSettingsIT
specifier|public
class|class
name|UpdateSettingsIT
extends|extends
name|ESIntegTestCase
block|{
DECL|method|testInvalidDynamicUpdate
specifier|public
name|void
name|testInvalidDynamicUpdate
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|exception
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.dummy"
argument_list|,
literal|"boom"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exception
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"this setting goes boom"
argument_list|)
expr_stmt|;
name|IndexMetaData
name|indexMetaData
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"index.dummy"
argument_list|)
argument_list|,
literal|"invalid dynamic value"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|DummySettingPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|class|DummySettingPlugin
specifier|public
specifier|static
class|class
name|DummySettingPlugin
extends|extends
name|Plugin
block|{
DECL|field|DUMMY_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|DUMMY_SETTING
init|=
name|Setting
operator|.
name|simpleString
argument_list|(
literal|"index.dummy"
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|IndexScope
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|Dynamic
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|onIndexModule
specifier|public
name|void
name|onIndexModule
parameter_list|(
name|IndexModule
name|indexModule
parameter_list|)
block|{
name|indexModule
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|DUMMY_SETTING
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
block|{}
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
literal|"boom"
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"this setting goes boom"
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSettings
specifier|public
name|List
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSettings
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|DUMMY_SETTING
argument_list|)
return|;
block|}
block|}
DECL|method|testResetDefault
specifier|public
name|void
name|testResetDefault
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.refresh_interval"
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.translog.flush_threshold_size"
argument_list|,
literal|"1024b"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|IndexMetaData
name|indexMetaData
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"index.refresh_interval"
argument_list|)
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
for|for
control|(
name|IndicesService
name|service
range|:
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
control|)
block|{
name|IndexService
name|indexService
init|=
name|service
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexService
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|indexService
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getRefreshInterval
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|indexService
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getFlushThresholdSize
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
block|}
block|}
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putNull
argument_list|(
literal|"index.refresh_interval"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|indexMetaData
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"index.refresh_interval"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|IndicesService
name|service
range|:
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
control|)
block|{
name|IndexService
name|indexService
init|=
name|service
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexService
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|indexService
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getRefreshInterval
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|indexService
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getFlushThresholdSize
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testOpenCloseUpdateSettings
specifier|public
name|void
name|testOpenCloseUpdateSettings
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.refresh_interval"
argument_list|,
operator|-
literal|1
argument_list|)
comment|// this one can change
operator|.
name|put
argument_list|(
literal|"index.fielddata.cache"
argument_list|,
literal|"none"
argument_list|)
argument_list|)
comment|// this one can't
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
name|IndexMetaData
name|indexMetaData
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"index.refresh_interval"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"index.fielddata.cache"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now verify via dedicated get settings api:
name|GetSettingsResponse
name|getSettingsResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getSettingsResponse
operator|.
name|getSetting
argument_list|(
literal|"test"
argument_list|,
literal|"index.refresh_interval"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getSettingsResponse
operator|.
name|getSetting
argument_list|(
literal|"test"
argument_list|,
literal|"index.fielddata.cache"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.refresh_interval"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
comment|// this one can change
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|indexMetaData
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"index.refresh_interval"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now verify via dedicated get settings api:
name|getSettingsResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getSettingsResponse
operator|.
name|getSetting
argument_list|(
literal|"test"
argument_list|,
literal|"index.refresh_interval"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// now close the index, change the non dynamic setting, and see that it applies
comment|// Wait for the index to turn green before attempting to close it
name|ClusterHealthResponse
name|health
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setTimeout
argument_list|(
literal|"30s"
argument_list|)
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|health
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClose
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"can't change number of replicas on a closed index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Can't update [index.number_of_replicas] on closed indices [[test/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"]] - can leave index in an unopenable state"
argument_list|)
argument_list|)
expr_stmt|;
comment|// expected
block|}
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.refresh_interval"
argument_list|,
literal|"1s"
argument_list|)
comment|// this one can change
operator|.
name|put
argument_list|(
literal|"index.fielddata.cache"
argument_list|,
literal|"none"
argument_list|)
argument_list|)
comment|// this one can't
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|indexMetaData
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"index.refresh_interval"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"index.fielddata.cache"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"none"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now verify via dedicated get settings api:
name|getSettingsResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getSettingsResponse
operator|.
name|getSetting
argument_list|(
literal|"test"
argument_list|,
literal|"index.refresh_interval"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getSettingsResponse
operator|.
name|getSetting
argument_list|(
literal|"test"
argument_list|,
literal|"index.fielddata.cache"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"none"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEngineGCDeletesSetting
specifier|public
name|void
name|testEngineGCDeletesSetting
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f"
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// set version to 1
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// sets version to 2
comment|// delete is still in cache this should work& set version to 3
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f"
argument_list|,
literal|2
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.gc_deletes"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// sets version to 4
name|Thread
operator|.
name|sleep
argument_list|(
literal|300
argument_list|)
expr_stmt|;
comment|// wait for cache time to change TODO: this needs to be solved better. To be discussed.
comment|// delete is should not be in cache
name|assertThrows
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f"
argument_list|,
literal|3
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|4
argument_list|)
argument_list|,
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|class|MockAppender
specifier|private
specifier|static
class|class
name|MockAppender
extends|extends
name|AbstractAppender
block|{
DECL|field|sawUpdateMaxThreadCount
specifier|public
name|boolean
name|sawUpdateMaxThreadCount
decl_stmt|;
DECL|field|sawUpdateAutoThrottle
specifier|public
name|boolean
name|sawUpdateAutoThrottle
decl_stmt|;
DECL|method|MockAppender
specifier|public
name|MockAppender
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IllegalAccessException
block|{
name|super
argument_list|(
name|name
argument_list|,
name|RegexFilter
operator|.
name|createFilter
argument_list|(
literal|".*(\n.*)*"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|append
specifier|public
name|void
name|append
parameter_list|(
name|LogEvent
name|event
parameter_list|)
block|{
name|String
name|message
init|=
name|event
operator|.
name|getMessage
argument_list|()
operator|.
name|getFormattedMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getLevel
argument_list|()
operator|==
name|Level
operator|.
name|TRACE
operator|&&
name|event
operator|.
name|getLoggerName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"lucene.iw"
argument_list|)
condition|)
block|{             }
if|if
condition|(
name|event
operator|.
name|getLevel
argument_list|()
operator|==
name|Level
operator|.
name|INFO
operator|&&
name|message
operator|.
name|contains
argument_list|(
literal|"updating [index.merge.scheduler.max_thread_count] from [10000] to [1]"
argument_list|)
condition|)
block|{
name|sawUpdateMaxThreadCount
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getLevel
argument_list|()
operator|==
name|Level
operator|.
name|INFO
operator|&&
name|message
operator|.
name|contains
argument_list|(
literal|"updating [index.merge.scheduler.auto_throttle] from [true] to [false]"
argument_list|)
condition|)
block|{
name|sawUpdateAutoThrottle
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|ignoreExceptions
specifier|public
name|boolean
name|ignoreExceptions
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|testUpdateAutoThrottleSettings
specifier|public
name|void
name|testUpdateAutoThrottleSettings
parameter_list|()
throws|throws
name|Exception
block|{
name|MockAppender
name|mockAppender
init|=
operator|new
name|MockAppender
argument_list|(
literal|"testUpdateAutoThrottleSettings"
argument_list|)
decl_stmt|;
name|mockAppender
operator|.
name|start
argument_list|()
expr_stmt|;
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|Loggers
operator|.
name|addAppender
argument_list|(
name|rootLogger
argument_list|,
name|mockAppender
argument_list|)
expr_stmt|;
name|Level
name|savedLevel
init|=
name|rootLogger
operator|.
name|getLevel
argument_list|()
decl_stmt|;
name|Loggers
operator|.
name|setLevel
argument_list|(
name|rootLogger
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
try|try
block|{
comment|// No throttling at first, only 1 non-replicated shard, force lots of merging:
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|"1"
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|"0"
argument_list|)
operator|.
name|put
argument_list|(
name|MergePolicyConfig
operator|.
name|INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"2"
argument_list|)
operator|.
name|put
argument_list|(
name|MergePolicyConfig
operator|.
name|INDEX_MERGE_POLICY_SEGMENTS_PER_TIER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"2"
argument_list|)
operator|.
name|put
argument_list|(
name|MergeSchedulerConfig
operator|.
name|MAX_THREAD_COUNT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"1"
argument_list|)
operator|.
name|put
argument_list|(
name|MergeSchedulerConfig
operator|.
name|MAX_MERGE_COUNT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"2"
argument_list|)
operator|.
name|put
argument_list|(
name|MergeSchedulerConfig
operator|.
name|AUTO_THROTTLE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Disable auto throttle:
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|MergeSchedulerConfig
operator|.
name|AUTO_THROTTLE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"false"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// if a node has processed the cluster state update but not yet returned from the update task, it might still log messages;
comment|// these log messages will race with the stopping of the appender so we wait to ensure these tasks are done processing
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
for|for
control|(
specifier|final
name|ClusterService
name|service
range|:
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
control|)
block|{
name|assertThat
argument_list|(
name|service
operator|.
name|numberOfPendingTasks
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Make sure we log the change:
name|assertTrue
argument_list|(
name|mockAppender
operator|.
name|sawUpdateAutoThrottle
argument_list|)
expr_stmt|;
comment|// Make sure setting says it is in fact changed:
name|GetSettingsResponse
name|getSettingsResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getSettingsResponse
operator|.
name|getSetting
argument_list|(
literal|"test"
argument_list|,
name|MergeSchedulerConfig
operator|.
name|AUTO_THROTTLE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Loggers
operator|.
name|setLevel
argument_list|(
name|rootLogger
argument_list|,
name|savedLevel
argument_list|)
expr_stmt|;
name|Loggers
operator|.
name|removeAppender
argument_list|(
name|rootLogger
argument_list|,
name|mockAppender
argument_list|)
expr_stmt|;
comment|// don't call stop here some node might still use this reference at this point causing tests to fail.
comment|// this is only relevant in integ tests, unittest can control what uses a logger and what doesn't
comment|// mockAppender.stop();
block|}
block|}
DECL|method|testInvalidMergeMaxThreadCount
specifier|public
name|void
name|testInvalidMergeMaxThreadCount
parameter_list|()
throws|throws
name|IllegalAccessException
block|{
name|CreateIndexRequestBuilder
name|createBuilder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|"1"
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|"0"
argument_list|)
operator|.
name|put
argument_list|(
name|MergePolicyConfig
operator|.
name|INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"2"
argument_list|)
operator|.
name|put
argument_list|(
name|MergePolicyConfig
operator|.
name|INDEX_MERGE_POLICY_SEGMENTS_PER_TIER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"2"
argument_list|)
operator|.
name|put
argument_list|(
name|MergeSchedulerConfig
operator|.
name|MAX_THREAD_COUNT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"100"
argument_list|)
operator|.
name|put
argument_list|(
name|MergeSchedulerConfig
operator|.
name|MAX_MERGE_COUNT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"10"
argument_list|)
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|exc
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|createBuilder
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exc
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"maxThreadCount (= 100) should be<= maxMergeCount (= 10)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|"1"
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|"0"
argument_list|)
operator|.
name|put
argument_list|(
name|MergePolicyConfig
operator|.
name|INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"2"
argument_list|)
operator|.
name|put
argument_list|(
name|MergePolicyConfig
operator|.
name|INDEX_MERGE_POLICY_SEGMENTS_PER_TIER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"2"
argument_list|)
operator|.
name|put
argument_list|(
name|MergeSchedulerConfig
operator|.
name|MAX_THREAD_COUNT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"100"
argument_list|)
operator|.
name|put
argument_list|(
name|MergeSchedulerConfig
operator|.
name|MAX_MERGE_COUNT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"100"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|UpdateSettingsRequestBuilder
name|updateBuilder
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|MergeSchedulerConfig
operator|.
name|MAX_THREAD_COUNT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"1000"
argument_list|)
argument_list|)
decl_stmt|;
name|exc
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|updateBuilder
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exc
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"maxThreadCount (= 1000) should be<= maxMergeCount (= 100)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|UpdateSettingsRequestBuilder
name|updateBuilder
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|MergeSchedulerConfig
operator|.
name|MAX_MERGE_COUNT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"10"
argument_list|)
argument_list|)
decl_stmt|;
name|exc
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|updateBuilder
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exc
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"maxThreadCount (= 100) should be<= maxMergeCount (= 10)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// #6882: make sure we can change index.merge.scheduler.max_thread_count live
DECL|method|testUpdateMergeMaxThreadCount
specifier|public
name|void
name|testUpdateMergeMaxThreadCount
parameter_list|()
throws|throws
name|Exception
block|{
name|MockAppender
name|mockAppender
init|=
operator|new
name|MockAppender
argument_list|(
literal|"testUpdateMergeMaxThreadCount"
argument_list|)
decl_stmt|;
name|mockAppender
operator|.
name|start
argument_list|()
expr_stmt|;
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|Level
name|savedLevel
init|=
name|rootLogger
operator|.
name|getLevel
argument_list|()
decl_stmt|;
name|Loggers
operator|.
name|addAppender
argument_list|(
name|rootLogger
argument_list|,
name|mockAppender
argument_list|)
expr_stmt|;
name|Loggers
operator|.
name|setLevel
argument_list|(
name|rootLogger
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
try|try
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|"1"
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|"0"
argument_list|)
operator|.
name|put
argument_list|(
name|MergePolicyConfig
operator|.
name|INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"2"
argument_list|)
operator|.
name|put
argument_list|(
name|MergePolicyConfig
operator|.
name|INDEX_MERGE_POLICY_SEGMENTS_PER_TIER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"2"
argument_list|)
operator|.
name|put
argument_list|(
name|MergeSchedulerConfig
operator|.
name|MAX_THREAD_COUNT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"10000"
argument_list|)
operator|.
name|put
argument_list|(
name|MergeSchedulerConfig
operator|.
name|MAX_MERGE_COUNT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"10000"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mockAppender
operator|.
name|sawUpdateMaxThreadCount
argument_list|)
expr_stmt|;
comment|// Now make a live change to reduce allowed merge threads:
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|MergeSchedulerConfig
operator|.
name|MAX_THREAD_COUNT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// if a node has processed the cluster state update but not yet returned from the update task, it might still log messages;
comment|// these log messages will race with the stopping of the appender so we wait to ensure these tasks are done processing
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
for|for
control|(
specifier|final
name|ClusterService
name|service
range|:
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
control|)
block|{
name|assertThat
argument_list|(
name|service
operator|.
name|numberOfPendingTasks
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Make sure we log the change:
name|assertTrue
argument_list|(
name|mockAppender
operator|.
name|sawUpdateMaxThreadCount
argument_list|)
expr_stmt|;
comment|// Make sure setting says it is in fact changed:
name|GetSettingsResponse
name|getSettingsResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getSettingsResponse
operator|.
name|getSetting
argument_list|(
literal|"test"
argument_list|,
name|MergeSchedulerConfig
operator|.
name|MAX_THREAD_COUNT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Loggers
operator|.
name|setLevel
argument_list|(
name|rootLogger
argument_list|,
name|savedLevel
argument_list|)
expr_stmt|;
name|Loggers
operator|.
name|removeAppender
argument_list|(
name|rootLogger
argument_list|,
name|mockAppender
argument_list|)
expr_stmt|;
comment|// don't call stop here some node might still use this reference at this point causing tests to fail.
comment|// this is only relevant in integ tests, unittest can control what uses a logger and what doesn't
comment|// mockAppender.stop();
block|}
block|}
DECL|method|testUpdateSettingsWithBlocks
specifier|public
name|void
name|testUpdateSettingsWithBlocks
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.refresh_interval"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|blockSetting
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|SETTING_BLOCKS_READ
argument_list|,
name|SETTING_BLOCKS_WRITE
argument_list|)
control|)
block|{
try|try
block|{
name|enableIndexBlock
argument_list|(
literal|"test"
argument_list|,
name|blockSetting
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|disableIndexBlock
argument_list|(
literal|"test"
argument_list|,
name|blockSetting
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Closing an index is blocked
for|for
control|(
name|String
name|blockSetting
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|SETTING_READ_ONLY
argument_list|,
name|SETTING_BLOCKS_METADATA
argument_list|)
control|)
block|{
try|try
block|{
name|enableIndexBlock
argument_list|(
literal|"test"
argument_list|,
name|blockSetting
argument_list|)
expr_stmt|;
name|assertBlocked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|disableIndexBlock
argument_list|(
literal|"test"
argument_list|,
name|blockSetting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

