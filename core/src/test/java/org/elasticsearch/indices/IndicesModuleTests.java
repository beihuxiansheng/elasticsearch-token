begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldNamesFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|IdFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MetadataFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|TextFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|mapper
operator|.
name|MapperRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|MapperPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_class
DECL|class|IndicesModuleTests
specifier|public
class|class
name|IndicesModuleTests
extends|extends
name|ESTestCase
block|{
DECL|class|FakeMapperParser
specifier|private
specifier|static
class|class
name|FakeMapperParser
implements|implements
name|Mapper
operator|.
name|TypeParser
block|{
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Mapper
operator|.
name|Builder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|FakeMetadataMapperParser
specifier|private
specifier|static
class|class
name|FakeMetadataMapperParser
implements|implements
name|MetadataFieldMapper
operator|.
name|TypeParser
block|{
annotation|@
name|Override
DECL|method|parse
specifier|public
name|MetadataFieldMapper
operator|.
name|Builder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getDefault
specifier|public
name|MetadataFieldMapper
name|getDefault
parameter_list|(
name|MappedFieldType
name|fieldType
parameter_list|,
name|ParserContext
name|context
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|field|fakePlugins
name|List
argument_list|<
name|MapperPlugin
argument_list|>
name|fakePlugins
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|MapperPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Mapper
operator|.
name|TypeParser
argument_list|>
name|getMappers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"fake-mapper"
argument_list|,
operator|new
name|FakeMapperParser
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFieldMapper
operator|.
name|TypeParser
argument_list|>
name|getMetadataMappers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"fake-metadata-mapper"
argument_list|,
operator|new
name|FakeMetadataMapperParser
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|method|testBuiltinMappers
specifier|public
name|void
name|testBuiltinMappers
parameter_list|()
block|{
name|IndicesModule
name|module
init|=
operator|new
name|IndicesModule
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|module
operator|.
name|getMapperRegistry
argument_list|()
operator|.
name|getMapperParsers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|module
operator|.
name|getMapperRegistry
argument_list|()
operator|.
name|getMetadataMapperParsers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuiltinWithPlugins
specifier|public
name|void
name|testBuiltinWithPlugins
parameter_list|()
block|{
name|IndicesModule
name|module
init|=
operator|new
name|IndicesModule
argument_list|(
name|fakePlugins
argument_list|)
decl_stmt|;
name|MapperRegistry
name|registry
init|=
name|module
operator|.
name|getMapperRegistry
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|registry
operator|.
name|getMapperParsers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|greaterThan
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|registry
operator|.
name|getMetadataMapperParsers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|greaterThan
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDuplicateBuiltinMapper
specifier|public
name|void
name|testDuplicateBuiltinMapper
parameter_list|()
block|{
name|List
argument_list|<
name|MapperPlugin
argument_list|>
name|plugins
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|MapperPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Mapper
operator|.
name|TypeParser
argument_list|>
name|getMappers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
name|TextFieldMapper
operator|.
name|CONTENT_TYPE
argument_list|,
operator|new
name|FakeMapperParser
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|IndicesModule
argument_list|(
name|plugins
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Matchers
operator|.
name|containsString
argument_list|(
literal|"already registered"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDuplicateOtherPluginMapper
specifier|public
name|void
name|testDuplicateOtherPluginMapper
parameter_list|()
block|{
name|MapperPlugin
name|plugin
init|=
operator|new
name|MapperPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Mapper
operator|.
name|TypeParser
argument_list|>
name|getMappers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|FakeMapperParser
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|MapperPlugin
argument_list|>
name|plugins
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|plugin
argument_list|,
name|plugin
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|IndicesModule
argument_list|(
name|plugins
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Matchers
operator|.
name|containsString
argument_list|(
literal|"already registered"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDuplicateBuiltinMetadataMapper
specifier|public
name|void
name|testDuplicateBuiltinMetadataMapper
parameter_list|()
block|{
name|List
argument_list|<
name|MapperPlugin
argument_list|>
name|plugins
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|MapperPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFieldMapper
operator|.
name|TypeParser
argument_list|>
name|getMetadataMappers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
name|IdFieldMapper
operator|.
name|NAME
argument_list|,
operator|new
name|FakeMetadataMapperParser
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|IndicesModule
argument_list|(
name|plugins
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Matchers
operator|.
name|containsString
argument_list|(
literal|"already registered"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDuplicateOtherPluginMetadataMapper
specifier|public
name|void
name|testDuplicateOtherPluginMetadataMapper
parameter_list|()
block|{
name|MapperPlugin
name|plugin
init|=
operator|new
name|MapperPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFieldMapper
operator|.
name|TypeParser
argument_list|>
name|getMetadataMappers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|FakeMetadataMapperParser
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|MapperPlugin
argument_list|>
name|plugins
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|plugin
argument_list|,
name|plugin
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|IndicesModule
argument_list|(
name|plugins
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Matchers
operator|.
name|containsString
argument_list|(
literal|"already registered"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDuplicateFieldNamesMapper
specifier|public
name|void
name|testDuplicateFieldNamesMapper
parameter_list|()
block|{
name|List
argument_list|<
name|MapperPlugin
argument_list|>
name|plugins
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|MapperPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFieldMapper
operator|.
name|TypeParser
argument_list|>
name|getMetadataMappers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
name|FieldNamesFieldMapper
operator|.
name|NAME
argument_list|,
operator|new
name|FakeMetadataMapperParser
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|IndicesModule
argument_list|(
name|plugins
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Matchers
operator|.
name|containsString
argument_list|(
literal|"cannot contain metadata mapper [_field_names]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldNamesIsLast
specifier|public
name|void
name|testFieldNamesIsLast
parameter_list|()
block|{
name|IndicesModule
name|module
init|=
operator|new
name|IndicesModule
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|module
operator|.
name|getMapperRegistry
argument_list|()
operator|.
name|getMetadataMapperParsers
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|FieldNamesFieldMapper
operator|.
name|NAME
argument_list|,
name|fieldNames
operator|.
name|get
argument_list|(
name|fieldNames
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldNamesIsLastWithPlugins
specifier|public
name|void
name|testFieldNamesIsLastWithPlugins
parameter_list|()
block|{
name|IndicesModule
name|module
init|=
operator|new
name|IndicesModule
argument_list|(
name|fakePlugins
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|module
operator|.
name|getMapperRegistry
argument_list|()
operator|.
name|getMetadataMapperParsers
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|FieldNamesFieldMapper
operator|.
name|NAME
argument_list|,
name|fieldNames
operator|.
name|get
argument_list|(
name|fieldNames
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

