begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.recovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|stats
operator|.
name|NodeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|stats
operator|.
name|NodesStatsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|snapshots
operator|.
name|create
operator|.
name|CreateSnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|snapshots
operator|.
name|restore
operator|.
name|RestoreSnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|CommonStatsFlags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|IndicesStatsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
operator|.
name|PeerRecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
operator|.
name|SnapshotRecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
operator|.
name|StoreRecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|MoveAllocationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|recovery
operator|.
name|RecoveryStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryState
operator|.
name|Stage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalTestCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|store
operator|.
name|MockFSDirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|store
operator|.
name|MockFSIndexStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|)
DECL|class|IndexRecoveryIT
specifier|public
class|class
name|IndexRecoveryIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|INDEX_NAME
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_NAME
init|=
literal|"test-idx-1"
decl_stmt|;
DECL|field|INDEX_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_TYPE
init|=
literal|"test-type-1"
decl_stmt|;
DECL|field|REPO_NAME
specifier|private
specifier|static
specifier|final
name|String
name|REPO_NAME
init|=
literal|"test-repo-1"
decl_stmt|;
DECL|field|SNAP_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SNAP_NAME
init|=
literal|"test-snap-1"
decl_stmt|;
DECL|field|MIN_DOC_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|MIN_DOC_COUNT
init|=
literal|500
decl_stmt|;
DECL|field|MAX_DOC_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|MAX_DOC_COUNT
init|=
literal|1000
decl_stmt|;
DECL|field|SHARD_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|SHARD_COUNT
init|=
literal|1
decl_stmt|;
DECL|field|REPLICA_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|REPLICA_COUNT
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|MockTransportService
operator|.
name|TestPlugin
operator|.
name|class
argument_list|,
name|MockFSIndexStore
operator|.
name|TestPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|assertRecoveryStateWithoutStage
specifier|private
name|void
name|assertRecoveryStateWithoutStage
parameter_list|(
name|RecoveryState
name|state
parameter_list|,
name|int
name|shardId
parameter_list|,
name|RecoverySource
name|recoverySource
parameter_list|,
name|boolean
name|primary
parameter_list|,
name|String
name|sourceNode
parameter_list|,
name|String
name|targetNode
parameter_list|)
block|{
name|assertThat
argument_list|(
name|state
operator|.
name|getShardId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getRecoverySource
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|recoverySource
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getPrimary
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|primary
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sourceNode
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|state
operator|.
name|getSourceNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|state
operator|.
name|getSourceNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getSourceNode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|sourceNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|targetNode
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|state
operator|.
name|getTargetNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|state
operator|.
name|getTargetNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getTargetNode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|targetNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertRecoveryState
specifier|private
name|void
name|assertRecoveryState
parameter_list|(
name|RecoveryState
name|state
parameter_list|,
name|int
name|shardId
parameter_list|,
name|RecoverySource
name|type
parameter_list|,
name|boolean
name|primary
parameter_list|,
name|Stage
name|stage
parameter_list|,
name|String
name|sourceNode
parameter_list|,
name|String
name|targetNode
parameter_list|)
block|{
name|assertRecoveryStateWithoutStage
argument_list|(
name|state
argument_list|,
name|shardId
argument_list|,
name|type
argument_list|,
name|primary
argument_list|,
name|sourceNode
argument_list|,
name|targetNode
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getStage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|stage
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertOnGoingRecoveryState
specifier|private
name|void
name|assertOnGoingRecoveryState
parameter_list|(
name|RecoveryState
name|state
parameter_list|,
name|int
name|shardId
parameter_list|,
name|RecoverySource
name|type
parameter_list|,
name|boolean
name|primary
parameter_list|,
name|String
name|sourceNode
parameter_list|,
name|String
name|targetNode
parameter_list|)
block|{
name|assertRecoveryStateWithoutStage
argument_list|(
name|state
argument_list|,
name|shardId
argument_list|,
name|type
argument_list|,
name|primary
argument_list|,
name|sourceNode
argument_list|,
name|targetNode
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|getStage
argument_list|()
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|Stage
operator|.
name|DONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|slowDownRecovery
specifier|private
name|void
name|slowDownRecovery
parameter_list|(
name|ByteSizeValue
name|shardSize
parameter_list|)
block|{
name|long
name|chunkSize
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|shardSize
operator|.
name|getBytes
argument_list|()
operator|/
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|RecoverySettings
name|settings
range|:
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|RecoverySettings
operator|.
name|class
argument_list|)
control|)
block|{
name|setChunkSize
argument_list|(
name|settings
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|chunkSize
argument_list|,
name|ByteSizeUnit
operator|.
name|BYTES
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
comment|// one chunk per sec..
operator|.
name|put
argument_list|(
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_MAX_BYTES_PER_SEC_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|chunkSize
argument_list|,
name|ByteSizeUnit
operator|.
name|BYTES
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|restoreRecoverySpeed
specifier|private
name|void
name|restoreRecoverySpeed
parameter_list|()
block|{
for|for
control|(
name|RecoverySettings
name|settings
range|:
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|RecoverySettings
operator|.
name|class
argument_list|)
control|)
block|{
name|setChunkSize
argument_list|(
name|settings
argument_list|,
name|RecoverySettings
operator|.
name|DEFAULT_CHUNK_SIZE
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_MAX_BYTES_PER_SEC_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"20mb"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGatewayRecovery
specifier|public
name|void
name|testGatewayRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> start nodes"
argument_list|)
expr_stmt|;
name|String
name|node
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|createAndPopulateIndex
argument_list|(
name|INDEX_NAME
argument_list|,
literal|1
argument_list|,
name|SHARD_COUNT
argument_list|,
name|REPLICA_COUNT
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> restarting cluster"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|fullRestart
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> request recoveries"
argument_list|)
expr_stmt|;
name|RecoveryResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRecoveries
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|shardRecoveryStates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|SHARD_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|shardRecoveryStates
argument_list|()
operator|.
name|get
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RecoveryState
argument_list|>
name|recoveryStates
init|=
name|response
operator|.
name|shardRecoveryStates
argument_list|()
operator|.
name|get
argument_list|(
name|INDEX_NAME
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|recoveryStates
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|RecoveryState
name|recoveryState
init|=
name|recoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertRecoveryState
argument_list|(
name|recoveryState
argument_list|,
literal|0
argument_list|,
name|StoreRecoverySource
operator|.
name|EXISTING_STORE_INSTANCE
argument_list|,
literal|true
argument_list|,
name|Stage
operator|.
name|DONE
argument_list|,
literal|null
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|validateIndexRecoveryState
argument_list|(
name|recoveryState
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGatewayRecoveryTestActiveOnly
specifier|public
name|void
name|testGatewayRecoveryTestActiveOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> start nodes"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
name|createAndPopulateIndex
argument_list|(
name|INDEX_NAME
argument_list|,
literal|1
argument_list|,
name|SHARD_COUNT
argument_list|,
name|REPLICA_COUNT
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> restarting cluster"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|fullRestart
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> request recoveries"
argument_list|)
expr_stmt|;
name|RecoveryResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRecoveries
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|setActiveOnly
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RecoveryState
argument_list|>
name|recoveryStates
init|=
name|response
operator|.
name|shardRecoveryStates
argument_list|()
operator|.
name|get
argument_list|(
name|INDEX_NAME
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|recoveryStates
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should not expect any responses back
block|}
DECL|method|testReplicaRecovery
specifier|public
name|void
name|testReplicaRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> start node A"
argument_list|)
expr_stmt|;
name|String
name|nodeA
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> create index on node: {}"
argument_list|,
name|nodeA
argument_list|)
expr_stmt|;
name|createAndPopulateIndex
argument_list|(
name|INDEX_NAME
argument_list|,
literal|1
argument_list|,
name|SHARD_COUNT
argument_list|,
name|REPLICA_COUNT
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start node B"
argument_list|)
expr_stmt|;
name|String
name|nodeB
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// force a shard recovery from nodeA to nodeB
name|logger
operator|.
name|info
argument_list|(
literal|"--> bump replica count"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"number_of_replicas"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> request recoveries"
argument_list|)
expr_stmt|;
name|RecoveryResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRecoveries
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
comment|// we should now have two total shards, one primary and one replica
name|List
argument_list|<
name|RecoveryState
argument_list|>
name|recoveryStates
init|=
name|response
operator|.
name|shardRecoveryStates
argument_list|()
operator|.
name|get
argument_list|(
name|INDEX_NAME
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|recoveryStates
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RecoveryState
argument_list|>
name|nodeAResponses
init|=
name|findRecoveriesForTargetNode
argument_list|(
name|nodeA
argument_list|,
name|recoveryStates
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|nodeAResponses
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RecoveryState
argument_list|>
name|nodeBResponses
init|=
name|findRecoveriesForTargetNode
argument_list|(
name|nodeB
argument_list|,
name|recoveryStates
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|nodeBResponses
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// validate node A recovery
name|RecoveryState
name|nodeARecoveryState
init|=
name|nodeAResponses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertRecoveryState
argument_list|(
name|nodeARecoveryState
argument_list|,
literal|0
argument_list|,
name|StoreRecoverySource
operator|.
name|EMPTY_STORE_INSTANCE
argument_list|,
literal|true
argument_list|,
name|Stage
operator|.
name|DONE
argument_list|,
literal|null
argument_list|,
name|nodeA
argument_list|)
expr_stmt|;
name|validateIndexRecoveryState
argument_list|(
name|nodeARecoveryState
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate node B recovery
name|RecoveryState
name|nodeBRecoveryState
init|=
name|nodeBResponses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertRecoveryState
argument_list|(
name|nodeBRecoveryState
argument_list|,
literal|0
argument_list|,
name|PeerRecoverySource
operator|.
name|INSTANCE
argument_list|,
literal|false
argument_list|,
name|Stage
operator|.
name|DONE
argument_list|,
name|nodeA
argument_list|,
name|nodeB
argument_list|)
expr_stmt|;
name|validateIndexRecoveryState
argument_list|(
name|nodeBRecoveryState
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRerouteRecovery
specifier|public
name|void
name|testRerouteRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> start node A"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|nodeA
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> create index on node: {}"
argument_list|,
name|nodeA
argument_list|)
expr_stmt|;
name|ByteSizeValue
name|shardSize
init|=
name|createAndPopulateIndex
argument_list|(
name|INDEX_NAME
argument_list|,
literal|1
argument_list|,
name|SHARD_COUNT
argument_list|,
name|REPLICA_COUNT
argument_list|)
operator|.
name|getShards
argument_list|()
index|[
literal|0
index|]
operator|.
name|getStats
argument_list|()
operator|.
name|getStore
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start node B"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|nodeB
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> slowing down recoveries"
argument_list|)
expr_stmt|;
name|slowDownRecovery
argument_list|(
name|shardSize
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> move shard from: {} to: {}"
argument_list|,
name|nodeA
argument_list|,
name|nodeB
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MoveAllocationCommand
argument_list|(
name|INDEX_NAME
argument_list|,
literal|0
argument_list|,
name|nodeA
argument_list|,
name|nodeB
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for recovery to start both on source and target"
argument_list|)
expr_stmt|;
specifier|final
name|Index
name|index
init|=
name|resolveIndex
argument_list|(
name|INDEX_NAME
argument_list|)
decl_stmt|;
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|IndicesService
name|indicesService
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|,
name|nodeA
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|index
argument_list|)
operator|.
name|getShard
argument_list|(
literal|0
argument_list|)
operator|.
name|recoveryStats
argument_list|()
operator|.
name|currentAsSource
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|indicesService
operator|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|,
name|nodeB
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|index
argument_list|)
operator|.
name|getShard
argument_list|(
literal|0
argument_list|)
operator|.
name|recoveryStats
argument_list|()
operator|.
name|currentAsTarget
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> request recoveries"
argument_list|)
expr_stmt|;
name|RecoveryResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRecoveries
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RecoveryState
argument_list|>
name|recoveryStates
init|=
name|response
operator|.
name|shardRecoveryStates
argument_list|()
operator|.
name|get
argument_list|(
name|INDEX_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RecoveryState
argument_list|>
name|nodeARecoveryStates
init|=
name|findRecoveriesForTargetNode
argument_list|(
name|nodeA
argument_list|,
name|recoveryStates
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|nodeARecoveryStates
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RecoveryState
argument_list|>
name|nodeBRecoveryStates
init|=
name|findRecoveriesForTargetNode
argument_list|(
name|nodeB
argument_list|,
name|recoveryStates
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|nodeBRecoveryStates
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertRecoveryState
argument_list|(
name|nodeARecoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|StoreRecoverySource
operator|.
name|EMPTY_STORE_INSTANCE
argument_list|,
literal|true
argument_list|,
name|Stage
operator|.
name|DONE
argument_list|,
literal|null
argument_list|,
name|nodeA
argument_list|)
expr_stmt|;
name|validateIndexRecoveryState
argument_list|(
name|nodeARecoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertOnGoingRecoveryState
argument_list|(
name|nodeBRecoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|PeerRecoverySource
operator|.
name|INSTANCE
argument_list|,
literal|true
argument_list|,
name|nodeA
argument_list|,
name|nodeB
argument_list|)
expr_stmt|;
name|validateIndexRecoveryState
argument_list|(
name|nodeBRecoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> request node recovery stats"
argument_list|)
expr_stmt|;
name|NodesStatsResponse
name|statsResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesStats
argument_list|()
operator|.
name|clear
argument_list|()
operator|.
name|setIndices
argument_list|(
operator|new
name|CommonStatsFlags
argument_list|(
name|CommonStatsFlags
operator|.
name|Flag
operator|.
name|Recovery
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|nodeAThrottling
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|nodeBThrottling
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|NodeStats
name|nodeStats
range|:
name|statsResponse
operator|.
name|getNodes
argument_list|()
control|)
block|{
specifier|final
name|RecoveryStats
name|recoveryStats
init|=
name|nodeStats
operator|.
name|getIndices
argument_list|()
operator|.
name|getRecoveryStats
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeStats
operator|.
name|getNode
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeA
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
literal|"node A should have ongoing recovery as source"
argument_list|,
name|recoveryStats
operator|.
name|currentAsSource
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"node A should not have ongoing recovery as target"
argument_list|,
name|recoveryStats
operator|.
name|currentAsTarget
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|nodeAThrottling
operator|=
name|recoveryStats
operator|.
name|throttleTime
argument_list|()
operator|.
name|millis
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nodeStats
operator|.
name|getNode
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeB
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
literal|"node B should not have ongoing recovery as source"
argument_list|,
name|recoveryStats
operator|.
name|currentAsSource
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"node B should have ongoing recovery as target"
argument_list|,
name|recoveryStats
operator|.
name|currentAsTarget
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBThrottling
operator|=
name|recoveryStats
operator|.
name|throttleTime
argument_list|()
operator|.
name|millis
argument_list|()
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> checking throttling increases"
argument_list|)
expr_stmt|;
specifier|final
name|long
name|finalNodeAThrottling
init|=
name|nodeAThrottling
decl_stmt|;
specifier|final
name|long
name|finalNodeBThrottling
init|=
name|nodeBThrottling
decl_stmt|;
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|NodesStatsResponse
name|statsResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesStats
argument_list|()
operator|.
name|clear
argument_list|()
operator|.
name|setIndices
argument_list|(
operator|new
name|CommonStatsFlags
argument_list|(
name|CommonStatsFlags
operator|.
name|Flag
operator|.
name|Recovery
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|statsResponse
operator|.
name|getNodes
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeStats
name|nodeStats
range|:
name|statsResponse
operator|.
name|getNodes
argument_list|()
control|)
block|{
specifier|final
name|RecoveryStats
name|recoveryStats
init|=
name|nodeStats
operator|.
name|getIndices
argument_list|()
operator|.
name|getRecoveryStats
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeStats
operator|.
name|getNode
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeA
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
literal|"node A throttling should increase"
argument_list|,
name|recoveryStats
operator|.
name|throttleTime
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|finalNodeAThrottling
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeStats
operator|.
name|getNode
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeB
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
literal|"node B throttling should increase"
argument_list|,
name|recoveryStats
operator|.
name|throttleTime
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|finalNodeBThrottling
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> speeding up recoveries"
argument_list|)
expr_stmt|;
name|restoreRecoverySpeed
argument_list|()
expr_stmt|;
comment|// wait for it to be finished
name|ensureGreen
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRecoveries
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|recoveryStates
operator|=
name|response
operator|.
name|shardRecoveryStates
argument_list|()
operator|.
name|get
argument_list|(
name|INDEX_NAME
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|recoveryStates
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertRecoveryState
argument_list|(
name|recoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|PeerRecoverySource
operator|.
name|INSTANCE
argument_list|,
literal|true
argument_list|,
name|Stage
operator|.
name|DONE
argument_list|,
name|nodeA
argument_list|,
name|nodeB
argument_list|)
expr_stmt|;
name|validateIndexRecoveryState
argument_list|(
name|recoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|statsResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesStats
argument_list|()
operator|.
name|clear
argument_list|()
operator|.
name|setIndices
argument_list|(
operator|new
name|CommonStatsFlags
argument_list|(
name|CommonStatsFlags
operator|.
name|Flag
operator|.
name|Recovery
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|statsResponse
operator|.
name|getNodes
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeStats
name|nodeStats
range|:
name|statsResponse
operator|.
name|getNodes
argument_list|()
control|)
block|{
specifier|final
name|RecoveryStats
name|recoveryStats
init|=
name|nodeStats
operator|.
name|getIndices
argument_list|()
operator|.
name|getRecoveryStats
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|recoveryStats
operator|.
name|currentAsSource
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|recoveryStats
operator|.
name|currentAsTarget
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeStats
operator|.
name|getNode
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeA
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
literal|"node A throttling should be>0"
argument_list|,
name|recoveryStats
operator|.
name|throttleTime
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeStats
operator|.
name|getNode
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeB
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
literal|"node B throttling should be>0 "
argument_list|,
name|recoveryStats
operator|.
name|throttleTime
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> bump replica count"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"number_of_replicas"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|statsResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesStats
argument_list|()
operator|.
name|clear
argument_list|()
operator|.
name|setIndices
argument_list|(
operator|new
name|CommonStatsFlags
argument_list|(
name|CommonStatsFlags
operator|.
name|Flag
operator|.
name|Recovery
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|statsResponse
operator|.
name|getNodes
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeStats
name|nodeStats
range|:
name|statsResponse
operator|.
name|getNodes
argument_list|()
control|)
block|{
specifier|final
name|RecoveryStats
name|recoveryStats
init|=
name|nodeStats
operator|.
name|getIndices
argument_list|()
operator|.
name|getRecoveryStats
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|recoveryStats
operator|.
name|currentAsSource
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|recoveryStats
operator|.
name|currentAsTarget
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeStats
operator|.
name|getNode
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeA
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
literal|"node A throttling should be>0"
argument_list|,
name|recoveryStats
operator|.
name|throttleTime
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeStats
operator|.
name|getNode
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeB
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
literal|"node B throttling should be>0 "
argument_list|,
name|recoveryStats
operator|.
name|throttleTime
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> start node C"
argument_list|)
expr_stmt|;
name|String
name|nodeC
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|"3"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> slowing down recoveries"
argument_list|)
expr_stmt|;
name|slowDownRecovery
argument_list|(
name|shardSize
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> move replica shard from: {} to: {}"
argument_list|,
name|nodeA
argument_list|,
name|nodeC
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MoveAllocationCommand
argument_list|(
name|INDEX_NAME
argument_list|,
literal|0
argument_list|,
name|nodeA
argument_list|,
name|nodeC
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRecoveries
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|recoveryStates
operator|=
name|response
operator|.
name|shardRecoveryStates
argument_list|()
operator|.
name|get
argument_list|(
name|INDEX_NAME
argument_list|)
expr_stmt|;
name|nodeARecoveryStates
operator|=
name|findRecoveriesForTargetNode
argument_list|(
name|nodeA
argument_list|,
name|recoveryStates
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeARecoveryStates
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBRecoveryStates
operator|=
name|findRecoveriesForTargetNode
argument_list|(
name|nodeB
argument_list|,
name|recoveryStates
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeBRecoveryStates
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RecoveryState
argument_list|>
name|nodeCRecoveryStates
init|=
name|findRecoveriesForTargetNode
argument_list|(
name|nodeC
argument_list|,
name|recoveryStates
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|nodeCRecoveryStates
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertRecoveryState
argument_list|(
name|nodeARecoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|PeerRecoverySource
operator|.
name|INSTANCE
argument_list|,
literal|false
argument_list|,
name|Stage
operator|.
name|DONE
argument_list|,
name|nodeB
argument_list|,
name|nodeA
argument_list|)
expr_stmt|;
name|validateIndexRecoveryState
argument_list|(
name|nodeARecoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertRecoveryState
argument_list|(
name|nodeBRecoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|PeerRecoverySource
operator|.
name|INSTANCE
argument_list|,
literal|true
argument_list|,
name|Stage
operator|.
name|DONE
argument_list|,
name|nodeA
argument_list|,
name|nodeB
argument_list|)
expr_stmt|;
name|validateIndexRecoveryState
argument_list|(
name|nodeBRecoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|// relocations of replicas are marked as REPLICA and the source node is the node holding the primary (B)
name|assertOnGoingRecoveryState
argument_list|(
name|nodeCRecoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|PeerRecoverySource
operator|.
name|INSTANCE
argument_list|,
literal|false
argument_list|,
name|nodeB
argument_list|,
name|nodeC
argument_list|)
expr_stmt|;
name|validateIndexRecoveryState
argument_list|(
name|nodeCRecoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// shutdown node with relocation source of replica shard and check if recovery continues
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|InternalTestCluster
operator|.
name|nameFilter
argument_list|(
name|nodeA
argument_list|)
argument_list|)
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRecoveries
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|recoveryStates
operator|=
name|response
operator|.
name|shardRecoveryStates
argument_list|()
operator|.
name|get
argument_list|(
name|INDEX_NAME
argument_list|)
expr_stmt|;
name|nodeARecoveryStates
operator|=
name|findRecoveriesForTargetNode
argument_list|(
name|nodeA
argument_list|,
name|recoveryStates
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeARecoveryStates
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBRecoveryStates
operator|=
name|findRecoveriesForTargetNode
argument_list|(
name|nodeB
argument_list|,
name|recoveryStates
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeBRecoveryStates
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|nodeCRecoveryStates
operator|=
name|findRecoveriesForTargetNode
argument_list|(
name|nodeC
argument_list|,
name|recoveryStates
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeCRecoveryStates
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertRecoveryState
argument_list|(
name|nodeBRecoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|PeerRecoverySource
operator|.
name|INSTANCE
argument_list|,
literal|true
argument_list|,
name|Stage
operator|.
name|DONE
argument_list|,
name|nodeA
argument_list|,
name|nodeB
argument_list|)
expr_stmt|;
name|validateIndexRecoveryState
argument_list|(
name|nodeBRecoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertOnGoingRecoveryState
argument_list|(
name|nodeCRecoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|PeerRecoverySource
operator|.
name|INSTANCE
argument_list|,
literal|false
argument_list|,
name|nodeB
argument_list|,
name|nodeC
argument_list|)
expr_stmt|;
name|validateIndexRecoveryState
argument_list|(
name|nodeCRecoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> speeding up recoveries"
argument_list|)
expr_stmt|;
name|restoreRecoverySpeed
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRecoveries
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|recoveryStates
operator|=
name|response
operator|.
name|shardRecoveryStates
argument_list|()
operator|.
name|get
argument_list|(
name|INDEX_NAME
argument_list|)
expr_stmt|;
name|nodeARecoveryStates
operator|=
name|findRecoveriesForTargetNode
argument_list|(
name|nodeA
argument_list|,
name|recoveryStates
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeARecoveryStates
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|nodeBRecoveryStates
operator|=
name|findRecoveriesForTargetNode
argument_list|(
name|nodeB
argument_list|,
name|recoveryStates
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeBRecoveryStates
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|nodeCRecoveryStates
operator|=
name|findRecoveriesForTargetNode
argument_list|(
name|nodeC
argument_list|,
name|recoveryStates
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeCRecoveryStates
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertRecoveryState
argument_list|(
name|nodeBRecoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|PeerRecoverySource
operator|.
name|INSTANCE
argument_list|,
literal|true
argument_list|,
name|Stage
operator|.
name|DONE
argument_list|,
name|nodeA
argument_list|,
name|nodeB
argument_list|)
expr_stmt|;
name|validateIndexRecoveryState
argument_list|(
name|nodeBRecoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|// relocations of replicas are marked as REPLICA and the source node is the node holding the primary (B)
name|assertRecoveryState
argument_list|(
name|nodeCRecoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|PeerRecoverySource
operator|.
name|INSTANCE
argument_list|,
literal|false
argument_list|,
name|Stage
operator|.
name|DONE
argument_list|,
name|nodeB
argument_list|,
name|nodeC
argument_list|)
expr_stmt|;
name|validateIndexRecoveryState
argument_list|(
name|nodeCRecoveryStates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSnapshotRecovery
specifier|public
name|void
name|testSnapshotRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> start node A"
argument_list|)
expr_stmt|;
name|String
name|nodeA
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> create repository"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutRepository
argument_list|(
name|REPO_NAME
argument_list|)
operator|.
name|setType
argument_list|(
literal|"fs"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
name|randomRepoPath
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"compress"
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> create index on node: {}"
argument_list|,
name|nodeA
argument_list|)
expr_stmt|;
name|createAndPopulateIndex
argument_list|(
name|INDEX_NAME
argument_list|,
literal|1
argument_list|,
name|SHARD_COUNT
argument_list|,
name|REPLICA_COUNT
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> snapshot"
argument_list|)
expr_stmt|;
name|CreateSnapshotResponse
name|createSnapshotResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareCreateSnapshot
argument_list|(
name|REPO_NAME
argument_list|,
name|SNAP_NAME
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|setIndices
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|createSnapshotResponse
operator|.
name|getSnapshotInfo
argument_list|()
operator|.
name|successfulShards
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|createSnapshotResponse
operator|.
name|getSnapshotInfo
argument_list|()
operator|.
name|successfulShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|createSnapshotResponse
operator|.
name|getSnapshotInfo
argument_list|()
operator|.
name|totalShards
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetSnapshots
argument_list|(
name|REPO_NAME
argument_list|)
operator|.
name|setSnapshots
argument_list|(
name|SNAP_NAME
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getSnapshots
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|SnapshotState
operator|.
name|SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClose
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> restore"
argument_list|)
expr_stmt|;
name|RestoreSnapshotResponse
name|restoreSnapshotResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareRestoreSnapshot
argument_list|(
name|REPO_NAME
argument_list|,
name|SNAP_NAME
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|int
name|totalShards
init|=
name|restoreSnapshotResponse
operator|.
name|getRestoreInfo
argument_list|()
operator|.
name|totalShards
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|totalShards
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> request recoveries"
argument_list|)
expr_stmt|;
name|RecoveryResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRecoveries
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RecoveryState
argument_list|>
argument_list|>
name|indexRecoveryStates
range|:
name|response
operator|.
name|shardRecoveryStates
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|indexRecoveryStates
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|INDEX_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RecoveryState
argument_list|>
name|recoveryStates
init|=
name|indexRecoveryStates
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|recoveryStates
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalShards
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RecoveryState
name|recoveryState
range|:
name|recoveryStates
control|)
block|{
name|SnapshotRecoverySource
name|recoverySource
init|=
operator|new
name|SnapshotRecoverySource
argument_list|(
operator|new
name|Snapshot
argument_list|(
name|REPO_NAME
argument_list|,
name|createSnapshotResponse
operator|.
name|getSnapshotInfo
argument_list|()
operator|.
name|snapshotId
argument_list|()
argument_list|)
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|INDEX_NAME
argument_list|)
decl_stmt|;
name|assertRecoveryState
argument_list|(
name|recoveryState
argument_list|,
literal|0
argument_list|,
name|recoverySource
argument_list|,
literal|true
argument_list|,
name|Stage
operator|.
name|DONE
argument_list|,
literal|null
argument_list|,
name|nodeA
argument_list|)
expr_stmt|;
name|validateIndexRecoveryState
argument_list|(
name|recoveryState
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|findRecoveriesForTargetNode
specifier|private
name|List
argument_list|<
name|RecoveryState
argument_list|>
name|findRecoveriesForTargetNode
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|List
argument_list|<
name|RecoveryState
argument_list|>
name|recoveryStates
parameter_list|)
block|{
name|List
argument_list|<
name|RecoveryState
argument_list|>
name|nodeResponses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RecoveryState
name|recoveryState
range|:
name|recoveryStates
control|)
block|{
if|if
condition|(
name|recoveryState
operator|.
name|getTargetNode
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|nodeResponses
operator|.
name|add
argument_list|(
name|recoveryState
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nodeResponses
return|;
block|}
DECL|method|createAndPopulateIndex
specifier|private
name|IndicesStatsResponse
name|createAndPopulateIndex
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|nodeCount
parameter_list|,
name|int
name|shardCount
parameter_list|,
name|int
name|replicaCount
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating test index: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|name
argument_list|,
name|nodeCount
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"number_of_shards"
argument_list|,
name|shardCount
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_replicas"
argument_list|,
name|replicaCount
argument_list|)
operator|.
name|put
argument_list|(
name|Store
operator|.
name|INDEX_STORE_STATS_REFRESH_INTERVAL_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> indexing sample data"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|between
argument_list|(
name|MIN_DOC_COUNT
argument_list|,
name|MAX_DOC_COUNT
argument_list|)
decl_stmt|;
specifier|final
name|IndexRequestBuilder
index|[]
name|docs
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|name
argument_list|,
name|INDEX_TYPE
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo-int"
argument_list|,
name|randomInt
argument_list|()
argument_list|,
literal|"foo-string"
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|32
argument_list|)
argument_list|,
literal|"foo-float"
argument_list|,
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|flush
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|name
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
name|name
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
return|;
block|}
DECL|method|validateIndexRecoveryState
specifier|private
name|void
name|validateIndexRecoveryState
parameter_list|(
name|RecoveryState
operator|.
name|Index
name|indexState
parameter_list|)
block|{
name|assertThat
argument_list|(
name|indexState
operator|.
name|time
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexState
operator|.
name|recoveredFilesPercent
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexState
operator|.
name|recoveredFilesPercent
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|100.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexState
operator|.
name|recoveredBytesPercent
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexState
operator|.
name|recoveredBytesPercent
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|100.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisconnectsWhileRecovering
specifier|public
name|void
name|testDisconnectsWhileRecovering
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|indexName
init|=
literal|"test"
decl_stmt|;
specifier|final
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"100ms"
argument_list|)
operator|.
name|put
argument_list|(
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_INTERNAL_ACTION_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"1s"
argument_list|)
operator|.
name|put
argument_list|(
name|MockFSDirectoryService
operator|.
name|RANDOM_PREVENT_DOUBLE_WRITE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
comment|// restarted recoveries will delete temp files and write them again
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// start a master node
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|nodeSettings
argument_list|)
expr_stmt|;
name|InternalTestCluster
operator|.
name|Async
argument_list|<
name|String
argument_list|>
name|blueFuture
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodeAsync
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.attr.color"
argument_list|,
literal|"blue"
argument_list|)
operator|.
name|put
argument_list|(
name|nodeSettings
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|InternalTestCluster
operator|.
name|Async
argument_list|<
name|String
argument_list|>
name|redFuture
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodeAsync
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.attr.color"
argument_list|,
literal|"red"
argument_list|)
operator|.
name|put
argument_list|(
name|nodeSettings
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|blueNodeName
init|=
name|blueFuture
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|String
name|redNodeName
init|=
name|redFuture
operator|.
name|get
argument_list|()
decl_stmt|;
name|ClusterHealthResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|">=3"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|indexName
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|INDEX_ROUTING_INCLUDE_GROUP_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|25
argument_list|,
literal|250
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|requests
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|indexName
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|requests
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|ClusterStateResponse
name|stateResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|String
name|blueNodeId
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|,
name|blueNodeName
argument_list|)
operator|.
name|localNode
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|stateResponse
operator|.
name|getState
argument_list|()
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|blueNodeId
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|String
index|[]
name|recoveryActions
init|=
operator|new
name|String
index|[]
block|{
name|PeerRecoverySourceService
operator|.
name|Actions
operator|.
name|START_RECOVERY
block|,
name|PeerRecoveryTargetService
operator|.
name|Actions
operator|.
name|FILES_INFO
block|,
name|PeerRecoveryTargetService
operator|.
name|Actions
operator|.
name|FILE_CHUNK
block|,
name|PeerRecoveryTargetService
operator|.
name|Actions
operator|.
name|CLEAN_FILES
block|,
comment|//RecoveryTarget.Actions.TRANSLOG_OPS,<-- may not be sent if already flushed
name|PeerRecoveryTargetService
operator|.
name|Actions
operator|.
name|PREPARE_TRANSLOG
block|,
name|PeerRecoveryTargetService
operator|.
name|Actions
operator|.
name|FINALIZE
block|}
decl_stmt|;
specifier|final
name|String
name|recoveryActionToBlock
init|=
name|randomFrom
argument_list|(
name|recoveryActions
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|dropRequests
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> will {} between blue& red on [{}]"
argument_list|,
name|dropRequests
condition|?
literal|"drop requests"
else|:
literal|"break connection"
argument_list|,
name|recoveryActionToBlock
argument_list|)
expr_stmt|;
name|MockTransportService
name|blueMockTransportService
init|=
operator|(
name|MockTransportService
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|,
name|blueNodeName
argument_list|)
decl_stmt|;
name|MockTransportService
name|redMockTransportService
init|=
operator|(
name|MockTransportService
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|,
name|redNodeName
argument_list|)
decl_stmt|;
name|TransportService
name|redTransportService
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|,
name|redNodeName
argument_list|)
decl_stmt|;
name|TransportService
name|blueTransportService
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|,
name|blueNodeName
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|requestBlocked
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|blueMockTransportService
operator|.
name|addDelegate
argument_list|(
name|redTransportService
argument_list|,
operator|new
name|RecoveryActionBlocker
argument_list|(
name|dropRequests
argument_list|,
name|recoveryActionToBlock
argument_list|,
name|blueMockTransportService
operator|.
name|original
argument_list|()
argument_list|,
name|requestBlocked
argument_list|)
argument_list|)
expr_stmt|;
name|redMockTransportService
operator|.
name|addDelegate
argument_list|(
name|blueTransportService
argument_list|,
operator|new
name|RecoveryActionBlocker
argument_list|(
name|dropRequests
argument_list|,
name|recoveryActionToBlock
argument_list|,
name|redMockTransportService
operator|.
name|original
argument_list|()
argument_list|,
name|requestBlocked
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting recovery from blue to red"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|indexName
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|INDEX_ROUTING_INCLUDE_GROUP_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|"color"
argument_list|,
literal|"red,blue"
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|requestBlocked
operator|.
name|await
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> stopping to block recovery"
argument_list|)
expr_stmt|;
name|blueMockTransportService
operator|.
name|clearAllRules
argument_list|()
expr_stmt|;
name|redMockTransportService
operator|.
name|clearAllRules
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|(
name|redNodeName
argument_list|)
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"_local"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
DECL|class|RecoveryActionBlocker
specifier|private
class|class
name|RecoveryActionBlocker
extends|extends
name|MockTransportService
operator|.
name|DelegateTransport
block|{
DECL|field|dropRequests
specifier|private
specifier|final
name|boolean
name|dropRequests
decl_stmt|;
DECL|field|recoveryActionToBlock
specifier|private
specifier|final
name|String
name|recoveryActionToBlock
decl_stmt|;
DECL|field|requestBlocked
specifier|private
specifier|final
name|CountDownLatch
name|requestBlocked
decl_stmt|;
DECL|method|RecoveryActionBlocker
specifier|public
name|RecoveryActionBlocker
parameter_list|(
name|boolean
name|dropRequests
parameter_list|,
name|String
name|recoveryActionToBlock
parameter_list|,
name|Transport
name|delegate
parameter_list|,
name|CountDownLatch
name|requestBlocked
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|dropRequests
operator|=
name|dropRequests
expr_stmt|;
name|this
operator|.
name|recoveryActionToBlock
operator|=
name|recoveryActionToBlock
expr_stmt|;
name|this
operator|.
name|requestBlocked
operator|=
name|requestBlocked
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendRequest
specifier|public
name|void
name|sendRequest
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|,
name|TransportRequest
name|request
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransportException
block|{
if|if
condition|(
name|recoveryActionToBlock
operator|.
name|equals
argument_list|(
name|action
argument_list|)
operator|||
name|requestBlocked
operator|.
name|getCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> preventing {} request"
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|requestBlocked
operator|.
name|countDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|dropRequests
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"DISCONNECT: prevented "
operator|+
name|action
operator|+
literal|" request"
argument_list|)
throw|;
block|}
name|transport
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|requestId
argument_list|,
name|action
argument_list|,
name|request
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setChunkSize
specifier|public
specifier|static
name|void
name|setChunkSize
parameter_list|(
name|RecoverySettings
name|recoverySettings
parameter_list|,
name|ByteSizeValue
name|chunksSize
parameter_list|)
block|{
name|recoverySettings
operator|.
name|setChunkSize
argument_list|(
name|chunksSize
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

