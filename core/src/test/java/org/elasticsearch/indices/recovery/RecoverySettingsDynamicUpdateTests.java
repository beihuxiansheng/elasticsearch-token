begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.recovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoverySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|RecoverySettingsDynamicUpdateTests
specifier|public
class|class
name|RecoverySettingsDynamicUpdateTests
extends|extends
name|ESTestCase
block|{
DECL|field|clusterSettings
specifier|private
specifier|final
name|ClusterSettings
name|clusterSettings
init|=
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
decl_stmt|;
DECL|field|recoverySettings
specifier|private
specifier|final
name|RecoverySettings
name|recoverySettings
init|=
operator|new
name|RecoverySettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|clusterSettings
argument_list|)
decl_stmt|;
DECL|method|testZeroBytesPerSecondIsNoRateLimit
specifier|public
name|void
name|testZeroBytesPerSecondIsNoRateLimit
parameter_list|()
block|{
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_MAX_BYTES_PER_SEC_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|recoverySettings
operator|.
name|rateLimiter
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRetryDelayStateSync
specifier|public
name|void
name|testRetryDelayStateSync
parameter_list|()
block|{
name|long
name|duration
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|TimeUnit
name|timeUnit
init|=
name|randomFrom
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
decl_stmt|;
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_RETRY_DELAY_STATE_SYNC_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|duration
argument_list|,
name|timeUnit
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
name|duration
argument_list|,
name|timeUnit
argument_list|)
argument_list|,
name|recoverySettings
operator|.
name|retryDelayStateSync
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRetryDelayNetwork
specifier|public
name|void
name|testRetryDelayNetwork
parameter_list|()
block|{
name|long
name|duration
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|TimeUnit
name|timeUnit
init|=
name|randomFrom
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
decl_stmt|;
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|duration
argument_list|,
name|timeUnit
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
name|duration
argument_list|,
name|timeUnit
argument_list|)
argument_list|,
name|recoverySettings
operator|.
name|retryDelayNetwork
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testActivityTimeout
specifier|public
name|void
name|testActivityTimeout
parameter_list|()
block|{
name|long
name|duration
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|TimeUnit
name|timeUnit
init|=
name|randomFrom
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
decl_stmt|;
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_ACTIVITY_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|duration
argument_list|,
name|timeUnit
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
name|duration
argument_list|,
name|timeUnit
argument_list|)
argument_list|,
name|recoverySettings
operator|.
name|activityTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInternalActionTimeout
specifier|public
name|void
name|testInternalActionTimeout
parameter_list|()
block|{
name|long
name|duration
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|TimeUnit
name|timeUnit
init|=
name|randomFrom
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
decl_stmt|;
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_INTERNAL_ACTION_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|duration
argument_list|,
name|timeUnit
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
name|duration
argument_list|,
name|timeUnit
argument_list|)
argument_list|,
name|recoverySettings
operator|.
name|internalActionTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInternalLongActionTimeout
specifier|public
name|void
name|testInternalLongActionTimeout
parameter_list|()
block|{
name|long
name|duration
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|TimeUnit
name|timeUnit
init|=
name|randomFrom
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
decl_stmt|;
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_INTERNAL_LONG_ACTION_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|duration
argument_list|,
name|timeUnit
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
name|duration
argument_list|,
name|timeUnit
argument_list|)
argument_list|,
name|recoverySettings
operator|.
name|internalActionLongTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

