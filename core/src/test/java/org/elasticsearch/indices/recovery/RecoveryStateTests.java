begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.recovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|DummyTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryState
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
operator|.
name|randomVersion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
DECL|class|RecoveryStateTests
specifier|public
class|class
name|RecoveryStateTests
extends|extends
name|ESTestCase
block|{
DECL|class|Streamer
specifier|abstract
class|class
name|Streamer
parameter_list|<
name|T
extends|extends
name|Streamable
parameter_list|>
extends|extends
name|Thread
block|{
DECL|field|lastRead
specifier|private
name|T
name|lastRead
decl_stmt|;
DECL|field|shouldStop
specifier|final
specifier|private
name|AtomicBoolean
name|shouldStop
decl_stmt|;
DECL|field|source
specifier|final
specifier|private
name|T
name|source
decl_stmt|;
DECL|field|error
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|streamVersion
specifier|final
name|Version
name|streamVersion
decl_stmt|;
DECL|method|Streamer
name|Streamer
parameter_list|(
name|AtomicBoolean
name|shouldStop
parameter_list|,
name|T
name|source
parameter_list|)
block|{
name|this
argument_list|(
name|shouldStop
argument_list|,
name|source
argument_list|,
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|Streamer
name|Streamer
parameter_list|(
name|AtomicBoolean
name|shouldStop
parameter_list|,
name|T
name|source
parameter_list|,
name|Version
name|streamVersion
parameter_list|)
block|{
name|this
operator|.
name|shouldStop
operator|=
name|shouldStop
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|streamVersion
operator|=
name|streamVersion
expr_stmt|;
block|}
DECL|method|lastRead
specifier|public
name|T
name|lastRead
parameter_list|()
throws|throws
name|Throwable
block|{
name|Throwable
name|t
init|=
name|error
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
throw|throw
name|t
throw|;
block|}
return|return
name|lastRead
return|;
block|}
DECL|method|serializeDeserialize
specifier|public
name|T
name|serializeDeserialize
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|source
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|StreamInput
name|in
init|=
name|StreamInput
operator|.
name|wrap
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|T
name|obj
init|=
name|deserialize
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|lastRead
operator|=
name|obj
expr_stmt|;
return|return
name|obj
return|;
block|}
DECL|method|deserialize
specifier|protected
name|T
name|deserialize
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|T
name|obj
init|=
name|createObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
DECL|method|createObj
specifier|abstract
name|T
name|createObj
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|shouldStop
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|)
block|{
name|serializeDeserialize
argument_list|()
expr_stmt|;
block|}
name|serializeDeserialize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|error
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testTimers
specifier|public
name|void
name|testTimers
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|Timer
name|timer
decl_stmt|;
name|Streamer
argument_list|<
name|Timer
argument_list|>
name|streamer
decl_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|timer
operator|=
operator|new
name|Timer
argument_list|()
expr_stmt|;
name|streamer
operator|=
operator|new
name|Streamer
argument_list|<
name|Timer
argument_list|>
argument_list|(
name|stop
argument_list|,
name|timer
argument_list|)
block|{
annotation|@
name|Override
name|Timer
name|createObj
parameter_list|()
block|{
return|return
operator|new
name|Timer
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|timer
operator|=
operator|new
name|Index
argument_list|()
expr_stmt|;
name|streamer
operator|=
operator|new
name|Streamer
argument_list|<
name|Timer
argument_list|>
argument_list|(
name|stop
argument_list|,
name|timer
argument_list|)
block|{
annotation|@
name|Override
name|Timer
name|createObj
parameter_list|()
block|{
return|return
operator|new
name|Index
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|timer
operator|=
operator|new
name|VerifyIndex
argument_list|()
expr_stmt|;
name|streamer
operator|=
operator|new
name|Streamer
argument_list|<
name|Timer
argument_list|>
argument_list|(
name|stop
argument_list|,
name|timer
argument_list|)
block|{
annotation|@
name|Override
name|Timer
name|createObj
parameter_list|()
block|{
return|return
operator|new
name|VerifyIndex
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|timer
operator|=
operator|new
name|Translog
argument_list|()
expr_stmt|;
name|streamer
operator|=
operator|new
name|Streamer
argument_list|<
name|Timer
argument_list|>
argument_list|(
name|stop
argument_list|,
name|timer
argument_list|)
block|{
annotation|@
name|Override
name|Timer
name|createObj
parameter_list|()
block|{
return|return
operator|new
name|Translog
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|timer
operator|.
name|startTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timer
operator|.
name|stopTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|Timer
name|lastRead
init|=
name|streamer
operator|.
name|serializeDeserialize
argument_list|()
decl_stmt|;
specifier|final
name|long
name|time
init|=
name|lastRead
operator|.
name|time
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|time
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|timer
operator|.
name|time
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"timer timer should progress compared to captured one "
argument_list|,
name|time
argument_list|,
name|lessThan
argument_list|(
name|timer
operator|.
name|time
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"captured time shouldn't change"
argument_list|,
name|lastRead
operator|.
name|time
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|timer
operator|.
name|stopTime
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|timer
operator|.
name|startTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timer
operator|.
name|time
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|lastRead
operator|=
name|streamer
operator|.
name|serializeDeserialize
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|startTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|timer
operator|.
name|startTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|time
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|timer
operator|.
name|time
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|stopTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|timer
operator|.
name|stopTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|timer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|timer
operator|.
name|startTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timer
operator|.
name|time
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timer
operator|.
name|stopTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|lastRead
operator|=
name|streamer
operator|.
name|serializeDeserialize
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|startTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|time
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|stopTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndex
specifier|public
name|void
name|testIndex
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
index|[]
name|files
init|=
operator|new
name|File
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
index|]
decl_stmt|;
name|ArrayList
argument_list|<
name|File
argument_list|>
name|filesToRecover
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|totalFileBytes
init|=
literal|0
decl_stmt|;
name|long
name|totalReusedBytes
init|=
literal|0
decl_stmt|;
name|int
name|totalReused
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|fileLength
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|reused
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|totalFileBytes
operator|+=
name|fileLength
expr_stmt|;
name|files
index|[
name|i
index|]
operator|=
operator|new
name|RecoveryState
operator|.
name|File
argument_list|(
literal|"f_"
operator|+
name|i
argument_list|,
name|fileLength
argument_list|,
name|reused
argument_list|)
expr_stmt|;
if|if
condition|(
name|reused
condition|)
block|{
name|totalReused
operator|++
expr_stmt|;
name|totalReusedBytes
operator|+=
name|fileLength
expr_stmt|;
block|}
else|else
block|{
name|filesToRecover
operator|.
name|add
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RecoveryState
operator|.
name|Index
name|index
init|=
operator|new
name|RecoveryState
operator|.
name|Index
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// initialize with some data and then reset
name|index
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|index
operator|.
name|addFileDetail
argument_list|(
literal|"t_"
operator|+
name|i
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|index
operator|.
name|addSourceThrottling
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|index
operator|.
name|addTargetThrottling
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|index
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|index
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|// before we start we must report 0
name|assertThat
argument_list|(
name|index
operator|.
name|recoveredFilesPercent
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|float
operator|)
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|recoveredBytesPercent
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|float
operator|)
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|sourceThrottling
argument_list|()
operator|.
name|nanos
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Index
operator|.
name|UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|targetThrottling
argument_list|()
operator|.
name|nanos
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Index
operator|.
name|UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|index
operator|.
name|addFileDetail
argument_list|(
name|file
operator|.
name|name
argument_list|()
argument_list|,
name|file
operator|.
name|length
argument_list|()
argument_list|,
name|file
operator|.
name|reused
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"testing initial information"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|totalBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalFileBytes
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|reusedBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalReusedBytes
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|totalRecoverBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalFileBytes
operator|-
name|totalReusedBytes
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|totalFileCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|files
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|reusedFileCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalReused
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|totalRecoverFiles
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|filesToRecover
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|recoveredFileCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|recoveredBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|recoveredFilesPercent
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|filesToRecover
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|100.0f
else|:
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|recoveredBytesPercent
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|filesToRecover
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|100.0f
else|:
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|bytesToRecover
init|=
name|totalFileBytes
operator|-
name|totalReusedBytes
decl_stmt|;
name|boolean
name|completeRecovery
init|=
name|bytesToRecover
operator|==
literal|0
operator|||
name|randomBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|completeRecovery
operator|==
literal|false
condition|)
block|{
name|bytesToRecover
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|bytesToRecover
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"performing partial recovery ([{}] bytes of [{}])"
argument_list|,
name|bytesToRecover
argument_list|,
name|totalFileBytes
operator|-
name|totalReusedBytes
argument_list|)
expr_stmt|;
block|}
name|AtomicBoolean
name|streamShouldStop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|Streamer
argument_list|<
name|Index
argument_list|>
name|backgroundReader
init|=
operator|new
name|Streamer
argument_list|<
name|RecoveryState
operator|.
name|Index
argument_list|>
argument_list|(
name|streamShouldStop
argument_list|,
name|index
argument_list|)
block|{
annotation|@
name|Override
name|Index
name|createObj
parameter_list|()
block|{
return|return
operator|new
name|Index
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|backgroundReader
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|recoveredBytes
init|=
literal|0
decl_stmt|;
name|long
name|sourceThrottling
init|=
name|Index
operator|.
name|UNKNOWN
decl_stmt|;
name|long
name|targetThrottling
init|=
name|Index
operator|.
name|UNKNOWN
decl_stmt|;
while|while
condition|(
name|bytesToRecover
operator|>
literal|0
condition|)
block|{
name|File
name|file
init|=
name|randomFrom
argument_list|(
name|filesToRecover
argument_list|)
decl_stmt|;
specifier|final
name|long
name|toRecover
init|=
name|Math
operator|.
name|min
argument_list|(
name|bytesToRecover
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
call|(
name|int
call|)
argument_list|(
name|file
operator|.
name|length
argument_list|()
operator|-
name|file
operator|.
name|recovered
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|throttledOnSource
init|=
name|rarely
argument_list|()
condition|?
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|200
argument_list|)
else|:
literal|0
decl_stmt|;
name|index
operator|.
name|addSourceThrottling
argument_list|(
name|throttledOnSource
argument_list|)
expr_stmt|;
if|if
condition|(
name|sourceThrottling
operator|==
name|Index
operator|.
name|UNKNOWN
condition|)
block|{
name|sourceThrottling
operator|=
name|throttledOnSource
expr_stmt|;
block|}
else|else
block|{
name|sourceThrottling
operator|+=
name|throttledOnSource
expr_stmt|;
block|}
name|index
operator|.
name|addRecoveredBytesToFile
argument_list|(
name|file
operator|.
name|name
argument_list|()
argument_list|,
name|toRecover
argument_list|)
expr_stmt|;
name|file
operator|.
name|addRecoveredBytes
argument_list|(
name|toRecover
argument_list|)
expr_stmt|;
specifier|final
name|long
name|throttledOnTarget
init|=
name|rarely
argument_list|()
condition|?
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|200
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|targetThrottling
operator|==
name|Index
operator|.
name|UNKNOWN
condition|)
block|{
name|targetThrottling
operator|=
name|throttledOnTarget
expr_stmt|;
block|}
else|else
block|{
name|targetThrottling
operator|+=
name|throttledOnTarget
expr_stmt|;
block|}
name|index
operator|.
name|addTargetThrottling
argument_list|(
name|throttledOnTarget
argument_list|)
expr_stmt|;
name|bytesToRecover
operator|-=
name|toRecover
expr_stmt|;
name|recoveredBytes
operator|+=
name|toRecover
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|reused
argument_list|()
operator|||
name|file
operator|.
name|fullyRecovered
argument_list|()
condition|)
block|{
name|filesToRecover
operator|.
name|remove
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|completeRecovery
condition|)
block|{
name|assertThat
argument_list|(
name|filesToRecover
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|time
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"testing serialized information"
argument_list|)
expr_stmt|;
name|streamShouldStop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|backgroundReader
operator|.
name|join
argument_list|()
expr_stmt|;
specifier|final
name|Index
name|lastRead
init|=
name|backgroundReader
operator|.
name|lastRead
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|fileDetails
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
name|index
operator|.
name|fileDetails
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|startTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|index
operator|.
name|startTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|completeRecovery
condition|)
block|{
name|assertThat
argument_list|(
name|lastRead
operator|.
name|time
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|index
operator|.
name|time
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|lastRead
operator|.
name|time
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|index
operator|.
name|time
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|lastRead
operator|.
name|stopTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|index
operator|.
name|stopTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|targetThrottling
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|index
operator|.
name|targetThrottling
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|sourceThrottling
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|index
operator|.
name|sourceThrottling
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"testing post recovery"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|totalBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalFileBytes
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|reusedBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalReusedBytes
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|totalRecoverBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalFileBytes
operator|-
name|totalReusedBytes
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|totalFileCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|files
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|reusedFileCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalReused
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|totalRecoverFiles
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|files
operator|.
name|length
operator|-
name|totalReused
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|recoveredFileCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|index
operator|.
name|totalRecoverFiles
argument_list|()
operator|-
name|filesToRecover
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|recoveredBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|recoveredBytes
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|targetThrottling
argument_list|()
operator|.
name|nanos
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|targetThrottling
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|sourceThrottling
argument_list|()
operator|.
name|nanos
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|sourceThrottling
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|.
name|totalRecoverFiles
argument_list|()
operator|==
literal|0
condition|)
block|{
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|index
operator|.
name|recoveredFilesPercent
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|100.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|index
operator|.
name|recoveredBytesPercent
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|100.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|index
operator|.
name|recoveredFilesPercent
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|100.0
operator|*
name|index
operator|.
name|recoveredFileCount
argument_list|()
operator|/
name|index
operator|.
name|totalRecoverFiles
argument_list|()
argument_list|,
literal|0.1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|index
operator|.
name|recoveredBytesPercent
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|100.0
operator|*
name|index
operator|.
name|recoveredBytes
argument_list|()
operator|/
name|index
operator|.
name|totalRecoverBytes
argument_list|()
argument_list|,
literal|0.1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testStageSequenceEnforcement
specifier|public
name|void
name|testStageSequenceEnforcement
parameter_list|()
block|{
specifier|final
name|DiscoveryNode
name|discoveryNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"1"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|Stage
index|[]
name|stages
init|=
name|Stage
operator|.
name|values
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|stages
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|j
decl_stmt|;
do|do
block|{
name|j
operator|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|stages
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|j
operator|==
name|i
condition|)
do|;
name|Stage
name|t
init|=
name|stages
index|[
name|i
index|]
decl_stmt|;
name|stages
index|[
name|i
index|]
operator|=
name|stages
index|[
name|j
index|]
expr_stmt|;
name|stages
index|[
name|j
index|]
operator|=
name|t
expr_stmt|;
try|try
block|{
name|RecoveryState
name|state
init|=
operator|new
name|RecoveryState
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"bla"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomFrom
argument_list|(
name|Type
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|discoveryNode
argument_list|,
name|discoveryNode
argument_list|)
decl_stmt|;
for|for
control|(
name|Stage
name|stage
range|:
name|stages
control|)
block|{
name|state
operator|.
name|setStage
argument_list|(
name|stage
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"succeeded in performing the illegal sequence ["
operator|+
name|Strings
operator|.
name|arrayToCommaDelimitedString
argument_list|(
name|stages
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// cool
block|}
comment|// but reset should be always possible.
name|stages
operator|=
name|Stage
operator|.
name|values
argument_list|()
expr_stmt|;
name|i
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|stages
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Stage
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|stages
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|stages
argument_list|)
argument_list|)
expr_stmt|;
name|RecoveryState
name|state
init|=
operator|new
name|RecoveryState
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"bla"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomFrom
argument_list|(
name|Type
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|discoveryNode
argument_list|,
name|discoveryNode
argument_list|)
decl_stmt|;
for|for
control|(
name|Stage
name|stage
range|:
name|list
control|)
block|{
name|state
operator|.
name|setStage
argument_list|(
name|stage
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|state
operator|.
name|getStage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Stage
operator|.
name|DONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTranslog
specifier|public
name|void
name|testTranslog
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|Translog
name|translog
init|=
operator|new
name|Translog
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|Streamer
argument_list|<
name|Translog
argument_list|>
name|streamer
init|=
operator|new
name|Streamer
argument_list|<
name|Translog
argument_list|>
argument_list|(
name|stop
argument_list|,
name|translog
argument_list|)
block|{
annotation|@
name|Override
name|Translog
name|createObj
parameter_list|()
block|{
return|return
operator|new
name|Translog
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|// we don't need to test the time aspect, it's done in the timer test
name|translog
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|recoveredOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Translog
operator|.
name|UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|totalOperationsOnStart
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Translog
operator|.
name|UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
name|streamer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// force one
name|streamer
operator|.
name|serializeDeserialize
argument_list|()
expr_stmt|;
name|int
name|ops
init|=
literal|0
decl_stmt|;
name|int
name|totalOps
init|=
literal|0
decl_stmt|;
name|int
name|totalOpsOnStart
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|translog
operator|.
name|totalOperationsOnStart
argument_list|(
name|totalOpsOnStart
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|200
argument_list|)
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|int
name|iterationOps
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|totalOps
operator|+=
name|iterationOps
expr_stmt|;
name|translog
operator|.
name|totalOperations
argument_list|(
name|totalOps
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|translog
operator|.
name|recoveredPercent
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|100.0
operator|*
name|ops
operator|/
name|totalOps
argument_list|,
literal|0.1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
name|iterationOps
init|;
name|j
operator|>
literal|0
condition|;
name|j
operator|--
control|)
block|{
name|ops
operator|++
expr_stmt|;
name|translog
operator|.
name|incrementRecoveredOperations
argument_list|()
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|translog
operator|.
name|decrementRecoveredOperations
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|translog
operator|.
name|incrementRecoveredOperations
argument_list|()
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|translog
operator|.
name|recoveredOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ops
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalOps
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|recoveredPercent
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|100.f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|streamer
operator|.
name|lastRead
argument_list|()
operator|.
name|recoveredOperations
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|streamer
operator|.
name|lastRead
argument_list|()
operator|.
name|recoveredOperations
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|ops
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|streamer
operator|.
name|lastRead
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|totalOps
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|streamer
operator|.
name|lastRead
argument_list|()
operator|.
name|totalOperationsOnStart
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|totalOpsOnStart
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|streamer
operator|.
name|lastRead
argument_list|()
operator|.
name|recoveredPercent
argument_list|()
argument_list|,
name|either
argument_list|(
name|greaterThanOrEqualTo
argument_list|(
literal|0.f
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|equalTo
argument_list|(
operator|-
literal|1.f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|translog
operator|.
name|stop
argument_list|()
expr_stmt|;
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|translog
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ops
operator|=
literal|0
expr_stmt|;
name|totalOps
operator|=
name|Translog
operator|.
name|UNKNOWN
expr_stmt|;
name|totalOpsOnStart
operator|=
name|Translog
operator|.
name|UNKNOWN
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|recoveredOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|totalOperationsOnStart
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Translog
operator|.
name|UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Translog
operator|.
name|UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|streamer
operator|.
name|join
argument_list|()
expr_stmt|;
specifier|final
name|Translog
name|lastRead
init|=
name|streamer
operator|.
name|lastRead
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|recoveredOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ops
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalOps
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|totalOperationsOnStart
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalOpsOnStart
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|startTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|translog
operator|.
name|startTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|stopTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|translog
operator|.
name|stopTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|stopped
condition|)
block|{
name|assertThat
argument_list|(
name|lastRead
operator|.
name|time
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|translog
operator|.
name|time
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|lastRead
operator|.
name|time
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|translog
operator|.
name|time
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testStart
specifier|public
name|void
name|testStart
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|VerifyIndex
name|verifyIndex
init|=
operator|new
name|VerifyIndex
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|Streamer
argument_list|<
name|VerifyIndex
argument_list|>
name|streamer
init|=
operator|new
name|Streamer
argument_list|<
name|VerifyIndex
argument_list|>
argument_list|(
name|stop
argument_list|,
name|verifyIndex
argument_list|)
block|{
annotation|@
name|Override
name|VerifyIndex
name|createObj
parameter_list|()
block|{
return|return
operator|new
name|VerifyIndex
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|// we don't need to test the time aspect, it's done in the timer test
name|verifyIndex
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|verifyIndex
operator|.
name|checkIndexTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
comment|// force one
name|VerifyIndex
name|lastRead
init|=
name|streamer
operator|.
name|serializeDeserialize
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|checkIndexTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|took
init|=
name|randomLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|took
operator|<
literal|0
condition|)
block|{
name|took
operator|=
operator|-
name|took
expr_stmt|;
name|took
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0l
argument_list|,
name|took
argument_list|)
expr_stmt|;
block|}
name|verifyIndex
operator|.
name|checkIndexTime
argument_list|(
name|took
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|verifyIndex
operator|.
name|checkIndexTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|took
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|verifyIndex
operator|.
name|stop
argument_list|()
expr_stmt|;
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|verifyIndex
operator|.
name|reset
argument_list|()
expr_stmt|;
name|took
operator|=
literal|0
expr_stmt|;
name|assertThat
argument_list|(
name|verifyIndex
operator|.
name|checkIndexTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|took
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lastRead
operator|=
name|streamer
operator|.
name|serializeDeserialize
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|checkIndexTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|took
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|startTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|verifyIndex
operator|.
name|startTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastRead
operator|.
name|stopTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|verifyIndex
operator|.
name|stopTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|stopped
condition|)
block|{
name|assertThat
argument_list|(
name|lastRead
operator|.
name|time
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|verifyIndex
operator|.
name|time
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|lastRead
operator|.
name|time
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|verifyIndex
operator|.
name|time
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConcurrentModificationIndexFileDetailsMap
specifier|public
name|void
name|testConcurrentModificationIndexFileDetailsMap
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|Index
name|index
init|=
operator|new
name|Index
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Streamer
argument_list|<
name|Index
argument_list|>
name|readWriteIndex
init|=
operator|new
name|Streamer
argument_list|<
name|Index
argument_list|>
argument_list|(
name|stop
argument_list|,
name|index
argument_list|)
block|{
annotation|@
name|Override
name|Index
name|createObj
parameter_list|()
block|{
return|return
operator|new
name|Index
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Thread
name|modifyThread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|index
operator|.
name|addFileDetail
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|100
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|readWriteIndex
operator|.
name|start
argument_list|()
expr_stmt|;
name|modifyThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|modifyThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|readWriteIndex
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|readWriteIndex
operator|.
name|error
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileHashCodeAndEquals
specifier|public
name|void
name|testFileHashCodeAndEquals
parameter_list|()
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"foo"
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|anotherFile
init|=
operator|new
name|File
argument_list|(
name|f
operator|.
name|name
argument_list|()
argument_list|,
name|f
operator|.
name|length
argument_list|()
argument_list|,
name|f
operator|.
name|reused
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|f
argument_list|,
name|anotherFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|hashCode
argument_list|()
argument_list|,
name|anotherFile
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|iters
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|f
operator|=
operator|new
name|File
argument_list|(
literal|"foo"
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|anotherFile
operator|=
operator|new
name|File
argument_list|(
name|f
operator|.
name|name
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|equals
argument_list|(
name|anotherFile
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|f
operator|.
name|hashCode
argument_list|()
argument_list|,
name|anotherFile
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|f
operator|.
name|hashCode
argument_list|()
operator|!=
name|anotherFile
operator|.
name|hashCode
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
name|f
operator|.
name|equals
argument_list|(
name|anotherFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

