begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.recovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|BaseDirectoryWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutputOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|SegmentsStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParsedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|SeqNoFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|seqno
operator|.
name|SeqNoStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|seqno
operator|.
name|SequenceNumbersService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardRelocatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|DirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|StoreFileMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|CorruptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|DummyShardLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|IndexSettingsModule
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|RecoverySourceHandlerTests
specifier|public
class|class
name|RecoverySourceHandlerTests
extends|extends
name|ESTestCase
block|{
DECL|field|INDEX_SETTINGS
specifier|private
specifier|static
specifier|final
name|IndexSettings
name|INDEX_SETTINGS
init|=
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
literal|"index"
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|INDEX_SETTINGS
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|service
specifier|private
specifier|final
name|ClusterSettings
name|service
init|=
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
decl_stmt|;
DECL|method|testSendFiles
specifier|public
name|void
name|testSendFiles
parameter_list|()
throws|throws
name|Throwable
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"indices.recovery.concurrent_streams"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"indices.recovery.concurrent_small_file_streams"
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RecoverySettings
name|recoverySettings
init|=
operator|new
name|RecoverySettings
argument_list|(
name|settings
argument_list|,
name|service
argument_list|)
decl_stmt|;
specifier|final
name|StartRecoveryRequest
name|request
init|=
operator|new
name|StartRecoveryRequest
argument_list|(
name|shardId
argument_list|,
operator|new
name|DiscoveryNode
argument_list|(
literal|"b"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
operator|new
name|DiscoveryNode
argument_list|(
literal|"b"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomNonNegativeLong
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
else|:
name|randomNonNegativeLong
argument_list|()
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|newStore
argument_list|(
name|createTempDir
argument_list|()
argument_list|)
decl_stmt|;
name|RecoverySourceHandler
name|handler
init|=
operator|new
name|RecoverySourceHandler
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|request
argument_list|,
parameter_list|()
lambda|->
literal|0L
argument_list|,
name|e
lambda|->
parameter_list|()
lambda|->
block|{}
argument_list|,
name|recoverySettings
operator|.
name|getChunkSize
argument_list|()
operator|.
name|bytesAsInt
argument_list|()
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|store
operator|.
name|directory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"field"
argument_list|,
name|randomUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Store
operator|.
name|MetadataSnapshot
name|metadata
init|=
name|store
operator|.
name|getMetadata
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StoreFileMetaData
argument_list|>
name|metas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|StoreFileMetaData
name|md
range|:
name|metadata
control|)
block|{
name|metas
operator|.
name|add
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
name|Store
name|targetStore
init|=
name|newStore
argument_list|(
name|createTempDir
argument_list|()
argument_list|)
decl_stmt|;
name|handler
operator|.
name|sendFiles
argument_list|(
name|store
argument_list|,
name|metas
operator|.
name|toArray
argument_list|(
operator|new
name|StoreFileMetaData
index|[
literal|0
index|]
argument_list|)
argument_list|,
parameter_list|(
name|md
parameter_list|)
lambda|->
block|{
try|try
block|{
return|return
operator|new
name|IndexOutputOutputStream
argument_list|(
name|targetStore
operator|.
name|createVerifyingOutput
argument_list|(
name|md
operator|.
name|name
argument_list|()
argument_list|,
name|md
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|targetStore
operator|.
name|directory
argument_list|()
operator|.
name|sync
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|md
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// sync otherwise MDW will mess with it
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Store
operator|.
name|MetadataSnapshot
name|targetStoreMetadata
init|=
name|targetStore
operator|.
name|getMetadata
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Store
operator|.
name|RecoveryDiff
name|recoveryDiff
init|=
name|targetStoreMetadata
operator|.
name|recoveryDiff
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|metas
operator|.
name|size
argument_list|()
argument_list|,
name|recoveryDiff
operator|.
name|identical
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|recoveryDiff
operator|.
name|different
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|recoveryDiff
operator|.
name|missing
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|targetStore
operator|.
name|directory
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|reader
argument_list|,
name|store
argument_list|,
name|targetStore
argument_list|)
expr_stmt|;
block|}
DECL|method|testSendSnapshotSendsOps
specifier|public
name|void
name|testSendSnapshotSendsOps
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|RecoverySettings
name|recoverySettings
init|=
operator|new
name|RecoverySettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|service
argument_list|)
decl_stmt|;
specifier|final
name|int
name|fileChunkSizeInBytes
init|=
name|recoverySettings
operator|.
name|getChunkSize
argument_list|()
operator|.
name|bytesAsInt
argument_list|()
decl_stmt|;
specifier|final
name|long
name|startingSeqNo
init|=
name|randomBoolean
argument_list|()
condition|?
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
else|:
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|StartRecoveryRequest
name|request
init|=
operator|new
name|StartRecoveryRequest
argument_list|(
name|shardId
argument_list|,
operator|new
name|DiscoveryNode
argument_list|(
literal|"b"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
operator|new
name|DiscoveryNode
argument_list|(
literal|"b"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomNonNegativeLong
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
else|:
name|randomNonNegativeLong
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|IndexShard
name|shard
init|=
name|mock
argument_list|(
name|IndexShard
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|shard
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|IndexShardState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
specifier|final
name|RecoveryTargetHandler
name|recoveryTarget
init|=
name|mock
argument_list|(
name|RecoveryTargetHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|RecoverySourceHandler
name|handler
init|=
operator|new
name|RecoverySourceHandler
argument_list|(
name|shard
argument_list|,
name|recoveryTarget
argument_list|,
name|request
argument_list|,
parameter_list|()
lambda|->
literal|0L
argument_list|,
name|e
lambda|->
parameter_list|()
lambda|->
block|{}
argument_list|,
name|fileChunkSizeInBytes
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|initialNumberOfDocs
init|=
name|randomIntBetween
argument_list|(
literal|16
argument_list|,
literal|64
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initialNumberOfDocs
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Engine
operator|.
name|Index
name|index
init|=
name|getIndex
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|operations
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
name|index
argument_list|,
operator|new
name|Engine
operator|.
name|IndexResult
argument_list|(
literal|1
argument_list|,
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|numberOfDocsWithValidSequenceNumbers
init|=
name|randomIntBetween
argument_list|(
literal|16
argument_list|,
literal|64
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|initialNumberOfDocs
init|;
name|i
operator|<
name|initialNumberOfDocs
operator|+
name|numberOfDocsWithValidSequenceNumbers
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Engine
operator|.
name|Index
name|index
init|=
name|getIndex
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|operations
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
name|index
argument_list|,
operator|new
name|Engine
operator|.
name|IndexResult
argument_list|(
literal|1
argument_list|,
name|i
operator|-
name|initialNumberOfDocs
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|operations
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|int
name|totalOperations
init|=
name|handler
operator|.
name|sendSnapshot
argument_list|(
name|startingSeqNo
argument_list|,
operator|new
name|Translog
operator|.
name|Snapshot
argument_list|()
block|{
specifier|private
name|int
name|counter
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|totalOperations
parameter_list|()
block|{
return|return
name|operations
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Translog
operator|.
name|Operation
name|next
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|operations
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|startingSeqNo
operator|==
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
condition|)
block|{
name|assertThat
argument_list|(
name|totalOperations
argument_list|,
name|equalTo
argument_list|(
name|initialNumberOfDocs
operator|+
name|numberOfDocsWithValidSequenceNumbers
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|totalOperations
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|toIntExact
argument_list|(
name|numberOfDocsWithValidSequenceNumbers
operator|-
name|startingSeqNo
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getIndex
specifier|private
name|Engine
operator|.
name|Index
name|getIndex
parameter_list|(
specifier|final
name|String
name|id
parameter_list|)
block|{
specifier|final
name|String
name|type
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ParseContext
operator|.
name|Document
name|document
init|=
operator|new
name|ParseContext
operator|.
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Field
name|uidField
init|=
operator|new
name|Field
argument_list|(
literal|"_uid"
argument_list|,
name|Uid
operator|.
name|createUid
argument_list|(
name|type
argument_list|,
name|id
argument_list|)
argument_list|,
name|UidFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
decl_stmt|;
specifier|final
name|Field
name|versionField
init|=
operator|new
name|NumericDocValuesField
argument_list|(
literal|"_version"
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
decl_stmt|;
specifier|final
name|SeqNoFieldMapper
operator|.
name|SequenceID
name|seqID
init|=
name|SeqNoFieldMapper
operator|.
name|SequenceID
operator|.
name|emptySeqID
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|uidField
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|versionField
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|seqID
operator|.
name|seqNo
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|seqID
operator|.
name|seqNoDocValue
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|seqID
operator|.
name|primaryTerm
argument_list|)
expr_stmt|;
specifier|final
name|BytesReference
name|source
init|=
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
specifier|final
name|ParsedDocument
name|doc
init|=
operator|new
name|ParsedDocument
argument_list|(
name|versionField
argument_list|,
name|seqID
argument_list|,
name|id
argument_list|,
name|type
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|document
argument_list|)
argument_list|,
name|source
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
operator|new
name|Engine
operator|.
name|Index
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
name|doc
operator|.
name|uid
argument_list|()
argument_list|)
argument_list|,
name|doc
argument_list|)
return|;
block|}
DECL|method|testHandleCorruptedIndexOnSendSendFiles
specifier|public
name|void
name|testHandleCorruptedIndexOnSendSendFiles
parameter_list|()
throws|throws
name|Throwable
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"indices.recovery.concurrent_streams"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"indices.recovery.concurrent_small_file_streams"
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RecoverySettings
name|recoverySettings
init|=
operator|new
name|RecoverySettings
argument_list|(
name|settings
argument_list|,
name|service
argument_list|)
decl_stmt|;
specifier|final
name|StartRecoveryRequest
name|request
init|=
operator|new
name|StartRecoveryRequest
argument_list|(
name|shardId
argument_list|,
operator|new
name|DiscoveryNode
argument_list|(
literal|"b"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
operator|new
name|DiscoveryNode
argument_list|(
literal|"b"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomNonNegativeLong
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
else|:
literal|0L
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Store
name|store
init|=
name|newStore
argument_list|(
name|tempDir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|failedEngine
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|RecoverySourceHandler
name|handler
init|=
operator|new
name|RecoverySourceHandler
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|request
argument_list|,
parameter_list|()
lambda|->
literal|0L
argument_list|,
name|e
lambda|->
parameter_list|()
lambda|->
block|{}
argument_list|,
name|recoverySettings
operator|.
name|getChunkSize
argument_list|()
operator|.
name|bytesAsInt
argument_list|()
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
block|{             @
name|Override
specifier|protected
name|void
name|failEngine
argument_list|(
name|IOException
name|cause
argument_list|)
block|{
name|assertFalse
argument_list|(
name|failedEngine
operator|.
name|get
argument_list|()
argument_list|)
block|;
name|failedEngine
operator|.
name|set
argument_list|(
literal|true
argument_list|)
block|;             }
block|}
empty_stmt|;
name|Directory
name|dir
init|=
name|store
operator|.
name|directory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"field"
argument_list|,
name|randomUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Store
operator|.
name|MetadataSnapshot
name|metadata
init|=
name|store
operator|.
name|getMetadata
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StoreFileMetaData
argument_list|>
name|metas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|StoreFileMetaData
name|md
range|:
name|metadata
control|)
block|{
name|metas
operator|.
name|add
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
name|CorruptionUtils
operator|.
name|corruptFile
argument_list|(
name|random
argument_list|()
argument_list|,
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|tempDir
argument_list|,
parameter_list|(
name|p
parameter_list|)
lambda|->
operator|(
name|p
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"write.lock"
argument_list|)
operator|||
name|p
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"extra"
argument_list|)
operator|)
operator|==
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Store
name|targetStore
init|=
name|newStore
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|sendFiles
argument_list|(
name|store
argument_list|,
name|metas
operator|.
name|toArray
argument_list|(
operator|new
name|StoreFileMetaData
index|[
literal|0
index|]
argument_list|)
argument_list|,
parameter_list|(
name|md
parameter_list|)
lambda|->
block|{
try|try
block|{
return|return
operator|new
name|IndexOutputOutputStream
argument_list|(
name|targetStore
operator|.
name|createVerifyingOutput
argument_list|(
name|md
operator|.
name|name
argument_list|()
argument_list|,
name|md
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|store
operator|.
name|directory
argument_list|()
operator|.
name|sync
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|md
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// sync otherwise MDW will mess with it
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"corrupted index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|ExceptionsHelper
operator|.
name|unwrapCorruption
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|failedEngine
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|,
name|targetStore
argument_list|)
expr_stmt|;
block|}
DECL|method|testHandleExceptinoOnSendSendFiles
specifier|public
name|void
name|testHandleExceptinoOnSendSendFiles
parameter_list|()
throws|throws
name|Throwable
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"indices.recovery.concurrent_streams"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"indices.recovery.concurrent_small_file_streams"
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RecoverySettings
name|recoverySettings
init|=
operator|new
name|RecoverySettings
argument_list|(
name|settings
argument_list|,
name|service
argument_list|)
decl_stmt|;
specifier|final
name|StartRecoveryRequest
name|request
init|=
operator|new
name|StartRecoveryRequest
argument_list|(
name|shardId
argument_list|,
operator|new
name|DiscoveryNode
argument_list|(
literal|"b"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
operator|new
name|DiscoveryNode
argument_list|(
literal|"b"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomNonNegativeLong
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
else|:
literal|0L
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Store
name|store
init|=
name|newStore
argument_list|(
name|tempDir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|failedEngine
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|RecoverySourceHandler
name|handler
init|=
operator|new
name|RecoverySourceHandler
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|request
argument_list|,
parameter_list|()
lambda|->
literal|0L
argument_list|,
name|e
lambda|->
parameter_list|()
lambda|->
block|{}
argument_list|,
name|recoverySettings
operator|.
name|getChunkSize
argument_list|()
operator|.
name|bytesAsInt
argument_list|()
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
block|{             @
name|Override
specifier|protected
name|void
name|failEngine
argument_list|(
name|IOException
name|cause
argument_list|)
block|{
name|assertFalse
argument_list|(
name|failedEngine
operator|.
name|get
argument_list|()
argument_list|)
block|;
name|failedEngine
operator|.
name|set
argument_list|(
literal|true
argument_list|)
block|;             }
block|}
empty_stmt|;
name|Directory
name|dir
init|=
name|store
operator|.
name|directory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"field"
argument_list|,
name|randomUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Store
operator|.
name|MetadataSnapshot
name|metadata
init|=
name|store
operator|.
name|getMetadata
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StoreFileMetaData
argument_list|>
name|metas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|StoreFileMetaData
name|md
range|:
name|metadata
control|)
block|{
name|metas
operator|.
name|add
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|throwCorruptedIndexException
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|Store
name|targetStore
init|=
name|newStore
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|sendFiles
argument_list|(
name|store
argument_list|,
name|metas
operator|.
name|toArray
argument_list|(
operator|new
name|StoreFileMetaData
index|[
literal|0
index|]
argument_list|)
argument_list|,
parameter_list|(
name|md
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|throwCorruptedIndexException
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|new
name|CorruptIndexException
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"boom"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|assertNull
argument_list|(
name|ExceptionsHelper
operator|.
name|unwrapCorruption
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|throwCorruptedIndexException
condition|)
block|{
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"[File corruption occurred on recovery but checksums are ok]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"boom"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"not expected here"
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|failedEngine
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|,
name|targetStore
argument_list|)
expr_stmt|;
block|}
DECL|method|testThrowExceptionOnPrimaryRelocatedBeforePhase1Completed
specifier|public
name|void
name|testThrowExceptionOnPrimaryRelocatedBeforePhase1Completed
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|RecoverySettings
name|recoverySettings
init|=
operator|new
name|RecoverySettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|service
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|attemptSequenceNumberBasedRecovery
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|isTranslogReadyForSequenceNumberBasedRecovery
init|=
name|attemptSequenceNumberBasedRecovery
operator|&&
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|StartRecoveryRequest
name|request
init|=
operator|new
name|StartRecoveryRequest
argument_list|(
name|shardId
argument_list|,
operator|new
name|DiscoveryNode
argument_list|(
literal|"b"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
operator|new
name|DiscoveryNode
argument_list|(
literal|"b"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|randomNonNegativeLong
argument_list|()
argument_list|,
name|attemptSequenceNumberBasedRecovery
condition|?
name|randomNonNegativeLong
argument_list|()
else|:
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
decl_stmt|;
specifier|final
name|IndexShard
name|shard
init|=
name|mock
argument_list|(
name|IndexShard
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|shard
operator|.
name|seqNoStats
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|SeqNoStats
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|shard
operator|.
name|segmentStats
argument_list|(
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|SegmentsStats
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Translog
operator|.
name|View
name|translogView
init|=
name|mock
argument_list|(
name|Translog
operator|.
name|View
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|shard
operator|.
name|acquireTranslogView
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|translogView
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|shard
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|IndexShardState
operator|.
name|RELOCATED
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|phase1Called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|prepareTargetForTranslogCalled
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|phase2Called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|RecoverySourceHandler
name|handler
init|=
operator|new
name|RecoverySourceHandler
argument_list|(
name|shard
argument_list|,
name|mock
argument_list|(
name|RecoveryTargetHandler
operator|.
name|class
argument_list|)
argument_list|,
name|request
argument_list|,
parameter_list|()
lambda|->
literal|0L
argument_list|,
name|e
lambda|->
parameter_list|()
lambda|->
block|{}
argument_list|,
name|recoverySettings
operator|.
name|getChunkSize
argument_list|()
operator|.
name|bytesAsInt
argument_list|()
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
block|{              @
name|Override
name|boolean
name|isTranslogReadyForSequenceNumberBasedRecovery
argument_list|(
name|final
name|Translog
operator|.
name|View
name|translogView
argument_list|)
block|{
return|return
name|isTranslogReadyForSequenceNumberBasedRecovery
return|;
block|}
expr|@
name|Override
specifier|public
name|void
name|phase1
argument_list|(
name|final
name|IndexCommit
name|snapshot
argument_list|,
name|final
name|Translog
operator|.
name|View
name|translogView
argument_list|)
block|{
name|phase1Called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
block|;             }
expr|@
name|Override
name|void
name|prepareTargetForTranslog
argument_list|(
name|final
name|int
name|totalTranslogOps
argument_list|,
name|final
name|long
name|maxUnsafeAutoIdTimestamp
argument_list|)
throws|throws
name|IOException
block|{
name|prepareTargetForTranslogCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
block|;             }
annotation|@
name|Override
name|void
name|phase2
parameter_list|(
name|long
name|startingSeqNo
parameter_list|,
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|phase2Called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
name|expectThrows
argument_list|(
name|IndexShardRelocatedException
operator|.
name|class
argument_list|,
name|handler
operator|::
name|recoverToTarget
argument_list|)
expr_stmt|;
comment|// phase1 should only be attempted if we are not doing a sequence-number-based recovery
name|assertThat
argument_list|(
name|phase1Called
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|!
name|isTranslogReadyForSequenceNumberBasedRecovery
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prepareTargetForTranslogCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|phase2Called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_class

begin_function
DECL|method|testWaitForClusterStateOnPrimaryRelocation
specifier|public
name|void
name|testWaitForClusterStateOnPrimaryRelocation
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|RecoverySettings
name|recoverySettings
init|=
operator|new
name|RecoverySettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|service
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|attemptSequenceNumberBasedRecovery
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|isTranslogReadyForSequenceNumberBasedRecovery
init|=
name|attemptSequenceNumberBasedRecovery
operator|&&
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|StartRecoveryRequest
name|request
init|=
operator|new
name|StartRecoveryRequest
argument_list|(
name|shardId
argument_list|,
operator|new
name|DiscoveryNode
argument_list|(
literal|"b"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
operator|new
name|DiscoveryNode
argument_list|(
literal|"b"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|randomNonNegativeLong
argument_list|()
argument_list|,
name|attemptSequenceNumberBasedRecovery
condition|?
name|randomNonNegativeLong
argument_list|()
else|:
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|phase1Called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|prepareTargetForTranslogCalled
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|phase2Called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|ensureClusterStateVersionCalled
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|recoveriesDelayed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|relocated
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|IndexShard
name|shard
init|=
name|mock
argument_list|(
name|IndexShard
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|shard
operator|.
name|seqNoStats
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|SeqNoStats
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|shard
operator|.
name|segmentStats
argument_list|(
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|SegmentsStats
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Translog
operator|.
name|View
name|translogView
init|=
name|mock
argument_list|(
name|Translog
operator|.
name|View
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|shard
operator|.
name|acquireTranslogView
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|translogView
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|shard
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|then
argument_list|(
name|i
lambda|->
name|relocated
operator|.
name|get
argument_list|()
condition|?
name|IndexShardState
operator|.
name|RELOCATED
else|:
name|IndexShardState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
name|i
lambda|->
block|{
name|relocated
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|recoveriesDelayed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|shard
argument_list|)
operator|.
name|relocated
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Supplier
argument_list|<
name|Long
argument_list|>
name|currentClusterStateVersionSupplier
init|=
parameter_list|()
lambda|->
block|{
name|assertFalse
argument_list|(
name|ensureClusterStateVersionCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|recoveriesDelayed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureClusterStateVersionCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|0L
return|;
block|}
decl_stmt|;
specifier|final
name|Function
argument_list|<
name|String
argument_list|,
name|Releasable
argument_list|>
name|delayNewRecoveries
init|=
name|s
lambda|->
block|{
comment|// phase1 should only be attempted if we are not doing a sequence-number-based recovery
name|assertThat
argument_list|(
name|phase1Called
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|!
name|isTranslogReadyForSequenceNumberBasedRecovery
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prepareTargetForTranslogCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|phase2Called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|recoveriesDelayed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|recoveriesDelayed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
parameter_list|()
lambda|->
block|{
name|assertTrue
argument_list|(
name|recoveriesDelayed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|recoveriesDelayed
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|;
block|}
decl_stmt|;
specifier|final
name|RecoverySourceHandler
name|handler
init|=
operator|new
name|RecoverySourceHandler
argument_list|(
name|shard
argument_list|,
name|mock
argument_list|(
name|RecoveryTargetHandler
operator|.
name|class
argument_list|)
argument_list|,
name|request
argument_list|,
name|currentClusterStateVersionSupplier
argument_list|,
name|delayNewRecoveries
argument_list|,
name|recoverySettings
operator|.
name|getChunkSize
argument_list|()
operator|.
name|bytesAsInt
argument_list|()
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|isTranslogReadyForSequenceNumberBasedRecovery
parameter_list|(
specifier|final
name|Translog
operator|.
name|View
name|translogView
parameter_list|)
block|{
return|return
name|isTranslogReadyForSequenceNumberBasedRecovery
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|phase1
parameter_list|(
specifier|final
name|IndexCommit
name|snapshot
parameter_list|,
specifier|final
name|Translog
operator|.
name|View
name|translogView
parameter_list|)
block|{
name|phase1Called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|prepareTargetForTranslog
parameter_list|(
specifier|final
name|int
name|totalTranslogOps
parameter_list|,
specifier|final
name|long
name|maxUnsafeAutoIdTimestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|prepareTargetForTranslogCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|phase2
parameter_list|(
name|long
name|startingSeqNo
parameter_list|,
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|phase2Called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|handler
operator|.
name|recoverToTarget
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ensureClusterStateVersionCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// phase1 should only be attempted if we are not doing a sequence-number-based recovery
name|assertThat
argument_list|(
name|phase1Called
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|!
name|isTranslogReadyForSequenceNumberBasedRecovery
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prepareTargetForTranslogCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|phase2Called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|relocated
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|recoveriesDelayed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|newStore
specifier|private
name|Store
name|newStore
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|newStore
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|newStore
specifier|private
name|Store
name|newStore
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|checkIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|DirectoryService
name|directoryService
init|=
operator|new
name|DirectoryService
argument_list|(
name|shardId
argument_list|,
name|INDEX_SETTINGS
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Directory
name|newDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|BaseDirectoryWrapper
name|baseDirectoryWrapper
init|=
name|RecoverySourceHandlerTests
operator|.
name|newFSDirectory
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkIndex
operator|==
literal|false
condition|)
block|{
name|baseDirectoryWrapper
operator|.
name|setCheckIndexOnClose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// don't run checkindex we might corrupt the index in these tests
block|}
return|return
name|baseDirectoryWrapper
return|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|INDEX_SETTINGS
argument_list|,
name|directoryService
argument_list|,
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

