begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|reroute
operator|.
name|ClusterRerouteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|close
operator|.
name|CloseIndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|delete
operator|.
name|DeleteIndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|open
operator|.
name|OpenIndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|settings
operator|.
name|put
operator|.
name|UpdateSettingsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActiveShardCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ClusterStateCreationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
operator|.
name|ShardStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|FailedShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|LocalTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|PeerRecoveryTargetService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|INITIALIZING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|IndicesClusterStateServiceRandomUpdatesTests
specifier|public
class|class
name|IndicesClusterStateServiceRandomUpdatesTests
extends|extends
name|AbstractIndicesClusterStateServiceTestCase
block|{
DECL|field|cluster
specifier|private
specifier|final
name|ClusterStateChanges
name|cluster
init|=
operator|new
name|ClusterStateChanges
argument_list|()
decl_stmt|;
DECL|method|testRandomClusterStateUpdates
specifier|public
name|void
name|testRandomClusterStateUpdates
parameter_list|()
block|{
comment|// we have an IndicesClusterStateService per node in the cluster
specifier|final
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|IndicesClusterStateService
argument_list|>
name|clusterStateServiceMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ClusterState
name|state
init|=
name|randomInitialClusterState
argument_list|(
name|clusterStateServiceMap
argument_list|,
name|MockIndicesService
operator|::
operator|new
argument_list|)
decl_stmt|;
comment|// each of the following iterations represents a new cluster state update processed on all nodes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Iteration {}"
argument_list|,
name|i
argument_list|)
expr_stmt|;
specifier|final
name|ClusterState
name|previousState
init|=
name|state
decl_stmt|;
comment|// calculate new cluster state
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|randomInt
argument_list|(
literal|3
argument_list|)
condition|;
name|j
operator|++
control|)
block|{
comment|// multiple iterations to simulate batching of cluster states
try|try
block|{
name|state
operator|=
name|randomlyUpdateClusterState
argument_list|(
name|state
argument_list|,
name|clusterStateServiceMap
argument_list|,
name|MockIndicesService
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|error
parameter_list|)
block|{
name|ClusterState
name|finalState
init|=
name|state
decl_stmt|;
name|logger
operator|.
name|error
argument_list|(
call|(
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed to random change state. last good state: \n{}"
argument_list|,
name|finalState
operator|.
name|prettyPrint
argument_list|()
argument_list|)
argument_list|,
name|error
argument_list|)
expr_stmt|;
throw|throw
name|error
throw|;
block|}
block|}
comment|// apply cluster state to nodes (incl. master)
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|state
operator|.
name|nodes
argument_list|()
control|)
block|{
name|IndicesClusterStateService
name|indicesClusterStateService
init|=
name|clusterStateServiceMap
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|ClusterState
name|localState
init|=
name|adaptClusterStateToLocalNode
argument_list|(
name|state
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|ClusterState
name|previousLocalState
init|=
name|adaptClusterStateToLocalNode
argument_list|(
name|previousState
argument_list|,
name|node
argument_list|)
decl_stmt|;
specifier|final
name|ClusterChangedEvent
name|event
init|=
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"simulated change "
operator|+
name|i
argument_list|,
name|localState
argument_list|,
name|previousLocalState
argument_list|)
decl_stmt|;
try|try
block|{
name|indicesClusterStateService
operator|.
name|clusterChanged
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|error
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
call|(
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failed to apply change on [{}].\n ***  Previous state ***\n{}\n ***  New state ***\n{}"
argument_list|,
name|node
argument_list|,
name|event
operator|.
name|previousState
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|event
operator|.
name|state
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
argument_list|,
name|error
argument_list|)
expr_stmt|;
throw|throw
name|error
throw|;
block|}
comment|// check that cluster state has been properly applied to node
name|assertClusterStateMatchesNodeState
argument_list|(
name|localState
argument_list|,
name|indicesClusterStateService
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: check if we can go to green by starting all shards and finishing all iterations
name|logger
operator|.
name|info
argument_list|(
literal|"Final cluster state: {}"
argument_list|,
name|state
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test ensures that when a node joins a brand new cluster (different cluster UUID),      * different from the cluster it was previously a part of, the in-memory index data structures      * are all removed but the on disk contents of those indices remain so that they can later be      * imported as dangling indices.  Normally, the first cluster state update that the node      * receives from the new cluster would contain a cluster block that would cause all in-memory      * structures to be removed (see {@link IndicesClusterStateService#clusterChanged(ClusterChangedEvent)}),      * but in the case where the node joined and was a few cluster state updates behind, it would      * not have received the cluster block, in which case we still need to remove the in-memory      * structures while ensuring the data remains on disk.  This test executes this particular      * scenario.      */
DECL|method|testJoiningNewClusterOnlyRemovesInMemoryIndexStructures
specifier|public
name|void
name|testJoiningNewClusterOnlyRemovesInMemoryIndexStructures
parameter_list|()
block|{
comment|// a cluster state derived from the initial state that includes a created index
name|String
name|name
init|=
literal|"index_"
operator|+
name|randomAsciiOfLength
argument_list|(
literal|8
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|ShardRoutingState
index|[]
name|replicaStates
init|=
operator|new
name|ShardRoutingState
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|replicaStates
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
expr_stmt|;
name|ClusterState
name|stateWithIndex
init|=
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
name|name
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|replicaStates
argument_list|)
decl_stmt|;
comment|// the initial state which is derived from the newly created cluster state but doesn't contain the index
name|ClusterState
name|initialState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|stateWithIndex
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|(
name|stateWithIndex
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|(
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// pick a data node to simulate the adding an index cluster state change event on, that has shards assigned to it
name|DiscoveryNode
name|node
init|=
name|stateWithIndex
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|randomFrom
argument_list|(
name|stateWithIndex
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|name
argument_list|)
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// simulate the cluster state change on the node
name|ClusterState
name|localState
init|=
name|adaptClusterStateToLocalNode
argument_list|(
name|stateWithIndex
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|ClusterState
name|previousLocalState
init|=
name|adaptClusterStateToLocalNode
argument_list|(
name|initialState
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|IndicesClusterStateService
name|indicesCSSvc
init|=
name|createIndicesClusterStateService
argument_list|(
name|node
argument_list|,
name|RecordingIndicesService
operator|::
operator|new
argument_list|)
decl_stmt|;
name|indicesCSSvc
operator|.
name|start
argument_list|()
expr_stmt|;
name|indicesCSSvc
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"cluster state change that adds the index"
argument_list|,
name|localState
argument_list|,
name|previousLocalState
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a new empty cluster state with a brand new cluster UUID
name|ClusterState
name|newClusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|initialState
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|(
name|initialState
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|clusterUUID
argument_list|(
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// simulate the cluster state change on the node
name|localState
operator|=
name|adaptClusterStateToLocalNode
argument_list|(
name|newClusterState
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|previousLocalState
operator|=
name|adaptClusterStateToLocalNode
argument_list|(
name|stateWithIndex
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|indicesCSSvc
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"cluster state change with a new cluster UUID (and doesn't contain the index)"
argument_list|,
name|localState
argument_list|,
name|previousLocalState
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that in memory data structures have been removed once the new cluster state is applied,
comment|// but the persistent data is still there
name|RecordingIndicesService
name|indicesService
init|=
operator|(
name|RecordingIndicesService
operator|)
name|indicesCSSvc
operator|.
name|indicesService
decl_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|stateWithIndex
operator|.
name|metaData
argument_list|()
control|)
block|{
name|Index
name|index
init|=
name|indexMetaData
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|indicesService
operator|.
name|indexService
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|indicesService
operator|.
name|isDeleted
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomInitialClusterState
specifier|public
name|ClusterState
name|randomInitialClusterState
parameter_list|(
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|IndicesClusterStateService
argument_list|>
name|clusterStateServiceMap
parameter_list|,
name|Supplier
argument_list|<
name|MockIndicesService
argument_list|>
name|indicesServiceSupplier
parameter_list|)
block|{
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|allNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|localNode
init|=
name|createNode
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|MASTER
argument_list|)
decl_stmt|;
comment|// local node is the master
name|allNodes
operator|.
name|add
argument_list|(
name|localNode
argument_list|)
expr_stmt|;
comment|// at least two nodes that have the data role so that we can allocate shards
name|allNodes
operator|.
name|add
argument_list|(
name|createNode
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|DATA
argument_list|)
argument_list|)
expr_stmt|;
name|allNodes
operator|.
name|add
argument_list|(
name|createNode
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|DATA
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|allNodes
operator|.
name|add
argument_list|(
name|createNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ClusterState
name|state
init|=
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
name|localNode
argument_list|,
name|localNode
argument_list|,
name|allNodes
operator|.
name|toArray
argument_list|(
operator|new
name|DiscoveryNode
index|[
name|allNodes
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
comment|// add nodes to clusterStateServiceMap
name|updateNodes
argument_list|(
name|state
argument_list|,
name|clusterStateServiceMap
argument_list|,
name|indicesServiceSupplier
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
DECL|method|updateNodes
specifier|private
name|void
name|updateNodes
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|IndicesClusterStateService
argument_list|>
name|clusterStateServiceMap
parameter_list|,
name|Supplier
argument_list|<
name|MockIndicesService
argument_list|>
name|indicesServiceSupplier
parameter_list|)
block|{
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|state
operator|.
name|nodes
argument_list|()
control|)
block|{
name|clusterStateServiceMap
operator|.
name|computeIfAbsent
argument_list|(
name|node
argument_list|,
name|discoveryNode
lambda|->
block|{
name|IndicesClusterStateService
name|ics
init|=
name|createIndicesClusterStateService
argument_list|(
name|discoveryNode
argument_list|,
name|indicesServiceSupplier
argument_list|)
decl_stmt|;
name|ics
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|ics
return|;
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|DiscoveryNode
argument_list|,
name|IndicesClusterStateService
argument_list|>
argument_list|>
name|it
init|=
name|clusterStateServiceMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DiscoveryNode
name|node
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|nodeExists
argument_list|(
name|node
argument_list|)
operator|==
literal|false
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|randomlyUpdateClusterState
specifier|public
name|ClusterState
name|randomlyUpdateClusterState
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|Map
argument_list|<
name|DiscoveryNode
argument_list|,
name|IndicesClusterStateService
argument_list|>
name|clusterStateServiceMap
parameter_list|,
name|Supplier
argument_list|<
name|MockIndicesService
argument_list|>
name|indicesServiceSupplier
parameter_list|)
block|{
comment|// randomly create new indices (until we have 200 max)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomInt
argument_list|(
literal|5
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|200
condition|)
block|{
break|break;
block|}
name|String
name|name
init|=
literal|"index_"
operator|+
name|randomAsciiOfLength
argument_list|(
literal|15
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|Settings
operator|.
name|Builder
name|settingsBuilder
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|randomInt
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|settingsBuilder
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHADOW_REPLICAS
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHARED_FILESYSTEM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|CreateIndexRequest
name|request
init|=
operator|new
name|CreateIndexRequest
argument_list|(
name|name
argument_list|,
name|settingsBuilder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|waitForActiveShards
argument_list|(
name|ActiveShardCount
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|state
operator|=
name|cluster
operator|.
name|createIndex
argument_list|(
name|state
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// randomly delete indices
name|Set
argument_list|<
name|String
argument_list|>
name|indicesToDelete
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numberOfIndicesToDelete
init|=
name|randomInt
argument_list|(
name|Math
operator|.
name|min
argument_list|(
literal|2
argument_list|,
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|randomSubsetOf
argument_list|(
name|numberOfIndicesToDelete
argument_list|,
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|keys
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
control|)
block|{
name|indicesToDelete
operator|.
name|add
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indicesToDelete
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|DeleteIndexRequest
name|deleteRequest
init|=
operator|new
name|DeleteIndexRequest
argument_list|(
name|indicesToDelete
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|indicesToDelete
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|state
operator|=
name|cluster
operator|.
name|deleteIndices
argument_list|(
name|state
argument_list|,
name|deleteRequest
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indicesToDelete
control|)
block|{
name|assertFalse
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// randomly close indices
name|int
name|numberOfIndicesToClose
init|=
name|randomInt
argument_list|(
name|Math
operator|.
name|min
argument_list|(
literal|1
argument_list|,
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|randomSubsetOf
argument_list|(
name|numberOfIndicesToClose
argument_list|,
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|keys
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
control|)
block|{
name|CloseIndexRequest
name|closeIndexRequest
init|=
operator|new
name|CloseIndexRequest
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|state
operator|=
name|cluster
operator|.
name|closeIndices
argument_list|(
name|state
argument_list|,
name|closeIndexRequest
argument_list|)
expr_stmt|;
block|}
comment|// randomly open indices
name|int
name|numberOfIndicesToOpen
init|=
name|randomInt
argument_list|(
name|Math
operator|.
name|min
argument_list|(
literal|1
argument_list|,
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|randomSubsetOf
argument_list|(
name|numberOfIndicesToOpen
argument_list|,
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|keys
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
control|)
block|{
name|OpenIndexRequest
name|openIndexRequest
init|=
operator|new
name|OpenIndexRequest
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|state
operator|=
name|cluster
operator|.
name|openIndices
argument_list|(
name|state
argument_list|,
name|openIndexRequest
argument_list|)
expr_stmt|;
block|}
comment|// randomly update settings
name|Set
argument_list|<
name|String
argument_list|>
name|indicesToUpdate
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|containsClosedIndex
init|=
literal|false
decl_stmt|;
name|int
name|numberOfIndicesToUpdate
init|=
name|randomInt
argument_list|(
name|Math
operator|.
name|min
argument_list|(
literal|2
argument_list|,
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|randomSubsetOf
argument_list|(
name|numberOfIndicesToUpdate
argument_list|,
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|keys
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
control|)
block|{
name|indicesToUpdate
operator|.
name|add
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|getState
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
condition|)
block|{
name|containsClosedIndex
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|indicesToUpdate
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|UpdateSettingsRequest
name|updateSettingsRequest
init|=
operator|new
name|UpdateSettingsRequest
argument_list|(
name|indicesToUpdate
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|indicesToUpdate
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|Settings
operator|.
name|Builder
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|containsClosedIndex
operator|==
literal|false
condition|)
block|{
name|settings
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|randomInt
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|settings
operator|.
name|put
argument_list|(
literal|"index.refresh_interval"
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
operator|+
literal|"s"
argument_list|)
expr_stmt|;
name|updateSettingsRequest
operator|.
name|settings
argument_list|(
name|settings
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|=
name|cluster
operator|.
name|updateSettings
argument_list|(
name|state
argument_list|,
name|updateSettingsRequest
argument_list|)
expr_stmt|;
block|}
comment|// randomly reroute
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|state
operator|=
name|cluster
operator|.
name|reroute
argument_list|(
name|state
argument_list|,
operator|new
name|ClusterRerouteRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// randomly start and fail allocated shards
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|startedShards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FailedShard
argument_list|>
name|failedShards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|state
operator|.
name|nodes
argument_list|()
control|)
block|{
name|IndicesClusterStateService
name|indicesClusterStateService
init|=
name|clusterStateServiceMap
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|MockIndicesService
name|indicesService
init|=
operator|(
name|MockIndicesService
operator|)
name|indicesClusterStateService
operator|.
name|indicesService
decl_stmt|;
for|for
control|(
name|MockIndexService
name|indexService
range|:
name|indicesService
control|)
block|{
for|for
control|(
name|MockIndexShard
name|indexShard
range|:
name|indexService
control|)
block|{
name|ShardRouting
name|persistedShardRouting
init|=
name|indexShard
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|persistedShardRouting
operator|.
name|initializing
argument_list|()
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|startedShards
operator|.
name|add
argument_list|(
name|persistedShardRouting
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|failedShards
operator|.
name|add
argument_list|(
operator|new
name|FailedShard
argument_list|(
name|persistedShardRouting
argument_list|,
literal|"fake shard failure"
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|state
operator|=
name|cluster
operator|.
name|applyFailedShards
argument_list|(
name|state
argument_list|,
name|failedShards
argument_list|)
expr_stmt|;
name|state
operator|=
name|cluster
operator|.
name|applyStartedShards
argument_list|(
name|state
argument_list|,
name|startedShards
argument_list|)
expr_stmt|;
comment|// randomly add and remove nodes (except current master)
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// add node
if|if
condition|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getSize
argument_list|()
operator|<
literal|10
condition|)
block|{
name|DiscoveryNodes
name|newNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|createNode
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|nodes
argument_list|(
name|newNodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|state
operator|=
name|cluster
operator|.
name|reroute
argument_list|(
name|state
argument_list|,
operator|new
name|ClusterRerouteRequest
argument_list|()
argument_list|)
expr_stmt|;
comment|// always reroute after node leave
name|updateNodes
argument_list|(
name|state
argument_list|,
name|clusterStateServiceMap
argument_list|,
name|indicesServiceSupplier
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// remove node
if|if
condition|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|3
condition|)
block|{
name|DiscoveryNode
name|discoveryNode
init|=
name|randomFrom
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getNodes
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|DiscoveryNode
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|discoveryNode
operator|.
name|equals
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNode
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|DiscoveryNodes
name|newNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|nodes
argument_list|(
name|newNodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|state
operator|=
name|cluster
operator|.
name|deassociateDeadNodes
argument_list|(
name|state
argument_list|,
literal|true
argument_list|,
literal|"removed and added a node"
argument_list|)
expr_stmt|;
name|updateNodes
argument_list|(
name|state
argument_list|,
name|clusterStateServiceMap
argument_list|,
name|indicesServiceSupplier
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// and add it back
name|DiscoveryNodes
name|newNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|discoveryNode
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|nodes
argument_list|(
name|newNodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|state
operator|=
name|cluster
operator|.
name|reroute
argument_list|(
name|state
argument_list|,
operator|new
name|ClusterRerouteRequest
argument_list|()
argument_list|)
expr_stmt|;
name|updateNodes
argument_list|(
name|state
argument_list|,
name|clusterStateServiceMap
argument_list|,
name|indicesServiceSupplier
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// TODO: go masterless?
return|return
name|state
return|;
block|}
DECL|field|nodeIdGenerator
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|nodeIdGenerator
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|createNode
specifier|protected
name|DiscoveryNode
name|createNode
parameter_list|(
name|DiscoveryNode
operator|.
name|Role
modifier|...
name|mustHaveRoles
parameter_list|)
block|{
name|Set
argument_list|<
name|DiscoveryNode
operator|.
name|Role
argument_list|>
name|roles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|randomSubsetOf
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|DiscoveryNode
operator|.
name|Role
name|mustHaveRole
range|:
name|mustHaveRoles
control|)
block|{
name|roles
operator|.
name|add
argument_list|(
name|mustHaveRole
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|id
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"node_%03d"
argument_list|,
name|nodeIdGenerator
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|DiscoveryNode
argument_list|(
name|id
argument_list|,
name|id
argument_list|,
name|LocalTransportAddress
operator|.
name|buildUnique
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|roles
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
return|;
block|}
DECL|method|adaptClusterStateToLocalNode
specifier|private
specifier|static
name|ClusterState
name|adaptClusterStateToLocalNode
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|)
block|{
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|createIndicesClusterStateService
specifier|private
name|IndicesClusterStateService
name|createIndicesClusterStateService
parameter_list|(
name|DiscoveryNode
name|discoveryNode
parameter_list|,
specifier|final
name|Supplier
argument_list|<
name|MockIndicesService
argument_list|>
name|indicesServiceSupplier
parameter_list|)
block|{
specifier|final
name|ThreadPool
name|threadPool
init|=
name|mock
argument_list|(
name|ThreadPool
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Executor
name|executor
init|=
name|mock
argument_list|(
name|Executor
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|threadPool
operator|.
name|generic
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|executor
argument_list|)
expr_stmt|;
specifier|final
name|MockIndicesService
name|indicesService
init|=
name|indicesServiceSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
name|discoveryNode
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|TransportService
name|transportService
init|=
operator|new
name|TransportService
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|,
name|threadPool
argument_list|,
name|TransportService
operator|.
name|NOOP_TRANSPORT_INTERCEPTOR
argument_list|)
decl_stmt|;
specifier|final
name|ClusterService
name|clusterService
init|=
name|mock
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|RepositoriesService
name|repositoriesService
init|=
operator|new
name|RepositoriesService
argument_list|(
name|settings
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|PeerRecoveryTargetService
name|recoveryTargetService
init|=
operator|new
name|PeerRecoveryTargetService
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
name|transportService
argument_list|,
literal|null
argument_list|,
name|clusterService
argument_list|)
decl_stmt|;
specifier|final
name|ShardStateAction
name|shardStateAction
init|=
name|mock
argument_list|(
name|ShardStateAction
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|IndicesClusterStateService
argument_list|(
name|settings
argument_list|,
name|indicesService
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|,
name|recoveryTargetService
argument_list|,
name|shardStateAction
argument_list|,
literal|null
argument_list|,
name|repositoriesService
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|class|RecordingIndicesService
specifier|private
class|class
name|RecordingIndicesService
extends|extends
name|MockIndicesService
block|{
DECL|field|deletedIndices
specifier|private
name|Set
argument_list|<
name|Index
argument_list|>
name|deletedIndices
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|deleteIndex
specifier|public
specifier|synchronized
name|void
name|deleteIndex
parameter_list|(
name|Index
name|index
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|super
operator|.
name|deleteIndex
argument_list|(
name|index
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Index
argument_list|>
name|newSet
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|deletedIndices
argument_list|)
decl_stmt|;
name|newSet
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|deletedIndices
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|newSet
argument_list|)
expr_stmt|;
block|}
DECL|method|isDeleted
specifier|public
specifier|synchronized
name|boolean
name|isDeleted
parameter_list|(
name|Index
name|index
parameter_list|)
block|{
return|return
name|deletedIndices
operator|.
name|contains
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

