begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.memory
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|memory
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalSettingsPreparer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ESIntegTestCase
operator|.
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|)
DECL|class|IndexingMemoryControllerIT
specifier|public
class|class
name|IndexingMemoryControllerIT
extends|extends
name|ESIntegTestCase
block|{
DECL|method|getIWBufferSize
specifier|private
name|long
name|getIWBufferSize
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getSegments
argument_list|()
operator|.
name|getIndexWriterMaxMemoryInBytes
argument_list|()
return|;
block|}
DECL|method|testIndexBufferPushedToEngine
specifier|public
name|void
name|testIndexBufferPushedToEngine
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|createNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexShard
operator|.
name|INDEX_SHARD_INACTIVE_TIME_SETTING
argument_list|,
literal|"100000h"
argument_list|,
name|IndexingMemoryController
operator|.
name|INDEX_BUFFER_SIZE_SETTING
argument_list|,
literal|"32mb"
argument_list|,
name|IndexShard
operator|.
name|INDEX_REFRESH_INTERVAL
argument_list|,
literal|"-1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create two active indices, sharing 32 MB indexing buffer:
name|prepareCreate
argument_list|(
literal|"test3"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|prepareCreate
argument_list|(
literal|"test4"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test3"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
literal|"f"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test4"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
literal|"f"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// .. then make sure we really pushed the update (16 MB for each) down to the IndexWriter, even if refresh nor flush occurs:
if|if
condition|(
name|awaitBusy
argument_list|(
parameter_list|()
lambda|->
name|getIWBufferSize
argument_list|(
literal|"test3"
argument_list|)
operator|==
literal|16
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
operator|==
literal|false
condition|)
block|{
name|fail
argument_list|(
literal|"failed to update shard indexing buffer size for test3 index to 16 MB; got: "
operator|+
name|getIWBufferSize
argument_list|(
literal|"test3"
argument_list|)
argument_list|)
block|;         }
if|if
condition|(
name|awaitBusy
argument_list|(
parameter_list|()
lambda|->
name|getIWBufferSize
argument_list|(
literal|"test4"
argument_list|)
operator|==
literal|16
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
operator|==
literal|false
condition|)
block|{
name|fail
argument_list|(
literal|"failed to update shard indexing buffer size for test4 index to 16 MB; got: "
operator|+
name|getIWBufferSize
argument_list|(
literal|"test4"
argument_list|)
argument_list|)
block|;         }
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test4"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|awaitBusy
argument_list|(
parameter_list|()
lambda|->
name|getIWBufferSize
argument_list|(
literal|"test3"
argument_list|)
operator|==
literal|32
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
operator|==
literal|false
condition|)
block|{
name|fail
argument_list|(
literal|"failed to update shard indexing buffer size for test3 index to 32 MB; got: "
operator|+
name|getIWBufferSize
argument_list|(
literal|"test4"
argument_list|)
argument_list|)
block|;         }
block|}
DECL|method|testInactivePushedToShard
specifier|public
name|void
name|testInactivePushedToShard
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|createNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexShard
operator|.
name|INDEX_SHARD_INACTIVE_TIME_SETTING
argument_list|,
literal|"100ms"
argument_list|,
name|IndexingMemoryController
operator|.
name|SHARD_INACTIVE_INTERVAL_TIME_SETTING
argument_list|,
literal|"100ms"
argument_list|,
name|IndexShard
operator|.
name|INDEX_REFRESH_INTERVAL
argument_list|,
literal|"-1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create two active indices, sharing 32 MB indexing buffer:
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test1"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
literal|"f"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// make shard the shard buffer was set to inactive size
specifier|final
name|ByteSizeValue
name|inactiveBuffer
init|=
name|IndexingMemoryController
operator|.
name|INACTIVE_SHARD_INDEXING_BUFFER
decl_stmt|;
if|if
condition|(
name|awaitBusy
argument_list|(
parameter_list|()
lambda|->
name|getIWBufferSize
argument_list|(
literal|"test1"
argument_list|)
operator|==
name|inactiveBuffer
operator|.
name|bytes
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|fail
argument_list|(
literal|"failed to update shard indexing buffer size for test1 index to ["
operator|+
name|inactiveBuffer
operator|+
literal|"]; got: "
operator|+
name|getIWBufferSize
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
block|;         }
block|}
DECL|method|createNode
specifier|private
name|void
name|createNode
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|ClusterName
operator|.
name|SETTING
argument_list|,
literal|"IndexingMemoryControllerIT"
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
literal|"IndexingMemoryControllerIT"
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|EsExecutors
operator|.
name|PROCESSORS
argument_list|,
literal|1
argument_list|)
comment|// limit the number of threads created
operator|.
name|put
argument_list|(
literal|"http.enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
name|InternalSettingsPreparer
operator|.
name|IGNORE_SYSTEM_PROPERTIES_SETTING
argument_list|,
literal|true
argument_list|)
comment|// make sure we get what we set :)
operator|.
name|put
argument_list|(
name|IndexingMemoryController
operator|.
name|SHARD_INACTIVE_INTERVAL_TIME_SETTING
argument_list|,
literal|"100ms"
argument_list|)
operator|.
name|put
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

