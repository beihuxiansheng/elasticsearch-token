begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.memory.breaker
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|memory
operator|.
name|breaker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|HierarchyCircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|cardinality
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_comment
comment|/** Tests for the noop breakers, which are non-dynamic settings */
end_comment

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ESIntegTestCase
operator|.
name|Scope
operator|.
name|SUITE
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|)
DECL|class|CircuitBreakerNoopIT
specifier|public
class|class
name|CircuitBreakerNoopIT
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Override
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|HierarchyCircuitBreakerService
operator|.
name|FIELDDATA_CIRCUIT_BREAKER_TYPE_SETTING
argument_list|,
literal|"noop"
argument_list|)
comment|// This is set low, because if the "noop" is not a noop, it will break
operator|.
name|put
argument_list|(
name|HierarchyCircuitBreakerService
operator|.
name|FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"10b"
argument_list|)
operator|.
name|put
argument_list|(
name|HierarchyCircuitBreakerService
operator|.
name|REQUEST_CIRCUIT_BREAKER_TYPE_SETTING
argument_list|,
literal|"noop"
argument_list|)
comment|// This is set low, because if the "noop" is not a noop, it will break
operator|.
name|put
argument_list|(
name|HierarchyCircuitBreakerService
operator|.
name|REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"10b"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|testNoopRequestBreaker
specifier|public
name|void
name|testNoopRequestBreaker
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"cb-test"
argument_list|,
literal|1
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|between
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Client
name|client
init|=
name|client
argument_list|()
decl_stmt|;
comment|// index some different terms so we have some field data for loading
name|int
name|docCount
init|=
name|scaledRandomIntBetween
argument_list|(
literal|300
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|id
init|=
literal|0
init|;
name|id
operator|<
name|docCount
condition|;
name|id
operator|++
control|)
block|{
name|reqs
operator|.
name|add
argument_list|(
name|client
operator|.
name|prepareIndex
argument_list|(
literal|"cb-test"
argument_list|,
literal|"type"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"test"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|reqs
argument_list|)
expr_stmt|;
comment|// A cardinality aggregation uses BigArrays and thus the REQUEST breaker
name|client
operator|.
name|prepareSearch
argument_list|(
literal|"cb-test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"card"
argument_list|)
operator|.
name|field
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// no exception because the breaker is a noop
block|}
DECL|method|testNoopFielddataBreaker
specifier|public
name|void
name|testNoopFielddataBreaker
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"cb-test"
argument_list|,
literal|1
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|between
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Client
name|client
init|=
name|client
argument_list|()
decl_stmt|;
comment|// index some different terms so we have some field data for loading
name|int
name|docCount
init|=
name|scaledRandomIntBetween
argument_list|(
literal|300
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|id
init|=
literal|0
init|;
name|id
operator|<
name|docCount
condition|;
name|id
operator|++
control|)
block|{
name|reqs
operator|.
name|add
argument_list|(
name|client
operator|.
name|prepareIndex
argument_list|(
literal|"cb-test"
argument_list|,
literal|"type"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"test"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|reqs
argument_list|)
expr_stmt|;
comment|// Sorting using fielddata and thus the FIELDDATA breaker
name|client
operator|.
name|prepareSearch
argument_list|(
literal|"cb-test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"test"
argument_list|,
name|SortOrder
operator|.
name|DESC
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// no exception because the breaker is a noop
block|}
block|}
end_class

end_unit

