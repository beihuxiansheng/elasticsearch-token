begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.state
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|state
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|put
operator|.
name|PutMappingResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDeciders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|DummyTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoveryModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoverySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|BlockClusterStateProcessing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
annotation|@
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ElasticsearchIntegrationTest
operator|.
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|,
name|numClientNodes
operator|=
literal|0
argument_list|,
name|transportClientRatio
operator|=
literal|0
argument_list|)
DECL|class|RareClusterStateTests
specifier|public
class|class
name|RareClusterStateTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
annotation|@
name|Override
DECL|method|numberOfShards
specifier|protected
name|int
name|numberOfShards
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|numberOfReplicas
specifier|protected
name|int
name|numberOfReplicas
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Test
DECL|method|testUnassignedShardAndEmptyNodesInRoutingTable
specifier|public
name|void
name|testUnassignedShardAndEmptyNodesInRoutingTable
parameter_list|()
throws|throws
name|Exception
block|{
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
name|createIndex
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|ClusterState
name|current
init|=
name|clusterService
argument_list|()
operator|.
name|state
argument_list|()
decl_stmt|;
name|GatewayAllocator
name|allocator
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|GatewayAllocator
operator|.
name|class
argument_list|)
decl_stmt|;
name|AllocationDeciders
name|allocationDeciders
init|=
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|AllocationDecider
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|RoutingNodes
name|routingNodes
init|=
operator|new
name|RoutingNodes
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|current
argument_list|)
operator|.
name|routingTable
argument_list|(
name|RoutingTable
operator|.
name|builder
argument_list|(
name|current
operator|.
name|routingTable
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
literal|"a"
argument_list|)
operator|.
name|addAsRecovery
argument_list|(
name|current
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|EMPTY_NODES
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|ClusterInfo
name|clusterInfo
init|=
operator|new
name|ClusterInfo
argument_list|(
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|DiskUsage
operator|>
name|of
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Long
operator|>
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|RoutingAllocation
name|routingAllocation
init|=
operator|new
name|RoutingAllocation
argument_list|(
name|allocationDeciders
argument_list|,
name|routingNodes
argument_list|,
name|current
operator|.
name|nodes
argument_list|()
argument_list|,
name|clusterInfo
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|allocateUnassigned
argument_list|(
name|routingAllocation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestLogging
argument_list|(
literal|"gateway:TRACE"
argument_list|)
DECL|method|testAssignmentWithJustAddedNodes
specifier|public
name|void
name|testAssignmentWithJustAddedNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
specifier|final
name|String
name|index
init|=
literal|"index"
decl_stmt|;
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|setSettings
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|// close to have some unassigned started shards shards..
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClose
argument_list|(
name|index
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
specifier|final
name|String
name|masterName
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
specifier|final
name|ClusterService
name|clusterService
init|=
name|internalCluster
argument_list|()
operator|.
name|clusterService
argument_list|(
name|masterName
argument_list|)
decl_stmt|;
specifier|final
name|AllocationService
name|allocationService
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|AllocationService
operator|.
name|class
argument_list|,
name|masterName
argument_list|)
decl_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"test-inject-node-and-reroute"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
comment|// inject a node
name|ClusterState
operator|.
name|Builder
name|builder
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
decl_stmt|;
name|builder
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"_non_existent"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// open index
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|builder
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|blocks
argument_list|(
name|currentState
operator|.
name|blocks
argument_list|()
argument_list|)
operator|.
name|removeIndexBlocks
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterState
name|updatedState
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
operator|.
name|Builder
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|(
name|updatedState
operator|.
name|routingTable
argument_list|()
argument_list|)
decl_stmt|;
name|routingTable
operator|.
name|addAsRecovery
argument_list|(
name|updatedState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|updatedState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|updatedState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|RoutingAllocation
operator|.
name|Result
name|result
init|=
name|allocationService
operator|.
name|reroute
argument_list|(
name|updatedState
argument_list|)
decl_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|updatedState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|result
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{              }
block|}
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|// remove the extra node
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"test-remove-injected-node"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
comment|// inject a node
name|ClusterState
operator|.
name|Builder
name|builder
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
decl_stmt|;
name|builder
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
literal|"_non_existent"
argument_list|)
argument_list|)
expr_stmt|;
name|currentState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|RoutingAllocation
operator|.
name|Result
name|result
init|=
name|allocationService
operator|.
name|reroute
argument_list|(
name|currentState
argument_list|)
decl_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|result
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{              }
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestLogging
argument_list|(
name|value
operator|=
literal|"cluster.service:TRACE"
argument_list|)
DECL|method|testDeleteCreateInOneBulk
specifier|public
name|void
name|testDeleteCreateInOneBulk
parameter_list|()
throws|throws
name|Exception
block|{
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
literal|2
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|DiscoveryModule
operator|.
name|DISCOVERY_TYPE_KEY
argument_list|,
literal|"zen"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|"2"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_AUTO_EXPAND_REPLICAS
argument_list|,
literal|true
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// now that the cluster is stable, remove publishing timeout
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|DiscoverySettings
operator|.
name|PUBLISH_TIMEOUT
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|remove
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
argument_list|)
expr_stmt|;
comment|// block none master node.
name|BlockClusterStateProcessing
name|disruption
init|=
operator|new
name|BlockClusterStateProcessing
argument_list|(
name|nodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|setDisruptionScheme
argument_list|(
name|disruption
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> indexing a doc"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|disruption
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> delete index and recreate it"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTimeout
argument_list|(
literal|"200ms"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTimeout
argument_list|(
literal|"200ms"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_AUTO_EXPAND_REPLICAS
argument_list|,
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> letting cluster proceed"
argument_list|)
expr_stmt|;
name|disruption
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|30
argument_list|)
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testDelayedMappingPropagationOnPrimary
specifier|public
name|void
name|testDelayedMappingPropagationOnPrimary
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Here we want to test that things go well if there is a first request
comment|// that adds mappings but before mappings are propagated to all nodes
comment|// another index request introduces the same mapping. The master node
comment|// will reply immediately since it did not change the cluster state
comment|// but the change might not be on the node that performed the indexing
comment|// operation yet
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|DiscoverySettings
operator|.
name|PUBLISH_TIMEOUT
argument_list|,
literal|"0ms"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nodeNames
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
literal|2
argument_list|,
name|settings
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|"2"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|master
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|nodeNames
argument_list|,
name|hasItem
argument_list|(
name|master
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|otherNode
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodeNames
control|)
block|{
if|if
condition|(
name|node
operator|.
name|equals
argument_list|(
name|master
argument_list|)
operator|==
literal|false
condition|)
block|{
name|otherNode
operator|=
name|node
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|otherNode
argument_list|)
expr_stmt|;
comment|// Don't allocate the shard on the master node
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.exclude._name"
argument_list|,
name|master
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// Check routing tables
name|ClusterState
name|state
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|master
argument_list|,
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
init|=
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|shards
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardRouting
name|shard
range|:
name|shards
control|)
block|{
if|if
condition|(
name|shard
operator|.
name|primary
argument_list|()
condition|)
block|{
comment|// primary must not be on the master node
name|assertFalse
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|masterNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|()
expr_stmt|;
comment|// only primaries
block|}
block|}
comment|// Block cluster state processing where our shard is
name|BlockClusterStateProcessing
name|disruption
init|=
operator|new
name|BlockClusterStateProcessing
argument_list|(
name|otherNode
argument_list|,
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|setDisruptionScheme
argument_list|(
name|disruption
argument_list|)
expr_stmt|;
name|disruption
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
comment|// Add a new mapping...
specifier|final
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|putMappingResponse
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"type=long"
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|ActionListener
argument_list|<
name|PutMappingResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|PutMappingResponse
name|response
parameter_list|)
block|{
name|putMappingResponse
operator|.
name|set
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|putMappingResponse
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// ...and wait for mappings to be available on master
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|indexMappings
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetMappings
argument_list|(
literal|"index"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getMappings
argument_list|()
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|indexMappings
argument_list|)
expr_stmt|;
name|MappingMetaData
name|typeMappings
init|=
name|indexMappings
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typeMappings
argument_list|)
expr_stmt|;
name|Object
name|properties
decl_stmt|;
try|try
block|{
name|properties
operator|=
name|typeMappings
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"properties"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|assertNotNull
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|Object
name|fieldMapping
init|=
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|properties
operator|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldMapping
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|docIndexResponse
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|42
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|ActionListener
argument_list|<
name|IndexResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|IndexResponse
name|response
parameter_list|)
block|{
name|docIndexResponse
operator|.
name|set
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|docIndexResponse
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Wait a bit to make sure that the reason why we did not get a response
comment|// is that cluster state processing is blocked and not just that it takes
comment|// time to process the indexing request
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|putMappingResponse
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docIndexResponse
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now make sure the indexing request finishes successfully
name|disruption
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertThat
argument_list|(
name|putMappingResponse
operator|.
name|get
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|PutMappingResponse
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PutMappingResponse
name|resp
init|=
operator|(
name|PutMappingResponse
operator|)
name|putMappingResponse
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resp
operator|.
name|isAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docIndexResponse
operator|.
name|get
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IndexResponse
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|IndexResponse
name|docResp
init|=
operator|(
name|IndexResponse
operator|)
name|docIndexResponse
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|docResp
operator|.
name|getShardInfo
argument_list|()
operator|.
name|getFailures
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|,
name|docResp
operator|.
name|getShardInfo
argument_list|()
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testDelayedMappingPropagationOnReplica
specifier|public
name|void
name|testDelayedMappingPropagationOnReplica
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This is essentially the same thing as testDelayedMappingPropagationOnPrimary
comment|// but for replicas
comment|// Here we want to test that everything goes well if the mappings that
comment|// are needed for a document are not available on the replica at the
comment|// time of indexing it
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nodeNames
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|"2"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|master
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|nodeNames
argument_list|,
name|hasItem
argument_list|(
name|master
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|otherNode
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodeNames
control|)
block|{
if|if
condition|(
name|node
operator|.
name|equals
argument_list|(
name|master
argument_list|)
operator|==
literal|false
condition|)
block|{
name|otherNode
operator|=
name|node
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|otherNode
argument_list|)
expr_stmt|;
comment|// Force allocation of the primary on the master node by first only allocating on the master
comment|// and then allowing all nodes so that the replica gets allocated on the other node
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.include._name"
argument_list|,
name|master
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.include._name"
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// Check routing tables
name|ClusterState
name|state
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|master
argument_list|,
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
init|=
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|shards
argument_list|,
name|hasSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardRouting
name|shard
range|:
name|shards
control|)
block|{
if|if
condition|(
name|shard
operator|.
name|primary
argument_list|()
condition|)
block|{
comment|// primary must be on the master
name|assertEquals
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|masterNodeId
argument_list|()
argument_list|,
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|shard
operator|.
name|active
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Block cluster state processing on the replica
name|BlockClusterStateProcessing
name|disruption
init|=
operator|new
name|BlockClusterStateProcessing
argument_list|(
name|otherNode
argument_list|,
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|setDisruptionScheme
argument_list|(
name|disruption
argument_list|)
expr_stmt|;
name|disruption
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|putMappingResponse
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"type=long"
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|ActionListener
argument_list|<
name|PutMappingResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|PutMappingResponse
name|response
parameter_list|)
block|{
name|putMappingResponse
operator|.
name|set
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|putMappingResponse
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Wait for mappings to be available on master
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|IndicesService
name|indicesService
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|,
name|master
argument_list|)
decl_stmt|;
specifier|final
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|indexService
argument_list|)
expr_stmt|;
specifier|final
name|MapperService
name|mapperService
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|mapperService
operator|.
name|documentMapper
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|mapper
operator|.
name|mappers
argument_list|()
operator|.
name|getMapper
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|docIndexResponse
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|42
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|ActionListener
argument_list|<
name|IndexResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|IndexResponse
name|response
parameter_list|)
block|{
name|docIndexResponse
operator|.
name|set
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|docIndexResponse
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Wait for document to be indexed on primary
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"_primary"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The mappings have not been propagated to the replica yet as a consequence the document count not be indexed
comment|// We wait on purpose to make sure that the document is not indexed because the shard operation is stalled
comment|// and not just because it takes time to replicate the indexing request to the replica
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|putMappingResponse
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docIndexResponse
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now make sure the indexing request finishes successfully
name|disruption
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertThat
argument_list|(
name|putMappingResponse
operator|.
name|get
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|PutMappingResponse
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PutMappingResponse
name|resp
init|=
operator|(
name|PutMappingResponse
operator|)
name|putMappingResponse
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resp
operator|.
name|isAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docIndexResponse
operator|.
name|get
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IndexResponse
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|IndexResponse
name|docResp
init|=
operator|(
name|IndexResponse
operator|)
name|docIndexResponse
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|docResp
operator|.
name|getShardInfo
argument_list|()
operator|.
name|getFailures
argument_list|()
argument_list|)
argument_list|,
literal|2
argument_list|,
name|docResp
operator|.
name|getShardInfo
argument_list|()
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
comment|// both shards should have succeeded
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

