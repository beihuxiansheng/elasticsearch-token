begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|TestShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|Version
operator|.
name|CURRENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ClusterServiceUtils
operator|.
name|createClusterService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
operator|.
name|randomVersion
import|;
end_import

begin_class
DECL|class|IndicesStoreTests
specifier|public
class|class
name|IndicesStoreTests
extends|extends
name|ESTestCase
block|{
DECL|field|NOT_STARTED_STATES
specifier|private
specifier|static
specifier|final
name|ShardRoutingState
index|[]
name|NOT_STARTED_STATES
decl_stmt|;
static|static
block|{
name|Set
argument_list|<
name|ShardRoutingState
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ShardRoutingState
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|remove
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|NOT_STARTED_STATES
operator|=
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ShardRoutingState
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
DECL|field|localNode
specifier|private
name|DiscoveryNode
name|localNode
decl_stmt|;
annotation|@
name|Before
DECL|method|createLocalNode
specifier|public
name|void
name|createLocalNode
parameter_list|()
block|{
name|localNode
operator|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"abc"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testShardCanBeDeletedNoShardRouting
specifier|public
name|void
name|testShardCanBeDeletedNoShardRouting
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexShardRoutingTable
operator|.
name|Builder
name|routingTable
init|=
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|IndicesStore
operator|.
name|shardCanBeDeleted
argument_list|(
name|localNode
operator|.
name|getId
argument_list|()
argument_list|,
name|routingTable
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testShardCanBeDeletedNoShardStarted
specifier|public
name|void
name|testShardCanBeDeletedNoShardStarted
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numShards
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|int
name|numReplicas
init|=
name|randomInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|IndexShardRoutingTable
operator|.
name|Builder
name|routingTable
init|=
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numShards
condition|;
name|i
operator|++
control|)
block|{
name|int
name|unStartedShard
init|=
name|randomInt
argument_list|(
name|numReplicas
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
name|numReplicas
condition|;
name|j
operator|++
control|)
block|{
name|ShardRoutingState
name|state
decl_stmt|;
if|if
condition|(
name|j
operator|==
name|unStartedShard
condition|)
block|{
name|state
operator|=
name|randomFrom
argument_list|(
name|NOT_STARTED_STATES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|randomFrom
argument_list|(
name|ShardRoutingState
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|UnassignedInfo
name|unassignedInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|ShardRoutingState
operator|.
name|UNASSIGNED
condition|)
block|{
name|unassignedInfo
operator|=
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|INDEX_CREATED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|String
name|relocatingNodeId
init|=
name|state
operator|==
name|ShardRoutingState
operator|.
name|RELOCATING
condition|?
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
else|:
literal|null
decl_stmt|;
name|routingTable
operator|.
name|addShard
argument_list|(
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
literal|"test"
argument_list|,
name|i
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|relocatingNodeId
argument_list|,
name|j
operator|==
literal|0
argument_list|,
name|state
argument_list|,
name|unassignedInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
name|IndicesStore
operator|.
name|shardCanBeDeleted
argument_list|(
name|localNode
operator|.
name|getId
argument_list|()
argument_list|,
name|routingTable
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testShardCanBeDeletedShardExistsLocally
specifier|public
name|void
name|testShardCanBeDeletedShardExistsLocally
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numShards
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|int
name|numReplicas
init|=
name|randomInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|IndexShardRoutingTable
operator|.
name|Builder
name|routingTable
init|=
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|localShardId
init|=
name|randomInt
argument_list|(
name|numShards
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numShards
condition|;
name|i
operator|++
control|)
block|{
name|int
name|localNodeIndex
init|=
name|randomInt
argument_list|(
name|numReplicas
argument_list|)
decl_stmt|;
name|boolean
name|primaryOnLocalNode
init|=
name|i
operator|==
name|localShardId
operator|&&
name|localNodeIndex
operator|==
name|numReplicas
decl_stmt|;
name|routingTable
operator|.
name|addShard
argument_list|(
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
literal|"test"
argument_list|,
name|i
argument_list|,
name|primaryOnLocalNode
condition|?
name|localNode
operator|.
name|getId
argument_list|()
else|:
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numReplicas
condition|;
name|j
operator|++
control|)
block|{
name|boolean
name|replicaOnLocalNode
init|=
name|i
operator|==
name|localShardId
operator|&&
name|localNodeIndex
operator|==
name|j
decl_stmt|;
name|routingTable
operator|.
name|addShard
argument_list|(
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
literal|"test"
argument_list|,
name|i
argument_list|,
name|replicaOnLocalNode
condition|?
name|localNode
operator|.
name|getId
argument_list|()
else|:
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|false
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Shard exists locally, can't delete shard
name|assertFalse
argument_list|(
name|IndicesStore
operator|.
name|shardCanBeDeleted
argument_list|(
name|localNode
operator|.
name|getId
argument_list|()
argument_list|,
name|routingTable
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

