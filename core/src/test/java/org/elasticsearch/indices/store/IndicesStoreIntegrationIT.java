begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|TestShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|MoveAllocationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|EnableAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|FilterAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoveryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalTestCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|BlockClusterStateProcessing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|SingleNodeDisruption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|sleep
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|)
DECL|class|IndicesStoreIntegrationIT
specifier|public
class|class
name|IndicesStoreIntegrationIT
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Override
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
comment|// simplify this and only use a single data path
return|return
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|super
operator|.
name|nodeSettings
argument_list|(
name|nodeOrdinal
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"path.data"
argument_list|,
literal|""
argument_list|)
comment|// by default this value is 1 sec in tests (30 sec in practice) but we adding disruption here
comment|// which is between 1 and 2 sec can cause each of the shard deletion requests to timeout.
comment|// to prevent this we are setting the timeout here to something highish ie. the default in practice
operator|.
name|put
argument_list|(
name|IndicesStore
operator|.
name|INDICES_STORE_DELETE_SHARD_TIMEOUT
argument_list|,
operator|new
name|TimeValue
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|pluginList
argument_list|(
name|MockTransportService
operator|.
name|TestPlugin
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|ensureClusterStateConsistency
specifier|protected
name|void
name|ensureClusterStateConsistency
parameter_list|()
throws|throws
name|IOException
block|{
comment|// testShardActiveElseWhere might change the state of a non-master node
comment|// so we cannot check state consistency of this cluster
block|}
DECL|method|testIndexCleanup
specifier|public
name|void
name|testIndexCleanup
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|masterNode
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.data"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|node_1
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.master"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|node_2
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.master"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating index [test] with one shard and on replica"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> making sure that shard and its replica are allocated on node_1 and node_2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|node_1
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|indexDirectory
argument_list|(
name|node_1
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|node_2
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|indexDirectory
argument_list|(
name|node_2
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting node server3"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|node_3
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.master"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> running cluster_health"
argument_list|)
expr_stmt|;
name|ClusterHealthResponse
name|clusterHealth
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|"4"
argument_list|)
operator|.
name|setWaitForRelocatingShards
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|node_1
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|indexDirectory
argument_list|(
name|node_1
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|node_2
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|indexDirectory
argument_list|(
name|node_2
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|node_3
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|indexDirectory
argument_list|(
name|node_3
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> move shard from node_1 to node_3, and wait for relocation to finish"
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// sometimes add cluster-state delay to trigger observers in IndicesStore.ShardActiveRequestHandler
name|SingleNodeDisruption
name|disruption
init|=
operator|new
name|BlockClusterStateProcessing
argument_list|(
name|node_3
argument_list|,
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|setDisruptionScheme
argument_list|(
name|disruption
argument_list|)
expr_stmt|;
name|MockTransportService
name|transportServiceNode3
init|=
operator|(
name|MockTransportService
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|,
name|node_3
argument_list|)
decl_stmt|;
name|CountDownLatch
name|beginRelocationLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|endRelocationLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|transportServiceNode3
operator|.
name|addTracer
argument_list|(
operator|new
name|ReclocationStartEndTracer
argument_list|(
name|logger
argument_list|,
name|beginRelocationLatch
argument_list|,
name|endRelocationLatch
argument_list|)
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MoveAllocationCommand
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|node_1
argument_list|,
name|node_3
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// wait for relocation to start
name|beginRelocationLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|disruption
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
comment|// wait for relocation to finish
name|endRelocationLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// wait a little so that cluster state observer is registered
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|disruption
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MoveAllocationCommand
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|node_1
argument_list|,
name|node_3
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|clusterHealth
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForRelocatingShards
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|waitForShardDeletion
argument_list|(
name|node_1
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|waitForIndexDeletion
argument_list|(
name|node_1
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|node_2
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|indexDirectory
argument_list|(
name|node_2
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|node_3
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|indexDirectory
argument_list|(
name|node_3
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* Test that shard is deleted in case ShardActiveRequest after relocation and next incoming cluster state is an index delete. */
DECL|method|testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted
specifier|public
name|void
name|testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|node_1
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating index [test] with one shard and on replica"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|node_1
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|indexDirectory
argument_list|(
name|node_1
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|node_2
init|=
name|internalCluster
argument_list|()
operator|.
name|startDataOnlyNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|"2"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|node_1
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|indexDirectory
argument_list|(
name|node_1
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|node_2
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|indexDirectory
argument_list|(
name|node_2
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// add a transport delegate that will prevent the shard active request to succeed the first time after relocation has finished.
comment|// node_1 will then wait for the next cluster state change before it tries a next attempt to delet the shard.
name|MockTransportService
name|transportServiceNode_1
init|=
operator|(
name|MockTransportService
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|,
name|node_1
argument_list|)
decl_stmt|;
name|String
name|node_2_id
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|DiscoveryService
operator|.
name|class
argument_list|,
name|node_2
argument_list|)
operator|.
name|localNode
argument_list|()
operator|.
name|id
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|node_2_disco
init|=
name|internalCluster
argument_list|()
operator|.
name|clusterService
argument_list|()
operator|.
name|state
argument_list|()
operator|.
name|getNodes
argument_list|()
operator|.
name|dataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|node_2_id
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|shardActiveRequestSent
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|transportServiceNode_1
operator|.
name|addDelegate
argument_list|(
name|node_2_disco
argument_list|,
operator|new
name|MockTransportService
operator|.
name|DelegateTransport
argument_list|(
name|transportServiceNode_1
operator|.
name|original
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|sendRequest
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|,
name|TransportRequest
name|request
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransportException
block|{
if|if
condition|(
name|action
operator|.
name|equals
argument_list|(
literal|"internal:index/shard/exists"
argument_list|)
operator|&&
name|shardActiveRequestSent
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|shardActiveRequestSent
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"prevent shard active request from being sent"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"DISCONNECT: simulated"
argument_list|)
throw|;
block|}
name|super
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|requestId
argument_list|,
name|action
argument_list|,
name|request
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> move shard from {} to {}, and wait for relocation to finish"
argument_list|,
name|node_1
argument_list|,
name|node_2
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MoveAllocationCommand
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|node_1
argument_list|,
name|node_2
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|shardActiveRequestSent
operator|.
name|await
argument_list|()
expr_stmt|;
name|ClusterHealthResponse
name|clusterHealth
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForRelocatingShards
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|logClusterState
argument_list|()
expr_stmt|;
comment|// delete the index. node_1 that still waits for the next cluster state update will then get the delete index next.
comment|// it must still delete the shard, even if it cannot find it anymore in indicesservice
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|waitForShardDeletion
argument_list|(
name|node_1
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|waitForIndexDeletion
argument_list|(
name|node_1
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|node_1
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|indexDirectory
argument_list|(
name|node_1
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|waitForShardDeletion
argument_list|(
name|node_2
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|waitForIndexDeletion
argument_list|(
name|node_2
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|node_2
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|indexDirectory
argument_list|(
name|node_2
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testShardsCleanup
specifier|public
name|void
name|testShardsCleanup
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|node_1
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
specifier|final
name|String
name|node_2
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating index [test] with one shard and on replica"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> making sure that shard and its replica are allocated on node_1 and node_2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|node_1
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|node_2
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting node server3"
argument_list|)
expr_stmt|;
name|String
name|node_3
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> running cluster_health"
argument_list|)
expr_stmt|;
name|ClusterHealthResponse
name|clusterHealth
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|"3"
argument_list|)
operator|.
name|setWaitForRelocatingShards
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> making sure that shard is not allocated on server3"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|waitForShardDeletion
argument_list|(
name|node_3
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|server2Shard
init|=
name|shardDirectory
argument_list|(
name|node_2
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> stopping node "
operator|+
name|node_2
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|InternalTestCluster
operator|.
name|nameFilter
argument_list|(
name|node_2
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> running cluster_health"
argument_list|)
expr_stmt|;
name|clusterHealth
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|"2"
argument_list|)
operator|.
name|setWaitForRelocatingShards
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> done cluster_health, status "
operator|+
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|server2Shard
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> making sure that shard and its replica exist on server1, server2 and server3"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|node_1
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|server2Shard
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|node_3
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting node node_4"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|node_4
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> running cluster_health"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> making sure that shard and its replica are allocated on server1 and server3 but not on server2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|node_1
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|node_3
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|waitForShardDeletion
argument_list|(
name|node_4
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|TestLogging
argument_list|(
literal|"cluster.service:TRACE"
argument_list|)
DECL|method|testShardActiveElsewhereDoesNotDeleteAnother
specifier|public
name|void
name|testShardActiveElsewhereDoesNotDeleteAnother
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalTestCluster
operator|.
name|Async
argument_list|<
name|String
argument_list|>
name|masterFuture
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodeAsync
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.master"
argument_list|,
literal|true
argument_list|,
literal|"node.data"
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|InternalTestCluster
operator|.
name|Async
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|nodesFutures
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
literal|4
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.master"
argument_list|,
literal|false
argument_list|,
literal|"node.data"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|masterNode
init|=
name|masterFuture
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|String
name|node1
init|=
name|nodesFutures
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|String
name|node2
init|=
name|nodesFutures
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|node3
init|=
name|nodesFutures
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// we will use this later on, handy to start now to make sure it has a different data folder that node 1,2&3
specifier|final
name|String
name|node4
init|=
name|nodesFutures
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|FilterAllocationDecider
operator|.
name|INDEX_ROUTING_EXCLUDE_GROUP
operator|+
literal|"_name"
argument_list|,
name|node4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForRelocatingShards
argument_list|(
literal|0
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|"5"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
comment|// disable allocation to control the situation more easily
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|EnableAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ENABLE
argument_list|,
literal|"none"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> shutting down two random nodes"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|InternalTestCluster
operator|.
name|nameFilter
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|,
name|node3
argument_list|)
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|InternalTestCluster
operator|.
name|nameFilter
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|,
name|node3
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> verifying index is red"
argument_list|)
expr_stmt|;
name|ClusterHealthResponse
name|health
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|"3"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|health
operator|.
name|getStatus
argument_list|()
operator|!=
name|ClusterHealthStatus
operator|.
name|RED
condition|)
block|{
name|logClusterState
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"cluster didn't become red, despite of shutting 2 of 3 nodes"
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"--> allowing index to be assigned to node [{}]"
argument_list|,
name|node4
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|FilterAllocationDecider
operator|.
name|INDEX_ROUTING_EXCLUDE_GROUP
operator|+
literal|"_name"
argument_list|,
literal|"NONE"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|EnableAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ENABLE
argument_list|,
literal|"all"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> waiting for shards to recover on [{}]"
argument_list|,
name|node4
argument_list|)
expr_stmt|;
comment|// we have to do this in two steps as we now do async shard fetching before assigning, so the change to the
comment|// allocation filtering may not have immediate effect
comment|// TODO: we should add an easier to do this. It's too much of a song and dance..
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|,
name|node4
argument_list|)
operator|.
name|hasIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// wait for 4 active shards - we should have lost one shard
name|assertFalse
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForActiveShards
argument_list|(
literal|4
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
comment|// disable allocation again to control concurrency a bit and allow shard active to kick in before allocation
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|EnableAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ENABLE
argument_list|,
literal|"none"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> starting the two old nodes back"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
literal|2
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.master"
argument_list|,
literal|false
argument_list|,
literal|"node.data"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|"5"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|EnableAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ENABLE
argument_list|,
literal|"all"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> waiting for the lost shard to be recovered"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
DECL|method|testShardActiveElseWhere
specifier|public
name|void
name|testShardActiveElseWhere
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|String
name|masterNode
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|nonMasterNode
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|masterNode
argument_list|)
condition|?
name|nodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
else|:
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|String
name|masterId
init|=
name|internalCluster
argument_list|()
operator|.
name|clusterService
argument_list|(
name|masterNode
argument_list|)
operator|.
name|localNode
argument_list|()
operator|.
name|id
argument_list|()
decl_stmt|;
specifier|final
name|String
name|nonMasterId
init|=
name|internalCluster
argument_list|()
operator|.
name|clusterService
argument_list|(
name|nonMasterNode
argument_list|)
operator|.
name|localNode
argument_list|()
operator|.
name|id
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numShards
init|=
name|scaledRandomIntBetween
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|numShards
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|waitNoPendingTasksOnAll
argument_list|()
expr_stmt|;
name|ClusterStateResponse
name|stateResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|RoutingNode
name|routingNode
init|=
name|stateResponse
operator|.
name|getState
argument_list|()
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|nonMasterId
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|node2Shards
init|=
operator|new
name|int
index|[
name|routingNode
operator|.
name|numberOfOwningShards
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|routingNode
control|)
block|{
name|node2Shards
index|[
name|i
index|]
operator|=
name|shardRouting
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Node [{}] has shards: {}"
argument_list|,
name|nonMasterNode
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|node2Shards
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|shardVersions
index|[]
init|=
operator|new
name|long
index|[
name|numShards
index|]
decl_stmt|;
specifier|final
name|int
name|shardIds
index|[]
init|=
operator|new
name|int
index|[
name|numShards
index|]
decl_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|stateResponse
operator|.
name|getState
argument_list|()
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|allShards
argument_list|(
literal|"test"
argument_list|)
control|)
block|{
name|shardVersions
index|[
name|i
index|]
operator|=
name|shardRouting
operator|.
name|version
argument_list|()
expr_stmt|;
name|shardIds
index|[
name|i
index|]
operator|=
name|shardRouting
operator|.
name|getId
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
comment|// disable relocations when we do this, to make sure the shards are not relocated from node2
comment|// due to rebalancing, and delete its content
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|EnableAllocationDecider
operator|.
name|CLUSTER_ROUTING_REBALANCE_ENABLE
argument_list|,
name|EnableAllocationDecider
operator|.
name|Rebalance
operator|.
name|NONE
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|,
name|nonMasterNode
argument_list|)
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"test"
argument_list|,
name|Priority
operator|.
name|IMMEDIATE
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexRoutingTable
operator|.
name|Builder
name|indexRoutingTableBuilder
init|=
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numShards
condition|;
name|i
operator|++
control|)
block|{
name|indexRoutingTableBuilder
operator|.
name|addIndexShard
argument_list|(
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
name|i
argument_list|)
argument_list|)
operator|.
name|addShard
argument_list|(
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
literal|"test"
argument_list|,
name|i
argument_list|,
name|masterId
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|shardVersions
index|[
name|shardIds
index|[
name|i
index|]
index|]
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|indexRoutingTableBuilder
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|runOnlyOnMaster
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{             }
block|}
argument_list|)
expr_stmt|;
name|waitNoPendingTasksOnAll
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Checking if shards aren't removed"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|shard
range|:
name|node2Shards
control|)
block|{
name|assertTrue
argument_list|(
name|waitForShardDeletion
argument_list|(
name|nonMasterNode
argument_list|,
literal|"test"
argument_list|,
name|shard
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|indexDirectory
specifier|private
name|Path
name|indexDirectory
parameter_list|(
name|String
name|server
parameter_list|,
name|String
name|index
parameter_list|)
block|{
name|NodeEnvironment
name|env
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|,
name|server
argument_list|)
decl_stmt|;
specifier|final
name|Path
index|[]
name|paths
init|=
name|env
operator|.
name|indexPaths
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|paths
operator|.
name|length
operator|==
literal|1
assert|;
return|return
name|paths
index|[
literal|0
index|]
return|;
block|}
DECL|method|shardDirectory
specifier|private
name|Path
name|shardDirectory
parameter_list|(
name|String
name|server
parameter_list|,
name|String
name|index
parameter_list|,
name|int
name|shard
parameter_list|)
block|{
name|NodeEnvironment
name|env
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|,
name|server
argument_list|)
decl_stmt|;
specifier|final
name|Path
index|[]
name|paths
init|=
name|env
operator|.
name|availableShardPaths
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
name|shard
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|paths
operator|.
name|length
operator|==
literal|1
assert|;
return|return
name|paths
index|[
literal|0
index|]
return|;
block|}
DECL|method|waitForShardDeletion
specifier|private
name|boolean
name|waitForShardDeletion
parameter_list|(
specifier|final
name|String
name|server
parameter_list|,
specifier|final
name|String
name|index
parameter_list|,
specifier|final
name|int
name|shard
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|awaitBusy
argument_list|(
parameter_list|()
lambda|->
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|server
argument_list|,
name|index
argument_list|,
name|shard
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Files
operator|.
name|exists
argument_list|(
name|shardDirectory
argument_list|(
name|server
argument_list|,
name|index
argument_list|,
name|shard
argument_list|)
argument_list|)
return|;
block|}
DECL|method|waitForIndexDeletion
specifier|private
name|boolean
name|waitForIndexDeletion
parameter_list|(
specifier|final
name|String
name|server
parameter_list|,
specifier|final
name|String
name|index
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|awaitBusy
argument_list|(
parameter_list|()
lambda|->
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|indexDirectory
argument_list|(
name|server
argument_list|,
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Files
operator|.
name|exists
argument_list|(
name|indexDirectory
argument_list|(
name|server
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This Tracer can be used to signal start and end of a recovery.      * This is used to test the following:      * Whenever a node deletes a shard because it was relocated somewhere else, it first      * checks if enough other copies are started somewhere else. The node sends a ShardActiveRequest      * to the other nodes that should have a copy according to cluster state.      * The nodes that receive this request check if the shard is in state STARTED in which case they      * respond with "true". If they have the shard in POST_RECOVERY they register a cluster state      * observer that checks at each update if the shard has moved to STARTED.      * To test that this mechanism actually works, this can be triggered by blocking the cluster      * state processing when a recover starts and only unblocking it shortly after the node receives      * the ShardActiveRequest.      */
DECL|class|ReclocationStartEndTracer
specifier|public
specifier|static
class|class
name|ReclocationStartEndTracer
extends|extends
name|MockTransportService
operator|.
name|Tracer
block|{
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|field|beginRelocationLatch
specifier|private
specifier|final
name|CountDownLatch
name|beginRelocationLatch
decl_stmt|;
DECL|field|receivedShardExistsRequestLatch
specifier|private
specifier|final
name|CountDownLatch
name|receivedShardExistsRequestLatch
decl_stmt|;
DECL|method|ReclocationStartEndTracer
specifier|public
name|ReclocationStartEndTracer
parameter_list|(
name|ESLogger
name|logger
parameter_list|,
name|CountDownLatch
name|beginRelocationLatch
parameter_list|,
name|CountDownLatch
name|receivedShardExistsRequestLatch
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|beginRelocationLatch
operator|=
name|beginRelocationLatch
expr_stmt|;
name|this
operator|.
name|receivedShardExistsRequestLatch
operator|=
name|receivedShardExistsRequestLatch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|receivedRequest
specifier|public
name|void
name|receivedRequest
parameter_list|(
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|)
block|{
if|if
condition|(
name|action
operator|.
name|equals
argument_list|(
name|IndicesStore
operator|.
name|ACTION_SHARD_EXISTS
argument_list|)
condition|)
block|{
name|receivedShardExistsRequestLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"received: {}, relocation done"
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|requestSent
specifier|public
name|void
name|requestSent
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|)
block|{
if|if
condition|(
name|action
operator|.
name|equals
argument_list|(
name|RecoverySource
operator|.
name|Actions
operator|.
name|START_RECOVERY
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"sent: {}, relocation starts"
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|beginRelocationLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

