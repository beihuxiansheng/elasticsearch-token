begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ShardSearchFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ElasticsearchIntegrationTest
operator|.
name|Scope
operator|.
name|SUITE
argument_list|,
name|numDataNodes
operator|=
literal|2
argument_list|)
DECL|class|RejectionActionIT
specifier|public
class|class
name|RejectionActionIT
extends|extends
name|ElasticsearchIntegrationTest
block|{
annotation|@
name|Override
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|super
operator|.
name|nodeSettings
argument_list|(
name|nodeOrdinal
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"threadpool.search.size"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"threadpool.search.queue_size"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"threadpool.index.size"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"threadpool.index.queue_size"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"threadpool.get.size"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"threadpool.get.queue_size"
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|simulateSearchRejectionLoad
specifier|public
name|void
name|simulateSearchRejectionLoad
parameter_list|()
throws|throws
name|Throwable
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|int
name|numberOfAsyncOps
init|=
name|randomIntBetween
argument_list|(
literal|200
argument_list|,
literal|700
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numberOfAsyncOps
argument_list|)
decl_stmt|;
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Object
argument_list|>
name|responses
init|=
name|Lists
operator|.
name|newCopyOnWriteArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfAsyncOps
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|ActionListener
argument_list|<
name|SearchResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|SearchResponse
name|searchResponse
parameter_list|)
block|{
name|responses
operator|.
name|add
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|responses
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|responses
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numberOfAsyncOps
argument_list|)
argument_list|)
expr_stmt|;
comment|// validate all responses
for|for
control|(
name|Object
name|response
range|:
name|responses
control|)
block|{
if|if
condition|(
name|response
operator|instanceof
name|SearchResponse
condition|)
block|{
name|SearchResponse
name|searchResponse
init|=
operator|(
name|SearchResponse
operator|)
name|response
decl_stmt|;
for|for
control|(
name|ShardSearchFailure
name|failure
range|:
name|searchResponse
operator|.
name|getShardFailures
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"got unexpected reason..."
operator|+
name|failure
operator|.
name|reason
argument_list|()
argument_list|,
name|failure
operator|.
name|reason
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|.
name|contains
argument_list|(
literal|"rejected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Throwable
name|t
init|=
operator|(
name|Throwable
operator|)
name|response
decl_stmt|;
name|Throwable
name|unwrap
init|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|unwrap
operator|instanceof
name|SearchPhaseExecutionException
condition|)
block|{
name|SearchPhaseExecutionException
name|e
init|=
operator|(
name|SearchPhaseExecutionException
operator|)
name|unwrap
decl_stmt|;
for|for
control|(
name|ShardSearchFailure
name|failure
range|:
name|e
operator|.
name|shardFailures
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"got unexpected reason..."
operator|+
name|failure
operator|.
name|reason
argument_list|()
argument_list|,
name|failure
operator|.
name|reason
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|.
name|contains
argument_list|(
literal|"rejected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|unwrap
operator|instanceof
name|EsRejectedExecutionException
operator|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unexpected failure"
argument_list|,
operator|(
name|Throwable
operator|)
name|response
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

