begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AtomicArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|Scroll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalScrollSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_class
DECL|class|SearchScrollAsyncActionTests
specifier|public
class|class
name|SearchScrollAsyncActionTests
extends|extends
name|ESTestCase
block|{
DECL|method|testSendRequestsToNodes
specifier|public
name|void
name|testSendRequestsToNodes
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ParsedScrollId
name|scrollId
init|=
name|getParsedScrollId
argument_list|(
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node1"
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node2"
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node3"
argument_list|,
literal|17
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node1"
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node3"
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|DiscoveryNodes
name|discoveryNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"node1"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"node2"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"node3"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AtomicArray
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
name|results
init|=
operator|new
name|AtomicArray
argument_list|<>
argument_list|(
name|scrollId
operator|.
name|getContext
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
name|SearchScrollRequest
name|request
init|=
operator|new
name|SearchScrollRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|scroll
argument_list|(
operator|new
name|Scroll
argument_list|(
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AtomicInteger
name|movedCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SearchScrollAsyncAction
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
name|action
init|=
operator|new
name|SearchScrollAsyncAction
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
argument_list|(
name|scrollId
argument_list|,
name|logger
argument_list|,
name|discoveryNodes
argument_list|,
name|dummyListener
argument_list|()
argument_list|,
literal|null
argument_list|,
name|request
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|executeInitialPhase
parameter_list|(
name|Transport
operator|.
name|Connection
name|connection
parameter_list|,
name|InternalScrollSearchRequest
name|internalRequest
parameter_list|,
name|SearchActionListener
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
name|searchActionListener
parameter_list|)
block|{
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
name|testSearchPhaseResult
init|=
operator|new
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|(
name|internalRequest
operator|.
name|id
argument_list|()
argument_list|,
name|connection
operator|.
name|getNode
argument_list|()
argument_list|)
decl_stmt|;
name|testSearchPhaseResult
operator|.
name|setSearchShardTarget
argument_list|(
operator|new
name|SearchShardTarget
argument_list|(
name|connection
operator|.
name|getNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchActionListener
operator|.
name|onResponse
argument_list|(
name|testSearchPhaseResult
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Transport
operator|.
name|Connection
name|getConnection
parameter_list|(
name|String
name|clusterAlias
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|)
block|{
return|return
operator|new
name|SearchAsyncActionTests
operator|.
name|MockConnection
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|SearchPhase
name|moveToNextPhase
parameter_list|(
name|BiFunction
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|DiscoveryNode
argument_list|>
name|clusterNodeLookup
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|movedCounter
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|SearchPhase
argument_list|(
literal|"test"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onFirstPhaseResult
parameter_list|(
name|int
name|shardId
parameter_list|,
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
name|result
parameter_list|)
block|{
name|results
operator|.
name|setOnce
argument_list|(
name|shardId
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|action
operator|.
name|run
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|ShardSearchFailure
index|[]
name|shardSearchFailures
init|=
name|action
operator|.
name|buildShardFailures
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shardSearchFailures
operator|.
name|length
argument_list|)
expr_stmt|;
name|ScrollIdForNode
index|[]
name|context
init|=
name|scrollId
operator|.
name|getContext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
index|[
name|i
index|]
operator|.
name|getScrollId
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
index|[
name|i
index|]
operator|.
name|getNode
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|node
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFailNextPhase
specifier|public
name|void
name|testFailNextPhase
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ParsedScrollId
name|scrollId
init|=
name|getParsedScrollId
argument_list|(
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node1"
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node2"
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node3"
argument_list|,
literal|17
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node1"
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node3"
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|DiscoveryNodes
name|discoveryNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"node1"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"node2"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"node3"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AtomicArray
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
name|results
init|=
operator|new
name|AtomicArray
argument_list|<>
argument_list|(
name|scrollId
operator|.
name|getContext
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
name|SearchScrollRequest
name|request
init|=
operator|new
name|SearchScrollRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|scroll
argument_list|(
operator|new
name|Scroll
argument_list|(
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AtomicInteger
name|movedCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ActionListener
name|listener
init|=
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
try|try
block|{
name|fail
argument_list|(
literal|"got a result"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|SearchPhaseExecutionException
argument_list|)
expr_stmt|;
name|SearchPhaseExecutionException
name|ex
init|=
operator|(
name|SearchPhaseExecutionException
operator|)
name|e
decl_stmt|;
name|assertEquals
argument_list|(
literal|"BOOM"
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TEST_PHASE"
argument_list|,
name|ex
operator|.
name|getPhaseName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Phase failed"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|SearchScrollAsyncAction
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
name|action
init|=
operator|new
name|SearchScrollAsyncAction
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
argument_list|(
name|scrollId
argument_list|,
name|logger
argument_list|,
name|discoveryNodes
argument_list|,
name|listener
argument_list|,
literal|null
argument_list|,
name|request
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|executeInitialPhase
parameter_list|(
name|Transport
operator|.
name|Connection
name|connection
parameter_list|,
name|InternalScrollSearchRequest
name|internalRequest
parameter_list|,
name|SearchActionListener
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
name|searchActionListener
parameter_list|)
block|{
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
name|testSearchPhaseResult
init|=
operator|new
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|(
name|internalRequest
operator|.
name|id
argument_list|()
argument_list|,
name|connection
operator|.
name|getNode
argument_list|()
argument_list|)
decl_stmt|;
name|testSearchPhaseResult
operator|.
name|setSearchShardTarget
argument_list|(
operator|new
name|SearchShardTarget
argument_list|(
name|connection
operator|.
name|getNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchActionListener
operator|.
name|onResponse
argument_list|(
name|testSearchPhaseResult
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Transport
operator|.
name|Connection
name|getConnection
parameter_list|(
name|String
name|clusterAlias
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|)
block|{
return|return
operator|new
name|SearchAsyncActionTests
operator|.
name|MockConnection
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|SearchPhase
name|moveToNextPhase
parameter_list|(
name|BiFunction
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|DiscoveryNode
argument_list|>
name|clusterNodeLookup
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|movedCounter
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|SearchPhase
argument_list|(
literal|"TEST_PHASE"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"BOOM"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onFirstPhaseResult
parameter_list|(
name|int
name|shardId
parameter_list|,
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
name|result
parameter_list|)
block|{
name|results
operator|.
name|setOnce
argument_list|(
name|shardId
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|action
operator|.
name|run
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|ShardSearchFailure
index|[]
name|shardSearchFailures
init|=
name|action
operator|.
name|buildShardFailures
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shardSearchFailures
operator|.
name|length
argument_list|)
expr_stmt|;
name|ScrollIdForNode
index|[]
name|context
init|=
name|scrollId
operator|.
name|getContext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
index|[
name|i
index|]
operator|.
name|getScrollId
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
index|[
name|i
index|]
operator|.
name|getNode
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|node
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNodeNotAvailable
specifier|public
name|void
name|testNodeNotAvailable
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ParsedScrollId
name|scrollId
init|=
name|getParsedScrollId
argument_list|(
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node1"
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node2"
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node3"
argument_list|,
literal|17
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node1"
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node3"
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// node2 is not available
name|DiscoveryNodes
name|discoveryNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"node1"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"node3"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AtomicArray
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
name|results
init|=
operator|new
name|AtomicArray
argument_list|<>
argument_list|(
name|scrollId
operator|.
name|getContext
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
name|SearchScrollRequest
name|request
init|=
operator|new
name|SearchScrollRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|scroll
argument_list|(
operator|new
name|Scroll
argument_list|(
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AtomicInteger
name|movedCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SearchScrollAsyncAction
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
name|action
init|=
operator|new
name|SearchScrollAsyncAction
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
argument_list|(
name|scrollId
argument_list|,
name|logger
argument_list|,
name|discoveryNodes
argument_list|,
name|dummyListener
argument_list|()
argument_list|,
literal|null
argument_list|,
name|request
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|executeInitialPhase
parameter_list|(
name|Transport
operator|.
name|Connection
name|connection
parameter_list|,
name|InternalScrollSearchRequest
name|internalRequest
parameter_list|,
name|SearchActionListener
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
name|searchActionListener
parameter_list|)
block|{
try|try
block|{
name|assertNotEquals
argument_list|(
literal|"node2 is not available"
argument_list|,
literal|"node2"
argument_list|,
name|connection
operator|.
name|getNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
name|testSearchPhaseResult
init|=
operator|new
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|(
name|internalRequest
operator|.
name|id
argument_list|()
argument_list|,
name|connection
operator|.
name|getNode
argument_list|()
argument_list|)
decl_stmt|;
name|testSearchPhaseResult
operator|.
name|setSearchShardTarget
argument_list|(
operator|new
name|SearchShardTarget
argument_list|(
name|connection
operator|.
name|getNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchActionListener
operator|.
name|onResponse
argument_list|(
name|testSearchPhaseResult
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Transport
operator|.
name|Connection
name|getConnection
parameter_list|(
name|String
name|clusterAlias
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|)
block|{
return|return
operator|new
name|SearchAsyncActionTests
operator|.
name|MockConnection
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|SearchPhase
name|moveToNextPhase
parameter_list|(
name|BiFunction
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|DiscoveryNode
argument_list|>
name|clusterNodeLookup
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|movedCounter
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|SearchPhase
argument_list|(
literal|"test"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onFirstPhaseResult
parameter_list|(
name|int
name|shardId
parameter_list|,
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
name|result
parameter_list|)
block|{
name|results
operator|.
name|setOnce
argument_list|(
name|shardId
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|action
operator|.
name|run
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|ShardSearchFailure
index|[]
name|shardSearchFailures
init|=
name|action
operator|.
name|buildShardFailures
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|shardSearchFailures
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IllegalStateException[node [node2] is not available]"
argument_list|,
name|shardSearchFailures
index|[
literal|0
index|]
operator|.
name|reason
argument_list|()
argument_list|)
expr_stmt|;
name|ScrollIdForNode
index|[]
name|context
init|=
name|scrollId
operator|.
name|getContext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|context
index|[
name|i
index|]
operator|.
name|getNode
argument_list|()
operator|.
name|equals
argument_list|(
literal|"node2"
argument_list|)
condition|)
block|{
name|assertNull
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
index|[
name|i
index|]
operator|.
name|getScrollId
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
index|[
name|i
index|]
operator|.
name|getNode
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|node
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testShardFailures
specifier|public
name|void
name|testShardFailures
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ParsedScrollId
name|scrollId
init|=
name|getParsedScrollId
argument_list|(
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node1"
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node2"
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node3"
argument_list|,
literal|17
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node1"
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node3"
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|DiscoveryNodes
name|discoveryNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"node1"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"node2"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"node3"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AtomicArray
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
name|results
init|=
operator|new
name|AtomicArray
argument_list|<>
argument_list|(
name|scrollId
operator|.
name|getContext
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
name|SearchScrollRequest
name|request
init|=
operator|new
name|SearchScrollRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|scroll
argument_list|(
operator|new
name|Scroll
argument_list|(
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AtomicInteger
name|movedCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SearchScrollAsyncAction
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
name|action
init|=
operator|new
name|SearchScrollAsyncAction
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
argument_list|(
name|scrollId
argument_list|,
name|logger
argument_list|,
name|discoveryNodes
argument_list|,
name|dummyListener
argument_list|()
argument_list|,
literal|null
argument_list|,
name|request
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|executeInitialPhase
parameter_list|(
name|Transport
operator|.
name|Connection
name|connection
parameter_list|,
name|InternalScrollSearchRequest
name|internalRequest
parameter_list|,
name|SearchActionListener
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
name|searchActionListener
parameter_list|)
block|{
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|internalRequest
operator|.
name|id
argument_list|()
operator|==
literal|17
condition|)
block|{
name|searchActionListener
operator|.
name|onFailure
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"BOOM on shard"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
name|testSearchPhaseResult
init|=
operator|new
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|(
name|internalRequest
operator|.
name|id
argument_list|()
argument_list|,
name|connection
operator|.
name|getNode
argument_list|()
argument_list|)
decl_stmt|;
name|testSearchPhaseResult
operator|.
name|setSearchShardTarget
argument_list|(
operator|new
name|SearchShardTarget
argument_list|(
name|connection
operator|.
name|getNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchActionListener
operator|.
name|onResponse
argument_list|(
name|testSearchPhaseResult
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Transport
operator|.
name|Connection
name|getConnection
parameter_list|(
name|String
name|clusterAlias
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|)
block|{
return|return
operator|new
name|SearchAsyncActionTests
operator|.
name|MockConnection
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|SearchPhase
name|moveToNextPhase
parameter_list|(
name|BiFunction
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|DiscoveryNode
argument_list|>
name|clusterNodeLookup
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|movedCounter
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|SearchPhase
argument_list|(
literal|"test"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onFirstPhaseResult
parameter_list|(
name|int
name|shardId
parameter_list|,
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
name|result
parameter_list|)
block|{
name|results
operator|.
name|setOnce
argument_list|(
name|shardId
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|action
operator|.
name|run
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|ShardSearchFailure
index|[]
name|shardSearchFailures
init|=
name|action
operator|.
name|buildShardFailures
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|shardSearchFailures
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IllegalArgumentException[BOOM on shard]"
argument_list|,
name|shardSearchFailures
index|[
literal|0
index|]
operator|.
name|reason
argument_list|()
argument_list|)
expr_stmt|;
name|ScrollIdForNode
index|[]
name|context
init|=
name|scrollId
operator|.
name|getContext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|context
index|[
name|i
index|]
operator|.
name|getScrollId
argument_list|()
operator|==
literal|17
condition|)
block|{
name|assertNull
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
index|[
name|i
index|]
operator|.
name|getScrollId
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
index|[
name|i
index|]
operator|.
name|getNode
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|node
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testAllShardsFailed
specifier|public
name|void
name|testAllShardsFailed
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ParsedScrollId
name|scrollId
init|=
name|getParsedScrollId
argument_list|(
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node1"
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node2"
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node3"
argument_list|,
literal|17
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node1"
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|ScrollIdForNode
argument_list|(
literal|null
argument_list|,
literal|"node3"
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|DiscoveryNodes
name|discoveryNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"node1"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"node2"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"node3"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AtomicArray
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
name|results
init|=
operator|new
name|AtomicArray
argument_list|<>
argument_list|(
name|scrollId
operator|.
name|getContext
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
name|SearchScrollRequest
name|request
init|=
operator|new
name|SearchScrollRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|scroll
argument_list|(
operator|new
name|Scroll
argument_list|(
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ActionListener
name|listener
init|=
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
try|try
block|{
name|fail
argument_list|(
literal|"got a result"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|SearchPhaseExecutionException
argument_list|)
expr_stmt|;
name|SearchPhaseExecutionException
name|ex
init|=
operator|(
name|SearchPhaseExecutionException
operator|)
name|e
decl_stmt|;
name|assertEquals
argument_list|(
literal|"BOOM on shard"
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"query"
argument_list|,
name|ex
operator|.
name|getPhaseName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"all shards failed"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|SearchScrollAsyncAction
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
name|action
init|=
operator|new
name|SearchScrollAsyncAction
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
argument_list|(
name|scrollId
argument_list|,
name|logger
argument_list|,
name|discoveryNodes
argument_list|,
name|listener
argument_list|,
literal|null
argument_list|,
name|request
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|executeInitialPhase
parameter_list|(
name|Transport
operator|.
name|Connection
name|connection
parameter_list|,
name|InternalScrollSearchRequest
name|internalRequest
parameter_list|,
name|SearchActionListener
argument_list|<
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
argument_list|>
name|searchActionListener
parameter_list|)
block|{
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
name|searchActionListener
operator|.
name|onFailure
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"BOOM on shard"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Transport
operator|.
name|Connection
name|getConnection
parameter_list|(
name|String
name|clusterAlias
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|)
block|{
return|return
operator|new
name|SearchAsyncActionTests
operator|.
name|MockConnection
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|SearchPhase
name|moveToNextPhase
parameter_list|(
name|BiFunction
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|DiscoveryNode
argument_list|>
name|clusterNodeLookup
parameter_list|)
block|{
name|fail
argument_list|(
literal|"don't move all shards failed"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onFirstPhaseResult
parameter_list|(
name|int
name|shardId
parameter_list|,
name|SearchAsyncActionTests
operator|.
name|TestSearchPhaseResult
name|result
parameter_list|)
block|{
name|results
operator|.
name|setOnce
argument_list|(
name|shardId
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|action
operator|.
name|run
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|ScrollIdForNode
index|[]
name|context
init|=
name|scrollId
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|ShardSearchFailure
index|[]
name|shardSearchFailures
init|=
name|action
operator|.
name|buildShardFailures
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|length
argument_list|,
name|shardSearchFailures
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IllegalArgumentException[BOOM on shard]"
argument_list|,
name|shardSearchFailures
index|[
literal|0
index|]
operator|.
name|reason
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertNull
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getParsedScrollId
specifier|private
specifier|static
name|ParsedScrollId
name|getParsedScrollId
parameter_list|(
name|ScrollIdForNode
modifier|...
name|idsForNodes
parameter_list|)
block|{
name|List
argument_list|<
name|ScrollIdForNode
argument_list|>
name|scrollIdForNodes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|idsForNodes
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|scrollIdForNodes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|ParsedScrollId
argument_list|(
literal|""
argument_list|,
literal|"test"
argument_list|,
name|scrollIdForNodes
operator|.
name|toArray
argument_list|(
operator|new
name|ScrollIdForNode
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|dummyListener
specifier|private
name|ActionListener
argument_list|<
name|SearchResponse
argument_list|>
name|dummyListener
parameter_list|()
block|{
return|return
operator|new
name|ActionListener
argument_list|<
name|SearchResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|SearchResponse
name|response
parameter_list|)
block|{
name|fail
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

