begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AtomicArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchPhaseResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|dfs
operator|.
name|DfsSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_class
DECL|class|CountedCollectorTests
specifier|public
class|class
name|CountedCollectorTests
extends|extends
name|ESTestCase
block|{
DECL|method|testCollect
specifier|public
name|void
name|testCollect
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|AtomicArray
argument_list|<
name|SearchPhaseResult
argument_list|>
name|results
init|=
operator|new
name|AtomicArray
argument_list|<>
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|state
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numResultsExpected
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|MockSearchPhaseContext
name|context
init|=
operator|new
name|MockSearchPhaseContext
argument_list|(
name|results
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|maybeFork
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|Executor
name|executor
init|=
parameter_list|(
name|runnable
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
operator|&&
name|maybeFork
condition|)
block|{
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|CountedCollector
argument_list|<
name|SearchPhaseResult
argument_list|>
name|collector
init|=
operator|new
name|CountedCollector
argument_list|<>
argument_list|(
name|results
argument_list|,
name|numResultsExpected
argument_list|,
name|latch
operator|::
name|countDown
argument_list|,
name|context
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numResultsExpected
condition|;
name|i
operator|++
control|)
block|{
name|int
name|shardID
init|=
name|i
decl_stmt|;
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|state
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|collector
operator|.
name|countDown
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|state
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|collector
operator|.
name|onResult
argument_list|(
name|shardID
argument_list|,
operator|new
name|DfsSearchResult
argument_list|(
name|shardID
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|,
name|shardID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|state
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|collector
operator|.
name|onFailure
argument_list|(
name|shardID
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|,
name|shardID
argument_list|)
argument_list|,
operator|new
name|RuntimeException
argument_list|(
literal|"boom"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"unknown state"
argument_list|)
expr_stmt|;
block|}
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numResultsExpected
argument_list|,
name|state
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numResultsExpected
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|state
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|assertNull
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|assertNotNull
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
specifier|final
name|int
name|shardId
init|=
name|i
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|failures
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|f
lambda|->
name|f
operator|.
name|shardId
argument_list|()
operator|==
name|shardId
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"unknown state"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|numResultsExpected
init|;
name|i
operator|<
name|results
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertNull
argument_list|(
literal|"index: "
operator|+
name|i
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

