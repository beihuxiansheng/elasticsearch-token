begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AtomicArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSearchResultProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchHits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResultProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|Suggest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|CompletionSuggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_class
DECL|class|SearchPhaseControllerTests
specifier|public
class|class
name|SearchPhaseControllerTests
extends|extends
name|ESTestCase
block|{
DECL|field|searchPhaseController
specifier|private
name|SearchPhaseController
name|searchPhaseController
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|searchPhaseController
operator|=
operator|new
name|SearchPhaseController
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testSort
specifier|public
name|void
name|testSort
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|CompletionSuggestion
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|CompletionSuggestion
argument_list|(
name|randomAsciiOfLength
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|nShards
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|int
name|queryResultSize
init|=
name|randomBoolean
argument_list|()
condition|?
literal|0
else|:
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|nShards
operator|*
literal|2
argument_list|)
decl_stmt|;
name|AtomicArray
argument_list|<
name|QuerySearchResultProvider
argument_list|>
name|results
init|=
name|generateQueryResults
argument_list|(
name|nShards
argument_list|,
name|suggestions
argument_list|,
name|queryResultSize
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|sortedDocs
init|=
name|searchPhaseController
operator|.
name|sortDocs
argument_list|(
literal|true
argument_list|,
name|results
argument_list|)
decl_stmt|;
name|int
name|accumulatedLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|queryResultSize
argument_list|,
name|getTotalQueryHits
argument_list|(
name|results
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|?
argument_list|>
name|suggestion
range|:
name|reducedSuggest
argument_list|(
name|results
argument_list|)
control|)
block|{
name|int
name|suggestionSize
init|=
name|suggestion
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOptions
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|accumulatedLength
operator|+=
name|suggestionSize
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|sortedDocs
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|accumulatedLength
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMerge
specifier|public
name|void
name|testMerge
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CompletionSuggestion
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|CompletionSuggestion
argument_list|(
name|randomAsciiOfLength
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|nShards
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|int
name|queryResultSize
init|=
name|randomBoolean
argument_list|()
condition|?
literal|0
else|:
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|nShards
operator|*
literal|2
argument_list|)
decl_stmt|;
name|AtomicArray
argument_list|<
name|QuerySearchResultProvider
argument_list|>
name|queryResults
init|=
name|generateQueryResults
argument_list|(
name|nShards
argument_list|,
name|suggestions
argument_list|,
name|queryResultSize
argument_list|)
decl_stmt|;
comment|// calculate offsets and score doc array
name|List
argument_list|<
name|ScoreDoc
argument_list|>
name|mergedScoreDocs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ScoreDoc
index|[]
name|mergedSearchDocs
init|=
name|getTopShardDocs
argument_list|(
name|queryResults
argument_list|)
decl_stmt|;
name|mergedScoreDocs
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|mergedSearchDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Suggest
name|mergedSuggest
init|=
name|reducedSuggest
argument_list|(
name|queryResults
argument_list|)
decl_stmt|;
for|for
control|(
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|?
argument_list|>
name|suggestion
range|:
name|mergedSuggest
control|)
block|{
if|if
condition|(
name|suggestion
operator|instanceof
name|CompletionSuggestion
condition|)
block|{
name|CompletionSuggestion
name|completionSuggestion
init|=
operator|(
operator|(
name|CompletionSuggestion
operator|)
name|suggestion
operator|)
decl_stmt|;
name|mergedScoreDocs
operator|.
name|addAll
argument_list|(
name|completionSuggestion
operator|.
name|getOptions
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
operator|::
name|getDoc
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ScoreDoc
index|[]
name|sortedDocs
init|=
name|mergedScoreDocs
operator|.
name|toArray
argument_list|(
operator|new
name|ScoreDoc
index|[
name|mergedScoreDocs
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|InternalSearchResponse
name|mergedResponse
init|=
name|searchPhaseController
operator|.
name|merge
argument_list|(
literal|true
argument_list|,
name|sortedDocs
argument_list|,
name|queryResults
argument_list|,
name|generateFetchResults
argument_list|(
name|nShards
argument_list|,
name|mergedSearchDocs
argument_list|,
name|mergedSuggest
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|mergedResponse
operator|.
name|hits
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|mergedSearchDocs
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|Suggest
name|suggestResult
init|=
name|mergedResponse
operator|.
name|suggest
argument_list|()
decl_stmt|;
for|for
control|(
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|?
argument_list|>
name|suggestion
range|:
name|mergedSuggest
control|)
block|{
name|assertThat
argument_list|(
name|suggestion
argument_list|,
name|instanceOf
argument_list|(
name|CompletionSuggestion
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestion
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOptions
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|CompletionSuggestion
name|suggestionResult
init|=
name|suggestResult
operator|.
name|getSuggestion
argument_list|(
name|suggestion
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|suggestionResult
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|>
name|options
init|=
name|suggestionResult
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|options
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|suggestion
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOptions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
name|option
range|:
name|options
control|)
block|{
name|assertNotNull
argument_list|(
name|option
operator|.
name|getHit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|generateQueryResults
specifier|private
name|AtomicArray
argument_list|<
name|QuerySearchResultProvider
argument_list|>
name|generateQueryResults
parameter_list|(
name|int
name|nShards
parameter_list|,
name|List
argument_list|<
name|CompletionSuggestion
argument_list|>
name|suggestions
parameter_list|,
name|int
name|searchHitsSize
parameter_list|)
block|{
name|AtomicArray
argument_list|<
name|QuerySearchResultProvider
argument_list|>
name|queryResults
init|=
operator|new
name|AtomicArray
argument_list|<>
argument_list|(
name|nShards
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|shardIndex
init|=
literal|0
init|;
name|shardIndex
operator|<
name|nShards
condition|;
name|shardIndex
operator|++
control|)
block|{
name|QuerySearchResult
name|querySearchResult
init|=
operator|new
name|QuerySearchResult
argument_list|(
name|shardIndex
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|""
argument_list|,
operator|new
name|Index
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|,
name|shardIndex
argument_list|)
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
operator|new
name|TopDocs
argument_list|(
literal|0
argument_list|,
operator|new
name|ScoreDoc
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|searchHitsSize
operator|>
literal|0
condition|)
block|{
name|int
name|nDocs
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|searchHitsSize
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
operator|new
name|ScoreDoc
index|[
name|nDocs
index|]
decl_stmt|;
name|float
name|maxScore
init|=
literal|0F
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
block|{
name|float
name|score
init|=
name|Math
operator|.
name|abs
argument_list|(
name|randomFloat
argument_list|()
argument_list|)
decl_stmt|;
name|scoreDocs
index|[
name|i
index|]
operator|=
operator|new
name|ScoreDoc
argument_list|(
name|i
argument_list|,
name|score
argument_list|)
expr_stmt|;
if|if
condition|(
name|score
operator|>
name|maxScore
condition|)
block|{
name|maxScore
operator|=
name|score
expr_stmt|;
block|}
block|}
name|topDocs
operator|=
operator|new
name|TopDocs
argument_list|(
name|scoreDocs
operator|.
name|length
argument_list|,
name|scoreDocs
argument_list|,
name|maxScore
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|CompletionSuggestion
argument_list|>
name|shardSuggestion
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CompletionSuggestion
name|completionSuggestion
range|:
name|suggestions
control|)
block|{
name|CompletionSuggestion
name|suggestion
init|=
operator|new
name|CompletionSuggestion
argument_list|(
name|completionSuggestion
operator|.
name|getName
argument_list|()
argument_list|,
name|completionSuggestion
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CompletionSuggestion
operator|.
name|Entry
name|completionEntry
init|=
operator|new
name|CompletionSuggestion
operator|.
name|Entry
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|suggestion
operator|.
name|addTerm
argument_list|(
name|completionEntry
argument_list|)
expr_stmt|;
name|int
name|optionSize
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|suggestion
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|maxScore
init|=
name|randomIntBetween
argument_list|(
name|suggestion
operator|.
name|getSize
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|Float
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|optionSize
condition|;
name|i
operator|++
control|)
block|{
name|completionEntry
operator|.
name|addOption
argument_list|(
operator|new
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|(
name|i
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
name|maxScore
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|float
name|dec
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|optionSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|dec
operator|<=
name|maxScore
condition|)
block|{
name|maxScore
operator|-=
name|dec
expr_stmt|;
block|}
block|}
name|suggestion
operator|.
name|setShardIndex
argument_list|(
name|shardIndex
argument_list|)
expr_stmt|;
name|shardSuggestion
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
block|}
name|querySearchResult
operator|.
name|topDocs
argument_list|(
name|topDocs
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|querySearchResult
operator|.
name|size
argument_list|(
name|searchHitsSize
argument_list|)
expr_stmt|;
name|querySearchResult
operator|.
name|suggest
argument_list|(
operator|new
name|Suggest
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|shardSuggestion
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|queryResults
operator|.
name|set
argument_list|(
name|shardIndex
argument_list|,
name|querySearchResult
argument_list|)
expr_stmt|;
block|}
return|return
name|queryResults
return|;
block|}
DECL|method|getTotalQueryHits
specifier|private
name|int
name|getTotalQueryHits
parameter_list|(
name|AtomicArray
argument_list|<
name|QuerySearchResultProvider
argument_list|>
name|results
parameter_list|)
block|{
name|int
name|resultCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|QuerySearchResultProvider
argument_list|>
name|shardResult
range|:
name|results
operator|.
name|asList
argument_list|()
control|)
block|{
name|resultCount
operator|+=
name|shardResult
operator|.
name|value
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
operator|.
name|totalHits
expr_stmt|;
block|}
return|return
name|resultCount
return|;
block|}
DECL|method|reducedSuggest
specifier|private
name|Suggest
name|reducedSuggest
parameter_list|(
name|AtomicArray
argument_list|<
name|QuerySearchResultProvider
argument_list|>
name|results
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
argument_list|>
argument_list|>
argument_list|>
name|groupedSuggestion
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|QuerySearchResultProvider
argument_list|>
name|entry
range|:
name|results
operator|.
name|asList
argument_list|()
control|)
block|{
for|for
control|(
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|?
argument_list|>
name|suggestion
range|:
name|entry
operator|.
name|value
operator|.
name|queryResult
argument_list|()
operator|.
name|suggest
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
argument_list|>
argument_list|>
name|suggests
init|=
name|groupedSuggestion
operator|.
name|computeIfAbsent
argument_list|(
name|suggestion
operator|.
name|getName
argument_list|()
argument_list|,
name|s
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|suggests
operator|.
name|add
argument_list|(
operator|(
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
argument_list|>
operator|)
name|suggestion
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Suggest
argument_list|(
name|groupedSuggestion
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|CompletionSuggestion
operator|::
name|reduceTo
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getTopShardDocs
specifier|private
name|ScoreDoc
index|[]
name|getTopShardDocs
parameter_list|(
name|AtomicArray
argument_list|<
name|QuerySearchResultProvider
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|AtomicArray
operator|.
name|Entry
argument_list|<
name|QuerySearchResultProvider
argument_list|>
argument_list|>
name|resultList
init|=
name|results
operator|.
name|asList
argument_list|()
decl_stmt|;
name|TopDocs
index|[]
name|shardTopDocs
init|=
operator|new
name|TopDocs
index|[
name|resultList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|shardTopDocs
index|[
name|i
index|]
operator|=
name|resultList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|value
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
expr_stmt|;
block|}
name|int
name|topN
init|=
name|Math
operator|.
name|min
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|queryResult
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|getTotalQueryHits
argument_list|(
name|results
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|TopDocs
operator|.
name|merge
argument_list|(
name|topN
argument_list|,
name|shardTopDocs
argument_list|)
operator|.
name|scoreDocs
return|;
block|}
DECL|method|generateFetchResults
specifier|private
name|AtomicArray
argument_list|<
name|FetchSearchResultProvider
argument_list|>
name|generateFetchResults
parameter_list|(
name|int
name|nShards
parameter_list|,
name|ScoreDoc
index|[]
name|mergedSearchDocs
parameter_list|,
name|Suggest
name|mergedSuggest
parameter_list|)
block|{
name|AtomicArray
argument_list|<
name|FetchSearchResultProvider
argument_list|>
name|fetchResults
init|=
operator|new
name|AtomicArray
argument_list|<>
argument_list|(
name|nShards
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|shardIndex
init|=
literal|0
init|;
name|shardIndex
operator|<
name|nShards
condition|;
name|shardIndex
operator|++
control|)
block|{
name|float
name|maxScore
init|=
operator|-
literal|1F
decl_stmt|;
name|SearchShardTarget
name|shardTarget
init|=
operator|new
name|SearchShardTarget
argument_list|(
literal|""
argument_list|,
operator|new
name|Index
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|,
name|shardIndex
argument_list|)
decl_stmt|;
name|FetchSearchResult
name|fetchSearchResult
init|=
operator|new
name|FetchSearchResult
argument_list|(
name|shardIndex
argument_list|,
name|shardTarget
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|InternalSearchHit
argument_list|>
name|internalSearchHits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ScoreDoc
name|scoreDoc
range|:
name|mergedSearchDocs
control|)
block|{
if|if
condition|(
name|scoreDoc
operator|.
name|shardIndex
operator|==
name|shardIndex
condition|)
block|{
name|internalSearchHits
operator|.
name|add
argument_list|(
operator|new
name|InternalSearchHit
argument_list|(
name|scoreDoc
operator|.
name|doc
argument_list|,
literal|""
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|scoreDoc
operator|.
name|score
operator|>
name|maxScore
condition|)
block|{
name|maxScore
operator|=
name|scoreDoc
operator|.
name|score
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|?
argument_list|>
name|suggestion
range|:
name|mergedSuggest
control|)
block|{
if|if
condition|(
name|suggestion
operator|instanceof
name|CompletionSuggestion
condition|)
block|{
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
name|option
range|:
operator|(
operator|(
name|CompletionSuggestion
operator|)
name|suggestion
operator|)
operator|.
name|getOptions
argument_list|()
control|)
block|{
name|ScoreDoc
name|doc
init|=
name|option
operator|.
name|getDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|shardIndex
operator|==
name|shardIndex
condition|)
block|{
name|internalSearchHits
operator|.
name|add
argument_list|(
operator|new
name|InternalSearchHit
argument_list|(
name|doc
operator|.
name|doc
argument_list|,
literal|""
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|.
name|score
operator|>
name|maxScore
condition|)
block|{
name|maxScore
operator|=
name|doc
operator|.
name|score
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|InternalSearchHit
index|[]
name|hits
init|=
name|internalSearchHits
operator|.
name|toArray
argument_list|(
operator|new
name|InternalSearchHit
index|[
name|internalSearchHits
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|fetchSearchResult
operator|.
name|hits
argument_list|(
operator|new
name|InternalSearchHits
argument_list|(
name|hits
argument_list|,
name|hits
operator|.
name|length
argument_list|,
name|maxScore
argument_list|)
argument_list|)
expr_stmt|;
name|fetchResults
operator|.
name|set
argument_list|(
name|shardIndex
argument_list|,
name|fetchSearchResult
argument_list|)
expr_stmt|;
block|}
return|return
name|fetchResults
return|;
block|}
block|}
end_class

end_unit

