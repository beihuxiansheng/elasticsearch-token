begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AtomicArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchPhaseResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|max
operator|.
name|InternalMax
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|Suggest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|CompletionSuggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|TestCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_class
DECL|class|SearchPhaseControllerTests
specifier|public
class|class
name|SearchPhaseControllerTests
extends|extends
name|ESTestCase
block|{
DECL|field|searchPhaseController
specifier|private
name|SearchPhaseController
name|searchPhaseController
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|searchPhaseController
operator|=
operator|new
name|SearchPhaseController
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testSort
specifier|public
name|void
name|testSort
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|CompletionSuggestion
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|CompletionSuggestion
argument_list|(
name|randomAlphaOfLength
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|nShards
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|int
name|queryResultSize
init|=
name|randomBoolean
argument_list|()
condition|?
literal|0
else|:
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|nShards
operator|*
literal|2
argument_list|)
decl_stmt|;
name|AtomicArray
argument_list|<
name|SearchPhaseResult
argument_list|>
name|results
init|=
name|generateQueryResults
argument_list|(
name|nShards
argument_list|,
name|suggestions
argument_list|,
name|queryResultSize
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|SearchPhaseResult
argument_list|>
name|first
init|=
name|results
operator|.
name|asList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|findFirst
argument_list|()
decl_stmt|;
name|int
name|from
init|=
literal|0
decl_stmt|,
name|size
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|first
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|from
operator|=
name|first
operator|.
name|get
argument_list|()
operator|.
name|queryResult
argument_list|()
operator|.
name|from
argument_list|()
expr_stmt|;
name|size
operator|=
name|first
operator|.
name|get
argument_list|()
operator|.
name|queryResult
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|int
name|accumulatedLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|queryResultSize
argument_list|,
name|getTotalQueryHits
argument_list|(
name|results
argument_list|)
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|sortedDocs
init|=
name|searchPhaseController
operator|.
name|sortDocs
argument_list|(
literal|true
argument_list|,
name|results
operator|.
name|asList
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|SearchPhaseController
operator|.
name|TopDocsStats
argument_list|()
argument_list|,
name|from
argument_list|,
name|size
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
for|for
control|(
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|?
argument_list|>
name|suggestion
range|:
name|reducedSuggest
argument_list|(
name|results
argument_list|)
control|)
block|{
name|int
name|suggestionSize
init|=
name|suggestion
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOptions
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|accumulatedLength
operator|+=
name|suggestionSize
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|sortedDocs
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|accumulatedLength
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSortIsIdempotent
specifier|public
name|void
name|testSortIsIdempotent
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|nShards
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|int
name|queryResultSize
init|=
name|randomBoolean
argument_list|()
condition|?
literal|0
else|:
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|nShards
operator|*
literal|2
argument_list|)
decl_stmt|;
name|long
name|randomSeed
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|boolean
name|useConstantScore
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|AtomicArray
argument_list|<
name|SearchPhaseResult
argument_list|>
name|results
init|=
name|generateSeededQueryResults
argument_list|(
name|randomSeed
argument_list|,
name|nShards
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|queryResultSize
argument_list|,
name|useConstantScore
argument_list|)
decl_stmt|;
name|boolean
name|ignoreFrom
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|SearchPhaseResult
argument_list|>
name|first
init|=
name|results
operator|.
name|asList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|findFirst
argument_list|()
decl_stmt|;
name|int
name|from
init|=
literal|0
decl_stmt|,
name|size
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|first
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|from
operator|=
name|first
operator|.
name|get
argument_list|()
operator|.
name|queryResult
argument_list|()
operator|.
name|from
argument_list|()
expr_stmt|;
name|size
operator|=
name|first
operator|.
name|get
argument_list|()
operator|.
name|queryResult
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|SearchPhaseController
operator|.
name|TopDocsStats
name|topDocsStats
init|=
operator|new
name|SearchPhaseController
operator|.
name|TopDocsStats
argument_list|()
decl_stmt|;
name|ScoreDoc
index|[]
name|sortedDocs
init|=
name|searchPhaseController
operator|.
name|sortDocs
argument_list|(
name|ignoreFrom
argument_list|,
name|results
operator|.
name|asList
argument_list|()
argument_list|,
literal|null
argument_list|,
name|topDocsStats
argument_list|,
name|from
argument_list|,
name|size
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|results
operator|=
name|generateSeededQueryResults
argument_list|(
name|randomSeed
argument_list|,
name|nShards
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|queryResultSize
argument_list|,
name|useConstantScore
argument_list|)
expr_stmt|;
name|SearchPhaseController
operator|.
name|TopDocsStats
name|topDocsStats2
init|=
operator|new
name|SearchPhaseController
operator|.
name|TopDocsStats
argument_list|()
decl_stmt|;
name|ScoreDoc
index|[]
name|sortedDocs2
init|=
name|searchPhaseController
operator|.
name|sortDocs
argument_list|(
name|ignoreFrom
argument_list|,
name|results
operator|.
name|asList
argument_list|()
argument_list|,
literal|null
argument_list|,
name|topDocsStats2
argument_list|,
name|from
argument_list|,
name|size
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
name|sortedDocs
operator|.
name|length
argument_list|,
name|sortedDocs2
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortedDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|sortedDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|,
name|sortedDocs2
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sortedDocs
index|[
name|i
index|]
operator|.
name|shardIndex
argument_list|,
name|sortedDocs2
index|[
name|i
index|]
operator|.
name|shardIndex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sortedDocs
index|[
name|i
index|]
operator|.
name|score
argument_list|,
name|sortedDocs2
index|[
name|i
index|]
operator|.
name|score
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|topDocsStats
operator|.
name|maxScore
argument_list|,
name|topDocsStats2
operator|.
name|maxScore
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|topDocsStats
operator|.
name|totalHits
argument_list|,
name|topDocsStats2
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|topDocsStats
operator|.
name|fetchHits
argument_list|,
name|topDocsStats2
operator|.
name|fetchHits
argument_list|)
expr_stmt|;
block|}
DECL|method|generateSeededQueryResults
specifier|private
name|AtomicArray
argument_list|<
name|SearchPhaseResult
argument_list|>
name|generateSeededQueryResults
parameter_list|(
name|long
name|seed
parameter_list|,
name|int
name|nShards
parameter_list|,
name|List
argument_list|<
name|CompletionSuggestion
argument_list|>
name|suggestions
parameter_list|,
name|int
name|searchHitsSize
parameter_list|,
name|boolean
name|useConstantScore
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|RandomizedContext
operator|.
name|current
argument_list|()
operator|.
name|runWithPrivateRandomness
argument_list|(
name|seed
argument_list|,
parameter_list|()
lambda|->
name|generateQueryResults
argument_list|(
name|nShards
argument_list|,
name|suggestions
argument_list|,
name|searchHitsSize
argument_list|,
name|useConstantScore
argument_list|)
argument_list|)
return|;
block|}
DECL|method|testMerge
specifier|public
name|void
name|testMerge
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CompletionSuggestion
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|maxSuggestSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|maxSuggestSize
operator|+=
name|size
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|CompletionSuggestion
argument_list|(
name|randomAlphaOfLength
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|nShards
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|int
name|queryResultSize
init|=
name|randomBoolean
argument_list|()
condition|?
literal|0
else|:
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|nShards
operator|*
literal|2
argument_list|)
decl_stmt|;
name|AtomicArray
argument_list|<
name|SearchPhaseResult
argument_list|>
name|queryResults
init|=
name|generateQueryResults
argument_list|(
name|nShards
argument_list|,
name|suggestions
argument_list|,
name|queryResultSize
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SearchPhaseController
operator|.
name|ReducedQueryPhase
name|reducedQueryPhase
init|=
name|searchPhaseController
operator|.
name|reducedQueryPhase
argument_list|(
name|queryResults
operator|.
name|asList
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AtomicArray
argument_list|<
name|SearchPhaseResult
argument_list|>
name|searchPhaseResultAtomicArray
init|=
name|generateFetchResults
argument_list|(
name|nShards
argument_list|,
name|reducedQueryPhase
operator|.
name|scoreDocs
argument_list|,
name|reducedQueryPhase
operator|.
name|suggest
argument_list|)
decl_stmt|;
name|InternalSearchResponse
name|mergedResponse
init|=
name|searchPhaseController
operator|.
name|merge
argument_list|(
literal|false
argument_list|,
name|reducedQueryPhase
argument_list|,
name|searchPhaseResultAtomicArray
operator|.
name|asList
argument_list|()
argument_list|,
name|searchPhaseResultAtomicArray
operator|::
name|get
argument_list|)
decl_stmt|;
name|int
name|suggestSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Suggest
operator|.
name|Suggestion
name|s
range|:
name|reducedQueryPhase
operator|.
name|suggest
control|)
block|{
name|Stream
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
argument_list|>
name|stream
init|=
name|s
operator|.
name|getEntries
argument_list|()
operator|.
name|stream
argument_list|()
decl_stmt|;
name|suggestSize
operator|+=
name|stream
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|summingInt
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getOptions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|suggestSize
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|maxSuggestSize
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mergedResponse
operator|.
name|hits
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|reducedQueryPhase
operator|.
name|scoreDocs
operator|.
name|length
operator|-
name|suggestSize
argument_list|)
argument_list|)
expr_stmt|;
name|Suggest
name|suggestResult
init|=
name|mergedResponse
operator|.
name|suggest
argument_list|()
decl_stmt|;
for|for
control|(
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|?
argument_list|>
name|suggestion
range|:
name|reducedQueryPhase
operator|.
name|suggest
control|)
block|{
name|assertThat
argument_list|(
name|suggestion
argument_list|,
name|instanceOf
argument_list|(
name|CompletionSuggestion
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestion
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOptions
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|CompletionSuggestion
name|suggestionResult
init|=
name|suggestResult
operator|.
name|getSuggestion
argument_list|(
name|suggestion
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|suggestionResult
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|>
name|options
init|=
name|suggestionResult
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|options
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|suggestion
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOptions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
name|option
range|:
name|options
control|)
block|{
name|assertNotNull
argument_list|(
name|option
operator|.
name|getHit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|generateQueryResults
specifier|private
name|AtomicArray
argument_list|<
name|SearchPhaseResult
argument_list|>
name|generateQueryResults
parameter_list|(
name|int
name|nShards
parameter_list|,
name|List
argument_list|<
name|CompletionSuggestion
argument_list|>
name|suggestions
parameter_list|,
name|int
name|searchHitsSize
parameter_list|,
name|boolean
name|useConstantScore
parameter_list|)
block|{
name|AtomicArray
argument_list|<
name|SearchPhaseResult
argument_list|>
name|queryResults
init|=
operator|new
name|AtomicArray
argument_list|<>
argument_list|(
name|nShards
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|shardIndex
init|=
literal|0
init|;
name|shardIndex
operator|<
name|nShards
condition|;
name|shardIndex
operator|++
control|)
block|{
name|QuerySearchResult
name|querySearchResult
init|=
operator|new
name|QuerySearchResult
argument_list|(
name|shardIndex
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|""
argument_list|,
operator|new
name|Index
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|,
name|shardIndex
argument_list|)
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
operator|new
name|TopDocs
argument_list|(
literal|0
argument_list|,
operator|new
name|ScoreDoc
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|searchHitsSize
operator|>
literal|0
condition|)
block|{
name|int
name|nDocs
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|searchHitsSize
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
operator|new
name|ScoreDoc
index|[
name|nDocs
index|]
decl_stmt|;
name|float
name|maxScore
init|=
literal|0F
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
block|{
name|float
name|score
init|=
name|useConstantScore
condition|?
literal|1.0F
else|:
name|Math
operator|.
name|abs
argument_list|(
name|randomFloat
argument_list|()
argument_list|)
decl_stmt|;
name|scoreDocs
index|[
name|i
index|]
operator|=
operator|new
name|ScoreDoc
argument_list|(
name|i
argument_list|,
name|score
argument_list|)
expr_stmt|;
if|if
condition|(
name|score
operator|>
name|maxScore
condition|)
block|{
name|maxScore
operator|=
name|score
expr_stmt|;
block|}
block|}
name|topDocs
operator|=
operator|new
name|TopDocs
argument_list|(
name|scoreDocs
operator|.
name|length
argument_list|,
name|scoreDocs
argument_list|,
name|maxScore
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|CompletionSuggestion
argument_list|>
name|shardSuggestion
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CompletionSuggestion
name|completionSuggestion
range|:
name|suggestions
control|)
block|{
name|CompletionSuggestion
name|suggestion
init|=
operator|new
name|CompletionSuggestion
argument_list|(
name|completionSuggestion
operator|.
name|getName
argument_list|()
argument_list|,
name|completionSuggestion
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CompletionSuggestion
operator|.
name|Entry
name|completionEntry
init|=
operator|new
name|CompletionSuggestion
operator|.
name|Entry
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|suggestion
operator|.
name|addTerm
argument_list|(
name|completionEntry
argument_list|)
expr_stmt|;
name|int
name|optionSize
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|suggestion
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|maxScore
init|=
name|randomIntBetween
argument_list|(
name|suggestion
operator|.
name|getSize
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|Float
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|optionSize
condition|;
name|i
operator|++
control|)
block|{
name|completionEntry
operator|.
name|addOption
argument_list|(
operator|new
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|(
name|i
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
name|maxScore
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|float
name|dec
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|optionSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|dec
operator|<=
name|maxScore
condition|)
block|{
name|maxScore
operator|-=
name|dec
expr_stmt|;
block|}
block|}
name|suggestion
operator|.
name|setShardIndex
argument_list|(
name|shardIndex
argument_list|)
expr_stmt|;
name|shardSuggestion
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
block|}
name|querySearchResult
operator|.
name|topDocs
argument_list|(
name|topDocs
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|querySearchResult
operator|.
name|size
argument_list|(
name|searchHitsSize
argument_list|)
expr_stmt|;
name|querySearchResult
operator|.
name|suggest
argument_list|(
operator|new
name|Suggest
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|shardSuggestion
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|querySearchResult
operator|.
name|setShardIndex
argument_list|(
name|shardIndex
argument_list|)
expr_stmt|;
name|queryResults
operator|.
name|set
argument_list|(
name|shardIndex
argument_list|,
name|querySearchResult
argument_list|)
expr_stmt|;
block|}
return|return
name|queryResults
return|;
block|}
DECL|method|getTotalQueryHits
specifier|private
name|int
name|getTotalQueryHits
parameter_list|(
name|AtomicArray
argument_list|<
name|SearchPhaseResult
argument_list|>
name|results
parameter_list|)
block|{
name|int
name|resultCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SearchPhaseResult
name|shardResult
range|:
name|results
operator|.
name|asList
argument_list|()
control|)
block|{
name|resultCount
operator|+=
name|shardResult
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|()
operator|.
name|totalHits
expr_stmt|;
block|}
return|return
name|resultCount
return|;
block|}
DECL|method|reducedSuggest
specifier|private
name|Suggest
name|reducedSuggest
parameter_list|(
name|AtomicArray
argument_list|<
name|SearchPhaseResult
argument_list|>
name|results
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
argument_list|>
argument_list|>
argument_list|>
name|groupedSuggestion
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchPhaseResult
name|entry
range|:
name|results
operator|.
name|asList
argument_list|()
control|)
block|{
for|for
control|(
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|?
argument_list|>
name|suggestion
range|:
name|entry
operator|.
name|queryResult
argument_list|()
operator|.
name|suggest
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
argument_list|>
argument_list|>
name|suggests
init|=
name|groupedSuggestion
operator|.
name|computeIfAbsent
argument_list|(
name|suggestion
operator|.
name|getName
argument_list|()
argument_list|,
name|s
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|suggests
operator|.
name|add
argument_list|(
operator|(
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
argument_list|>
operator|)
name|suggestion
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Suggest
argument_list|(
name|groupedSuggestion
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|CompletionSuggestion
operator|::
name|reduceTo
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|generateFetchResults
specifier|private
name|AtomicArray
argument_list|<
name|SearchPhaseResult
argument_list|>
name|generateFetchResults
parameter_list|(
name|int
name|nShards
parameter_list|,
name|ScoreDoc
index|[]
name|mergedSearchDocs
parameter_list|,
name|Suggest
name|mergedSuggest
parameter_list|)
block|{
name|AtomicArray
argument_list|<
name|SearchPhaseResult
argument_list|>
name|fetchResults
init|=
operator|new
name|AtomicArray
argument_list|<>
argument_list|(
name|nShards
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|shardIndex
init|=
literal|0
init|;
name|shardIndex
operator|<
name|nShards
condition|;
name|shardIndex
operator|++
control|)
block|{
name|float
name|maxScore
init|=
operator|-
literal|1F
decl_stmt|;
name|SearchShardTarget
name|shardTarget
init|=
operator|new
name|SearchShardTarget
argument_list|(
literal|""
argument_list|,
operator|new
name|Index
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|,
name|shardIndex
argument_list|)
decl_stmt|;
name|FetchSearchResult
name|fetchSearchResult
init|=
operator|new
name|FetchSearchResult
argument_list|(
name|shardIndex
argument_list|,
name|shardTarget
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SearchHit
argument_list|>
name|searchHits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ScoreDoc
name|scoreDoc
range|:
name|mergedSearchDocs
control|)
block|{
if|if
condition|(
name|scoreDoc
operator|.
name|shardIndex
operator|==
name|shardIndex
condition|)
block|{
name|searchHits
operator|.
name|add
argument_list|(
operator|new
name|SearchHit
argument_list|(
name|scoreDoc
operator|.
name|doc
argument_list|,
literal|""
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|scoreDoc
operator|.
name|score
operator|>
name|maxScore
condition|)
block|{
name|maxScore
operator|=
name|scoreDoc
operator|.
name|score
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|?
argument_list|>
name|suggestion
range|:
name|mergedSuggest
control|)
block|{
if|if
condition|(
name|suggestion
operator|instanceof
name|CompletionSuggestion
condition|)
block|{
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
name|option
range|:
operator|(
operator|(
name|CompletionSuggestion
operator|)
name|suggestion
operator|)
operator|.
name|getOptions
argument_list|()
control|)
block|{
name|ScoreDoc
name|doc
init|=
name|option
operator|.
name|getDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|shardIndex
operator|==
name|shardIndex
condition|)
block|{
name|searchHits
operator|.
name|add
argument_list|(
operator|new
name|SearchHit
argument_list|(
name|doc
operator|.
name|doc
argument_list|,
literal|""
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|.
name|score
operator|>
name|maxScore
condition|)
block|{
name|maxScore
operator|=
name|doc
operator|.
name|score
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|SearchHit
index|[]
name|hits
init|=
name|searchHits
operator|.
name|toArray
argument_list|(
operator|new
name|SearchHit
index|[
name|searchHits
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|fetchSearchResult
operator|.
name|hits
argument_list|(
operator|new
name|SearchHits
argument_list|(
name|hits
argument_list|,
name|hits
operator|.
name|length
argument_list|,
name|maxScore
argument_list|)
argument_list|)
expr_stmt|;
name|fetchResults
operator|.
name|set
argument_list|(
name|shardIndex
argument_list|,
name|fetchSearchResult
argument_list|)
expr_stmt|;
block|}
return|return
name|fetchResults
return|;
block|}
DECL|method|testConsumer
specifier|public
name|void
name|testConsumer
parameter_list|()
block|{
name|int
name|bufferSize
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|SearchRequest
name|request
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|aggregation
argument_list|(
name|AggregationBuilders
operator|.
name|avg
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setBatchedReduceSize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|InitialSearchPhase
operator|.
name|SearchPhaseResults
argument_list|<
name|SearchPhaseResult
argument_list|>
name|consumer
init|=
name|searchPhaseController
operator|.
name|newSearchPhaseResults
argument_list|(
name|request
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QuerySearchResult
name|result
init|=
operator|new
name|QuerySearchResult
argument_list|(
literal|0
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|topDocs
argument_list|(
operator|new
name|TopDocs
argument_list|(
literal|0
argument_list|,
operator|new
name|ScoreDoc
index|[
literal|0
index|]
argument_list|,
literal|0.0F
argument_list|)
argument_list|,
operator|new
name|DocValueFormat
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|InternalAggregations
name|aggs
init|=
operator|new
name|InternalAggregations
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|InternalMax
argument_list|(
literal|"test"
argument_list|,
literal|1.0D
argument_list|,
name|DocValueFormat
operator|.
name|RAW
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|aggregations
argument_list|(
name|aggs
argument_list|)
expr_stmt|;
name|result
operator|.
name|setShardIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|consumeResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|QuerySearchResult
argument_list|(
literal|1
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|topDocs
argument_list|(
operator|new
name|TopDocs
argument_list|(
literal|0
argument_list|,
operator|new
name|ScoreDoc
index|[
literal|0
index|]
argument_list|,
literal|0.0F
argument_list|)
argument_list|,
operator|new
name|DocValueFormat
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|aggs
operator|=
operator|new
name|InternalAggregations
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|InternalMax
argument_list|(
literal|"test"
argument_list|,
literal|3.0D
argument_list|,
name|DocValueFormat
operator|.
name|RAW
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|aggregations
argument_list|(
name|aggs
argument_list|)
expr_stmt|;
name|result
operator|.
name|setShardIndex
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|consumeResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|QuerySearchResult
argument_list|(
literal|1
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|topDocs
argument_list|(
operator|new
name|TopDocs
argument_list|(
literal|0
argument_list|,
operator|new
name|ScoreDoc
index|[
literal|0
index|]
argument_list|,
literal|0.0F
argument_list|)
argument_list|,
operator|new
name|DocValueFormat
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|aggs
operator|=
operator|new
name|InternalAggregations
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|InternalMax
argument_list|(
literal|"test"
argument_list|,
literal|2.0D
argument_list|,
name|DocValueFormat
operator|.
name|RAW
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|aggregations
argument_list|(
name|aggs
argument_list|)
expr_stmt|;
name|result
operator|.
name|setShardIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|consumeResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|int
name|numTotalReducePhases
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|bufferSize
operator|==
literal|2
condition|)
block|{
name|assertThat
argument_list|(
name|consumer
argument_list|,
name|instanceOf
argument_list|(
name|SearchPhaseController
operator|.
name|QueryPhaseResultConsumer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|SearchPhaseController
operator|.
name|QueryPhaseResultConsumer
operator|)
name|consumer
operator|)
operator|.
name|getNumReducePhases
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|SearchPhaseController
operator|.
name|QueryPhaseResultConsumer
operator|)
name|consumer
operator|)
operator|.
name|getNumBuffered
argument_list|()
argument_list|)
expr_stmt|;
name|numTotalReducePhases
operator|++
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|consumer
argument_list|,
name|not
argument_list|(
name|instanceOf
argument_list|(
name|SearchPhaseController
operator|.
name|QueryPhaseResultConsumer
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SearchPhaseController
operator|.
name|ReducedQueryPhase
name|reduce
init|=
name|consumer
operator|.
name|reduce
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|numTotalReducePhases
argument_list|,
name|reduce
operator|.
name|numReducePhases
argument_list|)
expr_stmt|;
name|InternalMax
name|max
init|=
operator|(
name|InternalMax
operator|)
name|reduce
operator|.
name|aggregations
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3.0D
argument_list|,
name|max
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
block|}
DECL|method|testConsumerConcurrently
specifier|public
name|void
name|testConsumerConcurrently
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|expectedNumResults
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|bufferSize
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|SearchRequest
name|request
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|aggregation
argument_list|(
name|AggregationBuilders
operator|.
name|avg
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setBatchedReduceSize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|InitialSearchPhase
operator|.
name|SearchPhaseResults
argument_list|<
name|SearchPhaseResult
argument_list|>
name|consumer
init|=
name|searchPhaseController
operator|.
name|newSearchPhaseResults
argument_list|(
name|request
argument_list|,
name|expectedNumResults
argument_list|)
decl_stmt|;
name|AtomicInteger
name|max
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|expectedNumResults
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedNumResults
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|i
decl_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|int
name|number
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|max
operator|.
name|updateAndGet
argument_list|(
name|prev
lambda|->
name|Math
operator|.
name|max
argument_list|(
name|prev
argument_list|,
name|number
argument_list|)
argument_list|)
expr_stmt|;
name|QuerySearchResult
name|result
init|=
operator|new
name|QuerySearchResult
argument_list|(
name|id
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|topDocs
argument_list|(
operator|new
name|TopDocs
argument_list|(
literal|1
argument_list|,
operator|new
name|ScoreDoc
index|[]
block|{
operator|new
name|ScoreDoc
argument_list|(
literal|0
argument_list|,
name|number
argument_list|)
block|}
operator|,
name|number
argument_list|)
operator|,
operator|new
name|DocValueFormat
index|[
literal|0
index|]
block|)
empty_stmt|;
name|InternalAggregations
name|aggs
init|=
operator|new
name|InternalAggregations
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|InternalMax
argument_list|(
literal|"test"
argument_list|,
operator|(
name|double
operator|)
name|number
argument_list|,
name|DocValueFormat
operator|.
name|RAW
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|aggregations
argument_list|(
name|aggs
argument_list|)
expr_stmt|;
name|result
operator|.
name|setShardIndex
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|result
operator|.
name|size
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|consumeResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|)
class|;
end_class

begin_expr_stmt
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}         for
operator|(
name|int
name|i
operator|=
literal|0
expr|;
name|i
operator|<
name|expectedNumResults
expr|;
name|i
operator|++
operator|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
block|;         }
name|SearchPhaseController
operator|.
name|ReducedQueryPhase
name|reduce
operator|=
name|consumer
operator|.
name|reduce
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|InternalMax
name|internalMax
init|=
operator|(
name|InternalMax
operator|)
name|reduce
operator|.
name|aggregations
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
name|max
operator|.
name|get
argument_list|()
argument_list|,
name|internalMax
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reduce
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
name|max
operator|.
name|get
argument_list|()
argument_list|,
name|reduce
operator|.
name|maxScore
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
name|expectedNumResults
argument_list|,
name|reduce
operator|.
name|totalHits
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
name|max
operator|.
name|get
argument_list|()
argument_list|,
name|reduce
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|score
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      public
DECL|method|testConsumerOnlyAggs
name|void
name|testConsumerOnlyAggs
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|expectedNumResults
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|bufferSize
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|SearchRequest
name|request
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|aggregation
argument_list|(
name|AggregationBuilders
operator|.
name|avg
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setBatchedReduceSize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|InitialSearchPhase
operator|.
name|SearchPhaseResults
argument_list|<
name|SearchPhaseResult
argument_list|>
name|consumer
init|=
name|searchPhaseController
operator|.
name|newSearchPhaseResults
argument_list|(
name|request
argument_list|,
name|expectedNumResults
argument_list|)
decl_stmt|;
name|AtomicInteger
name|max
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedNumResults
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|i
decl_stmt|;
name|int
name|number
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|max
operator|.
name|updateAndGet
argument_list|(
name|prev
lambda|->
name|Math
operator|.
name|max
argument_list|(
name|prev
argument_list|,
name|number
argument_list|)
argument_list|)
expr_stmt|;
name|QuerySearchResult
name|result
init|=
operator|new
name|QuerySearchResult
argument_list|(
name|id
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|topDocs
argument_list|(
operator|new
name|TopDocs
argument_list|(
literal|1
argument_list|,
operator|new
name|ScoreDoc
index|[
literal|0
index|]
argument_list|,
name|number
argument_list|)
argument_list|,
operator|new
name|DocValueFormat
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|InternalAggregations
name|aggs
init|=
operator|new
name|InternalAggregations
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|InternalMax
argument_list|(
literal|"test"
argument_list|,
operator|(
name|double
operator|)
name|number
argument_list|,
name|DocValueFormat
operator|.
name|RAW
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|aggregations
argument_list|(
name|aggs
argument_list|)
expr_stmt|;
name|result
operator|.
name|setShardIndex
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|result
operator|.
name|size
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|consumeResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
name|SearchPhaseController
operator|.
name|ReducedQueryPhase
name|reduce
init|=
name|consumer
operator|.
name|reduce
argument_list|()
decl_stmt|;
name|InternalMax
name|internalMax
init|=
operator|(
name|InternalMax
operator|)
name|reduce
operator|.
name|aggregations
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|max
operator|.
name|get
argument_list|()
argument_list|,
name|internalMax
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reduce
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|max
operator|.
name|get
argument_list|()
argument_list|,
name|reduce
operator|.
name|maxScore
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNumResults
argument_list|,
name|reduce
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testConsumerOnlyHits
specifier|public
name|void
name|testConsumerOnlyHits
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|expectedNumResults
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|bufferSize
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|SearchRequest
name|request
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|request
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|size
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setBatchedReduceSize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|InitialSearchPhase
operator|.
name|SearchPhaseResults
argument_list|<
name|SearchPhaseResult
argument_list|>
name|consumer
init|=
name|searchPhaseController
operator|.
name|newSearchPhaseResults
argument_list|(
name|request
argument_list|,
name|expectedNumResults
argument_list|)
decl_stmt|;
name|AtomicInteger
name|max
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedNumResults
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|i
decl_stmt|;
name|int
name|number
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|max
operator|.
name|updateAndGet
argument_list|(
name|prev
lambda|->
name|Math
operator|.
name|max
argument_list|(
name|prev
argument_list|,
name|number
argument_list|)
argument_list|)
expr_stmt|;
name|QuerySearchResult
name|result
init|=
operator|new
name|QuerySearchResult
argument_list|(
name|id
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|topDocs
argument_list|(
operator|new
name|TopDocs
argument_list|(
literal|1
argument_list|,
operator|new
name|ScoreDoc
index|[]
block|{
operator|new
name|ScoreDoc
argument_list|(
literal|0
argument_list|,
name|number
argument_list|)
block|}
argument_list|,
name|number
argument_list|)
argument_list|,
operator|new
name|DocValueFormat
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|setShardIndex
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|result
operator|.
name|size
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|consumeResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
name|SearchPhaseController
operator|.
name|ReducedQueryPhase
name|reduce
init|=
name|consumer
operator|.
name|reduce
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reduce
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|max
operator|.
name|get
argument_list|()
argument_list|,
name|reduce
operator|.
name|maxScore
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNumResults
argument_list|,
name|reduce
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|max
operator|.
name|get
argument_list|()
argument_list|,
name|reduce
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|score
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testNewSearchPhaseResults
specifier|public
name|void
name|testNewSearchPhaseResults
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|int
name|expectedNumResults
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
name|bufferSize
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|SearchRequest
name|request
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|hasAggs
decl_stmt|;
if|if
condition|(
operator|(
name|hasAggs
operator|=
name|randomBoolean
argument_list|()
operator|)
condition|)
block|{
name|request
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|aggregation
argument_list|(
name|AggregationBuilders
operator|.
name|avg
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|hasTopDocs
decl_stmt|;
if|if
condition|(
operator|(
name|hasTopDocs
operator|=
name|randomBoolean
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|source
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|source
argument_list|()
operator|.
name|size
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// no source means size = 10
block|}
else|else
block|{
if|if
condition|(
name|request
operator|.
name|source
argument_list|()
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|size
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|source
argument_list|()
operator|.
name|size
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setBatchedReduceSize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|InitialSearchPhase
operator|.
name|SearchPhaseResults
argument_list|<
name|SearchPhaseResult
argument_list|>
name|consumer
init|=
name|searchPhaseController
operator|.
name|newSearchPhaseResults
argument_list|(
name|request
argument_list|,
name|expectedNumResults
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|hasAggs
operator|||
name|hasTopDocs
operator|)
operator|&&
name|expectedNumResults
operator|>
name|bufferSize
condition|)
block|{
name|assertThat
argument_list|(
literal|"expectedNumResults: "
operator|+
name|expectedNumResults
operator|+
literal|" bufferSize: "
operator|+
name|bufferSize
argument_list|,
name|consumer
argument_list|,
name|instanceOf
argument_list|(
name|SearchPhaseController
operator|.
name|QueryPhaseResultConsumer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
literal|"expectedNumResults: "
operator|+
name|expectedNumResults
operator|+
literal|" bufferSize: "
operator|+
name|bufferSize
argument_list|,
name|consumer
argument_list|,
name|not
argument_list|(
name|instanceOf
argument_list|(
name|SearchPhaseController
operator|.
name|QueryPhaseResultConsumer
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|testReduceTopNWithFromOffset
specifier|public
name|void
name|testReduceTopNWithFromOffset
parameter_list|()
block|{
name|SearchRequest
name|request
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|size
argument_list|(
literal|5
argument_list|)
operator|.
name|from
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setBatchedReduceSize
argument_list|(
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|InitialSearchPhase
operator|.
name|SearchPhaseResults
argument_list|<
name|SearchPhaseResult
argument_list|>
name|consumer
init|=
name|searchPhaseController
operator|.
name|newSearchPhaseResults
argument_list|(
name|request
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|int
name|score
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|QuerySearchResult
name|result
init|=
operator|new
name|QuerySearchResult
argument_list|(
name|i
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|docs
init|=
operator|new
name|ScoreDoc
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|docs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|docs
index|[
name|j
index|]
operator|=
operator|new
name|ScoreDoc
argument_list|(
literal|0
argument_list|,
name|score
operator|--
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|topDocs
argument_list|(
operator|new
name|TopDocs
argument_list|(
literal|3
argument_list|,
name|docs
argument_list|,
name|docs
index|[
literal|0
index|]
operator|.
name|score
argument_list|)
argument_list|,
operator|new
name|DocValueFormat
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|setShardIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|result
operator|.
name|size
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|result
operator|.
name|from
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|consumeResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|// 4*3 results = 12 we get result 5 to 10 here with from=5 and size=5
name|SearchPhaseController
operator|.
name|ReducedQueryPhase
name|reduce
init|=
name|consumer
operator|.
name|reduce
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|reduce
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100.f
argument_list|,
name|reduce
operator|.
name|maxScore
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|reduce
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|95.0f
argument_list|,
name|reduce
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|score
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|94.0f
argument_list|,
name|reduce
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|score
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|93.0f
argument_list|,
name|reduce
operator|.
name|scoreDocs
index|[
literal|2
index|]
operator|.
name|score
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|92.0f
argument_list|,
name|reduce
operator|.
name|scoreDocs
index|[
literal|3
index|]
operator|.
name|score
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|91.0f
argument_list|,
name|reduce
operator|.
name|scoreDocs
index|[
literal|4
index|]
operator|.
name|score
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

