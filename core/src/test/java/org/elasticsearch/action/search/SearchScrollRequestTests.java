begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalScrollSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|SearchScrollRequestTests
specifier|public
class|class
name|SearchScrollRequestTests
extends|extends
name|ESTestCase
block|{
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchScrollRequest
name|searchScrollRequest
init|=
name|createSearchScrollRequest
argument_list|()
decl_stmt|;
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|searchScrollRequest
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|SearchScrollRequest
name|deserializedRequest
init|=
operator|new
name|SearchScrollRequest
argument_list|()
decl_stmt|;
name|deserializedRequest
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deserializedRequest
argument_list|,
name|searchScrollRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deserializedRequest
operator|.
name|hashCode
argument_list|()
argument_list|,
name|searchScrollRequest
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|deserializedRequest
argument_list|,
name|searchScrollRequest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testInternalScrollSearchRequestSerialization
specifier|public
name|void
name|testInternalScrollSearchRequestSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|SearchScrollRequest
name|searchScrollRequest
init|=
name|createSearchScrollRequest
argument_list|()
decl_stmt|;
name|InternalScrollSearchRequest
name|internalScrollSearchRequest
init|=
operator|new
name|InternalScrollSearchRequest
argument_list|(
name|searchScrollRequest
argument_list|,
name|randomLong
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|internalScrollSearchRequest
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|InternalScrollSearchRequest
name|deserializedRequest
init|=
operator|new
name|InternalScrollSearchRequest
argument_list|()
decl_stmt|;
name|deserializedRequest
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deserializedRequest
operator|.
name|id
argument_list|()
argument_list|,
name|internalScrollSearchRequest
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deserializedRequest
operator|.
name|scroll
argument_list|()
argument_list|,
name|internalScrollSearchRequest
operator|.
name|scroll
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|deserializedRequest
argument_list|,
name|internalScrollSearchRequest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testEqualsAndHashcode
specifier|public
name|void
name|testEqualsAndHashcode
parameter_list|()
block|{
name|SearchScrollRequest
name|firstSearchScrollRequest
init|=
name|createSearchScrollRequest
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"search scroll request is equal to null"
argument_list|,
name|firstSearchScrollRequest
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"search scroll request  is equal to incompatible type"
argument_list|,
name|firstSearchScrollRequest
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"search scroll request is not equal to self"
argument_list|,
name|firstSearchScrollRequest
argument_list|,
name|firstSearchScrollRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"same source builder's hashcode returns different values if called multiple times"
argument_list|,
name|firstSearchScrollRequest
operator|.
name|hashCode
argument_list|()
argument_list|,
name|firstSearchScrollRequest
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|SearchScrollRequest
name|secondSearchScrollRequest
init|=
name|copyRequest
argument_list|(
name|firstSearchScrollRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"search scroll request  is not equal to self"
argument_list|,
name|secondSearchScrollRequest
argument_list|,
name|secondSearchScrollRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"search scroll request is not equal to its copy"
argument_list|,
name|firstSearchScrollRequest
argument_list|,
name|secondSearchScrollRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"search scroll request is not symmetric"
argument_list|,
name|secondSearchScrollRequest
argument_list|,
name|firstSearchScrollRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"search scroll request copy's hashcode is different from original hashcode"
argument_list|,
name|firstSearchScrollRequest
operator|.
name|hashCode
argument_list|()
argument_list|,
name|secondSearchScrollRequest
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|SearchScrollRequest
name|thirdSearchScrollRequest
init|=
name|copyRequest
argument_list|(
name|secondSearchScrollRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"search scroll request is not equal to self"
argument_list|,
name|thirdSearchScrollRequest
argument_list|,
name|thirdSearchScrollRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"search scroll request is not equal to its copy"
argument_list|,
name|secondSearchScrollRequest
argument_list|,
name|thirdSearchScrollRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"search scroll request copy's hashcode is different from original hashcode"
argument_list|,
name|secondSearchScrollRequest
operator|.
name|hashCode
argument_list|()
argument_list|,
name|thirdSearchScrollRequest
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"equals is not transitive"
argument_list|,
name|firstSearchScrollRequest
argument_list|,
name|thirdSearchScrollRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"search scroll request copy's hashcode is different from original hashcode"
argument_list|,
name|firstSearchScrollRequest
operator|.
name|hashCode
argument_list|()
argument_list|,
name|thirdSearchScrollRequest
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"equals is not symmetric"
argument_list|,
name|thirdSearchScrollRequest
argument_list|,
name|secondSearchScrollRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"equals is not symmetric"
argument_list|,
name|thirdSearchScrollRequest
argument_list|,
name|firstSearchScrollRequest
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|secondSearchScrollRequest
operator|.
name|scrollId
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondSearchScrollRequest
operator|.
name|scrollId
argument_list|()
operator|.
name|equals
argument_list|(
name|firstSearchScrollRequest
operator|.
name|scrollId
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|secondSearchScrollRequest
operator|.
name|scroll
argument_list|(
name|randomPositiveTimeValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondSearchScrollRequest
operator|.
name|scroll
argument_list|()
operator|.
name|equals
argument_list|(
name|firstSearchScrollRequest
operator|.
name|scroll
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|assertNotEquals
argument_list|(
name|firstSearchScrollRequest
argument_list|,
name|secondSearchScrollRequest
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|firstSearchScrollRequest
operator|.
name|hashCode
argument_list|()
argument_list|,
name|secondSearchScrollRequest
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|firstSearchScrollRequest
argument_list|,
name|secondSearchScrollRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|firstSearchScrollRequest
operator|.
name|hashCode
argument_list|()
argument_list|,
name|secondSearchScrollRequest
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createSearchScrollRequest
specifier|public
specifier|static
name|SearchScrollRequest
name|createSearchScrollRequest
parameter_list|()
block|{
name|SearchScrollRequest
name|searchScrollRequest
init|=
operator|new
name|SearchScrollRequest
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|searchScrollRequest
operator|.
name|scroll
argument_list|(
name|randomPositiveTimeValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|searchScrollRequest
return|;
block|}
DECL|method|copyRequest
specifier|private
specifier|static
name|SearchScrollRequest
name|copyRequest
parameter_list|(
name|SearchScrollRequest
name|searchScrollRequest
parameter_list|)
block|{
name|SearchScrollRequest
name|result
init|=
operator|new
name|SearchScrollRequest
argument_list|()
decl_stmt|;
name|result
operator|.
name|scrollId
argument_list|(
name|searchScrollRequest
operator|.
name|scrollId
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|scroll
argument_list|(
name|searchScrollRequest
operator|.
name|scroll
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

