begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|shards
operator|.
name|ClusterSearchShardsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_class
DECL|class|RemoteClusterConnectionTests
specifier|public
class|class
name|RemoteClusterConnectionTests
extends|extends
name|ESIntegTestCase
block|{
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
init|=
operator|new
name|TestThreadPool
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|threadPool
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|testConnect
specifier|public
name|void
name|testConnect
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ClusterStateResponse
name|clusterStateResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|clear
argument_list|()
operator|.
name|setNodes
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|DiscoveryNode
argument_list|>
name|dataNodes
init|=
name|clusterStateResponse
operator|.
name|getState
argument_list|()
operator|.
name|getNodes
argument_list|()
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|node
init|=
name|dataNodes
operator|.
name|valuesIt
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
init|(
name|MockTransportService
name|service
init|=
name|MockTransportService
operator|.
name|createNewService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|threadPool
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
name|RemoteClusterConnection
name|connection
init|=
operator|new
name|RemoteClusterConnection
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"test-cluster"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|node
argument_list|)
argument_list|,
name|service
argument_list|)
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|exceptionAtomicReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|ActionListener
argument_list|<
name|Void
argument_list|>
name|listener
init|=
name|ActionListener
operator|.
name|wrap
argument_list|(
name|x
lambda|->
name|latch
operator|.
name|countDown
argument_list|()
argument_list|,
name|x
lambda|->
block|{
name|exceptionAtomicReference
operator|.
name|set
argument_list|(
name|x
argument_list|)
argument_list|;
name|latch
operator|.
name|countDown
argument_list|()
argument_list|;
block|}
block|)
function|;
name|connection
operator|.
name|connectWithSeeds
parameter_list|(
name|listener
parameter_list|)
constructor_decl|;
name|latch
operator|.
name|await
parameter_list|()
constructor_decl|;
name|assertTrue
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodesIterable
init|=
name|dataNodes
operator|::
name|valuesIt
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|dataNode
range|:
name|nodesIterable
control|)
block|{
name|assertTrue
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|dataNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|exceptionAtomicReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_class

begin_function
unit|}      public
DECL|method|testFetchShards
name|void
name|testFetchShards
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ClusterStateResponse
name|clusterStateResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|clear
argument_list|()
operator|.
name|setNodes
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|DiscoveryNode
argument_list|>
name|dataNodes
init|=
name|clusterStateResponse
operator|.
name|getState
argument_list|()
operator|.
name|getNodes
argument_list|()
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|node
init|=
name|dataNodes
operator|.
name|valuesIt
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
init|(
name|MockTransportService
name|service
init|=
name|MockTransportService
operator|.
name|createNewService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|threadPool
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
name|RemoteClusterConnection
name|connection
init|=
operator|new
name|RemoteClusterConnection
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"test-cluster"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|node
argument_list|)
argument_list|,
name|service
argument_list|)
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|exceptionAtomicReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|ActionListener
argument_list|<
name|Void
argument_list|>
name|listener
init|=
name|ActionListener
operator|.
name|wrap
argument_list|(
name|x
lambda|->
name|latch
operator|.
name|countDown
argument_list|()
argument_list|,
name|x
lambda|->
block|{
name|exceptionAtomicReference
operator|.
name|set
argument_list|(
name|x
argument_list|)
argument_list|;
name|latch
operator|.
name|countDown
argument_list|()
argument_list|;
block|}
block|)
function|;
end_function

begin_expr_stmt
name|connection
operator|.
name|connectWithSeeds
argument_list|(
name|listener
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|String
name|newNode
init|=
name|internalCluster
argument_list|()
operator|.
name|startDataOnlyNode
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|createIndex
argument_list|(
literal|"test-index"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Iterable
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodesIterable
init|=
name|dataNodes
operator|::
name|valuesIt
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|DiscoveryNode
name|dataNode
range|:
name|nodesIterable
control|)
block|{
if|if
condition|(
name|dataNode
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|newNode
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|dataNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|dataNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_for

begin_expr_stmt
name|assertNull
argument_list|(
name|exceptionAtomicReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|SearchRequest
name|request
init|=
operator|new
name|SearchRequest
argument_list|(
literal|"test-index"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CountDownLatch
name|responseLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|AtomicReference
argument_list|<
name|ClusterSearchShardsResponse
argument_list|>
name|reference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|failReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ActionListener
argument_list|<
name|ClusterSearchShardsResponse
argument_list|>
name|shardsListener
init|=
name|ActionListener
operator|.
name|wrap
argument_list|(
name|x
lambda|->
block|{
name|reference
operator|.
name|set
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|responseLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
argument_list|,
name|x
lambda|->
block|{
name|failReference
operator|.
name|set
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|responseLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|connection
operator|.
name|fetchSearchShards
argument_list|(
name|request
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test-index"
argument_list|)
argument_list|,
name|shardsListener
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|responseLatch
operator|.
name|await
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertNull
argument_list|(
name|failReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertNotNull
argument_list|(
name|reference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ClusterSearchShardsResponse
name|clusterSearchShardsResponse
init|=
name|reference
operator|.
name|get
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|DiscoveryNode
index|[]
name|nodes
init|=
name|clusterSearchShardsResponse
operator|.
name|getNodes
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|nodes
operator|.
name|length
operator|!=
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|DiscoveryNode
name|dataNode
range|:
name|nodes
control|)
block|{
name|assertTrue
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|dataNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_for

unit|}     } }
end_unit

