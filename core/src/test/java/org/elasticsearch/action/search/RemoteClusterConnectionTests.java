begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|shards
operator|.
name|ClusterSearchShardsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|shards
operator|.
name|ClusterSearchShardsGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|shards
operator|.
name|ClusterSearchShardsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|shards
operator|.
name|ClusterSearchShardsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|CancellableThreads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|mocksocket
operator|.
name|MockServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportConnectionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|AlreadyConnectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_class
DECL|class|RemoteClusterConnectionTests
specifier|public
class|class
name|RemoteClusterConnectionTests
extends|extends
name|ESTestCase
block|{
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
init|=
operator|new
name|TestThreadPool
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|threadPool
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|startTransport
specifier|public
name|MockTransportService
name|startTransport
parameter_list|(
name|String
name|id
parameter_list|,
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|knownNodes
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|MockTransportService
name|newService
init|=
name|MockTransportService
operator|.
name|createNewService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|version
argument_list|,
name|threadPool
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|newService
operator|.
name|registerRequestHandler
argument_list|(
name|ClusterSearchShardsAction
operator|.
name|NAME
argument_list|,
name|ClusterSearchShardsRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
parameter_list|(
name|request
parameter_list|,
name|channel
parameter_list|)
lambda|->
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|ClusterSearchShardsResponse
argument_list|(
operator|new
name|ClusterSearchShardsGroup
index|[
literal|0
index|]
argument_list|,
name|knownNodes
operator|.
name|toArray
argument_list|(
operator|new
name|DiscoveryNode
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|newService
operator|.
name|registerRequestHandler
argument_list|(
name|ClusterStateAction
operator|.
name|NAME
argument_list|,
name|ClusterStateRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
parameter_list|(
name|request
parameter_list|,
name|channel
parameter_list|)
lambda|->
block|{
name|DiscoveryNodes
operator|.
name|Builder
name|builder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|knownNodes
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|ClusterState
name|build
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|nodes
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|ClusterStateResponse
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|,
name|build
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|newService
operator|.
name|start
argument_list|()
expr_stmt|;
name|newService
operator|.
name|setLocalNode
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
name|id
argument_list|,
name|newService
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|newService
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|newService
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|newService
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDiscoverSingleNode
specifier|public
name|void
name|testDiscoverSingleNode
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|knownNodes
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|MockTransportService
name|seedTransport
init|=
name|startTransport
argument_list|(
literal|"seed_node"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
init|;
name|MockTransportService
name|discoverableTransport
operator|=
name|startTransport
argument_list|(
literal|"discoverable_node"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
init|)
block|{
name|DiscoveryNode
name|seedNode
init|=
name|seedTransport
operator|.
name|getLocalDiscoNode
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|discoverableNode
init|=
name|discoverableTransport
operator|.
name|getLocalDiscoNode
argument_list|()
decl_stmt|;
name|knownNodes
operator|.
name|add
argument_list|(
name|seedTransport
operator|.
name|getLocalDiscoNode
argument_list|()
argument_list|)
expr_stmt|;
name|knownNodes
operator|.
name|add
argument_list|(
name|discoverableTransport
operator|.
name|getLocalDiscoNode
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|knownNodes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|MockTransportService
name|service
init|=
name|MockTransportService
operator|.
name|createNewService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|threadPool
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
try|try
init|(
name|RemoteClusterConnection
name|connection
init|=
operator|new
name|RemoteClusterConnection
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"test-cluster"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|seedNode
argument_list|)
argument_list|,
name|service
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|n
lambda|->
literal|true
argument_list|)
init|)
block|{
name|updateSeedNodes
argument_list|(
name|connection
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|seedNode
argument_list|)
argument_list|)
block|;
name|assertTrue
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|seedNode
argument_list|)
argument_list|)
block|;
name|assertTrue
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|discoverableNode
argument_list|)
argument_list|)
block|;
name|assertTrue
argument_list|(
name|connection
operator|.
name|assertNoRunningConnections
argument_list|()
argument_list|)
block|;                 }
block|}
block|}
block|}
DECL|method|testDiscoverSingleNodeWithIncompatibleSeed
specifier|public
name|void
name|testDiscoverSingleNodeWithIncompatibleSeed
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|knownNodes
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|MockTransportService
name|seedTransport
init|=
name|startTransport
argument_list|(
literal|"seed_node"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
init|;
name|MockTransportService
name|incomaptibleTransport
operator|=
name|startTransport
argument_list|(
literal|"incompat_seed_node"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|fromString
argument_list|(
literal|"2.0.0"
argument_list|)
argument_list|)
init|;
name|MockTransportService
name|discoverableTransport
operator|=
name|startTransport
argument_list|(
literal|"discoverable_node"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
init|)
block|{
name|DiscoveryNode
name|seedNode
init|=
name|seedTransport
operator|.
name|getLocalDiscoNode
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|discoverableNode
init|=
name|discoverableTransport
operator|.
name|getLocalDiscoNode
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|incompatibleSeedNode
init|=
name|incomaptibleTransport
operator|.
name|getLocalDiscoNode
argument_list|()
decl_stmt|;
name|knownNodes
operator|.
name|add
argument_list|(
name|seedTransport
operator|.
name|getLocalDiscoNode
argument_list|()
argument_list|)
expr_stmt|;
name|knownNodes
operator|.
name|add
argument_list|(
name|discoverableTransport
operator|.
name|getLocalDiscoNode
argument_list|()
argument_list|)
expr_stmt|;
name|knownNodes
operator|.
name|add
argument_list|(
name|incomaptibleTransport
operator|.
name|getLocalDiscoNode
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|knownNodes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|seedNodes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|incompatibleSeedNode
argument_list|,
name|seedNode
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|seedNodes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|MockTransportService
name|service
init|=
name|MockTransportService
operator|.
name|createNewService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|threadPool
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
try|try
init|(
name|RemoteClusterConnection
name|connection
init|=
operator|new
name|RemoteClusterConnection
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"test-cluster"
argument_list|,
name|seedNodes
argument_list|,
name|service
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|n
lambda|->
literal|true
argument_list|)
init|)
block|{
name|updateSeedNodes
argument_list|(
name|connection
argument_list|,
name|seedNodes
argument_list|)
block|;
name|assertTrue
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|seedNode
argument_list|)
argument_list|)
block|;
name|assertTrue
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|discoverableNode
argument_list|)
argument_list|)
block|;
name|assertFalse
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|incompatibleSeedNode
argument_list|)
argument_list|)
block|;
name|assertTrue
argument_list|(
name|connection
operator|.
name|assertNoRunningConnections
argument_list|()
argument_list|)
block|;                 }
block|}
block|}
block|}
DECL|method|testNodeDisconnected
specifier|public
name|void
name|testNodeDisconnected
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|knownNodes
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|MockTransportService
name|seedTransport
init|=
name|startTransport
argument_list|(
literal|"seed_node"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
init|;
name|MockTransportService
name|discoverableTransport
operator|=
name|startTransport
argument_list|(
literal|"discoverable_node"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
init|;
name|MockTransportService
name|spareTransport
operator|=
name|startTransport
argument_list|(
literal|"spare_node"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
init|)
block|{
name|DiscoveryNode
name|seedNode
init|=
name|seedTransport
operator|.
name|getLocalDiscoNode
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|discoverableNode
init|=
name|discoverableTransport
operator|.
name|getLocalDiscoNode
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|spareNode
init|=
name|spareTransport
operator|.
name|getLocalDiscoNode
argument_list|()
decl_stmt|;
name|knownNodes
operator|.
name|add
argument_list|(
name|seedTransport
operator|.
name|getLocalDiscoNode
argument_list|()
argument_list|)
expr_stmt|;
name|knownNodes
operator|.
name|add
argument_list|(
name|discoverableTransport
operator|.
name|getLocalDiscoNode
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|knownNodes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|MockTransportService
name|service
init|=
name|MockTransportService
operator|.
name|createNewService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|threadPool
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
try|try
init|(
name|RemoteClusterConnection
name|connection
init|=
operator|new
name|RemoteClusterConnection
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"test-cluster"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|seedNode
argument_list|)
argument_list|,
name|service
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|n
lambda|->
literal|true
argument_list|)
init|)
block|{
name|updateSeedNodes
argument_list|(
name|connection
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|seedNode
argument_list|)
argument_list|)
block|;
name|assertTrue
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|seedNode
argument_list|)
argument_list|)
block|;
name|assertTrue
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|discoverableNode
argument_list|)
argument_list|)
block|;
name|assertFalse
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|spareNode
argument_list|)
argument_list|)
block|;
name|knownNodes
operator|.
name|add
argument_list|(
name|spareNode
argument_list|)
block|;
name|CountDownLatch
name|latchDisconnect
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
block|;
name|CountDownLatch
name|latchConnected
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
block|;
name|service
operator|.
name|addConnectionListener
argument_list|(
operator|new
name|TransportConnectionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNodeDisconnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|equals
argument_list|(
name|discoverableNode
argument_list|)
condition|)
block|{
name|latchDisconnect
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onNodeConnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|equals
argument_list|(
name|spareNode
argument_list|)
condition|)
block|{
name|latchConnected
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|)
function|;
name|discoverableTransport
operator|.
name|close
parameter_list|()
constructor_decl|;
comment|// now make sure we try to connect again to other nodes once we got disconnected
name|assertTrue
argument_list|(
name|latchDisconnect
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latchConnected
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|spareNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_class

begin_function
unit|}         }     }      public
DECL|method|testFilterDiscoveredNodes
name|void
name|testFilterDiscoveredNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|knownNodes
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|MockTransportService
name|seedTransport
init|=
name|startTransport
argument_list|(
literal|"seed_node"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
init|;
name|MockTransportService
name|discoverableTransport
operator|=
name|startTransport
argument_list|(
literal|"discoverable_node"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
init|)
block|{
name|DiscoveryNode
name|seedNode
init|=
name|seedTransport
operator|.
name|getLocalDiscoNode
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|discoverableNode
init|=
name|discoverableTransport
operator|.
name|getLocalDiscoNode
argument_list|()
decl_stmt|;
name|knownNodes
operator|.
name|add
argument_list|(
name|seedTransport
operator|.
name|getLocalDiscoNode
argument_list|()
argument_list|)
expr_stmt|;
name|knownNodes
operator|.
name|add
argument_list|(
name|discoverableTransport
operator|.
name|getLocalDiscoNode
argument_list|()
argument_list|)
expr_stmt|;
name|DiscoveryNode
name|rejectedNode
init|=
name|randomBoolean
argument_list|()
condition|?
name|seedNode
else|:
name|discoverableNode
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|knownNodes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|MockTransportService
name|service
init|=
name|MockTransportService
operator|.
name|createNewService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|threadPool
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
try|try
init|(
name|RemoteClusterConnection
name|connection
init|=
operator|new
name|RemoteClusterConnection
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"test-cluster"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|seedNode
argument_list|)
argument_list|,
name|service
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|n
lambda|->
name|n
operator|.
name|equals
argument_list|(
name|rejectedNode
argument_list|)
operator|==
literal|false
argument_list|)
init|)
block|{
name|updateSeedNodes
argument_list|(
name|connection
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|seedNode
argument_list|)
argument_list|)
block|;
if|if
condition|(
name|rejectedNode
operator|.
name|equals
argument_list|(
name|seedNode
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|seedNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|discoverableNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|seedNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|discoverableNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|connection
operator|.
name|assertNoRunningConnections
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
unit|}      private
DECL|method|updateSeedNodes
name|void
name|updateSeedNodes
parameter_list|(
name|RemoteClusterConnection
name|connection
parameter_list|,
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|seedNodes
parameter_list|)
throws|throws
name|Exception
block|{
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|exceptionAtomicReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|ActionListener
argument_list|<
name|Void
argument_list|>
name|listener
init|=
name|ActionListener
operator|.
name|wrap
argument_list|(
name|x
lambda|->
name|latch
operator|.
name|countDown
argument_list|()
argument_list|,
name|x
lambda|->
block|{
name|exceptionAtomicReference
operator|.
name|set
argument_list|(
name|x
argument_list|)
argument_list|;
name|latch
operator|.
name|countDown
argument_list|()
argument_list|;
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|connection
operator|.
name|updateSeedNodes
argument_list|(
name|seedNodes
argument_list|,
name|listener
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|exceptionAtomicReference
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exceptionAtomicReference
operator|.
name|get
argument_list|()
throw|;
block|}
end_if

begin_function
unit|}      public
DECL|method|testConnectWithIncompatibleTransports
name|void
name|testConnectWithIncompatibleTransports
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|knownNodes
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|MockTransportService
name|seedTransport
init|=
name|startTransport
argument_list|(
literal|"seed_node"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|fromString
argument_list|(
literal|"2.0.0"
argument_list|)
argument_list|)
init|)
block|{
name|DiscoveryNode
name|seedNode
init|=
name|seedTransport
operator|.
name|getLocalDiscoNode
argument_list|()
decl_stmt|;
name|knownNodes
operator|.
name|add
argument_list|(
name|seedTransport
operator|.
name|getLocalDiscoNode
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|MockTransportService
name|service
init|=
name|MockTransportService
operator|.
name|createNewService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|threadPool
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
try|try
init|(
name|RemoteClusterConnection
name|connection
init|=
operator|new
name|RemoteClusterConnection
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"test-cluster"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|seedNode
argument_list|)
argument_list|,
name|service
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|n
lambda|->
literal|true
argument_list|)
init|)
block|{
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|updateSeedNodes
argument_list|(
name|connection
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|seedNode
argument_list|)
argument_list|)
argument_list|)
block|;
name|assertFalse
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|seedNode
argument_list|)
argument_list|)
block|;
name|assertTrue
argument_list|(
name|connection
operator|.
name|assertNoRunningConnections
argument_list|()
argument_list|)
block|;                 }
block|}
block|}
block|}
end_function

begin_function
DECL|method|testSlowNodeCanBeCanceled
specifier|public
name|void
name|testSlowNodeCanBeCanceled
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
init|(
name|ServerSocket
name|socket
init|=
operator|new
name|MockServerSocket
argument_list|()
init|)
block|{
name|socket
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setReuseAddress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DiscoveryNode
name|seedNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"TEST"
argument_list|,
operator|new
name|TransportAddress
argument_list|(
name|socket
operator|.
name|getInetAddress
argument_list|()
argument_list|,
name|socket
operator|.
name|getLocalPort
argument_list|()
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|CountDownLatch
name|acceptedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|closeRemote
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
init|(
name|Socket
name|accept
init|=
name|socket
operator|.
name|accept
argument_list|()
init|)
block|{
name|acceptedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|closeRemote
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// that's fine we might close
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
init|(
name|MockTransportService
name|service
init|=
name|MockTransportService
operator|.
name|createNewService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|threadPool
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|exceptionAtomicReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|RemoteClusterConnection
name|connection
init|=
operator|new
name|RemoteClusterConnection
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"test-cluster"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|seedNode
argument_list|)
argument_list|,
name|service
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|n
lambda|->
literal|true
argument_list|)
init|)
block|{
name|ActionListener
argument_list|<
name|Void
argument_list|>
name|listener
operator|=
name|ActionListener
operator|.
name|wrap
argument_list|(
name|x
lambda|->
block|{}
argument_list|,
name|x
lambda|->
block|{
name|exceptionAtomicReference
operator|.
name|set
argument_list|(
name|x
argument_list|)
block|;                     }
argument_list|)
block|;
name|connection
operator|.
name|updateSeedNodes
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|seedNode
argument_list|)
argument_list|,
name|listener
argument_list|)
block|;
name|acceptedLatch
operator|.
name|await
argument_list|()
block|;
name|connection
operator|.
name|close
argument_list|()
block|;
comment|// now close it, this should trigger an interrupt on the socket and we can move on
name|assertTrue
argument_list|(
name|connection
operator|.
name|assertNoRunningConnections
argument_list|()
argument_list|)
block|;                 }
name|closeRemote
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|expectThrows
argument_list|(
name|CancellableThreads
operator|.
name|ExecutionCancelledException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
throw|throw
name|exceptionAtomicReference
operator|.
name|get
argument_list|()
throw|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|testFetchShards
specifier|public
name|void
name|testFetchShards
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|knownNodes
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|MockTransportService
name|seedTransport
init|=
name|startTransport
argument_list|(
literal|"seed_node"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
init|;
name|MockTransportService
name|discoverableTransport
operator|=
name|startTransport
argument_list|(
literal|"discoverable_node"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
init|)
block|{
name|DiscoveryNode
name|seedNode
init|=
name|seedTransport
operator|.
name|getLocalDiscoNode
argument_list|()
decl_stmt|;
name|knownNodes
operator|.
name|add
argument_list|(
name|seedTransport
operator|.
name|getLocalDiscoNode
argument_list|()
argument_list|)
expr_stmt|;
name|knownNodes
operator|.
name|add
argument_list|(
name|discoverableTransport
operator|.
name|getLocalDiscoNode
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|knownNodes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|MockTransportService
name|service
init|=
name|MockTransportService
operator|.
name|createNewService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|threadPool
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
try|try
init|(
name|RemoteClusterConnection
name|connection
init|=
operator|new
name|RemoteClusterConnection
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"test-cluster"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|seedNode
argument_list|)
argument_list|,
name|service
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|n
lambda|->
literal|true
argument_list|)
init|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|updateSeedNodes
argument_list|(
name|connection
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|seedNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SearchRequest
name|request
init|=
operator|new
name|SearchRequest
argument_list|(
literal|"test-index"
argument_list|)
decl_stmt|;
name|CountDownLatch
name|responseLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AtomicReference
argument_list|<
name|ClusterSearchShardsResponse
argument_list|>
name|reference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|failReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|ActionListener
argument_list|<
name|ClusterSearchShardsResponse
argument_list|>
name|shardsListener
init|=
name|ActionListener
operator|.
name|wrap
argument_list|(
name|x
lambda|->
block|{
name|reference
operator|.
name|set
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|responseLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
argument_list|,
name|x
lambda|->
block|{
name|failReference
operator|.
name|set
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|responseLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|connection
operator|.
name|fetchSearchShards
argument_list|(
name|request
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test-index"
argument_list|)
argument_list|,
name|shardsListener
argument_list|)
expr_stmt|;
name|responseLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|failReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterSearchShardsResponse
name|clusterSearchShardsResponse
init|=
name|reference
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|knownNodes
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|clusterSearchShardsResponse
operator|.
name|getNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|connection
operator|.
name|assertNoRunningConnections
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
unit|}      public
DECL|method|testTriggerUpdatesConcurrently
name|void
name|testTriggerUpdatesConcurrently
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|knownNodes
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|MockTransportService
name|seedTransport
init|=
name|startTransport
argument_list|(
literal|"seed_node"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
init|;
name|MockTransportService
name|seedTransport1
operator|=
name|startTransport
argument_list|(
literal|"seed_node_1"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
init|;
name|MockTransportService
name|discoverableTransport
operator|=
name|startTransport
argument_list|(
literal|"discoverable_node"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
init|)
block|{
name|DiscoveryNode
name|seedNode
init|=
name|seedTransport
operator|.
name|getLocalDiscoNode
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|discoverableNode
init|=
name|discoverableTransport
operator|.
name|getLocalDiscoNode
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|seedNode1
init|=
name|seedTransport1
operator|.
name|getLocalDiscoNode
argument_list|()
decl_stmt|;
name|knownNodes
operator|.
name|add
argument_list|(
name|seedTransport
operator|.
name|getLocalDiscoNode
argument_list|()
argument_list|)
expr_stmt|;
name|knownNodes
operator|.
name|add
argument_list|(
name|discoverableTransport
operator|.
name|getLocalDiscoNode
argument_list|()
argument_list|)
expr_stmt|;
name|knownNodes
operator|.
name|add
argument_list|(
name|seedTransport1
operator|.
name|getLocalDiscoNode
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|knownNodes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|seedNodes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|seedNode1
argument_list|,
name|seedNode
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|seedNodes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|MockTransportService
name|service
init|=
name|MockTransportService
operator|.
name|createNewService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|threadPool
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
try|try
init|(
name|RemoteClusterConnection
name|connection
init|=
operator|new
name|RemoteClusterConnection
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"test-cluster"
argument_list|,
name|seedNodes
argument_list|,
name|service
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|n
lambda|->
literal|true
argument_list|)
init|)
block|{
name|int
name|numThreads
operator|=
name|randomIntBetween
argument_list|(
literal|4
argument_list|,
literal|10
argument_list|)
block|;
name|Thread
index|[]
name|threads
operator|=
operator|new
name|Thread
index|[
name|numThreads
index|]
block|;
name|CyclicBarrier
name|barrier
operator|=
operator|new
name|CyclicBarrier
argument_list|(
name|numThreads
argument_list|)
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|numConnectionAttempts
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numConnectionAttempts
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numConnectionAttempts
condition|;
name|i
operator|++
control|)
block|{
name|AtomicBoolean
name|executed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ActionListener
argument_list|<
name|Void
argument_list|>
name|listener
init|=
name|ActionListener
operator|.
name|wrap
argument_list|(
name|x
lambda|->
block|{
name|assertTrue
argument_list|(
name|executed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
argument_list|,
name|x
lambda|->
block|{
name|assertTrue
argument_list|(
name|executed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|x
operator|instanceof
name|RejectedExecutionException
condition|)
block|{
comment|// that's fine
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|x
argument_list|)
throw|;
block|}
block|}
argument_list|)
decl_stmt|;
name|connection
operator|.
name|updateSeedNodes
argument_list|(
name|seedNodes
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}                      for
operator|(
name|int
name|i
operator|=
literal|0
expr|;
name|i
operator|<
name|threads
operator|.
name|length
expr|;
name|i
operator|++
operator|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
block|;                     }
name|assertTrue
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|seedNode
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|discoverableNode
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|service
operator|.
name|nodeConnected
argument_list|(
name|seedNode1
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|connection
operator|.
name|assertNoRunningConnections
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}             }         }     }
DECL|method|testCloseWhileConcurrentlyConnecting
specifier|public
name|void
name|testCloseWhileConcurrentlyConnecting
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|BrokenBarrierException
block|{
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|knownNodes
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|MockTransportService
name|seedTransport
init|=
name|startTransport
argument_list|(
literal|"seed_node"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
init|;
name|MockTransportService
name|seedTransport1
operator|=
name|startTransport
argument_list|(
literal|"seed_node_1"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
init|;
name|MockTransportService
name|discoverableTransport
operator|=
name|startTransport
argument_list|(
literal|"discoverable_node"
argument_list|,
name|knownNodes
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
init|)
block|{
name|DiscoveryNode
name|seedNode
init|=
name|seedTransport
operator|.
name|getLocalDiscoNode
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|seedNode1
init|=
name|seedTransport1
operator|.
name|getLocalDiscoNode
argument_list|()
decl_stmt|;
name|knownNodes
operator|.
name|add
argument_list|(
name|seedTransport
operator|.
name|getLocalDiscoNode
argument_list|()
argument_list|)
expr_stmt|;
name|knownNodes
operator|.
name|add
argument_list|(
name|discoverableTransport
operator|.
name|getLocalDiscoNode
argument_list|()
argument_list|)
expr_stmt|;
name|knownNodes
operator|.
name|add
argument_list|(
name|seedTransport1
operator|.
name|getLocalDiscoNode
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|knownNodes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|seedNodes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|seedNode1
argument_list|,
name|seedNode
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|seedNodes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|MockTransportService
name|service
init|=
name|MockTransportService
operator|.
name|createNewService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|threadPool
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
try|try
init|(
name|RemoteClusterConnection
name|connection
init|=
operator|new
name|RemoteClusterConnection
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"test-cluster"
argument_list|,
name|seedNodes
argument_list|,
name|service
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|n
lambda|->
literal|true
argument_list|)
init|)
block|{
name|int
name|numThreads
operator|=
name|randomIntBetween
argument_list|(
literal|4
argument_list|,
literal|10
argument_list|)
block|;
name|Thread
index|[]
name|threads
operator|=
operator|new
name|Thread
index|[
name|numThreads
index|]
block|;
name|CyclicBarrier
name|barrier
operator|=
operator|new
name|CyclicBarrier
argument_list|(
name|numThreads
operator|+
literal|1
argument_list|)
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|numConnectionAttempts
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numConnectionAttempts
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numConnectionAttempts
condition|;
name|i
operator|++
control|)
block|{
name|AtomicBoolean
name|executed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ActionListener
argument_list|<
name|Void
argument_list|>
name|listener
init|=
name|ActionListener
operator|.
name|wrap
argument_list|(
name|x
lambda|->
block|{
name|assertTrue
argument_list|(
name|executed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
argument_list|,
name|x
lambda|->
block|{
name|assertTrue
argument_list|(
name|executed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|x
operator|instanceof
name|RejectedExecutionException
operator|||
name|x
operator|instanceof
name|AlreadyClosedException
condition|)
block|{
comment|// that's fine
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|x
argument_list|)
throw|;
block|}
block|}
argument_list|)
decl_stmt|;
name|connection
operator|.
name|updateSeedNodes
argument_list|(
name|seedNodes
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}                     barrier
operator|.
name|await
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
end_expr_stmt

unit|}             }         }     } }
end_unit

