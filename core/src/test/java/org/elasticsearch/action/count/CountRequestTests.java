begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.count
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|count
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|CountRequestTests
specifier|public
class|class
name|CountRequestTests
extends|extends
name|ESTestCase
block|{
annotation|@
name|Test
DECL|method|testToSearchRequest
specifier|public
name|void
name|testToSearchRequest
parameter_list|()
block|{
name|CountRequest
name|countRequest
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|countRequest
operator|=
operator|new
name|CountRequest
argument_list|(
name|randomStringArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|countRequest
operator|=
operator|new
name|CountRequest
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|countRequest
operator|.
name|indicesOptions
argument_list|(
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|countRequest
operator|.
name|types
argument_list|(
name|randomStringArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|countRequest
operator|.
name|routing
argument_list|(
name|randomStringArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|countRequest
operator|.
name|preference
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|querySet
decl_stmt|;
if|if
condition|(
name|querySet
operator|=
name|randomBoolean
argument_list|()
condition|)
block|{
name|countRequest
operator|.
name|query
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|countRequest
operator|.
name|minScore
argument_list|(
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|countRequest
operator|.
name|terminateAfter
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SearchRequest
name|searchRequest
init|=
name|countRequest
operator|.
name|toSearchRequest
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchRequest
operator|.
name|indices
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|countRequest
operator|.
name|indices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchRequest
operator|.
name|indicesOptions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|countRequest
operator|.
name|indicesOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchRequest
operator|.
name|types
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|countRequest
operator|.
name|types
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchRequest
operator|.
name|routing
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|countRequest
operator|.
name|routing
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchRequest
operator|.
name|preference
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|countRequest
operator|.
name|preference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchRequest
operator|.
name|source
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|source
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|querySet
condition|)
block|{
name|assertThat
argument_list|(
name|source
operator|.
name|query
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|source
operator|.
name|query
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|source
operator|.
name|minScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|countRequest
operator|.
name|minScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|source
operator|.
name|terminateAfter
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|countRequest
operator|.
name|terminateAfter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|randomStringArray
specifier|private
specifier|static
name|String
index|[]
name|randomStringArray
parameter_list|()
block|{
name|int
name|count
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|String
index|[]
name|indices
init|=
operator|new
name|String
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|indices
index|[
name|i
index|]
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
return|return
name|indices
return|;
block|}
block|}
end_class

end_unit

