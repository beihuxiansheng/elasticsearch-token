begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.ingest.reload
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ingest
operator|.
name|reload
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|LocalTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|PipelineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|ReloadPipelinesActionTests
specifier|public
class|class
name|ReloadPipelinesActionTests
extends|extends
name|ESTestCase
block|{
DECL|field|clusterService
specifier|private
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|transportService
specifier|private
name|TransportService
name|transportService
decl_stmt|;
DECL|field|reloadPipelinesAction
specifier|private
name|ReloadPipelinesAction
name|reloadPipelinesAction
decl_stmt|;
annotation|@
name|Before
DECL|method|init
specifier|public
name|void
name|init
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|EMPTY
decl_stmt|;
name|PipelineStore
name|pipelineStore
init|=
name|mock
argument_list|(
name|PipelineStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|clusterService
operator|=
name|mock
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
expr_stmt|;
name|transportService
operator|=
name|mock
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
expr_stmt|;
name|reloadPipelinesAction
operator|=
operator|new
name|ReloadPipelinesAction
argument_list|(
name|settings
argument_list|,
name|pipelineStore
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|)
expr_stmt|;
block|}
DECL|method|testSuccess
specifier|public
name|void
name|testSuccess
parameter_list|()
block|{
name|int
name|numNodes
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|generateDiscoNodes
argument_list|(
name|numNodes
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
name|mock
lambda|->
block|{
name|TransportResponseHandler
name|handler
init|=
operator|(
name|TransportResponseHandler
operator|)
name|mock
operator|.
name|getArguments
argument_list|()
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNodes
condition|;
name|i
operator|++
control|)
block|{
name|handler
operator|.
name|handleResponse
argument_list|(
operator|new
name|ReloadPipelinesAction
operator|.
name|ReloadPipelinesResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|mock
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|transportService
argument_list|)
operator|.
name|sendRequest
argument_list|(
name|Matchers
operator|.
name|any
argument_list|()
argument_list|,
name|Matchers
operator|.
name|eq
argument_list|(
name|ReloadPipelinesAction
operator|.
name|ACTION_NAME
argument_list|)
argument_list|,
name|Matchers
operator|.
name|any
argument_list|()
argument_list|,
name|Matchers
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|reloadPipelinesAction
operator|.
name|reloadPipelinesOnAllNodes
argument_list|(
name|result
lambda|->
name|assertThat
argument_list|(
name|result
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWithAtLeastOneFailure
specifier|public
name|void
name|testWithAtLeastOneFailure
parameter_list|()
block|{
name|int
name|numNodes
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|generateDiscoNodes
argument_list|(
name|numNodes
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
name|mock
lambda|->
block|{
name|TransportResponseHandler
name|handler
init|=
operator|(
name|TransportResponseHandler
operator|)
name|mock
operator|.
name|getArguments
argument_list|()
index|[
literal|3
index|]
decl_stmt|;
name|handler
operator|.
name|handleException
argument_list|(
operator|new
name|TransportException
argument_list|(
literal|"test failure"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numNodes
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|handler
operator|.
name|handleResponse
argument_list|(
operator|new
name|ReloadPipelinesAction
operator|.
name|ReloadPipelinesResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handler
operator|.
name|handleException
argument_list|(
operator|new
name|TransportException
argument_list|(
literal|"test failure"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mock
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|transportService
argument_list|)
operator|.
name|sendRequest
argument_list|(
name|Matchers
operator|.
name|any
argument_list|()
argument_list|,
name|Matchers
operator|.
name|eq
argument_list|(
name|ReloadPipelinesAction
operator|.
name|ACTION_NAME
argument_list|)
argument_list|,
name|Matchers
operator|.
name|any
argument_list|()
argument_list|,
name|Matchers
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|reloadPipelinesAction
operator|.
name|reloadPipelinesOnAllNodes
argument_list|(
name|result
lambda|->
name|assertThat
argument_list|(
name|result
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|generateDiscoNodes
specifier|private
specifier|static
name|DiscoveryNodes
operator|.
name|Builder
name|generateDiscoNodes
parameter_list|(
name|int
name|numNodes
parameter_list|)
block|{
name|DiscoveryNodes
operator|.
name|Builder
name|discoNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNodes
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|discoNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
name|id
argument_list|,
name|id
argument_list|,
operator|new
name|LocalTransportAddress
argument_list|(
name|id
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|discoNodes
operator|.
name|put
argument_list|(
name|discoNode
argument_list|)
expr_stmt|;
block|}
return|return
name|discoNodes
return|;
block|}
block|}
end_class

end_unit

