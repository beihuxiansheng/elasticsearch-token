begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.main
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|main
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Build
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|ByteBufferStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|MainActionTests
specifier|public
class|class
name|MainActionTests
extends|extends
name|ESTestCase
block|{
DECL|method|testMainResponseSerialization
specifier|public
name|void
name|testMainResponseSerialization
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|nodeName
init|=
literal|"node1"
decl_stmt|;
specifier|final
name|ClusterName
name|clusterName
init|=
operator|new
name|ClusterName
argument_list|(
literal|"cluster1"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|available
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|Version
name|version
init|=
name|Version
operator|.
name|CURRENT
decl_stmt|;
specifier|final
name|Build
name|build
init|=
name|Build
operator|.
name|CURRENT
decl_stmt|;
specifier|final
name|MainResponse
name|mainResponse
init|=
operator|new
name|MainResponse
argument_list|(
name|nodeName
argument_list|,
name|version
argument_list|,
name|clusterName
argument_list|,
name|build
argument_list|,
name|available
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|streamOutput
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|mainResponse
operator|.
name|writeTo
argument_list|(
name|streamOutput
argument_list|)
expr_stmt|;
specifier|final
name|MainResponse
name|serialized
init|=
operator|new
name|MainResponse
argument_list|()
decl_stmt|;
name|serialized
operator|.
name|readFrom
argument_list|(
name|streamOutput
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|serialized
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|nodeName
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|serialized
operator|.
name|getClusterName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|clusterName
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|serialized
operator|.
name|getBuild
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|build
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|serialized
operator|.
name|isAvailable
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|available
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|serialized
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMainResponseXContent
specifier|public
name|void
name|testMainResponseXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|MainResponse
name|mainResponse
init|=
operator|new
name|MainResponse
argument_list|(
literal|"node1"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
operator|new
name|ClusterName
argument_list|(
literal|"cluster1"
argument_list|)
argument_list|,
name|Build
operator|.
name|CURRENT
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"{\"name\":\"node1\",\"cluster_name\":\"cluster1\",\"version\":{\"number\":\""
operator|+
name|Version
operator|.
name|CURRENT
operator|.
name|toString
argument_list|()
operator|+
literal|"\",\"build_hash\":\""
operator|+
name|Build
operator|.
name|CURRENT
operator|.
name|shortHash
argument_list|()
operator|+
literal|"\",\"build_date\":\""
operator|+
name|Build
operator|.
name|CURRENT
operator|.
name|date
argument_list|()
operator|+
literal|"\","
operator|+
literal|"\"build_snapshot\":"
operator|+
name|Build
operator|.
name|CURRENT
operator|.
name|isSnapshot
argument_list|()
operator|+
literal|",\"lucene_version\":\""
operator|+
name|Version
operator|.
name|CURRENT
operator|.
name|luceneVersion
operator|.
name|toString
argument_list|()
operator|+
literal|"\"},\"tagline\":\"You Know, for Search\"}"
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|mainResponse
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|String
name|xContent
init|=
name|builder
operator|.
name|string
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|xContent
argument_list|)
expr_stmt|;
block|}
DECL|method|testMainActionClusterAvailable
specifier|public
name|void
name|testMainActionClusterAvailable
parameter_list|()
block|{
specifier|final
name|ClusterService
name|clusterService
init|=
name|mock
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ClusterName
name|clusterName
init|=
operator|new
name|ClusterName
argument_list|(
literal|"elasticsearch"
argument_list|)
decl_stmt|;
specifier|final
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
literal|"my-node"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|available
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|ClusterBlocks
name|blocks
decl_stmt|;
if|if
condition|(
name|available
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|blocks
operator|=
name|ClusterBlocks
operator|.
name|EMPTY_CLUSTER_BLOCK
expr_stmt|;
block|}
else|else
block|{
name|blocks
operator|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
operator|new
name|ClusterBlock
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|"test global block 400"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|RestStatus
operator|.
name|BAD_REQUEST
argument_list|,
name|ClusterBlockLevel
operator|.
name|ALL
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|blocks
operator|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
operator|new
name|ClusterBlock
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|"test global block 503"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|RestStatus
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
name|ClusterBlockLevel
operator|.
name|ALL
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterName
argument_list|)
operator|.
name|blocks
argument_list|(
name|blocks
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|TransportMainAction
name|action
init|=
operator|new
name|TransportMainAction
argument_list|(
name|settings
argument_list|,
name|mock
argument_list|(
name|ThreadPool
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|ActionFilters
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|IndexNameExpressionResolver
operator|.
name|class
argument_list|)
argument_list|,
name|clusterService
argument_list|)
decl_stmt|;
name|AtomicReference
argument_list|<
name|MainResponse
argument_list|>
name|responseRef
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|action
operator|.
name|doExecute
argument_list|(
operator|new
name|MainRequest
argument_list|()
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|MainResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|MainResponse
name|mainResponse
parameter_list|)
block|{
name|responseRef
operator|.
name|set
argument_list|(
name|mainResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unexpected error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|responseRef
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|available
argument_list|,
name|responseRef
operator|.
name|get
argument_list|()
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|clusterService
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|state
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

