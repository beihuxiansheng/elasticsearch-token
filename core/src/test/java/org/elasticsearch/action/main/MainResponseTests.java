begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.main
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|main
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Build
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
operator|.
name|toXContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|EqualsHashCodeTestUtils
operator|.
name|checkEqualsAndHashCode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|XContentTestUtils
operator|.
name|insertRandomFields
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertToXContentEquivalent
import|;
end_import

begin_class
DECL|class|MainResponseTests
specifier|public
class|class
name|MainResponseTests
extends|extends
name|ESTestCase
block|{
DECL|method|createTestItem
specifier|public
specifier|static
name|MainResponse
name|createTestItem
parameter_list|()
block|{
name|String
name|clusterUuid
init|=
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|ClusterName
name|clusterName
init|=
operator|new
name|ClusterName
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|nodeName
init|=
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Build
name|build
init|=
operator|new
name|Build
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|8
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|(
name|randomNonNegativeLong
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|Version
name|version
init|=
name|VersionUtils
operator|.
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|available
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
return|return
operator|new
name|MainResponse
argument_list|(
name|nodeName
argument_list|,
name|version
argument_list|,
name|clusterName
argument_list|,
name|clusterUuid
argument_list|,
name|build
argument_list|,
name|available
argument_list|)
return|;
block|}
DECL|method|testFromXContent
specifier|public
name|void
name|testFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
name|MainResponse
name|mainResponse
init|=
name|createTestItem
argument_list|()
decl_stmt|;
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|humanReadable
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|BytesReference
name|originalBytes
init|=
name|toShuffledXContent
argument_list|(
name|mainResponse
argument_list|,
name|xContentType
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|,
name|humanReadable
argument_list|)
decl_stmt|;
comment|// we add a few random fields to check that parser is lenient on new fields
name|BytesReference
name|withRandomFields
init|=
name|insertRandomFields
argument_list|(
name|xContentType
argument_list|,
name|originalBytes
argument_list|,
literal|null
argument_list|,
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|MainResponse
name|parsed
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|withRandomFields
argument_list|)
init|)
block|{
name|parsed
operator|=
name|MainResponse
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|mainResponse
operator|.
name|getClusterUuid
argument_list|()
argument_list|,
name|parsed
operator|.
name|getClusterUuid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mainResponse
operator|.
name|getClusterName
argument_list|()
argument_list|,
name|parsed
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mainResponse
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|parsed
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mainResponse
operator|.
name|getBuild
argument_list|()
argument_list|,
name|parsed
operator|.
name|getBuild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mainResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|parsed
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// we cannot recreate the "available" flag from xContent, but should be "true" if request came through
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|parsed
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|assertToXContentEquivalent
argument_list|(
name|originalBytes
argument_list|,
name|toXContent
argument_list|(
name|parsed
argument_list|,
name|xContentType
argument_list|,
name|humanReadable
argument_list|)
argument_list|,
name|xContentType
argument_list|)
expr_stmt|;
block|}
DECL|method|testToXContent
specifier|public
name|void
name|testToXContent
parameter_list|()
throws|throws
name|IOException
block|{
name|Build
name|build
init|=
operator|new
name|Build
argument_list|(
literal|"buildHash"
argument_list|,
literal|"2016-11-15"
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Version
name|version
init|=
name|Version
operator|.
name|CURRENT
decl_stmt|;
name|MainResponse
name|response
init|=
operator|new
name|MainResponse
argument_list|(
literal|"nodeName"
argument_list|,
name|version
argument_list|,
operator|new
name|ClusterName
argument_list|(
literal|"clusterName"
argument_list|)
argument_list|,
literal|"clusterUuid"
argument_list|,
name|build
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|response
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{"
operator|+
literal|"\"name\":\"nodeName\","
operator|+
literal|"\"cluster_name\":\"clusterName\","
operator|+
literal|"\"cluster_uuid\":\"clusterUuid\","
operator|+
literal|"\"version\":{"
operator|+
literal|"\"number\":\""
operator|+
name|version
operator|.
name|toString
argument_list|()
operator|+
literal|"\","
operator|+
literal|"\"build_hash\":\"buildHash\","
operator|+
literal|"\"build_date\":\"2016-11-15\","
operator|+
literal|"\"build_snapshot\":true,"
operator|+
literal|"\"lucene_version\":\""
operator|+
name|version
operator|.
name|luceneVersion
operator|.
name|toString
argument_list|()
operator|+
literal|"\"},"
operator|+
literal|"\"tagline\":\"You Know, for Search\""
operator|+
literal|"}"
argument_list|,
name|builder
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsAndHashcode
specifier|public
name|void
name|testEqualsAndHashcode
parameter_list|()
block|{
name|MainResponse
name|original
init|=
name|createTestItem
argument_list|()
decl_stmt|;
name|checkEqualsAndHashCode
argument_list|(
name|original
argument_list|,
name|MainResponseTests
operator|::
name|copy
argument_list|,
name|MainResponseTests
operator|::
name|mutate
argument_list|)
expr_stmt|;
block|}
DECL|method|copy
specifier|private
specifier|static
name|MainResponse
name|copy
parameter_list|(
name|MainResponse
name|o
parameter_list|)
block|{
return|return
operator|new
name|MainResponse
argument_list|(
name|o
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|o
operator|.
name|getVersion
argument_list|()
argument_list|,
name|o
operator|.
name|getClusterName
argument_list|()
argument_list|,
name|o
operator|.
name|getClusterUuid
argument_list|()
argument_list|,
name|o
operator|.
name|getBuild
argument_list|()
argument_list|,
name|o
operator|.
name|isAvailable
argument_list|()
argument_list|)
return|;
block|}
DECL|method|mutate
specifier|private
specifier|static
name|MainResponse
name|mutate
parameter_list|(
name|MainResponse
name|o
parameter_list|)
block|{
name|String
name|clusterUuid
init|=
name|o
operator|.
name|getClusterUuid
argument_list|()
decl_stmt|;
name|boolean
name|available
init|=
name|o
operator|.
name|isAvailable
argument_list|()
decl_stmt|;
name|Build
name|build
init|=
name|o
operator|.
name|getBuild
argument_list|()
decl_stmt|;
name|Version
name|version
init|=
name|o
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|String
name|nodeName
init|=
name|o
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|ClusterName
name|clusterName
init|=
name|o
operator|.
name|getClusterName
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|clusterUuid
operator|=
name|clusterUuid
operator|+
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|nodeName
operator|=
name|nodeName
operator|+
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|available
operator|=
operator|!
name|available
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// toggle the snapshot flag of the original Build parameter
name|build
operator|=
operator|new
name|Build
argument_list|(
name|build
operator|.
name|shortHash
argument_list|()
argument_list|,
name|build
operator|.
name|date
argument_list|()
argument_list|,
operator|!
name|build
operator|.
name|isSnapshot
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|version
operator|=
name|randomValueOtherThan
argument_list|(
name|version
argument_list|,
parameter_list|()
lambda|->
name|VersionUtils
operator|.
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|clusterName
operator|=
operator|new
name|ClusterName
argument_list|(
name|clusterName
operator|+
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
operator|new
name|MainResponse
argument_list|(
name|nodeName
argument_list|,
name|version
argument_list|,
name|clusterName
argument_list|,
name|clusterUuid
argument_list|,
name|build
argument_list|,
name|available
argument_list|)
return|;
block|}
block|}
end_class

end_unit

