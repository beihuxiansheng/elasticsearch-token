begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_class
DECL|class|DocWriteResponseTests
specifier|public
class|class
name|DocWriteResponseTests
extends|extends
name|ESTestCase
block|{
DECL|method|testGetLocation
specifier|public
name|void
name|testGetLocation
parameter_list|()
block|{
name|DocWriteResponse
name|response
init|=
operator|new
name|DocWriteResponse
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"uuid"
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|0
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|)
block|{
comment|// DocWriteResponse is abstract so we have to sneak a subclass in here to test it.
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/index/type/id"
argument_list|,
name|response
operator|.
name|getLocation
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/index/type/id?routing=test_routing"
argument_list|,
name|response
operator|.
name|getLocation
argument_list|(
literal|"test_routing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

