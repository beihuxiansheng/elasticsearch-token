begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support.replication
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|UnavailableShardsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActiveShardCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationResponse
operator|.
name|ShardInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardNotStartedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ClusterStateCreationUtils
operator|.
name|state
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ClusterStateCreationUtils
operator|.
name|stateWithActivePrimary
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|arrayWithSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|ReplicationOperationTests
specifier|public
class|class
name|ReplicationOperationTests
extends|extends
name|ESTestCase
block|{
DECL|method|testReplication
specifier|public
name|void
name|testReplication
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|stateWithActivePrimary
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|IndexMetaData
name|indexMetaData
init|=
name|state
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|final
name|long
name|primaryTerm
init|=
name|indexMetaData
operator|.
name|primaryTerm
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|IndexShardRoutingTable
name|indexShardRoutingTable
init|=
name|state
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|ShardRouting
name|primaryShard
init|=
name|indexShardRoutingTable
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
if|if
condition|(
name|primaryShard
operator|.
name|relocating
argument_list|()
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// simulate execution of the replication phase on the relocation target node after relocation source was marked as relocated
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|primaryShard
operator|.
name|relocatingNodeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|primaryShard
operator|=
name|primaryShard
operator|.
name|getTargetRelocatingShard
argument_list|()
expr_stmt|;
block|}
comment|// add a few in-sync allocation ids that don't have corresponding routing entries
name|Set
argument_list|<
name|String
argument_list|>
name|staleAllocationIds
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|generateRandomStringArray
argument_list|(
literal|4
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexMetaData
argument_list|)
operator|.
name|putInSyncAllocationIds
argument_list|(
literal|0
argument_list|,
name|Sets
operator|.
name|union
argument_list|(
name|indexMetaData
operator|.
name|inSyncAllocationIds
argument_list|(
literal|0
argument_list|)
argument_list|,
name|staleAllocationIds
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|ShardRouting
argument_list|>
name|expectedReplicas
init|=
name|getExpectedReplicas
argument_list|(
name|shardId
argument_list|,
name|state
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|Exception
argument_list|>
name|expectedFailures
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ShardRouting
argument_list|>
name|expectedFailedShards
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|replica
range|:
name|expectedReplicas
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|Exception
name|t
decl_stmt|;
name|boolean
name|criticalFailure
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|criticalFailure
condition|)
block|{
name|t
operator|=
operator|new
name|CorruptIndexException
argument_list|(
literal|"simulated"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|=
operator|new
name|IndexShardNotStartedException
argument_list|(
name|shardId
argument_list|,
name|IndexShardState
operator|.
name|RECOVERING
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"--> simulating failure on {} with [{}]"
argument_list|,
name|replica
argument_list|,
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|expectedFailures
operator|.
name|put
argument_list|(
name|replica
argument_list|,
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|criticalFailure
condition|)
block|{
name|expectedFailedShards
operator|.
name|add
argument_list|(
name|replica
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|TestPrimary
operator|.
name|Result
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ClusterState
name|finalState
init|=
name|state
decl_stmt|;
specifier|final
name|TestReplicaProxy
name|replicasProxy
init|=
operator|new
name|TestReplicaProxy
argument_list|(
name|expectedFailures
argument_list|)
decl_stmt|;
specifier|final
name|TestReplicationOperation
name|op
init|=
operator|new
name|TestReplicationOperation
argument_list|(
name|request
argument_list|,
operator|new
name|TestPrimary
argument_list|(
name|primaryShard
argument_list|,
name|primaryTerm
argument_list|)
argument_list|,
name|listener
argument_list|,
name|replicasProxy
argument_list|,
parameter_list|()
lambda|->
name|finalState
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|primaryTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|primaryTerm
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"request was not processed on primary"
argument_list|,
name|request
operator|.
name|processedOnPrimary
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|processedOnReplicas
argument_list|,
name|equalTo
argument_list|(
name|expectedReplicas
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|replicasProxy
operator|.
name|failedReplicas
argument_list|,
name|equalTo
argument_list|(
name|expectedFailedShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|replicasProxy
operator|.
name|markedAsStaleCopies
argument_list|,
name|equalTo
argument_list|(
name|staleAllocationIds
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"listener is not marked as done"
argument_list|,
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|ShardInfo
name|shardInfo
init|=
name|listener
operator|.
name|actionGet
argument_list|()
operator|.
name|getShardInfo
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|shardInfo
operator|.
name|getFailed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedFailedShards
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shardInfo
operator|.
name|getFailures
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
name|expectedFailedShards
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shardInfo
operator|.
name|getSuccessful
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
operator|+
name|expectedReplicas
operator|.
name|size
argument_list|()
operator|-
name|expectedFailures
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|unassignedShards
init|=
name|indexShardRoutingTable
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
decl_stmt|;
specifier|final
name|int
name|totalShards
init|=
literal|1
operator|+
name|expectedReplicas
operator|.
name|size
argument_list|()
operator|+
name|unassignedShards
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|shardInfo
operator|.
name|getTotal
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalShards
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplicationWithShadowIndex
specifier|public
name|void
name|testReplicationWithShadowIndex
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ClusterState
name|state
init|=
name|stateWithActivePrimary
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|primaryTerm
init|=
name|state
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|primaryTerm
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|IndexShardRoutingTable
name|indexShardRoutingTable
init|=
name|state
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
specifier|final
name|ShardRouting
name|primaryShard
init|=
name|indexShardRoutingTable
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|TestPrimary
operator|.
name|Result
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|TestReplicationOperation
name|op
init|=
operator|new
name|TestReplicationOperation
argument_list|(
name|request
argument_list|,
operator|new
name|TestPrimary
argument_list|(
name|primaryShard
argument_list|,
name|primaryTerm
argument_list|)
argument_list|,
name|listener
argument_list|,
literal|false
argument_list|,
operator|new
name|TestReplicaProxy
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|state
argument_list|,
name|logger
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"request was not processed on primary"
argument_list|,
name|request
operator|.
name|processedOnPrimary
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|processedOnReplicas
argument_list|,
name|equalTo
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"listener is not marked as done"
argument_list|,
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|ShardInfo
name|shardInfo
init|=
name|listener
operator|.
name|actionGet
argument_list|()
operator|.
name|getShardInfo
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|shardInfo
operator|.
name|getFailed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shardInfo
operator|.
name|getFailures
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shardInfo
operator|.
name|getSuccessful
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shardInfo
operator|.
name|getTotal
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indexShardRoutingTable
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDemotedPrimary
specifier|public
name|void
name|testDemotedPrimary
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|stateWithActivePrimary
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
literal|1
operator|+
name|randomInt
argument_list|(
literal|2
argument_list|)
argument_list|,
name|randomInt
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|IndexMetaData
name|indexMetaData
init|=
name|state
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|final
name|long
name|primaryTerm
init|=
name|indexMetaData
operator|.
name|primaryTerm
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ShardRouting
name|primaryShard
init|=
name|state
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|shardId
argument_list|)
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
if|if
condition|(
name|primaryShard
operator|.
name|relocating
argument_list|()
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// simulate execution of the replication phase on the relocation target node after relocation source was marked as relocated
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|primaryShard
operator|.
name|relocatingNodeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|primaryShard
operator|=
name|primaryShard
operator|.
name|getTargetRelocatingShard
argument_list|()
expr_stmt|;
block|}
comment|// add in-sync allocation id that doesn't have a corresponding routing entry
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexMetaData
argument_list|)
operator|.
name|putInSyncAllocationIds
argument_list|(
literal|0
argument_list|,
name|Sets
operator|.
name|union
argument_list|(
name|indexMetaData
operator|.
name|inSyncAllocationIds
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|ShardRouting
argument_list|>
name|expectedReplicas
init|=
name|getExpectedReplicas
argument_list|(
name|shardId
argument_list|,
name|state
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|Exception
argument_list|>
name|expectedFailures
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ShardRouting
name|failedReplica
init|=
name|randomFrom
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|expectedReplicas
argument_list|)
argument_list|)
decl_stmt|;
name|expectedFailures
operator|.
name|put
argument_list|(
name|failedReplica
argument_list|,
operator|new
name|CorruptIndexException
argument_list|(
literal|"simulated"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|TestPrimary
operator|.
name|Result
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ClusterState
name|finalState
init|=
name|state
decl_stmt|;
specifier|final
name|boolean
name|testPrimaryDemotedOnStaleShardCopies
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|TestReplicaProxy
name|replicasProxy
init|=
operator|new
name|TestReplicaProxy
argument_list|(
name|expectedFailures
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|failShard
parameter_list|(
name|ShardRouting
name|replica
parameter_list|,
name|long
name|primaryTerm
parameter_list|,
name|String
name|message
parameter_list|,
name|Exception
name|exception
parameter_list|,
name|Runnable
name|onSuccess
parameter_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onPrimaryDemoted
parameter_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onIgnoredFailure
parameter_list|)
block|{
if|if
condition|(
name|testPrimaryDemotedOnStaleShardCopies
condition|)
block|{
name|super
operator|.
name|failShard
argument_list|(
name|replica
argument_list|,
name|primaryTerm
argument_list|,
name|message
argument_list|,
name|exception
argument_list|,
name|onSuccess
argument_list|,
name|onPrimaryDemoted
argument_list|,
name|onIgnoredFailure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|replica
argument_list|,
name|equalTo
argument_list|(
name|failedReplica
argument_list|)
argument_list|)
expr_stmt|;
name|onPrimaryDemoted
operator|.
name|accept
argument_list|(
operator|new
name|ElasticsearchException
argument_list|(
literal|"the king is dead"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|markShardCopyAsStale
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|allocationId
parameter_list|,
name|long
name|primaryTerm
parameter_list|,
name|Runnable
name|onSuccess
parameter_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onPrimaryDemoted
parameter_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onIgnoredFailure
parameter_list|)
block|{
if|if
condition|(
name|testPrimaryDemotedOnStaleShardCopies
condition|)
block|{
name|onPrimaryDemoted
operator|.
name|accept
argument_list|(
operator|new
name|ElasticsearchException
argument_list|(
literal|"the king is dead"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|markShardCopyAsStale
argument_list|(
name|shardId
argument_list|,
name|allocationId
argument_list|,
name|primaryTerm
argument_list|,
name|onSuccess
argument_list|,
name|onPrimaryDemoted
argument_list|,
name|onIgnoredFailure
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|AtomicBoolean
name|primaryFailed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|TestPrimary
name|primary
init|=
operator|new
name|TestPrimary
argument_list|(
name|primaryShard
argument_list|,
name|primaryTerm
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|failShard
parameter_list|(
name|String
name|message
parameter_list|,
name|Exception
name|exception
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|primaryFailed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|TestReplicationOperation
name|op
init|=
operator|new
name|TestReplicationOperation
argument_list|(
name|request
argument_list|,
name|primary
argument_list|,
name|listener
argument_list|,
name|replicasProxy
argument_list|,
parameter_list|()
lambda|->
name|finalState
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"request was not processed on primary"
argument_list|,
name|request
operator|.
name|processedOnPrimary
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"listener is not marked as done"
argument_list|,
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|primaryFailed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"should throw exception to trigger retry"
argument_list|,
name|listener
argument_list|,
name|ReplicationOperation
operator|.
name|RetryOnPrimaryException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddedReplicaAfterPrimaryOperation
specifier|public
name|void
name|testAddedReplicaAfterPrimaryOperation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ClusterState
name|initialState
init|=
name|stateWithActivePrimary
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ClusterState
name|stateWithAddedReplicas
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|stateWithAddedReplicas
operator|=
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|ShardRoutingState
operator|.
name|INITIALIZING
else|:
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stateWithAddedReplicas
operator|=
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|RELOCATING
argument_list|)
expr_stmt|;
block|}
name|testClusterStateChangeAfterPrimaryOperation
argument_list|(
name|shardId
argument_list|,
name|initialState
argument_list|,
name|stateWithAddedReplicas
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexDeletedAfterPrimaryOperation
specifier|public
name|void
name|testIndexDeletedAfterPrimaryOperation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ClusterState
name|initialState
init|=
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
decl_stmt|;
specifier|final
name|ClusterState
name|stateWithDeletedIndex
init|=
name|state
argument_list|(
name|index
operator|+
literal|"_new"
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|ShardRoutingState
operator|.
name|RELOCATING
argument_list|)
decl_stmt|;
name|testClusterStateChangeAfterPrimaryOperation
argument_list|(
name|shardId
argument_list|,
name|initialState
argument_list|,
name|stateWithDeletedIndex
argument_list|)
expr_stmt|;
block|}
DECL|method|testClusterStateChangeAfterPrimaryOperation
specifier|private
name|void
name|testClusterStateChangeAfterPrimaryOperation
parameter_list|(
specifier|final
name|ShardId
name|shardId
parameter_list|,
specifier|final
name|ClusterState
name|initialState
parameter_list|,
specifier|final
name|ClusterState
name|changedState
parameter_list|)
throws|throws
name|Exception
block|{
name|AtomicReference
argument_list|<
name|ClusterState
argument_list|>
name|state
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
name|initialState
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> using initial state:\n{}"
argument_list|,
name|state
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|primaryTerm
init|=
name|initialState
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
operator|.
name|primaryTerm
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ShardRouting
name|primaryShard
init|=
name|state
operator|.
name|get
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|shardId
argument_list|)
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
specifier|final
name|TestPrimary
name|primary
init|=
operator|new
name|TestPrimary
argument_list|(
name|primaryShard
argument_list|,
name|primaryTerm
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Result
name|perform
parameter_list|(
name|Request
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|Result
name|result
init|=
name|super
operator|.
name|perform
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|state
operator|.
name|set
argument_list|(
name|changedState
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> state after primary operation:\n{}"
argument_list|,
name|state
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
decl_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|TestPrimary
operator|.
name|Result
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|TestReplicationOperation
name|op
init|=
operator|new
name|TestReplicationOperation
argument_list|(
name|request
argument_list|,
name|primary
argument_list|,
name|listener
argument_list|,
operator|new
name|TestReplicaProxy
argument_list|()
argument_list|,
name|state
operator|::
name|get
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"request was not processed on primary"
argument_list|,
name|request
operator|.
name|processedOnPrimary
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ShardRouting
argument_list|>
name|expectedReplicas
init|=
name|getExpectedReplicas
argument_list|(
name|shardId
argument_list|,
name|state
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|processedOnReplicas
argument_list|,
name|equalTo
argument_list|(
name|expectedReplicas
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWaitForActiveShards
specifier|public
name|void
name|testWaitForActiveShards
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|assignedReplicas
init|=
name|randomInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|int
name|unassignedReplicas
init|=
name|randomInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|int
name|totalShards
init|=
literal|1
operator|+
name|assignedReplicas
operator|+
name|unassignedReplicas
decl_stmt|;
specifier|final
name|int
name|activeShardCount
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|totalShards
argument_list|)
decl_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
operator|.
name|waitForActiveShards
argument_list|(
name|activeShardCount
operator|==
name|totalShards
condition|?
name|ActiveShardCount
operator|.
name|ALL
else|:
name|ActiveShardCount
operator|.
name|from
argument_list|(
name|activeShardCount
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|passesActiveShardCheck
init|=
name|activeShardCount
operator|<=
name|assignedReplicas
operator|+
literal|1
decl_stmt|;
name|ShardRoutingState
index|[]
name|replicaStates
init|=
operator|new
name|ShardRoutingState
index|[
name|assignedReplicas
operator|+
name|unassignedReplicas
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|assignedReplicas
condition|;
name|i
operator|++
control|)
block|{
name|replicaStates
index|[
name|i
index|]
operator|=
name|randomFrom
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|ShardRoutingState
operator|.
name|RELOCATING
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|assignedReplicas
init|;
name|i
operator|<
name|replicaStates
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|replicaStates
index|[
name|i
index|]
operator|=
name|ShardRoutingState
operator|.
name|UNASSIGNED
expr_stmt|;
block|}
specifier|final
name|ClusterState
name|state
init|=
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|replicaStates
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using active shard count of [{}], assigned shards [{}], total shards [{}]."
operator|+
literal|" expecting op to [{}]. using state: \n{}"
argument_list|,
name|request
operator|.
name|waitForActiveShards
argument_list|()
argument_list|,
literal|1
operator|+
name|assignedReplicas
argument_list|,
literal|1
operator|+
name|assignedReplicas
operator|+
name|unassignedReplicas
argument_list|,
name|passesActiveShardCheck
condition|?
literal|"succeed"
else|:
literal|"retry"
argument_list|,
name|state
argument_list|)
expr_stmt|;
specifier|final
name|long
name|primaryTerm
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|primaryTerm
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|shard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|TestPrimary
operator|.
name|Result
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ShardRouting
name|primaryShard
init|=
name|shardRoutingTable
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
specifier|final
name|TestReplicationOperation
name|op
init|=
operator|new
name|TestReplicationOperation
argument_list|(
name|request
argument_list|,
operator|new
name|TestPrimary
argument_list|(
name|primaryShard
argument_list|,
name|primaryTerm
argument_list|)
argument_list|,
name|listener
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
operator|new
name|TestReplicaProxy
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|state
argument_list|,
name|logger
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
if|if
condition|(
name|passesActiveShardCheck
condition|)
block|{
name|assertThat
argument_list|(
name|op
operator|.
name|checkActiveShardCount
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"operations should have been performed, active shard count is met"
argument_list|,
name|request
operator|.
name|processedOnPrimary
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|op
operator|.
name|checkActiveShardCount
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"operations should not have been perform, active shard count is *NOT* met"
argument_list|,
name|request
operator|.
name|processedOnPrimary
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"should throw exception to trigger retry"
argument_list|,
name|listener
argument_list|,
name|UnavailableShardsException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getExpectedReplicas
specifier|private
name|Set
argument_list|<
name|ShardRouting
argument_list|>
name|getExpectedReplicas
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
name|Set
argument_list|<
name|ShardRouting
argument_list|>
name|expectedReplicas
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|localNodeId
init|=
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getLocalNodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|shardId
argument_list|)
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|unassigned
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|localNodeId
operator|.
name|equals
argument_list|(
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|expectedReplicas
operator|.
name|add
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shardRouting
operator|.
name|relocating
argument_list|()
operator|&&
name|localNodeId
operator|.
name|equals
argument_list|(
name|shardRouting
operator|.
name|relocatingNodeId
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|expectedReplicas
operator|.
name|add
argument_list|(
name|shardRouting
operator|.
name|getTargetRelocatingShard
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|expectedReplicas
return|;
block|}
DECL|class|Request
specifier|public
specifier|static
class|class
name|Request
extends|extends
name|ReplicationRequest
argument_list|<
name|Request
argument_list|>
block|{
DECL|field|processedOnPrimary
specifier|public
name|AtomicBoolean
name|processedOnPrimary
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|processedOnReplicas
specifier|public
name|Set
argument_list|<
name|ShardRouting
argument_list|>
name|processedOnReplicas
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentSet
argument_list|()
decl_stmt|;
DECL|method|Request
specifier|public
name|Request
parameter_list|()
block|{         }
DECL|method|Request
name|Request
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|shardId
operator|.
name|getIndexName
argument_list|()
expr_stmt|;
name|this
operator|.
name|waitForActiveShards
operator|=
name|ActiveShardCount
operator|.
name|NONE
expr_stmt|;
comment|// keep things simple
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestPrimary
specifier|static
class|class
name|TestPrimary
implements|implements
name|ReplicationOperation
operator|.
name|Primary
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|TestPrimary
operator|.
name|Result
argument_list|>
block|{
DECL|field|routing
specifier|final
name|ShardRouting
name|routing
decl_stmt|;
DECL|field|term
specifier|final
name|long
name|term
decl_stmt|;
DECL|method|TestPrimary
name|TestPrimary
parameter_list|(
name|ShardRouting
name|routing
parameter_list|,
name|long
name|term
parameter_list|)
block|{
name|this
operator|.
name|routing
operator|=
name|routing
expr_stmt|;
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|routingEntry
specifier|public
name|ShardRouting
name|routingEntry
parameter_list|()
block|{
return|return
name|routing
return|;
block|}
annotation|@
name|Override
DECL|method|failShard
specifier|public
name|void
name|failShard
parameter_list|(
name|String
name|message
parameter_list|,
name|Exception
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"should shouldn't be failed with ["
operator|+
name|message
operator|+
literal|"]"
argument_list|,
name|exception
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|perform
specifier|public
name|Result
name|perform
parameter_list|(
name|Request
name|request
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|request
operator|.
name|processedOnPrimary
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
operator|==
literal|false
condition|)
block|{
name|fail
argument_list|(
literal|"processed ["
operator|+
name|request
operator|+
literal|"] twice"
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|primaryTerm
argument_list|(
name|term
argument_list|)
expr_stmt|;
return|return
operator|new
name|Result
argument_list|(
name|request
argument_list|)
return|;
block|}
DECL|class|Result
specifier|static
class|class
name|Result
implements|implements
name|ReplicationOperation
operator|.
name|PrimaryResult
argument_list|<
name|Request
argument_list|>
block|{
DECL|field|request
specifier|private
specifier|final
name|Request
name|request
decl_stmt|;
DECL|field|shardInfo
specifier|private
name|ShardInfo
name|shardInfo
decl_stmt|;
DECL|method|Result
specifier|public
name|Result
parameter_list|(
name|Request
name|request
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|replicaRequest
specifier|public
name|Request
name|replicaRequest
parameter_list|()
block|{
return|return
name|request
return|;
block|}
annotation|@
name|Override
DECL|method|setShardInfo
specifier|public
name|void
name|setShardInfo
parameter_list|(
name|ShardInfo
name|shardInfo
parameter_list|)
block|{
name|this
operator|.
name|shardInfo
operator|=
name|shardInfo
expr_stmt|;
block|}
DECL|method|getShardInfo
specifier|public
name|ShardInfo
name|getShardInfo
parameter_list|()
block|{
return|return
name|shardInfo
return|;
block|}
block|}
block|}
DECL|class|TestReplicaProxy
specifier|static
class|class
name|TestReplicaProxy
implements|implements
name|ReplicationOperation
operator|.
name|Replicas
argument_list|<
name|Request
argument_list|>
block|{
DECL|field|opFailures
specifier|final
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|Exception
argument_list|>
name|opFailures
decl_stmt|;
DECL|field|failedReplicas
specifier|final
name|Set
argument_list|<
name|ShardRouting
argument_list|>
name|failedReplicas
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentSet
argument_list|()
decl_stmt|;
DECL|field|markedAsStaleCopies
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|markedAsStaleCopies
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentSet
argument_list|()
decl_stmt|;
DECL|method|TestReplicaProxy
name|TestReplicaProxy
parameter_list|()
block|{
name|this
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|TestReplicaProxy
name|TestReplicaProxy
parameter_list|(
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|Exception
argument_list|>
name|opFailures
parameter_list|)
block|{
name|this
operator|.
name|opFailures
operator|=
name|opFailures
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|performOn
specifier|public
name|void
name|performOn
parameter_list|(
name|ShardRouting
name|replica
parameter_list|,
name|Request
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|TransportResponse
operator|.
name|Empty
argument_list|>
name|listener
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"replica request processed twice on ["
operator|+
name|replica
operator|+
literal|"]"
argument_list|,
name|request
operator|.
name|processedOnReplicas
operator|.
name|add
argument_list|(
name|replica
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|opFailures
operator|.
name|containsKey
argument_list|(
name|replica
argument_list|)
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|opFailures
operator|.
name|get
argument_list|(
name|replica
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|failShard
specifier|public
name|void
name|failShard
parameter_list|(
name|ShardRouting
name|replica
parameter_list|,
name|long
name|primaryTerm
parameter_list|,
name|String
name|message
parameter_list|,
name|Exception
name|exception
parameter_list|,
name|Runnable
name|onSuccess
parameter_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onPrimaryDemoted
parameter_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onIgnoredFailure
parameter_list|)
block|{
if|if
condition|(
name|failedReplicas
operator|.
name|add
argument_list|(
name|replica
argument_list|)
operator|==
literal|false
condition|)
block|{
name|fail
argument_list|(
literal|"replica ["
operator|+
name|replica
operator|+
literal|"] was failed twice"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|opFailures
operator|.
name|containsKey
argument_list|(
name|replica
argument_list|)
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|onSuccess
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|onIgnoredFailure
operator|.
name|accept
argument_list|(
operator|new
name|ElasticsearchException
argument_list|(
literal|"simulated"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fail
argument_list|(
literal|"replica ["
operator|+
name|replica
operator|+
literal|"] was failed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|markShardCopyAsStale
specifier|public
name|void
name|markShardCopyAsStale
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|allocationId
parameter_list|,
name|long
name|primaryTerm
parameter_list|,
name|Runnable
name|onSuccess
parameter_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onPrimaryDemoted
parameter_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onIgnoredFailure
parameter_list|)
block|{
if|if
condition|(
name|markedAsStaleCopies
operator|.
name|add
argument_list|(
name|allocationId
argument_list|)
operator|==
literal|false
condition|)
block|{
name|fail
argument_list|(
literal|"replica ["
operator|+
name|allocationId
operator|+
literal|"] was marked as stale twice"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|onSuccess
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|onIgnoredFailure
operator|.
name|accept
argument_list|(
operator|new
name|ElasticsearchException
argument_list|(
literal|"simulated"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|TestReplicationOperation
class|class
name|TestReplicationOperation
extends|extends
name|ReplicationOperation
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|TestPrimary
operator|.
name|Result
argument_list|>
block|{
DECL|method|TestReplicationOperation
specifier|public
name|TestReplicationOperation
parameter_list|(
name|Request
name|request
parameter_list|,
name|Primary
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|TestPrimary
operator|.
name|Result
argument_list|>
name|primary
parameter_list|,
name|ActionListener
argument_list|<
name|TestPrimary
operator|.
name|Result
argument_list|>
name|listener
parameter_list|,
name|Replicas
argument_list|<
name|Request
argument_list|>
name|replicas
parameter_list|,
name|Supplier
argument_list|<
name|ClusterState
argument_list|>
name|clusterStateSupplier
parameter_list|)
block|{
name|this
argument_list|(
name|request
argument_list|,
name|primary
argument_list|,
name|listener
argument_list|,
literal|true
argument_list|,
name|replicas
argument_list|,
name|clusterStateSupplier
argument_list|,
name|ReplicationOperationTests
operator|.
name|this
operator|.
name|logger
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
DECL|method|TestReplicationOperation
specifier|public
name|TestReplicationOperation
parameter_list|(
name|Request
name|request
parameter_list|,
name|Primary
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|TestPrimary
operator|.
name|Result
argument_list|>
name|primary
parameter_list|,
name|ActionListener
argument_list|<
name|TestPrimary
operator|.
name|Result
argument_list|>
name|listener
parameter_list|,
name|boolean
name|executeOnReplicas
parameter_list|,
name|Replicas
argument_list|<
name|Request
argument_list|>
name|replicas
parameter_list|,
name|Supplier
argument_list|<
name|ClusterState
argument_list|>
name|clusterStateSupplier
parameter_list|,
name|Logger
name|logger
parameter_list|,
name|String
name|opType
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|,
name|primary
argument_list|,
name|listener
argument_list|,
name|executeOnReplicas
argument_list|,
name|replicas
argument_list|,
name|clusterStateSupplier
argument_list|,
name|logger
argument_list|,
name|opType
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertListenerThrows
parameter_list|<
name|T
parameter_list|>
name|void
name|assertListenerThrows
parameter_list|(
name|String
name|msg
parameter_list|,
name|PlainActionFuture
argument_list|<
name|T
argument_list|>
name|listener
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|klass
parameter_list|)
throws|throws
name|InterruptedException
block|{
try|try
block|{
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|klass
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

