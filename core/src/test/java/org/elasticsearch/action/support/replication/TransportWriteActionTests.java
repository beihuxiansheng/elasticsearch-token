begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support.replication
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|WriteRequest
operator|.
name|RefreshPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|WriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationOperation
operator|.
name|ReplicaResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|NoNodeAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
operator|.
name|ShardStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|TestShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ClusterServiceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|CapturingTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ClusterServiceUtils
operator|.
name|createClusterService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|arrayWithSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TransportWriteActionTests
specifier|public
class|class
name|TransportWriteActionTests
extends|extends
name|ESTestCase
block|{
DECL|field|threadPool
specifier|private
specifier|static
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|clusterService
specifier|private
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|indexShard
specifier|private
name|IndexShard
name|indexShard
decl_stmt|;
DECL|field|location
specifier|private
name|Translog
operator|.
name|Location
name|location
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
block|{
name|threadPool
operator|=
operator|new
name|TestThreadPool
argument_list|(
literal|"ShardReplicationTests"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|initCommonMocks
specifier|public
name|void
name|initCommonMocks
parameter_list|()
block|{
name|indexShard
operator|=
name|mock
argument_list|(
name|IndexShard
operator|.
name|class
argument_list|)
expr_stmt|;
name|location
operator|=
name|mock
argument_list|(
name|Translog
operator|.
name|Location
operator|.
name|class
argument_list|)
expr_stmt|;
name|clusterService
operator|=
name|createClusterService
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|clusterService
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
block|{
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|threadPool
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|threadPool
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|assertListenerThrows
parameter_list|<
name|T
parameter_list|>
name|void
name|assertListenerThrows
parameter_list|(
name|String
name|msg
parameter_list|,
name|PlainActionFuture
argument_list|<
name|T
argument_list|>
name|listener
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|klass
parameter_list|)
throws|throws
name|InterruptedException
block|{
try|try
block|{
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|klass
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPrimaryNoRefreshCall
specifier|public
name|void
name|testPrimaryNoRefreshCall
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRequest
name|request
init|=
operator|new
name|TestRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setRefreshPolicy
argument_list|(
name|RefreshPolicy
operator|.
name|NONE
argument_list|)
expr_stmt|;
comment|// The default, but we'll set it anyway just to be explicit
name|TestAction
name|testAction
init|=
operator|new
name|TestAction
argument_list|()
decl_stmt|;
name|TransportWriteAction
operator|.
name|WritePrimaryResult
argument_list|<
name|TestRequest
argument_list|,
name|TestResponse
argument_list|>
name|result
init|=
name|testAction
operator|.
name|shardOperationOnPrimary
argument_list|(
name|request
argument_list|,
name|indexShard
argument_list|)
decl_stmt|;
name|CapturingActionListener
argument_list|<
name|TestResponse
argument_list|>
name|listener
init|=
operator|new
name|CapturingActionListener
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|respond
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|listener
operator|.
name|response
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|listener
operator|.
name|failure
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|indexShard
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|refresh
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|indexShard
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|addRefreshListener
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplicaNoRefreshCall
specifier|public
name|void
name|testReplicaNoRefreshCall
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRequest
name|request
init|=
operator|new
name|TestRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setRefreshPolicy
argument_list|(
name|RefreshPolicy
operator|.
name|NONE
argument_list|)
expr_stmt|;
comment|// The default, but we'll set it anyway just to be explicit
name|TestAction
name|testAction
init|=
operator|new
name|TestAction
argument_list|()
decl_stmt|;
name|TransportWriteAction
operator|.
name|WriteReplicaResult
argument_list|<
name|TestRequest
argument_list|>
name|result
init|=
name|testAction
operator|.
name|shardOperationOnReplica
argument_list|(
name|request
argument_list|,
name|indexShard
argument_list|)
decl_stmt|;
name|CapturingActionListener
argument_list|<
name|TransportResponse
operator|.
name|Empty
argument_list|>
name|listener
init|=
operator|new
name|CapturingActionListener
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|respond
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|listener
operator|.
name|response
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|listener
operator|.
name|failure
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|indexShard
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|refresh
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|indexShard
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|addRefreshListener
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrimaryImmediateRefresh
specifier|public
name|void
name|testPrimaryImmediateRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRequest
name|request
init|=
operator|new
name|TestRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setRefreshPolicy
argument_list|(
name|RefreshPolicy
operator|.
name|IMMEDIATE
argument_list|)
expr_stmt|;
name|TestAction
name|testAction
init|=
operator|new
name|TestAction
argument_list|()
decl_stmt|;
name|TransportWriteAction
operator|.
name|WritePrimaryResult
argument_list|<
name|TestRequest
argument_list|,
name|TestResponse
argument_list|>
name|result
init|=
name|testAction
operator|.
name|shardOperationOnPrimary
argument_list|(
name|request
argument_list|,
name|indexShard
argument_list|)
decl_stmt|;
name|CapturingActionListener
argument_list|<
name|TestResponse
argument_list|>
name|listener
init|=
operator|new
name|CapturingActionListener
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|respond
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|listener
operator|.
name|response
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|listener
operator|.
name|failure
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|response
operator|.
name|forcedRefresh
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|indexShard
argument_list|)
operator|.
name|refresh
argument_list|(
literal|"refresh_flag_index"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|indexShard
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|addRefreshListener
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplicaImmediateRefresh
specifier|public
name|void
name|testReplicaImmediateRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRequest
name|request
init|=
operator|new
name|TestRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setRefreshPolicy
argument_list|(
name|RefreshPolicy
operator|.
name|IMMEDIATE
argument_list|)
expr_stmt|;
name|TestAction
name|testAction
init|=
operator|new
name|TestAction
argument_list|()
decl_stmt|;
name|TransportWriteAction
operator|.
name|WriteReplicaResult
argument_list|<
name|TestRequest
argument_list|>
name|result
init|=
name|testAction
operator|.
name|shardOperationOnReplica
argument_list|(
name|request
argument_list|,
name|indexShard
argument_list|)
decl_stmt|;
name|CapturingActionListener
argument_list|<
name|TransportResponse
operator|.
name|Empty
argument_list|>
name|listener
init|=
operator|new
name|CapturingActionListener
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|respond
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|listener
operator|.
name|response
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|listener
operator|.
name|failure
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|indexShard
argument_list|)
operator|.
name|refresh
argument_list|(
literal|"refresh_flag_index"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|indexShard
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|addRefreshListener
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrimaryWaitForRefresh
specifier|public
name|void
name|testPrimaryWaitForRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRequest
name|request
init|=
operator|new
name|TestRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setRefreshPolicy
argument_list|(
name|RefreshPolicy
operator|.
name|WAIT_UNTIL
argument_list|)
expr_stmt|;
name|TestAction
name|testAction
init|=
operator|new
name|TestAction
argument_list|()
decl_stmt|;
name|TransportWriteAction
operator|.
name|WritePrimaryResult
argument_list|<
name|TestRequest
argument_list|,
name|TestResponse
argument_list|>
name|result
init|=
name|testAction
operator|.
name|shardOperationOnPrimary
argument_list|(
name|request
argument_list|,
name|indexShard
argument_list|)
decl_stmt|;
name|CapturingActionListener
argument_list|<
name|TestResponse
argument_list|>
name|listener
init|=
operator|new
name|CapturingActionListener
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|respond
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|listener
operator|.
name|response
argument_list|)
expr_stmt|;
comment|// Haven't reallresponded yet
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
name|ArgumentCaptor
argument_list|<
name|Consumer
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|refreshListener
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
operator|(
name|Class
operator|)
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|indexShard
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|refresh
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|indexShard
argument_list|)
operator|.
name|addRefreshListener
argument_list|(
name|any
argument_list|()
argument_list|,
name|refreshListener
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now we can fire the listener manually and we'll get a response
name|boolean
name|forcedRefresh
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|refreshListener
operator|.
name|getValue
argument_list|()
operator|.
name|accept
argument_list|(
name|forcedRefresh
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|listener
operator|.
name|response
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|listener
operator|.
name|failure
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|forcedRefresh
argument_list|,
name|listener
operator|.
name|response
operator|.
name|forcedRefresh
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplicaWaitForRefresh
specifier|public
name|void
name|testReplicaWaitForRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRequest
name|request
init|=
operator|new
name|TestRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setRefreshPolicy
argument_list|(
name|RefreshPolicy
operator|.
name|WAIT_UNTIL
argument_list|)
expr_stmt|;
name|TestAction
name|testAction
init|=
operator|new
name|TestAction
argument_list|()
decl_stmt|;
name|TransportWriteAction
operator|.
name|WriteReplicaResult
argument_list|<
name|TestRequest
argument_list|>
name|result
init|=
name|testAction
operator|.
name|shardOperationOnReplica
argument_list|(
name|request
argument_list|,
name|indexShard
argument_list|)
decl_stmt|;
name|CapturingActionListener
argument_list|<
name|TransportResponse
operator|.
name|Empty
argument_list|>
name|listener
init|=
operator|new
name|CapturingActionListener
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|respond
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|listener
operator|.
name|response
argument_list|)
expr_stmt|;
comment|// Haven't responded yet
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
name|ArgumentCaptor
argument_list|<
name|Consumer
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|refreshListener
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
operator|(
name|Class
operator|)
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|indexShard
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|refresh
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|indexShard
argument_list|)
operator|.
name|addRefreshListener
argument_list|(
name|any
argument_list|()
argument_list|,
name|refreshListener
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now we can fire the listener manually and we'll get a response
name|boolean
name|forcedRefresh
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|refreshListener
operator|.
name|getValue
argument_list|()
operator|.
name|accept
argument_list|(
name|forcedRefresh
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|listener
operator|.
name|response
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|listener
operator|.
name|failure
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocumentFailureInShardOperationOnPrimary
specifier|public
name|void
name|testDocumentFailureInShardOperationOnPrimary
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRequest
name|request
init|=
operator|new
name|TestRequest
argument_list|()
decl_stmt|;
name|TestAction
name|testAction
init|=
operator|new
name|TestAction
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TransportWriteAction
operator|.
name|WritePrimaryResult
argument_list|<
name|TestRequest
argument_list|,
name|TestResponse
argument_list|>
name|writePrimaryResult
init|=
name|testAction
operator|.
name|shardOperationOnPrimary
argument_list|(
name|request
argument_list|,
name|indexShard
argument_list|)
decl_stmt|;
name|CapturingActionListener
argument_list|<
name|TestResponse
argument_list|>
name|listener
init|=
operator|new
name|CapturingActionListener
argument_list|<>
argument_list|()
decl_stmt|;
name|writePrimaryResult
operator|.
name|respond
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|listener
operator|.
name|response
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|listener
operator|.
name|failure
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocumentFailureInShardOperationOnReplica
specifier|public
name|void
name|testDocumentFailureInShardOperationOnReplica
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRequest
name|request
init|=
operator|new
name|TestRequest
argument_list|()
decl_stmt|;
name|TestAction
name|testAction
init|=
operator|new
name|TestAction
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TransportWriteAction
operator|.
name|WriteReplicaResult
argument_list|<
name|TestRequest
argument_list|>
name|writeReplicaResult
init|=
name|testAction
operator|.
name|shardOperationOnReplica
argument_list|(
name|request
argument_list|,
name|indexShard
argument_list|)
decl_stmt|;
name|CapturingActionListener
argument_list|<
name|TransportResponse
operator|.
name|Empty
argument_list|>
name|listener
init|=
operator|new
name|CapturingActionListener
argument_list|<>
argument_list|()
decl_stmt|;
name|writeReplicaResult
operator|.
name|respond
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|listener
operator|.
name|response
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|listener
operator|.
name|failure
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplicaProxy
specifier|public
name|void
name|testReplicaProxy
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|CapturingTransport
name|transport
init|=
operator|new
name|CapturingTransport
argument_list|()
decl_stmt|;
name|TransportService
name|transportService
init|=
operator|new
name|TransportService
argument_list|(
name|clusterService
operator|.
name|getSettings
argument_list|()
argument_list|,
name|transport
argument_list|,
name|threadPool
argument_list|,
name|TransportService
operator|.
name|NOOP_TRANSPORT_INTERCEPTOR
argument_list|,
name|x
lambda|->
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|start
argument_list|()
expr_stmt|;
name|transportService
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
name|ShardStateAction
name|shardStateAction
init|=
operator|new
name|ShardStateAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|threadPool
argument_list|)
decl_stmt|;
name|TestAction
name|action
init|=
name|action
operator|=
operator|new
name|TestAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"testAction"
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|shardStateAction
argument_list|,
name|threadPool
argument_list|)
decl_stmt|;
name|ReplicationOperation
operator|.
name|Replicas
name|proxy
init|=
name|action
operator|.
name|newReplicasProxy
argument_list|()
decl_stmt|;
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterStateCreationUtils
operator|.
name|stateWithActivePrimary
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
literal|1
operator|+
name|randomInt
argument_list|(
literal|3
argument_list|)
argument_list|,
name|randomInt
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"using state: {}"
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|ClusterServiceUtils
operator|.
name|setState
argument_list|(
name|clusterService
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|// check that at unknown node fails
name|PlainActionFuture
argument_list|<
name|ReplicaResponse
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|proxy
operator|.
name|performOn
argument_list|(
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|shardId
argument_list|,
literal|"NOT THERE"
argument_list|,
literal|false
argument_list|,
name|randomFrom
argument_list|(
name|ShardRoutingState
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TestRequest
argument_list|()
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"non existent node should throw a NoNodeAvailableException"
argument_list|,
name|listener
argument_list|,
name|NoNodeAvailableException
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|IndexShardRoutingTable
name|shardRoutings
init|=
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
specifier|final
name|ShardRouting
name|replica
init|=
name|randomFrom
argument_list|(
name|shardRoutings
operator|.
name|replicaShards
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|ShardRouting
operator|::
name|assignedToNode
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|listener
operator|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
expr_stmt|;
name|proxy
operator|.
name|performOn
argument_list|(
name|replica
argument_list|,
operator|new
name|TestRequest
argument_list|()
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|CapturingTransport
operator|.
name|CapturedRequest
index|[]
name|captures
init|=
name|transport
operator|.
name|getCapturedRequestsAndClear
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|captures
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
specifier|final
name|TransportReplicationAction
operator|.
name|ReplicaResponse
name|response
init|=
operator|new
name|TransportReplicationAction
operator|.
name|ReplicaResponse
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|randomLong
argument_list|()
argument_list|)
decl_stmt|;
name|transport
operator|.
name|handleResponse
argument_list|(
name|captures
index|[
literal|0
index|]
operator|.
name|requestId
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|transport
operator|.
name|handleRemoteError
argument_list|(
name|captures
index|[
literal|0
index|]
operator|.
name|requestId
argument_list|,
operator|new
name|ElasticsearchException
argument_list|(
literal|"simulated"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"listener should reflect remote error"
argument_list|,
name|listener
argument_list|,
name|ElasticsearchException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transport
operator|.
name|handleError
argument_list|(
name|captures
index|[
literal|0
index|]
operator|.
name|requestId
argument_list|,
operator|new
name|TransportException
argument_list|(
literal|"simulated"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"listener should reflect remote error"
argument_list|,
name|listener
argument_list|,
name|TransportException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|failure
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|ignoredFailure
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|success
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|proxy
operator|.
name|failShardIfNeeded
argument_list|(
name|replica
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|"test"
argument_list|,
operator|new
name|ElasticsearchException
argument_list|(
literal|"simulated"
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|success
operator|.
name|set
argument_list|(
literal|true
argument_list|)
argument_list|,
name|failure
operator|::
name|set
argument_list|,
name|ignoredFailure
operator|::
name|set
argument_list|)
expr_stmt|;
name|CapturingTransport
operator|.
name|CapturedRequest
index|[]
name|shardFailedRequests
init|=
name|transport
operator|.
name|getCapturedRequestsAndClear
argument_list|()
decl_stmt|;
comment|// A write replication action proxy should fail the shard
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|shardFailedRequests
operator|.
name|length
argument_list|)
expr_stmt|;
name|CapturingTransport
operator|.
name|CapturedRequest
name|shardFailedRequest
init|=
name|shardFailedRequests
index|[
literal|0
index|]
decl_stmt|;
name|ShardStateAction
operator|.
name|ShardEntry
name|shardEntry
init|=
operator|(
name|ShardStateAction
operator|.
name|ShardEntry
operator|)
name|shardFailedRequest
operator|.
name|request
decl_stmt|;
comment|// the shard the request was sent to and the shard to be failed should be the same
name|assertEquals
argument_list|(
name|shardEntry
operator|.
name|getShardId
argument_list|()
argument_list|,
name|replica
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardEntry
operator|.
name|getAllocationId
argument_list|()
argument_list|,
name|replica
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// simulate success
name|transport
operator|.
name|handleResponse
argument_list|(
name|shardFailedRequest
operator|.
name|requestId
argument_list|,
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|success
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|failure
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ignoredFailure
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// simulate the primary has been demoted
name|transport
operator|.
name|handleRemoteError
argument_list|(
name|shardFailedRequest
operator|.
name|requestId
argument_list|,
operator|new
name|ShardStateAction
operator|.
name|NoLongerPrimaryShardException
argument_list|(
name|replica
operator|.
name|shardId
argument_list|()
argument_list|,
literal|"shard-failed-test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|success
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|failure
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ignoredFailure
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// simulated an "ignored" exception
name|transport
operator|.
name|handleRemoteError
argument_list|(
name|shardFailedRequest
operator|.
name|requestId
argument_list|,
operator|new
name|NodeClosedException
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getLocalNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|success
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|failure
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ignoredFailure
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestAction
specifier|private
class|class
name|TestAction
extends|extends
name|TransportWriteAction
argument_list|<
name|TestRequest
argument_list|,
name|TestRequest
argument_list|,
name|TestResponse
argument_list|>
block|{
DECL|field|withDocumentFailureOnPrimary
specifier|private
specifier|final
name|boolean
name|withDocumentFailureOnPrimary
decl_stmt|;
DECL|field|withDocumentFailureOnReplica
specifier|private
specifier|final
name|boolean
name|withDocumentFailureOnReplica
decl_stmt|;
DECL|method|TestAction
specifier|protected
name|TestAction
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|TestAction
specifier|protected
name|TestAction
parameter_list|(
name|boolean
name|withDocumentFailureOnPrimary
parameter_list|,
name|boolean
name|withDocumentFailureOnReplica
parameter_list|)
block|{
name|super
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"test"
argument_list|,
operator|new
name|TransportService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TransportService
operator|.
name|NOOP_TRANSPORT_INTERCEPTOR
argument_list|,
name|x
lambda|->
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|ActionFilters
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
argument_list|,
operator|new
name|IndexNameExpressionResolver
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|TestRequest
operator|::
operator|new
argument_list|,
name|TestRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|withDocumentFailureOnPrimary
operator|=
name|withDocumentFailureOnPrimary
expr_stmt|;
name|this
operator|.
name|withDocumentFailureOnReplica
operator|=
name|withDocumentFailureOnReplica
expr_stmt|;
block|}
DECL|method|TestAction
specifier|protected
name|TestAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|actionName
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|ShardStateAction
name|shardStateAction
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|actionName
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|mockIndicesService
argument_list|(
name|clusterService
argument_list|)
argument_list|,
name|threadPool
argument_list|,
name|shardStateAction
argument_list|,
operator|new
name|ActionFilters
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
argument_list|,
operator|new
name|IndexNameExpressionResolver
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|TestRequest
operator|::
operator|new
argument_list|,
name|TestRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|withDocumentFailureOnPrimary
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|withDocumentFailureOnReplica
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newResponseInstance
specifier|protected
name|TestResponse
name|newResponseInstance
parameter_list|()
block|{
return|return
operator|new
name|TestResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|shardOperationOnPrimary
specifier|protected
name|WritePrimaryResult
argument_list|<
name|TestRequest
argument_list|,
name|TestResponse
argument_list|>
name|shardOperationOnPrimary
parameter_list|(
name|TestRequest
name|request
parameter_list|,
name|IndexShard
name|primary
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|WritePrimaryResult
argument_list|<
name|TestRequest
argument_list|,
name|TestResponse
argument_list|>
name|primaryResult
decl_stmt|;
if|if
condition|(
name|withDocumentFailureOnPrimary
condition|)
block|{
name|primaryResult
operator|=
operator|new
name|WritePrimaryResult
argument_list|<>
argument_list|(
name|request
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RuntimeException
argument_list|(
literal|"simulated"
argument_list|)
argument_list|,
name|primary
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|primaryResult
operator|=
operator|new
name|WritePrimaryResult
argument_list|<>
argument_list|(
name|request
argument_list|,
operator|new
name|TestResponse
argument_list|()
argument_list|,
name|location
argument_list|,
literal|null
argument_list|,
name|primary
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
return|return
name|primaryResult
return|;
block|}
annotation|@
name|Override
DECL|method|shardOperationOnReplica
specifier|protected
name|WriteReplicaResult
argument_list|<
name|TestRequest
argument_list|>
name|shardOperationOnReplica
parameter_list|(
name|TestRequest
name|request
parameter_list|,
name|IndexShard
name|replica
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|WriteReplicaResult
argument_list|<
name|TestRequest
argument_list|>
name|replicaResult
decl_stmt|;
if|if
condition|(
name|withDocumentFailureOnReplica
condition|)
block|{
name|replicaResult
operator|=
operator|new
name|WriteReplicaResult
argument_list|<>
argument_list|(
name|request
argument_list|,
literal|null
argument_list|,
operator|new
name|RuntimeException
argument_list|(
literal|"simulated"
argument_list|)
argument_list|,
name|replica
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|replicaResult
operator|=
operator|new
name|WriteReplicaResult
argument_list|<>
argument_list|(
name|request
argument_list|,
name|location
argument_list|,
literal|null
argument_list|,
name|replica
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
return|return
name|replicaResult
return|;
block|}
block|}
DECL|method|mockIndexService
specifier|final
name|IndexService
name|mockIndexService
parameter_list|(
specifier|final
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|)
block|{
specifier|final
name|IndexService
name|indexService
init|=
name|mock
argument_list|(
name|IndexService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|indexService
operator|.
name|getShard
argument_list|(
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
name|invocation
lambda|->
block|{
name|int
name|shard
init|=
operator|(
name|Integer
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|,
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|shard
operator|>
name|indexMetaData
operator|.
name|getNumberOfShards
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ShardNotFoundException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
return|return
name|mockIndexShard
argument_list|(
name|shardId
argument_list|,
name|clusterService
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|indexService
return|;
block|}
DECL|method|mockIndicesService
specifier|final
name|IndicesService
name|mockIndicesService
parameter_list|(
name|ClusterService
name|clusterService
parameter_list|)
block|{
specifier|final
name|IndicesService
name|indicesService
init|=
name|mock
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|any
argument_list|(
name|Index
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
name|invocation
lambda|->
block|{
name|Index
name|index
init|=
operator|(
name|Index
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|ClusterState
name|state
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
specifier|final
name|IndexMetaData
name|indexSafe
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|getIndexSafe
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|mockIndexService
argument_list|(
name|indexSafe
argument_list|,
name|clusterService
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indicesService
operator|.
name|indexService
argument_list|(
name|any
argument_list|(
name|Index
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
name|invocation
lambda|->
block|{
name|Index
name|index
init|=
operator|(
name|Index
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|ClusterState
name|state
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|IndexMetaData
name|indexSafe
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|getIndexSafe
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|mockIndexService
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|getIndexSafe
argument_list|(
name|index
argument_list|)
argument_list|,
name|clusterService
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|indicesService
return|;
block|}
DECL|field|count
specifier|private
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|isRelocated
specifier|private
specifier|final
name|AtomicBoolean
name|isRelocated
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|mockIndexShard
specifier|private
name|IndexShard
name|mockIndexShard
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|)
block|{
specifier|final
name|IndexShard
name|indexShard
init|=
name|mock
argument_list|(
name|IndexShard
operator|.
name|class
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
name|callback
init|=
operator|(
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|callback
operator|.
name|onResponse
argument_list|(
name|count
operator|::
name|decrementAndGet
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|indexShard
argument_list|)
operator|.
name|acquirePrimaryOperationLock
argument_list|(
name|any
argument_list|(
name|ActionListener
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|long
name|term
init|=
operator|(
name|Long
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
name|callback
init|=
operator|(
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|long
name|primaryTerm
init|=
name|indexShard
operator|.
name|getPrimaryTerm
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|<
name|primaryTerm
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s operation term [%d] is too old (current [%d])"
argument_list|,
name|shardId
argument_list|,
name|term
argument_list|,
name|primaryTerm
argument_list|)
argument_list|)
throw|;
block|}
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|callback
operator|.
name|onResponse
argument_list|(
name|count
operator|::
name|decrementAndGet
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|indexShard
argument_list|)
operator|.
name|acquireReplicaOperationLock
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|(
name|ActionListener
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexShard
operator|.
name|routingEntry
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
specifier|final
name|ClusterState
name|state
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
specifier|final
name|RoutingNode
name|node
init|=
name|state
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getLocalNodeId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ShardRouting
name|routing
init|=
name|node
operator|.
name|getByShardId
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|routing
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ShardNotFoundException
argument_list|(
name|shardId
argument_list|,
literal|"shard is no longer assigned to current node"
argument_list|)
throw|;
block|}
return|return
name|routing
return|;
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexShard
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocationOnMock
lambda|->
name|isRelocated
operator|.
name|get
argument_list|()
condition|?
name|IndexShardState
operator|.
name|RELOCATED
else|:
name|IndexShardState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|AssertionError
argument_list|(
literal|"failed shard is not supported"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|indexShard
argument_list|)
operator|.
name|failShard
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexShard
operator|.
name|getPrimaryTerm
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|i
lambda|->
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|getIndexSafe
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|primaryTerm
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|indexShard
return|;
block|}
DECL|class|TestRequest
specifier|private
specifier|static
class|class
name|TestRequest
extends|extends
name|ReplicatedWriteRequest
argument_list|<
name|TestRequest
argument_list|>
block|{
DECL|method|TestRequest
name|TestRequest
parameter_list|()
block|{
name|setShardId
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TestRequest{}"
return|;
block|}
block|}
DECL|class|TestResponse
specifier|private
specifier|static
class|class
name|TestResponse
extends|extends
name|ReplicationResponse
implements|implements
name|WriteResponse
block|{
DECL|field|forcedRefresh
name|boolean
name|forcedRefresh
decl_stmt|;
annotation|@
name|Override
DECL|method|setForcedRefresh
specifier|public
name|void
name|setForcedRefresh
parameter_list|(
name|boolean
name|forcedRefresh
parameter_list|)
block|{
name|this
operator|.
name|forcedRefresh
operator|=
name|forcedRefresh
expr_stmt|;
block|}
block|}
DECL|class|CapturingActionListener
specifier|private
specifier|static
class|class
name|CapturingActionListener
parameter_list|<
name|R
parameter_list|>
implements|implements
name|ActionListener
argument_list|<
name|R
argument_list|>
block|{
DECL|field|response
specifier|private
name|R
name|response
decl_stmt|;
DECL|field|failure
specifier|private
name|Exception
name|failure
decl_stmt|;
annotation|@
name|Override
DECL|method|onResponse
specifier|public
name|void
name|onResponse
parameter_list|(
name|R
name|response
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|failure
parameter_list|)
block|{
name|this
operator|.
name|failure
operator|=
name|failure
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

