begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_class
DECL|class|AdapterActionFutureTests
specifier|public
class|class
name|AdapterActionFutureTests
extends|extends
name|ESTestCase
block|{
DECL|method|testInterruption
specifier|public
name|void
name|testInterruption
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AdapterActionFuture
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|adapter
init|=
operator|new
name|AdapterActionFuture
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|String
name|convert
parameter_list|(
specifier|final
name|Integer
name|listenerResponse
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|toString
argument_list|(
name|listenerResponse
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// test all possible methods that can be interrupted
specifier|final
name|Runnable
name|runnable
init|=
parameter_list|()
lambda|->
block|{
specifier|final
name|int
name|method
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|method
condition|)
block|{
case|case
literal|0
case|:
name|adapter
operator|.
name|actionGet
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|adapter
operator|.
name|actionGet
argument_list|(
literal|"30s"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|adapter
operator|.
name|actionGet
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|adapter
operator|.
name|actionGet
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|adapter
operator|.
name|actionGet
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|method
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|Thread
name|main
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
specifier|final
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|BrokenBarrierException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|main
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|AtomicBoolean
name|interrupted
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
try|try
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalStateException
name|e
parameter_list|)
block|{
name|interrupted
operator|.
name|set
argument_list|(
name|Thread
operator|.
name|interrupted
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// we check this here instead of in the catch block to ensure that the catch block executed
name|assertTrue
argument_list|(
name|interrupted
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

