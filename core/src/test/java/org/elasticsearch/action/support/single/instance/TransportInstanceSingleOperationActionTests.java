begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support.single.instance
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|single
operator|.
name|instance
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|IndicesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ClusterStateCreationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|CapturingTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ClusterServiceUtils
operator|.
name|createClusterService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ClusterServiceUtils
operator|.
name|setState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsEqual
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|TransportInstanceSingleOperationActionTests
specifier|public
class|class
name|TransportInstanceSingleOperationActionTests
extends|extends
name|ESTestCase
block|{
DECL|field|THREAD_POOL
specifier|private
specifier|static
name|ThreadPool
name|THREAD_POOL
decl_stmt|;
DECL|field|clusterService
specifier|private
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|transport
specifier|private
name|CapturingTransport
name|transport
decl_stmt|;
DECL|field|transportService
specifier|private
name|TransportService
name|transportService
decl_stmt|;
DECL|field|action
specifier|private
name|TestTransportInstanceSingleOperationAction
name|action
decl_stmt|;
DECL|class|Request
specifier|public
specifier|static
class|class
name|Request
extends|extends
name|InstanceShardOperationRequest
argument_list|<
name|Request
argument_list|>
block|{
DECL|method|Request
specifier|public
name|Request
parameter_list|()
block|{         }
block|}
DECL|class|Response
specifier|public
specifier|static
class|class
name|Response
extends|extends
name|ActionResponse
block|{
DECL|method|Response
specifier|public
name|Response
parameter_list|()
block|{         }
block|}
DECL|class|TestTransportInstanceSingleOperationAction
class|class
name|TestTransportInstanceSingleOperationAction
extends|extends
name|TransportInstanceSingleOperationAction
argument_list|<
name|Request
argument_list|,
name|Response
argument_list|>
block|{
DECL|field|shards
specifier|private
specifier|final
name|Map
argument_list|<
name|ShardId
argument_list|,
name|Object
argument_list|>
name|shards
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|TestTransportInstanceSingleOperationAction
specifier|public
name|TestTransportInstanceSingleOperationAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|actionName
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|Supplier
argument_list|<
name|Request
argument_list|>
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|actionName
argument_list|,
name|THREAD_POOL
argument_list|,
name|TransportInstanceSingleOperationActionTests
operator|.
name|this
operator|.
name|clusterService
argument_list|,
name|transportService
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
DECL|method|getResults
specifier|public
name|Map
argument_list|<
name|ShardId
argument_list|,
name|Object
argument_list|>
name|getResults
parameter_list|()
block|{
return|return
name|shards
return|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|protected
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
annotation|@
name|Override
DECL|method|shardOperation
specifier|protected
name|void
name|shardOperation
parameter_list|(
name|Request
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented in test class"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|newResponse
specifier|protected
name|Response
name|newResponse
parameter_list|()
block|{
return|return
operator|new
name|Response
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|resolveRequest
specifier|protected
name|void
name|resolveRequest
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|Request
name|request
parameter_list|)
block|{         }
annotation|@
name|Override
DECL|method|shards
specifier|protected
name|ShardIterator
name|shards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|Request
name|request
parameter_list|)
block|{
return|return
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|request
operator|.
name|concreteIndex
argument_list|()
argument_list|)
operator|.
name|shard
argument_list|(
name|request
operator|.
name|shardId
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|primaryShardIt
argument_list|()
return|;
block|}
block|}
DECL|class|MyResolver
class|class
name|MyResolver
extends|extends
name|IndexNameExpressionResolver
block|{
DECL|method|MyResolver
specifier|public
name|MyResolver
parameter_list|()
block|{
name|super
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|concreteIndexNames
specifier|public
name|String
index|[]
name|concreteIndexNames
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|IndicesRequest
name|request
parameter_list|)
block|{
return|return
name|request
operator|.
name|indices
argument_list|()
return|;
block|}
block|}
annotation|@
name|BeforeClass
DECL|method|startThreadPool
specifier|public
specifier|static
name|void
name|startThreadPool
parameter_list|()
block|{
name|THREAD_POOL
operator|=
operator|new
name|TestThreadPool
argument_list|(
name|TransportInstanceSingleOperationActionTests
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|transport
operator|=
operator|new
name|CapturingTransport
argument_list|()
expr_stmt|;
name|clusterService
operator|=
name|createClusterService
argument_list|(
name|THREAD_POOL
argument_list|)
expr_stmt|;
name|transportService
operator|=
operator|new
name|TransportService
argument_list|(
name|clusterService
operator|.
name|getSettings
argument_list|()
argument_list|,
name|transport
argument_list|,
name|THREAD_POOL
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|start
argument_list|()
expr_stmt|;
name|transportService
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
name|action
operator|=
operator|new
name|TestTransportInstanceSingleOperationAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"indices:admin/test"
argument_list|,
name|transportService
argument_list|,
operator|new
name|ActionFilters
argument_list|(
operator|new
name|HashSet
argument_list|<
name|ActionFilter
argument_list|>
argument_list|()
argument_list|)
argument_list|,
operator|new
name|MyResolver
argument_list|()
argument_list|,
name|Request
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|clusterService
operator|.
name|close
argument_list|()
expr_stmt|;
name|transportService
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|destroyThreadPool
specifier|public
specifier|static
name|void
name|destroyThreadPool
parameter_list|()
block|{
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|THREAD_POOL
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// since static must set to null to be eligible for collection
name|THREAD_POOL
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|testGlobalBlock
specifier|public
name|void
name|testGlobalBlock
parameter_list|()
block|{
name|Request
name|request
init|=
operator|new
name|Request
argument_list|()
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|ClusterBlocks
operator|.
name|Builder
name|block
init|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
operator|new
name|ClusterBlock
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|RestStatus
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
name|ClusterBlockLevel
operator|.
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|blocks
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|action
operator|.
expr|new
name|AsyncSingleAction
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected ClusterBlockException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|ExceptionsHelper
operator|.
name|unwrap
argument_list|(
name|e
argument_list|,
name|ClusterBlockException
operator|.
name|class
argument_list|)
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"expected ClusterBlockException  but got "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected ClusterBlockException"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testBasicRequestWorks
specifier|public
name|void
name|testBasicRequestWorks
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
name|Request
name|request
init|=
operator|new
name|Request
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|request
operator|.
name|shardId
operator|=
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"test"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
expr|new
name|AsyncSingleAction
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|transport
operator|.
name|handleResponse
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
index|[
literal|0
index|]
operator|.
name|requestId
argument_list|,
operator|new
name|Response
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|testFailureWithoutRetry
specifier|public
name|void
name|testFailureWithoutRetry
parameter_list|()
throws|throws
name|Exception
block|{
name|Request
name|request
init|=
operator|new
name|Request
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|request
operator|.
name|shardId
operator|=
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"test"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
expr|new
name|AsyncSingleAction
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|requestId
init|=
name|transport
operator|.
name|capturedRequests
argument_list|()
index|[
literal|0
index|]
operator|.
name|requestId
decl_stmt|;
name|transport
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// this should not trigger retry or anything and the listener should report exception immediately
name|transport
operator|.
name|handleRemoteError
argument_list|(
name|requestId
argument_list|,
operator|new
name|TransportException
argument_list|(
literal|"a generic transport exception"
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"generic test exception"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// result should return immediately
name|assertTrue
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"this should fail with a transport exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|t
parameter_list|)
block|{
if|if
condition|(
name|ExceptionsHelper
operator|.
name|unwrap
argument_list|(
name|t
argument_list|,
name|TransportException
operator|.
name|class
argument_list|)
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"expected TransportException  but got "
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected and TransportException"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSuccessAfterRetryWithClusterStateUpdate
specifier|public
name|void
name|testSuccessAfterRetryWithClusterStateUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|Request
name|request
init|=
operator|new
name|Request
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|request
operator|.
name|shardId
operator|=
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|local
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"test"
argument_list|,
name|local
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
expr|new
name|AsyncSingleAction
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// this should fail because primary not initialized
name|assertThat
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"test"
argument_list|,
name|local
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
comment|// this time it should work
name|assertThat
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|transport
operator|.
name|handleResponse
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
index|[
literal|0
index|]
operator|.
name|requestId
argument_list|,
operator|new
name|Response
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|testSuccessAfterRetryWithExceptionFromTransport
specifier|public
name|void
name|testSuccessAfterRetryWithExceptionFromTransport
parameter_list|()
throws|throws
name|Exception
block|{
name|Request
name|request
init|=
operator|new
name|Request
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|request
operator|.
name|shardId
operator|=
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|local
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"test"
argument_list|,
name|local
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
expr|new
name|AsyncSingleAction
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|requestId
init|=
name|transport
operator|.
name|capturedRequests
argument_list|()
index|[
literal|0
index|]
operator|.
name|requestId
decl_stmt|;
name|transport
operator|.
name|clear
argument_list|()
expr_stmt|;
name|DiscoveryNode
name|node
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|getNodes
argument_list|()
operator|.
name|getLocalNode
argument_list|()
decl_stmt|;
name|transport
operator|.
name|handleLocalError
argument_list|(
name|requestId
argument_list|,
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"test exception"
argument_list|)
argument_list|)
expr_stmt|;
comment|// trigger cluster state observer
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"test"
argument_list|,
name|local
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|transport
operator|.
name|handleResponse
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
index|[
literal|0
index|]
operator|.
name|requestId
argument_list|,
operator|new
name|Response
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|testRetryOfAnAlreadyTimedOutRequest
specifier|public
name|void
name|testRetryOfAnAlreadyTimedOutRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|Request
name|request
init|=
operator|new
name|Request
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|timeout
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
decl_stmt|;
name|request
operator|.
name|shardId
operator|=
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"test"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
expr|new
name|AsyncSingleAction
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|requestId
init|=
name|transport
operator|.
name|capturedRequests
argument_list|()
index|[
literal|0
index|]
operator|.
name|requestId
decl_stmt|;
name|transport
operator|.
name|clear
argument_list|()
expr_stmt|;
name|DiscoveryNode
name|node
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|getNodes
argument_list|()
operator|.
name|getLocalNode
argument_list|()
decl_stmt|;
name|transport
operator|.
name|handleLocalError
argument_list|(
name|requestId
argument_list|,
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"test exception"
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait until the timeout was triggered and we actually tried to send for the second time
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertThat
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// let it fail the second time too
name|requestId
operator|=
name|transport
operator|.
name|capturedRequests
argument_list|()
index|[
literal|0
index|]
operator|.
name|requestId
expr_stmt|;
name|transport
operator|.
name|handleLocalError
argument_list|(
name|requestId
argument_list|,
operator|new
name|ConnectTransportException
argument_list|(
name|node
argument_list|,
literal|"test exception"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// result should return immediately
name|assertTrue
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"this should fail with a transport exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|t
parameter_list|)
block|{
if|if
condition|(
name|ExceptionsHelper
operator|.
name|unwrap
argument_list|(
name|t
argument_list|,
name|ConnectTransportException
operator|.
name|class
argument_list|)
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"expected ConnectTransportException  but got "
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected and ConnectTransportException"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testUnresolvableRequestDoesNotHang
specifier|public
name|void
name|testUnresolvableRequestDoesNotHang
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
name|action
operator|=
operator|new
name|TestTransportInstanceSingleOperationAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"indices:admin/test_unresolvable"
argument_list|,
name|transportService
argument_list|,
operator|new
name|ActionFilters
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
argument_list|,
operator|new
name|MyResolver
argument_list|()
argument_list|,
name|Request
operator|::
operator|new
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|resolveRequest
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|Request
name|request
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"request cannot be resolved"
argument_list|)
throw|;
block|}
block|}
expr_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|request
operator|.
name|shardId
operator|=
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"test"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
expr|new
name|AsyncSingleAction
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|ExceptionsHelper
operator|.
name|unwrap
argument_list|(
name|e
argument_list|,
name|IllegalStateException
operator|.
name|class
argument_list|)
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"expected IllegalStateException  but got "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected and IllegalStateException"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

