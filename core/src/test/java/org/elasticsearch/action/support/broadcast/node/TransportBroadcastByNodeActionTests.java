begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support.broadcast.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|IndicesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardsIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|TestShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|DummyTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|cluster
operator|.
name|TestClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|CapturingTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponseOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|object
operator|.
name|HasToString
operator|.
name|hasToString
import|;
end_import

begin_class
DECL|class|TransportBroadcastByNodeActionTests
specifier|public
class|class
name|TransportBroadcastByNodeActionTests
extends|extends
name|ESTestCase
block|{
DECL|field|TEST_INDEX
specifier|private
specifier|static
specifier|final
name|String
name|TEST_INDEX
init|=
literal|"test-index"
decl_stmt|;
DECL|field|TEST_CLUSTER
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CLUSTER
init|=
literal|"test-cluster"
decl_stmt|;
DECL|field|THREAD_POOL
specifier|private
specifier|static
name|ThreadPool
name|THREAD_POOL
decl_stmt|;
DECL|field|clusterService
specifier|private
name|TestClusterService
name|clusterService
decl_stmt|;
DECL|field|transport
specifier|private
name|CapturingTransport
name|transport
decl_stmt|;
DECL|field|transportService
specifier|private
name|TransportService
name|transportService
decl_stmt|;
DECL|field|action
specifier|private
name|TestTransportBroadcastByNodeAction
name|action
decl_stmt|;
DECL|class|Request
specifier|public
specifier|static
class|class
name|Request
extends|extends
name|BroadcastRequest
argument_list|<
name|Request
argument_list|>
block|{
DECL|method|Request
specifier|public
name|Request
parameter_list|()
block|{         }
DECL|method|Request
specifier|public
name|Request
parameter_list|(
name|String
index|[]
name|indices
parameter_list|)
block|{
name|super
argument_list|(
name|indices
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Response
specifier|public
specifier|static
class|class
name|Response
extends|extends
name|BroadcastResponse
block|{
DECL|method|Response
specifier|public
name|Response
parameter_list|()
block|{         }
DECL|method|Response
specifier|public
name|Response
parameter_list|(
name|int
name|totalShards
parameter_list|,
name|int
name|successfulShards
parameter_list|,
name|int
name|failedShards
parameter_list|,
name|List
argument_list|<
name|ShardOperationFailedException
argument_list|>
name|shardFailures
parameter_list|)
block|{
name|super
argument_list|(
name|totalShards
argument_list|,
name|successfulShards
argument_list|,
name|failedShards
argument_list|,
name|shardFailures
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestTransportBroadcastByNodeAction
class|class
name|TestTransportBroadcastByNodeAction
extends|extends
name|TransportBroadcastByNodeAction
argument_list|<
name|Request
argument_list|,
name|Response
argument_list|,
name|TransportBroadcastByNodeAction
operator|.
name|EmptyResult
argument_list|>
block|{
DECL|field|shards
specifier|private
specifier|final
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|Object
argument_list|>
name|shards
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|TestTransportBroadcastByNodeAction
specifier|public
name|TestTransportBroadcastByNodeAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|Supplier
argument_list|<
name|Request
argument_list|>
name|request
parameter_list|,
name|String
name|executor
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
literal|"indices:admin/test"
argument_list|,
name|THREAD_POOL
argument_list|,
name|TransportBroadcastByNodeActionTests
operator|.
name|this
operator|.
name|clusterService
argument_list|,
name|transportService
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|request
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readShardResult
specifier|protected
name|EmptyResult
name|readShardResult
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|EmptyResult
operator|.
name|readEmptyResultFrom
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newResponse
specifier|protected
name|Response
name|newResponse
parameter_list|(
name|Request
name|request
parameter_list|,
name|int
name|totalShards
parameter_list|,
name|int
name|successfulShards
parameter_list|,
name|int
name|failedShards
parameter_list|,
name|List
argument_list|<
name|EmptyResult
argument_list|>
name|emptyResults
parameter_list|,
name|List
argument_list|<
name|ShardOperationFailedException
argument_list|>
name|shardFailures
parameter_list|,
name|ClusterState
name|clusterState
parameter_list|)
block|{
return|return
operator|new
name|Response
argument_list|(
name|totalShards
argument_list|,
name|successfulShards
argument_list|,
name|failedShards
argument_list|,
name|shardFailures
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readRequestFrom
specifier|protected
name|Request
name|readRequestFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Request
name|request
init|=
operator|new
name|Request
argument_list|()
decl_stmt|;
name|request
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
annotation|@
name|Override
DECL|method|shardOperation
specifier|protected
name|EmptyResult
name|shardOperation
parameter_list|(
name|Request
name|request
parameter_list|,
name|ShardRouting
name|shardRouting
parameter_list|)
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|shards
operator|.
name|put
argument_list|(
name|shardRouting
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
return|return
name|EmptyResult
operator|.
name|INSTANCE
return|;
block|}
else|else
block|{
name|ElasticsearchException
name|e
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"operation failed"
argument_list|)
decl_stmt|;
name|shards
operator|.
name|put
argument_list|(
name|shardRouting
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|shards
specifier|protected
name|ShardsIterator
name|shards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|Request
name|request
parameter_list|,
name|String
index|[]
name|concreteIndices
parameter_list|)
block|{
return|return
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|checkGlobalBlock
specifier|protected
name|ClusterBlockException
name|checkGlobalBlock
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|Request
name|request
parameter_list|)
block|{
return|return
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|globalBlockedException
argument_list|(
name|ClusterBlockLevel
operator|.
name|METADATA_WRITE
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|checkRequestBlock
specifier|protected
name|ClusterBlockException
name|checkRequestBlock
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|Request
name|request
parameter_list|,
name|String
index|[]
name|concreteIndices
parameter_list|)
block|{
return|return
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|indicesBlockedException
argument_list|(
name|ClusterBlockLevel
operator|.
name|METADATA_WRITE
argument_list|,
name|concreteIndices
argument_list|)
return|;
block|}
DECL|method|getResults
specifier|public
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|Object
argument_list|>
name|getResults
parameter_list|()
block|{
return|return
name|shards
return|;
block|}
block|}
DECL|class|MyResolver
class|class
name|MyResolver
extends|extends
name|IndexNameExpressionResolver
block|{
DECL|method|MyResolver
specifier|public
name|MyResolver
parameter_list|()
block|{
name|super
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|concreteIndices
specifier|public
name|String
index|[]
name|concreteIndices
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|IndicesRequest
name|request
parameter_list|)
block|{
return|return
name|request
operator|.
name|indices
argument_list|()
return|;
block|}
block|}
annotation|@
name|BeforeClass
DECL|method|startThreadPool
specifier|public
specifier|static
name|void
name|startThreadPool
parameter_list|()
block|{
name|THREAD_POOL
operator|=
operator|new
name|ThreadPool
argument_list|(
name|TransportBroadcastByNodeActionTests
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|transport
operator|=
operator|new
name|CapturingTransport
argument_list|()
expr_stmt|;
name|clusterService
operator|=
operator|new
name|TestClusterService
argument_list|(
name|THREAD_POOL
argument_list|)
expr_stmt|;
name|transportService
operator|=
operator|new
name|TransportService
argument_list|(
name|transport
argument_list|,
name|THREAD_POOL
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|start
argument_list|()
expr_stmt|;
name|setClusterState
argument_list|(
name|clusterService
argument_list|,
name|TEST_INDEX
argument_list|)
expr_stmt|;
name|action
operator|=
operator|new
name|TestTransportBroadcastByNodeAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|transportService
argument_list|,
operator|new
name|ActionFilters
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
argument_list|,
operator|new
name|MyResolver
argument_list|()
argument_list|,
name|Request
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|)
expr_stmt|;
block|}
DECL|method|setClusterState
name|void
name|setClusterState
parameter_list|(
name|TestClusterService
name|clusterService
parameter_list|,
name|String
name|index
parameter_list|)
block|{
name|int
name|numberOfNodes
init|=
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|discoBuilder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
decl_stmt|;
name|IndexRoutingTable
operator|.
name|Builder
name|indexRoutingTable
init|=
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|int
name|shardIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfNodes
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|DiscoveryNode
name|node
init|=
name|newNode
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|discoBuilder
operator|=
name|discoBuilder
operator|.
name|put
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|int
name|numberOfShards
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numberOfShards
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
operator|++
name|shardIndex
argument_list|)
decl_stmt|;
name|ShardRouting
name|shard
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|index
argument_list|,
name|shardId
operator|.
name|getId
argument_list|()
argument_list|,
name|node
operator|.
name|id
argument_list|()
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|IndexShardRoutingTable
operator|.
name|Builder
name|indexShard
init|=
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|indexShard
operator|.
name|addShard
argument_list|(
name|shard
argument_list|)
expr_stmt|;
name|indexRoutingTable
operator|.
name|addIndexShard
argument_list|(
name|indexShard
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|discoBuilder
operator|.
name|localNodeId
argument_list|(
name|newNode
argument_list|(
literal|0
argument_list|)
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|discoBuilder
operator|.
name|masterNodeId
argument_list|(
name|newNode
argument_list|(
name|numberOfNodes
operator|-
literal|1
argument_list|)
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterState
operator|.
name|Builder
name|stateBuilder
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
name|TEST_CLUSTER
argument_list|)
argument_list|)
decl_stmt|;
name|stateBuilder
operator|.
name|nodes
argument_list|(
name|discoBuilder
argument_list|)
expr_stmt|;
name|stateBuilder
operator|.
name|routingTable
argument_list|(
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|indexRoutingTable
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|stateBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|clusterService
operator|.
name|setState
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
block|}
DECL|method|newNode
specifier|static
name|DiscoveryNode
name|newNode
parameter_list|(
name|int
name|nodeId
parameter_list|)
block|{
return|return
operator|new
name|DiscoveryNode
argument_list|(
literal|"node_"
operator|+
name|nodeId
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
return|;
block|}
annotation|@
name|AfterClass
DECL|method|destroyThreadPool
specifier|public
specifier|static
name|void
name|destroyThreadPool
parameter_list|()
block|{
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|THREAD_POOL
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// since static must set to null to be eligible for collection
name|THREAD_POOL
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|testGlobalBlock
specifier|public
name|void
name|testGlobalBlock
parameter_list|()
block|{
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX
block|}
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|ClusterBlocks
operator|.
name|Builder
name|block
init|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
operator|new
name|ClusterBlock
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|RestStatus
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
name|ClusterBlockLevel
operator|.
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|clusterService
operator|.
name|setState
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|blocks
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|action
operator|.
expr|new
name|AsyncAction
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected ClusterBlockException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClusterBlockException
name|expected
parameter_list|)
block|{          }
block|}
DECL|method|testRequestBlock
specifier|public
name|void
name|testRequestBlock
parameter_list|()
block|{
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX
block|}
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|ClusterBlocks
operator|.
name|Builder
name|block
init|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addIndexBlock
argument_list|(
name|TEST_INDEX
argument_list|,
operator|new
name|ClusterBlock
argument_list|(
literal|1
argument_list|,
literal|"test-block"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|RestStatus
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
name|ClusterBlockLevel
operator|.
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|clusterService
operator|.
name|setState
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|blocks
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|action
operator|.
expr|new
name|AsyncAction
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected ClusterBlockException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClusterBlockException
name|expected
parameter_list|)
block|{          }
block|}
DECL|method|testOneRequestIsSentToEachNodeHoldingAShard
specifier|public
name|void
name|testOneRequestIsSentToEachNodeHoldingAShard
parameter_list|()
block|{
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX
block|}
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|action
operator|.
expr|new
name|AsyncAction
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CapturingTransport
operator|.
name|CapturedRequest
argument_list|>
argument_list|>
name|capturedRequests
init|=
name|transport
operator|.
name|capturedRequestsByTargetNode
argument_list|()
decl_stmt|;
name|ShardsIterator
name|shardIt
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX
block|}
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shard
range|:
name|shardIt
operator|.
name|asUnordered
argument_list|()
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check a request was sent to the right number of nodes
name|assertEquals
argument_list|(
name|set
operator|.
name|size
argument_list|()
argument_list|,
name|capturedRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check requests were sent to the right nodes
name|assertEquals
argument_list|(
name|set
argument_list|,
name|capturedRequests
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CapturingTransport
operator|.
name|CapturedRequest
argument_list|>
argument_list|>
name|entry
range|:
name|capturedRequests
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// check one request was sent to each node
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// simulate the master being removed from the cluster but before a new master is elected
comment|// as such, the shards assigned to the master will still show up in the cluster state as assigned to a node but
comment|// that node will not be in the local cluster state on any node that has detected the master as failing
comment|// in this case, such a shard should be treated as unassigned
DECL|method|testRequestsAreNotSentToFailedMaster
specifier|public
name|void
name|testRequestsAreNotSentToFailedMaster
parameter_list|()
block|{
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX
block|}
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|masterNode
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
decl_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|builder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|getNodes
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|remove
argument_list|(
name|masterNode
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|setState
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|nodes
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
expr|new
name|AsyncAction
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CapturingTransport
operator|.
name|CapturedRequest
argument_list|>
argument_list|>
name|capturedRequests
init|=
name|transport
operator|.
name|capturedRequestsByTargetNode
argument_list|()
decl_stmt|;
comment|// the master should not be in the list of nodes that requests were sent to
name|ShardsIterator
name|shardIt
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX
block|}
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shard
range|:
name|shardIt
operator|.
name|asUnordered
argument_list|()
control|)
block|{
if|if
condition|(
name|shard
operator|.
name|currentNodeId
argument_list|()
operator|!=
name|masterNode
operator|.
name|id
argument_list|()
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check a request was sent to the right number of nodes
name|assertEquals
argument_list|(
name|set
operator|.
name|size
argument_list|()
argument_list|,
name|capturedRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check requests were sent to the right nodes
name|assertEquals
argument_list|(
name|set
argument_list|,
name|capturedRequests
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CapturingTransport
operator|.
name|CapturedRequest
argument_list|>
argument_list|>
name|entry
range|:
name|capturedRequests
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// check one request was sent to each non-master node
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOperationExecution
specifier|public
name|void
name|testOperationExecution
parameter_list|()
throws|throws
name|Exception
block|{
name|ShardsIterator
name|shardIt
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX
block|}
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ShardRouting
argument_list|>
name|shards
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|nodeId
init|=
name|shardIt
operator|.
name|asUnordered
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|currentNodeId
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shard
range|:
name|shardIt
operator|.
name|asUnordered
argument_list|()
control|)
block|{
if|if
condition|(
name|nodeId
operator|.
name|equals
argument_list|(
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|shards
operator|.
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|TransportBroadcastByNodeAction
operator|.
name|BroadcastByNodeTransportRequestHandler
name|handler
init|=
name|action
operator|.
expr|new
name|BroadcastByNodeTransportRequestHandler
argument_list|()
decl_stmt|;
name|TestTransportChannel
name|channel
init|=
operator|new
name|TestTransportChannel
argument_list|()
decl_stmt|;
name|handler
operator|.
name|messageReceived
argument_list|(
name|action
operator|.
expr|new
name|NodeRequest
argument_list|(
name|nodeId
argument_list|,
operator|new
name|Request
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|shards
argument_list|)
argument_list|)
argument_list|,
name|channel
argument_list|)
expr_stmt|;
comment|// check the operation was executed only on the expected shards
name|assertEquals
argument_list|(
name|shards
argument_list|,
name|action
operator|.
name|getResults
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|TransportResponse
name|response
init|=
name|channel
operator|.
name|getCapturedResponse
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|response
operator|instanceof
name|TransportBroadcastByNodeAction
operator|.
name|NodeResponse
argument_list|)
expr_stmt|;
name|TransportBroadcastByNodeAction
operator|.
name|NodeResponse
name|nodeResponse
init|=
operator|(
name|TransportBroadcastByNodeAction
operator|.
name|NodeResponse
operator|)
name|response
decl_stmt|;
comment|// check the operation was executed on the correct node
name|assertEquals
argument_list|(
literal|"node id"
argument_list|,
name|nodeId
argument_list|,
name|nodeResponse
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|successfulShards
init|=
literal|0
decl_stmt|;
name|int
name|failedShards
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|result
range|:
name|action
operator|.
name|getResults
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|result
operator|instanceof
name|ElasticsearchException
operator|)
condition|)
block|{
name|successfulShards
operator|++
expr_stmt|;
block|}
else|else
block|{
name|failedShards
operator|++
expr_stmt|;
block|}
block|}
comment|// check the operation results
name|assertEquals
argument_list|(
literal|"successful shards"
argument_list|,
name|successfulShards
argument_list|,
name|nodeResponse
operator|.
name|getSuccessfulShards
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"total shards"
argument_list|,
name|action
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|nodeResponse
operator|.
name|getTotalShards
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failed shards"
argument_list|,
name|failedShards
argument_list|,
name|nodeResponse
operator|.
name|getExceptions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BroadcastShardOperationFailedException
argument_list|>
name|exceptions
init|=
name|nodeResponse
operator|.
name|getExceptions
argument_list|()
decl_stmt|;
for|for
control|(
name|BroadcastShardOperationFailedException
name|exception
range|:
name|exceptions
control|)
block|{
name|assertThat
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"operation indices:admin/test failed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exception
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"operation failed"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testResultAggregation
specifier|public
name|void
name|testResultAggregation
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX
block|}
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
comment|// simulate removing the master
specifier|final
name|boolean
name|simulateFailedMasterNode
init|=
name|rarely
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|failedMasterNode
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|simulateFailedMasterNode
condition|)
block|{
name|failedMasterNode
operator|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
expr_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|builder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|getNodes
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|remove
argument_list|(
name|failedMasterNode
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|masterNodeId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|setState
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|nodes
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
expr|new
name|AsyncAction
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CapturingTransport
operator|.
name|CapturedRequest
argument_list|>
argument_list|>
name|capturedRequests
init|=
name|transport
operator|.
name|capturedRequestsByTargetNode
argument_list|()
decl_stmt|;
name|transport
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ShardsIterator
name|shardIt
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|allShards
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ShardRouting
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shard
range|:
name|shardIt
operator|.
name|asUnordered
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|get
argument_list|(
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
name|int
name|totalShards
init|=
literal|0
decl_stmt|;
name|int
name|totalSuccessfulShards
init|=
literal|0
decl_stmt|;
name|int
name|totalFailedShards
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CapturingTransport
operator|.
name|CapturedRequest
argument_list|>
argument_list|>
name|entry
range|:
name|capturedRequests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|BroadcastShardOperationFailedException
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|requestId
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|requestId
decl_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
comment|// simulate node failure
name|totalShards
operator|+=
name|map
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|totalFailedShards
operator|+=
name|map
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|transport
operator|.
name|handleResponse
argument_list|(
name|requestId
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
init|=
name|map
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TransportBroadcastByNodeAction
operator|.
name|EmptyResult
argument_list|>
name|shardResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shard
range|:
name|shards
control|)
block|{
name|totalShards
operator|++
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
comment|// simulate operation failure
name|totalFailedShards
operator|++
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
operator|new
name|BroadcastShardOperationFailedException
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
argument_list|,
literal|"operation indices:admin/test failed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shardResults
operator|.
name|add
argument_list|(
name|TransportBroadcastByNodeAction
operator|.
name|EmptyResult
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
name|totalSuccessfulShards
operator|+=
name|shardResults
operator|.
name|size
argument_list|()
expr_stmt|;
name|TransportBroadcastByNodeAction
operator|.
name|NodeResponse
name|nodeResponse
init|=
name|action
operator|.
expr|new
name|NodeResponse
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|shards
operator|.
name|size
argument_list|()
argument_list|,
name|shardResults
argument_list|,
name|exceptions
argument_list|)
decl_stmt|;
name|transport
operator|.
name|handleResponse
argument_list|(
name|requestId
argument_list|,
name|nodeResponse
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|simulateFailedMasterNode
condition|)
block|{
name|totalShards
operator|+=
name|map
operator|.
name|get
argument_list|(
name|failedMasterNode
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|Response
name|response
init|=
name|listener
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"total shards"
argument_list|,
name|totalShards
argument_list|,
name|response
operator|.
name|getTotalShards
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"successful shards"
argument_list|,
name|totalSuccessfulShards
argument_list|,
name|response
operator|.
name|getSuccessfulShards
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failed shards"
argument_list|,
name|totalFailedShards
argument_list|,
name|response
operator|.
name|getFailedShards
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"accumulated exceptions"
argument_list|,
name|totalFailedShards
argument_list|,
name|response
operator|.
name|getShardFailures
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|class|TestTransportChannel
specifier|public
class|class
name|TestTransportChannel
implements|implements
name|TransportChannel
block|{
DECL|field|capturedResponse
specifier|private
name|TransportResponse
name|capturedResponse
decl_stmt|;
DECL|method|getCapturedResponse
specifier|public
name|TransportResponse
name|getCapturedResponse
parameter_list|()
block|{
return|return
name|capturedResponse
return|;
block|}
annotation|@
name|Override
DECL|method|action
specifier|public
name|String
name|action
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getProfileName
specifier|public
name|String
name|getProfileName
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
DECL|method|sendResponse
specifier|public
name|void
name|sendResponse
parameter_list|(
name|TransportResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|capturedResponse
operator|=
name|response
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendResponse
specifier|public
name|void
name|sendResponse
parameter_list|(
name|TransportResponse
name|response
parameter_list|,
name|TransportResponseOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{         }
annotation|@
name|Override
DECL|method|sendResponse
specifier|public
name|void
name|sendResponse
parameter_list|(
name|Throwable
name|error
parameter_list|)
throws|throws
name|IOException
block|{         }
block|}
block|}
end_class

end_unit

