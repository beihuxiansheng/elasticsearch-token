begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_class
DECL|class|GroupedActionListenerTests
specifier|public
class|class
name|GroupedActionListenerTests
extends|extends
name|ESTestCase
block|{
DECL|method|testNotifications
specifier|public
name|void
name|testNotifications
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|AtomicReference
argument_list|<
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|resRef
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|ActionListener
argument_list|<
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ActionListener
argument_list|<
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Collection
argument_list|<
name|Integer
argument_list|>
name|integers
parameter_list|)
block|{
name|resRef
operator|.
name|set
argument_list|(
name|integers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
specifier|final
name|int
name|groupSize
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Integer
argument_list|>
name|defaults
init|=
name|randomBoolean
argument_list|()
condition|?
name|Collections
operator|.
name|singletonList
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|GroupedActionListener
argument_list|<
name|Integer
argument_list|>
name|listener
init|=
operator|new
name|GroupedActionListener
argument_list|<>
argument_list|(
name|result
argument_list|,
name|groupSize
argument_list|,
name|defaults
argument_list|)
decl_stmt|;
name|int
name|numThreads
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|count
operator|.
name|incrementAndGet
argument_list|()
operator|)
operator|<=
name|groupSize
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|c
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|resRef
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|resRef
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|int
name|expectedSize
init|=
name|groupSize
operator|+
name|defaults
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|resRef
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|expectedValue
init|=
name|defaults
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedSize
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|expectedValue
operator|++
argument_list|)
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFailed
specifier|public
name|void
name|testFailed
parameter_list|()
block|{
name|AtomicReference
argument_list|<
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|resRef
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|excRef
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|ActionListener
argument_list|<
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ActionListener
argument_list|<
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Collection
argument_list|<
name|Integer
argument_list|>
name|integers
parameter_list|)
block|{
name|resRef
operator|.
name|set
argument_list|(
name|integers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|excRef
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Collection
argument_list|<
name|Integer
argument_list|>
name|defaults
init|=
name|randomBoolean
argument_list|()
condition|?
name|Collections
operator|.
name|singletonList
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|GroupedActionListener
argument_list|<
name|Integer
argument_list|>
name|listener
init|=
operator|new
name|GroupedActionListener
argument_list|<>
argument_list|(
name|result
argument_list|,
name|size
argument_list|,
name|defaults
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|IOException
name|ioException
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|RuntimeException
name|rtException
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|rtException
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|ioException
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|==
literal|4
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|excRef
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rtException
argument_list|,
name|excRef
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|excRef
operator|.
name|get
argument_list|()
operator|.
name|getSuppressed
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ioException
argument_list|,
name|excRef
operator|.
name|get
argument_list|()
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|resRef
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|resRef
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

