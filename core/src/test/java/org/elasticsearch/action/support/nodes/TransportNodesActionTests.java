begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support.nodes
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|nodes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|node
operator|.
name|TransportBroadcastByNodeActionTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|DummyTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|cluster
operator|.
name|TestClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|CapturingTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReferenceArray
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_class
DECL|class|TransportNodesActionTests
specifier|public
class|class
name|TransportNodesActionTests
extends|extends
name|ESTestCase
block|{
DECL|field|THREAD_POOL
specifier|private
specifier|static
name|ThreadPool
name|THREAD_POOL
decl_stmt|;
DECL|field|CLUSTER_NAME
specifier|private
specifier|static
name|ClusterName
name|CLUSTER_NAME
init|=
operator|new
name|ClusterName
argument_list|(
literal|"test-cluster"
argument_list|)
decl_stmt|;
DECL|field|clusterService
specifier|private
name|TestClusterService
name|clusterService
decl_stmt|;
DECL|field|transport
specifier|private
name|CapturingTransport
name|transport
decl_stmt|;
DECL|field|action
specifier|private
name|TestTransportNodesAction
name|action
decl_stmt|;
DECL|method|testRequestIsSentToEachNode
specifier|public
name|void
name|testRequestIsSentToEachNode
parameter_list|()
throws|throws
name|Exception
block|{
name|TestNodesRequest
name|request
init|=
operator|new
name|TestNodesRequest
argument_list|()
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|TestNodesResponse
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|action
operator|.
expr|new
name|AsyncAction
argument_list|(
literal|null
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CapturingTransport
operator|.
name|CapturedRequest
argument_list|>
argument_list|>
name|capturedRequests
init|=
name|transport
operator|.
name|getCapturedRequestsByTargetNodeAndClear
argument_list|()
decl_stmt|;
name|int
name|numNodes
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// check a request was sent to the right number of nodes
name|assertEquals
argument_list|(
name|numNodes
argument_list|,
name|capturedRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNodesSelectors
specifier|public
name|void
name|testNodesSelectors
parameter_list|()
block|{
name|int
name|numSelectors
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodeSelectors
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSelectors
condition|;
name|i
operator|++
control|)
block|{
name|nodeSelectors
operator|.
name|add
argument_list|(
name|randomFrom
argument_list|(
name|NodeSelector
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|selector
argument_list|)
expr_stmt|;
block|}
name|int
name|numNodeIds
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|String
index|[]
name|nodeIds
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|keys
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNodeIds
condition|;
name|i
operator|++
control|)
block|{
name|String
name|nodeId
init|=
name|randomFrom
argument_list|(
name|nodeIds
argument_list|)
decl_stmt|;
name|nodeSelectors
operator|.
name|add
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|finalNodesIds
init|=
name|nodeSelectors
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|nodeSelectors
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|TestNodesRequest
name|request
init|=
operator|new
name|TestNodesRequest
argument_list|(
name|finalNodesIds
argument_list|)
decl_stmt|;
name|action
operator|.
expr|new
name|AsyncAction
argument_list|(
literal|null
argument_list|,
name|request
argument_list|,
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CapturingTransport
operator|.
name|CapturedRequest
argument_list|>
argument_list|>
name|capturedRequests
init|=
name|transport
operator|.
name|getCapturedRequestsByTargetNodeAndClear
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|resolveNodesIds
argument_list|(
name|finalNodesIds
argument_list|)
operator|.
name|length
argument_list|,
name|capturedRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|enum|NodeSelector
specifier|private
enum|enum
name|NodeSelector
block|{
DECL|enum constant|LOCAL
DECL|enum constant|ELECTED_MASTER
DECL|enum constant|MASTER_ELIGIBLE
DECL|enum constant|DATA
DECL|enum constant|CUSTOM_ATTRIBUTE
name|LOCAL
argument_list|(
literal|"_local"
argument_list|)
block|,
name|ELECTED_MASTER
argument_list|(
literal|"_master"
argument_list|)
block|,
name|MASTER_ELIGIBLE
argument_list|(
literal|"master:true"
argument_list|)
block|,
name|DATA
argument_list|(
literal|"data:true"
argument_list|)
block|,
name|CUSTOM_ATTRIBUTE
argument_list|(
literal|"attr:value"
argument_list|)
block|;
DECL|field|selector
specifier|private
specifier|final
name|String
name|selector
decl_stmt|;
DECL|method|NodeSelector
name|NodeSelector
parameter_list|(
name|String
name|selector
parameter_list|)
block|{
name|this
operator|.
name|selector
operator|=
name|selector
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeClass
DECL|method|startThreadPool
specifier|public
specifier|static
name|void
name|startThreadPool
parameter_list|()
block|{
name|THREAD_POOL
operator|=
operator|new
name|ThreadPool
argument_list|(
name|TransportBroadcastByNodeActionTests
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|destroyThreadPool
specifier|public
specifier|static
name|void
name|destroyThreadPool
parameter_list|()
block|{
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|THREAD_POOL
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// since static must set to null to be eligible for collection
name|THREAD_POOL
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|transport
operator|=
operator|new
name|CapturingTransport
argument_list|()
expr_stmt|;
name|clusterService
operator|=
operator|new
name|TestClusterService
argument_list|(
name|THREAD_POOL
argument_list|)
expr_stmt|;
specifier|final
name|TransportService
name|transportService
init|=
operator|new
name|TransportService
argument_list|(
name|transport
argument_list|,
name|THREAD_POOL
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|start
argument_list|()
expr_stmt|;
name|transportService
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
name|int
name|numNodes
init|=
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|discoBuilder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|discoveryNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNodes
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
literal|"master"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
literal|"data"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
literal|"ingest"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attributes
operator|.
name|put
argument_list|(
literal|"client"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
literal|"custom"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"match"
else|:
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DiscoveryNode
name|node
init|=
name|newNode
argument_list|(
name|i
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|discoBuilder
operator|=
name|discoBuilder
operator|.
name|put
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|discoveryNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|discoBuilder
operator|.
name|localNodeId
argument_list|(
name|randomFrom
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|discoBuilder
operator|.
name|masterNodeId
argument_list|(
name|randomFrom
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterState
operator|.
name|Builder
name|stateBuilder
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|CLUSTER_NAME
argument_list|)
decl_stmt|;
name|stateBuilder
operator|.
name|nodes
argument_list|(
name|discoBuilder
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|stateBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|clusterService
operator|.
name|setState
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
name|action
operator|=
operator|new
name|TestTransportNodesAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|THREAD_POOL
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|,
operator|new
name|ActionFilters
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
argument_list|,
name|TestNodesRequest
operator|::
operator|new
argument_list|,
name|TestNodeRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|)
expr_stmt|;
block|}
DECL|method|newNode
specifier|private
specifier|static
name|DiscoveryNode
name|newNode
parameter_list|(
name|int
name|nodeId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
parameter_list|)
block|{
name|String
name|node
init|=
literal|"node_"
operator|+
name|nodeId
decl_stmt|;
return|return
operator|new
name|DiscoveryNode
argument_list|(
name|node
argument_list|,
name|node
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|attributes
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
return|;
block|}
DECL|class|TestTransportNodesAction
specifier|private
specifier|static
class|class
name|TestTransportNodesAction
extends|extends
name|TransportNodesAction
argument_list|<
name|TestNodesRequest
argument_list|,
name|TestNodesResponse
argument_list|,
name|TestNodeRequest
argument_list|,
name|TestNodeResponse
argument_list|>
block|{
DECL|method|TestTransportNodesAction
name|TestTransportNodesAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|Supplier
argument_list|<
name|TestNodesRequest
argument_list|>
name|request
parameter_list|,
name|Supplier
argument_list|<
name|TestNodeRequest
argument_list|>
name|nodeRequest
parameter_list|,
name|String
name|nodeExecutor
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
literal|"indices:admin/test"
argument_list|,
name|CLUSTER_NAME
argument_list|,
name|threadPool
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|,
name|actionFilters
argument_list|,
literal|null
argument_list|,
name|request
argument_list|,
name|nodeRequest
argument_list|,
name|nodeExecutor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newResponse
specifier|protected
name|TestNodesResponse
name|newResponse
parameter_list|(
name|TestNodesRequest
name|request
parameter_list|,
name|AtomicReferenceArray
name|nodesResponses
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|TestNodeResponse
argument_list|>
name|nodeResponses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodesResponses
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|resp
init|=
name|nodesResponses
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|resp
operator|instanceof
name|TestNodeResponse
condition|)
block|{
name|nodeResponses
operator|.
name|add
argument_list|(
operator|(
name|TestNodeResponse
operator|)
name|resp
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|TestNodesResponse
argument_list|(
name|nodeResponses
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newNodeRequest
specifier|protected
name|TestNodeRequest
name|newNodeRequest
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|TestNodesRequest
name|request
parameter_list|)
block|{
return|return
operator|new
name|TestNodeRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|newNodeResponse
specifier|protected
name|TestNodeResponse
name|newNodeResponse
parameter_list|()
block|{
return|return
operator|new
name|TestNodeResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nodeOperation
specifier|protected
name|TestNodeResponse
name|nodeOperation
parameter_list|(
name|TestNodeRequest
name|request
parameter_list|)
block|{
return|return
operator|new
name|TestNodeResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|accumulateExceptions
specifier|protected
name|boolean
name|accumulateExceptions
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|class|TestNodesRequest
specifier|private
specifier|static
class|class
name|TestNodesRequest
extends|extends
name|BaseNodesRequest
argument_list|<
name|TestNodesRequest
argument_list|>
block|{
DECL|method|TestNodesRequest
name|TestNodesRequest
parameter_list|(
name|String
modifier|...
name|nodesIds
parameter_list|)
block|{
name|super
argument_list|(
name|nodesIds
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestNodesResponse
specifier|private
specifier|static
class|class
name|TestNodesResponse
extends|extends
name|BaseNodesResponse
argument_list|<
name|TestNodeResponse
argument_list|>
block|{
DECL|field|nodeResponses
specifier|private
specifier|final
name|List
argument_list|<
name|TestNodeResponse
argument_list|>
name|nodeResponses
decl_stmt|;
DECL|method|TestNodesResponse
name|TestNodesResponse
parameter_list|(
name|List
argument_list|<
name|TestNodeResponse
argument_list|>
name|nodeResponses
parameter_list|)
block|{
name|this
operator|.
name|nodeResponses
operator|=
name|nodeResponses
expr_stmt|;
block|}
block|}
DECL|class|TestNodeRequest
specifier|private
specifier|static
class|class
name|TestNodeRequest
extends|extends
name|BaseNodeRequest
block|{     }
DECL|class|TestNodeResponse
specifier|private
specifier|static
class|class
name|TestNodeResponse
extends|extends
name|BaseNodeResponse
block|{     }
block|}
end_class

end_unit

