begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support.replication
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|UnavailableShardsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|close
operator|.
name|CloseIndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActiveShardCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationOperation
operator|.
name|ReplicaResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|NoNodeAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ESAllocationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
operator|.
name|ShardStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|AllocationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|TestShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|cluster
operator|.
name|ClusterStateChanges
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|CapturingTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponseOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ClusterStateCreationUtils
operator|.
name|state
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ClusterStateCreationUtils
operator|.
name|stateWithActivePrimary
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_WAIT_FOR_ACTIVE_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ClusterServiceUtils
operator|.
name|createClusterService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ClusterServiceUtils
operator|.
name|setState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|arrayWithSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TransportReplicationActionTests
specifier|public
class|class
name|TransportReplicationActionTests
extends|extends
name|ESTestCase
block|{
comment|/**      * takes a request that was sent by a {@link TransportReplicationAction} and captured      * and returns the underlying request if it's wrapped or the original (cast to the expected type).      *      * This will throw a {@link ClassCastException} if the request is of the wrong type.      */
DECL|method|resolveRequest
specifier|public
specifier|static
parameter_list|<
name|R
extends|extends
name|ReplicationRequest
parameter_list|>
name|R
name|resolveRequest
parameter_list|(
name|TransportRequest
name|requestOrWrappedRequest
parameter_list|)
block|{
if|if
condition|(
name|requestOrWrappedRequest
operator|instanceof
name|TransportReplicationAction
operator|.
name|ConcreteShardRequest
condition|)
block|{
name|requestOrWrappedRequest
operator|=
operator|(
operator|(
name|TransportReplicationAction
operator|.
name|ConcreteShardRequest
argument_list|<
name|?
argument_list|>
operator|)
name|requestOrWrappedRequest
operator|)
operator|.
name|getRequest
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|R
operator|)
name|requestOrWrappedRequest
return|;
block|}
DECL|field|threadPool
specifier|private
specifier|static
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|clusterService
specifier|private
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|transportService
specifier|private
name|TransportService
name|transportService
decl_stmt|;
DECL|field|transport
specifier|private
name|CapturingTransport
name|transport
decl_stmt|;
DECL|field|action
specifier|private
name|TestAction
name|action
decl_stmt|;
DECL|field|shardStateAction
specifier|private
name|ShardStateAction
name|shardStateAction
decl_stmt|;
comment|/* *     * TransportReplicationAction needs an instance of IndexShard to count operations.     * indexShards is reset to null before each test and will be initialized upon request in the tests.     */
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
block|{
name|threadPool
operator|=
operator|new
name|TestThreadPool
argument_list|(
literal|"ShardReplicationTests"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|transport
operator|=
operator|new
name|CapturingTransport
argument_list|()
expr_stmt|;
name|clusterService
operator|=
name|createClusterService
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
name|transportService
operator|=
operator|new
name|TransportService
argument_list|(
name|clusterService
operator|.
name|getSettings
argument_list|()
argument_list|,
name|transport
argument_list|,
name|threadPool
argument_list|,
name|TransportService
operator|.
name|NOOP_TRANSPORT_INTERCEPTOR
argument_list|,
name|x
lambda|->
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|start
argument_list|()
expr_stmt|;
name|transportService
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
name|shardStateAction
operator|=
operator|new
name|ShardStateAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
name|action
operator|=
operator|new
name|TestAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"testAction"
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|shardStateAction
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|clusterService
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
block|{
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|threadPool
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|threadPool
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|assertListenerThrows
parameter_list|<
name|T
parameter_list|>
name|void
name|assertListenerThrows
parameter_list|(
name|String
name|msg
parameter_list|,
name|PlainActionFuture
argument_list|<
name|T
argument_list|>
name|listener
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|klass
parameter_list|)
throws|throws
name|InterruptedException
block|{
try|try
block|{
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|klass
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBlocks
specifier|public
name|void
name|testBlocks
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|Request
name|request
init|=
operator|new
name|Request
argument_list|()
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|ReplicationTask
name|task
init|=
name|maybeTask
argument_list|()
decl_stmt|;
name|TestAction
name|action
init|=
operator|new
name|TestAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"testActionWithBlocks"
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|shardStateAction
argument_list|,
name|threadPool
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ClusterBlockLevel
name|globalBlockLevel
parameter_list|()
block|{
return|return
name|ClusterBlockLevel
operator|.
name|WRITE
return|;
block|}
block|}
decl_stmt|;
name|ClusterBlocks
operator|.
name|Builder
name|block
init|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
operator|new
name|ClusterBlock
argument_list|(
literal|1
argument_list|,
literal|"non retryable"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|RestStatus
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
name|ClusterBlockLevel
operator|.
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|blocks
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
name|TestAction
operator|.
name|ReroutePhase
name|reroutePhase
init|=
name|action
operator|.
expr|new
name|ReroutePhase
argument_list|(
name|task
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|reroutePhase
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"primary phase should fail operation"
argument_list|,
name|listener
argument_list|,
name|ClusterBlockException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"failed"
argument_list|)
expr_stmt|;
name|block
operator|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
operator|new
name|ClusterBlock
argument_list|(
literal|1
argument_list|,
literal|"retryable"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|RestStatus
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
name|ClusterBlockLevel
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|blocks
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
expr_stmt|;
name|reroutePhase
operator|=
name|action
operator|.
expr|new
name|ReroutePhase
argument_list|(
name|task
argument_list|,
operator|new
name|Request
argument_list|()
operator|.
name|timeout
argument_list|(
literal|"5ms"
argument_list|)
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|reroutePhase
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"failed to timeout on retryable block"
argument_list|,
name|listener
argument_list|,
name|ClusterBlockException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"failed"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|request
operator|.
name|isRetrySet
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
expr_stmt|;
name|reroutePhase
operator|=
name|action
operator|.
expr|new
name|ReroutePhase
argument_list|(
name|task
argument_list|,
name|request
operator|=
operator|new
name|Request
argument_list|()
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|reroutePhase
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"primary phase should wait on retryable block"
argument_list|,
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"waiting_for_retry"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|request
operator|.
name|isRetrySet
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|block
operator|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
operator|new
name|ClusterBlock
argument_list|(
literal|1
argument_list|,
literal|"non retryable"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|RestStatus
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
name|ClusterBlockLevel
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|blocks
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"primary phase should fail operation when moving from a retryable block to a non-retryable one"
argument_list|,
name|listener
argument_list|,
name|ClusterBlockException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertIndexShardUninitialized
argument_list|()
expr_stmt|;
name|action
operator|=
operator|new
name|TestAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"testActionWithNoBlocks"
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|shardStateAction
argument_list|,
name|threadPool
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ClusterBlockLevel
name|globalBlockLevel
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
expr_stmt|;
name|listener
operator|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
expr_stmt|;
name|reroutePhase
operator|=
name|action
operator|.
expr|new
name|ReroutePhase
argument_list|(
name|task
argument_list|,
operator|new
name|Request
argument_list|()
operator|.
name|timeout
argument_list|(
literal|"5ms"
argument_list|)
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|reroutePhase
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"should fail with an IndexNotFoundException when no blocks checked"
argument_list|,
name|listener
argument_list|,
name|IndexNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|assertIndexShardUninitialized
specifier|public
name|void
name|assertIndexShardUninitialized
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotStartedPrimary
specifier|public
name|void
name|testNotStartedPrimary
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// no replicas in oder to skip the replication part
name|setState
argument_list|(
name|clusterService
argument_list|,
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|ShardRoutingState
operator|.
name|INITIALIZING
else|:
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
argument_list|)
expr_stmt|;
name|ReplicationTask
name|task
init|=
name|maybeTask
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> using initial state:\n{}"
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
operator|.
name|timeout
argument_list|(
literal|"1ms"
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|TestAction
operator|.
name|ReroutePhase
name|reroutePhase
init|=
name|action
operator|.
expr|new
name|ReroutePhase
argument_list|(
name|task
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|reroutePhase
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"unassigned primary didn't cause a timeout"
argument_list|,
name|listener
argument_list|,
name|UnavailableShardsException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"failed"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|request
operator|.
name|isRetrySet
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
expr_stmt|;
name|reroutePhase
operator|=
name|action
operator|.
expr|new
name|ReroutePhase
argument_list|(
name|task
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|reroutePhase
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"unassigned primary didn't cause a retry"
argument_list|,
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"waiting_for_retry"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|request
operator|.
name|isRetrySet
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> primary assigned state:\n{}"
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|shard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|primaryNodeId
init|=
name|shardRoutingTable
operator|.
name|primaryShard
argument_list|()
operator|.
name|currentNodeId
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|CapturingTransport
operator|.
name|CapturedRequest
argument_list|>
name|capturedRequests
init|=
name|transport
operator|.
name|getCapturedRequestsByTargetNodeAndClear
argument_list|()
operator|.
name|get
argument_list|(
name|primaryNodeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|action
argument_list|,
name|equalTo
argument_list|(
literal|"testAction[p]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertIndexShardCounter
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * When relocating a primary shard, there is a cluster state update at the end of relocation where the active primary is switched from      * the relocation source to the relocation target. If relocation source receives and processes this cluster state      * before the relocation target, there is a time span where relocation source believes active primary to be on      * relocation target and relocation target believes active primary to be on relocation source. This results in replication      * requests being sent back and forth.      *<p>      * This test checks that replication request is not routed back from relocation target to relocation source in case of      * stale index routing table on relocation target.      */
DECL|method|testNoRerouteOnStaleClusterState
specifier|public
name|void
name|testNoRerouteOnStaleClusterState
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|RELOCATING
argument_list|)
decl_stmt|;
name|String
name|relocationTargetNode
init|=
name|state
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|shardId
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|relocatingNodeId
argument_list|()
decl_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|relocationTargetNode
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> relocation ongoing state:\n{}"
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
operator|.
name|timeout
argument_list|(
literal|"1ms"
argument_list|)
operator|.
name|routedBasedOnClusterVersion
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|TestAction
operator|.
name|ReroutePhase
name|reroutePhase
init|=
name|action
operator|.
expr|new
name|ReroutePhase
argument_list|(
literal|null
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|reroutePhase
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"cluster state too old didn't cause a timeout"
argument_list|,
name|listener
argument_list|,
name|UnavailableShardsException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|request
operator|.
name|isRetrySet
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
operator|.
name|routedBasedOnClusterVersion
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
expr_stmt|;
name|reroutePhase
operator|=
name|action
operator|.
expr|new
name|ReroutePhase
argument_list|(
literal|null
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|reroutePhase
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"cluster state too old didn't cause a retry"
argument_list|,
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|request
operator|.
name|isRetrySet
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// finish relocation
name|ShardRouting
name|relocationTarget
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|shardId
argument_list|)
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AllocationService
name|allocationService
init|=
name|ESAllocationTestCase
operator|.
name|createAllocationService
argument_list|()
decl_stmt|;
name|ClusterState
name|updatedState
init|=
name|allocationService
operator|.
name|applyStartedShards
argument_list|(
name|state
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|relocationTarget
argument_list|)
argument_list|)
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|updatedState
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> relocation complete state:\n{}"
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|shard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|primaryNodeId
init|=
name|shardRoutingTable
operator|.
name|primaryShard
argument_list|()
operator|.
name|currentNodeId
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|CapturingTransport
operator|.
name|CapturedRequest
argument_list|>
name|capturedRequests
init|=
name|transport
operator|.
name|getCapturedRequestsByTargetNodeAndClear
argument_list|()
operator|.
name|get
argument_list|(
name|primaryNodeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|action
argument_list|,
name|equalTo
argument_list|(
literal|"testAction[p]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertIndexShardCounter
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnknownIndexOrShardOnReroute
specifier|public
name|void
name|testUnknownIndexOrShardOnReroute
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
comment|// no replicas in oder to skip the replication part
name|setState
argument_list|(
name|clusterService
argument_list|,
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|ShardRoutingState
operator|.
name|INITIALIZING
else|:
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> using initial state:\n{}"
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"unknown_index"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|timeout
argument_list|(
literal|"1ms"
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|ReplicationTask
name|task
init|=
name|maybeTask
argument_list|()
decl_stmt|;
name|TestAction
operator|.
name|ReroutePhase
name|reroutePhase
init|=
name|action
operator|.
expr|new
name|ReroutePhase
argument_list|(
name|task
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|reroutePhase
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"must throw index not found exception"
argument_list|,
name|listener
argument_list|,
name|IndexNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"failed"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|request
operator|.
name|isRetrySet
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|Request
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|timeout
argument_list|(
literal|"1ms"
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
expr_stmt|;
name|reroutePhase
operator|=
name|action
operator|.
expr|new
name|ReroutePhase
argument_list|(
literal|null
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|reroutePhase
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"must throw shard not found exception"
argument_list|,
name|listener
argument_list|,
name|ShardNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|request
operator|.
name|isRetrySet
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO I'd have expected this to be true but we fail too early?
block|}
DECL|method|testClosedIndexOnReroute
specifier|public
name|void
name|testClosedIndexOnReroute
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
comment|// no replicas in oder to skip the replication part
name|setState
argument_list|(
name|clusterService
argument_list|,
operator|new
name|ClusterStateChanges
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|,
name|threadPool
argument_list|)
operator|.
name|closeIndices
argument_list|(
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
argument_list|,
operator|new
name|CloseIndexRequest
argument_list|(
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> using initial state:\n{}"
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|timeout
argument_list|(
literal|"1ms"
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|ReplicationTask
name|task
init|=
name|maybeTask
argument_list|()
decl_stmt|;
name|ClusterBlockLevel
name|indexBlockLevel
init|=
name|randomBoolean
argument_list|()
condition|?
name|ClusterBlockLevel
operator|.
name|WRITE
else|:
literal|null
decl_stmt|;
name|TestAction
name|action
init|=
operator|new
name|TestAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"testActionWithBlocks"
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|shardStateAction
argument_list|,
name|threadPool
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ClusterBlockLevel
name|indexBlockLevel
parameter_list|()
block|{
return|return
name|indexBlockLevel
return|;
block|}
block|}
decl_stmt|;
name|TestAction
operator|.
name|ReroutePhase
name|reroutePhase
init|=
name|action
operator|.
expr|new
name|ReroutePhase
argument_list|(
name|task
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|reroutePhase
operator|.
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
name|indexBlockLevel
operator|==
name|ClusterBlockLevel
operator|.
name|WRITE
condition|)
block|{
name|assertListenerThrows
argument_list|(
literal|"must throw block exception"
argument_list|,
name|listener
argument_list|,
name|ClusterBlockException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertListenerThrows
argument_list|(
literal|"must throw index closed exception"
argument_list|,
name|listener
argument_list|,
name|IndexClosedException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"failed"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|request
operator|.
name|isRetrySet
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStalePrimaryShardOnReroute
specifier|public
name|void
name|testStalePrimaryShardOnReroute
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// no replicas in order to skip the replication part
name|setState
argument_list|(
name|clusterService
argument_list|,
name|stateWithActivePrimary
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|randomInt
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> using initial state:\n{}"
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|boolean
name|timeout
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeout
condition|)
block|{
name|request
operator|.
name|timeout
argument_list|(
literal|"0s"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|timeout
argument_list|(
literal|"1h"
argument_list|)
expr_stmt|;
block|}
name|PlainActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|ReplicationTask
name|task
init|=
name|maybeTask
argument_list|()
decl_stmt|;
name|TestAction
operator|.
name|ReroutePhase
name|reroutePhase
init|=
name|action
operator|.
expr|new
name|ReroutePhase
argument_list|(
name|task
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|reroutePhase
operator|.
name|run
argument_list|()
expr_stmt|;
name|CapturingTransport
operator|.
name|CapturedRequest
index|[]
name|capturedRequests
init|=
name|transport
operator|.
name|getCapturedRequestsAndClear
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
index|[
literal|0
index|]
operator|.
name|action
argument_list|,
name|equalTo
argument_list|(
literal|"testAction[p]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"waiting_on_primary"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|request
operator|.
name|isRetrySet
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|transport
operator|.
name|handleRemoteError
argument_list|(
name|capturedRequests
index|[
literal|0
index|]
operator|.
name|requestId
argument_list|,
name|randomRetryPrimaryException
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
condition|)
block|{
comment|// we always try at least one more time on timeout
name|assertThat
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|capturedRequests
operator|=
name|transport
operator|.
name|getCapturedRequestsAndClear
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
index|[
literal|0
index|]
operator|.
name|action
argument_list|,
name|equalTo
argument_list|(
literal|"testAction[p]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"waiting_on_primary"
argument_list|)
expr_stmt|;
name|transport
operator|.
name|handleRemoteError
argument_list|(
name|capturedRequests
index|[
literal|0
index|]
operator|.
name|requestId
argument_list|,
name|randomRetryPrimaryException
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"must throw index not found exception"
argument_list|,
name|listener
argument_list|,
name|ElasticsearchException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"failed"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// generate a CS change
name|setState
argument_list|(
name|clusterService
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|capturedRequests
operator|=
name|transport
operator|.
name|getCapturedRequestsAndClear
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
index|[
literal|0
index|]
operator|.
name|action
argument_list|,
name|equalTo
argument_list|(
literal|"testAction[p]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomRetryPrimaryException
specifier|private
name|Exception
name|randomRetryPrimaryException
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
return|return
name|randomFrom
argument_list|(
operator|new
name|ShardNotFoundException
argument_list|(
name|shardId
argument_list|)
argument_list|,
operator|new
name|IndexNotFoundException
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
operator|new
name|IndexShardClosedException
argument_list|(
name|shardId
argument_list|)
argument_list|,
operator|new
name|AlreadyClosedException
argument_list|(
name|shardId
operator|+
literal|" primary is closed"
argument_list|)
argument_list|,
operator|new
name|ReplicationOperation
operator|.
name|RetryOnPrimaryException
argument_list|(
name|shardId
argument_list|,
literal|"hello"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|testRoutePhaseExecutesRequest
specifier|public
name|void
name|testRoutePhaseExecutesRequest
parameter_list|()
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ReplicationTask
name|task
init|=
name|maybeTask
argument_list|()
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|stateWithActivePrimary
argument_list|(
name|index
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using state: \n{}"
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|shard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|primaryNodeId
init|=
name|shardRoutingTable
operator|.
name|primaryShard
argument_list|()
operator|.
name|currentNodeId
argument_list|()
decl_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|TestAction
operator|.
name|ReroutePhase
name|reroutePhase
init|=
name|action
operator|.
expr|new
name|ReroutePhase
argument_list|(
name|task
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|reroutePhase
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> primary is assigned to [{}], checking request forwarded"
argument_list|,
name|primaryNodeId
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|CapturingTransport
operator|.
name|CapturedRequest
argument_list|>
name|capturedRequests
init|=
name|transport
operator|.
name|getCapturedRequestsByTargetNodeAndClear
argument_list|()
operator|.
name|get
argument_list|(
name|primaryNodeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|getLocalNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|primaryNodeId
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|capturedRequests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|action
argument_list|,
name|equalTo
argument_list|(
literal|"testAction[p]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"waiting_on_primary"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|capturedRequests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|action
argument_list|,
name|equalTo
argument_list|(
literal|"testAction"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"rerouted"
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|request
operator|.
name|isRetrySet
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertIndexShardUninitialized
argument_list|()
expr_stmt|;
block|}
DECL|method|testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget
specifier|public
name|void
name|testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|stateWithActivePrimary
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
operator|.
name|timeout
argument_list|(
literal|"1ms"
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|ReplicationTask
name|task
init|=
name|maybeTask
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|executed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|ShardRouting
name|primaryShard
init|=
name|state
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|shardId
argument_list|)
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
name|boolean
name|executeOnPrimary
init|=
literal|true
decl_stmt|;
comment|// whether shard has been marked as relocated already (i.e. relocation completed)
if|if
condition|(
name|primaryShard
operator|.
name|relocating
argument_list|()
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|isRelocated
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|executeOnPrimary
operator|=
literal|false
expr_stmt|;
block|}
name|action
operator|.
expr|new
name|AsyncPrimaryAction
argument_list|(
name|request
argument_list|,
name|primaryShard
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|createTransportChannel
argument_list|(
name|listener
argument_list|)
argument_list|,
name|task
argument_list|)
block|{             @
name|Override
specifier|protected
name|ReplicationOperation
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|TransportReplicationAction
operator|.
name|PrimaryResult
argument_list|<
name|Request
argument_list|,
name|TestResponse
argument_list|>
argument_list|>
name|createReplicatedOperation
argument_list|(
name|Request
name|request
argument_list|,
name|ActionListener
argument_list|<
name|TransportReplicationAction
operator|.
name|PrimaryResult
argument_list|<
name|Request
argument_list|,
name|TestResponse
argument_list|>
argument_list|>
name|actionListener
argument_list|,
name|TransportReplicationAction
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|TestResponse
argument_list|>
operator|.
name|PrimaryShardReference
name|primaryShardReference
argument_list|,
name|boolean
name|executeOnReplicas
argument_list|)
block|{
return|return
operator|new
name|NoopReplicationOperation
argument_list|(
name|request
argument_list|,
name|actionListener
argument_list|)
block|{
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"primary"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|executed
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
block|}
end_class

begin_expr_stmt
operator|.
name|run
argument_list|()
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|executeOnPrimary
condition|)
block|{
name|assertTrue
argument_list|(
name|executed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"finished"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|request
operator|.
name|isRetrySet
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|executed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertIndexShardCounter
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// it should have been freed.
specifier|final
name|List
argument_list|<
name|CapturingTransport
operator|.
name|CapturedRequest
argument_list|>
name|requests
init|=
name|transport
operator|.
name|capturedRequestsByTargetNode
argument_list|()
operator|.
name|get
argument_list|(
name|primaryShard
operator|.
name|relocatingNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|requests
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|requests
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"primary request was not delegated to relocation target"
argument_list|,
name|requests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|action
argument_list|,
name|equalTo
argument_list|(
literal|"testAction[p]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"primary_delegation"
argument_list|)
expr_stmt|;
name|transport
operator|.
name|handleResponse
argument_list|(
name|requests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|requestId
argument_list|,
operator|new
name|TestResponse
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"finished"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|request
operator|.
name|isRetrySet
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_if

begin_function
unit|}      public
DECL|method|testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget
name|void
name|testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|RELOCATING
argument_list|)
decl_stmt|;
specifier|final
name|ShardRouting
name|primaryShard
init|=
name|state
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|shardId
argument_list|)
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
name|String
name|primaryTargetNodeId
init|=
name|primaryShard
operator|.
name|relocatingNodeId
argument_list|()
decl_stmt|;
comment|// simulate execution of the primary phase on the relocation target node
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|primaryTargetNodeId
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
operator|.
name|timeout
argument_list|(
literal|"1ms"
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|ReplicationTask
name|task
init|=
name|maybeTask
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|executed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|action
operator|.
expr|new
name|AsyncPrimaryAction
argument_list|(
name|request
argument_list|,
name|primaryShard
operator|.
name|allocationId
argument_list|()
operator|.
name|getRelocationId
argument_list|()
argument_list|,
name|createTransportChannel
argument_list|(
name|listener
argument_list|)
argument_list|,
name|task
argument_list|)
block|{             @
name|Override
specifier|protected
name|ReplicationOperation
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|TransportReplicationAction
operator|.
name|PrimaryResult
argument_list|<
name|Request
argument_list|,
name|TestResponse
argument_list|>
argument_list|>
name|createReplicatedOperation
argument_list|(
name|Request
name|request
argument_list|,
name|ActionListener
argument_list|<
name|TransportReplicationAction
operator|.
name|PrimaryResult
argument_list|<
name|Request
argument_list|,
name|TestResponse
argument_list|>
argument_list|>
name|actionListener
argument_list|,
name|TransportReplicationAction
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|TestResponse
argument_list|>
operator|.
name|PrimaryShardReference
name|primaryShardReference
argument_list|,
name|boolean
name|executeOnReplicas
argument_list|)
block|{
return|return
operator|new
name|NoopReplicationOperation
argument_list|(
name|request
argument_list|,
name|actionListener
argument_list|)
block|{
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"primary"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|executed
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
end_function

begin_expr_stmt
unit|}.
name|run
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertThat
argument_list|(
name|executed
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"finished"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertFalse
argument_list|(
name|request
operator|.
name|isRetrySet
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      public
DECL|method|testPrimaryReference
name|void
name|testPrimaryReference
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|IndexShard
name|shard
init|=
name|mock
argument_list|(
name|IndexShard
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|long
name|primaryTerm
init|=
literal|1
operator|+
name|randomInt
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|shard
operator|.
name|getPrimaryTerm
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|primaryTerm
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|Releasable
name|releasable
init|=
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
operator|==
literal|false
condition|)
block|{
name|fail
argument_list|(
literal|"releasable is closed twice"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|TestAction
operator|.
name|PrimaryShardReference
name|primary
init|=
name|action
operator|.
expr|new
name|PrimaryShardReference
argument_list|(
name|shard
argument_list|,
name|releasable
argument_list|)
decl_stmt|;
specifier|final
name|Request
name|request
init|=
operator|new
name|Request
argument_list|()
decl_stmt|;
name|Request
name|replicaRequest
init|=
operator|(
name|Request
operator|)
name|primary
operator|.
name|perform
argument_list|(
name|request
argument_list|)
operator|.
name|replicaRequest
decl_stmt|;
name|assertThat
argument_list|(
name|replicaRequest
operator|.
name|primaryTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|primaryTerm
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ElasticsearchException
name|exception
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"testing"
argument_list|)
decl_stmt|;
name|primary
operator|.
name|failShard
argument_list|(
literal|"test"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|shard
argument_list|)
operator|.
name|failShard
argument_list|(
literal|"test"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|primary
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|closed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testReplicaProxy
specifier|public
name|void
name|testReplicaProxy
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|ReplicationOperation
operator|.
name|Replicas
name|proxy
init|=
name|action
operator|.
name|newReplicasProxy
argument_list|()
decl_stmt|;
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|stateWithActivePrimary
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
literal|1
operator|+
name|randomInt
argument_list|(
literal|3
argument_list|)
argument_list|,
name|randomInt
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"using state: {}"
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|// check that at unknown node fails
name|PlainActionFuture
argument_list|<
name|ReplicaResponse
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|proxy
operator|.
name|performOn
argument_list|(
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|shardId
argument_list|,
literal|"NOT THERE"
argument_list|,
literal|false
argument_list|,
name|randomFrom
argument_list|(
name|ShardRoutingState
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Request
argument_list|()
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"non existent node should throw a NoNodeAvailableException"
argument_list|,
name|listener
argument_list|,
name|NoNodeAvailableException
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|IndexShardRoutingTable
name|shardRoutings
init|=
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
specifier|final
name|ShardRouting
name|replica
init|=
name|randomFrom
argument_list|(
name|shardRoutings
operator|.
name|replicaShards
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|ShardRouting
operator|::
name|assignedToNode
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|listener
operator|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
expr_stmt|;
name|proxy
operator|.
name|performOn
argument_list|(
name|replica
argument_list|,
operator|new
name|Request
argument_list|()
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|CapturingTransport
operator|.
name|CapturedRequest
index|[]
name|captures
init|=
name|transport
operator|.
name|getCapturedRequestsAndClear
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|captures
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
specifier|final
name|TransportReplicationAction
operator|.
name|ReplicaResponse
name|response
init|=
operator|new
name|TransportReplicationAction
operator|.
name|ReplicaResponse
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|randomLong
argument_list|()
argument_list|)
decl_stmt|;
name|transport
operator|.
name|handleResponse
argument_list|(
name|captures
index|[
literal|0
index|]
operator|.
name|requestId
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|transport
operator|.
name|handleRemoteError
argument_list|(
name|captures
index|[
literal|0
index|]
operator|.
name|requestId
argument_list|,
operator|new
name|ElasticsearchException
argument_list|(
literal|"simulated"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"listener should reflect remote error"
argument_list|,
name|listener
argument_list|,
name|ElasticsearchException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transport
operator|.
name|handleError
argument_list|(
name|captures
index|[
literal|0
index|]
operator|.
name|requestId
argument_list|,
operator|new
name|TransportException
argument_list|(
literal|"simulated"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"listener should reflect remote error"
argument_list|,
name|listener
argument_list|,
name|TransportException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|failure
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|ignoredFailure
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|success
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|proxy
operator|.
name|failShardIfNeeded
argument_list|(
name|replica
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|"test"
argument_list|,
operator|new
name|ElasticsearchException
argument_list|(
literal|"simulated"
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|success
operator|.
name|set
argument_list|(
literal|true
argument_list|)
argument_list|,
name|failure
operator|::
name|set
argument_list|,
name|ignoredFailure
operator|::
name|set
argument_list|)
expr_stmt|;
name|CapturingTransport
operator|.
name|CapturedRequest
index|[]
name|shardFailedRequests
init|=
name|transport
operator|.
name|getCapturedRequestsAndClear
argument_list|()
decl_stmt|;
comment|// A replication action doesn't not fail the request
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shardFailedRequests
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testShadowIndexDisablesReplication
specifier|public
name|void
name|testShadowIndexDisablesReplication
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|stateWithActivePrimary
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|MetaData
operator|.
name|Builder
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
argument_list|)
decl_stmt|;
name|Settings
operator|.
name|Builder
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|metaData
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getSettings
argument_list|()
argument_list|)
decl_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHADOW_REPLICAS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|metaData
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|executed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|ShardRouting
name|primaryShard
init|=
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|shardId
argument_list|)
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
name|action
operator|.
expr|new
name|AsyncPrimaryAction
argument_list|(
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
argument_list|,
name|primaryShard
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|createTransportChannel
argument_list|(
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
block|{             @
name|Override
specifier|protected
name|ReplicationOperation
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|TestAction
operator|.
name|PrimaryResult
argument_list|<
name|Request
argument_list|,
name|TestResponse
argument_list|>
argument_list|>
name|createReplicatedOperation
argument_list|(
name|Request
name|request
argument_list|,
name|ActionListener
argument_list|<
name|TransportReplicationAction
operator|.
name|PrimaryResult
argument_list|<
name|Request
argument_list|,
name|TestResponse
argument_list|>
argument_list|>
name|actionListener
argument_list|,
name|TransportReplicationAction
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|TestResponse
argument_list|>
operator|.
name|PrimaryShardReference
name|primaryShardReference
argument_list|,
name|boolean
name|executeOnReplicas
argument_list|)
block|{
name|assertFalse
argument_list|(
name|executeOnReplicas
argument_list|)
block|;
name|assertFalse
argument_list|(
name|executed
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
argument_list|)
block|;
return|return
operator|new
name|NoopReplicationOperation
argument_list|(
name|request
argument_list|,
name|actionListener
argument_list|)
return|;
block|}
block|}
end_function

begin_expr_stmt
operator|.
name|run
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertThat
argument_list|(
name|executed
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      public
DECL|method|testSeqNoIsSetOnPrimary
name|void
name|testSeqNoIsSetOnPrimary
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// we use one replica to check the primary term was set on the operation and sent to the replica
name|setState
argument_list|(
name|clusterService
argument_list|,
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|randomFrom
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> using initial state:\n{}"
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ShardRouting
name|routingEntry
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|TransportReplicationAction
operator|.
name|ConcreteShardRequest
argument_list|<
name|Request
argument_list|>
name|concreteShardRequest
init|=
operator|new
name|TransportReplicationAction
operator|.
name|ConcreteShardRequest
argument_list|<>
argument_list|(
name|request
argument_list|,
name|routingEntry
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|IndexShard
name|shard
init|=
name|mock
argument_list|(
name|IndexShard
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|primaryTerm
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|primaryTerm
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|shard
operator|.
name|getPrimaryTerm
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|primaryTerm
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|shard
operator|.
name|routingEntry
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|routingEntry
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|Releasable
name|releasable
init|=
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
operator|==
literal|false
condition|)
block|{
name|fail
argument_list|(
literal|"releasable is closed twice"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|TestAction
name|action
init|=
operator|new
name|TestAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"testSeqNoIsSetOnPrimary"
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|shardStateAction
argument_list|,
name|threadPool
argument_list|)
decl_stmt|;
name|TransportReplicationAction
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|TestResponse
argument_list|>
operator|.
name|PrimaryOperationTransportHandler
name|primaryPhase
init|=
name|action
operator|.
expr|new
name|PrimaryOperationTransportHandler
argument_list|()
decl_stmt|;
name|primaryPhase
operator|.
name|messageReceived
argument_list|(
name|concreteShardRequest
argument_list|,
name|createTransportChannel
argument_list|(
name|listener
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|CapturingTransport
operator|.
name|CapturedRequest
index|[]
name|requestsToReplicas
init|=
name|transport
operator|.
name|capturedRequests
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|requestsToReplicas
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TransportReplicationAction
operator|.
name|ConcreteShardRequest
argument_list|<
name|Request
argument_list|>
operator|)
name|requestsToReplicas
index|[
literal|0
index|]
operator|.
name|request
operator|)
operator|.
name|getRequest
argument_list|()
operator|.
name|primaryTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|primaryTerm
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testCounterOnPrimary
specifier|public
name|void
name|testCounterOnPrimary
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// no replica, we only want to test on primary
specifier|final
name|ClusterState
name|state
init|=
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> using initial state:\n{}"
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ShardRouting
name|primaryShard
init|=
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|shardId
argument_list|)
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|ReplicationTask
name|task
init|=
name|maybeTask
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|randomInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|throwExceptionOnCreation
init|=
name|i
operator|==
literal|1
decl_stmt|;
specifier|final
name|boolean
name|throwExceptionOnRun
init|=
name|i
operator|==
literal|2
decl_stmt|;
specifier|final
name|boolean
name|respondWithError
init|=
name|i
operator|==
literal|3
decl_stmt|;
name|action
operator|.
expr|new
name|AsyncPrimaryAction
argument_list|(
name|request
argument_list|,
name|primaryShard
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|createTransportChannel
argument_list|(
name|listener
argument_list|)
argument_list|,
name|task
argument_list|)
block|{             @
name|Override
specifier|protected
name|ReplicationOperation
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|TransportReplicationAction
operator|.
name|PrimaryResult
argument_list|<
name|Request
argument_list|,
name|TestResponse
argument_list|>
argument_list|>
name|createReplicatedOperation
argument_list|(
name|Request
name|request
argument_list|,
name|ActionListener
argument_list|<
name|TransportReplicationAction
operator|.
name|PrimaryResult
argument_list|<
name|Request
argument_list|,
name|TestResponse
argument_list|>
argument_list|>
name|actionListener
argument_list|,
name|TransportReplicationAction
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|TestResponse
argument_list|>
operator|.
name|PrimaryShardReference
name|primaryShardReference
argument_list|,
name|boolean
name|executeOnReplicas
argument_list|)
block|{
name|assertIndexShardCounter
argument_list|(
literal|1
argument_list|)
block|;
if|if
condition|(
name|throwExceptionOnCreation
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"simulated exception, during createReplicatedOperation"
argument_list|)
throw|;
block|}
return|return
operator|new
name|NoopReplicationOperation
argument_list|(
name|request
argument_list|,
name|actionListener
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|assertIndexShardCounter
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"primary"
argument_list|)
expr_stmt|;
if|if
condition|(
name|throwExceptionOnRun
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"simulated exception, during performOnPrimary"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|respondWithError
condition|)
block|{
name|this
operator|.
name|resultListener
operator|.
name|onFailure
argument_list|(
operator|new
name|ElasticsearchException
argument_list|(
literal|"simulated exception, as a response"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_expr_stmt
unit|};             }         }
operator|.
name|run
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertIndexShardCounter
argument_list|(
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"finished"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_try
try|try
block|{
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwExceptionOnCreation
operator|||
name|throwExceptionOnRun
operator|||
name|respondWithError
condition|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cause
argument_list|,
name|instanceOf
argument_list|(
name|ElasticsearchException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"simulated"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
end_try

begin_function
unit|}      public
DECL|method|testReplicasCounter
name|void
name|testReplicasCounter
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ClusterState
name|state
init|=
name|state
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|state
argument_list|)
expr_stmt|;
specifier|final
name|ShardRouting
name|replicaRouting
init|=
name|state
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|shardId
argument_list|)
operator|.
name|replicaShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|boolean
name|throwException
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|ReplicationTask
name|task
init|=
name|maybeTask
argument_list|()
decl_stmt|;
name|TestAction
name|action
init|=
operator|new
name|TestAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"testActionWithExceptions"
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|shardStateAction
argument_list|,
name|threadPool
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ReplicaResult
name|shardOperationOnReplica
parameter_list|(
name|Request
name|request
parameter_list|,
name|IndexShard
name|replica
parameter_list|)
block|{
name|assertIndexShardCounter
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"replica"
argument_list|)
expr_stmt|;
if|if
condition|(
name|throwException
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"simulated"
argument_list|)
throw|;
block|}
return|return
operator|new
name|ReplicaResult
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|TestAction
operator|.
name|ReplicaOperationTransportHandler
name|replicaOperationTransportHandler
init|=
name|action
operator|.
expr|new
name|ReplicaOperationTransportHandler
argument_list|()
decl_stmt|;
try|try
block|{
name|replicaOperationTransportHandler
operator|.
name|messageReceived
argument_list|(
operator|new
name|TransportReplicationAction
operator|.
name|ConcreteShardRequest
argument_list|<>
argument_list|(
operator|new
name|Request
argument_list|()
operator|.
name|setShardId
argument_list|(
name|shardId
argument_list|)
argument_list|,
name|replicaRouting
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|createTransportChannel
argument_list|(
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
argument_list|)
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"simulated"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|throwException
argument_list|)
expr_stmt|;
block|}
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"finished"
argument_list|)
expr_stmt|;
comment|// operation should have finished and counter decreased because no outstanding replica requests
name|assertIndexShardCounter
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * This test ensures that replication operations adhere to the {@link IndexMetaData#SETTING_WAIT_FOR_ACTIVE_SHARDS} setting      * when the request is using the default value for waitForActiveShards.      */
end_comment

begin_function
DECL|method|testDefaultWaitForActiveShardsUsesIndexSetting
specifier|public
name|void
name|testDefaultWaitForActiveShardsUsesIndexSetting
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|indexName
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|indexName
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// test wait_for_active_shards index setting used when the default is set on the request
name|int
name|numReplicas
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|int
name|idxSettingWaitForActiveShards
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|numReplicas
operator|+
literal|1
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|stateWithActivePrimary
argument_list|(
name|indexName
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|numReplicas
argument_list|)
decl_stmt|;
name|IndexMetaData
name|indexMetaData
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_WAIT_FOR_ACTIVE_SHARDS
operator|.
name|getKey
argument_list|()
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|idxSettingWaitForActiveShards
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MetaData
operator|.
name|Builder
name|metaDataBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexMetaData
argument_list|)
operator|.
name|settings
argument_list|(
name|indexSettings
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaDataBuilder
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
operator|.
name|waitForActiveShards
argument_list|(
name|ActiveShardCount
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
comment|// set to default so index settings are used
name|action
operator|.
name|resolveRequest
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
argument_list|,
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ActiveShardCount
operator|.
name|from
argument_list|(
name|idxSettingWaitForActiveShards
argument_list|)
argument_list|,
name|request
operator|.
name|waitForActiveShards
argument_list|()
argument_list|)
expr_stmt|;
comment|// test wait_for_active_shards when default not set on the request (request value should be honored over index setting)
name|int
name|requestWaitForActiveShards
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|numReplicas
operator|+
literal|1
argument_list|)
decl_stmt|;
name|request
operator|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
operator|.
name|waitForActiveShards
argument_list|(
name|ActiveShardCount
operator|.
name|from
argument_list|(
name|requestWaitForActiveShards
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|resolveRequest
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
argument_list|,
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ActiveShardCount
operator|.
name|from
argument_list|(
name|requestWaitForActiveShards
argument_list|)
argument_list|,
name|request
operator|.
name|waitForActiveShards
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/** test that a primary request is rejected if it arrives at a shard with a wrong allocation id */
end_comment

begin_function
DECL|method|testPrimaryActionRejectsWrongAid
specifier|public
name|void
name|testPrimaryActionRejectsWrongAid
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|PlainActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
operator|.
name|timeout
argument_list|(
literal|"1ms"
argument_list|)
decl_stmt|;
name|action
operator|.
expr|new
name|PrimaryOperationTransportHandler
argument_list|()
operator|.
name|messageReceived
argument_list|(
operator|new
name|TransportReplicationAction
operator|.
name|ConcreteShardRequest
argument_list|<>
argument_list|(
name|request
argument_list|,
literal|"_not_a_valid_aid_"
argument_list|)
argument_list|,
name|createTransportChannel
argument_list|(
name|listener
argument_list|)
argument_list|,
name|maybeTask
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"using a wrong aid didn't fail the operation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|execException
parameter_list|)
block|{
name|Throwable
name|throwable
init|=
name|execException
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"got exception:"
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|throwable
operator|.
name|getClass
argument_list|()
operator|+
literal|" is not a retry exception"
argument_list|,
name|action
operator|.
name|retryPrimaryException
argument_list|(
name|throwable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/** test that a replica request is rejected if it arrives at a shard with a wrong allocation id */
end_comment

begin_function
DECL|method|testReplicaActionRejectsWrongAid
specifier|public
name|void
name|testReplicaActionRejectsWrongAid
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|state
argument_list|(
name|index
argument_list|,
literal|false
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
decl_stmt|;
specifier|final
name|ShardRouting
name|replica
init|=
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|shardId
argument_list|)
operator|.
name|replicaShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// simulate execution of the node holding the replica
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|replica
operator|.
name|currentNodeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|PlainActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
operator|.
name|timeout
argument_list|(
literal|"1ms"
argument_list|)
decl_stmt|;
name|action
operator|.
expr|new
name|ReplicaOperationTransportHandler
argument_list|()
operator|.
name|messageReceived
argument_list|(
operator|new
name|TransportReplicationAction
operator|.
name|ConcreteShardRequest
argument_list|<>
argument_list|(
name|request
argument_list|,
literal|"_not_a_valid_aid_"
argument_list|)
argument_list|,
name|createTransportChannel
argument_list|(
name|listener
argument_list|)
argument_list|,
name|maybeTask
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"using a wrong aid didn't fail the operation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|execException
parameter_list|)
block|{
name|Throwable
name|throwable
init|=
name|execException
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|action
operator|.
name|retryPrimaryException
argument_list|(
name|throwable
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"thrown exception is not retriable"
argument_list|,
name|throwable
argument_list|)
throw|;
block|}
name|assertThat
argument_list|(
name|throwable
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"_not_a_valid_aid_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**      * test throwing a {@link org.elasticsearch.action.support.replication.TransportReplicationAction.RetryOnReplicaException}      * causes a retry      */
end_comment

begin_function
DECL|method|testRetryOnReplica
specifier|public
name|void
name|testRetryOnReplica
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|state
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
decl_stmt|;
specifier|final
name|ShardRouting
name|replica
init|=
name|state
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|shardRoutingTable
argument_list|(
name|shardId
argument_list|)
operator|.
name|replicaShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// simulate execution of the node holding the replica
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|replica
operator|.
name|currentNodeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|throwException
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|ReplicationTask
name|task
init|=
name|maybeTask
argument_list|()
decl_stmt|;
name|TestAction
name|action
init|=
operator|new
name|TestAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"testActionWithExceptions"
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|shardStateAction
argument_list|,
name|threadPool
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ReplicaResult
name|shardOperationOnReplica
parameter_list|(
name|Request
name|request
parameter_list|,
name|IndexShard
name|replica
parameter_list|)
block|{
name|assertPhase
argument_list|(
name|task
argument_list|,
literal|"replica"
argument_list|)
expr_stmt|;
if|if
condition|(
name|throwException
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RetryOnReplicaException
argument_list|(
name|shardId
argument_list|,
literal|"simulation"
argument_list|)
throw|;
block|}
return|return
operator|new
name|ReplicaResult
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|TestAction
operator|.
name|ReplicaOperationTransportHandler
name|replicaOperationTransportHandler
init|=
name|action
operator|.
expr|new
name|ReplicaOperationTransportHandler
argument_list|()
decl_stmt|;
specifier|final
name|PlainActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Request
name|request
init|=
operator|new
name|Request
argument_list|()
operator|.
name|setShardId
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|request
operator|.
name|primaryTerm
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|getIndexSafe
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|primaryTerm
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|replicaOperationTransportHandler
operator|.
name|messageReceived
argument_list|(
operator|new
name|TransportReplicationAction
operator|.
name|ConcreteShardRequest
argument_list|<>
argument_list|(
name|request
argument_list|,
name|replica
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|createTransportChannel
argument_list|(
name|listener
argument_list|)
argument_list|,
name|task
argument_list|)
expr_stmt|;
if|if
condition|(
name|listener
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// fail with the exception if there
name|fail
argument_list|(
literal|"listener shouldn't be done"
argument_list|)
expr_stmt|;
block|}
comment|// no retry yet
name|List
argument_list|<
name|CapturingTransport
operator|.
name|CapturedRequest
argument_list|>
name|capturedRequests
init|=
name|transport
operator|.
name|getCapturedRequestsByTargetNodeAndClear
argument_list|()
operator|.
name|get
argument_list|(
name|replica
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// release the waiting
name|throwException
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|capturedRequests
operator|=
name|transport
operator|.
name|getCapturedRequestsByTargetNodeAndClear
argument_list|()
operator|.
name|get
argument_list|(
name|replica
operator|.
name|currentNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|CapturingTransport
operator|.
name|CapturedRequest
name|capturedRequest
init|=
name|capturedRequests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|capturedRequest
operator|.
name|action
argument_list|,
name|equalTo
argument_list|(
literal|"testActionWithExceptions[r]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|capturedRequest
operator|.
name|request
argument_list|,
name|instanceOf
argument_list|(
name|TransportReplicationAction
operator|.
name|ConcreteShardRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertConcreteShardRequest
argument_list|(
name|capturedRequest
operator|.
name|request
argument_list|,
name|request
argument_list|,
name|replica
operator|.
name|allocationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertConcreteShardRequest
specifier|private
name|void
name|assertConcreteShardRequest
parameter_list|(
name|TransportRequest
name|capturedRequest
parameter_list|,
name|Request
name|expectedRequest
parameter_list|,
name|AllocationId
name|expectedAllocationId
parameter_list|)
block|{
specifier|final
name|TransportReplicationAction
operator|.
name|ConcreteShardRequest
argument_list|<
name|?
argument_list|>
name|concreteShardRequest
init|=
operator|(
name|TransportReplicationAction
operator|.
name|ConcreteShardRequest
argument_list|<
name|?
argument_list|>
operator|)
name|capturedRequest
decl_stmt|;
name|assertThat
argument_list|(
name|concreteShardRequest
operator|.
name|getRequest
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedRequest
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Request
operator|)
name|concreteShardRequest
operator|.
name|getRequest
argument_list|()
operator|)
operator|.
name|isRetrySet
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|concreteShardRequest
operator|.
name|getTargetAllocationID
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedAllocationId
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertIndexShardCounter
specifier|private
name|void
name|assertIndexShardCounter
parameter_list|(
name|int
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|count
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
DECL|field|count
specifier|private
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|isRelocated
specifier|private
specifier|final
name|AtomicBoolean
name|isRelocated
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**      * Sometimes build a ReplicationTask for tracking the phase of the      * TransportReplicationAction. Since TransportReplicationAction has to work      * if the task as null just as well as if it is supplied this returns null      * half the time.      */
end_comment

begin_function
DECL|method|maybeTask
specifier|private
name|ReplicationTask
name|maybeTask
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
operator|new
name|ReplicationTask
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
else|:
literal|null
return|;
block|}
end_function

begin_comment
comment|/**      * If the task is non-null this asserts that the phrase matches.      */
end_comment

begin_function
DECL|method|assertPhase
specifier|private
name|void
name|assertPhase
parameter_list|(
annotation|@
name|Nullable
name|ReplicationTask
name|task
parameter_list|,
name|String
name|phase
parameter_list|)
block|{
name|assertPhase
argument_list|(
name|task
argument_list|,
name|equalTo
argument_list|(
name|phase
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertPhase
specifier|private
name|void
name|assertPhase
parameter_list|(
annotation|@
name|Nullable
name|ReplicationTask
name|task
parameter_list|,
name|Matcher
argument_list|<
name|String
argument_list|>
name|phaseMatcher
parameter_list|)
block|{
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|task
operator|.
name|getPhase
argument_list|()
argument_list|,
name|phaseMatcher
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_class
DECL|class|Request
specifier|public
specifier|static
class|class
name|Request
extends|extends
name|ReplicationRequest
argument_list|<
name|Request
argument_list|>
block|{
DECL|field|processedOnPrimary
specifier|public
name|AtomicBoolean
name|processedOnPrimary
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|processedOnReplicas
specifier|public
name|AtomicInteger
name|processedOnReplicas
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|isRetrySet
specifier|public
name|AtomicBoolean
name|isRetrySet
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|Request
specifier|public
name|Request
parameter_list|()
block|{         }
DECL|method|Request
name|Request
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|shardId
operator|.
name|getIndexName
argument_list|()
expr_stmt|;
name|this
operator|.
name|waitForActiveShards
operator|=
name|ActiveShardCount
operator|.
name|NONE
expr_stmt|;
comment|// keep things simple
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onRetry
specifier|public
name|void
name|onRetry
parameter_list|()
block|{
name|super
operator|.
name|onRetry
argument_list|()
expr_stmt|;
name|isRetrySet
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Request{}"
return|;
block|}
block|}
end_class

begin_class
DECL|class|TestResponse
specifier|static
class|class
name|TestResponse
extends|extends
name|ReplicationResponse
block|{     }
end_class

begin_class
DECL|class|TestAction
specifier|private
class|class
name|TestAction
extends|extends
name|TransportReplicationAction
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|TestResponse
argument_list|>
block|{
DECL|field|withDocumentFailureOnPrimary
specifier|private
specifier|final
name|boolean
name|withDocumentFailureOnPrimary
decl_stmt|;
DECL|field|withDocumentFailureOnReplica
specifier|private
specifier|final
name|boolean
name|withDocumentFailureOnReplica
decl_stmt|;
DECL|method|TestAction
name|TestAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|actionName
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|ShardStateAction
name|shardStateAction
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|actionName
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|mockIndicesService
argument_list|(
name|clusterService
argument_list|)
argument_list|,
name|threadPool
argument_list|,
name|shardStateAction
argument_list|,
operator|new
name|ActionFilters
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
argument_list|,
operator|new
name|IndexNameExpressionResolver
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|Request
operator|::
operator|new
argument_list|,
name|Request
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|withDocumentFailureOnPrimary
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|withDocumentFailureOnReplica
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|TestAction
name|TestAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|actionName
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|ShardStateAction
name|shardStateAction
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|boolean
name|withDocumentFailureOnPrimary
parameter_list|,
name|boolean
name|withDocumentFailureOnReplica
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|actionName
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|mockIndicesService
argument_list|(
name|clusterService
argument_list|)
argument_list|,
name|threadPool
argument_list|,
name|shardStateAction
argument_list|,
operator|new
name|ActionFilters
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
argument_list|,
operator|new
name|IndexNameExpressionResolver
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|Request
operator|::
operator|new
argument_list|,
name|Request
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|withDocumentFailureOnPrimary
operator|=
name|withDocumentFailureOnPrimary
expr_stmt|;
name|this
operator|.
name|withDocumentFailureOnReplica
operator|=
name|withDocumentFailureOnReplica
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newResponseInstance
specifier|protected
name|TestResponse
name|newResponseInstance
parameter_list|()
block|{
return|return
operator|new
name|TestResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|shardOperationOnPrimary
specifier|protected
name|PrimaryResult
name|shardOperationOnPrimary
parameter_list|(
name|Request
name|shardRequest
parameter_list|,
name|IndexShard
name|primary
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|executedBefore
init|=
name|shardRequest
operator|.
name|processedOnPrimary
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
decl_stmt|;
assert|assert
name|executedBefore
operator|==
literal|false
operator|:
literal|"request has already been executed on the primary"
assert|;
return|return
operator|new
name|PrimaryResult
argument_list|(
name|shardRequest
argument_list|,
operator|new
name|TestResponse
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|shardOperationOnReplica
specifier|protected
name|ReplicaResult
name|shardOperationOnReplica
parameter_list|(
name|Request
name|request
parameter_list|,
name|IndexShard
name|replica
parameter_list|)
block|{
name|request
operator|.
name|processedOnReplicas
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|ReplicaResult
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|resolveIndex
specifier|protected
name|boolean
name|resolveIndex
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

begin_function
DECL|method|mockIndicesService
specifier|final
name|IndicesService
name|mockIndicesService
parameter_list|(
name|ClusterService
name|clusterService
parameter_list|)
block|{
specifier|final
name|IndicesService
name|indicesService
init|=
name|mock
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|any
argument_list|(
name|Index
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
name|invocation
lambda|->
block|{
name|Index
name|index
init|=
operator|(
name|Index
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|ClusterState
name|state
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
specifier|final
name|IndexMetaData
name|indexSafe
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|getIndexSafe
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|mockIndexService
argument_list|(
name|indexSafe
argument_list|,
name|clusterService
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indicesService
operator|.
name|indexService
argument_list|(
name|any
argument_list|(
name|Index
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
name|invocation
lambda|->
block|{
name|Index
name|index
init|=
operator|(
name|Index
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|ClusterState
name|state
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|IndexMetaData
name|indexSafe
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|getIndexSafe
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|mockIndexService
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|getIndexSafe
argument_list|(
name|index
argument_list|)
argument_list|,
name|clusterService
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|indicesService
return|;
block|}
end_function

begin_function
DECL|method|mockIndexService
specifier|final
name|IndexService
name|mockIndexService
parameter_list|(
specifier|final
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|)
block|{
specifier|final
name|IndexService
name|indexService
init|=
name|mock
argument_list|(
name|IndexService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|indexService
operator|.
name|getShard
argument_list|(
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
name|invocation
lambda|->
block|{
name|int
name|shard
init|=
operator|(
name|Integer
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|,
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|shard
operator|>
name|indexMetaData
operator|.
name|getNumberOfShards
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ShardNotFoundException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
return|return
name|mockIndexShard
argument_list|(
name|shardId
argument_list|,
name|clusterService
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|indexService
return|;
block|}
end_function

begin_function
DECL|method|mockIndexShard
specifier|private
name|IndexShard
name|mockIndexShard
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|)
block|{
specifier|final
name|IndexShard
name|indexShard
init|=
name|mock
argument_list|(
name|IndexShard
operator|.
name|class
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
name|callback
init|=
operator|(
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|callback
operator|.
name|onResponse
argument_list|(
name|count
operator|::
name|decrementAndGet
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|indexShard
argument_list|)
operator|.
name|acquirePrimaryOperationLock
argument_list|(
name|any
argument_list|(
name|ActionListener
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|long
name|term
init|=
operator|(
name|Long
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
name|callback
init|=
operator|(
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|long
name|primaryTerm
init|=
name|indexShard
operator|.
name|getPrimaryTerm
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|<
name|primaryTerm
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s operation term [%d] is too old (current [%d])"
argument_list|,
name|shardId
argument_list|,
name|term
argument_list|,
name|primaryTerm
argument_list|)
argument_list|)
throw|;
block|}
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|callback
operator|.
name|onResponse
argument_list|(
name|count
operator|::
name|decrementAndGet
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|indexShard
argument_list|)
operator|.
name|acquireReplicaOperationLock
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|(
name|ActionListener
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexShard
operator|.
name|routingEntry
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
specifier|final
name|ClusterState
name|state
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
specifier|final
name|RoutingNode
name|node
init|=
name|state
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getLocalNodeId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ShardRouting
name|routing
init|=
name|node
operator|.
name|getByShardId
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|routing
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ShardNotFoundException
argument_list|(
name|shardId
argument_list|,
literal|"shard is no longer assigned to current node"
argument_list|)
throw|;
block|}
return|return
name|routing
return|;
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexShard
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocationOnMock
lambda|->
name|isRelocated
operator|.
name|get
argument_list|()
condition|?
name|IndexShardState
operator|.
name|RELOCATED
else|:
name|IndexShardState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|AssertionError
argument_list|(
literal|"failed shard is not supported"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|indexShard
argument_list|)
operator|.
name|failShard
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexShard
operator|.
name|getPrimaryTerm
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|i
lambda|->
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|getIndexSafe
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|primaryTerm
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|indexShard
return|;
block|}
end_function

begin_class
DECL|class|NoopReplicationOperation
class|class
name|NoopReplicationOperation
extends|extends
name|ReplicationOperation
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|TestAction
operator|.
name|PrimaryResult
argument_list|<
name|Request
argument_list|,
name|TestResponse
argument_list|>
argument_list|>
block|{
DECL|method|NoopReplicationOperation
name|NoopReplicationOperation
parameter_list|(
name|Request
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|TestAction
operator|.
name|PrimaryResult
argument_list|<
name|Request
argument_list|,
name|TestResponse
argument_list|>
argument_list|>
name|listener
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|,
literal|null
argument_list|,
name|listener
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TransportReplicationActionTests
operator|.
name|this
operator|.
name|logger
argument_list|,
literal|"noop"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Using the diamond operator (<>) prevents Eclipse from being able to compile this code
name|this
operator|.
name|resultListener
operator|.
name|onResponse
argument_list|(
operator|new
name|TransportReplicationAction
operator|.
name|PrimaryResult
argument_list|<
name|Request
argument_list|,
name|TestResponse
argument_list|>
argument_list|(
literal|null
argument_list|,
operator|new
name|TestResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**      * Transport channel that is needed for replica operation testing.      */
end_comment

begin_function
DECL|method|createTransportChannel
specifier|public
name|TransportChannel
name|createTransportChannel
parameter_list|(
specifier|final
name|PlainActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|listener
parameter_list|)
block|{
return|return
operator|new
name|TransportChannel
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|action
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProfileName
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendResponse
parameter_list|(
name|TransportResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|(
operator|(
name|TestResponse
operator|)
name|response
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendResponse
parameter_list|(
name|TransportResponse
name|response
parameter_list|,
name|TransportResponseOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|(
operator|(
name|TestResponse
operator|)
name|response
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendResponse
parameter_list|(
name|Exception
name|exception
parameter_list|)
throws|throws
name|IOException
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRequestId
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getChannelType
parameter_list|()
block|{
return|return
literal|"replica_test"
return|;
block|}
block|}
return|;
block|}
end_function

unit|}
end_unit

