begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support.replication
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|UnavailableShardsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|WriteConsistencyLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
operator|.
name|ShardStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|DummyTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardNotStartedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|cluster
operator|.
name|TestClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|CapturingTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponseOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
DECL|class|ShardReplicationTests
specifier|public
class|class
name|ShardReplicationTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|field|threadPool
specifier|private
specifier|static
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|clusterService
specifier|private
name|TestClusterService
name|clusterService
decl_stmt|;
DECL|field|transportService
specifier|private
name|TransportService
name|transportService
decl_stmt|;
DECL|field|transport
specifier|private
name|CapturingTransport
name|transport
decl_stmt|;
DECL|field|action
specifier|private
name|Action
name|action
decl_stmt|;
comment|/* *     * TransportReplicationAction needs an instance of IndexShard to count operations.     * indexShards is reset to null before each test and will be initialized upon request in the tests.     */
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
block|{
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
literal|"ShardReplicationTests"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|transport
operator|=
operator|new
name|CapturingTransport
argument_list|()
expr_stmt|;
name|clusterService
operator|=
operator|new
name|TestClusterService
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
name|transportService
operator|=
operator|new
name|TransportService
argument_list|(
name|transport
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|start
argument_list|()
expr_stmt|;
name|action
operator|=
operator|new
name|Action
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"testAction"
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
name|count
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
block|{
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|threadPool
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|threadPool
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|assertListenerThrows
parameter_list|<
name|T
parameter_list|>
name|void
name|assertListenerThrows
parameter_list|(
name|String
name|msg
parameter_list|,
name|PlainActionFuture
argument_list|<
name|T
argument_list|>
name|listener
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|klass
parameter_list|)
throws|throws
name|InterruptedException
block|{
try|try
block|{
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|klass
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBlocks
specifier|public
name|void
name|testBlocks
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|Request
name|request
init|=
operator|new
name|Request
argument_list|()
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|ClusterBlocks
operator|.
name|Builder
name|block
init|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
operator|new
name|ClusterBlock
argument_list|(
literal|1
argument_list|,
literal|"non retryable"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|RestStatus
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
name|ClusterBlockLevel
operator|.
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|clusterService
operator|.
name|setState
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|blocks
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
name|TransportReplicationAction
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|Response
argument_list|>
operator|.
name|PrimaryPhase
name|primaryPhase
init|=
name|action
operator|.
expr|new
name|PrimaryPhase
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"primary phase should stop execution"
argument_list|,
name|primaryPhase
operator|.
name|checkBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"primary phase should fail operation"
argument_list|,
name|listener
argument_list|,
name|ClusterBlockException
operator|.
name|class
argument_list|)
expr_stmt|;
name|block
operator|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
operator|new
name|ClusterBlock
argument_list|(
literal|1
argument_list|,
literal|"retryable"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|RestStatus
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
name|ClusterBlockLevel
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|setState
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|blocks
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
expr_stmt|;
name|primaryPhase
operator|=
name|action
operator|.
expr|new
name|PrimaryPhase
argument_list|(
operator|new
name|Request
argument_list|()
operator|.
name|timeout
argument_list|(
literal|"5ms"
argument_list|)
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"primary phase should stop execution on retryable block"
argument_list|,
name|primaryPhase
operator|.
name|checkBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"failed to timeout on retryable block"
argument_list|,
name|listener
argument_list|,
name|ClusterBlockException
operator|.
name|class
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
expr_stmt|;
name|primaryPhase
operator|=
name|action
operator|.
expr|new
name|PrimaryPhase
argument_list|(
operator|new
name|Request
argument_list|()
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"primary phase should stop execution on retryable block"
argument_list|,
name|primaryPhase
operator|.
name|checkBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"primary phase should wait on retryable block"
argument_list|,
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|block
operator|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
operator|new
name|ClusterBlock
argument_list|(
literal|1
argument_list|,
literal|"non retryable"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|RestStatus
operator|.
name|SERVICE_UNAVAILABLE
argument_list|,
name|ClusterBlockLevel
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|setState
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|blocks
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"primary phase should fail operation when moving from a retryable block to a non-retryable one"
argument_list|,
name|listener
argument_list|,
name|ClusterBlockException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertIndexShardUninitialized
argument_list|()
expr_stmt|;
block|}
DECL|method|assertIndexShardUninitialized
specifier|public
name|void
name|assertIndexShardUninitialized
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|stateWithStartedPrimary
name|ClusterState
name|stateWithStartedPrimary
parameter_list|(
name|String
name|index
parameter_list|,
name|boolean
name|primaryLocal
parameter_list|,
name|int
name|numberOfReplicas
parameter_list|)
block|{
name|int
name|assignedReplicas
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|numberOfReplicas
argument_list|)
decl_stmt|;
return|return
name|stateWithStartedPrimary
argument_list|(
name|index
argument_list|,
name|primaryLocal
argument_list|,
name|assignedReplicas
argument_list|,
name|numberOfReplicas
operator|-
name|assignedReplicas
argument_list|)
return|;
block|}
DECL|method|stateWithStartedPrimary
name|ClusterState
name|stateWithStartedPrimary
parameter_list|(
name|String
name|index
parameter_list|,
name|boolean
name|primaryLocal
parameter_list|,
name|int
name|assignedReplicas
parameter_list|,
name|int
name|unassignedReplicas
parameter_list|)
block|{
name|ShardRoutingState
index|[]
name|replicaStates
init|=
operator|new
name|ShardRoutingState
index|[
name|assignedReplicas
operator|+
name|unassignedReplicas
index|]
decl_stmt|;
comment|// no point in randomizing - node assignment later on does it too.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|assignedReplicas
condition|;
name|i
operator|++
control|)
block|{
name|replicaStates
index|[
name|i
index|]
operator|=
name|randomFrom
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|ShardRoutingState
operator|.
name|RELOCATING
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|assignedReplicas
init|;
name|i
operator|<
name|replicaStates
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|replicaStates
index|[
name|i
index|]
operator|=
name|ShardRoutingState
operator|.
name|UNASSIGNED
expr_stmt|;
block|}
return|return
name|state
argument_list|(
name|index
argument_list|,
name|primaryLocal
argument_list|,
name|randomFrom
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|ShardRoutingState
operator|.
name|RELOCATING
argument_list|)
argument_list|,
name|replicaStates
argument_list|)
return|;
block|}
DECL|method|state
name|ClusterState
name|state
parameter_list|(
name|String
name|index
parameter_list|,
name|boolean
name|primaryLocal
parameter_list|,
name|ShardRoutingState
name|primaryState
parameter_list|,
name|ShardRoutingState
modifier|...
name|replicaStates
parameter_list|)
block|{
specifier|final
name|int
name|numberOfReplicas
init|=
name|replicaStates
operator|.
name|length
decl_stmt|;
name|int
name|numberOfNodes
init|=
name|numberOfReplicas
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|primaryState
operator|==
name|ShardRoutingState
operator|.
name|RELOCATING
condition|)
block|{
name|numberOfNodes
operator|++
expr_stmt|;
block|}
for|for
control|(
name|ShardRoutingState
name|state
range|:
name|replicaStates
control|)
block|{
if|if
condition|(
name|state
operator|==
name|ShardRoutingState
operator|.
name|RELOCATING
condition|)
block|{
name|numberOfNodes
operator|++
expr_stmt|;
block|}
block|}
name|numberOfNodes
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|2
argument_list|,
name|numberOfNodes
argument_list|)
expr_stmt|;
comment|// we need a non-local master to test shard failures
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|discoBuilder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|unassignedNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfNodes
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|DiscoveryNode
name|node
init|=
name|newNode
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|discoBuilder
operator|=
name|discoBuilder
operator|.
name|put
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|unassignedNodes
operator|.
name|add
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|discoBuilder
operator|.
name|localNodeId
argument_list|(
name|newNode
argument_list|(
literal|0
argument_list|)
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|discoBuilder
operator|.
name|masterNodeId
argument_list|(
name|newNode
argument_list|(
literal|1
argument_list|)
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
comment|// we need a non-local master to test shard failures
name|IndexMetaData
name|indexMetaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|index
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|numberOfReplicas
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_CREATION_DATE
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
operator|.
name|Builder
name|routing
init|=
operator|new
name|RoutingTable
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|routing
operator|.
name|addAsNew
argument_list|(
name|indexMetaData
argument_list|)
expr_stmt|;
name|IndexShardRoutingTable
operator|.
name|Builder
name|indexShardRoutingBuilder
init|=
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
name|shardId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|primaryNode
init|=
literal|null
decl_stmt|;
name|String
name|relocatingNode
init|=
literal|null
decl_stmt|;
name|UnassignedInfo
name|unassignedInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|primaryState
operator|!=
name|ShardRoutingState
operator|.
name|UNASSIGNED
condition|)
block|{
if|if
condition|(
name|primaryLocal
condition|)
block|{
name|primaryNode
operator|=
name|newNode
argument_list|(
literal|0
argument_list|)
operator|.
name|id
argument_list|()
expr_stmt|;
name|unassignedNodes
operator|.
name|remove
argument_list|(
name|primaryNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|primaryNode
operator|=
name|selectAndRemove
argument_list|(
name|unassignedNodes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|primaryState
operator|==
name|ShardRoutingState
operator|.
name|RELOCATING
condition|)
block|{
name|relocatingNode
operator|=
name|selectAndRemove
argument_list|(
name|unassignedNodes
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|unassignedInfo
operator|=
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|INDEX_CREATED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|indexShardRoutingBuilder
operator|.
name|addShard
argument_list|(
operator|new
name|ShardRouting
argument_list|(
name|index
argument_list|,
literal|0
argument_list|,
name|primaryNode
argument_list|,
name|relocatingNode
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|primaryState
argument_list|,
literal|0
argument_list|,
name|unassignedInfo
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardRoutingState
name|replicaState
range|:
name|replicaStates
control|)
block|{
name|String
name|replicaNode
init|=
literal|null
decl_stmt|;
name|relocatingNode
operator|=
literal|null
expr_stmt|;
name|unassignedInfo
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|replicaState
operator|!=
name|ShardRoutingState
operator|.
name|UNASSIGNED
condition|)
block|{
assert|assert
name|primaryNode
operator|!=
literal|null
operator|:
literal|"a replica is assigned but the primary isn't"
assert|;
name|replicaNode
operator|=
name|selectAndRemove
argument_list|(
name|unassignedNodes
argument_list|)
expr_stmt|;
if|if
condition|(
name|replicaState
operator|==
name|ShardRoutingState
operator|.
name|RELOCATING
condition|)
block|{
name|relocatingNode
operator|=
name|selectAndRemove
argument_list|(
name|unassignedNodes
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|unassignedInfo
operator|=
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|INDEX_CREATED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|indexShardRoutingBuilder
operator|.
name|addShard
argument_list|(
operator|new
name|ShardRouting
argument_list|(
name|index
argument_list|,
name|shardId
operator|.
name|id
argument_list|()
argument_list|,
name|replicaNode
argument_list|,
name|relocatingNode
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|replicaState
argument_list|,
literal|0
argument_list|,
name|unassignedInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ClusterState
operator|.
name|Builder
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|state
operator|.
name|nodes
argument_list|(
name|discoBuilder
argument_list|)
expr_stmt|;
name|state
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|,
literal|false
argument_list|)
operator|.
name|generateUuidIfNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|.
name|routingTable
argument_list|(
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
name|index
argument_list|)
operator|.
name|addIndexShard
argument_list|(
name|indexShardRoutingBuilder
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|state
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|selectAndRemove
specifier|private
name|String
name|selectAndRemove
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|strings
parameter_list|)
block|{
name|String
name|selection
init|=
name|randomFrom
argument_list|(
name|strings
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|strings
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|strings
operator|.
name|remove
argument_list|(
name|selection
argument_list|)
expr_stmt|;
return|return
name|selection
return|;
block|}
annotation|@
name|Test
DECL|method|testNotStartedPrimary
specifier|public
name|void
name|testNotStartedPrimary
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// no replicas in oder to skip the replication part
name|clusterService
operator|.
name|setState
argument_list|(
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|ShardRoutingState
operator|.
name|INITIALIZING
else|:
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> using initial state:\n{}"
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
operator|.
name|timeout
argument_list|(
literal|"1ms"
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|TransportReplicationAction
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|Response
argument_list|>
operator|.
name|PrimaryPhase
name|primaryPhase
init|=
name|action
operator|.
expr|new
name|PrimaryPhase
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|primaryPhase
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertListenerThrows
argument_list|(
literal|"unassigned primary didn't cause a timeout"
argument_list|,
name|listener
argument_list|,
name|UnavailableShardsException
operator|.
name|class
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
expr_stmt|;
name|primaryPhase
operator|=
name|action
operator|.
expr|new
name|PrimaryPhase
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|primaryPhase
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"unassigned primary didn't cause a retry"
argument_list|,
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|setState
argument_list|(
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> primary assigned state:\n{}"
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"request wasn't processed on primary, despite of it being assigned"
argument_list|,
name|request
operator|.
name|processedOnPrimary
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertIndexShardCounter
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRoutingToPrimary
specifier|public
name|void
name|testRoutingToPrimary
parameter_list|()
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|clusterService
operator|.
name|setState
argument_list|(
name|stateWithStartedPrimary
argument_list|(
name|index
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using state: \n{}"
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|shard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|primaryNodeId
init|=
name|shardRoutingTable
operator|.
name|primaryShard
argument_list|()
operator|.
name|currentNodeId
argument_list|()
decl_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|TransportReplicationAction
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|Response
argument_list|>
operator|.
name|PrimaryPhase
name|primaryPhase
init|=
name|action
operator|.
expr|new
name|PrimaryPhase
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|primaryPhase
operator|.
name|checkBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|primaryPhase
operator|.
name|routeRequestOrPerformLocally
argument_list|(
name|shardRoutingTable
operator|.
name|primaryShard
argument_list|()
argument_list|,
name|shardRoutingTable
operator|.
name|shardsIt
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|primaryNodeId
operator|.
name|equals
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> primary is assigned locally, testing for execution"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"request failed to be processed on a local primary"
argument_list|,
name|request
operator|.
name|processedOnPrimary
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|transport
operator|.
name|capturedRequests
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|assertIndexShardCounter
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertIndexShardCounter
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> primary is assigned to [{}], checking request forwarded"
argument_list|,
name|primaryNodeId
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|CapturingTransport
operator|.
name|CapturedRequest
argument_list|>
name|capturedRequests
init|=
name|transport
operator|.
name|capturedRequestsByTargetNode
argument_list|()
operator|.
name|get
argument_list|(
name|primaryNodeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|action
argument_list|,
name|equalTo
argument_list|(
literal|"testAction"
argument_list|)
argument_list|)
expr_stmt|;
name|assertIndexShardUninitialized
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testWriteConsistency
specifier|public
name|void
name|testWriteConsistency
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|action
operator|=
operator|new
name|ActionWithConsistency
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"testActionWithConsistency"
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|assignedReplicas
init|=
name|randomInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|int
name|unassignedReplicas
init|=
name|randomInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|int
name|totalShards
init|=
literal|1
operator|+
name|assignedReplicas
operator|+
name|unassignedReplicas
decl_stmt|;
specifier|final
name|boolean
name|passesWriteConsistency
decl_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
operator|.
name|consistencyLevel
argument_list|(
name|randomFrom
argument_list|(
name|WriteConsistencyLevel
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|consistencyLevel
argument_list|()
condition|)
block|{
case|case
name|ONE
case|:
name|passesWriteConsistency
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|DEFAULT
case|:
case|case
name|QUORUM
case|:
if|if
condition|(
name|totalShards
operator|<=
literal|2
condition|)
block|{
name|passesWriteConsistency
operator|=
literal|true
expr_stmt|;
comment|// primary is enough
block|}
else|else
block|{
name|passesWriteConsistency
operator|=
name|assignedReplicas
operator|+
literal|1
operator|>=
operator|(
name|totalShards
operator|/
literal|2
operator|)
operator|+
literal|1
expr_stmt|;
block|}
break|break;
case|case
name|ALL
case|:
name|passesWriteConsistency
operator|=
name|unassignedReplicas
operator|==
literal|0
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown consistency level ["
operator|+
name|request
operator|.
name|consistencyLevel
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|ShardRoutingState
index|[]
name|replicaStates
init|=
operator|new
name|ShardRoutingState
index|[
name|assignedReplicas
operator|+
name|unassignedReplicas
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|assignedReplicas
condition|;
name|i
operator|++
control|)
block|{
name|replicaStates
index|[
name|i
index|]
operator|=
name|randomFrom
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|ShardRoutingState
operator|.
name|RELOCATING
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|assignedReplicas
init|;
name|i
operator|<
name|replicaStates
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|replicaStates
index|[
name|i
index|]
operator|=
name|ShardRoutingState
operator|.
name|UNASSIGNED
expr_stmt|;
block|}
name|clusterService
operator|.
name|setState
argument_list|(
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|replicaStates
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using consistency level of [{}], assigned shards [{}], total shards [{}]. expecting op to [{}]. using state: \n{}"
argument_list|,
name|request
operator|.
name|consistencyLevel
argument_list|()
argument_list|,
literal|1
operator|+
name|assignedReplicas
argument_list|,
literal|1
operator|+
name|assignedReplicas
operator|+
name|unassignedReplicas
argument_list|,
name|passesWriteConsistency
condition|?
literal|"succeed"
else|:
literal|"retry"
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|shard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|TransportReplicationAction
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|Response
argument_list|>
operator|.
name|PrimaryPhase
name|primaryPhase
init|=
name|action
operator|.
expr|new
name|PrimaryPhase
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
decl_stmt|;
if|if
condition|(
name|passesWriteConsistency
condition|)
block|{
name|assertThat
argument_list|(
name|primaryPhase
operator|.
name|checkWriteConsistency
argument_list|(
name|shardRoutingTable
operator|.
name|primaryShard
argument_list|()
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|primaryPhase
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"operations should have been perform, consistency level is met"
argument_list|,
name|request
operator|.
name|processedOnPrimary
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignedReplicas
operator|>
literal|0
condition|)
block|{
name|assertIndexShardCounter
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertIndexShardCounter
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertThat
argument_list|(
name|primaryPhase
operator|.
name|checkWriteConsistency
argument_list|(
name|shardRoutingTable
operator|.
name|primaryShard
argument_list|()
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|primaryPhase
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"operations should not have been perform, consistency level is *NOT* met"
argument_list|,
name|request
operator|.
name|processedOnPrimary
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertIndexShardUninitialized
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|replicaStates
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|replicaStates
index|[
name|i
index|]
operator|=
name|ShardRoutingState
operator|.
name|STARTED
expr_stmt|;
block|}
name|clusterService
operator|.
name|setState
argument_list|(
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|replicaStates
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"once the consistency level met, operation should continue"
argument_list|,
name|request
operator|.
name|processedOnPrimary
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertIndexShardCounter
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReplication
specifier|public
name|void
name|testReplication
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|clusterService
operator|.
name|setState
argument_list|(
name|stateWithStartedPrimary
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|shard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|assignedReplicas
init|=
literal|0
decl_stmt|;
name|int
name|totalShards
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shard
range|:
name|shardRoutingTable
control|)
block|{
name|totalShards
operator|++
expr_stmt|;
if|if
condition|(
name|shard
operator|.
name|primary
argument_list|()
operator|==
literal|false
operator|&&
name|shard
operator|.
name|assignedToNode
argument_list|()
condition|)
block|{
name|assignedReplicas
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|shard
operator|.
name|relocating
argument_list|()
condition|)
block|{
name|assignedReplicas
operator|++
expr_stmt|;
name|totalShards
operator|++
expr_stmt|;
block|}
block|}
name|runReplicateTest
argument_list|(
name|shardRoutingTable
argument_list|,
name|assignedReplicas
argument_list|,
name|totalShards
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplicationWithShadowIndex
specifier|public
name|void
name|testReplicationWithShadowIndex
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|stateWithStartedPrimary
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|MetaData
operator|.
name|Builder
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
argument_list|)
decl_stmt|;
name|Settings
operator|.
name|Builder
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|metaData
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|settings
argument_list|()
argument_list|)
decl_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHADOW_REPLICAS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|metaData
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|setState
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|shard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|assignedReplicas
init|=
literal|0
decl_stmt|;
name|int
name|totalShards
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shard
range|:
name|shardRoutingTable
control|)
block|{
name|totalShards
operator|++
expr_stmt|;
if|if
condition|(
name|shard
operator|.
name|primary
argument_list|()
operator|&&
name|shard
operator|.
name|relocating
argument_list|()
condition|)
block|{
name|assignedReplicas
operator|++
expr_stmt|;
name|totalShards
operator|++
expr_stmt|;
block|}
block|}
name|runReplicateTest
argument_list|(
name|shardRoutingTable
argument_list|,
name|assignedReplicas
argument_list|,
name|totalShards
argument_list|)
expr_stmt|;
block|}
DECL|method|runReplicateTest
specifier|protected
name|void
name|runReplicateTest
parameter_list|(
name|IndexShardRoutingTable
name|shardRoutingTable
parameter_list|,
name|int
name|assignedReplicas
parameter_list|,
name|int
name|totalShards
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|ShardRouting
name|primaryShard
init|=
name|shardRoutingTable
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
specifier|final
name|ShardIterator
name|shardIt
init|=
name|shardRoutingTable
operator|.
name|shardsIt
argument_list|()
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
name|shardIt
operator|.
name|shardId
argument_list|()
decl_stmt|;
specifier|final
name|Request
name|request
init|=
operator|new
name|Request
argument_list|()
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"expecting [{}] assigned replicas, [{}] total shards. using state: \n{}"
argument_list|,
name|assignedReplicas
argument_list|,
name|totalShards
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TransportReplicationAction
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|Response
argument_list|>
operator|.
name|InternalRequest
name|internalRequest
init|=
name|action
operator|.
expr|new
name|InternalRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|internalRequest
operator|.
name|concreteIndex
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|Releasable
name|reference
init|=
name|getOrCreateIndexShardOperationsCounter
argument_list|()
decl_stmt|;
name|assertIndexShardCounter
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|TransportReplicationAction
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|Response
argument_list|>
operator|.
name|ReplicationPhase
name|replicationPhase
init|=
name|action
operator|.
expr|new
name|ReplicationPhase
argument_list|(
name|shardIt
argument_list|,
name|request
argument_list|,
operator|new
name|Response
argument_list|()
argument_list|,
operator|new
name|ClusterStateObserver
argument_list|(
name|clusterService
argument_list|,
name|logger
argument_list|)
argument_list|,
name|primaryShard
argument_list|,
name|internalRequest
argument_list|,
name|listener
argument_list|,
name|reference
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|replicationPhase
operator|.
name|totalShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|replicationPhase
operator|.
name|pending
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|assignedReplicas
argument_list|)
argument_list|)
expr_stmt|;
name|replicationPhase
operator|.
name|run
argument_list|()
expr_stmt|;
specifier|final
name|CapturingTransport
operator|.
name|CapturedRequest
index|[]
name|capturedRequests
init|=
name|transport
operator|.
name|capturedRequests
argument_list|()
decl_stmt|;
name|transport
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|capturedRequests
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|assignedReplicas
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignedReplicas
operator|>
literal|0
condition|)
block|{
name|assertThat
argument_list|(
literal|"listener is done, but there are outstanding replicas"
argument_list|,
name|listener
operator|.
name|isDone
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|pending
init|=
name|replicationPhase
operator|.
name|pending
argument_list|()
decl_stmt|;
name|int
name|criticalFailures
init|=
literal|0
decl_stmt|;
comment|// failures that should fail the shard
name|int
name|successfull
init|=
literal|1
decl_stmt|;
for|for
control|(
name|CapturingTransport
operator|.
name|CapturedRequest
name|capturedRequest
range|:
name|capturedRequests
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|Throwable
name|t
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|t
operator|=
operator|new
name|CorruptIndexException
argument_list|(
literal|"simulated"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|criticalFailures
operator|++
expr_stmt|;
block|}
else|else
block|{
name|t
operator|=
operator|new
name|IndexShardNotStartedException
argument_list|(
name|shardId
argument_list|,
name|IndexShardState
operator|.
name|RECOVERING
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"--> simulating failure on {} with [{}]"
argument_list|,
name|capturedRequest
operator|.
name|node
argument_list|,
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|transport
operator|.
name|handleResponse
argument_list|(
name|capturedRequest
operator|.
name|requestId
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|successfull
operator|++
expr_stmt|;
name|transport
operator|.
name|handleResponse
argument_list|(
name|capturedRequest
operator|.
name|requestId
argument_list|,
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
name|pending
operator|--
expr_stmt|;
name|assertThat
argument_list|(
name|replicationPhase
operator|.
name|pending
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|pending
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|replicationPhase
operator|.
name|successful
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|successfull
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|listener
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|ActionWriteResponse
operator|.
name|ShardInfo
name|shardInfo
init|=
name|response
operator|.
name|getShardInfo
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|shardInfo
operator|.
name|getFailed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|criticalFailures
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shardInfo
operator|.
name|getFailures
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
name|criticalFailures
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shardInfo
operator|.
name|getSuccessful
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|successfull
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shardInfo
operator|.
name|getTotal
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"failed to see enough shard failures"
argument_list|,
name|transport
operator|.
name|capturedRequests
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|criticalFailures
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|CapturingTransport
operator|.
name|CapturedRequest
name|capturedRequest
range|:
name|transport
operator|.
name|capturedRequests
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|capturedRequest
operator|.
name|action
argument_list|,
name|equalTo
argument_list|(
name|ShardStateAction
operator|.
name|SHARD_FAILED_ACTION_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// all replicas have responded so the counter should be decreased again
name|assertIndexShardCounter
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCounterOnPrimary
specifier|public
name|void
name|testCounterOnPrimary
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// no replica, we only want to test on primary
name|clusterService
operator|.
name|setState
argument_list|(
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> using initial state:\n{}"
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
operator|.
name|timeout
argument_list|(
literal|"100ms"
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**          * Execute an action that is stuck in shard operation until a latch is counted down.          * That way we can start the operation, check if the counter was incremented and then unblock the operation          * again to see if the counter is decremented afterwards.          * TODO: I could also write an action that asserts that the counter is 2 in the shard operation.          * However, this failure would only become apparent once listener.get is called. Seems a little implicit.          * */
name|action
operator|=
operator|new
name|ActionWithDelay
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"testActionWithExceptions"
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
specifier|final
name|TransportReplicationAction
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|Response
argument_list|>
operator|.
name|PrimaryPhase
name|primaryPhase
init|=
name|action
operator|.
expr|new
name|PrimaryPhase
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|primaryPhase
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// shard operation should be ongoing, so the counter is at 2
comment|// we have to wait here because increment happens in thread
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|Object
name|input
parameter_list|)
block|{
return|return
operator|(
name|count
operator|.
name|get
argument_list|()
operator|==
literal|2
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertIndexShardCounter
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ActionWithDelay
operator|)
name|action
operator|)
operator|.
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// operation finished, counter back to 0
name|assertIndexShardCounter
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCounterIncrementedWhileReplicationOngoing
specifier|public
name|void
name|testCounterIncrementedWhileReplicationOngoing
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// one replica to make sure replication is attempted
name|clusterService
operator|.
name|setState
argument_list|(
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> using initial state:\n{}"
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
operator|.
name|timeout
argument_list|(
literal|"100ms"
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|TransportReplicationAction
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|Response
argument_list|>
operator|.
name|PrimaryPhase
name|primaryPhase
init|=
name|action
operator|.
expr|new
name|PrimaryPhase
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|primaryPhase
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertIndexShardCounter
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// try once with successful response
name|transport
operator|.
name|handleResponse
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
index|[
literal|0
index|]
operator|.
name|requestId
argument_list|,
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|assertIndexShardCounter
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|transport
operator|.
name|clear
argument_list|()
expr_stmt|;
name|request
operator|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
operator|.
name|timeout
argument_list|(
literal|"100ms"
argument_list|)
expr_stmt|;
name|primaryPhase
operator|=
name|action
operator|.
expr|new
name|PrimaryPhase
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|primaryPhase
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertIndexShardCounter
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// try with failure response
name|transport
operator|.
name|handleResponse
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
index|[
literal|0
index|]
operator|.
name|requestId
argument_list|,
operator|new
name|CorruptIndexException
argument_list|(
literal|"simulated"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertIndexShardCounter
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplicasCounter
specifier|public
name|void
name|testReplicasCounter
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|clusterService
operator|.
name|setState
argument_list|(
name|state
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|=
operator|new
name|ActionWithDelay
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"testActionWithExceptions"
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
specifier|final
name|Action
operator|.
name|ReplicaOperationTransportHandler
name|replicaOperationTransportHandler
init|=
name|action
operator|.
expr|new
name|ReplicaOperationTransportHandler
argument_list|()
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|replicaOperationTransportHandler
operator|.
name|messageReceived
argument_list|(
operator|new
name|Request
argument_list|()
argument_list|,
name|createTransportChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                 }
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// shard operation should be ongoing, so the counter is at 2
comment|// we have to wait here because increment happens in thread
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|Object
name|input
parameter_list|)
block|{
return|return
name|count
operator|.
name|get
argument_list|()
operator|==
literal|2
return|;
block|}
block|}
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ActionWithDelay
operator|)
name|action
operator|)
operator|.
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// operation should have finished and counter decreased because no outstanding replica requests
name|assertIndexShardCounter
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// now check if this also works if operation throws exception
name|action
operator|=
operator|new
name|ActionWithExceptions
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"testActionWithExceptions"
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
specifier|final
name|Action
operator|.
name|ReplicaOperationTransportHandler
name|replicaOperationTransportHandlerForException
init|=
name|action
operator|.
expr|new
name|ReplicaOperationTransportHandler
argument_list|()
decl_stmt|;
try|try
block|{
name|replicaOperationTransportHandlerForException
operator|.
name|messageReceived
argument_list|(
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
argument_list|,
name|createTransportChannel
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t2
parameter_list|)
block|{         }
name|assertIndexShardCounter
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCounterDecrementedIfShardOperationThrowsException
specifier|public
name|void
name|testCounterDecrementedIfShardOperationThrowsException
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
name|action
operator|=
operator|new
name|ActionWithExceptions
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"testActionWithExceptions"
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|clusterService
operator|.
name|setState
argument_list|(
name|state
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> using initial state:\n{}"
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
argument_list|(
name|shardId
argument_list|)
operator|.
name|timeout
argument_list|(
literal|"100ms"
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|Response
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|TransportReplicationAction
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|Response
argument_list|>
operator|.
name|PrimaryPhase
name|primaryPhase
init|=
name|action
operator|.
expr|new
name|PrimaryPhase
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|primaryPhase
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// no replica request should have been sent yet
name|assertThat
argument_list|(
name|transport
operator|.
name|capturedRequests
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// no matter if the operation is retried or not, counter must be be back to 1
name|assertIndexShardCounter
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|assertIndexShardCounter
specifier|private
name|void
name|assertIndexShardCounter
parameter_list|(
name|int
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|count
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|count
specifier|private
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/*     * Returns testIndexShardOperationsCounter or initializes it if it was already created in this test run.     * */
DECL|method|getOrCreateIndexShardOperationsCounter
specifier|private
specifier|synchronized
name|Releasable
name|getOrCreateIndexShardOperationsCounter
parameter_list|()
block|{
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|Releasable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|count
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|Request
specifier|static
class|class
name|Request
extends|extends
name|ReplicationRequest
argument_list|<
name|Request
argument_list|>
block|{
DECL|field|shardId
name|int
name|shardId
decl_stmt|;
DECL|field|processedOnPrimary
specifier|public
name|AtomicBoolean
name|processedOnPrimary
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|processedOnReplicas
specifier|public
name|AtomicInteger
name|processedOnReplicas
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|Request
name|Request
parameter_list|()
block|{
name|this
operator|.
name|operationThreaded
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|Request
name|Request
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
operator|.
name|id
argument_list|()
expr_stmt|;
name|this
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
comment|// keep things simple
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|shardId
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|Response
specifier|static
class|class
name|Response
extends|extends
name|ActionWriteResponse
block|{     }
DECL|class|Action
class|class
name|Action
extends|extends
name|TransportReplicationAction
argument_list|<
name|Request
argument_list|,
name|Request
argument_list|,
name|Response
argument_list|>
block|{
DECL|method|Action
name|Action
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|actionName
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|actionName
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
literal|null
argument_list|,
name|threadPool
argument_list|,
operator|new
name|ShardStateAction
argument_list|(
name|settings
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|ActionFilters
argument_list|(
operator|new
name|HashSet
argument_list|<
name|ActionFilter
argument_list|>
argument_list|()
argument_list|)
argument_list|,
name|Request
operator|.
name|class
argument_list|,
name|Request
operator|.
name|class
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newResponseInstance
specifier|protected
name|Response
name|newResponseInstance
parameter_list|()
block|{
return|return
operator|new
name|Response
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|shardOperationOnPrimary
specifier|protected
name|Tuple
argument_list|<
name|Response
argument_list|,
name|Request
argument_list|>
name|shardOperationOnPrimary
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PrimaryOperationRequest
name|shardRequest
parameter_list|)
throws|throws
name|Throwable
block|{
name|boolean
name|executedBefore
init|=
name|shardRequest
operator|.
name|request
operator|.
name|processedOnPrimary
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
decl_stmt|;
assert|assert
name|executedBefore
operator|==
literal|false
operator|:
literal|"request has already been executed on the primary"
assert|;
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
operator|new
name|Response
argument_list|()
argument_list|,
name|shardRequest
operator|.
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|shardOperationOnReplica
specifier|protected
name|void
name|shardOperationOnReplica
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|Request
name|request
parameter_list|)
block|{
name|request
operator|.
name|processedOnReplicas
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shards
specifier|protected
name|ShardIterator
name|shards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|InternalRequest
name|request
parameter_list|)
block|{
return|return
name|clusterState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|index
argument_list|(
name|request
operator|.
name|concreteIndex
argument_list|()
argument_list|)
operator|.
name|shard
argument_list|(
name|request
operator|.
name|request
argument_list|()
operator|.
name|shardId
argument_list|)
operator|.
name|shardsIt
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|checkWriteConsistency
specifier|protected
name|boolean
name|checkWriteConsistency
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|resolveIndex
specifier|protected
name|boolean
name|resolveIndex
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getIndexShardOperationsCounter
specifier|protected
name|Releasable
name|getIndexShardOperationsCounter
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
return|return
name|getOrCreateIndexShardOperationsCounter
argument_list|()
return|;
block|}
block|}
DECL|class|ActionWithConsistency
class|class
name|ActionWithConsistency
extends|extends
name|Action
block|{
DECL|method|ActionWithConsistency
name|ActionWithConsistency
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|actionName
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|actionName
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkWriteConsistency
specifier|protected
name|boolean
name|checkWriteConsistency
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|method|newNode
specifier|static
name|DiscoveryNode
name|newNode
parameter_list|(
name|int
name|nodeId
parameter_list|)
block|{
return|return
operator|new
name|DiscoveryNode
argument_list|(
literal|"node_"
operator|+
name|nodeId
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
return|;
block|}
comment|/*     * Throws exceptions when executed. Used for testing if the counter is correctly decremented in case an operation fails.     * */
DECL|class|ActionWithExceptions
class|class
name|ActionWithExceptions
extends|extends
name|Action
block|{
DECL|method|ActionWithExceptions
name|ActionWithExceptions
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|actionName
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|actionName
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shardOperationOnPrimary
specifier|protected
name|Tuple
argument_list|<
name|Response
argument_list|,
name|Request
argument_list|>
name|shardOperationOnPrimary
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PrimaryOperationRequest
name|shardRequest
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|throwException
argument_list|(
name|shardRequest
operator|.
name|shardId
argument_list|)
return|;
block|}
DECL|method|throwException
specifier|private
name|Tuple
argument_list|<
name|Response
argument_list|,
name|Request
argument_list|>
name|throwException
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// throw a generic exception
comment|// for testing on replica this will actually cause an NPE because it will make the shard fail but
comment|// for this we need an IndicesService which is null.
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"simulated"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// throw an exception which will cause retry on primary and be ignored on replica
throw|throw
operator|new
name|IndexShardNotStartedException
argument_list|(
name|shardId
argument_list|,
name|IndexShardState
operator|.
name|RECOVERING
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"throwing "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|shardOperationOnReplica
specifier|protected
name|void
name|shardOperationOnReplica
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|Request
name|shardRequest
parameter_list|)
block|{
name|throwException
argument_list|(
name|shardRequest
operator|.
name|internalShardId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Delays the operation until  countDownLatch is counted down      */
DECL|class|ActionWithDelay
class|class
name|ActionWithDelay
extends|extends
name|Action
block|{
DECL|field|countDownLatch
name|CountDownLatch
name|countDownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|method|ActionWithDelay
name|ActionWithDelay
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|actionName
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|actionName
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shardOperationOnPrimary
specifier|protected
name|Tuple
argument_list|<
name|Response
argument_list|,
name|Request
argument_list|>
name|shardOperationOnPrimary
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PrimaryOperationRequest
name|shardRequest
parameter_list|)
throws|throws
name|Throwable
block|{
name|awaitLatch
argument_list|()
expr_stmt|;
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
operator|new
name|Response
argument_list|()
argument_list|,
name|shardRequest
operator|.
name|request
argument_list|)
return|;
block|}
DECL|method|awaitLatch
specifier|private
name|void
name|awaitLatch
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|countDownLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|countDownLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shardOperationOnReplica
specifier|protected
name|void
name|shardOperationOnReplica
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|Request
name|shardRequest
parameter_list|)
block|{
try|try
block|{
name|awaitLatch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
block|}
block|}
comment|/*     * Transport channel that is needed for replica operation testing.     * */
DECL|method|createTransportChannel
specifier|public
name|TransportChannel
name|createTransportChannel
parameter_list|()
block|{
return|return
operator|new
name|TransportChannel
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|action
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProfileName
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendResponse
parameter_list|(
name|TransportResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|sendResponse
parameter_list|(
name|TransportResponse
name|response
parameter_list|,
name|TransportResponseOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|sendResponse
parameter_list|(
name|Throwable
name|error
parameter_list|)
throws|throws
name|IOException
block|{             }
block|}
return|;
block|}
block|}
end_class

end_unit

