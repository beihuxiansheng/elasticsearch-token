begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support.replication
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContentObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|EqualsHashCodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|RandomObjects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|EqualsHashCodeTestUtils
operator|.
name|checkEqualsAndHashCode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_class
DECL|class|ReplicationResponseTests
specifier|public
class|class
name|ReplicationResponseTests
extends|extends
name|ESTestCase
block|{
DECL|method|testShardInfoToString
specifier|public
name|void
name|testShardInfoToString
parameter_list|()
block|{
specifier|final
name|int
name|total
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|successful
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|total
argument_list|)
decl_stmt|;
specifier|final
name|ReplicationResponse
operator|.
name|ShardInfo
name|shardInfo
init|=
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
argument_list|(
name|total
argument_list|,
name|successful
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"ShardInfo{total=5, successful=%d, failures=[]}"
argument_list|,
name|successful
argument_list|)
argument_list|,
name|shardInfo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testShardInfoEqualsAndHashcode
specifier|public
name|void
name|testShardInfoEqualsAndHashcode
parameter_list|()
block|{
name|EqualsHashCodeTestUtils
operator|.
name|CopyFunction
argument_list|<
name|ReplicationResponse
operator|.
name|ShardInfo
argument_list|>
name|copy
init|=
name|shardInfo
lambda|->
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
argument_list|(
name|shardInfo
operator|.
name|getTotal
argument_list|()
argument_list|,
name|shardInfo
operator|.
name|getSuccessful
argument_list|()
argument_list|,
name|shardInfo
operator|.
name|getFailures
argument_list|()
argument_list|)
decl_stmt|;
name|EqualsHashCodeTestUtils
operator|.
name|MutateFunction
argument_list|<
name|ReplicationResponse
operator|.
name|ShardInfo
argument_list|>
name|mutate
init|=
name|shardInfo
lambda|->
block|{
name|List
argument_list|<
name|Supplier
argument_list|<
name|ReplicationResponse
operator|.
name|ShardInfo
argument_list|>
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
argument_list|(
name|shardInfo
operator|.
name|getTotal
argument_list|()
operator|+
literal|1
argument_list|,
name|shardInfo
operator|.
name|getSuccessful
argument_list|()
argument_list|,
name|shardInfo
operator|.
name|getFailures
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
argument_list|(
name|shardInfo
operator|.
name|getTotal
argument_list|()
argument_list|,
name|shardInfo
operator|.
name|getSuccessful
argument_list|()
operator|+
literal|1
argument_list|,
name|shardInfo
operator|.
name|getFailures
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
block|{
name|int
name|nbFailures
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
index|[]
name|randomFailures
init|=
name|RandomObjects
operator|.
name|randomShardInfoFailures
argument_list|(
name|random
argument_list|()
argument_list|,
name|nbFailures
argument_list|)
decl_stmt|;
return|return
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
argument_list|(
name|shardInfo
operator|.
name|getTotal
argument_list|()
argument_list|,
name|shardInfo
operator|.
name|getSuccessful
argument_list|()
argument_list|,
name|randomFailures
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|randomFrom
argument_list|(
name|mutations
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
decl_stmt|;
name|checkEqualsAndHashCode
argument_list|(
name|RandomObjects
operator|.
name|randomShardInfo
argument_list|(
name|random
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|,
name|copy
argument_list|,
name|mutate
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailureEqualsAndHashcode
specifier|public
name|void
name|testFailureEqualsAndHashcode
parameter_list|()
block|{
name|EqualsHashCodeTestUtils
operator|.
name|CopyFunction
argument_list|<
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
argument_list|>
name|copy
init|=
name|failure
lambda|->
block|{
name|Index
name|index
init|=
name|failure
operator|.
name|fullShardId
argument_list|()
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|,
name|index
operator|.
name|getUUID
argument_list|()
argument_list|,
name|failure
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
name|Exception
name|cause
init|=
operator|(
name|Exception
operator|)
name|failure
operator|.
name|getCause
argument_list|()
decl_stmt|;
return|return
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
argument_list|(
name|shardId
argument_list|,
name|failure
operator|.
name|nodeId
argument_list|()
argument_list|,
name|cause
argument_list|,
name|failure
operator|.
name|status
argument_list|()
argument_list|,
name|failure
operator|.
name|primary
argument_list|()
argument_list|)
return|;
block|}
decl_stmt|;
name|EqualsHashCodeTestUtils
operator|.
name|MutateFunction
argument_list|<
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
argument_list|>
name|mutate
init|=
name|failure
lambda|->
block|{
name|List
argument_list|<
name|Supplier
argument_list|<
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
argument_list|>
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Index
name|index
init|=
name|failure
operator|.
name|fullShardId
argument_list|()
operator|.
name|getIndex
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|indexNamePool
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|randomUnicodeOfCodepointLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|randomUnicodeOfCodepointLength
argument_list|(
literal|6
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|indexNamePool
operator|.
name|remove
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ShardId
name|randomIndex
init|=
operator|new
name|ShardId
argument_list|(
name|randomFrom
argument_list|(
name|indexNamePool
argument_list|)
argument_list|,
name|index
operator|.
name|getUUID
argument_list|()
argument_list|,
name|failure
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
argument_list|(
name|randomIndex
argument_list|,
name|failure
operator|.
name|nodeId
argument_list|()
argument_list|,
operator|(
name|Exception
operator|)
name|failure
operator|.
name|getCause
argument_list|()
argument_list|,
name|failure
operator|.
name|status
argument_list|()
argument_list|,
name|failure
operator|.
name|primary
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|uuidPool
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|randomUnicodeOfCodepointLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|randomUnicodeOfCodepointLength
argument_list|(
literal|6
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|uuidPool
operator|.
name|remove
argument_list|(
name|index
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ShardId
name|randomUUID
init|=
operator|new
name|ShardId
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|,
name|randomFrom
argument_list|(
name|uuidPool
argument_list|)
argument_list|,
name|failure
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
argument_list|(
name|randomUUID
argument_list|,
name|failure
operator|.
name|nodeId
argument_list|()
argument_list|,
operator|(
name|Exception
operator|)
name|failure
operator|.
name|getCause
argument_list|()
argument_list|,
name|failure
operator|.
name|status
argument_list|()
argument_list|,
name|failure
operator|.
name|primary
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ShardId
name|randomShardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|,
name|index
operator|.
name|getUUID
argument_list|()
argument_list|,
name|failure
operator|.
name|shardId
argument_list|()
operator|+
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
argument_list|(
name|randomShardId
argument_list|,
name|failure
operator|.
name|nodeId
argument_list|()
argument_list|,
operator|(
name|Exception
operator|)
name|failure
operator|.
name|getCause
argument_list|()
argument_list|,
name|failure
operator|.
name|status
argument_list|()
argument_list|,
name|failure
operator|.
name|primary
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|nodeIdPool
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|randomUnicodeOfLength
argument_list|(
literal|3
argument_list|)
argument_list|,
name|randomUnicodeOfLength
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|nodeIdPool
operator|.
name|remove
argument_list|(
name|failure
operator|.
name|nodeId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|randomNode
init|=
name|randomFrom
argument_list|(
name|nodeIdPool
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
argument_list|(
name|failure
operator|.
name|fullShardId
argument_list|()
argument_list|,
name|randomNode
argument_list|,
operator|(
name|Exception
operator|)
name|failure
operator|.
name|getCause
argument_list|()
argument_list|,
name|failure
operator|.
name|status
argument_list|()
argument_list|,
name|failure
operator|.
name|primary
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|Exception
argument_list|>
name|exceptionPool
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"a"
argument_list|)
argument_list|,
operator|new
name|IllegalArgumentException
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|exceptionPool
operator|.
name|remove
argument_list|(
name|failure
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Exception
name|randomException
init|=
name|randomFrom
argument_list|(
name|exceptionPool
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
argument_list|(
name|failure
operator|.
name|fullShardId
argument_list|()
argument_list|,
name|failure
operator|.
name|nodeId
argument_list|()
argument_list|,
name|randomException
argument_list|,
name|failure
operator|.
name|status
argument_list|()
argument_list|,
name|failure
operator|.
name|primary
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|RestStatus
argument_list|>
name|otherStatuses
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|otherStatuses
operator|.
name|remove
argument_list|(
name|failure
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RestStatus
name|randomStatus
init|=
name|randomFrom
argument_list|(
name|otherStatuses
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
argument_list|(
name|failure
operator|.
name|fullShardId
argument_list|()
argument_list|,
name|failure
operator|.
name|nodeId
argument_list|()
argument_list|,
operator|(
name|Exception
operator|)
name|failure
operator|.
name|getCause
argument_list|()
argument_list|,
name|randomStatus
argument_list|,
name|failure
operator|.
name|primary
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|randomPrimary
init|=
operator|!
name|failure
operator|.
name|primary
argument_list|()
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
argument_list|(
name|failure
operator|.
name|fullShardId
argument_list|()
argument_list|,
name|failure
operator|.
name|nodeId
argument_list|()
argument_list|,
operator|(
name|Exception
operator|)
name|failure
operator|.
name|getCause
argument_list|()
argument_list|,
name|failure
operator|.
name|status
argument_list|()
argument_list|,
name|randomPrimary
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|randomFrom
argument_list|(
name|mutations
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
decl_stmt|;
name|checkEqualsAndHashCode
argument_list|(
name|RandomObjects
operator|.
name|randomShardInfoFailure
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|copy
argument_list|,
name|mutate
argument_list|)
expr_stmt|;
block|}
DECL|method|testShardInfoToXContent
specifier|public
name|void
name|testShardInfoToXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ReplicationResponse
operator|.
name|ShardInfo
name|shardInfo
init|=
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
argument_list|(
literal|5
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|BytesReference
name|shardInfoBytes
init|=
name|XContentHelper
operator|.
name|toXContent
argument_list|(
name|shardInfo
argument_list|,
name|xContentType
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
comment|// Expected JSON is {"total":5,"successful":3,"failed":0}
name|assertThat
argument_list|(
name|shardInfo
argument_list|,
name|instanceOf
argument_list|(
name|ToXContentObject
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|shardInfoBytes
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"total"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardInfo
operator|.
name|getTotal
argument_list|()
argument_list|,
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"successful"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardInfo
operator|.
name|getSuccessful
argument_list|()
argument_list|,
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failed"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardInfo
operator|.
name|getFailed
argument_list|()
argument_list|,
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testShardInfoToAndFromXContent
specifier|public
name|void
name|testShardInfoToAndFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ReplicationResponse
operator|.
name|ShardInfo
name|shardInfo
init|=
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|humanReadable
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|BytesReference
name|shardInfoBytes
init|=
name|XContentHelper
operator|.
name|toXContent
argument_list|(
name|shardInfo
argument_list|,
name|xContentType
argument_list|,
name|humanReadable
argument_list|)
decl_stmt|;
name|ReplicationResponse
operator|.
name|ShardInfo
name|parsedShardInfo
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|shardInfoBytes
argument_list|)
init|)
block|{
comment|// Move to the first start object
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parsedShardInfo
operator|=
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// We can use assertEquals because the shardInfo doesn't have a failure (and exceptions)
name|assertEquals
argument_list|(
name|shardInfo
argument_list|,
name|parsedShardInfo
argument_list|)
expr_stmt|;
name|BytesReference
name|parsedShardInfoBytes
init|=
name|XContentHelper
operator|.
name|toXContent
argument_list|(
name|parsedShardInfo
argument_list|,
name|xContentType
argument_list|,
name|humanReadable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|shardInfoBytes
argument_list|,
name|parsedShardInfoBytes
argument_list|)
expr_stmt|;
block|}
DECL|method|testShardInfoWithFailureToXContent
specifier|public
name|void
name|testShardInfoWithFailureToXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ReplicationResponse
operator|.
name|ShardInfo
name|shardInfo
init|=
name|RandomObjects
operator|.
name|randomShardInfo
argument_list|(
name|random
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|BytesReference
name|shardInfoBytes
init|=
name|XContentHelper
operator|.
name|toXContent
argument_list|(
name|shardInfo
argument_list|,
name|xContentType
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|shardInfoBytes
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"total"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardInfo
operator|.
name|getTotal
argument_list|()
argument_list|,
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"successful"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardInfo
operator|.
name|getSuccessful
argument_list|()
argument_list|,
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failed"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardInfo
operator|.
name|getFailed
argument_list|()
argument_list|,
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardInfo
operator|.
name|getFailures
argument_list|()
operator|!=
literal|null
operator|&&
name|shardInfo
operator|.
name|getFailures
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failures"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shardInfo
operator|.
name|getFailures
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertFailure
argument_list|(
name|parser
argument_list|,
name|shardInfo
operator|.
name|getFailures
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRandomShardInfoFromXContent
specifier|public
name|void
name|testRandomShardInfoFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ReplicationResponse
operator|.
name|ShardInfo
name|shardInfo
init|=
name|RandomObjects
operator|.
name|randomShardInfo
argument_list|(
name|random
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|BytesReference
name|shardInfoBytes
init|=
name|XContentHelper
operator|.
name|toXContent
argument_list|(
name|shardInfo
argument_list|,
name|xContentType
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|ReplicationResponse
operator|.
name|ShardInfo
name|parsedShardInfo
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|shardInfoBytes
argument_list|)
init|)
block|{
comment|// Move to the first start object
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parsedShardInfo
operator|=
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// We can't use assertEquals to compare the original ShardInfo with the parsed ShardInfo
comment|// because it may include random failures with exceptions, and exception types are not
comment|// preserved during ToXContent->FromXContent process.
name|assertNotNull
argument_list|(
name|parsedShardInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardInfo
operator|.
name|getTotal
argument_list|()
argument_list|,
name|parsedShardInfo
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardInfo
operator|.
name|getSuccessful
argument_list|()
argument_list|,
name|parsedShardInfo
operator|.
name|getSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardInfo
operator|.
name|getFailed
argument_list|()
argument_list|,
name|parsedShardInfo
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardInfo
operator|.
name|getFailures
argument_list|()
operator|.
name|length
argument_list|,
name|parsedShardInfo
operator|.
name|getFailures
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shardInfo
operator|.
name|getFailures
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
name|parsedFailure
init|=
name|parsedShardInfo
operator|.
name|getFailures
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
name|failure
init|=
name|shardInfo
operator|.
name|getFailures
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|failure
operator|.
name|index
argument_list|()
argument_list|,
name|parsedFailure
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|failure
operator|.
name|shardId
argument_list|()
argument_list|,
name|parsedFailure
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|failure
operator|.
name|nodeId
argument_list|()
argument_list|,
name|parsedFailure
operator|.
name|nodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|failure
operator|.
name|status
argument_list|()
argument_list|,
name|parsedFailure
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|failure
operator|.
name|primary
argument_list|()
argument_list|,
name|parsedFailure
operator|.
name|primary
argument_list|()
argument_list|)
expr_stmt|;
name|Throwable
name|cause
init|=
name|failure
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|String
name|expectedMessage
init|=
literal|"Elasticsearch exception [type="
operator|+
name|ElasticsearchException
operator|.
name|getExceptionName
argument_list|(
name|cause
argument_list|)
operator|+
literal|", reason="
operator|+
name|cause
operator|.
name|getMessage
argument_list|()
operator|+
literal|"]"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedMessage
argument_list|,
name|parsedFailure
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRandomFailureToXContent
specifier|public
name|void
name|testRandomFailureToXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
name|shardInfoFailure
init|=
name|RandomObjects
operator|.
name|randomShardInfoFailure
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|BytesReference
name|shardInfoBytes
init|=
name|XContentHelper
operator|.
name|toXContent
argument_list|(
name|shardInfoFailure
argument_list|,
name|xContentType
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|shardInfoBytes
argument_list|)
init|)
block|{
name|assertFailure
argument_list|(
name|parser
argument_list|,
name|shardInfoFailure
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRandomFailureToAndFromXContent
specifier|public
name|void
name|testRandomFailureToAndFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
name|shardInfoFailure
init|=
name|RandomObjects
operator|.
name|randomShardInfoFailure
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
empty_stmt|;
specifier|final
name|BytesReference
name|shardInfoBytes
init|=
name|XContentHelper
operator|.
name|toXContent
argument_list|(
name|shardInfoFailure
argument_list|,
name|xContentType
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
name|parsedFailure
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|shardInfoBytes
argument_list|)
init|)
block|{
comment|// Move to the first start object
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parsedFailure
operator|=
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|shardInfoFailure
operator|.
name|index
argument_list|()
argument_list|,
name|parsedFailure
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardInfoFailure
operator|.
name|shardId
argument_list|()
argument_list|,
name|parsedFailure
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardInfoFailure
operator|.
name|nodeId
argument_list|()
argument_list|,
name|parsedFailure
operator|.
name|nodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardInfoFailure
operator|.
name|status
argument_list|()
argument_list|,
name|parsedFailure
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardInfoFailure
operator|.
name|primary
argument_list|()
argument_list|,
name|parsedFailure
operator|.
name|primary
argument_list|()
argument_list|)
expr_stmt|;
name|Throwable
name|cause
init|=
name|shardInfoFailure
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|String
name|expectedMessage
init|=
literal|"Elasticsearch exception [type="
operator|+
name|ElasticsearchException
operator|.
name|getExceptionName
argument_list|(
name|cause
argument_list|)
operator|+
literal|", reason="
operator|+
name|cause
operator|.
name|getMessage
argument_list|()
operator|+
literal|"]"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedMessage
argument_list|,
name|parsedFailure
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFailure
specifier|private
specifier|static
name|void
name|assertFailure
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
name|failure
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_index"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|failure
operator|.
name|index
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_shard"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|failure
operator|.
name|shardId
argument_list|()
argument_list|,
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_node"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|failure
operator|.
name|nodeId
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|Throwable
name|cause
init|=
name|failure
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reason"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThrowable
argument_list|(
name|parser
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"status"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|failure
operator|.
name|status
argument_list|()
argument_list|,
name|RestStatus
operator|.
name|valueOf
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"primary"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_BOOLEAN
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|failure
operator|.
name|primary
argument_list|()
argument_list|,
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertThrowable
specifier|private
specifier|static
name|void
name|assertThrowable
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|Throwable
name|cause
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"type"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ElasticsearchException
operator|.
name|getExceptionName
argument_list|(
name|cause
argument_list|)
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reason"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|ElasticsearchException
condition|)
block|{
name|ElasticsearchException
name|ex
init|=
operator|(
name|ElasticsearchException
operator|)
name|cause
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|ex
operator|.
name|getHeaderKeys
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
operator|.
name|replaceFirst
argument_list|(
literal|"es."
argument_list|,
literal|""
argument_list|)
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getHeader
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ex
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"caused_by"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThrowable
argument_list|(
name|parser
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

