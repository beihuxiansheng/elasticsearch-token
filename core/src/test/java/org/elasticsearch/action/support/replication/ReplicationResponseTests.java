begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support.replication
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationResponse
operator|.
name|ShardInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|breaker
operator|.
name|CircuitBreakingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|RandomObjects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchExceptionTests
operator|.
name|assertDeepEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
operator|.
name|toXContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertToXContentEquivalent
import|;
end_import

begin_class
DECL|class|ReplicationResponseTests
specifier|public
class|class
name|ReplicationResponseTests
extends|extends
name|ESTestCase
block|{
DECL|method|testShardInfoToString
specifier|public
name|void
name|testShardInfoToString
parameter_list|()
block|{
specifier|final
name|int
name|total
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|successful
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|total
argument_list|)
decl_stmt|;
specifier|final
name|ShardInfo
name|shardInfo
init|=
operator|new
name|ShardInfo
argument_list|(
name|total
argument_list|,
name|successful
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"ShardInfo{total=5, successful=%d, failures=[]}"
argument_list|,
name|successful
argument_list|)
argument_list|,
name|shardInfo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testShardInfoToXContent
specifier|public
name|void
name|testShardInfoToXContent
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|ShardInfo
name|shardInfo
init|=
operator|new
name|ShardInfo
argument_list|(
literal|5
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|String
name|output
init|=
name|Strings
operator|.
name|toString
argument_list|(
name|shardInfo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"total\":5,\"successful\":3,\"failed\":0}"
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|{
name|ShardInfo
name|shardInfo
init|=
operator|new
name|ShardInfo
argument_list|(
literal|6
argument_list|,
literal|4
argument_list|,
operator|new
name|ShardInfo
operator|.
name|Failure
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"_uuid"
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|"_node_id"
argument_list|,
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Wrong"
argument_list|)
argument_list|,
name|RestStatus
operator|.
name|BAD_REQUEST
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|ShardInfo
operator|.
name|Failure
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"_uuid"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"_node_id"
argument_list|,
operator|new
name|CircuitBreakingException
argument_list|(
literal|"Wrong"
argument_list|,
literal|12
argument_list|,
literal|21
argument_list|)
argument_list|,
name|RestStatus
operator|.
name|NOT_ACCEPTABLE
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|output
init|=
name|Strings
operator|.
name|toString
argument_list|(
name|shardInfo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"total\":6,\"successful\":4,\"failed\":2,\"failures\":[{\"_index\":\"index\",\"_shard\":3,"
operator|+
literal|"\"_node\":\"_node_id\",\"reason\":{\"type\":\"illegal_argument_exception\",\"reason\":\"Wrong\"},"
operator|+
literal|"\"status\":\"BAD_REQUEST\",\"primary\":false},{\"_index\":\"index\",\"_shard\":1,\"_node\":\"_node_id\","
operator|+
literal|"\"reason\":{\"type\":\"circuit_breaking_exception\",\"reason\":\"Wrong\",\"bytes_wanted\":12,\"bytes_limit\":21},"
operator|+
literal|"\"status\":\"NOT_ACCEPTABLE\",\"primary\":true}]}"
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testShardInfoToAndFromXContent
specifier|public
name|void
name|testShardInfoToAndFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Tuple
argument_list|<
name|ShardInfo
argument_list|,
name|ShardInfo
argument_list|>
name|tuple
init|=
name|RandomObjects
operator|.
name|randomShardInfo
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|ShardInfo
name|shardInfo
init|=
name|tuple
operator|.
name|v1
argument_list|()
decl_stmt|;
name|ShardInfo
name|expectedShardInfo
init|=
name|tuple
operator|.
name|v2
argument_list|()
decl_stmt|;
specifier|final
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|humanReadable
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|BytesReference
name|originalBytes
init|=
name|toXContent
argument_list|(
name|shardInfo
argument_list|,
name|xContentType
argument_list|,
name|humanReadable
argument_list|)
decl_stmt|;
comment|// Shuffle the XContent fields
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|originalBytes
argument_list|)
init|)
block|{
name|originalBytes
operator|=
name|shuffleXContent
argument_list|(
name|parser
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
block|}
name|ShardInfo
name|parsedShardInfo
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|originalBytes
argument_list|)
init|)
block|{
comment|// Move to the first start object
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parsedShardInfo
operator|=
name|ShardInfo
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertShardInfo
argument_list|(
name|expectedShardInfo
argument_list|,
name|parsedShardInfo
argument_list|)
expr_stmt|;
name|BytesReference
name|expectedFinalBytes
init|=
name|toXContent
argument_list|(
name|expectedShardInfo
argument_list|,
name|xContentType
argument_list|,
name|humanReadable
argument_list|)
decl_stmt|;
name|BytesReference
name|finalBytes
init|=
name|toXContent
argument_list|(
name|parsedShardInfo
argument_list|,
name|xContentType
argument_list|,
name|humanReadable
argument_list|)
decl_stmt|;
name|assertToXContentEquivalent
argument_list|(
name|expectedFinalBytes
argument_list|,
name|finalBytes
argument_list|,
name|xContentType
argument_list|)
expr_stmt|;
block|}
DECL|method|assertShardInfo
specifier|public
specifier|static
name|void
name|assertShardInfo
parameter_list|(
name|ShardInfo
name|expected
parameter_list|,
name|ShardInfo
name|actual
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getTotal
argument_list|()
argument_list|,
name|actual
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getSuccessful
argument_list|()
argument_list|,
name|actual
operator|.
name|getSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getFailed
argument_list|()
argument_list|,
name|actual
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
index|[]
name|expectedFailures
init|=
name|expected
operator|.
name|getFailures
argument_list|()
decl_stmt|;
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
index|[]
name|actualFailures
init|=
name|actual
operator|.
name|getFailures
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedFailures
operator|.
name|length
argument_list|,
name|actualFailures
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedFailures
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
name|expectedFailure
init|=
name|expectedFailures
index|[
name|i
index|]
decl_stmt|;
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
name|actualFailure
init|=
name|actualFailures
index|[
name|i
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|fullShardId
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|fullShardId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|status
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|nodeId
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|nodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|primary
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|primary
argument_list|()
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|expectedCause
init|=
operator|(
name|ElasticsearchException
operator|)
name|expectedFailure
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|ElasticsearchException
name|actualCause
init|=
operator|(
name|ElasticsearchException
operator|)
name|actualFailure
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertDeepEquals
argument_list|(
name|expectedCause
argument_list|,
name|actualCause
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

