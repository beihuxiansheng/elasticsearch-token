begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
operator|.
name|randomVersion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|IndicesOptionsTests
specifier|public
class|class
name|IndicesOptionsTests
extends|extends
name|ESTestCase
block|{
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|iterations
init|=
name|randomIntBetween
argument_list|(
literal|5
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|IndicesOptions
name|indicesOptions
init|=
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|Version
name|outputVersion
init|=
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|output
operator|.
name|setVersion
argument_list|(
name|outputVersion
argument_list|)
expr_stmt|;
name|indicesOptions
operator|.
name|writeIndicesOptions
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|StreamInput
name|streamInput
init|=
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|streamInput
operator|.
name|setVersion
argument_list|(
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|IndicesOptions
name|indicesOptions2
init|=
name|IndicesOptions
operator|.
name|readIndicesOptions
argument_list|(
name|streamInput
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indicesOptions2
operator|.
name|ignoreUnavailable
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indicesOptions
operator|.
name|ignoreUnavailable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indicesOptions2
operator|.
name|allowNoIndices
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indicesOptions
operator|.
name|allowNoIndices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indicesOptions2
operator|.
name|expandWildcardsOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indicesOptions
operator|.
name|expandWildcardsOpen
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indicesOptions2
operator|.
name|expandWildcardsClosed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indicesOptions
operator|.
name|expandWildcardsClosed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indicesOptions2
operator|.
name|forbidClosedIndices
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indicesOptions
operator|.
name|forbidClosedIndices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indicesOptions2
operator|.
name|allowAliasesToMultipleIndices
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indicesOptions
operator|.
name|allowAliasesToMultipleIndices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFromOptions
specifier|public
name|void
name|testFromOptions
parameter_list|()
block|{
name|int
name|iterations
init|=
name|randomIntBetween
argument_list|(
literal|5
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|ignoreUnavailable
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|allowNoIndices
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|expandToOpenIndices
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|expandToClosedIndices
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|allowAliasesToMultipleIndices
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|forbidClosedIndices
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|IndicesOptions
name|indicesOptions
init|=
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
name|ignoreUnavailable
argument_list|,
name|allowNoIndices
argument_list|,
name|expandToOpenIndices
argument_list|,
name|expandToClosedIndices
argument_list|,
name|allowAliasesToMultipleIndices
argument_list|,
name|forbidClosedIndices
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indicesOptions
operator|.
name|ignoreUnavailable
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ignoreUnavailable
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indicesOptions
operator|.
name|allowNoIndices
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|allowNoIndices
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indicesOptions
operator|.
name|expandWildcardsOpen
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expandToOpenIndices
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indicesOptions
operator|.
name|expandWildcardsClosed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expandToClosedIndices
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indicesOptions
operator|.
name|allowAliasesToMultipleIndices
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|allowAliasesToMultipleIndices
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indicesOptions
operator|.
name|allowAliasesToMultipleIndices
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|allowAliasesToMultipleIndices
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indicesOptions
operator|.
name|forbidClosedIndices
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|forbidClosedIndices
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

