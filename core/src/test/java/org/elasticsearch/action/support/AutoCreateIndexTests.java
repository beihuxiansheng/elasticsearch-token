begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_class
DECL|class|AutoCreateIndexTests
specifier|public
class|class
name|AutoCreateIndexTests
extends|extends
name|ESTestCase
block|{
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
block|{
block|{
name|AutoCreateIndex
name|autoCreateIndex
init|=
operator|new
name|AutoCreateIndex
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|IndexNameExpressionResolver
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|cs
init|=
name|buildClusterState
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"already exists"
argument_list|,
name|autoCreateIndex
operator|.
name|shouldAutoCreate
argument_list|(
literal|"foo"
argument_list|,
name|cs
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|autoCreateIndex
operator|.
name|shouldAutoCreate
argument_list|(
literal|"foobar"
argument_list|,
name|cs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|AutoCreateIndex
name|autoCreateIndex
init|=
operator|new
name|AutoCreateIndex
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"action.auto_create_index"
argument_list|,
literal|"-foo,+b*"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|IndexNameExpressionResolver
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|cs
init|=
name|buildClusterState
argument_list|(
literal|"foobar"
argument_list|,
literal|"baz"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|autoCreateIndex
operator|.
name|shouldAutoCreate
argument_list|(
literal|"foo"
argument_list|,
name|cs
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|autoCreateIndex
operator|.
name|shouldAutoCreate
argument_list|(
literal|"bar"
argument_list|,
name|cs
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"already exists"
argument_list|,
name|autoCreateIndex
operator|.
name|shouldAutoCreate
argument_list|(
literal|"baz"
argument_list|,
name|cs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|AutoCreateIndex
name|autoCreateIndex
init|=
operator|new
name|AutoCreateIndex
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"action.auto_create_index"
argument_list|,
literal|"-foo,+b*"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.mapper.dynamic"
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|IndexNameExpressionResolver
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|cs
init|=
name|buildClusterState
argument_list|(
literal|"foobar"
argument_list|,
literal|"baz"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|autoCreateIndex
operator|.
name|shouldAutoCreate
argument_list|(
literal|"foo"
argument_list|,
name|cs
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|autoCreateIndex
operator|.
name|shouldAutoCreate
argument_list|(
literal|"bar"
argument_list|,
name|cs
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"already exists"
argument_list|,
name|autoCreateIndex
operator|.
name|shouldAutoCreate
argument_list|(
literal|"baz"
argument_list|,
name|cs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|AutoCreateIndex
name|autoCreateIndex
init|=
operator|new
name|AutoCreateIndex
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"action.auto_create_index"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.mapper.dynamic"
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|IndexNameExpressionResolver
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|cs
init|=
name|buildClusterState
argument_list|(
literal|"foobar"
argument_list|,
literal|"baz"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|autoCreateIndex
operator|.
name|shouldAutoCreate
argument_list|(
literal|"foo"
argument_list|,
name|cs
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|autoCreateIndex
operator|.
name|shouldAutoCreate
argument_list|(
literal|"bar"
argument_list|,
name|cs
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"already exists"
argument_list|,
name|autoCreateIndex
operator|.
name|shouldAutoCreate
argument_list|(
literal|"baz"
argument_list|,
name|cs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseFailed
specifier|public
name|void
name|testParseFailed
parameter_list|()
block|{
try|try
block|{
operator|new
name|AutoCreateIndex
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"action.auto_create_index"
argument_list|,
literal|",,,"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|IndexNameExpressionResolver
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Can't parse [,,,] for setting [action.auto_create_index] must be either [true, false, or a comma seperated list of index patterns]"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildClusterState
specifier|public
name|ClusterState
name|buildClusterState
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|MetaData
operator|.
name|Builder
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|metaData
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|index
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

