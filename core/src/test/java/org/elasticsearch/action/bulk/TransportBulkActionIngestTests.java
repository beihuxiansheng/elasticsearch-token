begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateApplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AtomicArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|IngestService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|PipelineExecutionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Captor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|MockitoAnnotations
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|sameInstance
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verifyZeroInteractions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TransportBulkActionIngestTests
specifier|public
class|class
name|TransportBulkActionIngestTests
extends|extends
name|ESTestCase
block|{
comment|/** Services needed by bulk action */
DECL|field|transportService
name|TransportService
name|transportService
decl_stmt|;
DECL|field|clusterService
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|ingestService
name|IngestService
name|ingestService
decl_stmt|;
comment|/** The ingest execution service we can capture calls to */
DECL|field|executionService
name|PipelineExecutionService
name|executionService
decl_stmt|;
comment|/** Arguments to callbacks we want to capture, but which require generics, so we must use @Captor */
annotation|@
name|Captor
DECL|field|failureHandler
name|ArgumentCaptor
argument_list|<
name|BiConsumer
argument_list|<
name|IndexRequest
argument_list|,
name|Exception
argument_list|>
argument_list|>
name|failureHandler
decl_stmt|;
annotation|@
name|Captor
DECL|field|completionHandler
name|ArgumentCaptor
argument_list|<
name|Consumer
argument_list|<
name|Exception
argument_list|>
argument_list|>
name|completionHandler
decl_stmt|;
annotation|@
name|Captor
DECL|field|remoteResponseHandler
name|ArgumentCaptor
argument_list|<
name|TransportResponseHandler
argument_list|<
name|BulkResponse
argument_list|>
argument_list|>
name|remoteResponseHandler
decl_stmt|;
annotation|@
name|Captor
DECL|field|bulkDocsItr
name|ArgumentCaptor
argument_list|<
name|Iterable
argument_list|<
name|DocWriteRequest
argument_list|>
argument_list|>
name|bulkDocsItr
decl_stmt|;
comment|/** The actual action we want to test, with real indexing mocked */
DECL|field|action
name|TestTransportBulkAction
name|action
decl_stmt|;
comment|/** True if the next call to the index action should act as an ingest node */
DECL|field|localIngest
name|boolean
name|localIngest
decl_stmt|;
comment|/** The nodes that forwarded index requests should be cycled through. */
DECL|field|nodes
name|DiscoveryNodes
name|nodes
decl_stmt|;
DECL|field|remoteNode1
name|DiscoveryNode
name|remoteNode1
decl_stmt|;
DECL|field|remoteNode2
name|DiscoveryNode
name|remoteNode2
decl_stmt|;
comment|/** A subclass of the real bulk action to allow skipping real bulk indexing, and marking when it would have happened. */
DECL|class|TestTransportBulkAction
class|class
name|TestTransportBulkAction
extends|extends
name|TransportBulkAction
block|{
DECL|field|isExecuted
name|boolean
name|isExecuted
init|=
literal|false
decl_stmt|;
comment|// set when the "real" bulk execution happens
DECL|method|TestTransportBulkAction
name|TestTransportBulkAction
parameter_list|()
block|{
name|super
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|ingestService
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|ActionFilters
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needToCheck
specifier|protected
name|boolean
name|needToCheck
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|executeBulk
name|void
name|executeBulk
parameter_list|(
name|Task
name|task
parameter_list|,
specifier|final
name|BulkRequest
name|bulkRequest
parameter_list|,
specifier|final
name|long
name|startTimeNanos
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|listener
parameter_list|,
specifier|final
name|AtomicArray
argument_list|<
name|BulkItemResponse
argument_list|>
name|responses
parameter_list|)
block|{
name|isExecuted
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setupAction
specifier|public
name|void
name|setupAction
parameter_list|()
block|{
comment|// initialize captors, which must be members to use @Capture because of generics
name|MockitoAnnotations
operator|.
name|initMocks
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// setup services that will be called by action
name|transportService
operator|=
name|mock
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
expr_stmt|;
name|clusterService
operator|=
name|mock
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
expr_stmt|;
name|localIngest
operator|=
literal|true
expr_stmt|;
comment|// setup nodes for local and remote
name|DiscoveryNode
name|localNode
init|=
name|mock
argument_list|(
name|DiscoveryNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|localNode
operator|.
name|isIngestNode
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|stub
lambda|->
name|localIngest
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|localNode
argument_list|)
expr_stmt|;
name|remoteNode1
operator|=
name|mock
argument_list|(
name|DiscoveryNode
operator|.
name|class
argument_list|)
expr_stmt|;
name|remoteNode2
operator|=
name|mock
argument_list|(
name|DiscoveryNode
operator|.
name|class
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|mock
argument_list|(
name|DiscoveryNodes
operator|.
name|class
argument_list|)
expr_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|DiscoveryNode
argument_list|>
name|ingestNodes
init|=
name|ImmutableOpenMap
operator|.
expr|<
name|String
decl_stmt|,
name|DiscoveryNode
decl|>
name|builder
argument_list|(
literal|2
argument_list|)
decl|.
name|fPut
argument_list|(
literal|"node1"
argument_list|,
name|remoteNode1
argument_list|)
decl|.
name|fPut
argument_list|(
literal|"node2"
argument_list|,
name|remoteNode2
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|nodes
operator|.
name|getIngestNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ingestNodes
argument_list|)
expr_stmt|;
name|ClusterState
name|state
init|=
name|mock
argument_list|(
name|ClusterState
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|state
operator|.
name|getNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|ClusterChangedEvent
name|event
init|=
name|mock
argument_list|(
name|ClusterChangedEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|event
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|state
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ClusterStateApplier
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|applyClusterState
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|clusterService
argument_list|)
operator|.
name|addStateApplier
argument_list|(
name|any
argument_list|(
name|ClusterStateApplier
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// setup the mocked ingest service for capturing calls
name|ingestService
operator|=
name|mock
argument_list|(
name|IngestService
operator|.
name|class
argument_list|)
expr_stmt|;
name|executionService
operator|=
name|mock
argument_list|(
name|PipelineExecutionService
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ingestService
operator|.
name|getPipelineExecutionService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|executionService
argument_list|)
expr_stmt|;
name|action
operator|=
operator|new
name|TestTransportBulkAction
argument_list|()
expr_stmt|;
name|reset
argument_list|(
name|transportService
argument_list|)
expr_stmt|;
comment|// call on construction of action
block|}
DECL|method|testIngestSkipped
specifier|public
name|void
name|testIngestSkipped
parameter_list|()
throws|throws
name|Exception
block|{
name|BulkRequest
name|bulkRequest
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|indexRequest
operator|.
name|source
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
name|indexRequest
argument_list|)
expr_stmt|;
name|action
operator|.
name|execute
argument_list|(
literal|null
argument_list|,
name|bulkRequest
argument_list|,
name|ActionListener
operator|.
name|wrap
argument_list|(
name|response
lambda|->
block|{}
argument_list|,
name|exception
lambda|->
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|exception
argument_list|)
throw|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|action
operator|.
name|isExecuted
argument_list|)
expr_stmt|;
name|verifyZeroInteractions
argument_list|(
name|ingestService
argument_list|)
expr_stmt|;
block|}
DECL|method|testIngestLocal
specifier|public
name|void
name|testIngestLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|Exception
name|exception
init|=
operator|new
name|Exception
argument_list|(
literal|"fake exception"
argument_list|)
decl_stmt|;
name|BulkRequest
name|bulkRequest
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
name|IndexRequest
name|indexRequest1
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|indexRequest1
operator|.
name|source
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|indexRequest1
operator|.
name|setPipeline
argument_list|(
literal|"testpipeline"
argument_list|)
expr_stmt|;
name|IndexRequest
name|indexRequest2
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|indexRequest2
operator|.
name|source
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|indexRequest2
operator|.
name|setPipeline
argument_list|(
literal|"testpipeline"
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
name|indexRequest1
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
name|indexRequest2
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|responseCalled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|failureCalled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|action
operator|.
name|execute
argument_list|(
literal|null
argument_list|,
name|bulkRequest
argument_list|,
name|ActionListener
operator|.
name|wrap
argument_list|(
name|response
lambda|->
block|{
name|BulkItemResponse
name|itemResponse
init|=
name|response
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|itemResponse
operator|.
name|getFailure
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"fake exception"
argument_list|)
argument_list|)
expr_stmt|;
name|responseCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|,
name|e
lambda|->
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|sameInstance
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
name|failureCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// check failure works, and passes through to the listener
name|assertFalse
argument_list|(
name|action
operator|.
name|isExecuted
argument_list|)
expr_stmt|;
comment|// haven't executed yet
name|assertFalse
argument_list|(
name|responseCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|failureCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|executionService
argument_list|)
operator|.
name|executeBulkRequest
argument_list|(
name|bulkDocsItr
operator|.
name|capture
argument_list|()
argument_list|,
name|failureHandler
operator|.
name|capture
argument_list|()
argument_list|,
name|completionHandler
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|completionHandler
operator|.
name|getValue
argument_list|()
operator|.
name|accept
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failureCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// now check success
name|Iterator
argument_list|<
name|DocWriteRequest
argument_list|>
name|req
init|=
name|bulkDocsItr
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|failureHandler
operator|.
name|getValue
argument_list|()
operator|.
name|accept
argument_list|(
operator|(
name|IndexRequest
operator|)
name|req
operator|.
name|next
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
comment|// have an exception for our one index request
name|indexRequest2
operator|.
name|setPipeline
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// this is done by the real pipeline execution service when processing
name|completionHandler
operator|.
name|getValue
argument_list|()
operator|.
name|accept
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|action
operator|.
name|isExecuted
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|responseCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// listener would only be called by real index action, not our mocked one
name|verifyZeroInteractions
argument_list|(
name|transportService
argument_list|)
expr_stmt|;
block|}
DECL|method|testIngestForward
specifier|public
name|void
name|testIngestForward
parameter_list|()
throws|throws
name|Exception
block|{
name|localIngest
operator|=
literal|false
expr_stmt|;
name|BulkRequest
name|bulkRequest
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|indexRequest
operator|.
name|source
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|indexRequest
operator|.
name|setPipeline
argument_list|(
literal|"testpipeline"
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
name|indexRequest
argument_list|)
expr_stmt|;
name|BulkResponse
name|bulkResponse
init|=
name|mock
argument_list|(
name|BulkResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|responseCalled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|listener
init|=
name|ActionListener
operator|.
name|wrap
argument_list|(
name|response
lambda|->
block|{
name|responseCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|bulkResponse
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
argument_list|,
name|e
lambda|->
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
argument_list|)
decl_stmt|;
name|action
operator|.
name|execute
argument_list|(
literal|null
argument_list|,
name|bulkRequest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
comment|// should not have executed ingest locally
name|verify
argument_list|(
name|executionService
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|executeBulkRequest
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
comment|// but instead should have sent to a remote node with the transport service
name|ArgumentCaptor
argument_list|<
name|DiscoveryNode
argument_list|>
name|node
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|DiscoveryNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|transportService
argument_list|)
operator|.
name|sendRequest
argument_list|(
name|node
operator|.
name|capture
argument_list|()
argument_list|,
name|eq
argument_list|(
name|BulkAction
operator|.
name|NAME
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|,
name|remoteResponseHandler
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|usedNode1
init|=
name|node
operator|.
name|getValue
argument_list|()
operator|==
name|remoteNode1
decl_stmt|;
comment|// make sure we used one of the nodes
if|if
condition|(
name|usedNode1
operator|==
literal|false
condition|)
block|{
name|assertSame
argument_list|(
name|remoteNode2
argument_list|,
name|node
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|action
operator|.
name|isExecuted
argument_list|)
expr_stmt|;
comment|// no local index execution
name|assertFalse
argument_list|(
name|responseCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// listener not called yet
name|remoteResponseHandler
operator|.
name|getValue
argument_list|()
operator|.
name|handleResponse
argument_list|(
name|bulkResponse
argument_list|)
expr_stmt|;
comment|// call the listener for the remote node
name|assertTrue
argument_list|(
name|responseCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// now the listener we passed should have been delegated to by the remote listener
name|assertFalse
argument_list|(
name|action
operator|.
name|isExecuted
argument_list|)
expr_stmt|;
comment|// still no local index execution
comment|// now make sure ingest nodes are rotated through with a subsequent request
name|reset
argument_list|(
name|transportService
argument_list|)
expr_stmt|;
name|action
operator|.
name|execute
argument_list|(
literal|null
argument_list|,
name|bulkRequest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|transportService
argument_list|)
operator|.
name|sendRequest
argument_list|(
name|node
operator|.
name|capture
argument_list|()
argument_list|,
name|eq
argument_list|(
name|BulkAction
operator|.
name|NAME
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|,
name|remoteResponseHandler
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|usedNode1
condition|)
block|{
name|assertSame
argument_list|(
name|remoteNode2
argument_list|,
name|node
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertSame
argument_list|(
name|remoteNode1
argument_list|,
name|node
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

