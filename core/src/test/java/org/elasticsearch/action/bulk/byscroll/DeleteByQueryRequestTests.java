begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk.byscroll
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|byscroll
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
operator|.
name|randomSimpleString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|DeleteByQueryRequestTests
specifier|public
class|class
name|DeleteByQueryRequestTests
extends|extends
name|AbstractBulkByScrollRequestTestCase
argument_list|<
name|DeleteByQueryRequest
argument_list|>
block|{
DECL|method|testDeleteteByQueryRequestImplementsIndicesRequestReplaceable
specifier|public
name|void
name|testDeleteteByQueryRequestImplementsIndicesRequestReplaceable
parameter_list|()
block|{
name|int
name|numIndices
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|String
index|[]
name|indices
init|=
operator|new
name|String
index|[
name|numIndices
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIndices
condition|;
name|i
operator|++
control|)
block|{
name|indices
index|[
name|i
index|]
operator|=
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|(
name|indices
argument_list|)
decl_stmt|;
name|IndicesOptions
name|indicesOptions
init|=
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|searchRequest
operator|.
name|indicesOptions
argument_list|(
name|indicesOptions
argument_list|)
expr_stmt|;
name|DeleteByQueryRequest
name|request
init|=
operator|new
name|DeleteByQueryRequest
argument_list|(
name|searchRequest
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIndices
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|indices
index|[
name|i
index|]
argument_list|,
name|request
operator|.
name|indices
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertSame
argument_list|(
name|indicesOptions
argument_list|,
name|request
operator|.
name|indicesOptions
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|request
operator|.
name|indicesOptions
argument_list|()
argument_list|,
name|request
operator|.
name|getSearchRequest
argument_list|()
operator|.
name|indicesOptions
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numNewIndices
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|String
index|[]
name|newIndices
init|=
operator|new
name|String
index|[
name|numNewIndices
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNewIndices
condition|;
name|i
operator|++
control|)
block|{
name|newIndices
index|[
name|i
index|]
operator|=
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|indices
argument_list|(
name|newIndices
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNewIndices
condition|;
name|i
operator|++
control|)
block|{
empty_stmt|;
name|assertEquals
argument_list|(
name|newIndices
index|[
name|i
index|]
argument_list|,
name|request
operator|.
name|indices
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNewIndices
condition|;
name|i
operator|++
control|)
block|{
empty_stmt|;
name|assertEquals
argument_list|(
name|newIndices
index|[
name|i
index|]
argument_list|,
name|request
operator|.
name|getSearchRequest
argument_list|()
operator|.
name|indices
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|newRequest
specifier|protected
name|DeleteByQueryRequest
name|newRequest
parameter_list|()
block|{
return|return
operator|new
name|DeleteByQueryRequest
argument_list|(
operator|new
name|SearchRequest
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|extraRandomizationForSlice
specifier|protected
name|void
name|extraRandomizationForSlice
parameter_list|(
name|DeleteByQueryRequest
name|original
parameter_list|)
block|{
comment|// Nothing else to randomize
block|}
annotation|@
name|Override
DECL|method|extraForSliceAssertions
specifier|protected
name|void
name|extraForSliceAssertions
parameter_list|(
name|DeleteByQueryRequest
name|original
parameter_list|,
name|DeleteByQueryRequest
name|forSliced
parameter_list|)
block|{
comment|// No extra assertions needed
block|}
DECL|method|testTypesGetter
specifier|public
name|void
name|testTypesGetter
parameter_list|()
block|{
name|int
name|numTypes
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|String
index|[]
name|types
init|=
operator|new
name|String
index|[
name|numTypes
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTypes
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|searchRequest
operator|.
name|types
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|DeleteByQueryRequest
name|request
init|=
operator|new
name|DeleteByQueryRequest
argument_list|(
name|searchRequest
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|request
operator|.
name|types
argument_list|()
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
DECL|method|testTypesSetter
specifier|public
name|void
name|testTypesSetter
parameter_list|()
block|{
name|int
name|numTypes
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|String
index|[]
name|types
init|=
operator|new
name|String
index|[
name|numTypes
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTypes
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|DeleteByQueryRequest
name|request
init|=
operator|new
name|DeleteByQueryRequest
argument_list|(
name|searchRequest
argument_list|)
decl_stmt|;
name|request
operator|.
name|types
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|request
operator|.
name|types
argument_list|()
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
DECL|method|testValidateGivenNoQuery
specifier|public
name|void
name|testValidateGivenNoQuery
parameter_list|()
block|{
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|DeleteByQueryRequest
name|deleteByQueryRequest
init|=
operator|new
name|DeleteByQueryRequest
argument_list|(
name|searchRequest
argument_list|)
decl_stmt|;
name|deleteByQueryRequest
operator|.
name|indices
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|ActionRequestValidationException
name|e
init|=
name|deleteByQueryRequest
operator|.
name|validate
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|is
argument_list|(
name|not
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"query is missing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testValidateGivenValid
specifier|public
name|void
name|testValidateGivenValid
parameter_list|()
block|{
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|DeleteByQueryRequest
name|deleteByQueryRequest
init|=
operator|new
name|DeleteByQueryRequest
argument_list|(
name|searchRequest
argument_list|)
decl_stmt|;
name|deleteByQueryRequest
operator|.
name|indices
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|source
argument_list|()
operator|.
name|query
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
expr_stmt|;
name|ActionRequestValidationException
name|e
init|=
name|deleteByQueryRequest
operator|.
name|validate
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|is
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

