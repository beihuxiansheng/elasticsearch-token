begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkItemResponse
operator|.
name|Failure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteResponseTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponseTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateResponseTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchExceptionTests
operator|.
name|assertDeepEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchExceptionTests
operator|.
name|randomExceptions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
operator|.
name|toXContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_class
DECL|class|BulkItemResponseTests
specifier|public
class|class
name|BulkItemResponseTests
extends|extends
name|ESTestCase
block|{
DECL|method|testFailureToString
specifier|public
name|void
name|testFailureToString
parameter_list|()
block|{
name|Failure
name|failure
init|=
operator|new
name|Failure
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
operator|new
name|RuntimeException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|toString
init|=
name|failure
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|,
name|containsString
argument_list|(
literal|"\"type\":\"runtime_exception\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|,
name|containsString
argument_list|(
literal|"\"reason\":\"test\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|,
name|containsString
argument_list|(
literal|"\"status\":500"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToAndFromXContent
specifier|public
name|void
name|testToAndFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DocWriteRequest
operator|.
name|OpType
name|opType
range|:
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|bulkItemId
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|boolean
name|humanReadable
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|Tuple
argument_list|<
name|?
extends|extends
name|DocWriteResponse
argument_list|,
name|?
extends|extends
name|DocWriteResponse
argument_list|>
name|randomDocWriteResponses
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|INDEX
operator|||
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|CREATE
condition|)
block|{
name|randomDocWriteResponses
operator|=
name|IndexResponseTests
operator|.
name|randomIndexResponse
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|DELETE
condition|)
block|{
name|randomDocWriteResponses
operator|=
name|DeleteResponseTests
operator|.
name|randomDeleteResponse
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|UPDATE
condition|)
block|{
name|randomDocWriteResponses
operator|=
name|UpdateResponseTests
operator|.
name|randomUpdateResponse
argument_list|(
name|xContentType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Test does not support opType ["
operator|+
name|opType
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|BulkItemResponse
name|bulkItemResponse
init|=
operator|new
name|BulkItemResponse
argument_list|(
name|bulkItemId
argument_list|,
name|opType
argument_list|,
name|randomDocWriteResponses
operator|.
name|v1
argument_list|()
argument_list|)
decl_stmt|;
name|BulkItemResponse
name|expectedBulkItemResponse
init|=
operator|new
name|BulkItemResponse
argument_list|(
name|bulkItemId
argument_list|,
name|opType
argument_list|,
name|randomDocWriteResponses
operator|.
name|v2
argument_list|()
argument_list|)
decl_stmt|;
name|BytesReference
name|originalBytes
init|=
name|toXContent
argument_list|(
name|bulkItemResponse
argument_list|,
name|xContentType
argument_list|,
name|humanReadable
argument_list|)
decl_stmt|;
comment|// Shuffle the XContent fields
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|originalBytes
argument_list|)
init|)
block|{
name|originalBytes
operator|=
name|shuffleXContent
argument_list|(
name|parser
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
block|}
name|BulkItemResponse
name|parsedBulkItemResponse
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|originalBytes
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parsedBulkItemResponse
operator|=
name|BulkItemResponse
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|,
name|bulkItemId
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertBulkItemResponse
argument_list|(
name|expectedBulkItemResponse
argument_list|,
name|parsedBulkItemResponse
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFailureToAndFromXContent
specifier|public
name|void
name|testFailureToAndFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|itemId
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|String
name|index
init|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|DocWriteRequest
operator|.
name|OpType
name|opType
init|=
name|randomFrom
argument_list|(
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Tuple
argument_list|<
name|Throwable
argument_list|,
name|ElasticsearchException
argument_list|>
name|exceptions
init|=
name|randomExceptions
argument_list|()
decl_stmt|;
name|Exception
name|bulkItemCause
init|=
operator|(
name|Exception
operator|)
name|exceptions
operator|.
name|v1
argument_list|()
decl_stmt|;
name|Failure
name|bulkItemFailure
init|=
operator|new
name|Failure
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|bulkItemCause
argument_list|)
decl_stmt|;
name|BulkItemResponse
name|bulkItemResponse
init|=
operator|new
name|BulkItemResponse
argument_list|(
name|itemId
argument_list|,
name|opType
argument_list|,
name|bulkItemFailure
argument_list|)
decl_stmt|;
name|Failure
name|expectedBulkItemFailure
init|=
operator|new
name|Failure
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|exceptions
operator|.
name|v2
argument_list|()
argument_list|,
name|ExceptionsHelper
operator|.
name|status
argument_list|(
name|bulkItemCause
argument_list|)
argument_list|)
decl_stmt|;
name|BulkItemResponse
name|expectedBulkItemResponse
init|=
operator|new
name|BulkItemResponse
argument_list|(
name|itemId
argument_list|,
name|opType
argument_list|,
name|expectedBulkItemFailure
argument_list|)
decl_stmt|;
name|BytesReference
name|originalBytes
init|=
name|toXContent
argument_list|(
name|bulkItemResponse
argument_list|,
name|xContentType
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
comment|// Shuffle the XContent fields
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|originalBytes
argument_list|)
init|)
block|{
name|originalBytes
operator|=
name|shuffleXContent
argument_list|(
name|parser
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
block|}
name|BulkItemResponse
name|parsedBulkItemResponse
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|originalBytes
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parsedBulkItemResponse
operator|=
name|BulkItemResponse
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|,
name|itemId
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertBulkItemResponse
argument_list|(
name|expectedBulkItemResponse
argument_list|,
name|parsedBulkItemResponse
argument_list|)
expr_stmt|;
block|}
DECL|method|assertBulkItemResponse
specifier|public
specifier|static
name|void
name|assertBulkItemResponse
parameter_list|(
name|BulkItemResponse
name|expected
parameter_list|,
name|BulkItemResponse
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getItemId
argument_list|()
argument_list|,
name|actual
operator|.
name|getItemId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getIndex
argument_list|()
argument_list|,
name|actual
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getType
argument_list|()
argument_list|,
name|actual
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getId
argument_list|()
argument_list|,
name|actual
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getOpType
argument_list|()
argument_list|,
name|actual
operator|.
name|getOpType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getVersion
argument_list|()
argument_list|,
name|actual
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|isFailed
argument_list|()
argument_list|,
name|actual
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expected
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|BulkItemResponse
operator|.
name|Failure
name|expectedFailure
init|=
name|expected
operator|.
name|getFailure
argument_list|()
decl_stmt|;
name|BulkItemResponse
operator|.
name|Failure
name|actualFailure
init|=
name|actual
operator|.
name|getFailure
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|getIndex
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|getType
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|getId
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|getMessage
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFailure
operator|.
name|getStatus
argument_list|()
argument_list|,
name|actualFailure
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertDeepEquals
argument_list|(
operator|(
name|ElasticsearchException
operator|)
name|expectedFailure
operator|.
name|getCause
argument_list|()
argument_list|,
operator|(
name|ElasticsearchException
operator|)
name|actualFailure
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|expected
operator|.
name|getOpType
argument_list|()
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|UPDATE
condition|)
block|{
name|UpdateResponseTests
operator|.
name|assertUpdateResponse
argument_list|(
name|expected
operator|.
name|getResponse
argument_list|()
argument_list|,
name|actual
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// assertDocWriteResponse check the result for INDEX/CREATE and DELETE operations
name|IndexResponseTests
operator|.
name|assertDocWriteResponse
argument_list|(
name|expected
operator|.
name|getResponse
argument_list|()
argument_list|,
name|actual
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

