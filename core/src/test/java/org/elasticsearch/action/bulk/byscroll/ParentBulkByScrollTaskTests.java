begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk.byscroll
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|byscroll
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueMillis
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|atMost
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
DECL|class|ParentBulkByScrollTaskTests
specifier|public
class|class
name|ParentBulkByScrollTaskTests
extends|extends
name|ESTestCase
block|{
DECL|field|slices
specifier|private
name|int
name|slices
decl_stmt|;
DECL|field|task
specifier|private
name|ParentBulkByScrollTask
name|task
decl_stmt|;
annotation|@
name|Before
DECL|method|createTask
specifier|public
name|void
name|createTask
parameter_list|()
block|{
name|slices
operator|=
name|between
argument_list|(
literal|2
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|task
operator|=
operator|new
name|ParentBulkByScrollTask
argument_list|(
literal|1
argument_list|,
literal|"test_type"
argument_list|,
literal|"test_action"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
name|slices
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasicData
specifier|public
name|void
name|testBasicData
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|task
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test_type"
argument_list|,
name|task
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test_action"
argument_list|,
name|task
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|task
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testProgress
specifier|public
name|void
name|testProgress
parameter_list|()
block|{
name|long
name|total
init|=
literal|0
decl_stmt|;
name|long
name|created
init|=
literal|0
decl_stmt|;
name|long
name|updated
init|=
literal|0
decl_stmt|;
name|long
name|deleted
init|=
literal|0
decl_stmt|;
name|long
name|noops
init|=
literal|0
decl_stmt|;
name|long
name|versionConflicts
init|=
literal|0
decl_stmt|;
name|int
name|batches
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|BulkByScrollTask
operator|.
name|StatusOrException
argument_list|>
name|sliceStatuses
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|BulkByScrollTask
operator|.
name|StatusOrException
index|[
name|slices
index|]
argument_list|)
decl_stmt|;
name|BulkByScrollTask
operator|.
name|Status
name|status
init|=
name|task
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|total
argument_list|,
name|status
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|created
argument_list|,
name|status
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updated
argument_list|,
name|status
operator|.
name|getUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deleted
argument_list|,
name|status
operator|.
name|getDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|noops
argument_list|,
name|status
operator|.
name|getNoops
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionConflicts
argument_list|,
name|status
operator|.
name|getVersionConflicts
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|batches
argument_list|,
name|status
operator|.
name|getBatches
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sliceStatuses
argument_list|,
name|status
operator|.
name|getSliceStatuses
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|slice
init|=
literal|0
init|;
name|slice
operator|<
name|slices
condition|;
name|slice
operator|++
control|)
block|{
name|int
name|thisTotal
init|=
name|between
argument_list|(
literal|10
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|int
name|thisCreated
init|=
name|between
argument_list|(
literal|0
argument_list|,
name|thisTotal
argument_list|)
decl_stmt|;
name|int
name|thisUpdated
init|=
name|between
argument_list|(
literal|0
argument_list|,
name|thisTotal
operator|-
name|thisCreated
argument_list|)
decl_stmt|;
name|int
name|thisDeleted
init|=
name|between
argument_list|(
literal|0
argument_list|,
name|thisTotal
operator|-
name|thisCreated
operator|-
name|thisUpdated
argument_list|)
decl_stmt|;
name|int
name|thisNoops
init|=
name|thisTotal
operator|-
name|thisCreated
operator|-
name|thisUpdated
operator|-
name|thisDeleted
decl_stmt|;
name|int
name|thisVersionConflicts
init|=
name|between
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|int
name|thisBatches
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|BulkByScrollTask
operator|.
name|Status
name|sliceStatus
init|=
operator|new
name|BulkByScrollTask
operator|.
name|Status
argument_list|(
name|slice
argument_list|,
name|thisTotal
argument_list|,
name|thisUpdated
argument_list|,
name|thisCreated
argument_list|,
name|thisDeleted
argument_list|,
name|thisBatches
argument_list|,
name|thisVersionConflicts
argument_list|,
name|thisNoops
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|total
operator|+=
name|thisTotal
expr_stmt|;
name|created
operator|+=
name|thisCreated
expr_stmt|;
name|updated
operator|+=
name|thisUpdated
expr_stmt|;
name|deleted
operator|+=
name|thisDeleted
expr_stmt|;
name|noops
operator|+=
name|thisNoops
expr_stmt|;
name|versionConflicts
operator|+=
name|thisVersionConflicts
expr_stmt|;
name|batches
operator|+=
name|thisBatches
expr_stmt|;
name|sliceStatuses
operator|.
name|set
argument_list|(
name|slice
argument_list|,
operator|new
name|BulkByScrollTask
operator|.
name|StatusOrException
argument_list|(
name|sliceStatus
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ActionListener
argument_list|<
name|BulkByScrollResponse
argument_list|>
name|listener
init|=
name|slice
operator|<
name|slices
operator|-
literal|1
condition|?
name|neverCalled
argument_list|()
else|:
name|mock
argument_list|(
name|ActionListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|task
operator|.
name|onSliceResponse
argument_list|(
name|listener
argument_list|,
name|slice
argument_list|,
operator|new
name|BulkByScrollResponse
argument_list|(
name|timeValueMillis
argument_list|(
literal|10
argument_list|)
argument_list|,
name|sliceStatus
argument_list|,
name|emptyList
argument_list|()
argument_list|,
name|emptyList
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|task
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|total
argument_list|,
name|status
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|created
argument_list|,
name|status
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updated
argument_list|,
name|status
operator|.
name|getUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deleted
argument_list|,
name|status
operator|.
name|getDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionConflicts
argument_list|,
name|status
operator|.
name|getVersionConflicts
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|batches
argument_list|,
name|status
operator|.
name|getBatches
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|noops
argument_list|,
name|status
operator|.
name|getNoops
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sliceStatuses
argument_list|,
name|status
operator|.
name|getSliceStatuses
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|slice
operator|==
name|slices
operator|-
literal|1
condition|)
block|{
comment|// The whole thing succeeded so we should have got the success
name|status
operator|=
name|captureResponse
argument_list|(
name|BulkByScrollResponse
operator|.
name|class
argument_list|,
name|listener
argument_list|)
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|total
argument_list|,
name|status
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|created
argument_list|,
name|status
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updated
argument_list|,
name|status
operator|.
name|getUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deleted
argument_list|,
name|status
operator|.
name|getDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionConflicts
argument_list|,
name|status
operator|.
name|getVersionConflicts
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|batches
argument_list|,
name|status
operator|.
name|getBatches
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|noops
argument_list|,
name|status
operator|.
name|getNoops
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sliceStatuses
argument_list|,
name|status
operator|.
name|getSliceStatuses
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|neverCalled
specifier|private
parameter_list|<
name|T
parameter_list|>
name|ActionListener
argument_list|<
name|T
argument_list|>
name|neverCalled
parameter_list|()
block|{
return|return
operator|new
name|ActionListener
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|T
name|response
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected no interactions but got ["
operator|+
name|response
operator|+
literal|"]"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected no interations but was received a failure"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|;
block|}
DECL|method|captureResponse
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|captureResponse
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|responseClass
parameter_list|,
name|ActionListener
argument_list|<
name|T
argument_list|>
name|listener
parameter_list|)
block|{
name|ArgumentCaptor
argument_list|<
name|Exception
argument_list|>
name|failure
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Rethrow any failures just so we get a nice exception if there were any. We don't expect any though.
name|verify
argument_list|(
name|listener
argument_list|,
name|atMost
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|onFailure
argument_list|(
name|failure
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|failure
operator|.
name|getAllValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|failure
operator|.
name|getValue
argument_list|()
argument_list|)
throw|;
block|}
name|ArgumentCaptor
argument_list|<
name|T
argument_list|>
name|response
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|responseClass
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|listener
argument_list|)
operator|.
name|onResponse
argument_list|(
name|response
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

