begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|TransportShardBulkAction
operator|.
name|ReplicaItemExecutionMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|WriteRequest
operator|.
name|RefreshPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|VersionConflictEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|TransportShardBulkAction
operator|.
name|replicaItemExecutionMode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
DECL|class|TransportShardBulkActionTests
specifier|public
class|class
name|TransportShardBulkActionTests
extends|extends
name|IndexShardTestCase
block|{
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|idxSettings
specifier|private
specifier|final
name|Settings
name|idxSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.version.created"
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|id
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|method|indexMetaData
specifier|private
name|IndexMetaData
name|indexMetaData
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"index"
argument_list|)
operator|.
name|putMapping
argument_list|(
literal|"type"
argument_list|,
literal|"{\"properties\":{\"foo\":{\"type\":\"text\",\"fields\":"
operator|+
literal|"{\"keyword\":{\"type\":\"keyword\",\"ignore_above\":256}}}}}"
argument_list|)
operator|.
name|settings
argument_list|(
name|idxSettings
argument_list|)
operator|.
name|primaryTerm
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|testShouldExecuteReplicaItem
specifier|public
name|void
name|testShouldExecuteReplicaItem
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Successful index request should be replicated
name|DocWriteRequest
name|writeRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
operator|.
name|source
argument_list|(
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|DocWriteResponse
name|response
init|=
operator|new
name|IndexResponse
argument_list|(
name|shardId
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|1
argument_list|,
literal|17
argument_list|,
literal|1
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|BulkItemRequest
name|request
init|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
name|writeRequest
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPrimaryResponse
argument_list|(
operator|new
name|BulkItemResponse
argument_list|(
literal|0
argument_list|,
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|INDEX
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|replicaItemExecutionMode
argument_list|(
name|request
argument_list|,
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|ReplicaItemExecutionMode
operator|.
name|NORMAL
argument_list|)
argument_list|)
expr_stmt|;
comment|// Failed index requests without sequence no should not be replicated
name|writeRequest
operator|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
operator|.
name|source
argument_list|(
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
name|writeRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPrimaryResponse
argument_list|(
operator|new
name|BulkItemResponse
argument_list|(
literal|0
argument_list|,
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|INDEX
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
operator|new
name|IllegalArgumentException
argument_list|(
literal|"i died"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|replicaItemExecutionMode
argument_list|(
name|request
argument_list|,
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|ReplicaItemExecutionMode
operator|.
name|NOOP
argument_list|)
argument_list|)
expr_stmt|;
comment|// Failed index requests with sequence no should be replicated
name|request
operator|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
name|writeRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPrimaryResponse
argument_list|(
operator|new
name|BulkItemResponse
argument_list|(
literal|0
argument_list|,
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|INDEX
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
operator|new
name|IllegalArgumentException
argument_list|(
literal|"i died after sequence no was generated"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|replicaItemExecutionMode
argument_list|(
name|request
argument_list|,
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|ReplicaItemExecutionMode
operator|.
name|FAILURE
argument_list|)
argument_list|)
expr_stmt|;
comment|// NOOP requests should not be replicated
name|writeRequest
operator|=
operator|new
name|UpdateRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|response
operator|=
operator|new
name|UpdateResponse
argument_list|(
name|shardId
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|1
argument_list|,
name|DocWriteResponse
operator|.
name|Result
operator|.
name|NOOP
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
name|writeRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPrimaryResponse
argument_list|(
operator|new
name|BulkItemResponse
argument_list|(
literal|0
argument_list|,
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|UPDATE
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|replicaItemExecutionMode
argument_list|(
name|request
argument_list|,
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|ReplicaItemExecutionMode
operator|.
name|NOOP
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExecuteBulkIndexRequest
specifier|public
name|void
name|testExecuteBulkIndexRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexMetaData
name|metaData
init|=
name|indexMetaData
argument_list|()
decl_stmt|;
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|BulkItemRequest
index|[]
name|items
init|=
operator|new
name|BulkItemRequest
index|[
literal|1
index|]
decl_stmt|;
name|boolean
name|create
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|DocWriteRequest
name|writeRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
operator|.
name|source
argument_list|(
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|create
argument_list|(
name|create
argument_list|)
decl_stmt|;
name|BulkItemRequest
name|primaryRequest
init|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
name|writeRequest
argument_list|)
decl_stmt|;
name|items
index|[
literal|0
index|]
operator|=
name|primaryRequest
expr_stmt|;
name|BulkShardRequest
name|bulkShardRequest
init|=
operator|new
name|BulkShardRequest
argument_list|(
name|shardId
argument_list|,
name|RefreshPolicy
operator|.
name|NONE
argument_list|,
name|items
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Location
name|location
init|=
operator|new
name|Translog
operator|.
name|Location
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|UpdateHelper
name|updateHelper
init|=
literal|null
decl_stmt|;
name|Translog
operator|.
name|Location
name|newLocation
init|=
name|TransportShardBulkAction
operator|.
name|executeBulkItemRequest
argument_list|(
name|metaData
argument_list|,
name|shard
argument_list|,
name|bulkShardRequest
argument_list|,
name|location
argument_list|,
literal|0
argument_list|,
name|updateHelper
argument_list|,
name|threadPool
operator|::
name|absoluteTimeInMillis
argument_list|,
operator|new
name|NoopMappingUpdatePerformer
argument_list|()
argument_list|)
decl_stmt|;
comment|// Translog should change, since there were no problems
name|assertThat
argument_list|(
name|newLocation
argument_list|,
name|not
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|BulkItemResponse
name|primaryResponse
init|=
name|bulkShardRequest
operator|.
name|items
argument_list|()
index|[
literal|0
index|]
operator|.
name|getPrimaryResponse
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getItemId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getOpType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|create
condition|?
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|CREATE
else|:
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|INDEX
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|primaryResponse
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that the document actually made it there
name|assertDocCount
argument_list|(
name|shard
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writeRequest
operator|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
operator|.
name|source
argument_list|(
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|create
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|primaryRequest
operator|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
name|writeRequest
argument_list|)
expr_stmt|;
name|items
index|[
literal|0
index|]
operator|=
name|primaryRequest
expr_stmt|;
name|bulkShardRequest
operator|=
operator|new
name|BulkShardRequest
argument_list|(
name|shardId
argument_list|,
name|RefreshPolicy
operator|.
name|NONE
argument_list|,
name|items
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Location
name|secondLocation
init|=
name|TransportShardBulkAction
operator|.
name|executeBulkItemRequest
argument_list|(
name|metaData
argument_list|,
name|shard
argument_list|,
name|bulkShardRequest
argument_list|,
name|newLocation
argument_list|,
literal|0
argument_list|,
name|updateHelper
argument_list|,
name|threadPool
operator|::
name|absoluteTimeInMillis
argument_list|,
operator|new
name|NoopMappingUpdatePerformer
argument_list|()
argument_list|)
decl_stmt|;
comment|// Translog should not change, since the document was not indexed due to a version conflict
name|assertThat
argument_list|(
name|secondLocation
argument_list|,
name|equalTo
argument_list|(
name|newLocation
argument_list|)
argument_list|)
expr_stmt|;
name|BulkItemRequest
name|replicaRequest
init|=
name|bulkShardRequest
operator|.
name|items
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|primaryResponse
operator|=
name|bulkShardRequest
operator|.
name|items
argument_list|()
index|[
literal|0
index|]
operator|.
name|getPrimaryResponse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getItemId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getOpType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should be failed since the document already exists
name|assertTrue
argument_list|(
name|primaryResponse
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|BulkItemResponse
operator|.
name|Failure
name|failure
init|=
name|primaryResponse
operator|.
name|getFailure
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"version conflict, document already exists (current version [1])"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|CONFLICT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|replicaRequest
argument_list|,
name|equalTo
argument_list|(
name|primaryRequest
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert that the document count is still 1
name|assertDocCount
argument_list|(
name|shard
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testExecuteBulkIndexRequestWithRejection
specifier|public
name|void
name|testExecuteBulkIndexRequestWithRejection
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexMetaData
name|metaData
init|=
name|indexMetaData
argument_list|()
decl_stmt|;
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|BulkItemRequest
index|[]
name|items
init|=
operator|new
name|BulkItemRequest
index|[
literal|1
index|]
decl_stmt|;
name|DocWriteRequest
name|writeRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
operator|.
name|source
argument_list|(
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|items
index|[
literal|0
index|]
operator|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
name|writeRequest
argument_list|)
expr_stmt|;
name|BulkShardRequest
name|bulkShardRequest
init|=
operator|new
name|BulkShardRequest
argument_list|(
name|shardId
argument_list|,
name|RefreshPolicy
operator|.
name|NONE
argument_list|,
name|items
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Location
name|location
init|=
operator|new
name|Translog
operator|.
name|Location
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|UpdateHelper
name|updateHelper
init|=
literal|null
decl_stmt|;
comment|// Pretend the mappings haven't made it to the node yet, and throw  a rejection
name|Exception
name|err
init|=
operator|new
name|ReplicationOperation
operator|.
name|RetryOnPrimaryException
argument_list|(
name|shardId
argument_list|,
literal|"rejection"
argument_list|)
decl_stmt|;
try|try
block|{
name|TransportShardBulkAction
operator|.
name|executeBulkItemRequest
argument_list|(
name|metaData
argument_list|,
name|shard
argument_list|,
name|bulkShardRequest
argument_list|,
name|location
argument_list|,
literal|0
argument_list|,
name|updateHelper
argument_list|,
name|threadPool
operator|::
name|absoluteTimeInMillis
argument_list|,
operator|new
name|ThrowingMappingUpdatePerformer
argument_list|(
name|err
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown a retry exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicationOperation
operator|.
name|RetryOnPrimaryException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|equalTo
argument_list|(
name|err
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testExecuteBulkIndexRequestWithConflictingMappings
specifier|public
name|void
name|testExecuteBulkIndexRequestWithConflictingMappings
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexMetaData
name|metaData
init|=
name|indexMetaData
argument_list|()
decl_stmt|;
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|BulkItemRequest
index|[]
name|items
init|=
operator|new
name|BulkItemRequest
index|[
literal|1
index|]
decl_stmt|;
name|DocWriteRequest
name|writeRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
operator|.
name|source
argument_list|(
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|items
index|[
literal|0
index|]
operator|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
name|writeRequest
argument_list|)
expr_stmt|;
name|BulkShardRequest
name|bulkShardRequest
init|=
operator|new
name|BulkShardRequest
argument_list|(
name|shardId
argument_list|,
name|RefreshPolicy
operator|.
name|NONE
argument_list|,
name|items
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Location
name|location
init|=
operator|new
name|Translog
operator|.
name|Location
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|UpdateHelper
name|updateHelper
init|=
literal|null
decl_stmt|;
comment|// Return a mapping conflict (IAE) when trying to update the mapping
name|Exception
name|err
init|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"mapping conflict"
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Location
name|newLocation
init|=
name|TransportShardBulkAction
operator|.
name|executeBulkItemRequest
argument_list|(
name|metaData
argument_list|,
name|shard
argument_list|,
name|bulkShardRequest
argument_list|,
name|location
argument_list|,
literal|0
argument_list|,
name|updateHelper
argument_list|,
name|threadPool
operator|::
name|absoluteTimeInMillis
argument_list|,
operator|new
name|ThrowingMappingUpdatePerformer
argument_list|(
name|err
argument_list|)
argument_list|)
decl_stmt|;
comment|// Translog shouldn't change, as there were conflicting mappings
name|assertThat
argument_list|(
name|newLocation
argument_list|,
name|equalTo
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|BulkItemResponse
name|primaryResponse
init|=
name|bulkShardRequest
operator|.
name|items
argument_list|()
index|[
literal|0
index|]
operator|.
name|getPrimaryResponse
argument_list|()
decl_stmt|;
comment|// Since this was not a conflict failure, the primary response
comment|// should be filled out with the failure information
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getItemId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getOpType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|INDEX
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|primaryResponse
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getFailureMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"mapping conflict"
argument_list|)
argument_list|)
expr_stmt|;
name|BulkItemResponse
operator|.
name|Failure
name|failure
init|=
name|primaryResponse
operator|.
name|getFailure
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getCause
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|err
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|BAD_REQUEST
argument_list|)
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testExecuteBulkDeleteRequest
specifier|public
name|void
name|testExecuteBulkDeleteRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexMetaData
name|metaData
init|=
name|indexMetaData
argument_list|()
decl_stmt|;
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|BulkItemRequest
index|[]
name|items
init|=
operator|new
name|BulkItemRequest
index|[
literal|1
index|]
decl_stmt|;
name|DocWriteRequest
name|writeRequest
init|=
operator|new
name|DeleteRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|items
index|[
literal|0
index|]
operator|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
name|writeRequest
argument_list|)
expr_stmt|;
name|BulkShardRequest
name|bulkShardRequest
init|=
operator|new
name|BulkShardRequest
argument_list|(
name|shardId
argument_list|,
name|RefreshPolicy
operator|.
name|NONE
argument_list|,
name|items
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Location
name|location
init|=
operator|new
name|Translog
operator|.
name|Location
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|UpdateHelper
name|updateHelper
init|=
literal|null
decl_stmt|;
name|Translog
operator|.
name|Location
name|newLocation
init|=
name|TransportShardBulkAction
operator|.
name|executeBulkItemRequest
argument_list|(
name|metaData
argument_list|,
name|shard
argument_list|,
name|bulkShardRequest
argument_list|,
name|location
argument_list|,
literal|0
argument_list|,
name|updateHelper
argument_list|,
name|threadPool
operator|::
name|absoluteTimeInMillis
argument_list|,
operator|new
name|NoopMappingUpdatePerformer
argument_list|()
argument_list|)
decl_stmt|;
comment|// Translog changes, even though the document didn't exist
name|assertThat
argument_list|(
name|newLocation
argument_list|,
name|not
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|BulkItemRequest
name|replicaRequest
init|=
name|bulkShardRequest
operator|.
name|items
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|DocWriteRequest
name|replicaDeleteRequest
init|=
name|replicaRequest
operator|.
name|request
argument_list|()
decl_stmt|;
name|BulkItemResponse
name|primaryResponse
init|=
name|replicaRequest
operator|.
name|getPrimaryResponse
argument_list|()
decl_stmt|;
name|DeleteResponse
name|response
init|=
name|primaryResponse
operator|.
name|getResponse
argument_list|()
decl_stmt|;
comment|// Any version can be matched on replica
name|assertThat
argument_list|(
name|replicaDeleteRequest
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|replicaDeleteRequest
operator|.
name|versionType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|VersionType
operator|.
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getItemId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getOpType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|DELETE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|primaryResponse
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getResult
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|DocWriteResponse
operator|.
name|Result
operator|.
name|NOT_FOUND
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getShardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getSeqNo
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|forcedRefresh
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now do the same after indexing the document, it should now find and delete the document
name|indexDoc
argument_list|(
name|shard
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|"{\"foo\": \"bar\"}"
argument_list|)
expr_stmt|;
name|writeRequest
operator|=
operator|new
name|DeleteRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|items
index|[
literal|0
index|]
operator|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
name|writeRequest
argument_list|)
expr_stmt|;
name|bulkShardRequest
operator|=
operator|new
name|BulkShardRequest
argument_list|(
name|shardId
argument_list|,
name|RefreshPolicy
operator|.
name|NONE
argument_list|,
name|items
argument_list|)
expr_stmt|;
name|location
operator|=
name|newLocation
expr_stmt|;
name|newLocation
operator|=
name|TransportShardBulkAction
operator|.
name|executeBulkItemRequest
argument_list|(
name|metaData
argument_list|,
name|shard
argument_list|,
name|bulkShardRequest
argument_list|,
name|location
argument_list|,
literal|0
argument_list|,
name|updateHelper
argument_list|,
name|threadPool
operator|::
name|absoluteTimeInMillis
argument_list|,
operator|new
name|NoopMappingUpdatePerformer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Translog changes, because the document was deleted
name|assertThat
argument_list|(
name|newLocation
argument_list|,
name|not
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|replicaRequest
operator|=
name|bulkShardRequest
operator|.
name|items
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
name|replicaDeleteRequest
operator|=
name|replicaRequest
operator|.
name|request
argument_list|()
expr_stmt|;
name|primaryResponse
operator|=
name|replicaRequest
operator|.
name|getPrimaryResponse
argument_list|()
expr_stmt|;
name|response
operator|=
name|primaryResponse
operator|.
name|getResponse
argument_list|()
expr_stmt|;
comment|// Any version can be matched on replica
name|assertThat
argument_list|(
name|replicaDeleteRequest
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|replicaDeleteRequest
operator|.
name|versionType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|VersionType
operator|.
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getItemId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getOpType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|DELETE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|primaryResponse
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getResult
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|DocWriteResponse
operator|.
name|Result
operator|.
name|DELETED
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getShardId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getSeqNo
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|forcedRefresh
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertDocCount
argument_list|(
name|shard
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoopUpdateReplicaRequest
specifier|public
name|void
name|testNoopUpdateReplicaRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|DocWriteRequest
name|writeRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
operator|.
name|source
argument_list|(
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
argument_list|,
literal|"field"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
name|BulkItemRequest
name|replicaRequest
init|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
name|writeRequest
argument_list|)
decl_stmt|;
name|DocWriteResponse
name|noopUpdateResponse
init|=
operator|new
name|UpdateResponse
argument_list|(
name|shardId
argument_list|,
literal|"index"
argument_list|,
literal|"id"
argument_list|,
literal|0
argument_list|,
name|DocWriteResponse
operator|.
name|Result
operator|.
name|NOOP
argument_list|)
decl_stmt|;
name|BulkItemResultHolder
name|noopResults
init|=
operator|new
name|BulkItemResultHolder
argument_list|(
name|noopUpdateResponse
argument_list|,
literal|null
argument_list|,
name|replicaRequest
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Location
name|location
init|=
operator|new
name|Translog
operator|.
name|Location
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|BulkItemRequest
index|[]
name|items
init|=
operator|new
name|BulkItemRequest
index|[
literal|0
index|]
decl_stmt|;
name|BulkShardRequest
name|bulkShardRequest
init|=
operator|new
name|BulkShardRequest
argument_list|(
name|shardId
argument_list|,
name|RefreshPolicy
operator|.
name|NONE
argument_list|,
name|items
argument_list|)
decl_stmt|;
name|BulkItemResponse
name|primaryResponse
init|=
name|TransportShardBulkAction
operator|.
name|createPrimaryResponse
argument_list|(
name|noopResults
argument_list|,
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|UPDATE
argument_list|,
name|bulkShardRequest
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Location
name|newLocation
init|=
name|TransportShardBulkAction
operator|.
name|calculateTranslogLocation
argument_list|(
name|location
argument_list|,
name|noopResults
argument_list|)
decl_stmt|;
comment|// Basically nothing changes in the request since it's a noop
name|assertThat
argument_list|(
name|newLocation
argument_list|,
name|equalTo
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getItemId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getOpType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|UPDATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getResponse
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|noopUpdateResponse
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getResponse
argument_list|()
operator|.
name|getResult
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|DocWriteResponse
operator|.
name|Result
operator|.
name|NOOP
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUpdateReplicaRequestWithFailure
specifier|public
name|void
name|testUpdateReplicaRequestWithFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|DocWriteRequest
name|writeRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
operator|.
name|source
argument_list|(
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
argument_list|,
literal|"field"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
name|BulkItemRequest
name|replicaRequest
init|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
name|writeRequest
argument_list|)
decl_stmt|;
name|Exception
name|err
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"I'm dead<(x.x)>"
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
operator|new
name|Engine
operator|.
name|IndexResult
argument_list|(
name|err
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|BulkItemResultHolder
name|failedResults
init|=
operator|new
name|BulkItemResultHolder
argument_list|(
literal|null
argument_list|,
name|indexResult
argument_list|,
name|replicaRequest
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Location
name|location
init|=
operator|new
name|Translog
operator|.
name|Location
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|BulkItemRequest
index|[]
name|items
init|=
operator|new
name|BulkItemRequest
index|[
literal|0
index|]
decl_stmt|;
name|BulkShardRequest
name|bulkShardRequest
init|=
operator|new
name|BulkShardRequest
argument_list|(
name|shardId
argument_list|,
name|RefreshPolicy
operator|.
name|NONE
argument_list|,
name|items
argument_list|)
decl_stmt|;
name|BulkItemResponse
name|primaryResponse
init|=
name|TransportShardBulkAction
operator|.
name|createPrimaryResponse
argument_list|(
name|failedResults
argument_list|,
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|UPDATE
argument_list|,
name|bulkShardRequest
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Location
name|newLocation
init|=
name|TransportShardBulkAction
operator|.
name|calculateTranslogLocation
argument_list|(
name|location
argument_list|,
name|failedResults
argument_list|)
decl_stmt|;
comment|// Since this was not a conflict failure, the primary response
comment|// should be filled out with the failure information
name|assertThat
argument_list|(
name|newLocation
argument_list|,
name|equalTo
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getItemId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getOpType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|INDEX
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|primaryResponse
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getFailureMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"I'm dead<(x.x)>"
argument_list|)
argument_list|)
expr_stmt|;
name|BulkItemResponse
operator|.
name|Failure
name|failure
init|=
name|primaryResponse
operator|.
name|getFailure
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getCause
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|err
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUpdateReplicaRequestWithConflictFailure
specifier|public
name|void
name|testUpdateReplicaRequestWithConflictFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|DocWriteRequest
name|writeRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
operator|.
name|source
argument_list|(
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
argument_list|,
literal|"field"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
name|BulkItemRequest
name|replicaRequest
init|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
name|writeRequest
argument_list|)
decl_stmt|;
name|Exception
name|err
init|=
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|"I'm conflicted<(;_;)>"
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
operator|new
name|Engine
operator|.
name|IndexResult
argument_list|(
name|err
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|BulkItemResultHolder
name|failedResults
init|=
operator|new
name|BulkItemResultHolder
argument_list|(
literal|null
argument_list|,
name|indexResult
argument_list|,
name|replicaRequest
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Location
name|location
init|=
operator|new
name|Translog
operator|.
name|Location
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|BulkItemRequest
index|[]
name|items
init|=
operator|new
name|BulkItemRequest
index|[
literal|0
index|]
decl_stmt|;
name|BulkShardRequest
name|bulkShardRequest
init|=
operator|new
name|BulkShardRequest
argument_list|(
name|shardId
argument_list|,
name|RefreshPolicy
operator|.
name|NONE
argument_list|,
name|items
argument_list|)
decl_stmt|;
name|BulkItemResponse
name|primaryResponse
init|=
name|TransportShardBulkAction
operator|.
name|createPrimaryResponse
argument_list|(
name|failedResults
argument_list|,
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|UPDATE
argument_list|,
name|bulkShardRequest
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Location
name|newLocation
init|=
name|TransportShardBulkAction
operator|.
name|calculateTranslogLocation
argument_list|(
name|location
argument_list|,
name|failedResults
argument_list|)
decl_stmt|;
comment|// Since this was not a conflict failure, the primary response
comment|// should be filled out with the failure information
name|assertThat
argument_list|(
name|newLocation
argument_list|,
name|equalTo
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getItemId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getOpType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|INDEX
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|primaryResponse
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getFailureMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"I'm conflicted<(;_;)>"
argument_list|)
argument_list|)
expr_stmt|;
name|BulkItemResponse
operator|.
name|Failure
name|failure
init|=
name|primaryResponse
operator|.
name|getFailure
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getCause
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|err
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|CONFLICT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUpdateReplicaRequestWithSuccess
specifier|public
name|void
name|testUpdateReplicaRequestWithSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|DocWriteRequest
name|writeRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
operator|.
name|source
argument_list|(
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
argument_list|,
literal|"field"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
name|BulkItemRequest
name|replicaRequest
init|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
name|writeRequest
argument_list|)
decl_stmt|;
name|boolean
name|created
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|Translog
operator|.
name|Location
name|resultLocation
init|=
operator|new
name|Translog
operator|.
name|Location
argument_list|(
literal|42
argument_list|,
literal|42
argument_list|,
literal|42
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
operator|new
name|FakeResult
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|created
argument_list|,
name|resultLocation
argument_list|)
decl_stmt|;
name|DocWriteResponse
name|indexResponse
init|=
operator|new
name|IndexResponse
argument_list|(
name|shardId
argument_list|,
literal|"index"
argument_list|,
literal|"id"
argument_list|,
literal|1
argument_list|,
literal|17
argument_list|,
literal|1
argument_list|,
name|created
argument_list|)
decl_stmt|;
name|BulkItemResultHolder
name|goodResults
init|=
operator|new
name|BulkItemResultHolder
argument_list|(
name|indexResponse
argument_list|,
name|indexResult
argument_list|,
name|replicaRequest
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Location
name|originalLocation
init|=
operator|new
name|Translog
operator|.
name|Location
argument_list|(
literal|21
argument_list|,
literal|21
argument_list|,
literal|21
argument_list|)
decl_stmt|;
name|BulkItemRequest
index|[]
name|items
init|=
operator|new
name|BulkItemRequest
index|[
literal|0
index|]
decl_stmt|;
name|BulkShardRequest
name|bulkShardRequest
init|=
operator|new
name|BulkShardRequest
argument_list|(
name|shardId
argument_list|,
name|RefreshPolicy
operator|.
name|NONE
argument_list|,
name|items
argument_list|)
decl_stmt|;
name|BulkItemResponse
name|primaryResponse
init|=
name|TransportShardBulkAction
operator|.
name|createPrimaryResponse
argument_list|(
name|goodResults
argument_list|,
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|INDEX
argument_list|,
name|bulkShardRequest
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Location
name|newLocation
init|=
name|TransportShardBulkAction
operator|.
name|calculateTranslogLocation
argument_list|(
name|originalLocation
argument_list|,
name|goodResults
argument_list|)
decl_stmt|;
comment|// Check that the translog is successfully advanced
name|assertThat
argument_list|(
name|newLocation
argument_list|,
name|equalTo
argument_list|(
name|resultLocation
argument_list|)
argument_list|)
expr_stmt|;
comment|// Since this was not a conflict failure, the primary response
comment|// should be filled out with the failure information
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getItemId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaryResponse
operator|.
name|getOpType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|INDEX
argument_list|)
argument_list|)
expr_stmt|;
name|DocWriteResponse
name|response
init|=
name|primaryResponse
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|status
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|created
condition|?
name|RestStatus
operator|.
name|CREATED
else|:
name|RestStatus
operator|.
name|OK
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCalculateTranslogLocation
specifier|public
name|void
name|testCalculateTranslogLocation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Translog
operator|.
name|Location
name|original
init|=
operator|new
name|Translog
operator|.
name|Location
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DocWriteRequest
name|writeRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
operator|.
name|source
argument_list|(
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
argument_list|,
literal|"field"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
name|BulkItemRequest
name|replicaRequest
init|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
name|writeRequest
argument_list|)
decl_stmt|;
name|BulkItemResultHolder
name|results
init|=
operator|new
name|BulkItemResultHolder
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|replicaRequest
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|TransportShardBulkAction
operator|.
name|calculateTranslogLocation
argument_list|(
name|original
argument_list|,
name|results
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|created
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|DocWriteResponse
name|indexResponse
init|=
operator|new
name|IndexResponse
argument_list|(
name|shardId
argument_list|,
literal|"index"
argument_list|,
literal|"id"
argument_list|,
literal|1
argument_list|,
literal|17
argument_list|,
literal|1
argument_list|,
name|created
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Location
name|newLocation
init|=
operator|new
name|Translog
operator|.
name|Location
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|long
name|version
init|=
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
specifier|final
name|long
name|seqNo
init|=
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
specifier|final
name|long
name|primaryTerm
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
operator|new
name|IndexResultWithLocation
argument_list|(
name|version
argument_list|,
name|seqNo
argument_list|,
name|primaryTerm
argument_list|,
name|created
argument_list|,
name|newLocation
argument_list|)
decl_stmt|;
name|results
operator|=
operator|new
name|BulkItemResultHolder
argument_list|(
name|indexResponse
argument_list|,
name|indexResult
argument_list|,
name|replicaRequest
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TransportShardBulkAction
operator|.
name|calculateTranslogLocation
argument_list|(
name|original
argument_list|,
name|results
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoOpReplicationOnPrimaryDocumentFailure
specifier|public
name|void
name|testNoOpReplicationOnPrimaryDocumentFailure
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|IndexShard
name|shard
init|=
name|spy
argument_list|(
name|newStartedShard
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|BulkItemRequest
name|itemRequest
init|=
operator|new
name|BulkItemRequest
argument_list|(
literal|0
argument_list|,
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|source
argument_list|(
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|failureMessage
init|=
literal|"simulated primary failure"
decl_stmt|;
name|itemRequest
operator|.
name|setPrimaryResponse
argument_list|(
operator|new
name|BulkItemResponse
argument_list|(
literal|0
argument_list|,
name|randomFrom
argument_list|(
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|CREATE
argument_list|,
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|DELETE
argument_list|,
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|INDEX
argument_list|)
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|IOException
argument_list|(
name|failureMessage
argument_list|)
argument_list|,
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|BulkItemRequest
index|[]
name|itemRequests
init|=
operator|new
name|BulkItemRequest
index|[
literal|1
index|]
decl_stmt|;
name|itemRequests
index|[
literal|0
index|]
operator|=
name|itemRequest
expr_stmt|;
name|BulkShardRequest
name|bulkShardRequest
init|=
operator|new
name|BulkShardRequest
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
argument_list|,
name|RefreshPolicy
operator|.
name|NONE
argument_list|,
name|itemRequests
argument_list|)
decl_stmt|;
name|bulkShardRequest
operator|.
name|primaryTerm
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|shard
operator|.
name|getPrimaryTerm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TransportShardBulkAction
operator|.
name|performOnReplica
argument_list|(
name|bulkShardRequest
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Engine
operator|.
name|NoOp
argument_list|>
name|noOp
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Engine
operator|.
name|NoOp
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|shard
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|markSeqNoAsNoOp
argument_list|(
name|noOp
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Engine
operator|.
name|NoOp
name|noOpValue
init|=
name|noOp
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|noOpValue
operator|.
name|seqNo
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|noOpValue
operator|.
name|primaryTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|bulkShardRequest
operator|.
name|primaryTerm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|noOpValue
operator|.
name|reason
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|failureMessage
argument_list|)
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testMappingUpdateParsesCorrectNumberOfTimes
specifier|public
name|void
name|testMappingUpdateParsesCorrectNumberOfTimes
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexMetaData
name|metaData
init|=
name|indexMetaData
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> metadata.getIndex(): {}"
argument_list|,
name|metaData
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|IndexShard
name|shard
init|=
name|spy
argument_list|(
name|newStartedShard
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
operator|.
name|source
argument_list|(
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|updateCalled
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|verifyCalled
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TransportShardBulkAction
operator|.
name|executeIndexRequestOnPrimary
argument_list|(
name|request
argument_list|,
name|shard
argument_list|,
operator|new
name|MappingUpdatePerformer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|updateMappings
parameter_list|(
name|Mapping
name|update
parameter_list|,
name|ShardId
name|shardId
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
comment|// There should indeed be a mapping update
name|assertNotNull
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|updateCalled
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verifyMappings
parameter_list|(
name|Mapping
name|update
parameter_list|,
name|ShardId
name|shardId
parameter_list|)
throws|throws
name|Exception
block|{
comment|// No-op, will be called
name|logger
operator|.
name|info
argument_list|(
literal|"--> verifying mappings noop"
argument_list|)
expr_stmt|;
name|verifyCalled
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"mappings were \"updated\" once"
argument_list|,
name|updateCalled
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"mappings were \"verified\" once"
argument_list|,
name|verifyCalled
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that the shard "prepared" the operation twice
name|verify
argument_list|(
name|shard
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|prepareIndexOnPrimary
argument_list|(
name|any
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update the mapping, so the next mapping updater doesn't do anything
specifier|final
name|MapperService
name|mapperService
init|=
name|shard
operator|.
name|mapperService
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> mapperService.index(): {}"
argument_list|,
name|mapperService
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
name|mapperService
operator|.
name|updateMapping
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
name|TransportShardBulkAction
operator|.
name|executeIndexRequestOnPrimary
argument_list|(
name|request
argument_list|,
name|shard
argument_list|,
operator|new
name|MappingUpdatePerformer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|updateMappings
parameter_list|(
name|Mapping
name|update
parameter_list|,
name|ShardId
name|shardId
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|fail
argument_list|(
literal|"should not have had to update the mappings"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verifyMappings
parameter_list|(
name|Mapping
name|update
parameter_list|,
name|ShardId
name|shardId
parameter_list|)
throws|throws
name|Exception
block|{
name|fail
argument_list|(
literal|"should not have had to update the mappings"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Verify that the shard "prepared" the operation only once (2 for previous invocations plus
comment|// 1 for this execution)
name|verify
argument_list|(
name|shard
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|prepareIndexOnPrimary
argument_list|(
name|any
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|class|IndexResultWithLocation
specifier|public
class|class
name|IndexResultWithLocation
extends|extends
name|Engine
operator|.
name|IndexResult
block|{
DECL|field|location
specifier|private
specifier|final
name|Translog
operator|.
name|Location
name|location
decl_stmt|;
DECL|method|IndexResultWithLocation
specifier|public
name|IndexResultWithLocation
parameter_list|(
name|long
name|version
parameter_list|,
name|long
name|seqNo
parameter_list|,
name|long
name|primaryTerm
parameter_list|,
name|boolean
name|created
parameter_list|,
name|Translog
operator|.
name|Location
name|newLocation
parameter_list|)
block|{
name|super
argument_list|(
name|version
argument_list|,
name|seqNo
argument_list|,
name|created
argument_list|)
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|newLocation
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTranslogLocation
specifier|public
name|Translog
operator|.
name|Location
name|getTranslogLocation
parameter_list|()
block|{
return|return
name|this
operator|.
name|location
return|;
block|}
block|}
DECL|method|testPrepareIndexOpOnReplica
specifier|public
name|void
name|testPrepareIndexOpOnReplica
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexMetaData
name|metaData
init|=
name|indexMetaData
argument_list|()
decl_stmt|;
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|DocWriteResponse
name|primaryResponse
init|=
operator|new
name|IndexResponse
argument_list|(
name|shardId
argument_list|,
literal|"index"
argument_list|,
literal|"id"
argument_list|,
literal|17
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|)
operator|.
name|source
argument_list|(
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
argument_list|,
literal|"field"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|op
init|=
name|TransportShardBulkAction
operator|.
name|prepareIndexOperationOnReplica
argument_list|(
name|primaryResponse
argument_list|,
name|request
argument_list|,
name|shard
operator|.
name|getPrimaryTerm
argument_list|()
argument_list|,
name|shard
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|op
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|primaryResponse
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|op
operator|.
name|seqNo
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|primaryResponse
operator|.
name|getSeqNo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|op
operator|.
name|versionType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|op
operator|.
name|primaryTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shard
operator|.
name|getPrimaryTerm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
comment|/**      * Fake IndexResult that has a settable translog location      */
DECL|class|FakeResult
specifier|private
specifier|static
class|class
name|FakeResult
extends|extends
name|Engine
operator|.
name|IndexResult
block|{
DECL|field|location
specifier|private
specifier|final
name|Translog
operator|.
name|Location
name|location
decl_stmt|;
DECL|method|FakeResult
specifier|protected
name|FakeResult
parameter_list|(
name|long
name|version
parameter_list|,
name|long
name|seqNo
parameter_list|,
name|boolean
name|created
parameter_list|,
name|Translog
operator|.
name|Location
name|location
parameter_list|)
block|{
name|super
argument_list|(
name|version
argument_list|,
name|seqNo
argument_list|,
name|created
argument_list|)
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTranslogLocation
specifier|public
name|Translog
operator|.
name|Location
name|getTranslogLocation
parameter_list|()
block|{
return|return
name|this
operator|.
name|location
return|;
block|}
block|}
comment|/** Doesn't perform any mapping updates */
DECL|class|NoopMappingUpdatePerformer
specifier|public
specifier|static
class|class
name|NoopMappingUpdatePerformer
implements|implements
name|MappingUpdatePerformer
block|{
DECL|method|updateMappings
specifier|public
name|void
name|updateMappings
parameter_list|(
name|Mapping
name|update
parameter_list|,
name|ShardId
name|shardId
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{         }
DECL|method|verifyMappings
specifier|public
name|void
name|verifyMappings
parameter_list|(
name|Mapping
name|update
parameter_list|,
name|ShardId
name|shardId
parameter_list|)
throws|throws
name|Exception
block|{         }
block|}
comment|/** Always throw the given exception */
DECL|class|ThrowingMappingUpdatePerformer
specifier|private
class|class
name|ThrowingMappingUpdatePerformer
implements|implements
name|MappingUpdatePerformer
block|{
DECL|field|e
specifier|private
specifier|final
name|Exception
name|e
decl_stmt|;
DECL|method|ThrowingMappingUpdatePerformer
name|ThrowingMappingUpdatePerformer
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|e
operator|=
name|e
expr_stmt|;
block|}
DECL|method|updateMappings
specifier|public
name|void
name|updateMappings
parameter_list|(
name|Mapping
name|update
parameter_list|,
name|ShardId
name|shardId
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
name|e
throw|;
block|}
DECL|method|verifyMappings
specifier|public
name|void
name|verifyMappings
parameter_list|(
name|Mapping
name|update
parameter_list|,
name|ShardId
name|shardId
parameter_list|)
throws|throws
name|Exception
block|{
name|fail
argument_list|(
literal|"should not have gotten to this point"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Always throw the given exception */
DECL|class|ThrowingVerifyingMappingUpdatePerformer
specifier|private
class|class
name|ThrowingVerifyingMappingUpdatePerformer
implements|implements
name|MappingUpdatePerformer
block|{
DECL|field|e
specifier|private
specifier|final
name|Exception
name|e
decl_stmt|;
DECL|method|ThrowingVerifyingMappingUpdatePerformer
name|ThrowingVerifyingMappingUpdatePerformer
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|e
operator|=
name|e
expr_stmt|;
block|}
DECL|method|updateMappings
specifier|public
name|void
name|updateMappings
parameter_list|(
name|Mapping
name|update
parameter_list|,
name|ShardId
name|shardId
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{         }
DECL|method|verifyMappings
specifier|public
name|void
name|verifyMappings
parameter_list|(
name|Mapping
name|update
parameter_list|,
name|ShardId
name|shardId
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

