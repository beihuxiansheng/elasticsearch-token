begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk.byscroll
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|byscroll
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|byscroll
operator|.
name|BulkByScrollParallelizationHelper
operator|.
name|sliceIntoSubRequests
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|RandomSearchRequestGenerator
operator|.
name|randomSearchRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|RandomSearchRequestGenerator
operator|.
name|randomSearchSourceBuilder
import|;
end_import

begin_class
DECL|class|BulkByScrollParallelizationHelperTests
specifier|public
class|class
name|BulkByScrollParallelizationHelperTests
extends|extends
name|ESTestCase
block|{
DECL|method|testSliceIntoSubRequests
specifier|public
name|void
name|testSliceIntoSubRequests
parameter_list|()
throws|throws
name|IOException
block|{
name|SearchRequest
name|searchRequest
init|=
name|randomSearchRequest
argument_list|(
parameter_list|()
lambda|->
name|randomSearchSourceBuilder
argument_list|(
parameter_list|()
lambda|->
literal|null
argument_list|,
parameter_list|()
lambda|->
literal|null
argument_list|,
parameter_list|()
lambda|->
literal|null
argument_list|,
parameter_list|()
lambda|->
name|emptyList
argument_list|()
argument_list|,
parameter_list|()
lambda|->
literal|null
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|searchRequest
operator|.
name|source
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Clear the slice builder if there is one set. We can't call sliceIntoSubRequests if it is.
name|searchRequest
operator|.
name|source
argument_list|()
operator|.
name|slice
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|int
name|times
init|=
name|between
argument_list|(
literal|2
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|String
name|field
init|=
name|randomBoolean
argument_list|()
condition|?
name|UidFieldMapper
operator|.
name|NAME
else|:
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|int
name|currentSliceId
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SearchRequest
name|slice
range|:
name|sliceIntoSubRequests
argument_list|(
name|searchRequest
argument_list|,
name|field
argument_list|,
name|times
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|field
argument_list|,
name|slice
operator|.
name|source
argument_list|()
operator|.
name|slice
argument_list|()
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentSliceId
argument_list|,
name|slice
operator|.
name|source
argument_list|()
operator|.
name|slice
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|times
argument_list|,
name|slice
operator|.
name|source
argument_list|()
operator|.
name|slice
argument_list|()
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
comment|// If you clear the slice then the slice should be the same request as the parent request
name|slice
operator|.
name|source
argument_list|()
operator|.
name|slice
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|searchRequest
operator|.
name|source
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Except that adding the slice might have added an empty builder
name|searchRequest
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|searchRequest
argument_list|,
name|slice
argument_list|)
expr_stmt|;
name|currentSliceId
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

