begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueMillis
import|;
end_import

begin_class
DECL|class|BackoffPolicyTests
specifier|public
class|class
name|BackoffPolicyTests
extends|extends
name|ESTestCase
block|{
DECL|method|testWrapBackoffPolicy
specifier|public
name|void
name|testWrapBackoffPolicy
parameter_list|()
block|{
name|TimeValue
name|timeValue
init|=
name|timeValueMillis
argument_list|(
name|between
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxNumberOfRetries
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|BackoffPolicy
name|policy
init|=
name|BackoffPolicy
operator|.
name|constantBackoff
argument_list|(
name|timeValue
argument_list|,
name|maxNumberOfRetries
argument_list|)
decl_stmt|;
name|AtomicInteger
name|retries
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|policy
operator|=
name|BackoffPolicy
operator|.
name|wrap
argument_list|(
name|policy
argument_list|,
name|retries
operator|::
name|getAndIncrement
argument_list|)
expr_stmt|;
name|int
name|expectedRetries
init|=
literal|0
decl_stmt|;
block|{
comment|// Fetching the iterator doesn't call the callback
name|Iterator
argument_list|<
name|TimeValue
argument_list|>
name|itr
init|=
name|policy
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedRetries
argument_list|,
name|retries
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// hasNext doesn't trigger the callback
name|assertEquals
argument_list|(
name|expectedRetries
argument_list|,
name|retries
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// next does
name|itr
operator|.
name|next
argument_list|()
expr_stmt|;
name|expectedRetries
operator|+=
literal|1
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRetries
argument_list|,
name|retries
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// next doesn't call the callback when there isn't a backoff available
name|expectThrows
argument_list|(
name|NoSuchElementException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRetries
argument_list|,
name|retries
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// The second iterator also calls the callback
name|Iterator
argument_list|<
name|TimeValue
argument_list|>
name|itr
init|=
name|policy
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|itr
operator|.
name|next
argument_list|()
expr_stmt|;
name|expectedRetries
operator|+=
literal|1
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRetries
argument_list|,
name|retries
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

