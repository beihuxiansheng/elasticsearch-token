begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_class
DECL|class|NotifyOnceListenerTests
specifier|public
class|class
name|NotifyOnceListenerTests
extends|extends
name|ESTestCase
block|{
DECL|method|testWhenSuccessCannotNotifyMultipleTimes
specifier|public
name|void
name|testWhenSuccessCannotNotifyMultipleTimes
parameter_list|()
block|{
name|AtomicReference
argument_list|<
name|String
argument_list|>
name|response
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|exception
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|NotifyOnceListener
argument_list|<
name|String
argument_list|>
name|listener
init|=
operator|new
name|NotifyOnceListener
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|innerOnResponse
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|response
operator|.
name|set
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|innerOnFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
literal|"wrong-response"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|RuntimeException
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|exception
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"response"
argument_list|,
name|response
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhenErrorCannotNotifyMultipleTimes
specifier|public
name|void
name|testWhenErrorCannotNotifyMultipleTimes
parameter_list|()
block|{
name|AtomicReference
argument_list|<
name|String
argument_list|>
name|response
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|exception
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|NotifyOnceListener
argument_list|<
name|String
argument_list|>
name|listener
init|=
operator|new
name|NotifyOnceListener
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|innerOnResponse
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|response
operator|.
name|set
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|innerOnFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|RuntimeException
name|expected
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|response
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|expected
argument_list|,
name|exception
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

