begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ClusterStateCreationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|ShardAllocationDecision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|ShardsAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDeciders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|gateway
operator|.
name|TestGatewayAllocator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|allocation
operator|.
name|TransportClusterAllocationExplainAction
operator|.
name|findShardToExplain
import|;
end_import

begin_comment
comment|/**  * Tests for the {@link TransportClusterAllocationExplainAction} class.  */
end_comment

begin_class
DECL|class|ClusterAllocationExplainActionTests
specifier|public
class|class
name|ClusterAllocationExplainActionTests
extends|extends
name|ESTestCase
block|{
DECL|field|NOOP_DECIDERS
specifier|private
specifier|static
specifier|final
name|AllocationDeciders
name|NOOP_DECIDERS
init|=
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|testInitializingOrRelocatingShardExplanation
specifier|public
name|void
name|testInitializingOrRelocatingShardExplanation
parameter_list|()
throws|throws
name|Exception
block|{
name|ShardRoutingState
name|shardRoutingState
init|=
name|randomFrom
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|ShardRoutingState
operator|.
name|RELOCATING
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"idx"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|shardRoutingState
argument_list|)
decl_stmt|;
name|ShardRouting
name|shard
init|=
name|clusterState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
name|RoutingAllocation
name|allocation
init|=
operator|new
name|RoutingAllocation
argument_list|(
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
argument_list|,
name|clusterState
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|ClusterAllocationExplanation
name|cae
init|=
name|TransportClusterAllocationExplainAction
operator|.
name|explainShard
argument_list|(
name|shard
argument_list|,
name|allocation
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
operator|new
name|TestGatewayAllocator
argument_list|()
argument_list|,
operator|new
name|ShardsAllocator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|allocate
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
comment|// no-op
block|}
annotation|@
name|Override
specifier|public
name|ShardAllocationDecision
name|decideShardAllocation
parameter_list|(
name|ShardRouting
name|shard
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
if|if
condition|(
name|shard
operator|.
name|initializing
argument_list|()
operator|||
name|shard
operator|.
name|relocating
argument_list|()
condition|)
block|{
return|return
name|ShardAllocationDecision
operator|.
name|NOT_TAKEN
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"cannot explain"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|cae
operator|.
name|getCurrentNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cae
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cae
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getAllocateDecision
argument_list|()
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cae
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getMoveDecision
argument_list|()
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|cae
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|String
name|explanation
decl_stmt|;
if|if
condition|(
name|shardRoutingState
operator|==
name|ShardRoutingState
operator|.
name|RELOCATING
condition|)
block|{
name|explanation
operator|=
literal|"the shard is in the process of relocating from node [] to node [], wait until "
operator|+
literal|"relocation has completed"
expr_stmt|;
block|}
else|else
block|{
name|explanation
operator|=
literal|"the shard is in the process of initializing on node [], "
operator|+
literal|"wait until initialization has completed"
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"{\"index\":\"idx\",\"shard\":0,\"primary\":true,\"current_state\":\""
operator|+
name|shardRoutingState
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|+
literal|"\",\"current_node\":"
operator|+
literal|"{\"id\":\""
operator|+
name|cae
operator|.
name|getCurrentNode
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|"\",\"name\":\""
operator|+
name|cae
operator|.
name|getCurrentNode
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"\",\"transport_address\":\""
operator|+
name|cae
operator|.
name|getCurrentNode
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|+
literal|"\"},\"explanation\":\""
operator|+
name|explanation
operator|+
literal|"\"}"
argument_list|,
name|builder
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFindAnyUnassignedShardToExplain
specifier|public
name|void
name|testFindAnyUnassignedShardToExplain
parameter_list|()
block|{
comment|// find unassigned primary
name|ClusterState
name|clusterState
init|=
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"idx"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
decl_stmt|;
name|ClusterAllocationExplainRequest
name|request
init|=
operator|new
name|ClusterAllocationExplainRequest
argument_list|()
decl_stmt|;
name|ShardRouting
name|shard
init|=
name|findShardToExplain
argument_list|(
name|request
argument_list|,
name|routingAllocation
argument_list|(
name|clusterState
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|clusterState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
argument_list|,
name|shard
argument_list|)
expr_stmt|;
comment|// find unassigned replica
name|clusterState
operator|=
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"idx"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|ClusterAllocationExplainRequest
argument_list|()
expr_stmt|;
name|shard
operator|=
name|findShardToExplain
argument_list|(
name|request
argument_list|,
name|routingAllocation
argument_list|(
name|clusterState
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clusterState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|replicaShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|shard
argument_list|)
expr_stmt|;
comment|// no unassigned shard to explain
specifier|final
name|ClusterState
name|allStartedClusterState
init|=
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"idx"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
decl_stmt|;
specifier|final
name|ClusterAllocationExplainRequest
name|anyUnassignedShardsRequest
init|=
operator|new
name|ClusterAllocationExplainRequest
argument_list|()
decl_stmt|;
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|findShardToExplain
argument_list|(
name|anyUnassignedShardsRequest
argument_list|,
name|routingAllocation
argument_list|(
name|allStartedClusterState
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFindPrimaryShardToExplain
specifier|public
name|void
name|testFindPrimaryShardToExplain
parameter_list|()
block|{
name|ClusterState
name|clusterState
init|=
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"idx"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomFrom
argument_list|(
name|ShardRoutingState
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterAllocationExplainRequest
name|request
init|=
operator|new
name|ClusterAllocationExplainRequest
argument_list|(
literal|"idx"
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ShardRouting
name|shard
init|=
name|findShardToExplain
argument_list|(
name|request
argument_list|,
name|routingAllocation
argument_list|(
name|clusterState
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|clusterState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testFindAnyReplicaToExplain
specifier|public
name|void
name|testFindAnyReplicaToExplain
parameter_list|()
block|{
comment|// prefer unassigned replicas to started replicas
name|ClusterState
name|clusterState
init|=
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"idx"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
decl_stmt|;
name|ClusterAllocationExplainRequest
name|request
init|=
operator|new
name|ClusterAllocationExplainRequest
argument_list|(
literal|"idx"
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ShardRouting
name|shard
init|=
name|findShardToExplain
argument_list|(
name|request
argument_list|,
name|routingAllocation
argument_list|(
name|clusterState
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|clusterState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|replicaShards
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|ShardRouting
operator|::
name|unassigned
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|shard
argument_list|)
expr_stmt|;
comment|// prefer started replicas to initializing/relocating replicas
name|clusterState
operator|=
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"idx"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|randomFrom
argument_list|(
name|ShardRoutingState
operator|.
name|RELOCATING
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|ClusterAllocationExplainRequest
argument_list|(
literal|"idx"
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|shard
operator|=
name|findShardToExplain
argument_list|(
name|request
argument_list|,
name|routingAllocation
argument_list|(
name|clusterState
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clusterState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|replicaShards
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|ShardRouting
operator|::
name|started
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testFindShardAssignedToNode
specifier|public
name|void
name|testFindShardAssignedToNode
parameter_list|()
block|{
comment|// find shard with given node
specifier|final
name|boolean
name|primary
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|ShardRoutingState
index|[]
name|replicaStates
init|=
operator|new
name|ShardRoutingState
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|primary
operator|==
literal|false
condition|)
block|{
name|replicaStates
operator|=
operator|new
name|ShardRoutingState
index|[]
block|{
name|ShardRoutingState
operator|.
name|STARTED
block|}
expr_stmt|;
block|}
name|ClusterState
name|clusterState
init|=
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"idx"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|replicaStates
argument_list|)
decl_stmt|;
name|ShardRouting
name|shardToExplain
init|=
name|primary
condition|?
name|clusterState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
else|:
name|clusterState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|replicaShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ClusterAllocationExplainRequest
name|request
init|=
operator|new
name|ClusterAllocationExplainRequest
argument_list|(
literal|"idx"
argument_list|,
literal|0
argument_list|,
name|primary
argument_list|,
name|shardToExplain
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|RoutingAllocation
name|allocation
init|=
name|routingAllocation
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
name|ShardRouting
name|foundShard
init|=
name|findShardToExplain
argument_list|(
name|request
argument_list|,
name|allocation
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|shardToExplain
argument_list|,
name|foundShard
argument_list|)
expr_stmt|;
comment|// shard is not assigned to given node
name|String
name|explainNode
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RoutingNode
name|routingNode
range|:
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
control|)
block|{
if|if
condition|(
name|routingNode
operator|.
name|nodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|shardToExplain
operator|.
name|currentNodeId
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|explainNode
operator|=
name|routingNode
operator|.
name|nodeId
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
specifier|final
name|ClusterAllocationExplainRequest
name|failingRequest
init|=
operator|new
name|ClusterAllocationExplainRequest
argument_list|(
literal|"idx"
argument_list|,
literal|0
argument_list|,
name|primary
argument_list|,
name|explainNode
argument_list|)
decl_stmt|;
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|findShardToExplain
argument_list|(
name|failingRequest
argument_list|,
name|allocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|routingAllocation
specifier|private
specifier|static
name|RoutingAllocation
name|routingAllocation
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
return|return
operator|new
name|RoutingAllocation
argument_list|(
name|NOOP_DECIDERS
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
argument_list|,
name|clusterState
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

