begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.stats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|stats
operator|.
name|NodeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|stats
operator|.
name|NodesStatsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|os
operator|.
name|OsStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|)
DECL|class|ClusterStatsIT
specifier|public
class|class
name|ClusterStatsIT
extends|extends
name|ESIntegTestCase
block|{
DECL|method|assertCounts
specifier|private
name|void
name|assertCounts
parameter_list|(
name|ClusterStatsNodes
operator|.
name|Counts
name|counts
parameter_list|,
name|int
name|total
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|roles
parameter_list|)
block|{
name|assertThat
argument_list|(
name|counts
operator|.
name|getTotal
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|total
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|counts
operator|.
name|getRoles
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|roles
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForNodes
specifier|private
name|void
name|waitForNodes
parameter_list|(
name|int
name|numNodes
parameter_list|)
block|{
name|ClusterHealthResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|Requests
operator|.
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|waitForNodes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|numNodes
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|actionGet
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNodeCounts
specifier|public
name|void
name|testNodeCounts
parameter_list|()
block|{
name|int
name|total
init|=
literal|1
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expectedCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedCounts
operator|.
name|put
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|DATA
operator|.
name|getRoleName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedCounts
operator|.
name|put
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|MASTER
operator|.
name|getRoleName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedCounts
operator|.
name|put
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|INGEST
operator|.
name|getRoleName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedCounts
operator|.
name|put
argument_list|(
name|ClusterStatsNodes
operator|.
name|Counts
operator|.
name|COORDINATING_ONLY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|numNodes
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ClusterStatsResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareClusterStats
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertCounts
argument_list|(
name|response
operator|.
name|getNodesStats
argument_list|()
operator|.
name|getCounts
argument_list|()
argument_list|,
name|total
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNodes
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|isDataNode
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|isMasterNode
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|isIngestNode
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Node
operator|.
name|NODE_DATA_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|isDataNode
argument_list|)
operator|.
name|put
argument_list|(
name|Node
operator|.
name|NODE_MASTER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|isMasterNode
argument_list|)
operator|.
name|put
argument_list|(
name|Node
operator|.
name|NODE_INGEST_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|isIngestNode
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|total
operator|++
expr_stmt|;
name|waitForNodes
argument_list|(
name|total
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDataNode
condition|)
block|{
name|incrementCountForRole
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|DATA
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isMasterNode
condition|)
block|{
name|incrementCountForRole
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|MASTER
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isIngestNode
condition|)
block|{
name|incrementCountForRole
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|INGEST
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isDataNode
operator|&&
operator|!
name|isMasterNode
operator|&&
operator|!
name|isIngestNode
condition|)
block|{
name|incrementCountForRole
argument_list|(
name|ClusterStatsNodes
operator|.
name|Counts
operator|.
name|COORDINATING_ONLY
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareClusterStats
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertCounts
argument_list|(
name|response
operator|.
name|getNodesStats
argument_list|()
operator|.
name|getCounts
argument_list|()
argument_list|,
name|total
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|incrementCountForRole
specifier|private
specifier|static
name|void
name|incrementCountForRole
parameter_list|(
name|String
name|role
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|counts
parameter_list|)
block|{
name|Integer
name|count
init|=
name|counts
operator|.
name|get
argument_list|(
name|role
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|counts
operator|.
name|put
argument_list|(
name|role
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|counts
operator|.
name|put
argument_list|(
name|role
argument_list|,
operator|++
name|count
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertShardStats
specifier|private
name|void
name|assertShardStats
parameter_list|(
name|ClusterStatsIndices
operator|.
name|ShardStats
name|stats
parameter_list|,
name|int
name|indices
parameter_list|,
name|int
name|total
parameter_list|,
name|int
name|primaries
parameter_list|,
name|double
name|replicationFactor
parameter_list|)
block|{
name|assertThat
argument_list|(
name|stats
operator|.
name|getIndices
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|indices
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|total
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getPrimaries
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|primaries
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getReplication
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|replicationFactor
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndicesShardStats
specifier|public
name|void
name|testIndicesShardStats
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|ClusterStatsResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareClusterStats
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|setSettings
argument_list|(
literal|"number_of_shards"
argument_list|,
literal|2
argument_list|,
literal|"number_of_replicas"
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareClusterStats
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|indicesStats
operator|.
name|getDocs
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|indicesStats
operator|.
name|getIndexCount
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertShardStats
argument_list|(
name|response
operator|.
name|getIndicesStats
argument_list|()
operator|.
name|getShards
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
comment|// add another node, replicas should get assigned
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test1"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
literal|"f"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// make the doc visible
name|response
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareClusterStats
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|indicesStats
operator|.
name|getDocs
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertShardStats
argument_list|(
name|response
operator|.
name|getIndicesStats
argument_list|()
operator|.
name|getShards
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|prepareCreate
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|setSettings
argument_list|(
literal|"number_of_shards"
argument_list|,
literal|3
argument_list|,
literal|"number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareClusterStats
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|indicesStats
operator|.
name|getIndexCount
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertShardStats
argument_list|(
name|response
operator|.
name|getIndicesStats
argument_list|()
operator|.
name|getShards
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|7
argument_list|,
literal|5
argument_list|,
literal|2.0
operator|/
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndicesStats
argument_list|()
operator|.
name|getShards
argument_list|()
operator|.
name|getAvgIndexPrimaryShards
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|2.5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndicesStats
argument_list|()
operator|.
name|getShards
argument_list|()
operator|.
name|getMinIndexPrimaryShards
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndicesStats
argument_list|()
operator|.
name|getShards
argument_list|()
operator|.
name|getMaxIndexPrimaryShards
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndicesStats
argument_list|()
operator|.
name|getShards
argument_list|()
operator|.
name|getAvgIndexShards
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|3.5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndicesStats
argument_list|()
operator|.
name|getShards
argument_list|()
operator|.
name|getMinIndexShards
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndicesStats
argument_list|()
operator|.
name|getShards
argument_list|()
operator|.
name|getMaxIndexShards
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndicesStats
argument_list|()
operator|.
name|getShards
argument_list|()
operator|.
name|getAvgIndexReplication
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0.5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndicesStats
argument_list|()
operator|.
name|getShards
argument_list|()
operator|.
name|getMinIndexReplication
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndicesStats
argument_list|()
operator|.
name|getShards
argument_list|()
operator|.
name|getMaxIndexReplication
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testValuesSmokeScreen
specifier|public
name|void
name|testValuesSmokeScreen
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test1"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
literal|"f"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|ClusterStatsResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareClusterStats
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|msg
init|=
name|response
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|,
name|response
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|Matchers
operator|.
name|greaterThan
argument_list|(
literal|946681200000L
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1 Jan 2000
name|assertThat
argument_list|(
name|msg
argument_list|,
name|response
operator|.
name|indicesStats
operator|.
name|getStore
argument_list|()
operator|.
name|getSizeInBytes
argument_list|()
argument_list|,
name|Matchers
operator|.
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|,
name|response
operator|.
name|nodesStats
operator|.
name|getFs
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|Matchers
operator|.
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|,
name|response
operator|.
name|nodesStats
operator|.
name|getJvm
argument_list|()
operator|.
name|getVersions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|,
name|response
operator|.
name|nodesStats
operator|.
name|getVersions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|,
name|response
operator|.
name|nodesStats
operator|.
name|getVersions
argument_list|()
operator|.
name|contains
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|,
name|response
operator|.
name|nodesStats
operator|.
name|getPlugins
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|,
name|response
operator|.
name|nodesStats
operator|.
name|getProcess
argument_list|()
operator|.
name|count
argument_list|,
name|Matchers
operator|.
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// 0 happens when not supported on platform
name|assertThat
argument_list|(
name|msg
argument_list|,
name|response
operator|.
name|nodesStats
operator|.
name|getProcess
argument_list|()
operator|.
name|getAvgOpenFileDescriptors
argument_list|()
argument_list|,
name|Matchers
operator|.
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
comment|// these can be -1 if not supported on platform
name|assertThat
argument_list|(
name|msg
argument_list|,
name|response
operator|.
name|nodesStats
operator|.
name|getProcess
argument_list|()
operator|.
name|getMinOpenFileDescriptors
argument_list|()
argument_list|,
name|Matchers
operator|.
name|greaterThanOrEqualTo
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|,
name|response
operator|.
name|nodesStats
operator|.
name|getProcess
argument_list|()
operator|.
name|getMaxOpenFileDescriptors
argument_list|()
argument_list|,
name|Matchers
operator|.
name|greaterThanOrEqualTo
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|NodesStatsResponse
name|nodesStatsResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesStats
argument_list|()
operator|.
name|setOs
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|total
init|=
literal|0
decl_stmt|;
name|long
name|free
init|=
literal|0
decl_stmt|;
name|long
name|used
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NodeStats
name|nodeStats
range|:
name|nodesStatsResponse
operator|.
name|getNodes
argument_list|()
control|)
block|{
name|total
operator|+=
name|nodeStats
operator|.
name|getOs
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|free
operator|+=
name|nodeStats
operator|.
name|getOs
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getFree
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|used
operator|+=
name|nodeStats
operator|.
name|getOs
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|free
argument_list|,
name|response
operator|.
name|nodesStats
operator|.
name|getOs
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getFree
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|total
argument_list|,
name|response
operator|.
name|nodesStats
operator|.
name|getOs
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|used
argument_list|,
name|response
operator|.
name|nodesStats
operator|.
name|getOs
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|OsStats
operator|.
name|calculatePercentage
argument_list|(
name|used
argument_list|,
name|total
argument_list|)
argument_list|,
name|response
operator|.
name|nodesStats
operator|.
name|getOs
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getUsedPercent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|OsStats
operator|.
name|calculatePercentage
argument_list|(
name|free
argument_list|,
name|total
argument_list|)
argument_list|,
name|response
operator|.
name|nodesStats
operator|.
name|getOs
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getFreePercent
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAllocatedProcessors
specifier|public
name|void
name|testAllocatedProcessors
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start one node with 7 processors.
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|EsExecutors
operator|.
name|PROCESSORS_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|7
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|waitForNodes
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ClusterStatsResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareClusterStats
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodesStats
argument_list|()
operator|.
name|getOs
argument_list|()
operator|.
name|getAllocatedProcessors
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testClusterStatusWhenStateNotRecovered
specifier|public
name|void
name|testClusterStatusWhenStateNotRecovered
parameter_list|()
throws|throws
name|Exception
block|{
name|internalCluster
argument_list|()
operator|.
name|startMasterOnlyNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"gateway.recover_after_nodes"
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterStatsResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareClusterStats
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|RED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|internalCluster
argument_list|()
operator|.
name|startMasterOnlyNode
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|internalCluster
argument_list|()
operator|.
name|startDataOnlyNode
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
comment|// wait for the cluster status to settle
name|ensureGreen
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareClusterStats
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

