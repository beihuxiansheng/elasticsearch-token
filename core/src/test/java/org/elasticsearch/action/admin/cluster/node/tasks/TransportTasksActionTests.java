begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.node.tasks
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|FailedNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|TaskOperationFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|cancel
operator|.
name|CancelTasksRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|cancel
operator|.
name|CancelTasksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|list
operator|.
name|ListTasksRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|list
operator|.
name|ListTasksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|list
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|nodes
operator|.
name|BaseNodeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|nodes
operator|.
name|BaseNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|tasks
operator|.
name|BaseTasksRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|tasks
operator|.
name|BaseTasksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|tasks
operator|.
name|TransportTasksAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|tasks
operator|.
name|MockTaskManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
operator|.
name|newFuture
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|endsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_class
DECL|class|TransportTasksActionTests
specifier|public
class|class
name|TransportTasksActionTests
extends|extends
name|TaskManagerTestCase
block|{
DECL|class|NodeRequest
specifier|public
specifier|static
class|class
name|NodeRequest
extends|extends
name|BaseNodeRequest
block|{
DECL|field|requestName
specifier|protected
name|String
name|requestName
decl_stmt|;
DECL|field|enableTaskManager
specifier|private
name|boolean
name|enableTaskManager
decl_stmt|;
DECL|method|NodeRequest
specifier|public
name|NodeRequest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|NodeRequest
specifier|public
name|NodeRequest
parameter_list|(
name|NodesRequest
name|request
parameter_list|,
name|String
name|nodeId
parameter_list|)
block|{
name|super
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|requestName
operator|=
name|request
operator|.
name|requestName
expr_stmt|;
name|enableTaskManager
operator|=
name|request
operator|.
name|enableTaskManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|requestName
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|enableTaskManager
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|requestName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|enableTaskManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"CancellableNodeRequest["
operator|+
name|requestName
operator|+
literal|", "
operator|+
name|enableTaskManager
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|createTask
specifier|public
name|Task
name|createTask
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|action
parameter_list|,
name|TaskId
name|parentTaskId
parameter_list|)
block|{
if|if
condition|(
name|enableTaskManager
condition|)
block|{
return|return
name|super
operator|.
name|createTask
argument_list|(
name|id
argument_list|,
name|type
argument_list|,
name|action
argument_list|,
name|parentTaskId
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
DECL|class|NodesRequest
specifier|public
specifier|static
class|class
name|NodesRequest
extends|extends
name|BaseNodesRequest
argument_list|<
name|NodesRequest
argument_list|>
block|{
DECL|field|requestName
specifier|private
name|String
name|requestName
decl_stmt|;
DECL|field|enableTaskManager
specifier|private
name|boolean
name|enableTaskManager
decl_stmt|;
DECL|method|NodesRequest
name|NodesRequest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|NodesRequest
specifier|public
name|NodesRequest
parameter_list|(
name|String
name|requestName
parameter_list|,
name|String
modifier|...
name|nodesIds
parameter_list|)
block|{
name|this
argument_list|(
name|requestName
argument_list|,
literal|true
argument_list|,
name|nodesIds
argument_list|)
expr_stmt|;
block|}
DECL|method|NodesRequest
specifier|public
name|NodesRequest
parameter_list|(
name|String
name|requestName
parameter_list|,
name|boolean
name|enableTaskManager
parameter_list|,
name|String
modifier|...
name|nodesIds
parameter_list|)
block|{
name|super
argument_list|(
name|nodesIds
argument_list|)
expr_stmt|;
name|this
operator|.
name|requestName
operator|=
name|requestName
expr_stmt|;
name|this
operator|.
name|enableTaskManager
operator|=
name|enableTaskManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|requestName
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|enableTaskManager
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|requestName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|enableTaskManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"CancellableNodesRequest["
operator|+
name|requestName
operator|+
literal|", "
operator|+
name|enableTaskManager
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|createTask
specifier|public
name|Task
name|createTask
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|action
parameter_list|)
block|{
if|if
condition|(
name|enableTaskManager
condition|)
block|{
return|return
name|super
operator|.
name|createTask
argument_list|(
name|id
argument_list|,
name|type
argument_list|,
name|action
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
comment|/**      * Simulates node-based task that can be used to block node tasks so they are guaranteed to be registered by task manager      */
DECL|class|TestNodesAction
specifier|abstract
class|class
name|TestNodesAction
extends|extends
name|AbstractTestNodesAction
argument_list|<
name|NodesRequest
argument_list|,
name|NodeRequest
argument_list|>
block|{
DECL|method|TestNodesAction
name|TestNodesAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|actionName
parameter_list|,
name|ClusterName
name|clusterName
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TransportService
name|transportService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|actionName
argument_list|,
name|clusterName
argument_list|,
name|threadPool
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|,
name|NodesRequest
operator|::
operator|new
argument_list|,
name|NodeRequest
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newNodeRequest
specifier|protected
name|NodeRequest
name|newNodeRequest
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|NodesRequest
name|request
parameter_list|)
block|{
return|return
operator|new
name|NodeRequest
argument_list|(
name|request
argument_list|,
name|nodeId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newNodeResponse
specifier|protected
name|NodeResponse
name|newNodeResponse
parameter_list|()
block|{
return|return
operator|new
name|NodeResponse
argument_list|()
return|;
block|}
block|}
DECL|class|TestTaskResponse
specifier|static
class|class
name|TestTaskResponse
implements|implements
name|Writeable
argument_list|<
name|TestTaskResponse
argument_list|>
block|{
DECL|field|status
specifier|private
specifier|final
name|String
name|status
decl_stmt|;
DECL|method|TestTaskResponse
specifier|public
name|TestTaskResponse
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|status
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
DECL|method|TestTaskResponse
specifier|public
name|TestTaskResponse
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
DECL|method|getStatus
specifier|public
name|String
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|TestTaskResponse
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|TestTaskResponse
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestTasksRequest
specifier|static
class|class
name|TestTasksRequest
extends|extends
name|BaseTasksRequest
argument_list|<
name|TestTasksRequest
argument_list|>
block|{      }
DECL|class|TestTasksResponse
specifier|static
class|class
name|TestTasksResponse
extends|extends
name|BaseTasksResponse
block|{
DECL|field|tasks
specifier|private
name|List
argument_list|<
name|TestTaskResponse
argument_list|>
name|tasks
decl_stmt|;
DECL|method|TestTasksResponse
specifier|public
name|TestTasksResponse
parameter_list|()
block|{          }
DECL|method|TestTasksResponse
specifier|public
name|TestTasksResponse
parameter_list|(
name|List
argument_list|<
name|TestTaskResponse
argument_list|>
name|tasks
parameter_list|,
name|List
argument_list|<
name|TaskOperationFailure
argument_list|>
name|taskFailures
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|FailedNodeException
argument_list|>
name|nodeFailures
parameter_list|)
block|{
name|super
argument_list|(
name|taskFailures
argument_list|,
name|nodeFailures
argument_list|)
expr_stmt|;
name|this
operator|.
name|tasks
operator|=
name|tasks
operator|==
literal|null
condition|?
name|Collections
operator|.
name|emptyList
argument_list|()
else|:
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tasks
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|taskCount
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TestTaskResponse
argument_list|>
name|builder
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|taskCount
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|new
name|TestTaskResponse
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tasks
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TestTaskResponse
name|task
range|:
name|tasks
control|)
block|{
name|task
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Test class for testing task operations      */
DECL|class|TestTasksAction
specifier|static
specifier|abstract
class|class
name|TestTasksAction
extends|extends
name|TransportTasksAction
argument_list|<
name|Task
argument_list|,
name|TestTasksRequest
argument_list|,
name|TestTasksResponse
argument_list|,
name|TestTaskResponse
argument_list|>
block|{
DECL|method|TestTasksAction
specifier|protected
name|TestTasksAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|actionName
parameter_list|,
name|ClusterName
name|clusterName
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TransportService
name|transportService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|actionName
argument_list|,
name|clusterName
argument_list|,
name|threadPool
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|,
operator|new
name|ActionFilters
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
argument_list|,
operator|new
name|IndexNameExpressionResolver
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|TestTasksRequest
operator|::
operator|new
argument_list|,
name|TestTasksResponse
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|MANAGEMENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newResponse
specifier|protected
name|TestTasksResponse
name|newResponse
parameter_list|(
name|TestTasksRequest
name|request
parameter_list|,
name|List
argument_list|<
name|TestTaskResponse
argument_list|>
name|tasks
parameter_list|,
name|List
argument_list|<
name|TaskOperationFailure
argument_list|>
name|taskOperationFailures
parameter_list|,
name|List
argument_list|<
name|FailedNodeException
argument_list|>
name|failedNodeExceptions
parameter_list|)
block|{
return|return
operator|new
name|TestTasksResponse
argument_list|(
name|tasks
argument_list|,
name|taskOperationFailures
argument_list|,
name|failedNodeExceptions
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readTaskResponse
specifier|protected
name|TestTaskResponse
name|readTaskResponse
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|TestTaskResponse
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|accumulateExceptions
specifier|protected
name|boolean
name|accumulateExceptions
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|method|startBlockingTestNodesAction
specifier|private
name|ActionFuture
argument_list|<
name|NodesResponse
argument_list|>
name|startBlockingTestNodesAction
parameter_list|(
name|CountDownLatch
name|checkLatch
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|startBlockingTestNodesAction
argument_list|(
name|checkLatch
argument_list|,
operator|new
name|NodesRequest
argument_list|(
literal|"Test Request"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|startBlockingTestNodesAction
specifier|private
name|ActionFuture
argument_list|<
name|NodesResponse
argument_list|>
name|startBlockingTestNodesAction
parameter_list|(
name|CountDownLatch
name|checkLatch
parameter_list|,
name|NodesRequest
name|request
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|PlainActionFuture
argument_list|<
name|NodesResponse
argument_list|>
name|future
init|=
name|newFuture
argument_list|()
decl_stmt|;
name|startBlockingTestNodesAction
argument_list|(
name|checkLatch
argument_list|,
name|request
argument_list|,
name|future
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
DECL|method|startBlockingTestNodesAction
specifier|private
name|Task
name|startBlockingTestNodesAction
parameter_list|(
name|CountDownLatch
name|checkLatch
parameter_list|,
name|ActionListener
argument_list|<
name|NodesResponse
argument_list|>
name|listener
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|startBlockingTestNodesAction
argument_list|(
name|checkLatch
argument_list|,
operator|new
name|NodesRequest
argument_list|(
literal|"Test Request"
argument_list|)
argument_list|,
name|listener
argument_list|)
return|;
block|}
DECL|method|startBlockingTestNodesAction
specifier|private
name|Task
name|startBlockingTestNodesAction
parameter_list|(
name|CountDownLatch
name|checkLatch
parameter_list|,
name|NodesRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|NodesResponse
argument_list|>
name|listener
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|CountDownLatch
name|actionLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|nodesCount
argument_list|)
decl_stmt|;
name|TestNodesAction
index|[]
name|actions
init|=
operator|new
name|TestNodesAction
index|[
name|nodesCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|node
init|=
name|i
decl_stmt|;
name|actions
index|[
name|i
index|]
operator|=
operator|new
name|TestNodesAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"testAction"
argument_list|,
name|clusterName
argument_list|,
name|threadPool
argument_list|,
name|testNodes
index|[
name|i
index|]
operator|.
name|clusterService
argument_list|,
name|testNodes
index|[
name|i
index|]
operator|.
name|transportService
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|NodeResponse
name|nodeOperation
parameter_list|(
name|NodeRequest
name|request
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Action on node "
operator|+
name|node
argument_list|)
expr_stmt|;
name|actionLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|checkLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Action on node "
operator|+
name|node
operator|+
literal|" finished"
argument_list|)
expr_stmt|;
return|return
operator|new
name|NodeResponse
argument_list|(
name|testNodes
index|[
name|node
index|]
operator|.
name|discoveryNode
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
comment|// Make sure no tasks are running
for|for
control|(
name|TestNode
name|node
range|:
name|testNodes
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|node
operator|.
name|transportService
operator|.
name|getTaskManager
argument_list|()
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Task
name|task
init|=
name|actions
index|[
literal|0
index|]
operator|.
name|execute
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Awaiting for all actions to start"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actionLatch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Done waiting for all actions to start"
argument_list|)
expr_stmt|;
return|return
name|task
return|;
block|}
DECL|method|testRunningTasksCount
specifier|public
name|void
name|testRunningTasksCount
parameter_list|()
throws|throws
name|Exception
block|{
name|setupTestNodes
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|connectNodes
argument_list|(
name|testNodes
argument_list|)
expr_stmt|;
name|CountDownLatch
name|checkLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|responseLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|NodesResponse
argument_list|>
name|responseReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|Task
name|mainTask
init|=
name|startBlockingTestNodesAction
argument_list|(
name|checkLatch
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|NodesResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|NodesResponse
name|listTasksResponse
parameter_list|)
block|{
name|responseReference
operator|.
name|set
argument_list|(
name|listTasksResponse
argument_list|)
expr_stmt|;
name|responseLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Couldn't get list of tasks"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Check task counts using taskManager
name|Map
argument_list|<
name|Long
argument_list|,
name|Task
argument_list|>
name|localTasks
init|=
name|testNodes
index|[
literal|0
index|]
operator|.
name|transportService
operator|.
name|getTaskManager
argument_list|()
operator|.
name|getTasks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|localTasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// all node tasks + 1 coordinating task
name|Task
name|coordinatingTask
init|=
name|localTasks
operator|.
name|get
argument_list|(
name|Collections
operator|.
name|min
argument_list|(
name|localTasks
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Task
name|subTask
init|=
name|localTasks
operator|.
name|get
argument_list|(
name|Collections
operator|.
name|max
argument_list|(
name|localTasks
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|subTask
operator|.
name|getAction
argument_list|()
argument_list|,
name|endsWith
argument_list|(
literal|"[n]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|coordinatingTask
operator|.
name|getAction
argument_list|()
argument_list|,
name|not
argument_list|(
name|endsWith
argument_list|(
literal|"[n]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|testNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Task
argument_list|>
name|remoteTasks
init|=
name|testNodes
index|[
name|i
index|]
operator|.
name|transportService
operator|.
name|getTaskManager
argument_list|()
operator|.
name|getTasks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|remoteTasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Task
name|remoteTask
init|=
name|remoteTasks
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|remoteTask
operator|.
name|getAction
argument_list|()
argument_list|,
name|endsWith
argument_list|(
literal|"[n]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check task counts using transport
name|int
name|testNodeNum
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|testNodes
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|TestNode
name|testNode
init|=
name|testNodes
index|[
name|testNodeNum
index|]
decl_stmt|;
name|ListTasksRequest
name|listTasksRequest
init|=
operator|new
name|ListTasksRequest
argument_list|()
decl_stmt|;
name|listTasksRequest
operator|.
name|actions
argument_list|(
literal|"testAction*"
argument_list|)
expr_stmt|;
comment|// pick all test actions
name|logger
operator|.
name|info
argument_list|(
literal|"Listing currently running tasks using node [{}]"
argument_list|,
name|testNodeNum
argument_list|)
expr_stmt|;
name|ListTasksResponse
name|response
init|=
name|testNode
operator|.
name|transportListTasksAction
operator|.
name|execute
argument_list|(
name|listTasksRequest
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Checking currently running tasks"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testNodes
operator|.
name|length
argument_list|,
name|response
operator|.
name|getPerNodeTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Coordinating node
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|response
operator|.
name|getPerNodeTasks
argument_list|()
operator|.
name|get
argument_list|(
name|testNodes
index|[
literal|0
index|]
operator|.
name|discoveryNode
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Other nodes node
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|testNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getPerNodeTasks
argument_list|()
operator|.
name|get
argument_list|(
name|testNodes
index|[
name|i
index|]
operator|.
name|discoveryNode
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check task counts using transport with filtering
name|testNode
operator|=
name|testNodes
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|testNodes
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
expr_stmt|;
name|listTasksRequest
operator|=
operator|new
name|ListTasksRequest
argument_list|()
expr_stmt|;
name|listTasksRequest
operator|.
name|actions
argument_list|(
literal|"testAction[n]"
argument_list|)
expr_stmt|;
comment|// only pick node actions
name|response
operator|=
name|testNode
operator|.
name|transportListTasksAction
operator|.
name|execute
argument_list|(
name|listTasksRequest
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|testNodes
operator|.
name|length
argument_list|,
name|response
operator|.
name|getPerNodeTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|DiscoveryNode
argument_list|,
name|List
argument_list|<
name|TaskInfo
argument_list|>
argument_list|>
name|entry
range|:
name|response
operator|.
name|getPerNodeTasks
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check task counts using transport with detailed description
name|listTasksRequest
operator|.
name|detailed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// same request only with detailed description
name|response
operator|=
name|testNode
operator|.
name|transportListTasksAction
operator|.
name|execute
argument_list|(
name|listTasksRequest
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|testNodes
operator|.
name|length
argument_list|,
name|response
operator|.
name|getPerNodeTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|DiscoveryNode
argument_list|,
name|List
argument_list|<
name|TaskInfo
argument_list|>
argument_list|>
name|entry
range|:
name|response
operator|.
name|getPerNodeTasks
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CancellableNodeRequest[Test Request, true]"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Make sure that the main task on coordinating node is the task that was returned to us by execute()
name|listTasksRequest
operator|.
name|actions
argument_list|(
literal|"testAction"
argument_list|)
expr_stmt|;
comment|// only pick the main task
name|response
operator|=
name|testNode
operator|.
name|transportListTasksAction
operator|.
name|execute
argument_list|(
name|listTasksRequest
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mainTask
operator|.
name|getId
argument_list|()
argument_list|,
name|response
operator|.
name|getTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release all tasks and wait for response
name|checkLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|responseLatch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|NodesResponse
name|responses
init|=
name|responseReference
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|responses
operator|.
name|failureCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that we don't have any lingering tasks
for|for
control|(
name|TestNode
name|node
range|:
name|testNodes
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|node
operator|.
name|transportService
operator|.
name|getTaskManager
argument_list|()
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFindChildTasks
specifier|public
name|void
name|testFindChildTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|setupTestNodes
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|connectNodes
argument_list|(
name|testNodes
argument_list|)
expr_stmt|;
name|CountDownLatch
name|checkLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ActionFuture
argument_list|<
name|NodesResponse
argument_list|>
name|future
init|=
name|startBlockingTestNodesAction
argument_list|(
name|checkLatch
argument_list|)
decl_stmt|;
name|TestNode
name|testNode
init|=
name|testNodes
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|testNodes
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
decl_stmt|;
comment|// Get the parent task
name|ListTasksRequest
name|listTasksRequest
init|=
operator|new
name|ListTasksRequest
argument_list|()
decl_stmt|;
name|listTasksRequest
operator|.
name|actions
argument_list|(
literal|"testAction"
argument_list|)
expr_stmt|;
name|ListTasksResponse
name|response
init|=
name|testNode
operator|.
name|transportListTasksAction
operator|.
name|execute
argument_list|(
name|listTasksRequest
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|parentNode
init|=
name|response
operator|.
name|getTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNode
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|long
name|parentTaskId
init|=
name|response
operator|.
name|getTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// Find tasks with common parent
name|listTasksRequest
operator|=
operator|new
name|ListTasksRequest
argument_list|()
expr_stmt|;
name|listTasksRequest
operator|.
name|parentTaskId
argument_list|(
operator|new
name|TaskId
argument_list|(
name|parentNode
argument_list|,
name|parentTaskId
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|testNode
operator|.
name|transportListTasksAction
operator|.
name|execute
argument_list|(
name|listTasksRequest
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|testNodes
operator|.
name|length
argument_list|,
name|response
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskInfo
name|task
range|:
name|response
operator|.
name|getTasks
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|"testAction[n]"
argument_list|,
name|task
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parentNode
argument_list|,
name|task
operator|.
name|getParentTaskId
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parentTaskId
argument_list|,
name|task
operator|.
name|getParentTaskId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Release all tasks and wait for response
name|checkLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|NodesResponse
name|responses
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|responses
operator|.
name|failureCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTaskManagementOptOut
specifier|public
name|void
name|testTaskManagementOptOut
parameter_list|()
throws|throws
name|Exception
block|{
name|setupTestNodes
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|connectNodes
argument_list|(
name|testNodes
argument_list|)
expr_stmt|;
name|CountDownLatch
name|checkLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Starting actions that disable task manager
name|ActionFuture
argument_list|<
name|NodesResponse
argument_list|>
name|future
init|=
name|startBlockingTestNodesAction
argument_list|(
name|checkLatch
argument_list|,
operator|new
name|NodesRequest
argument_list|(
literal|"Test Request"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|TestNode
name|testNode
init|=
name|testNodes
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|testNodes
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
decl_stmt|;
comment|// Get the parent task
name|ListTasksRequest
name|listTasksRequest
init|=
operator|new
name|ListTasksRequest
argument_list|()
decl_stmt|;
name|listTasksRequest
operator|.
name|actions
argument_list|(
literal|"testAction*"
argument_list|)
expr_stmt|;
name|ListTasksResponse
name|response
init|=
name|testNode
operator|.
name|transportListTasksAction
operator|.
name|execute
argument_list|(
name|listTasksRequest
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release all tasks and wait for response
name|checkLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|NodesResponse
name|responses
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|responses
operator|.
name|failureCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTasksDescriptions
specifier|public
name|void
name|testTasksDescriptions
parameter_list|()
throws|throws
name|Exception
block|{
name|setupTestNodes
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|connectNodes
argument_list|(
name|testNodes
argument_list|)
expr_stmt|;
name|CountDownLatch
name|checkLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ActionFuture
argument_list|<
name|NodesResponse
argument_list|>
name|future
init|=
name|startBlockingTestNodesAction
argument_list|(
name|checkLatch
argument_list|)
decl_stmt|;
comment|// Check task counts using transport with filtering
name|TestNode
name|testNode
init|=
name|testNodes
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|testNodes
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
decl_stmt|;
name|ListTasksRequest
name|listTasksRequest
init|=
operator|new
name|ListTasksRequest
argument_list|()
decl_stmt|;
name|listTasksRequest
operator|.
name|actions
argument_list|(
literal|"testAction[n]"
argument_list|)
expr_stmt|;
comment|// only pick node actions
name|ListTasksResponse
name|response
init|=
name|testNode
operator|.
name|transportListTasksAction
operator|.
name|execute
argument_list|(
name|listTasksRequest
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|testNodes
operator|.
name|length
argument_list|,
name|response
operator|.
name|getPerNodeTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|DiscoveryNode
argument_list|,
name|List
argument_list|<
name|TaskInfo
argument_list|>
argument_list|>
name|entry
range|:
name|response
operator|.
name|getPerNodeTasks
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check task counts using transport with detailed description
name|listTasksRequest
operator|.
name|detailed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// same request only with detailed description
name|response
operator|=
name|testNode
operator|.
name|transportListTasksAction
operator|.
name|execute
argument_list|(
name|listTasksRequest
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|testNodes
operator|.
name|length
argument_list|,
name|response
operator|.
name|getPerNodeTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|DiscoveryNode
argument_list|,
name|List
argument_list|<
name|TaskInfo
argument_list|>
argument_list|>
name|entry
range|:
name|response
operator|.
name|getPerNodeTasks
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CancellableNodeRequest[Test Request, true]"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Release all tasks and wait for response
name|checkLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|NodesResponse
name|responses
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|responses
operator|.
name|failureCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCancellingTasksThatDontSupportCancellation
specifier|public
name|void
name|testCancellingTasksThatDontSupportCancellation
parameter_list|()
throws|throws
name|Exception
block|{
name|setupTestNodes
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|connectNodes
argument_list|(
name|testNodes
argument_list|)
expr_stmt|;
name|CountDownLatch
name|checkLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|responseLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
name|startBlockingTestNodesAction
argument_list|(
name|checkLatch
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|NodesResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|NodesResponse
name|nodeResponses
parameter_list|)
block|{
name|responseLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|responseLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|String
name|actionName
init|=
literal|"testAction"
decl_stmt|;
comment|// only pick the main action
comment|// Try to cancel main task using action name
name|CancelTasksRequest
name|request
init|=
operator|new
name|CancelTasksRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|nodesIds
argument_list|(
name|testNodes
index|[
literal|0
index|]
operator|.
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|reason
argument_list|(
literal|"Testing Cancellation"
argument_list|)
expr_stmt|;
name|request
operator|.
name|actions
argument_list|(
name|actionName
argument_list|)
expr_stmt|;
name|CancelTasksResponse
name|response
init|=
name|testNodes
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|testNodes
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
operator|.
name|transportCancelTasksAction
operator|.
name|execute
argument_list|(
name|request
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Shouldn't match any tasks since testAction doesn't support cancellation
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getTaskFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getNodeFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try to cancel main task using id
name|request
operator|=
operator|new
name|CancelTasksRequest
argument_list|()
expr_stmt|;
name|request
operator|.
name|reason
argument_list|(
literal|"Testing Cancellation"
argument_list|)
expr_stmt|;
name|request
operator|.
name|taskId
argument_list|(
operator|new
name|TaskId
argument_list|(
name|testNodes
index|[
literal|0
index|]
operator|.
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|,
name|task
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|testNodes
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|testNodes
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
operator|.
name|transportCancelTasksAction
operator|.
name|execute
argument_list|(
name|request
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Shouldn't match any tasks since testAction doesn't support cancellation
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getTaskFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getNodeFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodeFailures
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"doesn't support cancellation"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that task is still running
name|ListTasksRequest
name|listTasksRequest
init|=
operator|new
name|ListTasksRequest
argument_list|()
decl_stmt|;
name|listTasksRequest
operator|.
name|actions
argument_list|(
name|actionName
argument_list|)
expr_stmt|;
name|ListTasksResponse
name|listResponse
init|=
name|testNodes
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|testNodes
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
operator|.
name|transportListTasksAction
operator|.
name|execute
argument_list|(
name|listTasksRequest
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listResponse
operator|.
name|getPerNodeTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release all tasks and wait for response
name|checkLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|responseLatch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailedTasksCount
specifier|public
name|void
name|testFailedTasksCount
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|MockTaskManager
operator|.
name|USE_MOCK_TASK_MANAGER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|setupTestNodes
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|connectNodes
argument_list|(
name|testNodes
argument_list|)
expr_stmt|;
name|TestNodesAction
index|[]
name|actions
init|=
operator|new
name|TestNodesAction
index|[
name|nodesCount
index|]
decl_stmt|;
name|RecordingTaskManagerListener
index|[]
name|listeners
init|=
name|setupListeners
argument_list|(
name|testNodes
argument_list|,
literal|"testAction*"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|node
init|=
name|i
decl_stmt|;
name|actions
index|[
name|i
index|]
operator|=
operator|new
name|TestNodesAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"testAction"
argument_list|,
name|clusterName
argument_list|,
name|threadPool
argument_list|,
name|testNodes
index|[
name|i
index|]
operator|.
name|clusterService
argument_list|,
name|testNodes
index|[
name|i
index|]
operator|.
name|transportService
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|NodeResponse
name|nodeOperation
parameter_list|(
name|NodeRequest
name|request
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Action on node "
operator|+
name|node
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Test exception"
argument_list|)
throw|;
block|}
block|}
expr_stmt|;
block|}
for|for
control|(
name|TestNode
name|testNode
range|:
name|testNodes
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testNode
operator|.
name|transportService
operator|.
name|getTaskManager
argument_list|()
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|NodesRequest
name|request
init|=
operator|new
name|NodesRequest
argument_list|(
literal|"Test Request"
argument_list|)
decl_stmt|;
name|NodesResponse
name|responses
init|=
name|actions
index|[
literal|0
index|]
operator|.
name|execute
argument_list|(
name|request
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|nodesCount
argument_list|,
name|responses
operator|.
name|failureCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that actions are still registered in the task manager on all nodes
comment|// Twice on the coordinating node and once on all other nodes.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|listeners
index|[
literal|0
index|]
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|listeners
index|[
literal|0
index|]
operator|.
name|getRegistrationEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|listeners
index|[
literal|0
index|]
operator|.
name|getUnregistrationEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|listeners
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|listeners
index|[
name|i
index|]
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listeners
index|[
name|i
index|]
operator|.
name|getRegistrationEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listeners
index|[
name|i
index|]
operator|.
name|getUnregistrationEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTaskLevelActionFailures
specifier|public
name|void
name|testTaskLevelActionFailures
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|setupTestNodes
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|connectNodes
argument_list|(
name|testNodes
argument_list|)
expr_stmt|;
name|CountDownLatch
name|checkLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ActionFuture
argument_list|<
name|NodesResponse
argument_list|>
name|future
init|=
name|startBlockingTestNodesAction
argument_list|(
name|checkLatch
argument_list|)
decl_stmt|;
name|TestTasksAction
index|[]
name|tasksActions
init|=
operator|new
name|TestTasksAction
index|[
name|nodesCount
index|]
decl_stmt|;
specifier|final
name|int
name|failTaskOnNode
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|nodesCount
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|node
init|=
name|i
decl_stmt|;
comment|// Simulate task action that fails on one of the tasks on one of the nodes
name|tasksActions
index|[
name|i
index|]
operator|=
operator|new
name|TestTasksAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"testTasksAction"
argument_list|,
name|clusterName
argument_list|,
name|threadPool
argument_list|,
name|testNodes
index|[
name|i
index|]
operator|.
name|clusterService
argument_list|,
name|testNodes
index|[
name|i
index|]
operator|.
name|transportService
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|TestTaskResponse
name|taskOperation
parameter_list|(
name|TestTasksRequest
name|request
parameter_list|,
name|Task
name|task
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Task action on node "
operator|+
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|failTaskOnNode
operator|==
name|node
operator|&&
name|task
operator|.
name|getParentTaskId
argument_list|()
operator|.
name|isSet
argument_list|()
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Failing on node "
operator|+
name|node
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Task level failure"
argument_list|)
throw|;
block|}
return|return
operator|new
name|TestTaskResponse
argument_list|(
literal|"Success on node "
operator|+
name|node
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
comment|// Run task action on node tasks that are currently running
comment|// should be successful on all nodes except one
name|TestTasksRequest
name|testTasksRequest
init|=
operator|new
name|TestTasksRequest
argument_list|()
decl_stmt|;
name|testTasksRequest
operator|.
name|actions
argument_list|(
literal|"testAction[n]"
argument_list|)
expr_stmt|;
comment|// pick all test actions
name|TestTasksResponse
name|response
init|=
name|tasksActions
index|[
literal|0
index|]
operator|.
name|execute
argument_list|(
name|testTasksRequest
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Get successful responses from all nodes except one
name|assertEquals
argument_list|(
name|testNodes
operator|.
name|length
operator|-
literal|1
argument_list|,
name|response
operator|.
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getTaskFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// one task failed
name|assertThat
argument_list|(
name|response
operator|.
name|getTaskFailures
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReason
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Task level failure"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getNodeFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// no nodes failed
comment|// Release all node tasks and wait for response
name|checkLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|NodesResponse
name|responses
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|responses
operator|.
name|failureCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

