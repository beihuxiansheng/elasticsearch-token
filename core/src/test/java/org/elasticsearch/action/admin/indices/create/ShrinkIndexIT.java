begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.create
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedSetSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedSetSortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|reroute
operator|.
name|ClusterRerouteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|segments
operator|.
name|IndexSegments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|segments
operator|.
name|IndexShardSegments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|segments
operator|.
name|IndicesSegmentResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|segments
operator|.
name|ShardSegments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|settings
operator|.
name|get
operator|.
name|GetSettingsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActiveShardCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|InternalClusterInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|TermsQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalSettingsPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_class
DECL|class|ShrinkIndexIT
specifier|public
class|class
name|ShrinkIndexIT
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|InternalSettingsPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|testCreateShrinkIndexToN
specifier|public
name|void
name|testCreateShrinkIndexToN
parameter_list|()
block|{
name|int
index|[]
index|[]
name|possibleShardSplits
init|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|8
block|,
literal|4
block|,
literal|2
block|}
block|,
block|{
literal|9
block|,
literal|3
block|,
literal|1
block|}
block|,
block|{
literal|4
block|,
literal|2
block|,
literal|1
block|}
block|,
block|{
literal|15
block|,
literal|5
block|,
literal|1
block|}
block|}
decl_stmt|;
name|int
index|[]
name|shardSplits
init|=
name|randomFrom
argument_list|(
name|possibleShardSplits
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|shardSplits
index|[
literal|0
index|]
argument_list|,
operator|(
name|shardSplits
index|[
literal|0
index|]
operator|/
name|shardSplits
index|[
literal|1
index|]
operator|)
operator|*
name|shardSplits
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardSplits
index|[
literal|1
index|]
argument_list|,
operator|(
name|shardSplits
index|[
literal|1
index|]
operator|/
name|shardSplits
index|[
literal|2
index|]
operator|)
operator|*
name|shardSplits
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|ensureAtLeastNumDataNodes
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|prepareCreate
argument_list|(
literal|"source"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_shards"
argument_list|,
name|shardSplits
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"source"
argument_list|,
literal|"t1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"foo\" : \"bar\", \"i\" : "
operator|+
name|i
operator|+
literal|"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|DiscoveryNode
argument_list|>
name|dataNodes
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"at least 2 nodes but was: "
operator|+
name|dataNodes
operator|.
name|size
argument_list|()
argument_list|,
name|dataNodes
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|DiscoveryNode
index|[]
name|discoveryNodes
init|=
name|dataNodes
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|DiscoveryNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|mergeNode
init|=
name|discoveryNodes
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// ensure all shards are allocated otherwise the ensure green below might not succeed since we require the merge node
comment|// if we change the setting too quickly we will end up with one replica unassigned which can't be assigned anymore due
comment|// to the require._name below.
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// relocate all shards to one node such that we can merge it.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"source"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.require._name"
argument_list|,
name|mergeNode
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.blocks.write"
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// now merge source into a 4 shard index
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareShrinkIndex
argument_list|(
literal|"source"
argument_list|,
literal|"first_shrink"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
name|shardSplits
index|[
literal|1
index|]
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"first_shrink"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermsQueryBuilder
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
comment|// now update
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"first_shrink"
argument_list|,
literal|"t1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"foo\" : \"bar\", \"i\" : "
operator|+
name|i
operator|+
literal|"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|flushAndRefresh
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"first_shrink"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermsQueryBuilder
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"source"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermsQueryBuilder
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|// relocate all shards to one node such that we can merge it.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"first_shrink"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.require._name"
argument_list|,
name|mergeNode
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.blocks.write"
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// now merge source into a 2 shard index
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareShrinkIndex
argument_list|(
literal|"first_shrink"
argument_list|,
literal|"second_shrink"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
name|shardSplits
index|[
literal|2
index|]
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"second_shrink"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermsQueryBuilder
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|// let it be allocated anywhere and bump replicas
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"second_shrink"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putNull
argument_list|(
literal|"index.routing.allocation.include._id"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"second_shrink"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermsQueryBuilder
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
comment|// now update
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"second_shrink"
argument_list|,
literal|"t1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"foo\" : \"bar\", \"i\" : "
operator|+
name|i
operator|+
literal|"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|flushAndRefresh
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"second_shrink"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermsQueryBuilder
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"first_shrink"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermsQueryBuilder
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"source"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermsQueryBuilder
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateShrinkIndex
specifier|public
name|void
name|testCreateShrinkIndex
parameter_list|()
block|{
name|internalCluster
argument_list|()
operator|.
name|ensureAtLeastNumDataNodes
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Version
name|version
init|=
name|VersionUtils
operator|.
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|prepareCreate
argument_list|(
literal|"source"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_shards"
argument_list|,
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.version.created"
argument_list|,
name|version
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"source"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"foo\" : \"bar\", \"i\" : "
operator|+
name|i
operator|+
literal|"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|DiscoveryNode
argument_list|>
name|dataNodes
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"at least 2 nodes but was: "
operator|+
name|dataNodes
operator|.
name|size
argument_list|()
argument_list|,
name|dataNodes
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|DiscoveryNode
index|[]
name|discoveryNodes
init|=
name|dataNodes
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|DiscoveryNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|mergeNode
init|=
name|discoveryNodes
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// ensure all shards are allocated otherwise the ensure green below might not succeed since we require the merge node
comment|// if we change the setting too quickly we will end up with one replica unassigned which can't be assigned anymore due
comment|// to the require._name below.
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// relocate all shards to one node such that we can merge it.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"source"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.require._name"
argument_list|,
name|mergeNode
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.blocks.write"
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// now merge source into a single shard index
specifier|final
name|boolean
name|createWithReplicas
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareShrinkIndex
argument_list|(
literal|"source"
argument_list|,
literal|"target"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
name|createWithReplicas
condition|?
literal|1
else|:
literal|0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"target"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermsQueryBuilder
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
if|if
condition|(
name|createWithReplicas
operator|==
literal|false
condition|)
block|{
comment|// bump replicas
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"target"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"target"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermsQueryBuilder
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|20
init|;
name|i
operator|<
literal|40
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"target"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"foo\" : \"bar\", \"i\" : "
operator|+
name|i
operator|+
literal|"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|flushAndRefresh
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"target"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermsQueryBuilder
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"source"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermsQueryBuilder
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|GetSettingsResponse
name|target
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetSettings
argument_list|(
literal|"target"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|version
argument_list|,
name|target
operator|.
name|getIndexToSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"target"
argument_list|)
operator|.
name|getAsVersion
argument_list|(
literal|"index.version.created"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that we can manually recover from a failed allocation due to shards being moved away etc.      */
DECL|method|testCreateShrinkIndexFails
specifier|public
name|void
name|testCreateShrinkIndexFails
parameter_list|()
throws|throws
name|Exception
block|{
name|internalCluster
argument_list|()
operator|.
name|ensureAtLeastNumDataNodes
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|prepareCreate
argument_list|(
literal|"source"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_shards"
argument_list|,
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"source"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"foo\" : \"bar\", \"i\" : "
operator|+
name|i
operator|+
literal|"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|DiscoveryNode
argument_list|>
name|dataNodes
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"at least 2 nodes but was: "
operator|+
name|dataNodes
operator|.
name|size
argument_list|()
argument_list|,
name|dataNodes
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|DiscoveryNode
index|[]
name|discoveryNodes
init|=
name|dataNodes
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|DiscoveryNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|spareNode
init|=
name|discoveryNodes
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|mergeNode
init|=
name|discoveryNodes
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// ensure all shards are allocated otherwise the ensure green below might not succeed since we require the merge node
comment|// if we change the setting too quickly we will end up with one replica unassigned which can't be assigned anymore due
comment|// to the require._name below.
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// relocate all shards to one node such that we can merge it.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"source"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.require._name"
argument_list|,
name|mergeNode
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.blocks.write"
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// now merge source into a single shard index
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareShrinkIndex
argument_list|(
literal|"source"
argument_list|,
literal|"target"
argument_list|)
operator|.
name|setWaitForActiveShards
argument_list|(
name|ActiveShardCount
operator|.
name|NONE
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.exclude._name"
argument_list|,
name|mergeNode
argument_list|)
comment|// we manually exclude the merge node to forcefully fuck it up
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.allocation.max_retries"
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|(
literal|"target"
argument_list|)
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// now we move all shards away from the merge node
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"source"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.require._name"
argument_list|,
name|spareNode
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.blocks.write"
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"source"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"target"
argument_list|)
comment|// erase the forcefully fuckup!
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putNull
argument_list|(
literal|"index.routing.allocation.exclude._name"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// wait until it fails
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
name|ClusterStateResponse
name|clusterStateResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|RoutingTable
name|routingTables
init|=
name|clusterStateResponse
operator|.
name|getState
argument_list|()
operator|.
name|routingTable
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|routingTables
operator|.
name|index
argument_list|(
literal|"target"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|unassigned
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|ALLOCATION_FAILED
argument_list|,
name|routingTables
operator|.
name|index
argument_list|(
literal|"target"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|unassignedInfo
argument_list|()
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|routingTables
operator|.
name|index
argument_list|(
literal|"target"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|unassignedInfo
argument_list|()
operator|.
name|getNumFailedAllocations
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"source"
argument_list|)
comment|// now relocate them all to the right node
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.require._name"
argument_list|,
name|mergeNode
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"source"
argument_list|)
expr_stmt|;
specifier|final
name|InternalClusterInfoService
name|infoService
init|=
operator|(
name|InternalClusterInfoService
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterInfoService
operator|.
name|class
argument_list|,
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
argument_list|)
decl_stmt|;
name|infoService
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// kick off a retry and wait until it's done!
name|ClusterRerouteResponse
name|clusterRerouteResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|setRetryFailed
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|expectedShardSize
init|=
name|clusterRerouteResponse
operator|.
name|getState
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"target"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getExpectedShardSize
argument_list|()
decl_stmt|;
comment|// we support the expected shard size in the allocator to sum up over the source index shards
name|assertTrue
argument_list|(
literal|"expected shard size must be set but wasn't: "
operator|+
name|expectedShardSize
argument_list|,
name|expectedShardSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"target"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermsQueryBuilder
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateShrinkWithIndexSort
specifier|public
name|void
name|testCreateShrinkWithIndexSort
parameter_list|()
throws|throws
name|Exception
block|{
name|SortField
name|expectedSortField
init|=
operator|new
name|SortedSetSortField
argument_list|(
literal|"id"
argument_list|,
literal|true
argument_list|,
name|SortedSetSelector
operator|.
name|Type
operator|.
name|MAX
argument_list|)
decl_stmt|;
name|expectedSortField
operator|.
name|setMissingValue
argument_list|(
name|SortedSetSortField
operator|.
name|STRING_FIRST
argument_list|)
expr_stmt|;
name|Sort
name|expectedIndexSort
init|=
operator|new
name|Sort
argument_list|(
name|expectedSortField
argument_list|)
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|ensureAtLeastNumDataNodes
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|prepareCreate
argument_list|(
literal|"source"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"sort.field"
argument_list|,
literal|"id"
argument_list|)
operator|.
name|put
argument_list|(
literal|"sort.order"
argument_list|,
literal|"desc"
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_shards"
argument_list|,
literal|8
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|"type=keyword,doc_values=true"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"source"
argument_list|,
literal|"type"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"foo\" : \"bar\", \"id\" : "
operator|+
name|i
operator|+
literal|"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|DiscoveryNode
argument_list|>
name|dataNodes
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"at least 2 nodes but was: "
operator|+
name|dataNodes
operator|.
name|size
argument_list|()
argument_list|,
name|dataNodes
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|DiscoveryNode
index|[]
name|discoveryNodes
init|=
name|dataNodes
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|DiscoveryNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|mergeNode
init|=
name|discoveryNodes
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// ensure all shards are allocated otherwise the ensure green below might not succeed since we require the merge node
comment|// if we change the setting too quickly we will end up with one replica unassigned which can't be assigned anymore due
comment|// to the require._name below.
name|ensureGreen
argument_list|()
expr_stmt|;
name|flushAndRefresh
argument_list|()
expr_stmt|;
name|assertSortedSegments
argument_list|(
literal|"source"
argument_list|,
name|expectedIndexSort
argument_list|)
expr_stmt|;
comment|// relocate all shards to one node such that we can merge it.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"source"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.require._name"
argument_list|,
name|mergeNode
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.blocks.write"
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// check that index sort cannot be set on the target index
name|IllegalArgumentException
name|exc
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareShrinkIndex
argument_list|(
literal|"source"
argument_list|,
literal|"target"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.sort.field"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exc
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"can't override index sort when shrinking index"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that the index sort order of `source` is correctly applied to the `target`
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareShrinkIndex
argument_list|(
literal|"source"
argument_list|,
literal|"target"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|flushAndRefresh
argument_list|()
expr_stmt|;
name|GetSettingsResponse
name|settingsResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetSettings
argument_list|(
literal|"target"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|settingsResponse
operator|.
name|getSetting
argument_list|(
literal|"target"
argument_list|,
literal|"index.sort.field"
argument_list|)
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|settingsResponse
operator|.
name|getSetting
argument_list|(
literal|"target"
argument_list|,
literal|"index.sort.order"
argument_list|)
argument_list|,
literal|"desc"
argument_list|)
expr_stmt|;
name|assertSortedSegments
argument_list|(
literal|"target"
argument_list|,
name|expectedIndexSort
argument_list|)
expr_stmt|;
comment|// ... and that the index sort is also applied to updates
for|for
control|(
name|int
name|i
init|=
literal|20
init|;
name|i
operator|<
literal|40
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"target"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"foo\" : \"bar\", \"i\" : "
operator|+
name|i
operator|+
literal|"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|flushAndRefresh
argument_list|()
expr_stmt|;
name|assertSortedSegments
argument_list|(
literal|"target"
argument_list|,
name|expectedIndexSort
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

