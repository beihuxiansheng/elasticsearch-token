begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.node.info
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|contains
import|;
end_import

begin_class
DECL|class|PluginsInfoTest
specifier|public
class|class
name|PluginsInfoTest
extends|extends
name|ElasticsearchTestCase
block|{
annotation|@
name|Test
DECL|method|testPluginListSorted
specifier|public
name|void
name|testPluginListSorted
parameter_list|()
block|{
name|PluginsInfo
name|pluginsInfo
init|=
operator|new
name|PluginsInfo
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|pluginsInfo
operator|.
name|add
argument_list|(
operator|new
name|PluginInfo
argument_list|(
literal|"c"
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|"dummy"
argument_list|)
argument_list|)
expr_stmt|;
name|pluginsInfo
operator|.
name|add
argument_list|(
operator|new
name|PluginInfo
argument_list|(
literal|"b"
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|"dummy"
argument_list|)
argument_list|)
expr_stmt|;
name|pluginsInfo
operator|.
name|add
argument_list|(
operator|new
name|PluginInfo
argument_list|(
literal|"e"
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|"dummy"
argument_list|)
argument_list|)
expr_stmt|;
name|pluginsInfo
operator|.
name|add
argument_list|(
operator|new
name|PluginInfo
argument_list|(
literal|"a"
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|"dummy"
argument_list|)
argument_list|)
expr_stmt|;
name|pluginsInfo
operator|.
name|add
argument_list|(
operator|new
name|PluginInfo
argument_list|(
literal|"d"
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|"dummy"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|infos
init|=
name|pluginsInfo
operator|.
name|getInfos
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|infos
argument_list|,
operator|new
name|Function
argument_list|<
name|PluginInfo
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|PluginInfo
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|names
argument_list|,
name|contains
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

