begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.node.tasks
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|TaskTests
specifier|public
class|class
name|TaskTests
extends|extends
name|ESTestCase
block|{
DECL|method|testTaskInfoToString
specifier|public
name|void
name|testTaskInfoToString
parameter_list|()
block|{
name|String
name|nodeId
init|=
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|long
name|taskId
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
name|long
name|runningTime
init|=
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
name|boolean
name|cancellable
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|TaskInfo
name|taskInfo
init|=
operator|new
name|TaskInfo
argument_list|(
operator|new
name|TaskId
argument_list|(
name|nodeId
argument_list|,
name|taskId
argument_list|)
argument_list|,
literal|"test_type"
argument_list|,
literal|"test_action"
argument_list|,
literal|"test_description"
argument_list|,
literal|null
argument_list|,
name|startTime
argument_list|,
name|runningTime
argument_list|,
name|cancellable
argument_list|,
name|TaskId
operator|.
name|EMPTY_TASK_ID
argument_list|)
decl_stmt|;
name|String
name|taskInfoString
init|=
name|taskInfo
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|taskInfoString
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|v2
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|taskId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|,
literal|"test_type"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"action"
argument_list|)
argument_list|,
literal|"test_action"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
argument_list|,
literal|"test_description"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"start_time_in_millis"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"running_time_in_nanos"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|runningTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"cancellable"
argument_list|)
argument_list|,
name|cancellable
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

