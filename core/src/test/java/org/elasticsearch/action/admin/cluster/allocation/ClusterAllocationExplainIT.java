begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActiveShardCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
operator|.
name|AllocationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
operator|.
name|Reason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocateUnassignedDecision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationDecision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|MoveDecision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|NodeAllocationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalTestCluster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|isOneOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|startsWith
import|;
end_import

begin_comment
comment|/**  * Tests for the cluster allocation explanation  */
end_comment

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ESIntegTestCase
operator|.
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|)
DECL|class|ClusterAllocationExplainIT
specifier|public
specifier|final
class|class
name|ClusterAllocationExplainIT
extends|extends
name|ESIntegTestCase
block|{
DECL|method|testUnassignedPrimaryWithExistingIndex
specifier|public
name|void
name|testUnassignedPrimaryWithExistingIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting 2 nodes"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNodes
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating an index with 1 primary, 0 replicas"
argument_list|)
expr_stmt|;
name|createIndexAndIndexData
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> stopping the node with the primary"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|InternalTestCluster
operator|.
name|nameFilter
argument_list|(
name|primaryNodeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|includeYesDecisions
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|includeDiskInfo
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|ClusterAllocationExplanation
name|explanation
init|=
name|runExplain
argument_list|(
literal|true
argument_list|,
name|includeYesDecisions
argument_list|,
name|includeDiskInfo
argument_list|)
decl_stmt|;
name|ShardId
name|shardId
init|=
name|explanation
operator|.
name|getShard
argument_list|()
decl_stmt|;
name|boolean
name|isPrimary
init|=
name|explanation
operator|.
name|isPrimary
argument_list|()
decl_stmt|;
name|ShardRoutingState
name|shardState
init|=
name|explanation
operator|.
name|getShardState
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|currentNode
init|=
name|explanation
operator|.
name|getCurrentNode
argument_list|()
decl_stmt|;
name|UnassignedInfo
name|unassignedInfo
init|=
name|explanation
operator|.
name|getUnassignedInfo
argument_list|()
decl_stmt|;
name|ClusterInfo
name|clusterInfo
init|=
name|explanation
operator|.
name|getClusterInfo
argument_list|()
decl_stmt|;
name|AllocateUnassignedDecision
name|allocateDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getAllocateDecision
argument_list|()
decl_stmt|;
name|MoveDecision
name|moveDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getMoveDecision
argument_list|()
decl_stmt|;
comment|// verify shard info
name|assertEquals
argument_list|(
literal|"idx"
argument_list|,
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shardId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isPrimary
argument_list|)
expr_stmt|;
comment|// verify current node info
name|assertNotEquals
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|shardState
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|currentNode
argument_list|)
expr_stmt|;
comment|// verify unassigned info
name|assertNotNull
argument_list|(
name|unassignedInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Reason
operator|.
name|NODE_LEFT
argument_list|,
name|unassignedInfo
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|unassignedInfo
operator|.
name|getLastAllocationStatus
argument_list|()
operator|==
name|AllocationStatus
operator|.
name|FETCHING_SHARD_DATA
operator|||
name|unassignedInfo
operator|.
name|getLastAllocationStatus
argument_list|()
operator|==
name|AllocationStatus
operator|.
name|NO_VALID_SHARD_COPY
argument_list|)
expr_stmt|;
comment|// verify cluster info
name|verifyClusterInfo
argument_list|(
name|clusterInfo
argument_list|,
name|includeDiskInfo
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// verify decision objects
name|assertTrue
argument_list|(
name|allocateDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|moveDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocateDecision
operator|.
name|getAllocationDecision
argument_list|()
operator|==
name|AllocationDecision
operator|.
name|NO_VALID_SHARD_COPY
operator|||
name|allocateDecision
operator|.
name|getAllocationDecision
argument_list|()
operator|==
name|AllocationDecision
operator|.
name|AWAITING_INFO
argument_list|)
expr_stmt|;
if|if
condition|(
name|allocateDecision
operator|.
name|getAllocationDecision
argument_list|()
operator|==
name|AllocationDecision
operator|.
name|NO_VALID_SHARD_COPY
condition|)
block|{
name|assertEquals
argument_list|(
literal|"cannot allocate because a previous copy of the primary shard existed but can no longer be "
operator|+
literal|"found on the nodes in the cluster"
argument_list|,
name|allocateDecision
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"cannot allocate because information about existing shard data is still being retrieved from some of the nodes"
argument_list|,
name|allocateDecision
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|allocateDecision
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|allocateDecision
operator|.
name|getTargetNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|allocateDecision
operator|.
name|getConfiguredDelayInMillis
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|allocateDecision
operator|.
name|getRemainingDelayInMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|allocateDecision
operator|.
name|getAllocationDecision
argument_list|()
operator|==
name|AllocationDecision
operator|.
name|NO_VALID_SHARD_COPY
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocateDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify JSON output
try|try
init|(
name|XContentParser
name|parser
init|=
name|getParser
argument_list|(
name|explanation
argument_list|)
init|)
block|{
name|verifyShardInfo
argument_list|(
name|parser
argument_list|,
literal|true
argument_list|,
name|includeDiskInfo
argument_list|,
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_allocate"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO_VALID_SHARD_COPY
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"allocate_explanation"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cannot allocate because a previous copy of the primary shard existed but can no longer be found "
operator|+
literal|"on the nodes in the cluster"
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStaleShardCopyNodeDecisions
argument_list|(
name|parser
argument_list|,
literal|1
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testUnassignedReplicaDelayedAllocation
specifier|public
name|void
name|testUnassignedReplicaDelayedAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting 3 nodes"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNodes
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating an index with 1 primary, 1 replica"
argument_list|)
expr_stmt|;
name|createIndexAndIndexData
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> stopping the node with the replica"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|InternalTestCluster
operator|.
name|nameFilter
argument_list|(
name|replicaNode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
comment|// wait till we have passed any pending shard data fetching
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|ALLOCATION_DELAYED
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareAllocationExplain
argument_list|()
operator|.
name|setIndex
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setShard
argument_list|(
literal|0
argument_list|)
operator|.
name|setPrimary
argument_list|(
literal|false
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getExplanation
argument_list|()
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getAllocateDecision
argument_list|()
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> observing delayed allocation..."
argument_list|)
expr_stmt|;
name|boolean
name|includeYesDecisions
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|includeDiskInfo
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|ClusterAllocationExplanation
name|explanation
init|=
name|runExplain
argument_list|(
literal|false
argument_list|,
name|includeYesDecisions
argument_list|,
name|includeDiskInfo
argument_list|)
decl_stmt|;
name|ShardId
name|shardId
init|=
name|explanation
operator|.
name|getShard
argument_list|()
decl_stmt|;
name|boolean
name|isPrimary
init|=
name|explanation
operator|.
name|isPrimary
argument_list|()
decl_stmt|;
name|ShardRoutingState
name|shardRoutingState
init|=
name|explanation
operator|.
name|getShardState
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|currentNode
init|=
name|explanation
operator|.
name|getCurrentNode
argument_list|()
decl_stmt|;
name|UnassignedInfo
name|unassignedInfo
init|=
name|explanation
operator|.
name|getUnassignedInfo
argument_list|()
decl_stmt|;
name|ClusterInfo
name|clusterInfo
init|=
name|explanation
operator|.
name|getClusterInfo
argument_list|()
decl_stmt|;
name|AllocateUnassignedDecision
name|allocateDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getAllocateDecision
argument_list|()
decl_stmt|;
name|MoveDecision
name|moveDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getMoveDecision
argument_list|()
decl_stmt|;
comment|// verify shard info
name|assertEquals
argument_list|(
literal|"idx"
argument_list|,
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shardId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isPrimary
argument_list|)
expr_stmt|;
comment|// verify current node info
name|assertNotEquals
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|shardRoutingState
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|currentNode
argument_list|)
expr_stmt|;
comment|// verify unassigned info
name|assertNotNull
argument_list|(
name|unassignedInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Reason
operator|.
name|NODE_LEFT
argument_list|,
name|unassignedInfo
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationStatus
operator|.
name|NO_ATTEMPT
argument_list|,
name|unassignedInfo
operator|.
name|getLastAllocationStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify cluster info
name|verifyClusterInfo
argument_list|(
name|clusterInfo
argument_list|,
name|includeDiskInfo
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// verify decision objects
name|assertTrue
argument_list|(
name|allocateDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|moveDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|ALLOCATION_DELAYED
argument_list|,
name|allocateDecision
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocateDecision
operator|.
name|getExplanation
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"cannot allocate because the cluster is still waiting"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocateDecision
operator|.
name|getExplanation
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"despite being allowed to allocate the shard to at least one other node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|allocateDecision
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|allocateDecision
operator|.
name|getTargetNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60000L
argument_list|,
name|allocateDecision
operator|.
name|getConfiguredDelayInMillis
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocateDecision
operator|.
name|getRemainingDelayInMillis
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocateDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|primaryNodeName
init|=
name|primaryNodeName
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeAllocationResult
name|result
range|:
name|allocateDecision
operator|.
name|getNodeDecisions
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|result
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|nodeHoldingPrimary
init|=
name|result
operator|.
name|getNode
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|primaryNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeHoldingPrimary
condition|)
block|{
comment|// shouldn't be able to allocate to the same node as the primary, the same shard decider should say no
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
argument_list|,
name|result
operator|.
name|getNodeDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|getMatchingBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|YES
argument_list|,
name|result
operator|.
name|getNodeDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|getShardStoreInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeYesDecisions
condition|)
block|{
name|assertThat
argument_list|(
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if we are not including YES decisions, then the node holding the primary should have 1 NO decision,
comment|// the other node should have zero NO decisions
name|assertEquals
argument_list|(
name|nodeHoldingPrimary
condition|?
literal|1
else|:
literal|0
argument_list|,
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Decision
name|d
range|:
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|label
argument_list|()
operator|.
name|equals
argument_list|(
literal|"same_shard"
argument_list|)
operator|&&
name|nodeHoldingPrimary
condition|)
block|{
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|NO
argument_list|,
name|d
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"the shard cannot be allocated to the same node on which a copy of the shard already exists"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|YES
argument_list|,
name|d
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// verify JSON output
try|try
init|(
name|XContentParser
name|parser
init|=
name|getParser
argument_list|(
name|explanation
argument_list|)
init|)
block|{
name|verifyShardInfo
argument_list|(
name|parser
argument_list|,
literal|false
argument_list|,
name|includeDiskInfo
argument_list|,
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_allocate"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|ALLOCATION_DELAYED
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"allocate_explanation"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"cannot allocate because the cluster is still waiting"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"configured_delay_in_millis"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|60000L
argument_list|,
name|parser
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remaining_delay_in_millis"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|longValue
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AllocationDecision
argument_list|>
name|nodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|primaryNodeName
argument_list|,
name|AllocationDecision
operator|.
name|NO
argument_list|)
expr_stmt|;
name|String
index|[]
name|currentNodes
init|=
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|currentNodes
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|primaryNodeName
argument_list|)
condition|?
name|currentNodes
index|[
literal|1
index|]
else|:
name|currentNodes
index|[
literal|0
index|]
argument_list|,
name|AllocationDecision
operator|.
name|YES
argument_list|)
expr_stmt|;
name|verifyNodeDecisions
argument_list|(
name|parser
argument_list|,
name|nodes
argument_list|,
name|includeYesDecisions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testUnassignedReplicaWithPriorCopy
specifier|public
name|void
name|testUnassignedReplicaWithPriorCopy
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting 3 nodes"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodes
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating an index with 1 primary and 1 replica"
argument_list|)
expr_stmt|;
name|createIndexAndIndexData
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|String
name|primaryNodeName
init|=
name|primaryNodeName
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|remove
argument_list|(
name|primaryNodeName
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> shutting down all nodes except the one that holds the primary"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|InternalTestCluster
operator|.
name|nameFilter
argument_list|(
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|InternalTestCluster
operator|.
name|nameFilter
argument_list|(
name|nodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> setting allocation filtering to only allow allocation on the currently running node"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.include._name"
argument_list|,
name|primaryNodeName
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> restarting the stopped nodes"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
name|nodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|boolean
name|includeYesDecisions
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|includeDiskInfo
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|ClusterAllocationExplanation
name|explanation
init|=
name|runExplain
argument_list|(
literal|false
argument_list|,
name|includeYesDecisions
argument_list|,
name|includeDiskInfo
argument_list|)
decl_stmt|;
name|ShardId
name|shardId
init|=
name|explanation
operator|.
name|getShard
argument_list|()
decl_stmt|;
name|boolean
name|isPrimary
init|=
name|explanation
operator|.
name|isPrimary
argument_list|()
decl_stmt|;
name|ShardRoutingState
name|shardRoutingState
init|=
name|explanation
operator|.
name|getShardState
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|currentNode
init|=
name|explanation
operator|.
name|getCurrentNode
argument_list|()
decl_stmt|;
name|UnassignedInfo
name|unassignedInfo
init|=
name|explanation
operator|.
name|getUnassignedInfo
argument_list|()
decl_stmt|;
name|ClusterInfo
name|clusterInfo
init|=
name|explanation
operator|.
name|getClusterInfo
argument_list|()
decl_stmt|;
name|AllocateUnassignedDecision
name|allocateDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getAllocateDecision
argument_list|()
decl_stmt|;
name|MoveDecision
name|moveDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getMoveDecision
argument_list|()
decl_stmt|;
comment|// verify shard info
name|assertEquals
argument_list|(
literal|"idx"
argument_list|,
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shardId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isPrimary
argument_list|)
expr_stmt|;
comment|// verify current node info
name|assertNotEquals
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|shardRoutingState
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|currentNode
argument_list|)
expr_stmt|;
comment|// verify unassigned info
name|assertNotNull
argument_list|(
name|unassignedInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Reason
operator|.
name|NODE_LEFT
argument_list|,
name|unassignedInfo
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationStatus
operator|.
name|NO_ATTEMPT
argument_list|,
name|unassignedInfo
operator|.
name|getLastAllocationStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify cluster info
name|verifyClusterInfo
argument_list|(
name|clusterInfo
argument_list|,
name|includeDiskInfo
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// verify decision objects
name|assertTrue
argument_list|(
name|allocateDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|moveDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|AllocationDecision
name|decisionToAllocate
init|=
name|allocateDecision
operator|.
name|getAllocationDecision
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|decisionToAllocate
operator|==
name|AllocationDecision
operator|.
name|AWAITING_INFO
operator|||
name|decisionToAllocate
operator|==
name|AllocationDecision
operator|.
name|NO
argument_list|)
expr_stmt|;
if|if
condition|(
name|decisionToAllocate
operator|==
name|AllocationDecision
operator|.
name|AWAITING_INFO
condition|)
block|{
name|assertEquals
argument_list|(
literal|"cannot allocate because information about existing shard data is still being retrieved from some of the nodes"
argument_list|,
name|allocateDecision
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"cannot allocate because allocation is not permitted to any of the nodes"
argument_list|,
name|allocateDecision
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|allocateDecision
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|allocateDecision
operator|.
name|getTargetNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|allocateDecision
operator|.
name|getConfiguredDelayInMillis
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|allocateDecision
operator|.
name|getRemainingDelayInMillis
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allocateDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeAllocationResult
name|result
range|:
name|allocateDecision
operator|.
name|getNodeDecisions
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|result
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|nodeHoldingPrimary
init|=
name|result
operator|.
name|getNode
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|primaryNodeName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
argument_list|,
name|result
operator|.
name|getNodeDecision
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeYesDecisions
condition|)
block|{
name|assertThat
argument_list|(
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Decision
name|d
range|:
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|label
argument_list|()
operator|.
name|equals
argument_list|(
literal|"same_shard"
argument_list|)
operator|&&
name|nodeHoldingPrimary
condition|)
block|{
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|NO
argument_list|,
name|d
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"the shard cannot be allocated to the same node on which a copy of the shard already exists"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|.
name|label
argument_list|()
operator|.
name|equals
argument_list|(
literal|"filter"
argument_list|)
operator|&&
name|nodeHoldingPrimary
operator|==
literal|false
condition|)
block|{
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|NO
argument_list|,
name|d
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node does not match index setting [index.routing.allocation.include] "
operator|+
literal|"filters [_name:\""
operator|+
name|primaryNodeName
operator|+
literal|"\"]"
argument_list|,
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|YES
argument_list|,
name|d
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// verify JSON output
try|try
init|(
name|XContentParser
name|parser
init|=
name|getParser
argument_list|(
name|explanation
argument_list|)
init|)
block|{
name|verifyShardInfo
argument_list|(
name|parser
argument_list|,
literal|false
argument_list|,
name|includeDiskInfo
argument_list|,
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_allocate"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|String
name|allocationDecision
init|=
name|parser
operator|.
name|text
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|allocationDecision
operator|.
name|equals
argument_list|(
name|AllocationDecision
operator|.
name|NO
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|allocationDecision
operator|.
name|equals
argument_list|(
name|AllocationDecision
operator|.
name|AWAITING_INFO
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"allocate_explanation"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|allocationDecision
operator|.
name|equals
argument_list|(
literal|"awaiting_info"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"cannot allocate because information about existing shard data is still being retrieved "
operator|+
literal|"from some of the nodes"
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"cannot allocate because allocation is not permitted to any of the nodes"
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|AllocationDecision
argument_list|>
name|nodeDecisions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nodeName
range|:
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
control|)
block|{
name|nodeDecisions
operator|.
name|put
argument_list|(
name|nodeName
argument_list|,
name|AllocationDecision
operator|.
name|NO
argument_list|)
expr_stmt|;
block|}
name|verifyNodeDecisions
argument_list|(
name|parser
argument_list|,
name|nodeDecisions
argument_list|,
name|includeYesDecisions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAllocationFilteringOnIndexCreation
specifier|public
name|void
name|testAllocationFilteringOnIndexCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting 2 nodes"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNodes
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating an index with 1 primary, 0 replicas, with allocation filtering so the primary can't be assigned"
argument_list|)
expr_stmt|;
name|createIndexAndIndexData
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.include._name"
argument_list|,
literal|"non_existent_node"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ActiveShardCount
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|boolean
name|includeYesDecisions
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|includeDiskInfo
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|ClusterAllocationExplanation
name|explanation
init|=
name|runExplain
argument_list|(
literal|true
argument_list|,
name|includeYesDecisions
argument_list|,
name|includeDiskInfo
argument_list|)
decl_stmt|;
name|ShardId
name|shardId
init|=
name|explanation
operator|.
name|getShard
argument_list|()
decl_stmt|;
name|boolean
name|isPrimary
init|=
name|explanation
operator|.
name|isPrimary
argument_list|()
decl_stmt|;
name|ShardRoutingState
name|shardRoutingState
init|=
name|explanation
operator|.
name|getShardState
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|currentNode
init|=
name|explanation
operator|.
name|getCurrentNode
argument_list|()
decl_stmt|;
name|UnassignedInfo
name|unassignedInfo
init|=
name|explanation
operator|.
name|getUnassignedInfo
argument_list|()
decl_stmt|;
name|ClusterInfo
name|clusterInfo
init|=
name|explanation
operator|.
name|getClusterInfo
argument_list|()
decl_stmt|;
name|AllocateUnassignedDecision
name|allocateDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getAllocateDecision
argument_list|()
decl_stmt|;
name|MoveDecision
name|moveDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getMoveDecision
argument_list|()
decl_stmt|;
comment|// verify shard info
name|assertEquals
argument_list|(
literal|"idx"
argument_list|,
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shardId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isPrimary
argument_list|)
expr_stmt|;
comment|// verify current node info
name|assertNotEquals
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|shardRoutingState
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|currentNode
argument_list|)
expr_stmt|;
comment|// verify unassigned info
name|assertNotNull
argument_list|(
name|unassignedInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Reason
operator|.
name|INDEX_CREATED
argument_list|,
name|unassignedInfo
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationStatus
operator|.
name|DECIDERS_NO
argument_list|,
name|unassignedInfo
operator|.
name|getLastAllocationStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify cluster info
name|verifyClusterInfo
argument_list|(
name|clusterInfo
argument_list|,
name|includeDiskInfo
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// verify decision objects
name|assertTrue
argument_list|(
name|allocateDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|moveDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
argument_list|,
name|allocateDecision
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cannot allocate because allocation is not permitted to any of the nodes"
argument_list|,
name|allocateDecision
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|allocateDecision
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|allocateDecision
operator|.
name|getTargetNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|allocateDecision
operator|.
name|getConfiguredDelayInMillis
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|allocateDecision
operator|.
name|getRemainingDelayInMillis
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocateDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeAllocationResult
name|result
range|:
name|allocateDecision
operator|.
name|getNodeDecisions
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|result
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
argument_list|,
name|result
operator|.
name|getNodeDecision
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeYesDecisions
condition|)
block|{
name|assertThat
argument_list|(
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Decision
name|d
range|:
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|label
argument_list|()
operator|.
name|equals
argument_list|(
literal|"filter"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|NO
argument_list|,
name|d
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node does not match index setting [index.routing.allocation.include] filters "
operator|+
literal|"[_name:\"non_existent_node\"]"
argument_list|,
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// verify JSON output
try|try
init|(
name|XContentParser
name|parser
init|=
name|getParser
argument_list|(
name|explanation
argument_list|)
init|)
block|{
name|verifyShardInfo
argument_list|(
name|parser
argument_list|,
literal|true
argument_list|,
name|includeDiskInfo
argument_list|,
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_allocate"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|String
name|allocationDecision
init|=
name|parser
operator|.
name|text
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|allocationDecision
operator|.
name|equals
argument_list|(
name|AllocationDecision
operator|.
name|NO
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|allocationDecision
operator|.
name|equals
argument_list|(
name|AllocationDecision
operator|.
name|AWAITING_INFO
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"allocate_explanation"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|allocationDecision
operator|.
name|equals
argument_list|(
literal|"awaiting_info"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"cannot allocate because information about existing shard data is still being retrieved "
operator|+
literal|"from some of the nodes"
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"cannot allocate because allocation is not permitted to any of the nodes"
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|AllocationDecision
argument_list|>
name|nodeDecisions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nodeName
range|:
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
control|)
block|{
name|nodeDecisions
operator|.
name|put
argument_list|(
name|nodeName
argument_list|,
name|AllocationDecision
operator|.
name|NO
argument_list|)
expr_stmt|;
block|}
name|verifyNodeDecisions
argument_list|(
name|parser
argument_list|,
name|nodeDecisions
argument_list|,
name|includeYesDecisions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAllocationFilteringPreventsShardMove
specifier|public
name|void
name|testAllocationFilteringPreventsShardMove
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting 2 nodes"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNodes
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating an index with 1 primary and 0 replicas"
argument_list|)
expr_stmt|;
name|createIndexAndIndexData
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> setting up allocation filtering to prevent allocation to both nodes"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.include._name"
argument_list|,
literal|"non_existent_node"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|boolean
name|includeYesDecisions
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|includeDiskInfo
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|ClusterAllocationExplanation
name|explanation
init|=
name|runExplain
argument_list|(
literal|true
argument_list|,
name|includeYesDecisions
argument_list|,
name|includeDiskInfo
argument_list|)
decl_stmt|;
name|ShardId
name|shardId
init|=
name|explanation
operator|.
name|getShard
argument_list|()
decl_stmt|;
name|boolean
name|isPrimary
init|=
name|explanation
operator|.
name|isPrimary
argument_list|()
decl_stmt|;
name|ShardRoutingState
name|shardRoutingState
init|=
name|explanation
operator|.
name|getShardState
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|currentNode
init|=
name|explanation
operator|.
name|getCurrentNode
argument_list|()
decl_stmt|;
name|UnassignedInfo
name|unassignedInfo
init|=
name|explanation
operator|.
name|getUnassignedInfo
argument_list|()
decl_stmt|;
name|ClusterInfo
name|clusterInfo
init|=
name|explanation
operator|.
name|getClusterInfo
argument_list|()
decl_stmt|;
name|AllocateUnassignedDecision
name|allocateDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getAllocateDecision
argument_list|()
decl_stmt|;
name|MoveDecision
name|moveDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getMoveDecision
argument_list|()
decl_stmt|;
comment|// verify shard info
name|assertEquals
argument_list|(
literal|"idx"
argument_list|,
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shardId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isPrimary
argument_list|)
expr_stmt|;
comment|// verify current node info
name|assertEquals
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|shardRoutingState
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|currentNode
argument_list|)
expr_stmt|;
comment|// verify unassigned info
name|assertNull
argument_list|(
name|unassignedInfo
argument_list|)
expr_stmt|;
comment|// verify cluster info
name|verifyClusterInfo
argument_list|(
name|clusterInfo
argument_list|,
name|includeDiskInfo
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// verify decision object
name|assertFalse
argument_list|(
name|allocateDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|moveDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
argument_list|,
name|moveDecision
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cannot move shard to another node, even though it is not allowed to remain on its current node"
argument_list|,
name|moveDecision
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|moveDecision
operator|.
name|canRemain
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|moveDecision
operator|.
name|forceMove
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|moveDecision
operator|.
name|canRebalanceCluster
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|moveDecision
operator|.
name|getClusterRebalanceDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|moveDecision
operator|.
name|getTargetNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|moveDecision
operator|.
name|getCurrentNodeRanking
argument_list|()
argument_list|)
expr_stmt|;
comment|// verifying can remain decision object
name|assertNotNull
argument_list|(
name|moveDecision
operator|.
name|getCanRemainDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|NO
argument_list|,
name|moveDecision
operator|.
name|getCanRemainDecision
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Decision
name|d
range|:
name|moveDecision
operator|.
name|getCanRemainDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|label
argument_list|()
operator|.
name|equals
argument_list|(
literal|"filter"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|NO
argument_list|,
name|d
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node does not match index setting [index.routing.allocation.include] filters [_name:\"non_existent_node\"]"
argument_list|,
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|YES
argument_list|,
name|d
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// verify node decisions
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|moveDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|NodeAllocationResult
name|result
init|=
name|moveDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getWeightRanking
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
argument_list|,
name|result
operator|.
name|getNodeDecision
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeYesDecisions
condition|)
block|{
name|assertThat
argument_list|(
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Decision
name|d
range|:
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|label
argument_list|()
operator|.
name|equals
argument_list|(
literal|"filter"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|NO
argument_list|,
name|d
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node does not match index setting [index.routing.allocation.include] filters [_name:\"non_existent_node\"]"
argument_list|,
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|YES
argument_list|,
name|d
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// verify JSON output
try|try
init|(
name|XContentParser
name|parser
init|=
name|getParser
argument_list|(
name|explanation
argument_list|)
init|)
block|{
name|verifyShardInfo
argument_list|(
name|parser
argument_list|,
literal|true
argument_list|,
name|includeDiskInfo
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_remain_on_current_node"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_remain_decisions"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|verifyDeciders
argument_list|(
name|parser
argument_list|,
name|AllocationDecision
operator|.
name|NO
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_move_to_other_node"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"move_explanation"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cannot move shard to another node, even though it is not allowed to remain on its current node"
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNodeDecisions
argument_list|(
name|parser
argument_list|,
name|allNodeDecisions
argument_list|(
name|AllocationDecision
operator|.
name|NO
argument_list|,
literal|true
argument_list|)
argument_list|,
name|includeYesDecisions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRebalancingNotAllowed
specifier|public
name|void
name|testRebalancingNotAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting a single node"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating an index with 5 shards, all allocated to the single node"
argument_list|)
expr_stmt|;
name|createIndexAndIndexData
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> disabling rebalancing on the index"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.rebalance.enable"
argument_list|,
literal|"none"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting another node, with rebalancing disabled, it should get no shards"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|boolean
name|includeYesDecisions
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|includeDiskInfo
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|ClusterAllocationExplanation
name|explanation
init|=
name|runExplain
argument_list|(
literal|true
argument_list|,
name|includeYesDecisions
argument_list|,
name|includeDiskInfo
argument_list|)
decl_stmt|;
name|ShardId
name|shardId
init|=
name|explanation
operator|.
name|getShard
argument_list|()
decl_stmt|;
name|boolean
name|isPrimary
init|=
name|explanation
operator|.
name|isPrimary
argument_list|()
decl_stmt|;
name|ShardRoutingState
name|shardRoutingState
init|=
name|explanation
operator|.
name|getShardState
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|currentNode
init|=
name|explanation
operator|.
name|getCurrentNode
argument_list|()
decl_stmt|;
name|UnassignedInfo
name|unassignedInfo
init|=
name|explanation
operator|.
name|getUnassignedInfo
argument_list|()
decl_stmt|;
name|ClusterInfo
name|clusterInfo
init|=
name|explanation
operator|.
name|getClusterInfo
argument_list|()
decl_stmt|;
name|AllocateUnassignedDecision
name|allocateDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getAllocateDecision
argument_list|()
decl_stmt|;
name|MoveDecision
name|moveDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getMoveDecision
argument_list|()
decl_stmt|;
comment|// verify shard info
name|assertEquals
argument_list|(
literal|"idx"
argument_list|,
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shardId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isPrimary
argument_list|)
expr_stmt|;
comment|// verify current node info
name|assertEquals
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|shardRoutingState
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|currentNode
argument_list|)
expr_stmt|;
comment|// verify unassigned info
name|assertNull
argument_list|(
name|unassignedInfo
argument_list|)
expr_stmt|;
comment|// verify cluster info
name|verifyClusterInfo
argument_list|(
name|clusterInfo
argument_list|,
name|includeDiskInfo
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// verify decision object
name|assertFalse
argument_list|(
name|allocateDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|moveDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
argument_list|,
name|moveDecision
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rebalancing is not allowed, even though there is at least one node on which the shard can be allocated"
argument_list|,
name|moveDecision
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|moveDecision
operator|.
name|canRemain
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|moveDecision
operator|.
name|forceMove
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|moveDecision
operator|.
name|canRebalanceCluster
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|moveDecision
operator|.
name|getCanRemainDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|moveDecision
operator|.
name|getTargetNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|moveDecision
operator|.
name|getCurrentNodeRanking
argument_list|()
argument_list|)
expr_stmt|;
comment|// verifying cluster rebalance decision object
name|assertNotNull
argument_list|(
name|moveDecision
operator|.
name|getClusterRebalanceDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|NO
argument_list|,
name|moveDecision
operator|.
name|getClusterRebalanceDecision
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Decision
name|d
range|:
name|moveDecision
operator|.
name|getClusterRebalanceDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|label
argument_list|()
operator|.
name|equals
argument_list|(
literal|"enable"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|NO
argument_list|,
name|d
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no rebalancing is allowed due to index setting [index.routing.rebalance.enable=none]"
argument_list|,
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|YES
argument_list|,
name|d
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// verify node decisions
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|moveDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|NodeAllocationResult
name|result
init|=
name|moveDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getWeightRanking
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|YES
argument_list|,
name|result
operator|.
name|getNodeDecision
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeYesDecisions
condition|)
block|{
name|assertThat
argument_list|(
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Decision
name|d
range|:
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|YES
argument_list|,
name|d
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// verify JSON output
try|try
init|(
name|XContentParser
name|parser
init|=
name|getParser
argument_list|(
name|explanation
argument_list|)
init|)
block|{
name|verifyShardInfo
argument_list|(
name|parser
argument_list|,
literal|true
argument_list|,
name|includeDiskInfo
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_remain_on_current_node"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|YES
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_rebalance_cluster"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_rebalance_cluster_decisions"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|verifyDeciders
argument_list|(
name|parser
argument_list|,
name|AllocationDecision
operator|.
name|NO
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_rebalance_to_other_node"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rebalance_explanation"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rebalancing is not allowed, even though there is at least one node on which the shard can be allocated"
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNodeDecisions
argument_list|(
name|parser
argument_list|,
name|allNodeDecisions
argument_list|(
name|AllocationDecision
operator|.
name|YES
argument_list|,
literal|true
argument_list|)
argument_list|,
name|includeYesDecisions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testWorseBalance
specifier|public
name|void
name|testWorseBalance
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting a single node"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating an index with 5 shards, all allocated to the single node"
argument_list|)
expr_stmt|;
name|createIndexAndIndexData
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> setting balancing threshold really high, so it won't be met"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.balance.threshold"
argument_list|,
literal|1000.0f
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting another node, with the rebalance threshold so high, it should not get any shards"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|boolean
name|includeYesDecisions
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|includeDiskInfo
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|ClusterAllocationExplanation
name|explanation
init|=
name|runExplain
argument_list|(
literal|true
argument_list|,
name|includeYesDecisions
argument_list|,
name|includeDiskInfo
argument_list|)
decl_stmt|;
name|ShardId
name|shardId
init|=
name|explanation
operator|.
name|getShard
argument_list|()
decl_stmt|;
name|boolean
name|isPrimary
init|=
name|explanation
operator|.
name|isPrimary
argument_list|()
decl_stmt|;
name|ShardRoutingState
name|shardRoutingState
init|=
name|explanation
operator|.
name|getShardState
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|currentNode
init|=
name|explanation
operator|.
name|getCurrentNode
argument_list|()
decl_stmt|;
name|UnassignedInfo
name|unassignedInfo
init|=
name|explanation
operator|.
name|getUnassignedInfo
argument_list|()
decl_stmt|;
name|ClusterInfo
name|clusterInfo
init|=
name|explanation
operator|.
name|getClusterInfo
argument_list|()
decl_stmt|;
name|AllocateUnassignedDecision
name|allocateDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getAllocateDecision
argument_list|()
decl_stmt|;
name|MoveDecision
name|moveDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getMoveDecision
argument_list|()
decl_stmt|;
comment|// verify shard info
name|assertEquals
argument_list|(
literal|"idx"
argument_list|,
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shardId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isPrimary
argument_list|)
expr_stmt|;
comment|// verify current node info
name|assertEquals
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|shardRoutingState
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|currentNode
argument_list|)
expr_stmt|;
comment|// verify unassigned info
name|assertNull
argument_list|(
name|unassignedInfo
argument_list|)
expr_stmt|;
comment|// verify cluster info
name|verifyClusterInfo
argument_list|(
name|clusterInfo
argument_list|,
name|includeDiskInfo
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// verify decision object
name|assertFalse
argument_list|(
name|allocateDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|moveDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
argument_list|,
name|moveDecision
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cannot rebalance as no target node exists that can both allocate this shard and improve the cluster balance"
argument_list|,
name|moveDecision
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|moveDecision
operator|.
name|canRemain
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|moveDecision
operator|.
name|forceMove
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|moveDecision
operator|.
name|canRebalanceCluster
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|moveDecision
operator|.
name|getCanRemainDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|moveDecision
operator|.
name|getTargetNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|moveDecision
operator|.
name|getCurrentNodeRanking
argument_list|()
argument_list|)
expr_stmt|;
comment|// verifying cluster rebalance decision object
name|assertNotNull
argument_list|(
name|moveDecision
operator|.
name|getClusterRebalanceDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|YES
argument_list|,
name|moveDecision
operator|.
name|getClusterRebalanceDecision
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Decision
name|d
range|:
name|moveDecision
operator|.
name|getClusterRebalanceDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|YES
argument_list|,
name|d
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// verify node decisions
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|moveDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|NodeAllocationResult
name|result
init|=
name|moveDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getWeightRanking
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|WORSE_BALANCE
argument_list|,
name|result
operator|.
name|getNodeDecision
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeYesDecisions
condition|)
block|{
name|assertThat
argument_list|(
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Decision
name|d
range|:
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|YES
argument_list|,
name|d
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// verify JSON output
try|try
init|(
name|XContentParser
name|parser
init|=
name|getParser
argument_list|(
name|explanation
argument_list|)
init|)
block|{
name|verifyShardInfo
argument_list|(
name|parser
argument_list|,
literal|true
argument_list|,
name|includeDiskInfo
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_remain_on_current_node"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|YES
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_rebalance_cluster"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|YES
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_rebalance_to_other_node"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rebalance_explanation"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cannot rebalance as no target node exists that can both allocate this shard and improve the cluster balance"
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNodeDecisions
argument_list|(
name|parser
argument_list|,
name|allNodeDecisions
argument_list|(
name|AllocationDecision
operator|.
name|WORSE_BALANCE
argument_list|,
literal|true
argument_list|)
argument_list|,
name|includeYesDecisions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBetterBalanceButCannotAllocate
specifier|public
name|void
name|testBetterBalanceButCannotAllocate
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting a single node"
argument_list|)
expr_stmt|;
name|String
name|firstNode
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|ensureStableCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating an index with 5 shards, all allocated to the single node"
argument_list|)
expr_stmt|;
name|createIndexAndIndexData
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> setting up allocation filtering to only allow allocation to the current node"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.include._name"
argument_list|,
name|firstNode
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting another node, with filtering not allowing allocation to the new node, it should not get any shards"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|boolean
name|includeYesDecisions
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|includeDiskInfo
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|ClusterAllocationExplanation
name|explanation
init|=
name|runExplain
argument_list|(
literal|true
argument_list|,
name|includeYesDecisions
argument_list|,
name|includeDiskInfo
argument_list|)
decl_stmt|;
name|ShardId
name|shardId
init|=
name|explanation
operator|.
name|getShard
argument_list|()
decl_stmt|;
name|boolean
name|isPrimary
init|=
name|explanation
operator|.
name|isPrimary
argument_list|()
decl_stmt|;
name|ShardRoutingState
name|shardRoutingState
init|=
name|explanation
operator|.
name|getShardState
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|currentNode
init|=
name|explanation
operator|.
name|getCurrentNode
argument_list|()
decl_stmt|;
name|UnassignedInfo
name|unassignedInfo
init|=
name|explanation
operator|.
name|getUnassignedInfo
argument_list|()
decl_stmt|;
name|ClusterInfo
name|clusterInfo
init|=
name|explanation
operator|.
name|getClusterInfo
argument_list|()
decl_stmt|;
name|AllocateUnassignedDecision
name|allocateDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getAllocateDecision
argument_list|()
decl_stmt|;
name|MoveDecision
name|moveDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getMoveDecision
argument_list|()
decl_stmt|;
comment|// verify shard info
name|assertEquals
argument_list|(
literal|"idx"
argument_list|,
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shardId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isPrimary
argument_list|)
expr_stmt|;
comment|// verify current node info
name|assertEquals
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|shardRoutingState
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|currentNode
argument_list|)
expr_stmt|;
comment|// verify unassigned info
name|assertNull
argument_list|(
name|unassignedInfo
argument_list|)
expr_stmt|;
comment|// verify cluster info
name|verifyClusterInfo
argument_list|(
name|clusterInfo
argument_list|,
name|includeDiskInfo
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// verify decision object
name|assertFalse
argument_list|(
name|allocateDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|moveDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
argument_list|,
name|moveDecision
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cannot rebalance as no target node exists that can both allocate this shard and improve the cluster balance"
argument_list|,
name|moveDecision
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|moveDecision
operator|.
name|canRemain
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|moveDecision
operator|.
name|forceMove
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|moveDecision
operator|.
name|canRebalanceCluster
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|moveDecision
operator|.
name|getCanRemainDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|moveDecision
operator|.
name|getTargetNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|moveDecision
operator|.
name|getCurrentNodeRanking
argument_list|()
argument_list|)
expr_stmt|;
comment|// verifying cluster rebalance decision object
name|assertNotNull
argument_list|(
name|moveDecision
operator|.
name|getClusterRebalanceDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|YES
argument_list|,
name|moveDecision
operator|.
name|getClusterRebalanceDecision
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Decision
name|d
range|:
name|moveDecision
operator|.
name|getClusterRebalanceDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|YES
argument_list|,
name|d
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// verify node decisions
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|moveDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|NodeAllocationResult
name|result
init|=
name|moveDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getWeightRanking
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
argument_list|,
name|result
operator|.
name|getNodeDecision
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeYesDecisions
condition|)
block|{
name|assertThat
argument_list|(
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|primaryNodeName
init|=
name|primaryNodeName
argument_list|()
decl_stmt|;
for|for
control|(
name|Decision
name|d
range|:
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|label
argument_list|()
operator|.
name|equals
argument_list|(
literal|"filter"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|NO
argument_list|,
name|d
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node does not match index setting [index.routing.allocation.include] filters [_name:\""
operator|+
name|primaryNodeName
operator|+
literal|"\"]"
argument_list|,
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|YES
argument_list|,
name|d
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// verify JSON output
try|try
init|(
name|XContentParser
name|parser
init|=
name|getParser
argument_list|(
name|explanation
argument_list|)
init|)
block|{
name|verifyShardInfo
argument_list|(
name|parser
argument_list|,
literal|true
argument_list|,
name|includeDiskInfo
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_remain_on_current_node"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|YES
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_rebalance_cluster"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|YES
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_rebalance_to_other_node"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rebalance_explanation"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cannot rebalance as no target node exists that can both allocate this shard and improve the cluster balance"
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNodeDecisions
argument_list|(
name|parser
argument_list|,
name|allNodeDecisions
argument_list|(
name|AllocationDecision
operator|.
name|NO
argument_list|,
literal|true
argument_list|)
argument_list|,
name|includeYesDecisions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAssignedReplicaOnSpecificNode
specifier|public
name|void
name|testAssignedReplicaOnSpecificNode
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting 3 nodes"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodes
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating an index with 1 primary and 2 replicas"
argument_list|)
expr_stmt|;
name|String
name|excludedNode
init|=
name|nodes
operator|.
name|get
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|createIndexAndIndexData
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.exclude._name"
argument_list|,
name|excludedNode
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ActiveShardCount
operator|.
name|from
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|includeYesDecisions
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|includeDiskInfo
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|ClusterAllocationExplanation
name|explanation
init|=
name|runExplain
argument_list|(
literal|false
argument_list|,
name|replicaNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|includeYesDecisions
argument_list|,
name|includeDiskInfo
argument_list|)
decl_stmt|;
name|ShardId
name|shardId
init|=
name|explanation
operator|.
name|getShard
argument_list|()
decl_stmt|;
name|boolean
name|isPrimary
init|=
name|explanation
operator|.
name|isPrimary
argument_list|()
decl_stmt|;
name|ShardRoutingState
name|shardRoutingState
init|=
name|explanation
operator|.
name|getShardState
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|currentNode
init|=
name|explanation
operator|.
name|getCurrentNode
argument_list|()
decl_stmt|;
name|UnassignedInfo
name|unassignedInfo
init|=
name|explanation
operator|.
name|getUnassignedInfo
argument_list|()
decl_stmt|;
name|ClusterInfo
name|clusterInfo
init|=
name|explanation
operator|.
name|getClusterInfo
argument_list|()
decl_stmt|;
name|AllocateUnassignedDecision
name|allocateDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getAllocateDecision
argument_list|()
decl_stmt|;
name|MoveDecision
name|moveDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getMoveDecision
argument_list|()
decl_stmt|;
comment|// verify shard info
name|assertEquals
argument_list|(
literal|"idx"
argument_list|,
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shardId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isPrimary
argument_list|)
expr_stmt|;
comment|// verify current node info
name|assertEquals
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|shardRoutingState
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|currentNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|replicaNode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|currentNode
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify unassigned info
name|assertNull
argument_list|(
name|unassignedInfo
argument_list|)
expr_stmt|;
comment|// verify cluster info
name|verifyClusterInfo
argument_list|(
name|clusterInfo
argument_list|,
name|includeDiskInfo
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// verify decision objects
name|assertFalse
argument_list|(
name|allocateDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|moveDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
argument_list|,
name|moveDecision
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rebalancing is not allowed"
argument_list|,
name|moveDecision
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|moveDecision
operator|.
name|canRemain
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|moveDecision
operator|.
name|forceMove
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|moveDecision
operator|.
name|canRebalanceCluster
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|moveDecision
operator|.
name|getCanRemainDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|moveDecision
operator|.
name|getTargetNode
argument_list|()
argument_list|)
expr_stmt|;
comment|// verifying cluster rebalance decision object
name|assertNotNull
argument_list|(
name|moveDecision
operator|.
name|getClusterRebalanceDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|NO
argument_list|,
name|moveDecision
operator|.
name|getClusterRebalanceDecision
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify node decisions
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|moveDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeAllocationResult
name|result
range|:
name|moveDecision
operator|.
name|getNodeDecisions
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|result
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getWeightRanking
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
argument_list|,
name|result
operator|.
name|getNodeDecision
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeYesDecisions
condition|)
block|{
name|assertThat
argument_list|(
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Decision
name|d
range|:
name|result
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|type
argument_list|()
operator|==
name|Decision
operator|.
name|Type
operator|.
name|NO
condition|)
block|{
name|assertThat
argument_list|(
name|d
operator|.
name|label
argument_list|()
argument_list|,
name|isOneOf
argument_list|(
literal|"filter"
argument_list|,
literal|"same_shard"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|d
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// verify JSON output
try|try
init|(
name|XContentParser
name|parser
init|=
name|getParser
argument_list|(
name|explanation
argument_list|)
init|)
block|{
name|verifyShardInfo
argument_list|(
name|parser
argument_list|,
literal|false
argument_list|,
name|includeDiskInfo
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_remain_on_current_node"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|YES
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_rebalance_cluster"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_rebalance_cluster_decisions"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|verifyDeciders
argument_list|(
name|parser
argument_list|,
name|AllocationDecision
operator|.
name|NO
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_rebalance_to_other_node"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rebalance_explanation"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rebalancing is not allowed"
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNodeDecisions
argument_list|(
name|parser
argument_list|,
name|allNodeDecisions
argument_list|(
name|AllocationDecision
operator|.
name|NO
argument_list|,
literal|false
argument_list|)
argument_list|,
name|includeYesDecisions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCannotAllocateStaleReplicaExplanation
specifier|public
name|void
name|testCannotAllocateStaleReplicaExplanation
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting 3 nodes"
argument_list|)
expr_stmt|;
name|String
name|masterNode
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startDataOnlyNodes
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating an index with 1 primary and 1 replica"
argument_list|)
expr_stmt|;
name|createIndexAndIndexData
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.exclude._name"
argument_list|,
name|masterNode
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ActiveShardCount
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> stop node with the replica shard"
argument_list|)
expr_stmt|;
name|String
name|stoppedNode
init|=
name|replicaNode
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|InternalTestCluster
operator|.
name|nameFilter
argument_list|(
name|stoppedNode
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> index more data, now the replica is stale"
argument_list|)
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> stop the node with the primary"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|InternalTestCluster
operator|.
name|nameFilter
argument_list|(
name|primaryNodeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> restart the node with the stale replica"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.include._name"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|String
name|restartedNode
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
name|stoppedNode
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|// wait until the system has fetched shard data and we know there is no valid shard copy
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
name|ClusterAllocationExplanation
name|explanation
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareAllocationExplain
argument_list|()
operator|.
name|setIndex
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setShard
argument_list|(
literal|0
argument_list|)
operator|.
name|setPrimary
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getExplanation
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getAllocateDecision
argument_list|()
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO_VALID_SHARD_COPY
argument_list|,
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getAllocateDecision
argument_list|()
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|boolean
name|includeYesDecisions
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|includeDiskInfo
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|ClusterAllocationExplanation
name|explanation
init|=
name|runExplain
argument_list|(
literal|true
argument_list|,
name|includeYesDecisions
argument_list|,
name|includeDiskInfo
argument_list|)
decl_stmt|;
name|ShardId
name|shardId
init|=
name|explanation
operator|.
name|getShard
argument_list|()
decl_stmt|;
name|boolean
name|isPrimary
init|=
name|explanation
operator|.
name|isPrimary
argument_list|()
decl_stmt|;
name|ShardRoutingState
name|shardRoutingState
init|=
name|explanation
operator|.
name|getShardState
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|currentNode
init|=
name|explanation
operator|.
name|getCurrentNode
argument_list|()
decl_stmt|;
name|UnassignedInfo
name|unassignedInfo
init|=
name|explanation
operator|.
name|getUnassignedInfo
argument_list|()
decl_stmt|;
name|AllocateUnassignedDecision
name|allocateDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getAllocateDecision
argument_list|()
decl_stmt|;
name|MoveDecision
name|moveDecision
init|=
name|explanation
operator|.
name|getShardAllocationDecision
argument_list|()
operator|.
name|getMoveDecision
argument_list|()
decl_stmt|;
comment|// verify shard info
name|assertEquals
argument_list|(
literal|"idx"
argument_list|,
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shardId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isPrimary
argument_list|)
expr_stmt|;
comment|// verify current node info
name|assertEquals
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|,
name|shardRoutingState
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|currentNode
argument_list|)
expr_stmt|;
comment|// verify unassigned info
name|assertNotNull
argument_list|(
name|unassignedInfo
argument_list|)
expr_stmt|;
comment|// verify decision object
name|assertTrue
argument_list|(
name|allocateDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|moveDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO_VALID_SHARD_COPY
argument_list|,
name|allocateDecision
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocateDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeAllocationResult
name|nodeAllocationResult
range|:
name|allocateDecision
operator|.
name|getNodeDecisions
argument_list|()
control|)
block|{
if|if
condition|(
name|nodeAllocationResult
operator|.
name|getNode
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|restartedNode
argument_list|)
condition|)
block|{
name|assertNotNull
argument_list|(
name|nodeAllocationResult
operator|.
name|getShardStoreInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodeAllocationResult
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodeAllocationResult
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|isInSync
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nodeAllocationResult
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|getStoreException
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|nodeAllocationResult
operator|.
name|getShardStoreInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nodeAllocationResult
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodeAllocationResult
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|isInSync
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nodeAllocationResult
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|getStoreException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// verify JSON output
try|try
init|(
name|XContentParser
name|parser
init|=
name|getParser
argument_list|(
name|explanation
argument_list|)
init|)
block|{
name|verifyShardInfo
argument_list|(
name|parser
argument_list|,
literal|true
argument_list|,
name|includeDiskInfo
argument_list|,
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can_allocate"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO_VALID_SHARD_COPY
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"allocate_explanation"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cannot allocate because all found copies of the shard are either stale or corrupt"
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStaleShardCopyNodeDecisions
argument_list|(
name|parser
argument_list|,
literal|2
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|restartedNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyClusterInfo
specifier|private
name|void
name|verifyClusterInfo
parameter_list|(
name|ClusterInfo
name|clusterInfo
parameter_list|,
name|boolean
name|includeDiskInfo
parameter_list|,
name|int
name|numNodes
parameter_list|)
block|{
if|if
condition|(
name|includeDiskInfo
condition|)
block|{
name|assertThat
argument_list|(
name|clusterInfo
operator|.
name|getNodeMostAvailableDiskUsages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterInfo
operator|.
name|getNodeLeastAvailableDiskUsages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterInfo
operator|.
name|getNodeMostAvailableDiskUsages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|numNodes
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterInfo
operator|.
name|getNodeLeastAvailableDiskUsages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|numNodes
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|clusterInfo
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runExplain
specifier|private
name|ClusterAllocationExplanation
name|runExplain
parameter_list|(
name|boolean
name|primary
parameter_list|,
name|boolean
name|includeYesDecisions
parameter_list|,
name|boolean
name|includeDiskInfo
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|runExplain
argument_list|(
name|primary
argument_list|,
literal|null
argument_list|,
name|includeYesDecisions
argument_list|,
name|includeDiskInfo
argument_list|)
return|;
block|}
DECL|method|runExplain
specifier|private
name|ClusterAllocationExplanation
name|runExplain
parameter_list|(
name|boolean
name|primary
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|boolean
name|includeYesDecisions
parameter_list|,
name|boolean
name|includeDiskInfo
parameter_list|)
throws|throws
name|Exception
block|{
name|ClusterAllocationExplanation
name|explanation
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareAllocationExplain
argument_list|()
operator|.
name|setIndex
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setShard
argument_list|(
literal|0
argument_list|)
operator|.
name|setPrimary
argument_list|(
name|primary
argument_list|)
operator|.
name|setIncludeYesDecisions
argument_list|(
name|includeYesDecisions
argument_list|)
operator|.
name|setIncludeDiskInfo
argument_list|(
name|includeDiskInfo
argument_list|)
operator|.
name|setCurrentNode
argument_list|(
name|nodeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getExplanation
argument_list|()
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|XContentBuilder
name|builder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
name|builder
operator|.
name|humanReadable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> explain json output: \n{}"
argument_list|,
name|explanation
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|explanation
return|;
block|}
DECL|method|createIndexAndIndexData
specifier|private
name|void
name|createIndexAndIndexData
parameter_list|(
name|int
name|numPrimaries
parameter_list|,
name|int
name|numReplicas
parameter_list|)
block|{
name|createIndexAndIndexData
argument_list|(
name|numPrimaries
argument_list|,
name|numReplicas
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|ActiveShardCount
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|method|createIndexAndIndexData
specifier|private
name|void
name|createIndexAndIndexData
parameter_list|(
name|int
name|numPrimaries
parameter_list|,
name|int
name|numReplicas
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|ActiveShardCount
name|activeShardCount
parameter_list|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
name|numPrimaries
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
name|numReplicas
argument_list|)
operator|.
name|put
argument_list|(
name|settings
argument_list|)
argument_list|)
operator|.
name|setWaitForActiveShards
argument_list|(
name|activeShardCount
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|activeShardCount
operator|!=
name|ActiveShardCount
operator|.
name|NONE
condition|)
block|{
name|indexData
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|indexData
specifier|private
name|void
name|indexData
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|index
argument_list|(
literal|"idx"
argument_list|,
literal|"t"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"f1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|flushAndRefresh
argument_list|(
literal|"idx"
argument_list|)
expr_stmt|;
block|}
DECL|method|primaryNodeName
specifier|private
name|String
name|primaryNodeName
parameter_list|()
block|{
name|ClusterState
name|clusterState
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|String
name|nodeId
init|=
name|clusterState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|currentNodeId
argument_list|()
decl_stmt|;
return|return
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|nodeId
argument_list|)
operator|.
name|node
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|replicaNode
specifier|private
name|DiscoveryNode
name|replicaNode
parameter_list|()
block|{
name|ClusterState
name|clusterState
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|String
name|nodeId
init|=
name|clusterState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|replicaShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentNodeId
argument_list|()
decl_stmt|;
return|return
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|nodeId
argument_list|)
operator|.
name|node
argument_list|()
return|;
block|}
DECL|method|getParser
specifier|private
name|XContentParser
name|getParser
parameter_list|(
name|ClusterAllocationExplanation
name|explanation
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
return|return
name|createParser
argument_list|(
name|explanation
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
argument_list|)
return|;
block|}
DECL|method|verifyShardInfo
specifier|private
name|void
name|verifyShardInfo
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|boolean
name|primary
parameter_list|,
name|boolean
name|includeDiskInfo
parameter_list|,
name|ShardRoutingState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"index"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"idx"
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"shard"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"primary"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|primary
argument_list|,
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"current_state"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|state
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|ShardRoutingState
operator|.
name|UNASSIGNED
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unassigned_info"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|Token
name|token
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
comment|// until we reach end of unassigned_info
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|assertNotEquals
argument_list|(
literal|"delayed"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
comment|// we should never display "delayed" from unassigned info
if|if
condition|(
name|parser
operator|.
name|currentName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"last_allocation_status"
argument_list|)
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|,
name|isOneOf
argument_list|(
name|AllocationDecision
operator|.
name|NO
operator|.
name|toString
argument_list|()
argument_list|,
name|AllocationDecision
operator|.
name|NO_VALID_SHARD_COPY
operator|.
name|toString
argument_list|()
argument_list|,
name|AllocationDecision
operator|.
name|AWAITING_INFO
operator|.
name|toString
argument_list|()
argument_list|,
name|AllocationDecision
operator|.
name|NO_ATTEMPT
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"current_node"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|Token
name|token
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
comment|// until we reach end of current_node
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|assertTrue
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"id"
argument_list|)
operator|||
name|parser
operator|.
name|currentName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"name"
argument_list|)
operator|||
name|parser
operator|.
name|currentName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"transport_address"
argument_list|)
operator|||
name|parser
operator|.
name|currentName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"weight_ranking"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|token
operator|.
name|isValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|includeDiskInfo
condition|)
block|{
comment|// disk info is included, just verify the object is there
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cluster_info"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numObjects
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|numObjects
operator|>
literal|0
condition|)
block|{
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
operator|++
name|numObjects
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
operator|--
name|numObjects
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|verifyStaleShardCopyNodeDecisions
specifier|private
name|void
name|verifyStaleShardCopyNodeDecisions
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|int
name|numNodes
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|foundStores
parameter_list|)
throws|throws
name|IOException
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node_allocation_decisions"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_ARRAY
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNodes
condition|;
name|i
operator|++
control|)
block|{
name|String
name|nodeName
init|=
name|verifyNodeDecisionPrologue
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"store"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|foundStores
operator|.
name|contains
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
comment|// shard data was found on the node, but it is stale
name|assertEquals
argument_list|(
literal|"in_sync"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"allocation_id"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no shard data was found on the node
name|assertEquals
argument_list|(
literal|"found"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_ARRAY
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyNodeDecisions
specifier|private
name|void
name|verifyNodeDecisions
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AllocationDecision
argument_list|>
name|expectedNodeDecisions
parameter_list|,
name|boolean
name|includeYesDecisions
parameter_list|,
name|boolean
name|reuseStore
parameter_list|)
throws|throws
name|IOException
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node_allocation_decisions"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_ARRAY
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|encounteredNo
init|=
literal|false
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
name|expectedNodeDecisions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNodes
condition|;
name|i
operator|++
control|)
block|{
name|String
name|nodeName
init|=
name|verifyNodeDecisionPrologue
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|AllocationDecision
name|allocationDecision
init|=
name|expectedNodeDecisions
operator|.
name|get
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|allocationDecision
operator|.
name|toString
argument_list|()
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|allocationDecision
operator|!=
name|AllocationDecision
operator|.
name|YES
condition|)
block|{
name|encounteredNo
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
literal|"encountered a YES node decision after a NO node decision - sort order is wrong"
argument_list|,
name|encounteredNo
argument_list|)
expr_stmt|;
block|}
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"store"
operator|.
name|equals
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"store info should not be present"
argument_list|,
name|reuseStore
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"matching_size_in_bytes"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|longValue
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reuseStore
operator|==
literal|false
condition|)
block|{
name|assertEquals
argument_list|(
literal|"weight_ranking"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|allocationDecision
operator|==
name|AllocationDecision
operator|.
name|NO
operator|||
name|allocationDecision
operator|==
name|AllocationDecision
operator|.
name|THROTTLED
operator|||
name|includeYesDecisions
condition|)
block|{
name|assertEquals
argument_list|(
literal|"deciders"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|atLeastOneMatchingDecisionFound
init|=
name|verifyDeciders
argument_list|(
name|parser
argument_list|,
name|allocationDecision
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|allocationDecision
operator|==
name|AllocationDecision
operator|.
name|NO
operator|||
name|allocationDecision
operator|==
name|AllocationDecision
operator|.
name|THROTTLED
condition|)
block|{
name|assertTrue
argument_list|(
literal|"decision was "
operator|+
name|allocationDecision
operator|+
literal|" but found no node's with that decision"
argument_list|,
name|atLeastOneMatchingDecisionFound
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_ARRAY
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyNodeDecisionPrologue
specifier|private
name|String
name|verifyNodeDecisionPrologue
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node_id"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node_name"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|String
name|nodeName
init|=
name|parser
operator|.
name|text
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"transport_address"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node_decision"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
return|return
name|nodeName
return|;
block|}
DECL|method|verifyDeciders
specifier|private
name|boolean
name|verifyDeciders
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|AllocationDecision
name|allocationDecision
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_ARRAY
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|atLeastOneMatchingDecisionFound
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"decider"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"decision"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|String
name|decisionText
init|=
name|parser
operator|.
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|allocationDecision
operator|==
name|AllocationDecision
operator|.
name|NO
operator|&&
name|decisionText
operator|.
name|equals
argument_list|(
literal|"NO"
argument_list|)
operator|||
operator|(
name|allocationDecision
operator|==
name|AllocationDecision
operator|.
name|THROTTLED
operator|&&
name|decisionText
operator|.
name|equals
argument_list|(
literal|"THROTTLE"
argument_list|)
operator|)
operator|)
condition|)
block|{
name|atLeastOneMatchingDecisionFound
operator|=
literal|true
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|decisionText
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"explanation"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|atLeastOneMatchingDecisionFound
return|;
block|}
DECL|method|allNodeDecisions
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AllocationDecision
argument_list|>
name|allNodeDecisions
parameter_list|(
name|AllocationDecision
name|allocationDecision
parameter_list|,
name|boolean
name|removePrimary
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|AllocationDecision
argument_list|>
name|nodeDecisions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allNodes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
argument_list|)
decl_stmt|;
name|allNodes
operator|.
name|remove
argument_list|(
name|removePrimary
condition|?
name|primaryNodeName
argument_list|()
else|:
name|replicaNode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|nodeName
range|:
name|allNodes
control|)
block|{
name|nodeDecisions
operator|.
name|put
argument_list|(
name|nodeName
argument_list|,
name|allocationDecision
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeDecisions
return|;
block|}
block|}
end_class

end_unit

