begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.node.tasks
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|FailedNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ListenableActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|TaskOperationFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|cancel
operator|.
name|CancelTasksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|get
operator|.
name|GetTaskResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|list
operator|.
name|ListTasksAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|list
operator|.
name|ListTasksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|refresh
operator|.
name|RefreshAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|upgrade
operator|.
name|post
operator|.
name|UpgradeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|validate
operator|.
name|query
operator|.
name|ValidateQueryAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|fieldstats
operator|.
name|FieldStatsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|TransportReplicationActionTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskResultsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|tasks
operator|.
name|MockTaskManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|tasks
operator|.
name|MockTaskManagerListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ReceiveTimeoutTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueMillis
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueSeconds
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|empty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|emptyCollectionOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_comment
comment|/**  * Integration tests for task management API  *<p>  * We need at least 2 nodes so we have a master node a non-master node  */
end_comment

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ESIntegTestCase
operator|.
name|Scope
operator|.
name|SUITE
argument_list|,
name|minNumDataNodes
operator|=
literal|2
argument_list|,
name|transportClientRatio
operator|=
literal|0.0
argument_list|)
DECL|class|TasksIT
specifier|public
class|class
name|TasksIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|listeners
specifier|private
name|Map
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|,
name|RecordingTaskManagerListener
argument_list|>
name|listeners
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|addMockTransportService
specifier|protected
name|boolean
name|addMockTransportService
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|MockTransportService
operator|.
name|TestPlugin
operator|.
name|class
argument_list|,
name|TestTaskPlugin
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|transportClientPlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|transportClientPlugins
parameter_list|()
block|{
return|return
name|nodePlugins
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|super
operator|.
name|nodeSettings
argument_list|(
name|nodeOrdinal
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|MockTaskManager
operator|.
name|USE_MOCK_TASK_MANAGER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|testTaskCounts
specifier|public
name|void
name|testTaskCounts
parameter_list|()
block|{
comment|// Run only on data nodes
name|ListTasksResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareListTasks
argument_list|(
literal|"data:true"
argument_list|)
operator|.
name|setActions
argument_list|(
name|ListTasksAction
operator|.
name|NAME
operator|+
literal|"[n]"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|cluster
argument_list|()
operator|.
name|numDataNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMasterNodeOperationTasks
specifier|public
name|void
name|testMasterNodeOperationTasks
parameter_list|()
block|{
name|registerTaskManageListeners
argument_list|(
name|ClusterHealthAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
comment|// First run the health on the master node - should produce only one task on the master node
name|internalCluster
argument_list|()
operator|.
name|masterClient
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numberOfEvents
argument_list|(
name|ClusterHealthAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|)
expr_stmt|;
comment|// counting only registration events
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numberOfEvents
argument_list|(
name|ClusterHealthAction
operator|.
name|NAME
argument_list|,
name|event
lambda|->
name|event
operator|.
name|v1
argument_list|()
operator|==
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// counting only unregistration events
name|resetTaskManageListeners
argument_list|(
name|ClusterHealthAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
comment|// Now run the health on a non-master node - should produce one task on master and one task on another node
name|internalCluster
argument_list|()
operator|.
name|nonMasterClient
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|numberOfEvents
argument_list|(
name|ClusterHealthAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|)
expr_stmt|;
comment|// counting only registration events
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|numberOfEvents
argument_list|(
name|ClusterHealthAction
operator|.
name|NAME
argument_list|,
name|event
lambda|->
name|event
operator|.
name|v1
argument_list|()
operator|==
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// counting only unregistration events
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|tasks
init|=
name|findEvents
argument_list|(
name|ClusterHealthAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
decl_stmt|;
comment|// Verify that one of these tasks is a parent of another task
if|if
condition|(
name|tasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getParentTaskId
argument_list|()
operator|.
name|isSet
argument_list|()
condition|)
block|{
name|assertParentTask
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|tasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|tasks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertParentTask
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|tasks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|tasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTransportReplicationAllShardsTasks
specifier|public
name|void
name|testTransportReplicationAllShardsTasks
parameter_list|()
block|{
name|registerTaskManageListeners
argument_list|(
name|FieldStatsAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
comment|// main task
name|registerTaskManageListeners
argument_list|(
name|FieldStatsAction
operator|.
name|NAME
operator|+
literal|"[s]"
argument_list|)
expr_stmt|;
comment|// shard level tasks
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// Make sure all shards are allocated
name|client
argument_list|()
operator|.
name|prepareFieldStats
argument_list|()
operator|.
name|setFields
argument_list|(
literal|"field"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// the field stats operation should produce one main task
name|NumShards
name|numberOfShards
init|=
name|getNumShards
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numberOfEvents
argument_list|(
name|FieldStatsAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|)
expr_stmt|;
comment|// and then one operation per shard
name|assertEquals
argument_list|(
name|numberOfShards
operator|.
name|numPrimaries
argument_list|,
name|numberOfEvents
argument_list|(
name|FieldStatsAction
operator|.
name|NAME
operator|+
literal|"[s]"
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|)
expr_stmt|;
comment|// the shard level tasks should have the main task as a parent
name|assertParentTask
argument_list|(
name|findEvents
argument_list|(
name|FieldStatsAction
operator|.
name|NAME
operator|+
literal|"[s]"
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|,
name|findEvents
argument_list|(
name|FieldStatsAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransportBroadcastByNodeTasks
specifier|public
name|void
name|testTransportBroadcastByNodeTasks
parameter_list|()
block|{
name|registerTaskManageListeners
argument_list|(
name|UpgradeAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
comment|// main task
name|registerTaskManageListeners
argument_list|(
name|UpgradeAction
operator|.
name|NAME
operator|+
literal|"[n]"
argument_list|)
expr_stmt|;
comment|// node level tasks
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// Make sure all shards are allocated
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpgrade
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// the percolate operation should produce one main task
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numberOfEvents
argument_list|(
name|UpgradeAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|)
expr_stmt|;
comment|// and then one operation per each node where shards are located
name|assertEquals
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|nodesInclude
argument_list|(
literal|"test"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|numberOfEvents
argument_list|(
name|UpgradeAction
operator|.
name|NAME
operator|+
literal|"[n]"
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|)
expr_stmt|;
comment|// all node level tasks should have the main task as a parent
name|assertParentTask
argument_list|(
name|findEvents
argument_list|(
name|UpgradeAction
operator|.
name|NAME
operator|+
literal|"[n]"
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|,
name|findEvents
argument_list|(
name|UpgradeAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransportReplicationSingleShardTasks
specifier|public
name|void
name|testTransportReplicationSingleShardTasks
parameter_list|()
block|{
name|registerTaskManageListeners
argument_list|(
name|ValidateQueryAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
comment|// main task
name|registerTaskManageListeners
argument_list|(
name|ValidateQueryAction
operator|.
name|NAME
operator|+
literal|"[s]"
argument_list|)
expr_stmt|;
comment|// shard level tasks
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// Make sure all shards are allocated
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareValidateQuery
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// the validate operation should produce one main task
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numberOfEvents
argument_list|(
name|ValidateQueryAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|)
expr_stmt|;
comment|// and then one operation
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numberOfEvents
argument_list|(
name|ValidateQueryAction
operator|.
name|NAME
operator|+
literal|"[s]"
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|)
expr_stmt|;
comment|// the shard level operation should have the main task as its parent
name|assertParentTask
argument_list|(
name|findEvents
argument_list|(
name|ValidateQueryAction
operator|.
name|NAME
operator|+
literal|"[s]"
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|,
name|findEvents
argument_list|(
name|ValidateQueryAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransportBroadcastReplicationTasks
specifier|public
name|void
name|testTransportBroadcastReplicationTasks
parameter_list|()
block|{
name|registerTaskManageListeners
argument_list|(
name|RefreshAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
comment|// main task
name|registerTaskManageListeners
argument_list|(
name|RefreshAction
operator|.
name|NAME
operator|+
literal|"[s]"
argument_list|)
expr_stmt|;
comment|// shard level tasks
name|registerTaskManageListeners
argument_list|(
name|RefreshAction
operator|.
name|NAME
operator|+
literal|"[s][*]"
argument_list|)
expr_stmt|;
comment|// primary and replica shard tasks
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// Make sure all shards are allocated
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// the refresh operation should produce one main task
name|NumShards
name|numberOfShards
init|=
name|getNumShards
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"number of shards, total: [{}], primaries: [{}] "
argument_list|,
name|numberOfShards
operator|.
name|totalNumShards
argument_list|,
name|numberOfShards
operator|.
name|numPrimaries
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"main events {}"
argument_list|,
name|numberOfEvents
argument_list|(
name|RefreshAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"main event node {}"
argument_list|,
name|findEvents
argument_list|(
name|RefreshAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTaskId
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"[s] events {}"
argument_list|,
name|numberOfEvents
argument_list|(
name|RefreshAction
operator|.
name|NAME
operator|+
literal|"[s]"
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"[s][*] events {}"
argument_list|,
name|numberOfEvents
argument_list|(
name|RefreshAction
operator|.
name|NAME
operator|+
literal|"[s][*]"
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"nodes with the index {}"
argument_list|,
name|internalCluster
argument_list|()
operator|.
name|nodesInclude
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numberOfEvents
argument_list|(
name|RefreshAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Because it's broadcast replication action we will have as many [s] level requests
comment|// as we have primary shards on the coordinating node plus we will have one task per primary outside of the
comment|// coordinating node due to replication.
comment|// If all primaries are on the coordinating node, the number of tasks should be equal to the number of primaries
comment|// If all primaries are not on the coordinating node, the number of tasks should be equal to the number of primaries times 2
name|assertThat
argument_list|(
name|numberOfEvents
argument_list|(
name|RefreshAction
operator|.
name|NAME
operator|+
literal|"[s]"
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|numberOfShards
operator|.
name|numPrimaries
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|numberOfEvents
argument_list|(
name|RefreshAction
operator|.
name|NAME
operator|+
literal|"[s]"
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|numberOfShards
operator|.
name|numPrimaries
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that all [s] events have the proper parent
comment|// This is complicated because if the shard task runs on the same node it has main task as a parent
comment|// but if it runs on non-coordinating node it would have another intermediate [s] task on the coordinating node as a parent
name|TaskInfo
name|mainTask
init|=
name|findEvents
argument_list|(
name|RefreshAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|sTasks
init|=
name|findEvents
argument_list|(
name|RefreshAction
operator|.
name|NAME
operator|+
literal|"[s]"
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskInfo
name|taskInfo
range|:
name|sTasks
control|)
block|{
if|if
condition|(
name|mainTask
operator|.
name|getTaskId
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|taskInfo
operator|.
name|getTaskId
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
comment|// This shard level task runs on the same node as a parent task - it should have the main task as a direct parent
name|assertParentTask
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|taskInfo
argument_list|)
argument_list|,
name|mainTask
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|description
init|=
name|taskInfo
operator|.
name|getDescription
argument_list|()
decl_stmt|;
comment|// This shard level task runs on another node - it should have a corresponding shard level task on the node where main task
comment|// is running
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|sTasksOnRequestingNode
init|=
name|findEvents
argument_list|(
name|RefreshAction
operator|.
name|NAME
operator|+
literal|"[s]"
argument_list|,
name|event
lambda|->
name|event
operator|.
name|v1
argument_list|()
operator|&&
name|mainTask
operator|.
name|getTaskId
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|event
operator|.
name|v2
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|&&
name|description
operator|.
name|equals
argument_list|(
name|event
operator|.
name|v2
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// There should be only one parent task
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sTasksOnRequestingNode
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertParentTask
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|taskInfo
argument_list|)
argument_list|,
name|sTasksOnRequestingNode
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we will have as many [s][p] and [s][r] tasks as we have primary and replica shards
name|assertEquals
argument_list|(
name|numberOfShards
operator|.
name|totalNumShards
argument_list|,
name|numberOfEvents
argument_list|(
name|RefreshAction
operator|.
name|NAME
operator|+
literal|"[s][*]"
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|)
expr_stmt|;
comment|// we the [s][p] and [s][r] tasks should have a corresponding [s] task on the same node as a parent
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|spEvents
init|=
name|findEvents
argument_list|(
name|RefreshAction
operator|.
name|NAME
operator|+
literal|"[s][*]"
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskInfo
name|taskInfo
range|:
name|spEvents
control|)
block|{
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|sTask
decl_stmt|;
if|if
condition|(
name|taskInfo
operator|.
name|getAction
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"[s][p]"
argument_list|)
condition|)
block|{
comment|// A [s][p] level task should have a corresponding [s] level task on the same node
name|sTask
operator|=
name|findEvents
argument_list|(
name|RefreshAction
operator|.
name|NAME
operator|+
literal|"[s]"
argument_list|,
name|event
lambda|->
name|event
operator|.
name|v1
argument_list|()
operator|&&
name|taskInfo
operator|.
name|getTaskId
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|event
operator|.
name|v2
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|&&
name|taskInfo
operator|.
name|getDescription
argument_list|()
operator|.
name|equals
argument_list|(
name|event
operator|.
name|v2
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// A [s][r] level task should have a corresponding [s] level task on the a different node (where primary is located)
name|sTask
operator|=
name|findEvents
argument_list|(
name|RefreshAction
operator|.
name|NAME
operator|+
literal|"[s]"
argument_list|,
name|event
lambda|->
name|event
operator|.
name|v1
argument_list|()
operator|&&
name|taskInfo
operator|.
name|getParentTaskId
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|event
operator|.
name|v2
argument_list|()
operator|.
name|getTaskId
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|&&
name|taskInfo
operator|.
name|getDescription
argument_list|()
operator|.
name|equals
argument_list|(
name|event
operator|.
name|v2
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// There should be only one parent task
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sTask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertParentTask
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|taskInfo
argument_list|)
argument_list|,
name|sTask
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTransportBulkTasks
specifier|public
name|void
name|testTransportBulkTasks
parameter_list|()
block|{
name|registerTaskManageListeners
argument_list|(
name|BulkAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
comment|// main task
name|registerTaskManageListeners
argument_list|(
name|BulkAction
operator|.
name|NAME
operator|+
literal|"[s]"
argument_list|)
expr_stmt|;
comment|// shard task
name|registerTaskManageListeners
argument_list|(
name|BulkAction
operator|.
name|NAME
operator|+
literal|"[s][p]"
argument_list|)
expr_stmt|;
comment|// shard task on primary
name|registerTaskManageListeners
argument_list|(
name|BulkAction
operator|.
name|NAME
operator|+
literal|"[s][r]"
argument_list|)
expr_stmt|;
comment|// shard task on replica
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// Make sure all shards are allocated to catch replication tasks
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"test_id"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"foo\": \"bar\"}"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// the bulk operation should produce one main task
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numberOfEvents
argument_list|(
name|BulkAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|)
expr_stmt|;
comment|// we should also get 1 or 2 [s] operation with main operation as a parent
comment|// in case the primary is located on the coordinating node we will have 1 operation, otherwise - 2
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|shardTasks
init|=
name|findEvents
argument_list|(
name|BulkAction
operator|.
name|NAME
operator|+
literal|"[s]"
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|shardTasks
operator|.
name|size
argument_list|()
argument_list|,
name|allOf
argument_list|(
name|lessThanOrEqualTo
argument_list|(
literal|2
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Select the effective shard task
name|TaskInfo
name|shardTask
decl_stmt|;
if|if
condition|(
name|shardTasks
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// we have only one task - it's going to be the parent task for all [s][p] and [s][r] tasks
name|shardTask
operator|=
name|shardTasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// and it should have the main task as a parent
name|assertParentTask
argument_list|(
name|shardTask
argument_list|,
name|findEvents
argument_list|(
name|BulkAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|shardTasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getParentTaskId
argument_list|()
operator|.
name|equals
argument_list|(
name|shardTasks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getTaskId
argument_list|()
argument_list|)
condition|)
block|{
comment|// task 1 is the parent of task 0, that means that task 0 will control [s][p] and [s][r] tasks
name|shardTask
operator|=
name|shardTasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// in turn the parent of the task 1 should be the main task
name|assertParentTask
argument_list|(
name|shardTasks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|findEvents
argument_list|(
name|BulkAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// otherwise task 1 will control [s][p] and [s][r] tasks
name|shardTask
operator|=
name|shardTasks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// in turn the parent of the task 0 should be the main task
name|assertParentTask
argument_list|(
name|shardTasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|findEvents
argument_list|(
name|BulkAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we should also get one [s][p] operation with shard operation as a parent
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numberOfEvents
argument_list|(
name|BulkAction
operator|.
name|NAME
operator|+
literal|"[s][p]"
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|)
expr_stmt|;
name|assertParentTask
argument_list|(
name|findEvents
argument_list|(
name|BulkAction
operator|.
name|NAME
operator|+
literal|"[s][p]"
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|,
name|shardTask
argument_list|)
expr_stmt|;
comment|// we should get as many [s][r] operations as we have replica shards
comment|// they all should have the same shard task as a parent
name|assertEquals
argument_list|(
name|getNumShards
argument_list|(
literal|"test"
argument_list|)
operator|.
name|numReplicas
argument_list|,
name|numberOfEvents
argument_list|(
name|BulkAction
operator|.
name|NAME
operator|+
literal|"[s][r]"
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|)
expr_stmt|;
name|assertParentTask
argument_list|(
name|findEvents
argument_list|(
name|BulkAction
operator|.
name|NAME
operator|+
literal|"[s][r]"
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
argument_list|,
name|shardTask
argument_list|)
expr_stmt|;
block|}
comment|/**      * Very basic "is it plugged in" style test that indexes a document and makes sure that you can fetch the status of the process. The      * goal here is to verify that the large moving parts that make fetching task status work fit together rather than to verify any      * particular status results from indexing. For that, look at {@link TransportReplicationActionTests}. We intentionally don't use the      * task recording mechanism used in other places in this test so we can make sure that the status fetching works properly over the wire.      */
DECL|method|testCanFetchIndexStatus
specifier|public
name|void
name|testCanFetchIndexStatus
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
comment|/* We make sure all indexing tasks wait to start before this lock is *unlocked* so we can fetch their status with both the get and          * list APIs. */
name|CountDownLatch
name|taskRegistered
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|letTaskFinish
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ListenableActionFuture
argument_list|<
name|IndexResponse
argument_list|>
name|indexFuture
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|TransportService
name|transportService
range|:
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
control|)
block|{
operator|(
operator|(
name|MockTaskManager
operator|)
name|transportService
operator|.
name|getTaskManager
argument_list|()
operator|)
operator|.
name|addListener
argument_list|(
operator|new
name|MockTaskManagerListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onTaskRegistered
parameter_list|(
name|Task
name|task
parameter_list|)
block|{
if|if
condition|(
name|task
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
name|IndexAction
operator|.
name|NAME
argument_list|)
condition|)
block|{
name|taskRegistered
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Blocking [{}] starting"
argument_list|,
name|task
argument_list|)
expr_stmt|;
try|try
block|{
name|letTaskFinish
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onTaskUnregistered
parameter_list|(
name|Task
name|task
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|waitForTaskCompletion
parameter_list|(
name|Task
name|task
parameter_list|)
block|{                     }
block|}
argument_list|)
expr_stmt|;
block|}
name|indexFuture
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
name|taskRegistered
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// waiting for at least one task to be registered
name|ListTasksResponse
name|listResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareListTasks
argument_list|()
operator|.
name|setActions
argument_list|(
literal|"indices:data/write/index*"
argument_list|)
operator|.
name|setDetailed
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|listResponse
operator|.
name|getTasks
argument_list|()
argument_list|,
name|not
argument_list|(
name|empty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskInfo
name|task
range|:
name|listResponse
operator|.
name|getTasks
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|task
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|GetTaskResponse
name|getResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetTask
argument_list|(
name|task
operator|.
name|getTaskId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"task should still be running"
argument_list|,
name|getResponse
operator|.
name|getTask
argument_list|()
operator|.
name|isCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|TaskInfo
name|fetchedWithGet
init|=
name|getResponse
operator|.
name|getTask
argument_list|()
operator|.
name|getTask
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|,
name|fetchedWithGet
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task
operator|.
name|getType
argument_list|()
argument_list|,
name|fetchedWithGet
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task
operator|.
name|getAction
argument_list|()
argument_list|,
name|fetchedWithGet
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task
operator|.
name|getDescription
argument_list|()
argument_list|,
name|fetchedWithGet
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task
operator|.
name|getStatus
argument_list|()
argument_list|,
name|fetchedWithGet
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|fetchedWithGet
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fetchedWithGet
operator|.
name|getRunningTimeNanos
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|task
operator|.
name|getRunningTimeNanos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task
operator|.
name|isCancellable
argument_list|()
argument_list|,
name|fetchedWithGet
operator|.
name|isCancellable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task
operator|.
name|getParentTaskId
argument_list|()
argument_list|,
name|fetchedWithGet
operator|.
name|getParentTaskId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|letTaskFinish
operator|.
name|countDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|indexFuture
operator|!=
literal|null
condition|)
block|{
name|IndexResponse
name|indexResponse
init|=
name|indexFuture
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|ReplicationResponse
operator|.
name|EMPTY
argument_list|,
name|indexResponse
operator|.
name|getShardInfo
argument_list|()
operator|.
name|getFailures
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testTasksCancellation
specifier|public
name|void
name|testTasksCancellation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start blocking test task
comment|// Get real client (the plugin is not registered on transport nodes)
name|ListenableActionFuture
argument_list|<
name|TestTaskPlugin
operator|.
name|NodesResponse
argument_list|>
name|future
init|=
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|INSTANCE
operator|.
name|newRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> started test tasks"
argument_list|)
expr_stmt|;
comment|// Wait for the task to start on all nodes
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
name|assertEquals
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareListTasks
argument_list|()
operator|.
name|setActions
argument_list|(
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|NAME
operator|+
literal|"[n]"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> cancelling the main test task"
argument_list|)
expr_stmt|;
name|CancelTasksResponse
name|cancelTasksResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareCancelTasks
argument_list|()
operator|.
name|setActions
argument_list|(
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|NAME
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cancelTasksResponse
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> checking that test tasks are not running"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareListTasks
argument_list|()
operator|.
name|setActions
argument_list|(
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|NAME
operator|+
literal|"*"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTasksUnblocking
specifier|public
name|void
name|testTasksUnblocking
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start blocking test task
name|ListenableActionFuture
argument_list|<
name|TestTaskPlugin
operator|.
name|NodesResponse
argument_list|>
name|future
init|=
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|INSTANCE
operator|.
name|newRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
comment|// Wait for the task to start on all nodes
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
name|assertEquals
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareListTasks
argument_list|()
operator|.
name|setActions
argument_list|(
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|NAME
operator|+
literal|"[n]"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TestTaskPlugin
operator|.
name|UnblockTestTasksAction
operator|.
name|INSTANCE
operator|.
name|newRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareListTasks
argument_list|()
operator|.
name|setActions
argument_list|(
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|NAME
operator|+
literal|"[n]"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testListTasksWaitForCompletion
specifier|public
name|void
name|testListTasksWaitForCompletion
parameter_list|()
throws|throws
name|Exception
block|{
name|waitForCompletionTestCase
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
name|id
lambda|->
block|{
return|return
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareListTasks
argument_list|()
operator|.
name|setActions
argument_list|(
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|NAME
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
return|;
block|}
argument_list|,
name|response
lambda|->
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getNodeFailures
argument_list|()
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getTaskFailures
argument_list|()
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetTaskWaitForCompletionWithoutStoringResult
specifier|public
name|void
name|testGetTaskWaitForCompletionWithoutStoringResult
parameter_list|()
throws|throws
name|Exception
block|{
name|waitForCompletionTestCase
argument_list|(
literal|false
argument_list|,
name|id
lambda|->
block|{
return|return
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetTask
argument_list|(
name|id
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
return|;
block|}
argument_list|,
name|response
lambda|->
block|{
name|assertNotNull
argument_list|(
name|response
operator|.
name|getTask
argument_list|()
operator|.
name|getTask
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getTask
argument_list|()
operator|.
name|isCompleted
argument_list|()
argument_list|)
expr_stmt|;
comment|// We didn't store the result so it won't come back when we wait
name|assertNull
argument_list|(
name|response
operator|.
name|getTask
argument_list|()
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetTaskWaitForCompletionWithStoringResult
specifier|public
name|void
name|testGetTaskWaitForCompletionWithStoringResult
parameter_list|()
throws|throws
name|Exception
block|{
name|waitForCompletionTestCase
argument_list|(
literal|true
argument_list|,
name|id
lambda|->
block|{
return|return
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetTask
argument_list|(
name|id
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
return|;
block|}
argument_list|,
name|response
lambda|->
block|{
name|assertNotNull
argument_list|(
name|response
operator|.
name|getTask
argument_list|()
operator|.
name|getTask
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getTask
argument_list|()
operator|.
name|isCompleted
argument_list|()
argument_list|)
expr_stmt|;
comment|// We stored the task so we should get its results
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getTask
argument_list|()
operator|.
name|getResponseAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"failure_count"
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test wait for completion.      * @param storeResult should the task store its results      * @param wait start waiting for a task. Accepts that id of the task to wait for and returns a future waiting for it.      * @param validator validate the response and return the task ids that were found      */
DECL|method|waitForCompletionTestCase
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|waitForCompletionTestCase
parameter_list|(
name|boolean
name|storeResult
parameter_list|,
name|Function
argument_list|<
name|TaskId
argument_list|,
name|ListenableActionFuture
argument_list|<
name|T
argument_list|>
argument_list|>
name|wait
parameter_list|,
name|Consumer
argument_list|<
name|T
argument_list|>
name|validator
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Start blocking test task
name|ListenableActionFuture
argument_list|<
name|TestTaskPlugin
operator|.
name|NodesResponse
argument_list|>
name|future
init|=
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|INSTANCE
operator|.
name|newRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|setShouldStoreResult
argument_list|(
name|storeResult
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|ListenableActionFuture
argument_list|<
name|T
argument_list|>
name|waitResponseFuture
decl_stmt|;
name|TaskId
name|taskId
decl_stmt|;
try|try
block|{
name|taskId
operator|=
name|waitForTestTaskStartOnAllNodes
argument_list|()
expr_stmt|;
comment|// Wait for the task to start
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetTask
argument_list|(
name|taskId
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Register listeners so we can be sure the waiting started
name|CountDownLatch
name|waitForWaitingToStart
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|TransportService
name|transportService
range|:
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
control|)
block|{
operator|(
operator|(
name|MockTaskManager
operator|)
name|transportService
operator|.
name|getTaskManager
argument_list|()
operator|)
operator|.
name|addListener
argument_list|(
operator|new
name|MockTaskManagerListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|waitForTaskCompletion
parameter_list|(
name|Task
name|task
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|onTaskRegistered
parameter_list|(
name|Task
name|task
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|onTaskUnregistered
parameter_list|(
name|Task
name|task
parameter_list|)
block|{
name|waitForWaitingToStart
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Spin up a request to wait for the test task to finish
name|waitResponseFuture
operator|=
name|wait
operator|.
name|apply
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
comment|// Wait for the wait to start
name|waitForWaitingToStart
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// Unblock the request so the wait for completion request can finish
name|TestTaskPlugin
operator|.
name|UnblockTestTasksAction
operator|.
name|INSTANCE
operator|.
name|newRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// Now that the task is unblocked the list response will come back
name|T
name|waitResponse
init|=
name|waitResponseFuture
operator|.
name|get
argument_list|()
decl_stmt|;
name|validator
operator|.
name|accept
argument_list|(
name|waitResponse
argument_list|)
expr_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|testListTasksWaitForTimeout
specifier|public
name|void
name|testListTasksWaitForTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|waitForTimeoutTestCase
argument_list|(
name|id
lambda|->
block|{
name|ListTasksResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareListTasks
argument_list|()
operator|.
name|setActions
argument_list|(
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|NAME
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|setTimeout
argument_list|(
name|timeValueMillis
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodeFailures
argument_list|()
argument_list|,
name|not
argument_list|(
name|empty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|getNodeFailures
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetTaskWaitForTimeout
specifier|public
name|void
name|testGetTaskWaitForTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|waitForTimeoutTestCase
argument_list|(
name|id
lambda|->
block|{
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetTask
argument_list|(
name|id
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|setTimeout
argument_list|(
name|timeValueMillis
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|singleton
argument_list|(
name|e
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test waiting for a task that times out.      * @param wait wait for the running task and return all the failures you accumulated waiting for it      */
DECL|method|waitForTimeoutTestCase
specifier|private
name|void
name|waitForTimeoutTestCase
parameter_list|(
name|Function
argument_list|<
name|TaskId
argument_list|,
name|?
extends|extends
name|Iterable
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
argument_list|>
name|wait
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Start blocking test task
name|ListenableActionFuture
argument_list|<
name|TestTaskPlugin
operator|.
name|NodesResponse
argument_list|>
name|future
init|=
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|INSTANCE
operator|.
name|newRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
try|try
block|{
name|TaskId
name|taskId
init|=
name|waitForTestTaskStartOnAllNodes
argument_list|()
decl_stmt|;
comment|// Wait for the task to start
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetTask
argument_list|(
name|taskId
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Spin up a request that should wait for those tasks to finish
comment|// It will timeout because we haven't unblocked the tasks
name|Iterable
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|failures
init|=
name|wait
operator|.
name|apply
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
for|for
control|(
name|Throwable
name|failure
range|:
name|failures
control|)
block|{
name|assertNotNull
argument_list|(
name|ExceptionsHelper
operator|.
name|unwrap
argument_list|(
name|failure
argument_list|,
name|ElasticsearchTimeoutException
operator|.
name|class
argument_list|,
name|ReceiveTimeoutTransportException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// Now we can unblock those requests
name|TestTaskPlugin
operator|.
name|UnblockTestTasksAction
operator|.
name|INSTANCE
operator|.
name|newRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|/**      * Wait for the test task to be running on all nodes and return the TaskId of the primary task.      */
DECL|method|waitForTestTaskStartOnAllNodes
specifier|private
name|TaskId
name|waitForTestTaskStartOnAllNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|tasks
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareListTasks
argument_list|()
operator|.
name|setActions
argument_list|(
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|NAME
operator|+
literal|"[n]"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTasks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|task
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareListTasks
argument_list|()
operator|.
name|setActions
argument_list|(
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|NAME
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTasks
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|task
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|task
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTaskId
argument_list|()
return|;
block|}
DECL|method|testTasksListWaitForNoTask
specifier|public
name|void
name|testTasksListWaitForNoTask
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Spin up a request to wait for no matching tasks
name|ListenableActionFuture
argument_list|<
name|ListTasksResponse
argument_list|>
name|waitResponseFuture
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareListTasks
argument_list|()
operator|.
name|setActions
argument_list|(
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|NAME
operator|+
literal|"[n]"
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|setTimeout
argument_list|(
name|timeValueMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
comment|// It should finish quickly and without complaint
name|assertThat
argument_list|(
name|waitResponseFuture
operator|.
name|get
argument_list|()
operator|.
name|getTasks
argument_list|()
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTasksGetWaitForNoTask
specifier|public
name|void
name|testTasksGetWaitForNoTask
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Spin up a request to wait for no matching tasks
name|ListenableActionFuture
argument_list|<
name|GetTaskResponse
argument_list|>
name|waitResponseFuture
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetTask
argument_list|(
literal|"notfound:1"
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|setTimeout
argument_list|(
name|timeValueMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
comment|// It should finish quickly and without complaint
name|expectNotFound
argument_list|(
parameter_list|()
lambda|->
name|waitResponseFuture
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTasksWaitForAllTask
specifier|public
name|void
name|testTasksWaitForAllTask
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Spin up a request to wait for all tasks in the cluster to make sure it doesn't cause an infinite loop
name|ListTasksResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareListTasks
argument_list|()
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|setTimeout
argument_list|(
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// It should finish quickly and without complaint and list the list tasks themselves
name|assertThat
argument_list|(
name|response
operator|.
name|getNodeFailures
argument_list|()
argument_list|,
name|emptyCollectionOf
argument_list|(
name|FailedNodeException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getTaskFailures
argument_list|()
argument_list|,
name|emptyCollectionOf
argument_list|(
name|TaskOperationFailure
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTaskStoringSuccesfulResult
specifier|public
name|void
name|testTaskStoringSuccesfulResult
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Randomly create an empty index to make sure the type is created automatically
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"creating an empty results index with custom settings"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|TaskResultsService
operator|.
name|TASK_INDEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|registerTaskManageListeners
argument_list|(
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
comment|// we need this to get task id of the process
comment|// Start non-blocking test task
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|INSTANCE
operator|.
name|newRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|setShouldStoreResult
argument_list|(
literal|true
argument_list|)
operator|.
name|setShouldBlock
argument_list|(
literal|false
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|events
init|=
name|findEvents
argument_list|(
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TaskInfo
name|taskInfo
init|=
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TaskId
name|taskId
init|=
name|taskInfo
operator|.
name|getTaskId
argument_list|()
decl_stmt|;
name|GetResponse
name|resultDoc
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|TaskResultsService
operator|.
name|TASK_INDEX
argument_list|,
name|TaskResultsService
operator|.
name|TASK_TYPE
argument_list|,
name|taskId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultDoc
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
init|=
name|resultDoc
operator|.
name|getSource
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|task
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|source
operator|.
name|get
argument_list|(
literal|"task"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|taskInfo
operator|.
name|getTaskId
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|task
operator|.
name|get
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|taskInfo
operator|.
name|getAction
argument_list|()
argument_list|,
name|task
operator|.
name|get
argument_list|(
literal|"action"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|taskInfo
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|task
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|source
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"failure_count"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|source
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNoFailures
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|TaskResultsService
operator|.
name|TASK_INDEX
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|TaskResultsService
operator|.
name|TASK_INDEX
argument_list|)
operator|.
name|setTypes
argument_list|(
name|TaskResultsService
operator|.
name|TASK_TYPE
argument_list|)
operator|.
name|setSource
argument_list|(
name|SearchSourceBuilder
operator|.
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"task.action"
argument_list|,
name|taskInfo
operator|.
name|getAction
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|TaskResultsService
operator|.
name|TASK_INDEX
argument_list|)
operator|.
name|setTypes
argument_list|(
name|TaskResultsService
operator|.
name|TASK_TYPE
argument_list|)
operator|.
name|setSource
argument_list|(
name|SearchSourceBuilder
operator|.
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"task.node"
argument_list|,
name|taskInfo
operator|.
name|getTaskId
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|)
expr_stmt|;
name|GetTaskResponse
name|getResponse
init|=
name|expectFinishedTask
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
argument_list|,
name|getResponse
operator|.
name|getTask
argument_list|()
operator|.
name|getResponseAsMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getResponse
operator|.
name|getTask
argument_list|()
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTaskStoringFailureResult
specifier|public
name|void
name|testTaskStoringFailureResult
parameter_list|()
throws|throws
name|Exception
block|{
name|registerTaskManageListeners
argument_list|(
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
comment|// we need this to get task id of the process
comment|// Start non-blocking test task that should fail
name|assertThrows
argument_list|(
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|INSTANCE
operator|.
name|newRequestBuilder
argument_list|(
name|client
argument_list|()
argument_list|)
operator|.
name|setShouldFail
argument_list|(
literal|true
argument_list|)
operator|.
name|setShouldStoreResult
argument_list|(
literal|true
argument_list|)
operator|.
name|setShouldBlock
argument_list|(
literal|false
argument_list|)
argument_list|,
name|IllegalStateException
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|events
init|=
name|findEvents
argument_list|(
name|TestTaskPlugin
operator|.
name|TestTaskAction
operator|.
name|NAME
argument_list|,
name|Tuple
operator|::
name|v1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TaskInfo
name|failedTaskInfo
init|=
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TaskId
name|failedTaskId
init|=
name|failedTaskInfo
operator|.
name|getTaskId
argument_list|()
decl_stmt|;
name|GetResponse
name|failedResultDoc
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|TaskResultsService
operator|.
name|TASK_INDEX
argument_list|,
name|TaskResultsService
operator|.
name|TASK_TYPE
argument_list|,
name|failedTaskId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|failedResultDoc
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
init|=
name|failedResultDoc
operator|.
name|getSource
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|task
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|source
operator|.
name|get
argument_list|(
literal|"task"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|failedTaskInfo
operator|.
name|getTaskId
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|task
operator|.
name|get
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|failedTaskInfo
operator|.
name|getAction
argument_list|()
argument_list|,
name|task
operator|.
name|get
argument_list|(
literal|"action"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|failedTaskInfo
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|task
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|error
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|source
operator|.
name|get
argument_list|(
literal|"error"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Simulating operation failure"
argument_list|,
name|error
operator|.
name|get
argument_list|(
literal|"reason"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"illegal_state_exception"
argument_list|,
name|error
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|source
operator|.
name|get
argument_list|(
literal|"result"
argument_list|)
argument_list|)
expr_stmt|;
name|GetTaskResponse
name|getResponse
init|=
name|expectFinishedTask
argument_list|(
name|failedTaskId
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|getResponse
operator|.
name|getTask
argument_list|()
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|error
argument_list|,
name|getResponse
operator|.
name|getTask
argument_list|()
operator|.
name|getErrorAsMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetTaskNotFound
specifier|public
name|void
name|testGetTaskNotFound
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Node isn't found, tasks index doesn't even exist
name|expectNotFound
argument_list|(
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetTask
argument_list|(
literal|"not_a_node:1"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Node exists but the task still isn't found
name|expectNotFound
argument_list|(
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetTask
argument_list|(
operator|new
name|TaskId
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNodeNotFoundButTaskFound
specifier|public
name|void
name|testNodeNotFoundButTaskFound
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Save a fake task that looks like it is from a node that isn't part of the cluster
name|CyclicBarrier
name|b
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|TaskResultsService
name|resultsService
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TaskResultsService
operator|.
name|class
argument_list|)
decl_stmt|;
name|resultsService
operator|.
name|storeResult
argument_list|(
operator|new
name|TaskResult
argument_list|(
operator|new
name|TaskInfo
argument_list|(
operator|new
name|TaskId
argument_list|(
literal|"fake"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|TaskId
operator|.
name|EMPTY_TASK_ID
argument_list|)
argument_list|,
operator|new
name|RuntimeException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Void
name|response
parameter_list|)
block|{
try|try
block|{
name|b
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|BrokenBarrierException
name|e
parameter_list|)
block|{
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|b
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Now we can find it!
name|GetTaskResponse
name|response
init|=
name|expectFinishedTask
argument_list|(
operator|new
name|TaskId
argument_list|(
literal|"fake:1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|response
operator|.
name|getTask
argument_list|()
operator|.
name|getTask
argument_list|()
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|response
operator|.
name|getTask
argument_list|()
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|response
operator|.
name|getTask
argument_list|()
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|,
name|RecordingTaskManagerListener
argument_list|>
name|entry
range|:
name|listeners
operator|.
name|entrySet
argument_list|()
control|)
block|{
operator|(
operator|(
name|MockTaskManager
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|v1
argument_list|()
argument_list|)
operator|.
name|getTaskManager
argument_list|()
operator|)
operator|.
name|removeListener
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|listeners
operator|.
name|clear
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**      * Registers recording task event listeners with the given action mask on all nodes      */
DECL|method|registerTaskManageListeners
specifier|private
name|void
name|registerTaskManageListeners
parameter_list|(
name|String
name|actionMasks
parameter_list|)
block|{
for|for
control|(
name|String
name|nodeName
range|:
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
control|)
block|{
name|DiscoveryNode
name|node
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|,
name|nodeName
argument_list|)
operator|.
name|localNode
argument_list|()
decl_stmt|;
name|RecordingTaskManagerListener
name|listener
init|=
operator|new
name|RecordingTaskManagerListener
argument_list|(
name|node
argument_list|,
name|actionMasks
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|MockTaskManager
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|,
name|nodeName
argument_list|)
operator|.
name|getTaskManager
argument_list|()
operator|)
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|RecordingTaskManagerListener
name|oldListener
init|=
name|listeners
operator|.
name|put
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|,
name|actionMasks
argument_list|)
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|oldListener
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Resets all recording task event listeners with the given action mask on all nodes      */
DECL|method|resetTaskManageListeners
specifier|private
name|void
name|resetTaskManageListeners
parameter_list|(
name|String
name|actionMasks
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|,
name|RecordingTaskManagerListener
argument_list|>
name|entry
range|:
name|listeners
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|actionMasks
operator|==
literal|null
operator|||
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|v2
argument_list|()
operator|.
name|equals
argument_list|(
name|actionMasks
argument_list|)
condition|)
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns the number of events that satisfy the criteria across all nodes      *      * @param actionMasks action masks to match      * @return number of events that satisfy the criteria      */
DECL|method|numberOfEvents
specifier|private
name|int
name|numberOfEvents
parameter_list|(
name|String
name|actionMasks
parameter_list|,
name|Function
argument_list|<
name|Tuple
argument_list|<
name|Boolean
argument_list|,
name|TaskInfo
argument_list|>
argument_list|,
name|Boolean
argument_list|>
name|criteria
parameter_list|)
block|{
return|return
name|findEvents
argument_list|(
name|actionMasks
argument_list|,
name|criteria
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Returns all events that satisfy the criteria across all nodes      *      * @param actionMasks action masks to match      * @return number of events that satisfy the criteria      */
DECL|method|findEvents
specifier|private
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|findEvents
parameter_list|(
name|String
name|actionMasks
parameter_list|,
name|Function
argument_list|<
name|Tuple
argument_list|<
name|Boolean
argument_list|,
name|TaskInfo
argument_list|>
argument_list|,
name|Boolean
argument_list|>
name|criteria
parameter_list|)
block|{
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|,
name|RecordingTaskManagerListener
argument_list|>
name|entry
range|:
name|listeners
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|actionMasks
operator|==
literal|null
operator|||
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|v2
argument_list|()
operator|.
name|equals
argument_list|(
name|actionMasks
argument_list|)
condition|)
block|{
for|for
control|(
name|Tuple
argument_list|<
name|Boolean
argument_list|,
name|TaskInfo
argument_list|>
name|taskEvent
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getEvents
argument_list|()
control|)
block|{
if|if
condition|(
name|criteria
operator|.
name|apply
argument_list|(
name|taskEvent
argument_list|)
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
name|taskEvent
operator|.
name|v2
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|events
return|;
block|}
comment|/**      * Asserts that all tasks in the tasks list have the same parentTask      */
DECL|method|assertParentTask
specifier|private
name|void
name|assertParentTask
parameter_list|(
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|tasks
parameter_list|,
name|TaskInfo
name|parentTask
parameter_list|)
block|{
for|for
control|(
name|TaskInfo
name|task
range|:
name|tasks
control|)
block|{
name|assertParentTask
argument_list|(
name|task
argument_list|,
name|parentTask
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertParentTask
specifier|private
name|void
name|assertParentTask
parameter_list|(
name|TaskInfo
name|task
parameter_list|,
name|TaskInfo
name|parentTask
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|task
operator|.
name|getParentTaskId
argument_list|()
operator|.
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parentTask
operator|.
name|getTaskId
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|task
operator|.
name|getParentTaskId
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|task
operator|.
name|getParentTaskId
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parentTask
operator|.
name|getId
argument_list|()
argument_list|,
name|task
operator|.
name|getParentTaskId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|expectNotFound
specifier|private
name|ResourceNotFoundException
name|expectNotFound
parameter_list|(
name|ThrowingRunnable
name|r
parameter_list|)
block|{
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|ResourceNotFoundException
name|notFound
init|=
operator|(
name|ResourceNotFoundException
operator|)
name|ExceptionsHelper
operator|.
name|unwrap
argument_list|(
name|e
argument_list|,
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|notFound
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected ResourceNotFoundException"
argument_list|,
name|e
argument_list|)
throw|;
return|return
name|notFound
return|;
block|}
comment|/**      * Fetch the task status from the list tasks API using it's "fallback to get from the task index" behavior. Asserts some obvious stuff      * about the fetched task and returns a map of it's status.      */
DECL|method|expectFinishedTask
specifier|private
name|GetTaskResponse
name|expectFinishedTask
parameter_list|(
name|TaskId
name|taskId
parameter_list|)
throws|throws
name|IOException
block|{
name|GetTaskResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetTask
argument_list|(
name|taskId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"the task should have been completed before fetching"
argument_list|,
name|response
operator|.
name|getTask
argument_list|()
operator|.
name|isCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|TaskInfo
name|info
init|=
name|response
operator|.
name|getTask
argument_list|()
operator|.
name|getTask
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|taskId
argument_list|,
name|info
operator|.
name|getTaskId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|info
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// The test task doesn't have any status
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

