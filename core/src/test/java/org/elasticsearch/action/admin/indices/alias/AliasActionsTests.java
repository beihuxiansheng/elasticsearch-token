begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.alias
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|alias
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|alias
operator|.
name|IndicesAliasesRequest
operator|.
name|AliasActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|arrayContaining
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|arrayWithSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_class
DECL|class|AliasActionsTests
specifier|public
class|class
name|AliasActionsTests
extends|extends
name|ESTestCase
block|{
DECL|method|testValidate
specifier|public
name|void
name|testValidate
parameter_list|()
block|{
name|AliasActions
operator|.
name|Type
name|type
init|=
name|randomFrom
argument_list|(
name|AliasActions
operator|.
name|Type
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|AliasActions
operator|.
name|Type
operator|.
name|REMOVE_INDEX
condition|)
block|{
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AliasActions
argument_list|(
name|type
argument_list|)
operator|.
name|validate
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"One of [index] or [indices] is required"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AliasActions
argument_list|(
name|type
argument_list|)
operator|.
name|alias
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|validate
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"One of [index] or [indices] is required"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AliasActions
argument_list|(
name|type
argument_list|)
operator|.
name|index
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|validate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"One of [alias] or [aliases] is required"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEmptyIndex
specifier|public
name|void
name|testEmptyIndex
parameter_list|()
block|{
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AliasActions
argument_list|(
name|randomFrom
argument_list|(
name|AliasActions
operator|.
name|Type
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|index
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[index] can't be empty string"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AliasActions
argument_list|(
name|randomFrom
argument_list|(
name|AliasActions
operator|.
name|Type
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|index
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[index] can't be empty string"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AliasActions
argument_list|(
name|randomFrom
argument_list|(
name|AliasActions
operator|.
name|Type
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|indices
argument_list|(
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[indices] can't be empty"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AliasActions
argument_list|(
name|randomFrom
argument_list|(
name|AliasActions
operator|.
name|Type
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|indices
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[indices] can't be empty"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AliasActions
argument_list|(
name|randomFrom
argument_list|(
name|AliasActions
operator|.
name|Type
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|indices
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[indices] can't contain empty string"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AliasActions
argument_list|(
name|randomFrom
argument_list|(
name|AliasActions
operator|.
name|Type
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|indices
argument_list|(
literal|"test"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[indices] can't contain empty string"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyAlias
specifier|public
name|void
name|testEmptyAlias
parameter_list|()
block|{
name|AliasActions
operator|.
name|Type
name|type
init|=
name|randomValueOtherThan
argument_list|(
name|AliasActions
operator|.
name|Type
operator|.
name|REMOVE_INDEX
argument_list|,
parameter_list|()
lambda|->
name|randomFrom
argument_list|(
name|AliasActions
operator|.
name|Type
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AliasActions
argument_list|(
name|type
argument_list|)
operator|.
name|alias
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[alias] can't be empty string"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AliasActions
argument_list|(
name|type
argument_list|)
operator|.
name|alias
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[alias] can't be empty string"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AliasActions
argument_list|(
name|type
argument_list|)
operator|.
name|aliases
argument_list|(
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[aliases] can't be empty"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AliasActions
argument_list|(
name|type
argument_list|)
operator|.
name|aliases
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[aliases] can't be empty"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AliasActions
argument_list|(
name|type
argument_list|)
operator|.
name|aliases
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[aliases] can't contain empty string"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AliasActions
argument_list|(
name|type
argument_list|)
operator|.
name|aliases
argument_list|(
literal|"test"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[aliases] can't contain empty string"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBadOptionsInNonIndex
specifier|public
name|void
name|testBadOptionsInNonIndex
parameter_list|()
block|{
name|AliasActions
name|action
init|=
name|randomBoolean
argument_list|()
condition|?
name|AliasActions
operator|.
name|remove
argument_list|()
else|:
name|AliasActions
operator|.
name|removeIndex
argument_list|()
decl_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|action
operator|.
name|routing
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[routing] is unsupported for ["
operator|+
name|action
operator|.
name|actionType
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|action
operator|.
name|searchRouting
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[search_routing] is unsupported for ["
operator|+
name|action
operator|.
name|actionType
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|action
operator|.
name|indexRouting
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[index_routing] is unsupported for ["
operator|+
name|action
operator|.
name|actionType
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|action
operator|.
name|filter
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[filter] is unsupported for ["
operator|+
name|action
operator|.
name|actionType
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseAdd
specifier|public
name|void
name|testParseAdd
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|indices
init|=
name|generateRandomStringArray
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
index|[]
name|aliases
init|=
name|generateRandomStringArray
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|filter
init|=
name|randomBoolean
argument_list|()
condition|?
name|randomMap
argument_list|(
literal|5
argument_list|)
else|:
literal|null
decl_stmt|;
name|Object
name|searchRouting
init|=
name|randomBoolean
argument_list|()
condition|?
name|randomRouting
argument_list|()
else|:
literal|null
decl_stmt|;
name|Object
name|indexRouting
init|=
name|randomBoolean
argument_list|()
condition|?
name|randomBoolean
argument_list|()
condition|?
name|searchRouting
else|:
name|randomRouting
argument_list|()
else|:
literal|null
decl_stmt|;
name|XContentBuilder
name|b
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|xContent
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|b
operator|.
name|startObject
argument_list|(
literal|"add"
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
name|indices
operator|.
name|length
operator|>
literal|1
operator|||
name|randomBoolean
argument_list|()
condition|)
block|{
name|b
operator|.
name|array
argument_list|(
literal|"indices"
argument_list|,
name|indices
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|indices
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aliases
operator|.
name|length
operator|>
literal|1
operator|||
name|randomBoolean
argument_list|()
condition|)
block|{
name|b
operator|.
name|array
argument_list|(
literal|"aliases"
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|field
argument_list|(
literal|"alias"
argument_list|,
name|aliases
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|field
argument_list|(
literal|"filter"
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchRouting
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|searchRouting
operator|.
name|equals
argument_list|(
name|indexRouting
argument_list|)
condition|)
block|{
name|b
operator|.
name|field
argument_list|(
literal|"routing"
argument_list|,
name|searchRouting
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|field
argument_list|(
literal|"search_routing"
argument_list|,
name|searchRouting
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|indexRouting
operator|!=
literal|null
operator|&&
literal|false
operator|==
name|indexRouting
operator|.
name|equals
argument_list|(
name|searchRouting
argument_list|)
condition|)
block|{
name|b
operator|.
name|field
argument_list|(
literal|"index_routing"
argument_list|,
name|indexRouting
argument_list|)
expr_stmt|;
block|}
block|}
name|b
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|b
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|b
operator|=
name|shuffleXContent
argument_list|(
name|b
argument_list|,
literal|"filter"
argument_list|)
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|b
argument_list|)
init|)
block|{
name|AliasActions
name|action
init|=
name|AliasActions
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
parameter_list|()
lambda|->
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|AliasActions
operator|.
name|Type
operator|.
name|ADD
argument_list|,
name|action
operator|.
name|actionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|action
operator|.
name|indices
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indices
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|action
operator|.
name|aliases
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|aliases
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertNull
argument_list|(
name|action
operator|.
name|filter
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|map
argument_list|(
name|filter
argument_list|)
operator|.
name|string
argument_list|()
argument_list|,
name|action
operator|.
name|filter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Objects
operator|.
name|toString
argument_list|(
name|searchRouting
argument_list|,
literal|null
argument_list|)
argument_list|,
name|action
operator|.
name|searchRouting
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Objects
operator|.
name|toString
argument_list|(
name|indexRouting
argument_list|,
literal|null
argument_list|)
argument_list|,
name|action
operator|.
name|indexRouting
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseAddDefaultRouting
specifier|public
name|void
name|testParseAddDefaultRouting
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|index
init|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|alias
init|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|Object
name|searchRouting
init|=
name|randomRouting
argument_list|()
decl_stmt|;
name|Object
name|indexRouting
init|=
name|randomRouting
argument_list|()
decl_stmt|;
name|XContentBuilder
name|b
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|xContent
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|b
operator|.
name|startObject
argument_list|(
literal|"add"
argument_list|)
expr_stmt|;
block|{
name|b
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|b
operator|.
name|field
argument_list|(
literal|"alias"
argument_list|,
name|alias
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|b
operator|.
name|field
argument_list|(
literal|"routing"
argument_list|,
name|searchRouting
argument_list|)
expr_stmt|;
name|b
operator|.
name|field
argument_list|(
literal|"index_routing"
argument_list|,
name|indexRouting
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|field
argument_list|(
literal|"search_routing"
argument_list|,
name|searchRouting
argument_list|)
expr_stmt|;
name|b
operator|.
name|field
argument_list|(
literal|"routing"
argument_list|,
name|indexRouting
argument_list|)
expr_stmt|;
block|}
block|}
name|b
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|b
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|b
operator|=
name|shuffleXContent
argument_list|(
name|b
argument_list|)
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|b
argument_list|)
init|)
block|{
name|AliasActions
name|action
init|=
name|AliasActions
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
parameter_list|()
lambda|->
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|AliasActions
operator|.
name|Type
operator|.
name|ADD
argument_list|,
name|action
operator|.
name|actionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|action
operator|.
name|indices
argument_list|()
argument_list|,
name|arrayContaining
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|action
operator|.
name|aliases
argument_list|()
argument_list|,
name|arrayContaining
argument_list|(
name|alias
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searchRouting
operator|.
name|toString
argument_list|()
argument_list|,
name|action
operator|.
name|searchRouting
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|indexRouting
operator|.
name|toString
argument_list|()
argument_list|,
name|action
operator|.
name|indexRouting
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseRemove
specifier|public
name|void
name|testParseRemove
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|indices
init|=
name|generateRandomStringArray
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
index|[]
name|aliases
init|=
name|generateRandomStringArray
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|XContentBuilder
name|b
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|xContent
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|b
operator|.
name|startObject
argument_list|(
literal|"remove"
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
name|indices
operator|.
name|length
operator|>
literal|1
operator|||
name|randomBoolean
argument_list|()
condition|)
block|{
name|b
operator|.
name|array
argument_list|(
literal|"indices"
argument_list|,
name|indices
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|indices
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aliases
operator|.
name|length
operator|>
literal|1
operator|||
name|randomBoolean
argument_list|()
condition|)
block|{
name|b
operator|.
name|array
argument_list|(
literal|"aliases"
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|field
argument_list|(
literal|"alias"
argument_list|,
name|aliases
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|b
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|b
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|b
operator|=
name|shuffleXContent
argument_list|(
name|b
argument_list|)
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|b
argument_list|)
init|)
block|{
name|AliasActions
name|action
init|=
name|AliasActions
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
parameter_list|()
lambda|->
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|AliasActions
operator|.
name|Type
operator|.
name|REMOVE
argument_list|,
name|action
operator|.
name|actionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|action
operator|.
name|indices
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indices
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|action
operator|.
name|aliases
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|aliases
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseRemoveIndex
specifier|public
name|void
name|testParseRemoveIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|indices
init|=
name|randomBoolean
argument_list|()
condition|?
operator|new
name|String
index|[]
block|{
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
block|}
else|:
name|generateRandomStringArray
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|XContentBuilder
name|b
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|xContent
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|b
operator|.
name|startObject
argument_list|(
literal|"remove_index"
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
name|indices
operator|.
name|length
operator|>
literal|1
operator|||
name|randomBoolean
argument_list|()
condition|)
block|{
name|b
operator|.
name|array
argument_list|(
literal|"indices"
argument_list|,
name|indices
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|indices
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|b
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|b
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|b
operator|=
name|shuffleXContent
argument_list|(
name|b
argument_list|)
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|b
argument_list|)
init|)
block|{
name|AliasActions
name|action
init|=
name|AliasActions
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
parameter_list|()
lambda|->
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|AliasActions
operator|.
name|Type
operator|.
name|REMOVE_INDEX
argument_list|,
name|action
operator|.
name|actionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|indices
argument_list|,
name|action
operator|.
name|indices
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|action
operator|.
name|aliases
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseIndexAndIndicesThrowsError
specifier|public
name|void
name|testParseIndexAndIndicesThrowsError
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|b
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|xContent
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|b
operator|.
name|startObject
argument_list|(
name|randomFrom
argument_list|(
literal|"add"
argument_list|,
literal|"remove"
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|b
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|array
argument_list|(
literal|"indices"
argument_list|,
name|generateRandomStringArray
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|field
argument_list|(
literal|"alias"
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|b
operator|.
name|endObject
argument_list|()
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|b
argument_list|)
init|)
block|{
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|AliasActions
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
parameter_list|()
lambda|->
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Only one of [index] and [indices] is supported"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseAliasAndAliasesThrowsError
specifier|public
name|void
name|testParseAliasAndAliasesThrowsError
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|b
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|xContent
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|b
operator|.
name|startObject
argument_list|(
name|randomFrom
argument_list|(
literal|"add"
argument_list|,
literal|"remove"
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|b
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|field
argument_list|(
literal|"alias"
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|array
argument_list|(
literal|"aliases"
argument_list|,
name|generateRandomStringArray
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|b
operator|.
name|endObject
argument_list|()
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|b
argument_list|)
init|)
block|{
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|AliasActions
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
parameter_list|()
lambda|->
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Only one of [alias] and [aliases] is supported"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRoundTrip
specifier|public
name|void
name|testRoundTrip
parameter_list|()
throws|throws
name|IOException
block|{
name|AliasActions
name|action
init|=
operator|new
name|AliasActions
argument_list|(
name|randomFrom
argument_list|(
name|AliasActions
operator|.
name|Type
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|action
operator|.
name|index
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|.
name|indices
argument_list|(
name|generateRandomStringArray
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|.
name|actionType
argument_list|()
operator|!=
name|AliasActions
operator|.
name|Type
operator|.
name|REMOVE_INDEX
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|action
operator|.
name|alias
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|.
name|aliases
argument_list|(
name|generateRandomStringArray
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|action
operator|.
name|actionType
argument_list|()
operator|==
name|AliasActions
operator|.
name|Type
operator|.
name|ADD
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|action
operator|.
name|filter
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|action
operator|.
name|routing
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|.
name|searchRouting
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|indexRouting
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|action
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|AliasActions
name|read
init|=
operator|new
name|AliasActions
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|action
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|randomMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|randomMap
parameter_list|(
name|int
name|maxDepth
parameter_list|)
block|{
name|int
name|members
init|=
name|between
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|members
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|members
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|value
decl_stmt|;
switch|switch
condition|(
name|between
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|maxDepth
operator|>
literal|0
condition|)
block|{
name|value
operator|=
name|randomMap
argument_list|(
name|maxDepth
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
name|value
operator|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|value
operator|=
name|randomBoolean
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|value
operator|=
name|randomLong
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
name|result
operator|.
name|put
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|randomRouting
specifier|private
name|Object
name|randomRouting
parameter_list|()
block|{
return|return
name|randomBoolean
argument_list|()
condition|?
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
else|:
name|randomInt
argument_list|()
return|;
block|}
block|}
end_class

end_unit

