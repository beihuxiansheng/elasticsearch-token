begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.get
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|get
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|alias
operator|.
name|Alias
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|get
operator|.
name|GetIndexRequest
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|AliasMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|warmer
operator|.
name|IndexWarmersMetaData
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertBlocked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|ElasticsearchIntegrationTest
operator|.
name|SuiteScopeTest
DECL|class|GetIndexTests
specifier|public
class|class
name|GetIndexTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|field|allFeatures
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|allFeatures
init|=
block|{
literal|"_alias"
block|,
literal|"_aliases"
block|,
literal|"_mapping"
block|,
literal|"_mappings"
block|,
literal|"_settings"
block|,
literal|"_warmer"
block|,
literal|"_warmers"
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|setupSuiteScopeCluster
specifier|protected
name|void
name|setupSuiteScopeCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAlias
argument_list|(
operator|new
name|Alias
argument_list|(
literal|"alias_idx"
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"{\"type1\":{}}"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"number_of_shards"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|(
literal|"idx"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutWarmer
argument_list|(
literal|"warmer1"
argument_list|)
operator|.
name|setSearchRequest
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"empty_idx"
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|(
literal|"idx"
argument_list|,
literal|"empty_idx"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
block|{
name|GetIndexResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetIndex
argument_list|()
operator|.
name|addIndices
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
index|[]
name|indices
init|=
name|response
operator|.
name|indices
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|indices
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indices
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indices
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"idx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAliases
argument_list|(
name|response
argument_list|,
literal|"idx"
argument_list|)
expr_stmt|;
name|assertMappings
argument_list|(
name|response
argument_list|,
literal|"idx"
argument_list|)
expr_stmt|;
name|assertSettings
argument_list|(
name|response
argument_list|,
literal|"idx"
argument_list|)
expr_stmt|;
name|assertWarmers
argument_list|(
name|response
argument_list|,
literal|"idx"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IndexMissingException
operator|.
name|class
argument_list|)
DECL|method|testSimpleUnknownIndex
specifier|public
name|void
name|testSimpleUnknownIndex
parameter_list|()
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetIndex
argument_list|()
operator|.
name|addIndices
argument_list|(
literal|"missing_idx"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|GetIndexResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetIndex
argument_list|()
operator|.
name|addIndices
argument_list|(
literal|"empty_idx"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
index|[]
name|indices
init|=
name|response
operator|.
name|indices
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|indices
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indices
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indices
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"empty_idx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEmptyAliases
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEmptyOrOnlyDefaultMappings
argument_list|(
name|response
argument_list|,
literal|"empty_idx"
argument_list|)
expr_stmt|;
name|assertNonEmptySettings
argument_list|(
name|response
argument_list|,
literal|"empty_idx"
argument_list|)
expr_stmt|;
name|assertEmptyWarmers
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleMapping
specifier|public
name|void
name|testSimpleMapping
parameter_list|()
block|{
name|GetIndexResponse
name|response
init|=
name|runWithRandomFeatureMethod
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetIndex
argument_list|()
operator|.
name|addIndices
argument_list|(
literal|"idx"
argument_list|)
argument_list|,
name|Feature
operator|.
name|MAPPINGS
argument_list|)
decl_stmt|;
name|String
index|[]
name|indices
init|=
name|response
operator|.
name|indices
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|indices
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indices
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indices
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"idx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertMappings
argument_list|(
name|response
argument_list|,
literal|"idx"
argument_list|)
expr_stmt|;
name|assertEmptyAliases
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEmptySettings
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEmptyWarmers
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleAlias
specifier|public
name|void
name|testSimpleAlias
parameter_list|()
block|{
name|GetIndexResponse
name|response
init|=
name|runWithRandomFeatureMethod
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetIndex
argument_list|()
operator|.
name|addIndices
argument_list|(
literal|"idx"
argument_list|)
argument_list|,
name|Feature
operator|.
name|ALIASES
argument_list|)
decl_stmt|;
name|String
index|[]
name|indices
init|=
name|response
operator|.
name|indices
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|indices
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indices
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indices
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"idx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAliases
argument_list|(
name|response
argument_list|,
literal|"idx"
argument_list|)
expr_stmt|;
name|assertEmptyMappings
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEmptySettings
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEmptyWarmers
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleSettings
specifier|public
name|void
name|testSimpleSettings
parameter_list|()
block|{
name|GetIndexResponse
name|response
init|=
name|runWithRandomFeatureMethod
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetIndex
argument_list|()
operator|.
name|addIndices
argument_list|(
literal|"idx"
argument_list|)
argument_list|,
name|Feature
operator|.
name|SETTINGS
argument_list|)
decl_stmt|;
name|String
index|[]
name|indices
init|=
name|response
operator|.
name|indices
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|indices
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indices
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indices
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"idx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSettings
argument_list|(
name|response
argument_list|,
literal|"idx"
argument_list|)
expr_stmt|;
name|assertEmptyAliases
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEmptyMappings
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEmptyWarmers
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleWarmer
specifier|public
name|void
name|testSimpleWarmer
parameter_list|()
block|{
name|GetIndexResponse
name|response
init|=
name|runWithRandomFeatureMethod
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetIndex
argument_list|()
operator|.
name|addIndices
argument_list|(
literal|"idx"
argument_list|)
argument_list|,
name|Feature
operator|.
name|WARMERS
argument_list|)
decl_stmt|;
name|String
index|[]
name|indices
init|=
name|response
operator|.
name|indices
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|indices
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indices
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indices
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"idx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertWarmers
argument_list|(
name|response
argument_list|,
literal|"idx"
argument_list|)
expr_stmt|;
name|assertEmptyAliases
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEmptyMappings
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEmptySettings
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleMixedFeatures
specifier|public
name|void
name|testSimpleMixedFeatures
parameter_list|()
block|{
name|int
name|numFeatures
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Feature
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|ArrayList
argument_list|<
name|Feature
argument_list|>
argument_list|(
name|numFeatures
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFeatures
condition|;
name|i
operator|++
control|)
block|{
name|features
operator|.
name|add
argument_list|(
name|randomFrom
argument_list|(
name|Feature
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetIndexResponse
name|response
init|=
name|runWithRandomFeatureMethod
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetIndex
argument_list|()
operator|.
name|addIndices
argument_list|(
literal|"idx"
argument_list|)
argument_list|,
name|features
operator|.
name|toArray
argument_list|(
operator|new
name|Feature
index|[
name|features
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|indices
init|=
name|response
operator|.
name|indices
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|indices
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indices
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indices
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"idx"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|features
operator|.
name|contains
argument_list|(
name|Feature
operator|.
name|ALIASES
argument_list|)
condition|)
block|{
name|assertAliases
argument_list|(
name|response
argument_list|,
literal|"idx"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEmptyAliases
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|features
operator|.
name|contains
argument_list|(
name|Feature
operator|.
name|MAPPINGS
argument_list|)
condition|)
block|{
name|assertMappings
argument_list|(
name|response
argument_list|,
literal|"idx"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEmptyMappings
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|features
operator|.
name|contains
argument_list|(
name|Feature
operator|.
name|SETTINGS
argument_list|)
condition|)
block|{
name|assertSettings
argument_list|(
name|response
argument_list|,
literal|"idx"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEmptySettings
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|features
operator|.
name|contains
argument_list|(
name|Feature
operator|.
name|WARMERS
argument_list|)
condition|)
block|{
name|assertWarmers
argument_list|(
name|response
argument_list|,
literal|"idx"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEmptyWarmers
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEmptyMixedFeatures
specifier|public
name|void
name|testEmptyMixedFeatures
parameter_list|()
block|{
name|int
name|numFeatures
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Feature
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|ArrayList
argument_list|<
name|Feature
argument_list|>
argument_list|(
name|numFeatures
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFeatures
condition|;
name|i
operator|++
control|)
block|{
name|features
operator|.
name|add
argument_list|(
name|randomFrom
argument_list|(
name|Feature
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetIndexResponse
name|response
init|=
name|runWithRandomFeatureMethod
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetIndex
argument_list|()
operator|.
name|addIndices
argument_list|(
literal|"empty_idx"
argument_list|)
argument_list|,
name|features
operator|.
name|toArray
argument_list|(
operator|new
name|Feature
index|[
name|features
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|indices
init|=
name|response
operator|.
name|indices
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|indices
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indices
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indices
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"empty_idx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEmptyAliases
argument_list|(
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|features
operator|.
name|contains
argument_list|(
name|Feature
operator|.
name|MAPPINGS
argument_list|)
condition|)
block|{
name|assertEmptyOrOnlyDefaultMappings
argument_list|(
name|response
argument_list|,
literal|"empty_idx"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEmptyMappings
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|features
operator|.
name|contains
argument_list|(
name|Feature
operator|.
name|SETTINGS
argument_list|)
condition|)
block|{
name|assertNonEmptySettings
argument_list|(
name|response
argument_list|,
literal|"empty_idx"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEmptySettings
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
name|assertEmptyWarmers
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetIndexWithBlocks
specifier|public
name|void
name|testGetIndexWithBlocks
parameter_list|()
block|{
for|for
control|(
name|String
name|block
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|SETTING_BLOCKS_READ
argument_list|,
name|SETTING_BLOCKS_WRITE
argument_list|,
name|SETTING_READ_ONLY
argument_list|)
control|)
block|{
try|try
block|{
name|enableIndexBlock
argument_list|(
literal|"idx"
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|GetIndexResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetIndex
argument_list|()
operator|.
name|addIndices
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addFeatures
argument_list|(
name|Feature
operator|.
name|MAPPINGS
argument_list|,
name|Feature
operator|.
name|ALIASES
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
index|[]
name|indices
init|=
name|response
operator|.
name|indices
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|indices
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indices
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indices
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"idx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertMappings
argument_list|(
name|response
argument_list|,
literal|"idx"
argument_list|)
expr_stmt|;
name|assertAliases
argument_list|(
name|response
argument_list|,
literal|"idx"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|disableIndexBlock
argument_list|(
literal|"idx"
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|enableIndexBlock
argument_list|(
literal|"idx"
argument_list|,
name|SETTING_BLOCKS_METADATA
argument_list|)
expr_stmt|;
name|assertBlocked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetIndex
argument_list|()
operator|.
name|addIndices
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addFeatures
argument_list|(
name|Feature
operator|.
name|MAPPINGS
argument_list|,
name|Feature
operator|.
name|ALIASES
argument_list|)
argument_list|,
name|INDEX_METADATA_BLOCK
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|disableIndexBlock
argument_list|(
literal|"idx"
argument_list|,
name|SETTING_BLOCKS_METADATA
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runWithRandomFeatureMethod
specifier|private
name|GetIndexResponse
name|runWithRandomFeatureMethod
parameter_list|(
name|GetIndexRequestBuilder
name|requestBuilder
parameter_list|,
name|Feature
modifier|...
name|features
parameter_list|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
return|return
name|requestBuilder
operator|.
name|addFeatures
argument_list|(
name|features
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|requestBuilder
operator|.
name|setFeatures
argument_list|(
name|features
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
block|}
DECL|method|assertWarmers
specifier|private
name|void
name|assertWarmers
parameter_list|(
name|GetIndexResponse
name|response
parameter_list|,
name|String
name|indexName
parameter_list|)
block|{
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|ImmutableList
argument_list|<
name|Entry
argument_list|>
argument_list|>
name|warmers
init|=
name|response
operator|.
name|warmers
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|warmers
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|warmers
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableList
argument_list|<
name|Entry
argument_list|>
name|indexWarmers
init|=
name|warmers
operator|.
name|get
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexWarmers
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexWarmers
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Entry
name|warmer
init|=
name|indexWarmers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|warmer
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|warmer
operator|.
name|name
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"warmer1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSettings
specifier|private
name|void
name|assertSettings
parameter_list|(
name|GetIndexResponse
name|response
parameter_list|,
name|String
name|indexName
parameter_list|)
block|{
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|settings
init|=
name|response
operator|.
name|settings
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|settings
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Settings
name|indexSettings
init|=
name|settings
operator|.
name|get
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexSettings
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexSettings
operator|.
name|get
argument_list|(
literal|"index.number_of_shards"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNonEmptySettings
specifier|private
name|void
name|assertNonEmptySettings
parameter_list|(
name|GetIndexResponse
name|response
parameter_list|,
name|String
name|indexName
parameter_list|)
block|{
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|settings
init|=
name|response
operator|.
name|settings
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|settings
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Settings
name|indexSettings
init|=
name|settings
operator|.
name|get
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexSettings
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMappings
specifier|private
name|void
name|assertMappings
parameter_list|(
name|GetIndexResponse
name|response
parameter_list|,
name|String
name|indexName
parameter_list|)
block|{
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
argument_list|>
name|mappings
init|=
name|response
operator|.
name|mappings
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|mappings
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mappings
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|indexMappings
init|=
name|mappings
operator|.
name|get
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexMappings
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexMappings
operator|.
name|size
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexMappings
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|MappingMetaData
name|mapping
init|=
name|indexMappings
operator|.
name|get
argument_list|(
literal|"_default_"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|mapping
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MappingMetaData
name|mapping
init|=
name|indexMappings
operator|.
name|get
argument_list|(
literal|"type1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|mapping
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapping
operator|.
name|type
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"type1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEmptyOrOnlyDefaultMappings
specifier|private
name|void
name|assertEmptyOrOnlyDefaultMappings
parameter_list|(
name|GetIndexResponse
name|response
parameter_list|,
name|String
name|indexName
parameter_list|)
block|{
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
argument_list|>
name|mappings
init|=
name|response
operator|.
name|mappings
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|mappings
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mappings
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|indexMappings
init|=
name|mappings
operator|.
name|get
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexMappings
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexMappings
operator|.
name|size
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexMappings
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|MappingMetaData
name|mapping
init|=
name|indexMappings
operator|.
name|get
argument_list|(
literal|"_default_"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|mapping
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertAliases
specifier|private
name|void
name|assertAliases
parameter_list|(
name|GetIndexResponse
name|response
parameter_list|,
name|String
name|indexName
parameter_list|)
block|{
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|ImmutableList
argument_list|<
name|AliasMetaData
argument_list|>
argument_list|>
name|aliases
init|=
name|response
operator|.
name|aliases
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|aliases
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|aliases
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableList
argument_list|<
name|AliasMetaData
argument_list|>
name|indexAliases
init|=
name|aliases
operator|.
name|get
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexAliases
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexAliases
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|AliasMetaData
name|alias
init|=
name|indexAliases
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|alias
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|alias
operator|.
name|alias
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"alias_idx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEmptyWarmers
specifier|private
name|void
name|assertEmptyWarmers
parameter_list|(
name|GetIndexResponse
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|warmers
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|warmers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEmptySettings
specifier|private
name|void
name|assertEmptySettings
parameter_list|(
name|GetIndexResponse
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|settings
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|settings
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEmptyMappings
specifier|private
name|void
name|assertEmptyMappings
parameter_list|(
name|GetIndexResponse
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|mappings
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|mappings
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEmptyAliases
specifier|private
name|void
name|assertEmptyAliases
parameter_list|(
name|GetIndexResponse
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|aliases
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|aliases
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

