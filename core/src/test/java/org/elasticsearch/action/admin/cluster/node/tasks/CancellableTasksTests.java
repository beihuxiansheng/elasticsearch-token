begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.node.tasks
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomInts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|cancel
operator|.
name|CancelTasksRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|cancel
operator|.
name|CancelTasksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|list
operator|.
name|ListTasksRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|list
operator|.
name|ListTasksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|list
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|nodes
operator|.
name|BaseNodeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|nodes
operator|.
name|BaseNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ClusterStateCreationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|CancellableTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterServiceUtils
operator|.
name|setState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_class
DECL|class|CancellableTasksTests
specifier|public
class|class
name|CancellableTasksTests
extends|extends
name|TaskManagerTestCase
block|{
DECL|class|CancellableNodeRequest
specifier|public
specifier|static
class|class
name|CancellableNodeRequest
extends|extends
name|BaseNodeRequest
block|{
DECL|field|requestName
specifier|protected
name|String
name|requestName
decl_stmt|;
DECL|field|nodeId
specifier|protected
name|String
name|nodeId
decl_stmt|;
DECL|method|CancellableNodeRequest
specifier|public
name|CancellableNodeRequest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|CancellableNodeRequest
specifier|public
name|CancellableNodeRequest
parameter_list|(
name|CancellableNodesRequest
name|request
parameter_list|,
name|String
name|nodeId
parameter_list|)
block|{
name|super
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|requestName
operator|=
name|request
operator|.
name|requestName
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|requestName
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|nodeId
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|requestName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"CancellableNodeRequest["
operator|+
name|requestName
operator|+
literal|", "
operator|+
name|nodeId
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|createTask
specifier|public
name|Task
name|createTask
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|action
parameter_list|,
name|TaskId
name|parentTaskId
parameter_list|)
block|{
return|return
operator|new
name|CancellableTask
argument_list|(
name|id
argument_list|,
name|type
argument_list|,
name|action
argument_list|,
name|getDescription
argument_list|()
argument_list|,
name|parentTaskId
argument_list|)
return|;
block|}
block|}
DECL|class|CancellableNodesRequest
specifier|public
specifier|static
class|class
name|CancellableNodesRequest
extends|extends
name|BaseNodesRequest
argument_list|<
name|CancellableNodesRequest
argument_list|>
block|{
DECL|field|requestName
specifier|private
name|String
name|requestName
decl_stmt|;
DECL|method|CancellableNodesRequest
specifier|private
name|CancellableNodesRequest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|CancellableNodesRequest
specifier|public
name|CancellableNodesRequest
parameter_list|(
name|String
name|requestName
parameter_list|,
name|String
modifier|...
name|nodesIds
parameter_list|)
block|{
name|super
argument_list|(
name|nodesIds
argument_list|)
expr_stmt|;
name|this
operator|.
name|requestName
operator|=
name|requestName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|requestName
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|requestName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"CancellableNodesRequest["
operator|+
name|requestName
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|createTask
specifier|public
name|Task
name|createTask
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|action
parameter_list|,
name|TaskId
name|parentTaskId
parameter_list|)
block|{
return|return
operator|new
name|CancellableTask
argument_list|(
name|id
argument_list|,
name|type
argument_list|,
name|action
argument_list|,
name|getDescription
argument_list|()
argument_list|,
name|parentTaskId
argument_list|)
return|;
block|}
block|}
comment|/**      * Simulates a cancellable node-based task that can be used to block node tasks so they are guaranteed to be registered by task manager      */
DECL|class|CancellableTestNodesAction
class|class
name|CancellableTestNodesAction
extends|extends
name|AbstractTestNodesAction
argument_list|<
name|CancellableNodesRequest
argument_list|,
name|CancellableNodeRequest
argument_list|>
block|{
comment|// True if the node operation should get stuck until its cancelled
DECL|field|shouldBlock
specifier|final
name|boolean
name|shouldBlock
decl_stmt|;
DECL|field|actionStartedLatch
specifier|final
name|CountDownLatch
name|actionStartedLatch
decl_stmt|;
DECL|method|CancellableTestNodesAction
name|CancellableTestNodesAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|actionName
parameter_list|,
name|ClusterName
name|clusterName
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|boolean
name|shouldBlock
parameter_list|,
name|CountDownLatch
name|actionStartedLatch
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|actionName
argument_list|,
name|clusterName
argument_list|,
name|threadPool
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|,
name|CancellableNodesRequest
operator|::
operator|new
argument_list|,
name|CancellableNodeRequest
operator|::
operator|new
argument_list|)
expr_stmt|;
name|this
operator|.
name|shouldBlock
operator|=
name|shouldBlock
expr_stmt|;
name|this
operator|.
name|actionStartedLatch
operator|=
name|actionStartedLatch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newNodeRequest
specifier|protected
name|CancellableNodeRequest
name|newNodeRequest
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|CancellableNodesRequest
name|request
parameter_list|)
block|{
return|return
operator|new
name|CancellableNodeRequest
argument_list|(
name|request
argument_list|,
name|nodeId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nodeOperation
specifier|protected
name|NodeResponse
name|nodeOperation
parameter_list|(
name|CancellableNodeRequest
name|request
parameter_list|,
name|Task
name|task
parameter_list|)
block|{
assert|assert
name|task
operator|instanceof
name|CancellableTask
assert|;
name|debugDelay
argument_list|(
name|request
operator|.
name|nodeId
argument_list|,
literal|"op1"
argument_list|)
expr_stmt|;
if|if
condition|(
name|actionStartedLatch
operator|!=
literal|null
condition|)
block|{
name|actionStartedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
name|debugDelay
argument_list|(
name|request
operator|.
name|nodeId
argument_list|,
literal|"op2"
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldBlock
condition|)
block|{
comment|// Simulate a job that takes forever to finish
comment|// Using periodic checks method to identify that the task was cancelled
try|try
block|{
name|awaitBusy
argument_list|(
parameter_list|()
lambda|->
block|{
if|if
condition|(
operator|(
operator|(
name|CancellableTask
operator|)
name|task
operator|)
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cancelled"
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"It should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
name|debugDelay
argument_list|(
name|request
operator|.
name|nodeId
argument_list|,
literal|"op4"
argument_list|)
expr_stmt|;
return|return
operator|new
name|NodeResponse
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nodeOperation
specifier|protected
name|NodeResponse
name|nodeOperation
parameter_list|(
name|CancellableNodeRequest
name|request
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"the task parameter is required"
argument_list|)
throw|;
block|}
block|}
DECL|method|startCancellableTestNodesAction
specifier|private
name|Task
name|startCancellableTestNodesAction
parameter_list|(
name|boolean
name|waitForActionToStart
parameter_list|,
name|int
name|blockedNodesCount
parameter_list|,
name|ActionListener
argument_list|<
name|NodesResponse
argument_list|>
name|listener
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|startCancellableTestNodesAction
argument_list|(
name|waitForActionToStart
argument_list|,
name|randomSubsetOf
argument_list|(
name|blockedNodesCount
argument_list|,
name|testNodes
argument_list|)
argument_list|,
operator|new
name|CancellableNodesRequest
argument_list|(
literal|"Test Request"
argument_list|)
argument_list|,
name|listener
argument_list|)
return|;
block|}
DECL|method|startCancellableTestNodesAction
specifier|private
name|Task
name|startCancellableTestNodesAction
parameter_list|(
name|boolean
name|waitForActionToStart
parameter_list|,
name|Collection
argument_list|<
name|TestNode
argument_list|>
name|blockOnNodes
parameter_list|,
name|CancellableNodesRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|NodesResponse
argument_list|>
name|listener
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|CountDownLatch
name|actionLatch
init|=
name|waitForActionToStart
condition|?
operator|new
name|CountDownLatch
argument_list|(
name|nodesCount
argument_list|)
else|:
literal|null
decl_stmt|;
name|CancellableTestNodesAction
index|[]
name|actions
init|=
operator|new
name|CancellableTestNodesAction
index|[
name|nodesCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|shouldBlock
init|=
name|blockOnNodes
operator|.
name|contains
argument_list|(
name|testNodes
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"The action in the node [{}] should block: [{}]"
argument_list|,
name|testNodes
index|[
name|i
index|]
operator|.
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|,
name|shouldBlock
argument_list|)
expr_stmt|;
name|actions
index|[
name|i
index|]
operator|=
operator|new
name|CancellableTestNodesAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"testAction"
argument_list|,
name|CLUSTER_NAME
argument_list|,
name|threadPool
argument_list|,
name|testNodes
index|[
name|i
index|]
operator|.
name|clusterService
argument_list|,
name|testNodes
index|[
name|i
index|]
operator|.
name|transportService
argument_list|,
name|shouldBlock
argument_list|,
name|actionLatch
argument_list|)
expr_stmt|;
block|}
name|Task
name|task
init|=
name|actions
index|[
literal|0
index|]
operator|.
name|execute
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
decl_stmt|;
if|if
condition|(
name|waitForActionToStart
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Awaiting for all actions to start"
argument_list|)
expr_stmt|;
name|actionLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Done waiting for all actions to start"
argument_list|)
expr_stmt|;
block|}
return|return
name|task
return|;
block|}
DECL|method|testBasicTaskCancellation
specifier|public
name|void
name|testBasicTaskCancellation
parameter_list|()
throws|throws
name|Exception
block|{
name|setupTestNodes
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|connectNodes
argument_list|(
name|testNodes
argument_list|)
expr_stmt|;
name|CountDownLatch
name|responseLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|waitForActionToStart
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"waitForActionToStart is set to {}"
argument_list|,
name|waitForActionToStart
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|NodesResponse
argument_list|>
name|responseReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|throwableReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|blockedNodesCount
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|nodesCount
argument_list|)
decl_stmt|;
name|Task
name|mainTask
init|=
name|startCancellableTestNodesAction
argument_list|(
name|waitForActionToStart
argument_list|,
name|blockedNodesCount
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|NodesResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|NodesResponse
name|listTasksResponse
parameter_list|)
block|{
name|responseReference
operator|.
name|set
argument_list|(
name|listTasksResponse
argument_list|)
expr_stmt|;
name|responseLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|throwableReference
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|responseLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Cancel main task
name|CancelTasksRequest
name|request
init|=
operator|new
name|CancelTasksRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setReason
argument_list|(
literal|"Testing Cancellation"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTaskId
argument_list|(
operator|new
name|TaskId
argument_list|(
name|testNodes
index|[
literal|0
index|]
operator|.
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|,
name|mainTask
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// And send the cancellation request to a random node
name|CancelTasksResponse
name|response
init|=
name|testNodes
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|testNodes
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
operator|.
name|transportCancelTasksAction
operator|.
name|execute
argument_list|(
name|request
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Awaiting for the main task to finish
name|responseLatch
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// We didn't cancel the request and it finished successfully
comment|// That should be rare and can be only in case we didn't block on a single node
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockedNodesCount
argument_list|)
expr_stmt|;
comment|// Make sure that the request was successful
name|assertNull
argument_list|(
name|throwableReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|responseReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nodesCount
argument_list|,
name|responseReference
operator|.
name|get
argument_list|()
operator|.
name|getNodes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|responseReference
operator|.
name|get
argument_list|()
operator|.
name|failureCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We canceled the request, in this case it should have fail, but we should get partial response
name|assertNull
argument_list|(
name|throwableReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nodesCount
argument_list|,
name|responseReference
operator|.
name|get
argument_list|()
operator|.
name|failureCount
argument_list|()
operator|+
name|responseReference
operator|.
name|get
argument_list|()
operator|.
name|getNodes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// and we should have at least as many failures as the number of blocked operations
comment|// (we might have cancelled some non-blocked operations before they even started and that's ok)
name|assertThat
argument_list|(
name|responseReference
operator|.
name|get
argument_list|()
operator|.
name|failureCount
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|blockedNodesCount
argument_list|)
argument_list|)
expr_stmt|;
comment|// We should have the information about the cancelled task in the cancel operation response
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mainTask
operator|.
name|getId
argument_list|()
argument_list|,
name|response
operator|.
name|getTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that all cancelled tasks reported that they support cancellation
for|for
control|(
name|TaskInfo
name|taskInfo
range|:
name|response
operator|.
name|getTasks
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|taskInfo
operator|.
name|isCancellable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Make sure that tasks are no longer running
name|ListTasksResponse
name|listTasksResponse
init|=
name|testNodes
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|testNodes
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
operator|.
name|transportListTasksAction
operator|.
name|execute
argument_list|(
operator|new
name|ListTasksRequest
argument_list|()
operator|.
name|setTaskId
argument_list|(
operator|new
name|TaskId
argument_list|(
name|testNodes
index|[
literal|0
index|]
operator|.
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|,
name|mainTask
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listTasksResponse
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that there are no leftover bans, the ban removal is async, so we might return from the cancellation
comment|// while the ban is still there, but it should disappear shortly
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"No bans on the node "
operator|+
name|i
argument_list|,
literal|0
argument_list|,
name|testNodes
index|[
name|i
index|]
operator|.
name|transportService
operator|.
name|getTaskManager
argument_list|()
operator|.
name|getBanCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testTaskCancellationOnCoordinatingNodeLeavingTheCluster
specifier|public
name|void
name|testTaskCancellationOnCoordinatingNodeLeavingTheCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|setupTestNodes
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|connectNodes
argument_list|(
name|testNodes
argument_list|)
expr_stmt|;
name|CountDownLatch
name|responseLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|simulateBanBeforeLeaving
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|NodesResponse
argument_list|>
name|responseReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|throwableReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|blockedNodesCount
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|nodesCount
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// We shouldn't block on the first node since it's leaving the cluster anyway so it doesn't matter
name|List
argument_list|<
name|TestNode
argument_list|>
name|blockOnNodes
init|=
name|randomSubsetOf
argument_list|(
name|blockedNodesCount
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|testNodes
argument_list|,
literal|1
argument_list|,
name|nodesCount
argument_list|)
argument_list|)
decl_stmt|;
name|Task
name|mainTask
init|=
name|startCancellableTestNodesAction
argument_list|(
literal|true
argument_list|,
name|blockOnNodes
argument_list|,
operator|new
name|CancellableNodesRequest
argument_list|(
literal|"Test Request"
argument_list|)
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|NodesResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|NodesResponse
name|listTasksResponse
parameter_list|)
block|{
name|responseReference
operator|.
name|set
argument_list|(
name|listTasksResponse
argument_list|)
expr_stmt|;
name|responseLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|throwableReference
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|responseLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|String
name|mainNode
init|=
name|testNodes
index|[
literal|0
index|]
operator|.
name|discoveryNode
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// Make sure that tasks are running
name|ListTasksResponse
name|listTasksResponse
init|=
name|testNodes
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|testNodes
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
operator|.
name|transportListTasksAction
operator|.
name|execute
argument_list|(
operator|new
name|ListTasksRequest
argument_list|()
operator|.
name|setParentTaskId
argument_list|(
operator|new
name|TaskId
argument_list|(
name|mainNode
argument_list|,
name|mainTask
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|listTasksResponse
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|blockOnNodes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Simulate the coordinating node leaving the cluster
name|DiscoveryNode
index|[]
name|discoveryNodes
init|=
operator|new
name|DiscoveryNode
index|[
name|testNodes
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|testNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|discoveryNodes
index|[
name|i
operator|-
literal|1
index|]
operator|=
name|testNodes
index|[
name|i
index|]
operator|.
name|discoveryNode
expr_stmt|;
block|}
name|DiscoveryNode
name|master
init|=
name|discoveryNodes
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|testNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Notify only nodes that should remain in the cluster
name|setState
argument_list|(
name|testNodes
index|[
name|i
index|]
operator|.
name|clusterService
argument_list|,
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
name|testNodes
index|[
name|i
index|]
operator|.
name|discoveryNode
argument_list|,
name|master
argument_list|,
name|discoveryNodes
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|simulateBanBeforeLeaving
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> Simulate issuing cancel request on the node that is about to leave the cluster"
argument_list|)
expr_stmt|;
comment|// Simulate issuing cancel request on the node that is about to leave the cluster
name|CancelTasksRequest
name|request
init|=
operator|new
name|CancelTasksRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setReason
argument_list|(
literal|"Testing Cancellation"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTaskId
argument_list|(
operator|new
name|TaskId
argument_list|(
name|testNodes
index|[
literal|0
index|]
operator|.
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|,
name|mainTask
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// And send the cancellation request to a random node
name|CancelTasksResponse
name|response
init|=
name|testNodes
index|[
literal|0
index|]
operator|.
name|transportCancelTasksAction
operator|.
name|execute
argument_list|(
name|request
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Done simulating issuing cancel request on the node that is about to leave the cluster"
argument_list|)
expr_stmt|;
comment|// This node still thinks that's part of the cluster, so cancelling should look successful
if|if
condition|(
name|response
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"!!!!"
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|response
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getTaskFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getTaskFailures
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|response
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|testNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"No bans on the node "
operator|+
name|i
argument_list|,
literal|0
argument_list|,
name|testNodes
index|[
name|i
index|]
operator|.
name|transportService
operator|.
name|getTaskManager
argument_list|()
operator|.
name|getBanCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Close the first node
name|testNodes
index|[
literal|0
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
comment|// Make sure that tasks are no longer running
try|try
block|{
name|ListTasksResponse
name|listTasksResponse1
init|=
name|testNodes
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|testNodes
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
operator|.
name|transportListTasksAction
operator|.
name|execute
argument_list|(
operator|new
name|ListTasksRequest
argument_list|()
operator|.
name|setTaskId
argument_list|(
operator|new
name|TaskId
argument_list|(
name|mainNode
argument_list|,
name|mainTask
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listTasksResponse1
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ex2
parameter_list|)
block|{
name|fail
argument_list|(
literal|"shouldn't be here"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Wait for clean up
name|responseLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
DECL|method|debugDelay
specifier|private
specifier|static
name|void
name|debugDelay
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|String
name|name
parameter_list|)
block|{
comment|// Introduce an additional pseudo random repeatable race conditions
name|String
name|delayName
init|=
name|RandomizedContext
operator|.
name|current
argument_list|()
operator|.
name|getRunnerSeedAsString
argument_list|()
operator|+
literal|":"
operator|+
name|nodeId
operator|+
literal|":"
operator|+
name|name
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|delayName
operator|.
name|hashCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
operator|<
literal|1
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|,
literal|20
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

