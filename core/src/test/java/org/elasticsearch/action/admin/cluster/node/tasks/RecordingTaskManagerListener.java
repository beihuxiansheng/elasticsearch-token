begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.node.tasks
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|tasks
operator|.
name|MockTaskManagerListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * MockTaskManagerListener that records all task registration/unregistration events  */
end_comment

begin_class
DECL|class|RecordingTaskManagerListener
specifier|public
class|class
name|RecordingTaskManagerListener
implements|implements
name|MockTaskManagerListener
block|{
DECL|field|actionMasks
specifier|private
name|String
index|[]
name|actionMasks
decl_stmt|;
DECL|field|localNodeId
specifier|private
name|String
name|localNodeId
decl_stmt|;
DECL|field|events
specifier|private
name|List
argument_list|<
name|Tuple
argument_list|<
name|Boolean
argument_list|,
name|TaskInfo
argument_list|>
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|RecordingTaskManagerListener
specifier|public
name|RecordingTaskManagerListener
parameter_list|(
name|String
name|localNodeId
parameter_list|,
name|String
modifier|...
name|actionMasks
parameter_list|)
block|{
name|this
operator|.
name|actionMasks
operator|=
name|actionMasks
expr_stmt|;
name|this
operator|.
name|localNodeId
operator|=
name|localNodeId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onTaskRegistered
specifier|public
specifier|synchronized
name|void
name|onTaskRegistered
parameter_list|(
name|Task
name|task
parameter_list|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|actionMasks
argument_list|,
name|task
operator|.
name|getAction
argument_list|()
argument_list|)
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
literal|true
argument_list|,
name|task
operator|.
name|taskInfo
argument_list|(
name|localNodeId
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onTaskUnregistered
specifier|public
specifier|synchronized
name|void
name|onTaskUnregistered
parameter_list|(
name|Task
name|task
parameter_list|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|actionMasks
argument_list|,
name|task
operator|.
name|getAction
argument_list|()
argument_list|)
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
literal|false
argument_list|,
name|task
operator|.
name|taskInfo
argument_list|(
name|localNodeId
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|waitForTaskCompletion
specifier|public
name|void
name|waitForTaskCompletion
parameter_list|(
name|Task
name|task
parameter_list|)
block|{     }
DECL|method|getEvents
specifier|public
specifier|synchronized
name|List
argument_list|<
name|Tuple
argument_list|<
name|Boolean
argument_list|,
name|TaskInfo
argument_list|>
argument_list|>
name|getEvents
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|events
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getRegistrationEvents
specifier|public
specifier|synchronized
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|getRegistrationEvents
parameter_list|()
block|{
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|events
init|=
name|this
operator|.
name|events
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|Tuple
operator|::
name|v1
argument_list|)
operator|.
name|map
argument_list|(
name|Tuple
operator|::
name|v2
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|events
argument_list|)
return|;
block|}
DECL|method|getUnregistrationEvents
specifier|public
specifier|synchronized
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|getUnregistrationEvents
parameter_list|()
block|{
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|events
init|=
name|this
operator|.
name|events
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|event
lambda|->
name|event
operator|.
name|v1
argument_list|()
operator|==
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|Tuple
operator|::
name|v2
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|events
argument_list|)
return|;
block|}
DECL|method|reset
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

