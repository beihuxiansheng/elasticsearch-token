begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.storedscripts
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|storedscripts
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_class
DECL|class|PutStoredScriptRequestTests
specifier|public
class|class
name|PutStoredScriptRequestTests
extends|extends
name|ESTestCase
block|{
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|PutStoredScriptRequest
name|storedScriptRequest
init|=
operator|new
name|PutStoredScriptRequest
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
name|storedScriptRequest
operator|.
name|xContentType
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|storedScriptRequest
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|PutStoredScriptRequest
name|serialized
init|=
operator|new
name|PutStoredScriptRequest
argument_list|()
decl_stmt|;
name|serialized
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
name|serialized
operator|.
name|xContentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storedScriptRequest
operator|.
name|lang
argument_list|()
argument_list|,
name|serialized
operator|.
name|lang
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storedScriptRequest
operator|.
name|id
argument_list|()
argument_list|,
name|serialized
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSerializationBwc
specifier|public
name|void
name|testSerializationBwc
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|rawStreamBytes
init|=
name|Base64
operator|.
name|getDecoder
argument_list|()
operator|.
name|decode
argument_list|(
literal|"ADwDCG11c3RhY2hlAQZzY3JpcHQCe30A"
argument_list|)
decl_stmt|;
specifier|final
name|Version
name|version
init|=
name|randomFrom
argument_list|(
name|Version
operator|.
name|V_5_0_0
argument_list|,
name|Version
operator|.
name|V_5_0_1
argument_list|,
name|Version
operator|.
name|V_5_0_2
argument_list|,
name|Version
operator|.
name|V_5_1_1
argument_list|,
name|Version
operator|.
name|V_5_1_2
argument_list|,
name|Version
operator|.
name|V_5_2_0
argument_list|)
decl_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|StreamInput
operator|.
name|wrap
argument_list|(
name|rawStreamBytes
argument_list|)
init|)
block|{
name|in
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|PutStoredScriptRequest
name|serialized
init|=
operator|new
name|PutStoredScriptRequest
argument_list|()
decl_stmt|;
name|serialized
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
name|serialized
operator|.
name|xContentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mustache"
argument_list|,
name|serialized
operator|.
name|lang
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"script"
argument_list|,
name|serialized
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
name|serialized
operator|.
name|content
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|out
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|serialized
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|rawStreamBytes
argument_list|,
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|toBytesRef
argument_list|()
operator|.
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

