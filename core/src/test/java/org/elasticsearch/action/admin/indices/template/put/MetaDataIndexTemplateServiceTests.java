begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.template.put
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|template
operator|.
name|put
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|alias
operator|.
name|Alias
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|AliasValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaDataCreateIndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaDataIndexTemplateService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaDataIndexTemplateService
operator|.
name|PutRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidIndexTemplateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_class
DECL|class|MetaDataIndexTemplateServiceTests
specifier|public
class|class
name|MetaDataIndexTemplateServiceTests
extends|extends
name|ESTestCase
block|{
DECL|method|testIndexTemplateInvalidNumberOfShards
specifier|public
name|void
name|testIndexTemplateInvalidNumberOfShards
parameter_list|()
block|{
name|PutRequest
name|request
init|=
operator|new
name|PutRequest
argument_list|(
literal|"test"
argument_list|,
literal|"test_shards"
argument_list|)
decl_stmt|;
name|request
operator|.
name|template
argument_list|(
literal|"test_shards*"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|request
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|map
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Throwable
argument_list|>
name|throwables
init|=
name|putTemplate
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|throwables
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|throwables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|InvalidIndexTemplateException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|throwables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"index must have 1 or more primary shards"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexTemplateValidationAccumulatesValidationErrors
specifier|public
name|void
name|testIndexTemplateValidationAccumulatesValidationErrors
parameter_list|()
block|{
name|PutRequest
name|request
init|=
operator|new
name|PutRequest
argument_list|(
literal|"test"
argument_list|,
literal|"putTemplate shards"
argument_list|)
decl_stmt|;
name|request
operator|.
name|template
argument_list|(
literal|"_test_shards*"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|request
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|map
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Throwable
argument_list|>
name|throwables
init|=
name|putTemplate
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|throwables
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|throwables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|InvalidIndexTemplateException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|throwables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"name must not contain a space"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|throwables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"template must not start with '_'"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|throwables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"index must have 1 or more primary shards"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexTemplateWithAliasNameEqualToTemplatePattern
specifier|public
name|void
name|testIndexTemplateWithAliasNameEqualToTemplatePattern
parameter_list|()
block|{
name|PutRequest
name|request
init|=
operator|new
name|PutRequest
argument_list|(
literal|"api"
argument_list|,
literal|"foobar_template"
argument_list|)
decl_stmt|;
name|request
operator|.
name|template
argument_list|(
literal|"foobar"
argument_list|)
expr_stmt|;
name|request
operator|.
name|aliases
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|Alias
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Throwable
argument_list|>
name|errors
init|=
name|putTemplate
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|errors
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Alias [foobar] cannot be the same as the template pattern [foobar]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|putTemplate
specifier|private
specifier|static
name|List
argument_list|<
name|Throwable
argument_list|>
name|putTemplate
parameter_list|(
name|PutRequest
name|request
parameter_list|)
block|{
name|MetaDataCreateIndexService
name|createIndexService
init|=
operator|new
name|MetaDataCreateIndexService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
literal|null
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MetaDataIndexTemplateService
name|service
init|=
operator|new
name|MetaDataIndexTemplateService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
name|createIndexService
argument_list|,
operator|new
name|AliasValidator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|throwables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|service
operator|.
name|putTemplate
argument_list|(
name|request
argument_list|,
operator|new
name|MetaDataIndexTemplateService
operator|.
name|PutListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|MetaDataIndexTemplateService
operator|.
name|PutResponse
name|response
parameter_list|)
block|{              }
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|throwables
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|throwables
return|;
block|}
block|}
end_class

end_unit

