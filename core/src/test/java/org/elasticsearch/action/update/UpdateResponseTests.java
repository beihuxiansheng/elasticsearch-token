begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.update
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponseTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|get
operator|.
name|GetField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|get
operator|.
name|GetResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|get
operator|.
name|GetResultTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|RandomObjects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
operator|.
name|Result
operator|.
name|DELETED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
operator|.
name|Result
operator|.
name|NOT_FOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
operator|.
name|Result
operator|.
name|UPDATED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|INDEX_UUID_NA_VALUE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
operator|.
name|toXContent
import|;
end_import

begin_class
DECL|class|UpdateResponseTests
specifier|public
class|class
name|UpdateResponseTests
extends|extends
name|ESTestCase
block|{
DECL|method|testToXContent
specifier|public
name|void
name|testToXContent
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|UpdateResponse
name|updateResponse
init|=
operator|new
name|UpdateResponse
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"index_uuid"
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|0
argument_list|,
name|NOT_FOUND
argument_list|)
decl_stmt|;
name|String
name|output
init|=
name|Strings
operator|.
name|toString
argument_list|(
name|updateResponse
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"_index\":\"index\",\"_type\":\"type\",\"_id\":\"id\",\"_version\":0,\"result\":\"not_found\","
operator|+
literal|"\"_shards\":{\"total\":0,\"successful\":0,\"failed\":0}}"
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|{
name|UpdateResponse
name|updateResponse
init|=
operator|new
name|UpdateResponse
argument_list|(
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
argument_list|(
literal|10
argument_list|,
literal|6
argument_list|)
argument_list|,
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"index_uuid"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
name|DELETED
argument_list|)
decl_stmt|;
name|String
name|output
init|=
name|Strings
operator|.
name|toString
argument_list|(
name|updateResponse
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"_index\":\"index\",\"_type\":\"type\",\"_id\":\"id\",\"_version\":1,\"result\":\"deleted\","
operator|+
literal|"\"_shards\":{\"total\":10,\"successful\":6,\"failed\":0},\"_seq_no\":3}"
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|{
name|BytesReference
name|source
init|=
operator|new
name|BytesArray
argument_list|(
literal|"{\"title\":\"Book title\",\"isbn\":\"ABC-123\"}"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GetField
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
operator|new
name|GetField
argument_list|(
literal|"title"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"Book title"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
literal|"isbn"
argument_list|,
operator|new
name|GetField
argument_list|(
literal|"isbn"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"ABC-123"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateResponse
name|updateResponse
init|=
operator|new
name|UpdateResponse
argument_list|(
operator|new
name|ReplicationResponse
operator|.
name|ShardInfo
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|ShardId
argument_list|(
literal|"books"
argument_list|,
literal|"books_uuid"
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"book"
argument_list|,
literal|"1"
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|,
name|UPDATED
argument_list|)
decl_stmt|;
name|updateResponse
operator|.
name|setGetResult
argument_list|(
operator|new
name|GetResult
argument_list|(
literal|"books"
argument_list|,
literal|"book"
argument_list|,
literal|"1"
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|source
argument_list|,
name|fields
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|Strings
operator|.
name|toString
argument_list|(
name|updateResponse
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"_index\":\"books\",\"_type\":\"book\",\"_id\":\"1\",\"_version\":2,\"result\":\"updated\","
operator|+
literal|"\"_shards\":{\"total\":3,\"successful\":2,\"failed\":0},\"_seq_no\":7,\"get\":{\"found\":true,"
operator|+
literal|"\"_source\":{\"title\":\"Book title\",\"isbn\":\"ABC-123\"},\"fields\":{\"isbn\":[\"ABC-123\"],\"title\":[\"Book "
operator|+
literal|"title\"]}}}"
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testToAndFromXContent
specifier|public
name|void
name|testToAndFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Tuple
argument_list|<
name|UpdateResponse
argument_list|,
name|UpdateResponse
argument_list|>
name|tuple
init|=
name|randomUpdateResponse
argument_list|(
name|xContentType
argument_list|)
decl_stmt|;
name|UpdateResponse
name|updateResponse
init|=
name|tuple
operator|.
name|v1
argument_list|()
decl_stmt|;
name|UpdateResponse
name|expectedUpdateResponse
init|=
name|tuple
operator|.
name|v2
argument_list|()
decl_stmt|;
name|boolean
name|humanReadable
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|BytesReference
name|updateResponseBytes
init|=
name|toXContent
argument_list|(
name|updateResponse
argument_list|,
name|xContentType
argument_list|,
name|humanReadable
argument_list|)
decl_stmt|;
comment|// Shuffle the XContent fields
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|updateResponseBytes
argument_list|)
init|)
block|{
name|updateResponseBytes
operator|=
name|shuffleXContent
argument_list|(
name|parser
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Parse the XContent bytes to obtain a parsed UpdateResponse
name|UpdateResponse
name|parsedUpdateResponse
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|updateResponseBytes
argument_list|)
init|)
block|{
name|parsedUpdateResponse
operator|=
name|UpdateResponse
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// We can't use equals() to compare the original and the parsed delete response
comment|// because the random delete response can contain shard failures with exceptions,
comment|// and those exceptions are not parsed back with the same types.
name|assertUpdateResponse
argument_list|(
name|expectedUpdateResponse
argument_list|,
name|parsedUpdateResponse
argument_list|)
expr_stmt|;
block|}
DECL|method|assertUpdateResponse
specifier|public
specifier|static
name|void
name|assertUpdateResponse
parameter_list|(
name|UpdateResponse
name|expected
parameter_list|,
name|UpdateResponse
name|actual
parameter_list|)
block|{
name|IndexResponseTests
operator|.
name|assertDocWriteResponse
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getGetResult
argument_list|()
argument_list|,
name|actual
operator|.
name|getGetResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a tuple of {@link UpdateResponse}s.      *<p>      * The left element is the actual {@link UpdateResponse} to serialize while the right element is the      * expected {@link UpdateResponse} after parsing.      */
DECL|method|randomUpdateResponse
specifier|public
specifier|static
name|Tuple
argument_list|<
name|UpdateResponse
argument_list|,
name|UpdateResponse
argument_list|>
name|randomUpdateResponse
parameter_list|(
name|XContentType
name|xContentType
parameter_list|)
block|{
name|Tuple
argument_list|<
name|GetResult
argument_list|,
name|GetResult
argument_list|>
name|getResults
init|=
name|GetResultTests
operator|.
name|randomGetResult
argument_list|(
name|xContentType
argument_list|)
decl_stmt|;
name|GetResult
name|actualGetResult
init|=
name|getResults
operator|.
name|v1
argument_list|()
decl_stmt|;
name|GetResult
name|expectedGetResult
init|=
name|getResults
operator|.
name|v2
argument_list|()
decl_stmt|;
name|String
name|index
init|=
name|actualGetResult
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|actualGetResult
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|actualGetResult
operator|.
name|getId
argument_list|()
decl_stmt|;
name|long
name|version
init|=
name|actualGetResult
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|DocWriteResponse
operator|.
name|Result
name|result
init|=
name|actualGetResult
operator|.
name|isExists
argument_list|()
condition|?
name|DocWriteResponse
operator|.
name|Result
operator|.
name|UPDATED
else|:
name|DocWriteResponse
operator|.
name|Result
operator|.
name|NOT_FOUND
decl_stmt|;
name|String
name|indexUUid
init|=
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|int
name|shardId
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|// We also want small number values (randomNonNegativeLong() tend to generate high numbers)
comment|// in order to catch some conversion error that happen between int/long after parsing.
name|Long
name|seqNo
init|=
name|randomFrom
argument_list|(
name|randomNonNegativeLong
argument_list|()
argument_list|,
operator|(
name|long
operator|)
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10_000
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ShardId
name|actualShardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
name|indexUUid
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
name|ShardId
name|expectedShardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
name|INDEX_UUID_NA_VALUE
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|UpdateResponse
name|actual
decl_stmt|,
name|expected
decl_stmt|;
if|if
condition|(
name|seqNo
operator|!=
literal|null
condition|)
block|{
name|Tuple
argument_list|<
name|ReplicationResponse
operator|.
name|ShardInfo
argument_list|,
name|ReplicationResponse
operator|.
name|ShardInfo
argument_list|>
name|shardInfos
init|=
name|RandomObjects
operator|.
name|randomShardInfo
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|actual
operator|=
operator|new
name|UpdateResponse
argument_list|(
name|shardInfos
operator|.
name|v1
argument_list|()
argument_list|,
name|actualShardId
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|seqNo
argument_list|,
name|version
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|UpdateResponse
argument_list|(
name|shardInfos
operator|.
name|v2
argument_list|()
argument_list|,
name|expectedShardId
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|seqNo
argument_list|,
name|version
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actual
operator|=
operator|new
name|UpdateResponse
argument_list|(
name|actualShardId
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|version
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|UpdateResponse
argument_list|(
name|expectedShardId
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|version
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|actualGetResult
operator|.
name|isExists
argument_list|()
condition|)
block|{
name|actual
operator|.
name|setGetResult
argument_list|(
name|actualGetResult
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedGetResult
operator|.
name|isExists
argument_list|()
condition|)
block|{
name|expected
operator|.
name|setGetResult
argument_list|(
name|expectedGetResult
argument_list|)
expr_stmt|;
block|}
name|boolean
name|forcedRefresh
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|actual
operator|.
name|setForcedRefresh
argument_list|(
name|forcedRefresh
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setForcedRefresh
argument_list|(
name|forcedRefresh
argument_list|)
expr_stmt|;
return|return
name|Tuple
operator|.
name|tuple
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
return|;
block|}
block|}
end_class

end_unit

