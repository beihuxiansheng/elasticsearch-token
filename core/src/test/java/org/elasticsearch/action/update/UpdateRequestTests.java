begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.update
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|get
operator|.
name|GetResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|MockScriptEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptContextRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptEngineRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|RandomObjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|watcher
operator|.
name|ResourceWatcherService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
operator|.
name|toXContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertToXContentEquivalent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|arrayContaining
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|UpdateRequestTests
specifier|public
class|class
name|UpdateRequestTests
extends|extends
name|ESTestCase
block|{
DECL|method|testFromXContent
specifier|public
name|void
name|testFromXContent
parameter_list|()
throws|throws
name|Exception
block|{
name|UpdateRequest
name|request
init|=
operator|new
name|UpdateRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
comment|// simple script
name|request
operator|.
name|fromXContent
argument_list|(
name|createParser
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"script"
argument_list|,
literal|"script1"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Script
name|script
init|=
name|request
operator|.
name|script
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|script
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|script
operator|.
name|getIdOrCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"script1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|script
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|script
operator|.
name|getLang
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Script
operator|.
name|DEFAULT_SCRIPT_LANG
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|script
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|params
argument_list|,
name|equalTo
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// simple verbose script
name|request
operator|.
name|fromXContent
argument_list|(
name|createParser
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"script"
argument_list|)
operator|.
name|field
argument_list|(
literal|"inline"
argument_list|,
literal|"script1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|script
operator|=
name|request
operator|.
name|script
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|script
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|script
operator|.
name|getIdOrCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"script1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|script
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|script
operator|.
name|getLang
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Script
operator|.
name|DEFAULT_SCRIPT_LANG
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|=
name|script
operator|.
name|getParams
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|params
argument_list|,
name|equalTo
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// script with params
name|request
operator|=
operator|new
name|UpdateRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|request
operator|.
name|fromXContent
argument_list|(
name|createParser
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"script"
argument_list|)
operator|.
name|field
argument_list|(
literal|"inline"
argument_list|,
literal|"script1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"params"
argument_list|)
operator|.
name|field
argument_list|(
literal|"param1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|script
operator|=
name|request
operator|.
name|script
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|script
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|script
operator|.
name|getIdOrCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"script1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|script
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|script
operator|.
name|getLang
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Script
operator|.
name|DEFAULT_SCRIPT_LANG
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|=
name|script
operator|.
name|getParams
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|params
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"param1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|UpdateRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|request
operator|.
name|fromXContent
argument_list|(
name|createParser
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"script"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"params"
argument_list|)
operator|.
name|field
argument_list|(
literal|"param1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"inline"
argument_list|,
literal|"script1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|script
operator|=
name|request
operator|.
name|script
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|script
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|script
operator|.
name|getIdOrCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"script1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|script
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|script
operator|.
name|getLang
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Script
operator|.
name|DEFAULT_SCRIPT_LANG
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|=
name|script
operator|.
name|getParams
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|params
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"param1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// script with params and upsert
name|request
operator|=
operator|new
name|UpdateRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|request
operator|.
name|fromXContent
argument_list|(
name|createParser
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"script"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"params"
argument_list|)
operator|.
name|field
argument_list|(
literal|"param1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"inline"
argument_list|,
literal|"script1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"upsert"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"compound"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|script
operator|=
name|request
operator|.
name|script
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|script
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|script
operator|.
name|getIdOrCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"script1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|script
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|script
operator|.
name|getLang
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Script
operator|.
name|DEFAULT_SCRIPT_LANG
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|=
name|script
operator|.
name|getParams
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|params
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"param1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|upsertDoc
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|request
operator|.
name|upsertRequest
argument_list|()
operator|.
name|source
argument_list|()
argument_list|,
literal|true
argument_list|,
name|request
operator|.
name|upsertRequest
argument_list|()
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|.
name|v2
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|upsertDoc
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|upsertDoc
operator|.
name|get
argument_list|(
literal|"compound"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|UpdateRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|request
operator|.
name|fromXContent
argument_list|(
name|createParser
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"upsert"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"compound"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"script"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"params"
argument_list|)
operator|.
name|field
argument_list|(
literal|"param1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"inline"
argument_list|,
literal|"script1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|script
operator|=
name|request
operator|.
name|script
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|script
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|script
operator|.
name|getIdOrCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"script1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|script
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|script
operator|.
name|getLang
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Script
operator|.
name|DEFAULT_SCRIPT_LANG
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|=
name|script
operator|.
name|getParams
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|params
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"param1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|upsertDoc
operator|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|request
operator|.
name|upsertRequest
argument_list|()
operator|.
name|source
argument_list|()
argument_list|,
literal|true
argument_list|,
name|request
operator|.
name|upsertRequest
argument_list|()
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|.
name|v2
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|upsertDoc
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|upsertDoc
operator|.
name|get
argument_list|(
literal|"compound"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// script with doc
name|request
operator|=
operator|new
name|UpdateRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|request
operator|.
name|fromXContent
argument_list|(
name|createParser
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"compound"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|doc
init|=
name|request
operator|.
name|doc
argument_list|()
operator|.
name|sourceAsMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|doc
operator|.
name|get
argument_list|(
literal|"compound"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Related to issue 15338
DECL|method|testFieldsParsing
specifier|public
name|void
name|testFieldsParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|UpdateRequest
name|request
init|=
operator|new
name|UpdateRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|fromXContent
argument_list|(
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{\"doc\": {\"field1\": \"value1\"}, \"fields\": \"_source\"}"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|doc
argument_list|()
operator|.
name|sourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fields
argument_list|()
argument_list|,
name|arrayContaining
argument_list|(
literal|"_source"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|UpdateRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|fromXContent
argument_list|(
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{\"doc\": {\"field2\": \"value2\"}, \"fields\": [\"field1\", \"field2\"]}"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|doc
argument_list|()
operator|.
name|sourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fields
argument_list|()
argument_list|,
name|arrayContaining
argument_list|(
literal|"field1"
argument_list|,
literal|"field2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFetchSourceParsing
specifier|public
name|void
name|testFetchSourceParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|UpdateRequest
name|request
init|=
operator|new
name|UpdateRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
name|request
operator|.
name|fromXContent
argument_list|(
name|createParser
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"_source"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|includes
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|excludes
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|fetchSource
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|fromXContent
argument_list|(
name|createParser
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"_source"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|includes
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|excludes
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|fetchSource
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|fromXContent
argument_list|(
name|createParser
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"_source"
argument_list|,
literal|"path.inner.*"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|fetchSource
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|includes
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|excludes
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|includes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"path.inner.*"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|fromXContent
argument_list|(
name|createParser
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"_source"
argument_list|)
operator|.
name|field
argument_list|(
literal|"includes"
argument_list|,
literal|"path.inner.*"
argument_list|)
operator|.
name|field
argument_list|(
literal|"excludes"
argument_list|,
literal|"another.inner.*"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|fetchSource
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|includes
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|excludes
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|includes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"path.inner.*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|fetchSource
argument_list|()
operator|.
name|excludes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"another.inner.*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNowInScript
specifier|public
name|void
name|testNowInScript
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|genericConfigFolder
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Settings
name|baseSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_CONF_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|genericConfigFolder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Environment
name|environment
init|=
operator|new
name|Environment
argument_list|(
name|baseSettings
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|>
name|scripts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"ctx._source.update_timestamp = ctx._now"
argument_list|,
parameter_list|(
name|vars
parameter_list|)
lambda|->
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars2
init|=
name|vars
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|vars2
operator|.
name|get
argument_list|(
literal|"ctx"
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|ctx
operator|.
name|get
argument_list|(
literal|"_source"
argument_list|)
decl_stmt|;
name|source
operator|.
name|put
argument_list|(
literal|"update_timestamp"
argument_list|,
name|ctx
operator|.
name|get
argument_list|(
literal|"_now"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"ctx._timestamp = ctx._now"
argument_list|,
parameter_list|(
name|vars
parameter_list|)
lambda|->
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"ctx"
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|put
argument_list|(
literal|"_timestamp"
argument_list|,
name|ctx
operator|.
name|get
argument_list|(
literal|"_now"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
name|ScriptContextRegistry
name|scriptContextRegistry
init|=
operator|new
name|ScriptContextRegistry
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|ScriptEngineRegistry
name|scriptEngineRegistry
init|=
operator|new
name|ScriptEngineRegistry
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|MockScriptEngine
argument_list|(
literal|"mock"
argument_list|,
name|scripts
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ScriptSettings
name|scriptSettings
init|=
operator|new
name|ScriptSettings
argument_list|(
name|scriptEngineRegistry
argument_list|,
name|scriptContextRegistry
argument_list|)
decl_stmt|;
name|ScriptService
name|scriptService
init|=
operator|new
name|ScriptService
argument_list|(
name|baseSettings
argument_list|,
name|environment
argument_list|,
operator|new
name|ResourceWatcherService
argument_list|(
name|baseSettings
argument_list|,
literal|null
argument_list|)
argument_list|,
name|scriptEngineRegistry
argument_list|,
name|scriptContextRegistry
argument_list|,
name|scriptSettings
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|UpdateHelper
name|updateHelper
init|=
operator|new
name|UpdateHelper
argument_list|(
name|settings
argument_list|,
name|scriptService
argument_list|)
decl_stmt|;
comment|// We just upsert one document with now() using a script
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|source
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
decl_stmt|;
block|{
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|upsert
argument_list|(
name|indexRequest
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
literal|"mock"
argument_list|,
literal|"ctx._source.update_timestamp = ctx._now"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|scriptedUpsert
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|long
name|nowInMillis
init|=
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
comment|// We simulate that the document is not existing yet
name|GetResult
name|getResult
init|=
operator|new
name|GetResult
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|UpdateHelper
operator|.
name|Result
name|result
init|=
name|updateHelper
operator|.
name|prepare
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|updateRequest
argument_list|,
name|getResult
argument_list|,
parameter_list|()
lambda|->
name|nowInMillis
argument_list|)
decl_stmt|;
name|Streamable
name|action
init|=
name|result
operator|.
name|action
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|action
argument_list|,
name|instanceOf
argument_list|(
name|IndexRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|IndexRequest
name|indexAction
init|=
operator|(
name|IndexRequest
operator|)
name|action
decl_stmt|;
name|assertEquals
argument_list|(
name|indexAction
operator|.
name|sourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"update_timestamp"
argument_list|)
argument_list|,
name|nowInMillis
argument_list|)
expr_stmt|;
block|}
block|{
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|upsert
argument_list|(
name|indexRequest
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
literal|"mock"
argument_list|,
literal|"ctx._timestamp = ctx._now"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|scriptedUpsert
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// We simulate that the document is not existing yet
name|GetResult
name|getResult
init|=
operator|new
name|GetResult
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|UpdateHelper
operator|.
name|Result
name|result
init|=
name|updateHelper
operator|.
name|prepare
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|updateRequest
argument_list|,
name|getResult
argument_list|,
parameter_list|()
lambda|->
literal|42L
argument_list|)
decl_stmt|;
name|Streamable
name|action
init|=
name|result
operator|.
name|action
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|action
argument_list|,
name|instanceOf
argument_list|(
name|IndexRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testToAndFromXContent
specifier|public
name|void
name|testToAndFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|updateRequest
operator|.
name|detectNoop
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|BytesReference
name|source
init|=
name|RandomObjects
operator|.
name|randomSource
argument_list|(
name|random
argument_list|()
argument_list|,
name|xContentType
argument_list|)
decl_stmt|;
name|updateRequest
operator|.
name|doc
argument_list|(
operator|new
name|IndexRequest
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|,
name|xContentType
argument_list|)
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|docAsUpsert
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ScriptType
name|scriptType
init|=
name|randomFrom
argument_list|(
name|ScriptType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|scriptLang
init|=
operator|(
name|scriptType
operator|!=
name|ScriptType
operator|.
name|STORED
operator|)
condition|?
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
else|:
literal|null
decl_stmt|;
name|String
name|scriptIdOrCode
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|int
name|nbScriptParams
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|scriptParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|nbScriptParams
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbScriptParams
condition|;
name|i
operator|++
control|)
block|{
name|scriptParams
operator|.
name|put
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|updateRequest
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
name|scriptType
argument_list|,
name|scriptLang
argument_list|,
name|scriptIdOrCode
argument_list|,
name|scriptParams
argument_list|)
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|scriptedUpsert
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|BytesReference
name|source
init|=
name|RandomObjects
operator|.
name|randomSource
argument_list|(
name|random
argument_list|()
argument_list|,
name|xContentType
argument_list|)
decl_stmt|;
name|updateRequest
operator|.
name|upsert
argument_list|(
operator|new
name|IndexRequest
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|,
name|xContentType
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|String
index|[]
name|fields
init|=
operator|new
name|String
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fields
index|[
name|i
index|]
operator|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
name|updateRequest
operator|.
name|fields
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|updateRequest
operator|.
name|fetchSource
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|includes
init|=
operator|new
name|String
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|includes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|includes
index|[
name|i
index|]
operator|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|excludes
init|=
operator|new
name|String
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|excludes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|excludes
index|[
name|i
index|]
operator|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|updateRequest
operator|.
name|fetchSource
argument_list|(
name|includes
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|humanReadable
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|BytesReference
name|originalBytes
init|=
name|XContentHelper
operator|.
name|toXContent
argument_list|(
name|updateRequest
argument_list|,
name|xContentType
argument_list|,
name|humanReadable
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|originalBytes
argument_list|)
init|)
block|{
name|originalBytes
operator|=
name|shuffleXContent
argument_list|(
name|parser
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
block|}
name|UpdateRequest
name|parsedUpdateRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|originalBytes
argument_list|)
init|)
block|{
name|parsedUpdateRequest
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|updateRequest
operator|.
name|detectNoop
argument_list|()
argument_list|,
name|parsedUpdateRequest
operator|.
name|detectNoop
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updateRequest
operator|.
name|docAsUpsert
argument_list|()
argument_list|,
name|parsedUpdateRequest
operator|.
name|docAsUpsert
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updateRequest
operator|.
name|docAsUpsert
argument_list|()
argument_list|,
name|parsedUpdateRequest
operator|.
name|docAsUpsert
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updateRequest
operator|.
name|script
argument_list|()
argument_list|,
name|parsedUpdateRequest
operator|.
name|script
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updateRequest
operator|.
name|scriptedUpsert
argument_list|()
argument_list|,
name|parsedUpdateRequest
operator|.
name|scriptedUpsert
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|updateRequest
operator|.
name|fields
argument_list|()
argument_list|,
name|parsedUpdateRequest
operator|.
name|fields
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updateRequest
operator|.
name|fetchSource
argument_list|()
argument_list|,
name|parsedUpdateRequest
operator|.
name|fetchSource
argument_list|()
argument_list|)
expr_stmt|;
name|BytesReference
name|finalBytes
init|=
name|toXContent
argument_list|(
name|parsedUpdateRequest
argument_list|,
name|xContentType
argument_list|,
name|humanReadable
argument_list|)
decl_stmt|;
name|assertToXContentEquivalent
argument_list|(
name|originalBytes
argument_list|,
name|finalBytes
argument_list|,
name|xContentType
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

