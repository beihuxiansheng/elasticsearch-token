begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|main
operator|.
name|MainAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|main
operator|.
name|TransportMainAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|TransportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|node
operator|.
name|NodeClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|IndexScopedSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SettingsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|ActionPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|ActionPlugin
operator|.
name|ActionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|RestMainAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|startsWith
import|;
end_import

begin_class
DECL|class|ActionModuleTests
specifier|public
class|class
name|ActionModuleTests
extends|extends
name|ESTestCase
block|{
DECL|method|testSetupActionsContainsKnownBuiltin
specifier|public
name|void
name|testSetupActionsContainsKnownBuiltin
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ActionModule
operator|.
name|setupActions
argument_list|(
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
name|MainAction
operator|.
name|INSTANCE
operator|.
name|name
argument_list|()
argument_list|,
operator|new
name|ActionHandler
argument_list|<>
argument_list|(
name|MainAction
operator|.
name|INSTANCE
argument_list|,
name|TransportMainAction
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPluginCantOverwriteBuiltinAction
specifier|public
name|void
name|testPluginCantOverwriteBuiltinAction
parameter_list|()
block|{
name|ActionPlugin
name|dupsMainAction
init|=
operator|new
name|ActionPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ActionHandler
argument_list|<
name|?
extends|extends
name|ActionRequest
argument_list|,
name|?
extends|extends
name|ActionResponse
argument_list|>
argument_list|>
name|getActions
parameter_list|()
block|{
return|return
name|singletonList
argument_list|(
operator|new
name|ActionHandler
argument_list|<>
argument_list|(
name|MainAction
operator|.
name|INSTANCE
argument_list|,
name|TransportMainAction
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ActionModule
operator|.
name|setupActions
argument_list|(
name|singletonList
argument_list|(
name|dupsMainAction
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"action for name ["
operator|+
name|MainAction
operator|.
name|NAME
operator|+
literal|"] already registered"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPluginCanRegisterAction
specifier|public
name|void
name|testPluginCanRegisterAction
parameter_list|()
block|{
class|class
name|FakeRequest
extends|extends
name|ActionRequest
block|{
annotation|@
name|Override
specifier|public
name|ActionRequestValidationException
name|validate
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
class|class
name|FakeTransportAction
extends|extends
name|TransportAction
argument_list|<
name|FakeRequest
argument_list|,
name|ActionResponse
argument_list|>
block|{
specifier|protected
name|FakeTransportAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|actionName
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|TaskManager
name|taskManager
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|actionName
argument_list|,
name|threadPool
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|taskManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doExecute
parameter_list|(
name|FakeRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|ActionResponse
argument_list|>
name|listener
parameter_list|)
block|{             }
block|}
class|class
name|FakeAction
extends|extends
name|GenericAction
argument_list|<
name|FakeRequest
argument_list|,
name|ActionResponse
argument_list|>
block|{
specifier|protected
name|FakeAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"fake"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ActionResponse
name|newResponse
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
name|FakeAction
name|action
init|=
operator|new
name|FakeAction
argument_list|()
decl_stmt|;
name|ActionPlugin
name|registersFakeAction
init|=
operator|new
name|ActionPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ActionHandler
argument_list|<
name|?
extends|extends
name|ActionRequest
argument_list|,
name|?
extends|extends
name|ActionResponse
argument_list|>
argument_list|>
name|getActions
parameter_list|()
block|{
return|return
name|singletonList
argument_list|(
operator|new
name|ActionHandler
argument_list|<>
argument_list|(
name|action
argument_list|,
name|FakeTransportAction
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|assertThat
argument_list|(
name|ActionModule
operator|.
name|setupActions
argument_list|(
name|singletonList
argument_list|(
name|registersFakeAction
argument_list|)
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"fake"
argument_list|,
operator|new
name|ActionHandler
argument_list|<>
argument_list|(
name|action
argument_list|,
name|FakeTransportAction
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetupRestHandlerContainsKnownBuiltin
specifier|public
name|void
name|testSetupRestHandlerContainsKnownBuiltin
parameter_list|()
block|{
name|SettingsModule
name|settings
init|=
operator|new
name|SettingsModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|ActionModule
name|actionModule
init|=
operator|new
name|ActionModule
argument_list|(
literal|false
argument_list|,
name|settings
operator|.
name|getSettings
argument_list|()
argument_list|,
operator|new
name|IndexNameExpressionResolver
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|settings
operator|.
name|getIndexScopedSettings
argument_list|()
argument_list|,
name|settings
operator|.
name|getClusterSettings
argument_list|()
argument_list|,
name|settings
operator|.
name|getSettingsFilter
argument_list|()
argument_list|,
literal|null
argument_list|,
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|actionModule
operator|.
name|initRestHandlers
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// At this point the easiest way to confirm that a handler is loaded is to try to register another one on top of it and to fail
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|actionModule
operator|.
name|getRestController
argument_list|()
operator|.
name|registerHandler
argument_list|(
name|Method
operator|.
name|GET
argument_list|,
literal|"/"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"Path [/] already has a value ["
operator|+
name|RestMainAction
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPluginCantOverwriteBuiltinRestHandler
specifier|public
name|void
name|testPluginCantOverwriteBuiltinRestHandler
parameter_list|()
throws|throws
name|IOException
block|{
name|ActionPlugin
name|dupsMainAction
init|=
operator|new
name|ActionPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RestHandler
argument_list|>
name|getRestHandlers
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|RestController
name|restController
parameter_list|,
name|ClusterSettings
name|clusterSettings
parameter_list|,
name|IndexScopedSettings
name|indexScopedSettings
parameter_list|,
name|SettingsFilter
name|settingsFilter
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|Supplier
argument_list|<
name|DiscoveryNodes
argument_list|>
name|nodesInCluster
parameter_list|)
block|{
return|return
name|singletonList
argument_list|(
operator|new
name|RestMainAction
argument_list|(
name|settings
argument_list|,
name|restController
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|SettingsModule
name|settings
init|=
operator|new
name|SettingsModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|ThreadPool
name|threadPool
init|=
operator|new
name|TestThreadPool
argument_list|(
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ActionModule
name|actionModule
init|=
operator|new
name|ActionModule
argument_list|(
literal|false
argument_list|,
name|settings
operator|.
name|getSettings
argument_list|()
argument_list|,
operator|new
name|IndexNameExpressionResolver
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|settings
operator|.
name|getIndexScopedSettings
argument_list|()
argument_list|,
name|settings
operator|.
name|getClusterSettings
argument_list|()
argument_list|,
name|settings
operator|.
name|getSettingsFilter
argument_list|()
argument_list|,
name|threadPool
argument_list|,
name|singletonList
argument_list|(
name|dupsMainAction
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|actionModule
operator|.
name|initRestHandlers
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"Path [/] already has a value ["
operator|+
name|RestMainAction
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testPluginCanRegisterRestHandler
specifier|public
name|void
name|testPluginCanRegisterRestHandler
parameter_list|()
block|{
class|class
name|FakeHandler
implements|implements
name|RestHandler
block|{
specifier|public
name|FakeHandler
parameter_list|(
name|RestController
name|restController
parameter_list|)
block|{
name|restController
operator|.
name|registerHandler
argument_list|(
name|Method
operator|.
name|GET
argument_list|,
literal|"/_dummy"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleRequest
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|,
name|NodeClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{             }
block|}
name|ActionPlugin
name|registersFakeHandler
init|=
operator|new
name|ActionPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RestHandler
argument_list|>
name|getRestHandlers
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|RestController
name|restController
parameter_list|,
name|ClusterSettings
name|clusterSettings
parameter_list|,
name|IndexScopedSettings
name|indexScopedSettings
parameter_list|,
name|SettingsFilter
name|settingsFilter
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|Supplier
argument_list|<
name|DiscoveryNodes
argument_list|>
name|nodesInCluster
parameter_list|)
block|{
return|return
name|singletonList
argument_list|(
operator|new
name|FakeHandler
argument_list|(
name|restController
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|SettingsModule
name|settings
init|=
operator|new
name|SettingsModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|ThreadPool
name|threadPool
init|=
operator|new
name|TestThreadPool
argument_list|(
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ActionModule
name|actionModule
init|=
operator|new
name|ActionModule
argument_list|(
literal|false
argument_list|,
name|settings
operator|.
name|getSettings
argument_list|()
argument_list|,
operator|new
name|IndexNameExpressionResolver
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|settings
operator|.
name|getIndexScopedSettings
argument_list|()
argument_list|,
name|settings
operator|.
name|getClusterSettings
argument_list|()
argument_list|,
name|settings
operator|.
name|getSettingsFilter
argument_list|()
argument_list|,
name|threadPool
argument_list|,
name|singletonList
argument_list|(
name|registersFakeHandler
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|actionModule
operator|.
name|initRestHandlers
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// At this point the easiest way to confirm that a handler is loaded is to try to register another one on top of it and to fail
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|actionModule
operator|.
name|getRestController
argument_list|()
operator|.
name|registerHandler
argument_list|(
name|Method
operator|.
name|GET
argument_list|,
literal|"/_dummy"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"Path [/_dummy] already has a value ["
operator|+
name|FakeHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

