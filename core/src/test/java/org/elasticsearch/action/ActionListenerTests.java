begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|CheckedConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_class
DECL|class|ActionListenerTests
specifier|public
class|class
name|ActionListenerTests
extends|extends
name|ESTestCase
block|{
DECL|method|testWrap
specifier|public
name|void
name|testWrap
parameter_list|()
block|{
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
name|reference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|exReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|CheckedConsumer
argument_list|<
name|Boolean
argument_list|,
name|?
extends|extends
name|Exception
argument_list|>
name|handler
init|=
parameter_list|(
name|o
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"must not be false"
argument_list|)
throw|;
block|}
name|reference
operator|.
name|set
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|ActionListener
argument_list|<
name|Boolean
argument_list|>
name|wrap
init|=
name|ActionListener
operator|.
name|wrap
argument_list|(
name|handler
argument_list|,
name|exReference
operator|::
name|set
argument_list|)
decl_stmt|;
name|wrap
operator|.
name|onResponse
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|reference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|exReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"must not be false"
argument_list|,
name|exReference
operator|.
name|get
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|exReference
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|wrap
operator|.
name|onResponse
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|exReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testOnResponse
specifier|public
name|void
name|testOnResponse
parameter_list|()
block|{
specifier|final
name|int
name|numListeners
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|refList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
argument_list|>
name|excList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ActionListener
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|failOnTrue
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicInteger
name|exceptionCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numListeners
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|doFailOnTrue
init|=
name|rarely
argument_list|()
decl_stmt|;
name|failOnTrue
operator|.
name|add
argument_list|(
name|doFailOnTrue
argument_list|)
expr_stmt|;
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
name|reference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|exReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|refList
operator|.
name|add
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|excList
operator|.
name|add
argument_list|(
name|exReference
argument_list|)
expr_stmt|;
name|CheckedConsumer
argument_list|<
name|Boolean
argument_list|,
name|?
extends|extends
name|Exception
argument_list|>
name|handler
init|=
parameter_list|(
name|o
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"must not be false "
operator|+
name|exceptionCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|doFailOnTrue
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"must not be true"
argument_list|)
throw|;
block|}
name|reference
operator|.
name|set
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|listeners
operator|.
name|add
argument_list|(
name|ActionListener
operator|.
name|wrap
argument_list|(
name|handler
argument_list|,
name|exReference
operator|::
name|set
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ActionListener
operator|.
name|onResponse
argument_list|(
name|listeners
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numListeners
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|failOnTrue
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
literal|false
condition|)
block|{
name|assertTrue
argument_list|(
literal|"listener index "
operator|+
name|i
argument_list|,
name|refList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|refList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
literal|"listener index "
operator|+
name|i
argument_list|,
name|refList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numListeners
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|failOnTrue
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
literal|false
condition|)
block|{
name|assertNull
argument_list|(
literal|"listener index "
operator|+
name|i
argument_list|,
name|excList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"listener index "
operator|+
name|i
argument_list|,
literal|"must not be true"
argument_list|,
name|excList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ActionListener
operator|.
name|onResponse
argument_list|(
name|listeners
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numListeners
condition|;
name|i
operator|++
control|)
block|{
name|assertNull
argument_list|(
literal|"listener index "
operator|+
name|i
argument_list|,
name|refList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|numListeners
argument_list|,
name|exceptionCounter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numListeners
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
name|excList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"listener index "
operator|+
name|i
argument_list|,
literal|"must not be false "
operator|+
name|i
argument_list|,
name|excList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOnFailure
specifier|public
name|void
name|testOnFailure
parameter_list|()
block|{
specifier|final
name|int
name|numListeners
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|refList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
argument_list|>
name|excList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ActionListener
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|listenerToFail
init|=
name|randomBoolean
argument_list|()
condition|?
operator|-
literal|1
else|:
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|numListeners
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numListeners
condition|;
name|i
operator|++
control|)
block|{
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
name|reference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|exReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|refList
operator|.
name|add
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|excList
operator|.
name|add
argument_list|(
name|exReference
argument_list|)
expr_stmt|;
name|boolean
name|fail
init|=
name|i
operator|==
name|listenerToFail
decl_stmt|;
name|CheckedConsumer
argument_list|<
name|Boolean
argument_list|,
name|?
extends|extends
name|Exception
argument_list|>
name|handler
init|=
parameter_list|(
name|o
parameter_list|)
lambda|->
block|{
name|reference
operator|.
name|set
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|listeners
operator|.
name|add
argument_list|(
name|ActionListener
operator|.
name|wrap
argument_list|(
name|handler
argument_list|,
parameter_list|(
name|e
parameter_list|)
lambda|->
block|{
name|exReference
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|fail
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"double boom"
argument_list|)
throw|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ActionListener
operator|.
name|onFailure
argument_list|(
name|listeners
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"booom"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"unexpected succces listener to fail: "
operator|+
name|listenerToFail
argument_list|,
name|listenerToFail
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"listener to fail: "
operator|+
name|listenerToFail
argument_list|,
name|listenerToFail
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"double boom"
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numListeners
condition|;
name|i
operator|++
control|)
block|{
name|assertNull
argument_list|(
literal|"listener index "
operator|+
name|i
argument_list|,
name|refList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numListeners
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"listener index "
operator|+
name|i
argument_list|,
literal|"booom"
argument_list|,
name|excList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

