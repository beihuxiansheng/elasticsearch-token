begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.termvectors
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|LowerCaseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|PerFieldAnalyzerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|payloads
operator|.
name|TypeAsPayloadTokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|CharArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|alias
operator|.
name|Alias
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|AbstractTermVectorsTestCase
specifier|public
specifier|abstract
class|class
name|AbstractTermVectorsTestCase
extends|extends
name|ESIntegTestCase
block|{
DECL|class|TestFieldSetting
specifier|protected
specifier|static
class|class
name|TestFieldSetting
block|{
DECL|field|name
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|storedOffset
specifier|public
specifier|final
name|boolean
name|storedOffset
decl_stmt|;
DECL|field|storedPayloads
specifier|public
specifier|final
name|boolean
name|storedPayloads
decl_stmt|;
DECL|field|storedPositions
specifier|public
specifier|final
name|boolean
name|storedPositions
decl_stmt|;
DECL|method|TestFieldSetting
specifier|public
name|TestFieldSetting
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|storedOffset
parameter_list|,
name|boolean
name|storedPayloads
parameter_list|,
name|boolean
name|storedPositions
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|storedOffset
operator|=
name|storedOffset
expr_stmt|;
name|this
operator|.
name|storedPayloads
operator|=
name|storedPayloads
expr_stmt|;
name|this
operator|.
name|storedPositions
operator|=
name|storedPositions
expr_stmt|;
block|}
DECL|method|addToMappings
specifier|public
name|void
name|addToMappings
parameter_list|(
name|XContentBuilder
name|mappingsBuilder
parameter_list|)
throws|throws
name|IOException
block|{
name|mappingsBuilder
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|mappingsBuilder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|String
name|tv_settings
decl_stmt|;
if|if
condition|(
name|storedPositions
operator|&&
name|storedOffset
operator|&&
name|storedPayloads
condition|)
block|{
name|tv_settings
operator|=
literal|"with_positions_offsets_payloads"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|storedPositions
operator|&&
name|storedOffset
condition|)
block|{
name|tv_settings
operator|=
literal|"with_positions_offsets"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|storedPayloads
condition|)
block|{
name|tv_settings
operator|=
literal|"with_positions_payloads"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|storedPositions
condition|)
block|{
name|tv_settings
operator|=
literal|"with_positions"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|storedOffset
condition|)
block|{
name|tv_settings
operator|=
literal|"with_offsets"
expr_stmt|;
block|}
else|else
block|{
name|tv_settings
operator|=
literal|"yes"
expr_stmt|;
block|}
name|mappingsBuilder
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
name|tv_settings
argument_list|)
expr_stmt|;
if|if
condition|(
name|storedPayloads
condition|)
block|{
name|mappingsBuilder
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"tv_test"
argument_list|)
expr_stmt|;
block|}
name|mappingsBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"name: "
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|" tv_with:"
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedPayloads
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"payloads,"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|storedOffset
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"offsets,"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|storedPositions
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"positions,"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|TestDoc
specifier|protected
specifier|static
class|class
name|TestDoc
block|{
DECL|field|id
specifier|public
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|fieldSettings
specifier|public
specifier|final
name|TestFieldSetting
index|[]
name|fieldSettings
decl_stmt|;
DECL|field|fieldContent
specifier|public
specifier|final
name|String
index|[]
name|fieldContent
decl_stmt|;
DECL|field|index
specifier|public
name|String
name|index
init|=
literal|"test"
decl_stmt|;
DECL|field|alias
specifier|public
name|String
name|alias
init|=
literal|"alias"
decl_stmt|;
DECL|field|type
specifier|public
name|String
name|type
init|=
literal|"type1"
decl_stmt|;
DECL|method|TestDoc
specifier|public
name|TestDoc
parameter_list|(
name|String
name|id
parameter_list|,
name|TestFieldSetting
index|[]
name|fieldSettings
parameter_list|,
name|String
index|[]
name|fieldContent
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldSettings
operator|.
name|length
argument_list|,
name|fieldContent
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldSettings
operator|=
name|fieldSettings
expr_stmt|;
name|this
operator|.
name|fieldContent
operator|=
name|fieldContent
expr_stmt|;
block|}
DECL|method|index
specifier|public
name|TestDoc
name|index
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|alias
specifier|public
name|TestDoc
name|alias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"index:"
argument_list|)
operator|.
name|append
argument_list|(
name|index
argument_list|)
operator|.
name|append
argument_list|(
literal|" type:"
argument_list|)
operator|.
name|append
argument_list|(
name|type
argument_list|)
operator|.
name|append
argument_list|(
literal|" id:"
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldSettings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TestFieldSetting
name|f
init|=
name|fieldSettings
index|[
name|i
index|]
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"Field: "
argument_list|)
operator|.
name|append
argument_list|(
name|f
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n  content:"
argument_list|)
operator|.
name|append
argument_list|(
name|fieldContent
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|TestConfig
specifier|protected
specifier|static
class|class
name|TestConfig
block|{
DECL|field|doc
specifier|public
specifier|final
name|TestDoc
name|doc
decl_stmt|;
DECL|field|selectedFields
specifier|public
specifier|final
name|String
index|[]
name|selectedFields
decl_stmt|;
DECL|field|requestPositions
specifier|public
specifier|final
name|boolean
name|requestPositions
decl_stmt|;
DECL|field|requestOffsets
specifier|public
specifier|final
name|boolean
name|requestOffsets
decl_stmt|;
DECL|field|requestPayloads
specifier|public
specifier|final
name|boolean
name|requestPayloads
decl_stmt|;
DECL|field|expectedException
specifier|public
name|Class
name|expectedException
init|=
literal|null
decl_stmt|;
DECL|method|TestConfig
specifier|public
name|TestConfig
parameter_list|(
name|TestDoc
name|doc
parameter_list|,
name|String
index|[]
name|selectedFields
parameter_list|,
name|boolean
name|requestPositions
parameter_list|,
name|boolean
name|requestOffsets
parameter_list|,
name|boolean
name|requestPayloads
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
name|this
operator|.
name|selectedFields
operator|=
name|selectedFields
expr_stmt|;
name|this
operator|.
name|requestPositions
operator|=
name|requestPositions
expr_stmt|;
name|this
operator|.
name|requestOffsets
operator|=
name|requestOffsets
expr_stmt|;
name|this
operator|.
name|requestPayloads
operator|=
name|requestPayloads
expr_stmt|;
block|}
DECL|method|expectedException
specifier|public
name|TestConfig
name|expectedException
parameter_list|(
name|Class
name|exceptionClass
parameter_list|)
block|{
name|this
operator|.
name|expectedException
operator|=
name|exceptionClass
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|requested
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|requestOffsets
condition|)
block|{
name|requested
operator|+=
literal|"offsets,"
expr_stmt|;
block|}
if|if
condition|(
name|requestPositions
condition|)
block|{
name|requested
operator|+=
literal|"position,"
expr_stmt|;
block|}
if|if
condition|(
name|requestPayloads
condition|)
block|{
name|requested
operator|+=
literal|"payload,"
expr_stmt|;
block|}
name|Locale
name|aLocale
init|=
operator|new
name|Locale
argument_list|(
literal|"en"
argument_list|,
literal|"US"
argument_list|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|aLocale
argument_list|,
literal|"(doc: %s\n requested: %s, fields: %s)"
argument_list|,
name|doc
argument_list|,
name|requested
argument_list|,
name|selectedFields
operator|==
literal|null
condition|?
literal|"NULL"
else|:
name|Join
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|selectedFields
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|createIndexBasedOnFieldSettings
specifier|protected
name|void
name|createIndexBasedOnFieldSettings
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|alias
parameter_list|,
name|TestFieldSetting
index|[]
name|fieldSettings
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|mappingBuilder
init|=
name|jsonBuilder
argument_list|()
decl_stmt|;
name|mappingBuilder
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
expr_stmt|;
for|for
control|(
name|TestFieldSetting
name|field
range|:
name|fieldSettings
control|)
block|{
name|field
operator|.
name|addToMappings
argument_list|(
name|mappingBuilder
argument_list|)
expr_stmt|;
block|}
name|mappingBuilder
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|Settings
operator|.
name|Builder
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.tv_test.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.tv_test.filter"
argument_list|,
literal|"type_as_payload"
argument_list|,
literal|"lowercase"
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mappingBuilder
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|addAlias
argument_list|(
operator|new
name|Alias
argument_list|(
name|alias
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Generate test documentsThe returned documents are already indexed.      */
DECL|method|generateTestDocs
specifier|protected
name|TestDoc
index|[]
name|generateTestDocs
parameter_list|(
name|String
name|index
parameter_list|,
name|TestFieldSetting
index|[]
name|fieldSettings
parameter_list|)
block|{
name|String
index|[]
name|fieldContentOptions
init|=
operator|new
name|String
index|[]
block|{
literal|"Generating a random permutation of a sequence (such as when shuffling cards)."
block|,
literal|"Selecting a random sample of a population (important in statistical sampling)."
block|,
literal|"Allocating experimental units via random assignment to a treatment or control condition."
block|,
literal|"Generating random numbers: see Random number generation."
block|,
literal|"Transforming a data stream (such as when using a scrambler in telecommunications)."
block|}
decl_stmt|;
name|String
index|[]
name|contentArray
init|=
operator|new
name|String
index|[
name|fieldSettings
operator|.
name|length
index|]
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|docSource
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|totalShards
init|=
name|getNumShards
argument_list|(
name|index
argument_list|)
operator|.
name|numPrimaries
decl_stmt|;
name|TestDoc
index|[]
name|testDocs
init|=
operator|new
name|TestDoc
index|[
name|totalShards
index|]
decl_stmt|;
comment|// this methods wants to send one doc to each shard
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalShards
condition|;
name|i
operator|++
control|)
block|{
name|docSource
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|contentArray
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|contentArray
index|[
name|j
index|]
operator|=
name|fieldContentOptions
index|[
name|randomInt
argument_list|(
name|fieldContentOptions
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
expr_stmt|;
name|docSource
operator|.
name|put
argument_list|(
name|fieldSettings
index|[
name|j
index|]
operator|.
name|name
argument_list|,
name|contentArray
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|id
init|=
name|routingKeyForShard
argument_list|(
name|index
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|TestDoc
name|doc
init|=
operator|new
name|TestDoc
argument_list|(
name|id
argument_list|,
name|fieldSettings
argument_list|,
name|contentArray
operator|.
name|clone
argument_list|()
argument_list|)
decl_stmt|;
name|index
argument_list|(
name|doc
operator|.
name|index
argument_list|,
name|doc
operator|.
name|type
argument_list|,
name|doc
operator|.
name|id
argument_list|,
name|docSource
argument_list|)
expr_stmt|;
name|testDocs
index|[
name|i
index|]
operator|=
name|doc
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
return|return
name|testDocs
return|;
block|}
DECL|method|generateTestConfigs
specifier|protected
name|TestConfig
index|[]
name|generateTestConfigs
parameter_list|(
name|int
name|numberOfTests
parameter_list|,
name|TestDoc
index|[]
name|testDocs
parameter_list|,
name|TestFieldSetting
index|[]
name|fieldSettings
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|TestConfig
argument_list|>
name|configs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfTests
condition|;
name|i
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|selectedFields
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// used field selection
name|selectedFields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|selectedFields
operator|.
name|add
argument_list|(
literal|"Doesnt_exist"
argument_list|)
expr_stmt|;
comment|// this will be ignored.
block|}
for|for
control|(
name|TestFieldSetting
name|field
range|:
name|fieldSettings
control|)
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|selectedFields
operator|.
name|add
argument_list|(
name|field
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|selectedFields
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|selectedFields
operator|=
literal|null
expr_stmt|;
comment|// 0 length set is not supported.
block|}
block|}
name|TestConfig
name|config
init|=
operator|new
name|TestConfig
argument_list|(
name|testDocs
index|[
name|randomInt
argument_list|(
name|testDocs
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
argument_list|,
name|selectedFields
operator|==
literal|null
condition|?
literal|null
else|:
name|selectedFields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|configs
operator|.
name|add
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
comment|// always adds a test that fails
name|configs
operator|.
name|add
argument_list|(
operator|new
name|TestConfig
argument_list|(
operator|new
name|TestDoc
argument_list|(
literal|"doesnt_exist"
argument_list|,
operator|new
name|TestFieldSetting
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
operator|.
name|index
argument_list|(
literal|"doesn't_exist"
argument_list|)
operator|.
name|alias
argument_list|(
literal|"doesn't_exist"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"doesnt_exist"
block|}
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|.
name|expectedException
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
return|return
name|configs
operator|.
name|toArray
argument_list|(
operator|new
name|TestConfig
index|[
name|configs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|getFieldSettings
specifier|protected
name|TestFieldSetting
index|[]
name|getFieldSettings
parameter_list|()
block|{
return|return
operator|new
name|TestFieldSetting
index|[]
block|{
operator|new
name|TestFieldSetting
argument_list|(
literal|"field_with_positions"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|TestFieldSetting
argument_list|(
literal|"field_with_offsets"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|TestFieldSetting
argument_list|(
literal|"field_with_only_tv"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|TestFieldSetting
argument_list|(
literal|"field_with_positions_offsets"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|TestFieldSetting
argument_list|(
literal|"field_with_positions_payloads"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|}
return|;
block|}
DECL|method|indexDocsWithLucene
specifier|protected
name|DirectoryReader
name|indexDocsWithLucene
parameter_list|(
name|TestDoc
index|[]
name|testDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TestFieldSetting
name|field
range|:
name|testDocs
index|[
literal|0
index|]
operator|.
name|fieldSettings
control|)
block|{
if|if
condition|(
name|field
operator|.
name|storedPayloads
condition|)
block|{
name|mapping
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|StandardTokenizer
argument_list|()
decl_stmt|;
name|TokenFilter
name|filter
init|=
operator|new
name|LowerCaseFilter
argument_list|(
name|tokenizer
argument_list|)
decl_stmt|;
name|filter
operator|=
operator|new
name|TypeAsPayloadTokenFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
name|filter
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|PerFieldAnalyzerWrapper
name|wrapper
init|=
operator|new
name|PerFieldAnalyzerWrapper
argument_list|(
operator|new
name|StandardAnalyzer
argument_list|(
name|CharArraySet
operator|.
name|EMPTY_SET
argument_list|)
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setOpenMode
argument_list|(
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|TestDoc
name|doc
range|:
name|testDocs
control|)
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
name|doc
operator|.
name|id
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doc
operator|.
name|fieldContent
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FieldType
name|type
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|TestFieldSetting
name|fieldSetting
init|=
name|doc
operator|.
name|fieldSettings
index|[
name|i
index|]
decl_stmt|;
name|type
operator|.
name|setStoreTermVectorOffsets
argument_list|(
name|fieldSetting
operator|.
name|storedOffset
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectorPayloads
argument_list|(
name|fieldSetting
operator|.
name|storedPayloads
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectorPositions
argument_list|(
name|fieldSetting
operator|.
name|storedPositions
operator|||
name|fieldSetting
operator|.
name|storedPayloads
operator|||
name|fieldSetting
operator|.
name|storedOffset
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|fieldSetting
operator|.
name|name
argument_list|,
name|doc
operator|.
name|fieldContent
index|[
name|i
index|]
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|doc
operator|.
name|id
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
return|;
block|}
DECL|method|validateResponse
specifier|protected
name|void
name|validateResponse
parameter_list|(
name|TermVectorsResponse
name|esResponse
parameter_list|,
name|Fields
name|luceneFields
parameter_list|,
name|TestConfig
name|testConfig
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThat
argument_list|(
name|esResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|testConfig
operator|.
name|doc
operator|.
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|TestDoc
name|testDoc
init|=
name|testConfig
operator|.
name|doc
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|selectedFields
init|=
name|testConfig
operator|.
name|selectedFields
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|testConfig
operator|.
name|selectedFields
argument_list|)
argument_list|)
decl_stmt|;
name|Fields
name|esTermVectorFields
init|=
name|esResponse
operator|.
name|getFields
argument_list|()
decl_stmt|;
for|for
control|(
name|TestFieldSetting
name|field
range|:
name|testDoc
operator|.
name|fieldSettings
control|)
block|{
name|Terms
name|esTerms
init|=
name|esTermVectorFields
operator|.
name|terms
argument_list|(
name|field
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectedFields
operator|!=
literal|null
operator|&&
operator|!
name|selectedFields
operator|.
name|contains
argument_list|(
name|field
operator|.
name|name
argument_list|)
condition|)
block|{
name|assertNull
argument_list|(
name|esTerms
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|assertNotNull
argument_list|(
name|esTerms
argument_list|)
expr_stmt|;
name|Terms
name|luceneTerms
init|=
name|luceneFields
operator|.
name|terms
argument_list|(
name|field
operator|.
name|name
argument_list|)
decl_stmt|;
name|TermsEnum
name|esTermEnum
init|=
name|esTerms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|TermsEnum
name|luceneTermEnum
init|=
name|luceneTerms
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|esTermEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertNotNull
argument_list|(
name|luceneTermEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|esTermEnum
operator|.
name|totalTermFreq
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|luceneTermEnum
operator|.
name|totalTermFreq
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PostingsEnum
name|esDocsPosEnum
init|=
name|esTermEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|POSITIONS
argument_list|)
decl_stmt|;
name|PostingsEnum
name|luceneDocsPosEnum
init|=
name|luceneTermEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|POSITIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|luceneDocsPosEnum
operator|==
literal|null
condition|)
block|{
comment|// test we expect that...
name|assertFalse
argument_list|(
name|field
operator|.
name|storedOffset
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|field
operator|.
name|storedPayloads
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|field
operator|.
name|storedPositions
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|currentTerm
init|=
name|esTermEnum
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Token mismatch for field: "
operator|+
name|field
operator|.
name|name
argument_list|,
name|currentTerm
argument_list|,
name|equalTo
argument_list|(
name|luceneTermEnum
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|esDocsPosEnum
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
name|luceneDocsPosEnum
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
name|int
name|freq
init|=
name|esDocsPosEnum
operator|.
name|freq
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|freq
argument_list|,
name|equalTo
argument_list|(
name|luceneDocsPosEnum
operator|.
name|freq
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freq
condition|;
name|i
operator|++
control|)
block|{
name|String
name|failDesc
init|=
literal|" (field:"
operator|+
name|field
operator|.
name|name
operator|+
literal|" term:"
operator|+
name|currentTerm
operator|+
literal|")"
decl_stmt|;
name|int
name|lucenePos
init|=
name|luceneDocsPosEnum
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
name|int
name|esPos
init|=
name|esDocsPosEnum
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|storedPositions
operator|&&
name|testConfig
operator|.
name|requestPositions
condition|)
block|{
name|assertThat
argument_list|(
literal|"Position test failed"
operator|+
name|failDesc
argument_list|,
name|lucenePos
argument_list|,
name|equalTo
argument_list|(
name|esPos
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
literal|"Missing position test failed"
operator|+
name|failDesc
argument_list|,
name|esPos
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|storedOffset
operator|&&
name|testConfig
operator|.
name|requestOffsets
condition|)
block|{
name|assertThat
argument_list|(
literal|"Offset test failed"
operator|+
name|failDesc
argument_list|,
name|luceneDocsPosEnum
operator|.
name|startOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|esDocsPosEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Offset test failed"
operator|+
name|failDesc
argument_list|,
name|luceneDocsPosEnum
operator|.
name|endOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|esDocsPosEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
literal|"Missing offset test failed"
operator|+
name|failDesc
argument_list|,
name|esDocsPosEnum
operator|.
name|startOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Missing offset test failed"
operator|+
name|failDesc
argument_list|,
name|esDocsPosEnum
operator|.
name|endOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|storedPayloads
operator|&&
name|testConfig
operator|.
name|requestPayloads
condition|)
block|{
name|assertThat
argument_list|(
literal|"Payload test failed"
operator|+
name|failDesc
argument_list|,
name|luceneDocsPosEnum
operator|.
name|getPayload
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|esDocsPosEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
literal|"Missing payload test failed"
operator|+
name|failDesc
argument_list|,
name|esDocsPosEnum
operator|.
name|getPayload
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertNull
argument_list|(
literal|"Es returned terms are done but lucene isn't"
argument_list|,
name|luceneTermEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRequestForConfig
specifier|protected
name|TermVectorsRequestBuilder
name|getRequestForConfig
parameter_list|(
name|TestConfig
name|config
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareTermVectors
argument_list|(
name|randomBoolean
argument_list|()
condition|?
name|config
operator|.
name|doc
operator|.
name|index
else|:
name|config
operator|.
name|doc
operator|.
name|alias
argument_list|,
name|config
operator|.
name|doc
operator|.
name|type
argument_list|,
name|config
operator|.
name|doc
operator|.
name|id
argument_list|)
operator|.
name|setPayloads
argument_list|(
name|config
operator|.
name|requestPayloads
argument_list|)
operator|.
name|setOffsets
argument_list|(
name|config
operator|.
name|requestOffsets
argument_list|)
operator|.
name|setPositions
argument_list|(
name|config
operator|.
name|requestPositions
argument_list|)
operator|.
name|setFieldStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|setTermStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|setSelectedFields
argument_list|(
name|config
operator|.
name|selectedFields
argument_list|)
operator|.
name|setRealtime
argument_list|(
literal|false
argument_list|)
return|;
block|}
DECL|method|getTermVectorsFromLucene
specifier|protected
name|Fields
name|getTermVectorsFromLucene
parameter_list|(
name|DirectoryReader
name|directoryReader
parameter_list|,
name|TestDoc
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|directoryReader
argument_list|)
decl_stmt|;
name|TopDocs
name|search
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|doc
operator|.
name|id
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
name|search
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|directoryReader
operator|.
name|getTermVectors
argument_list|(
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
return|;
block|}
block|}
end_class

end_unit

