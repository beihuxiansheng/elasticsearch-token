begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.index
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocumentRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActiveShardCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|empty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|IndexRequestTests
specifier|public
class|class
name|IndexRequestTests
extends|extends
name|ESTestCase
block|{
DECL|method|testIndexRequestOpTypeFromString
specifier|public
name|void
name|testIndexRequestOpTypeFromString
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|create
init|=
literal|"create"
decl_stmt|;
name|String
name|index
init|=
literal|"index"
decl_stmt|;
name|String
name|createUpper
init|=
literal|"CREATE"
decl_stmt|;
name|String
name|indexUpper
init|=
literal|"INDEX"
decl_stmt|;
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|indexRequest
operator|.
name|opType
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexRequest
operator|.
name|opType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|DocumentRequest
operator|.
name|OpType
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequest
operator|.
name|opType
argument_list|(
name|createUpper
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexRequest
operator|.
name|opType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|DocumentRequest
operator|.
name|OpType
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequest
operator|.
name|opType
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexRequest
operator|.
name|opType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|DocumentRequest
operator|.
name|OpType
operator|.
name|INDEX
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequest
operator|.
name|opType
argument_list|(
name|indexUpper
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexRequest
operator|.
name|opType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|DocumentRequest
operator|.
name|OpType
operator|.
name|INDEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadBogusString
specifier|public
name|void
name|testReadBogusString
parameter_list|()
block|{
try|try
block|{
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|indexRequest
operator|.
name|opType
argument_list|(
literal|"foobar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"opType must be 'create' or 'index', found: [foobar]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCreateOperationRejectsVersions
specifier|public
name|void
name|testCreateOperationRejectsVersions
parameter_list|()
block|{
name|Set
argument_list|<
name|VersionType
argument_list|>
name|allButInternalSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|VersionType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|allButInternalSet
operator|.
name|remove
argument_list|(
name|VersionType
operator|.
name|INTERNAL
argument_list|)
expr_stmt|;
name|VersionType
index|[]
name|allButInternal
init|=
name|allButInternalSet
operator|.
name|toArray
argument_list|(
operator|new
name|VersionType
index|[]
block|{}
argument_list|)
decl_stmt|;
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
name|request
operator|.
name|opType
argument_list|(
name|IndexRequest
operator|.
name|OpType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|request
operator|.
name|versionType
argument_list|(
name|randomFrom
argument_list|(
name|allButInternal
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|validate
argument_list|()
operator|.
name|validationErrors
argument_list|()
argument_list|,
name|not
argument_list|(
name|empty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|versionType
argument_list|(
name|VersionType
operator|.
name|INTERNAL
argument_list|)
expr_stmt|;
name|request
operator|.
name|version
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|validate
argument_list|()
operator|.
name|validationErrors
argument_list|()
argument_list|,
name|not
argument_list|(
name|empty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexingRejectsLongIds
specifier|public
name|void
name|testIndexingRejectsLongIds
parameter_list|()
block|{
name|String
name|id
init|=
name|randomAsciiOfLength
argument_list|(
literal|511
argument_list|)
decl_stmt|;
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|request
operator|.
name|source
argument_list|(
literal|"{}"
argument_list|)
expr_stmt|;
name|ActionRequestValidationException
name|validate
init|=
name|request
operator|.
name|validate
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|validate
argument_list|)
expr_stmt|;
name|id
operator|=
name|randomAsciiOfLength
argument_list|(
literal|512
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|request
operator|.
name|source
argument_list|(
literal|"{}"
argument_list|)
expr_stmt|;
name|validate
operator|=
name|request
operator|.
name|validate
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|validate
argument_list|)
expr_stmt|;
name|id
operator|=
name|randomAsciiOfLength
argument_list|(
literal|513
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|request
operator|.
name|source
argument_list|(
literal|"{}"
argument_list|)
expr_stmt|;
name|validate
operator|=
name|request
operator|.
name|validate
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|validate
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|validate
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"id is too long, must be no longer than 512 bytes but was: 513"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetTTLAsTimeValue
specifier|public
name|void
name|testSetTTLAsTimeValue
parameter_list|()
block|{
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|()
decl_stmt|;
name|TimeValue
name|ttl
init|=
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|randomTimeValue
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|"ttl"
argument_list|)
decl_stmt|;
name|indexRequest
operator|.
name|ttl
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexRequest
operator|.
name|ttl
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ttl
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetTTLAsString
specifier|public
name|void
name|testSetTTLAsString
parameter_list|()
block|{
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|()
decl_stmt|;
name|String
name|ttlAsString
init|=
name|randomTimeValue
argument_list|()
decl_stmt|;
name|TimeValue
name|ttl
init|=
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|ttlAsString
argument_list|,
literal|null
argument_list|,
literal|"ttl"
argument_list|)
decl_stmt|;
name|indexRequest
operator|.
name|ttl
argument_list|(
name|ttlAsString
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexRequest
operator|.
name|ttl
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ttl
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetTTLAsLong
specifier|public
name|void
name|testSetTTLAsLong
parameter_list|()
block|{
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|()
decl_stmt|;
name|String
name|ttlAsString
init|=
name|randomTimeValue
argument_list|()
decl_stmt|;
name|TimeValue
name|ttl
init|=
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|ttlAsString
argument_list|,
literal|null
argument_list|,
literal|"ttl"
argument_list|)
decl_stmt|;
name|indexRequest
operator|.
name|ttl
argument_list|(
name|ttl
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexRequest
operator|.
name|ttl
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ttl
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testValidateTTL
specifier|public
name|void
name|testValidateTTL
parameter_list|()
block|{
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|indexRequest
operator|.
name|ttl
argument_list|(
name|randomIntBetween
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|indexRequest
operator|.
name|ttl
argument_list|(
operator|new
name|TimeValue
argument_list|(
name|randomIntBetween
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexRequest
operator|.
name|ttl
argument_list|(
name|randomIntBetween
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
operator|-
literal|1
argument_list|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
block|}
name|ActionRequestValidationException
name|validate
init|=
name|indexRequest
operator|.
name|validate
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|validate
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|validate
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"ttl must not be negative"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWaitForActiveShards
specifier|public
name|void
name|testWaitForActiveShards
parameter_list|()
block|{
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|request
operator|.
name|waitForActiveShards
argument_list|(
name|ActiveShardCount
operator|.
name|from
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|request
operator|.
name|waitForActiveShards
argument_list|()
argument_list|,
name|ActiveShardCount
operator|.
name|from
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
comment|// test negative shard count value not allowed
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|request
operator|.
name|waitForActiveShards
argument_list|(
name|ActiveShardCount
operator|.
name|from
argument_list|(
name|randomIntBetween
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

