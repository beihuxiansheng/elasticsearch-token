begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchHits
import|;
end_import

begin_class
DECL|class|MatchQueryIT
specifier|public
class|class
name|MatchQueryIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|INDEX
specifier|private
specifier|static
specifier|final
name|String
name|INDEX
init|=
literal|"test"
decl_stmt|;
comment|/**      * Test setup.      */
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.syns.type"
argument_list|,
literal|"synonym"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.filter.syns.synonyms"
argument_list|,
literal|"wtf, what the fudge"
argument_list|,
literal|"foo, bar baz"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.lower_syns.type"
argument_list|,
literal|"custom"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.lower_syns.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.lower_syns.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"syns"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.graphsyns.type"
argument_list|,
literal|"synonym_graph"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.filter.graphsyns.synonyms"
argument_list|,
literal|"wtf, what the fudge"
argument_list|,
literal|"foo, bar baz"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.lower_graphsyns.type"
argument_list|,
literal|"custom"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.lower_graphsyns.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.lower_graphsyns.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"graphsyns"
argument_list|)
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
name|INDEX
argument_list|,
name|createMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
block|}
DECL|method|getDocs
specifier|private
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|getDocs
parameter_list|()
block|{
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"say wtf happened foo"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"bar baz what the fudge man"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"wtf"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"what is the name for fudge"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"bar two three"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"bar baz two three"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builders
return|;
block|}
comment|/**      * Setup the index mappings for the test index.      *      * @return the json builder with the index mappings      * @throws IOException on error creating mapping json      */
DECL|method|createMapping
specifier|private
name|XContentBuilder
name|createMapping
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|INDEX
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
return|;
block|}
DECL|method|testSimpleMultiTermPhrase
specifier|public
name|void
name|testSimpleMultiTermPhrase
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|getDocs
argument_list|()
argument_list|)
expr_stmt|;
comment|// first search using regular synonym field using phrase
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field"
argument_list|,
literal|"foo two three"
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"lower_syns"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// because foo -> "bar baz" where "foo" and "bar" at position 0, "baz" and "two" at position 1.
comment|// "bar two three", "bar baz three", "foo two three", "foo baz three"
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
comment|// we should not match this but we do
comment|// same query using graph should find correct result
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field"
argument_list|,
literal|"foo two three"
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"lower_graphsyns"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleMultiTermAnd
specifier|public
name|void
name|testSimpleMultiTermAnd
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|getDocs
argument_list|()
argument_list|)
expr_stmt|;
comment|// first search using regular synonym field using phrase
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"say what the fudge"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"lower_syns"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Old synonyms work fine in that case, but it is coincidental
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// same query using graph should find correct result
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"say what the fudge"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"lower_graphsyns"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinShouldMatch
specifier|public
name|void
name|testMinShouldMatch
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|getDocs
argument_list|()
argument_list|)
expr_stmt|;
comment|// no min should match
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"three what the fudge foo"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"lower_graphsyns"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|6L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
comment|// same query, with min_should_match of 2
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"three what the fudge foo"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"lower_graphsyns"
argument_list|)
operator|.
name|minimumShouldMatch
argument_list|(
literal|"80%"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// three wtf foo = 2 terms, match #1
comment|// three wtf bar baz = 3 terms, match #6
comment|// three what the fudge foo = 4 terms, no match
comment|// three what the fudge bar baz = 4 terms, match #2
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPhrasePrefix
specifier|public
name|void
name|testPhrasePrefix
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
name|getDocs
argument_list|()
decl_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"WTFD!"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"Weird Al's WHAT THE FUDGESICLE"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchPhrasePrefixQuery
argument_list|(
literal|"field"
argument_list|,
literal|"wtf"
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"lower_graphsyns"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"7"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCommonTerms
specifier|public
name|void
name|testCommonTerms
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|String
name|route
init|=
literal|"commonTermsTest"
decl_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
name|getDocs
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexRequestBuilder
name|indexRequet
range|:
name|builders
control|)
block|{
comment|// route all docs to same shard for this test
name|indexRequet
operator|.
name|setRouting
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|builders
argument_list|)
expr_stmt|;
comment|// do a search with no cutoff frequency to show which docs should match
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setRouting
argument_list|(
name|route
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"bar three happened"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"5"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
comment|// do same search with cutoff and see less documents match
comment|// in this case, essentially everything but "happened" gets excluded
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setRouting
argument_list|(
name|route
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"bar three happened"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|1f
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

