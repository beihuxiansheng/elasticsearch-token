begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|GeoHashUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|geo
operator|.
name|RandomGeoGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_class
DECL|class|GeoPointParsingTests
specifier|public
class|class
name|GeoPointParsingTests
extends|extends
name|ESTestCase
block|{
DECL|field|TOLERANCE
specifier|static
name|double
name|TOLERANCE
init|=
literal|1E
operator|-
literal|5
decl_stmt|;
DECL|method|testGeoPointReset
specifier|public
name|void
name|testGeoPointReset
parameter_list|()
throws|throws
name|IOException
block|{
name|double
name|lat
init|=
literal|1
operator|+
name|randomDouble
argument_list|()
operator|*
literal|89
decl_stmt|;
name|double
name|lon
init|=
literal|1
operator|+
name|randomDouble
argument_list|()
operator|*
literal|179
decl_stmt|;
name|GeoPoint
name|point
init|=
operator|new
name|GeoPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|GeoPoint
name|point2
init|=
operator|new
name|GeoPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertPointsEqual
argument_list|(
name|point
argument_list|,
name|point2
argument_list|)
expr_stmt|;
name|assertPointsEqual
argument_list|(
name|point
operator|.
name|reset
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
argument_list|,
name|point2
operator|.
name|reset
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
argument_list|)
expr_stmt|;
name|assertPointsEqual
argument_list|(
name|point
operator|.
name|reset
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|point2
operator|.
name|reset
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertPointsEqual
argument_list|(
name|point
operator|.
name|resetLat
argument_list|(
name|lat
argument_list|)
argument_list|,
name|point2
operator|.
name|reset
argument_list|(
name|lat
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertPointsEqual
argument_list|(
name|point
operator|.
name|resetLat
argument_list|(
literal|0
argument_list|)
argument_list|,
name|point2
operator|.
name|reset
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertPointsEqual
argument_list|(
name|point
operator|.
name|resetLon
argument_list|(
name|lon
argument_list|)
argument_list|,
name|point2
operator|.
name|reset
argument_list|(
literal|0
argument_list|,
name|lon
argument_list|)
argument_list|)
expr_stmt|;
name|assertPointsEqual
argument_list|(
name|point
operator|.
name|resetLon
argument_list|(
literal|0
argument_list|)
argument_list|,
name|point2
operator|.
name|reset
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertCloseTo
argument_list|(
name|point
operator|.
name|resetFromGeoHash
argument_list|(
name|GeoHashUtils
operator|.
name|stringEncode
argument_list|(
name|lon
argument_list|,
name|lat
argument_list|)
argument_list|)
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|)
expr_stmt|;
name|assertPointsEqual
argument_list|(
name|point
operator|.
name|reset
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|point2
operator|.
name|reset
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertPointsEqual
argument_list|(
name|point
operator|.
name|resetFromString
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|lat
argument_list|)
operator|+
literal|", "
operator|+
name|Double
operator|.
name|toHexString
argument_list|(
name|lon
argument_list|)
argument_list|)
argument_list|,
name|point2
operator|.
name|reset
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
argument_list|)
expr_stmt|;
name|assertPointsEqual
argument_list|(
name|point
operator|.
name|reset
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|point2
operator|.
name|reset
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsHashCodeContract
specifier|public
name|void
name|testEqualsHashCodeContract
parameter_list|()
block|{
comment|// generate a random geopoint
specifier|final
name|GeoPoint
name|x
init|=
name|RandomGeoGenerator
operator|.
name|randomPoint
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|GeoPoint
name|y
init|=
operator|new
name|GeoPoint
argument_list|(
name|x
operator|.
name|lat
argument_list|()
argument_list|,
name|x
operator|.
name|lon
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|GeoPoint
name|z
init|=
operator|new
name|GeoPoint
argument_list|(
name|y
operator|.
name|lat
argument_list|()
argument_list|,
name|y
operator|.
name|lon
argument_list|()
argument_list|)
decl_stmt|;
comment|// GeoPoint doesn't care about coordinate system bounds, this simply validates inequality
specifier|final
name|GeoPoint
name|a
init|=
operator|new
name|GeoPoint
argument_list|(
name|x
operator|.
name|lat
argument_list|()
operator|+
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|,
name|x
operator|.
name|lon
argument_list|()
operator|+
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
comment|/** equality test */
comment|// reflexive
name|assertTrue
argument_list|(
name|x
operator|.
name|equals
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
comment|// symmetry
name|assertTrue
argument_list|(
name|x
operator|.
name|equals
argument_list|(
name|y
argument_list|)
argument_list|)
expr_stmt|;
comment|// transitivity
name|assertTrue
argument_list|(
name|y
operator|.
name|equals
argument_list|(
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|x
operator|.
name|equals
argument_list|(
name|z
argument_list|)
argument_list|)
expr_stmt|;
comment|// inequality
name|assertFalse
argument_list|(
name|x
operator|.
name|equals
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
comment|/** hashCode test */
comment|// symmetry
name|assertTrue
argument_list|(
name|x
operator|.
name|hashCode
argument_list|()
operator|==
name|y
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// transitivity
name|assertTrue
argument_list|(
name|y
operator|.
name|hashCode
argument_list|()
operator|==
name|z
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|x
operator|.
name|hashCode
argument_list|()
operator|==
name|z
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// inequality
name|assertFalse
argument_list|(
name|x
operator|.
name|hashCode
argument_list|()
operator|==
name|a
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoPointParsing
specifier|public
name|void
name|testGeoPointParsing
parameter_list|()
throws|throws
name|IOException
block|{
name|GeoPoint
name|randomPt
init|=
name|RandomGeoGenerator
operator|.
name|randomPoint
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|GeoPoint
name|point
init|=
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|objectLatLon
argument_list|(
name|randomPt
operator|.
name|lat
argument_list|()
argument_list|,
name|randomPt
operator|.
name|lon
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertPointsEqual
argument_list|(
name|point
argument_list|,
name|randomPt
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|arrayLatLon
argument_list|(
name|randomPt
operator|.
name|lat
argument_list|()
argument_list|,
name|randomPt
operator|.
name|lon
argument_list|()
argument_list|)
argument_list|,
name|point
argument_list|)
expr_stmt|;
name|assertPointsEqual
argument_list|(
name|point
argument_list|,
name|randomPt
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|geohash
argument_list|(
name|randomPt
operator|.
name|lat
argument_list|()
argument_list|,
name|randomPt
operator|.
name|lon
argument_list|()
argument_list|)
argument_list|,
name|point
argument_list|)
expr_stmt|;
name|assertCloseTo
argument_list|(
name|point
argument_list|,
name|randomPt
operator|.
name|lat
argument_list|()
argument_list|,
name|randomPt
operator|.
name|lon
argument_list|()
argument_list|)
expr_stmt|;
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|stringLatLon
argument_list|(
name|randomPt
operator|.
name|lat
argument_list|()
argument_list|,
name|randomPt
operator|.
name|lon
argument_list|()
argument_list|)
argument_list|,
name|point
argument_list|)
expr_stmt|;
name|assertCloseTo
argument_list|(
name|point
argument_list|,
name|randomPt
operator|.
name|lat
argument_list|()
argument_list|,
name|randomPt
operator|.
name|lon
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Based on #5390
DECL|method|testInvalidPointEmbeddedObject
specifier|public
name|void
name|testInvalidPointEmbeddedObject
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|content
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|content
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|content
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
expr_stmt|;
name|content
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
literal|0
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|content
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|content
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|XContentParser
name|parser
init|=
name|JsonXContent
operator|.
name|jsonXContent
operator|.
name|createParser
argument_list|(
name|content
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
try|try
block|{
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ElasticsearchParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"field must be either [lat], [lon] or [geohash]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInvalidPointLatHashMix
specifier|public
name|void
name|testInvalidPointLatHashMix
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|content
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|content
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|content
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
literal|0
argument_list|)
operator|.
name|field
argument_list|(
literal|"geohash"
argument_list|,
name|GeoHashUtils
operator|.
name|stringEncode
argument_list|(
literal|0d
argument_list|,
literal|0d
argument_list|)
argument_list|)
expr_stmt|;
name|content
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|XContentParser
name|parser
init|=
name|JsonXContent
operator|.
name|jsonXContent
operator|.
name|createParser
argument_list|(
name|content
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
try|try
block|{
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ElasticsearchParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"field must be either lat/lon or geohash"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInvalidPointLonHashMix
specifier|public
name|void
name|testInvalidPointLonHashMix
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|content
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|content
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|content
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
literal|0
argument_list|)
operator|.
name|field
argument_list|(
literal|"geohash"
argument_list|,
name|GeoHashUtils
operator|.
name|stringEncode
argument_list|(
literal|0d
argument_list|,
literal|0d
argument_list|)
argument_list|)
expr_stmt|;
name|content
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|XContentParser
name|parser
init|=
name|JsonXContent
operator|.
name|jsonXContent
operator|.
name|createParser
argument_list|(
name|content
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
try|try
block|{
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ElasticsearchParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"field must be either lat/lon or geohash"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInvalidField
specifier|public
name|void
name|testInvalidField
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|content
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|content
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|content
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
literal|0
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
literal|0
argument_list|)
operator|.
name|field
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|content
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|XContentParser
name|parser
init|=
name|JsonXContent
operator|.
name|jsonXContent
operator|.
name|createParser
argument_list|(
name|content
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
try|try
block|{
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ElasticsearchParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"field must be either [lat], [lon] or [geohash]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|objectLatLon
specifier|private
specifier|static
name|XContentParser
name|objectLatLon
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|content
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|content
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|content
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|lat
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|lon
argument_list|)
expr_stmt|;
name|content
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|XContentParser
name|parser
init|=
name|JsonXContent
operator|.
name|jsonXContent
operator|.
name|createParser
argument_list|(
name|content
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
return|return
name|parser
return|;
block|}
DECL|method|arrayLatLon
specifier|private
specifier|static
name|XContentParser
name|arrayLatLon
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|content
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|content
operator|.
name|startArray
argument_list|()
operator|.
name|value
argument_list|(
name|lon
argument_list|)
operator|.
name|value
argument_list|(
name|lat
argument_list|)
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|XContentParser
name|parser
init|=
name|JsonXContent
operator|.
name|jsonXContent
operator|.
name|createParser
argument_list|(
name|content
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
return|return
name|parser
return|;
block|}
DECL|method|stringLatLon
specifier|private
specifier|static
name|XContentParser
name|stringLatLon
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|content
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|content
operator|.
name|value
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|lat
argument_list|)
operator|+
literal|", "
operator|+
name|Double
operator|.
name|toString
argument_list|(
name|lon
argument_list|)
argument_list|)
expr_stmt|;
name|XContentParser
name|parser
init|=
name|JsonXContent
operator|.
name|jsonXContent
operator|.
name|createParser
argument_list|(
name|content
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
return|return
name|parser
return|;
block|}
DECL|method|geohash
specifier|private
specifier|static
name|XContentParser
name|geohash
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|content
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|content
operator|.
name|value
argument_list|(
name|GeoHashUtils
operator|.
name|stringEncode
argument_list|(
name|lon
argument_list|,
name|lat
argument_list|)
argument_list|)
expr_stmt|;
name|XContentParser
name|parser
init|=
name|JsonXContent
operator|.
name|jsonXContent
operator|.
name|createParser
argument_list|(
name|content
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
return|return
name|parser
return|;
block|}
DECL|method|assertPointsEqual
specifier|public
specifier|static
name|void
name|assertPointsEqual
parameter_list|(
specifier|final
name|GeoPoint
name|point1
parameter_list|,
specifier|final
name|GeoPoint
name|point2
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|point1
argument_list|,
name|point2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|point1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|point2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCloseTo
specifier|public
specifier|static
name|void
name|assertCloseTo
parameter_list|(
specifier|final
name|GeoPoint
name|point
parameter_list|,
specifier|final
name|double
name|lat
parameter_list|,
specifier|final
name|double
name|lon
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|point
operator|.
name|lat
argument_list|()
argument_list|,
name|lat
argument_list|,
name|TOLERANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|point
operator|.
name|lon
argument_list|()
argument_list|,
name|lon
argument_list|,
name|TOLERANCE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

