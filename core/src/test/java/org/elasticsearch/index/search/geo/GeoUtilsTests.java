begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|distance
operator|.
name|DistanceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|GeohashPrefixTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|QuadPrefixTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|util
operator|.
name|GeoHashUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|closeTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_class
DECL|class|GeoUtilsTests
specifier|public
class|class
name|GeoUtilsTests
extends|extends
name|ESTestCase
block|{
DECL|field|BASE_32
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|BASE_32
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|,
literal|'g'
block|,
literal|'h'
block|,
literal|'j'
block|,
literal|'k'
block|,
literal|'m'
block|,
literal|'n'
block|,
literal|'p'
block|,
literal|'q'
block|,
literal|'r'
block|,
literal|'s'
block|,
literal|'t'
block|,
literal|'u'
block|,
literal|'v'
block|,
literal|'w'
block|,
literal|'x'
block|,
literal|'y'
block|,
literal|'z'
block|}
decl_stmt|;
DECL|field|MAX_ACCEPTABLE_ERROR
specifier|private
specifier|static
specifier|final
name|double
name|MAX_ACCEPTABLE_ERROR
init|=
literal|0.000000001
decl_stmt|;
DECL|method|testGeohashCellWidth
specifier|public
name|void
name|testGeohashCellWidth
parameter_list|()
block|{
name|double
name|equatorialDistance
init|=
literal|2
operator|*
name|Math
operator|.
name|PI
operator|*
literal|6378137.0
decl_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellWidth
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellWidth
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellWidth
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellWidth
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|256
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellWidth
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellWidth
argument_list|(
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|8192
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellWidth
argument_list|(
literal|6
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|32768
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellWidth
argument_list|(
literal|7
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|262144
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellWidth
argument_list|(
literal|8
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|1048576
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellWidth
argument_list|(
literal|9
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|8388608
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellWidth
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|33554432
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellWidth
argument_list|(
literal|11
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|268435456
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellWidth
argument_list|(
literal|12
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|1073741824
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeohashCellHeight
specifier|public
name|void
name|testGeohashCellHeight
parameter_list|()
block|{
name|double
name|polarDistance
init|=
name|Math
operator|.
name|PI
operator|*
literal|6356752.314245
decl_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellHeight
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellHeight
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellHeight
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellHeight
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellHeight
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellHeight
argument_list|(
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|4096
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellHeight
argument_list|(
literal|6
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|32768
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellHeight
argument_list|(
literal|7
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|131072
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellHeight
argument_list|(
literal|8
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|1048576
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellHeight
argument_list|(
literal|9
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|4194304
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellHeight
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|33554432
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellHeight
argument_list|(
literal|11
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|134217728
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellHeight
argument_list|(
literal|12
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|1073741824
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeohashCellSize
specifier|public
name|void
name|testGeohashCellSize
parameter_list|()
block|{
name|double
name|equatorialDistance
init|=
literal|2
operator|*
name|Math
operator|.
name|PI
operator|*
literal|6378137.0
decl_stmt|;
name|double
name|polarDistance
init|=
name|Math
operator|.
name|PI
operator|*
literal|6356752.314245
decl_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellSize
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellSize
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|4
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellSize
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|32
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|32
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellSize
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|128
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|256
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellSize
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|1024
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|1024
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellSize
argument_list|(
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|4096
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|8192
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellSize
argument_list|(
literal|6
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|32768
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|32768
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellSize
argument_list|(
literal|7
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|131072
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|262144
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellSize
argument_list|(
literal|8
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|1048576
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|1048576
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellSize
argument_list|(
literal|9
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|4194304
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|8388608
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellSize
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|33554432
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|33554432
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellSize
argument_list|(
literal|11
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|134217728
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|268435456
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellSize
argument_list|(
literal|12
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|1073741824
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|1073741824
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoHashLevelsForPrecision
specifier|public
name|void
name|testGeoHashLevelsForPrecision
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|double
name|precision
init|=
name|randomDouble
argument_list|()
operator|*
literal|100
decl_stmt|;
name|int
name|level
init|=
name|GeoUtils
operator|.
name|geoHashLevelsForPrecision
argument_list|(
name|precision
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellSize
argument_list|(
name|level
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|precision
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGeoHashLevelsForPrecision_String
specifier|public
name|void
name|testGeoHashLevelsForPrecision_String
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|double
name|precision
init|=
name|randomDouble
argument_list|()
operator|*
literal|100
decl_stmt|;
name|String
name|precisionString
init|=
name|precision
operator|+
literal|"m"
decl_stmt|;
name|int
name|level
init|=
name|GeoUtils
operator|.
name|geoHashLevelsForPrecision
argument_list|(
name|precisionString
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashCellSize
argument_list|(
name|level
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|precision
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testQuadTreeCellWidth
specifier|public
name|void
name|testQuadTreeCellWidth
parameter_list|()
block|{
name|double
name|equatorialDistance
init|=
literal|2
operator|*
name|Math
operator|.
name|PI
operator|*
literal|6378137.0
decl_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellWidth
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellWidth
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellWidth
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellWidth
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellWidth
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellWidth
argument_list|(
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellWidth
argument_list|(
literal|6
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|64
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellWidth
argument_list|(
literal|7
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellWidth
argument_list|(
literal|8
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|256
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellWidth
argument_list|(
literal|9
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|512
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellWidth
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellWidth
argument_list|(
literal|11
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|2048
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellWidth
argument_list|(
literal|12
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|equatorialDistance
operator|/
literal|4096
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testQuadTreeCellHeight
specifier|public
name|void
name|testQuadTreeCellHeight
parameter_list|()
block|{
name|double
name|polarDistance
init|=
name|Math
operator|.
name|PI
operator|*
literal|6356752.314245
decl_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellHeight
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellHeight
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellHeight
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellHeight
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellHeight
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellHeight
argument_list|(
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellHeight
argument_list|(
literal|6
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|64
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellHeight
argument_list|(
literal|7
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellHeight
argument_list|(
literal|8
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|256
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellHeight
argument_list|(
literal|9
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|512
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellHeight
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellHeight
argument_list|(
literal|11
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|2048
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellHeight
argument_list|(
literal|12
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|polarDistance
operator|/
literal|4096
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testQuadTreeCellSize
specifier|public
name|void
name|testQuadTreeCellSize
parameter_list|()
block|{
name|double
name|equatorialDistance
init|=
literal|2
operator|*
name|Math
operator|.
name|PI
operator|*
literal|6378137.0
decl_stmt|;
name|double
name|polarDistance
init|=
name|Math
operator|.
name|PI
operator|*
literal|6356752.314245
decl_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellSize
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellSize
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|2
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellSize
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|4
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|4
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellSize
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|8
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellSize
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|16
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|16
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellSize
argument_list|(
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|32
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|32
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellSize
argument_list|(
literal|6
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|64
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|64
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellSize
argument_list|(
literal|7
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|128
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|128
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellSize
argument_list|(
literal|8
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|256
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|256
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellSize
argument_list|(
literal|9
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|512
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|512
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellSize
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|1024
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|1024
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellSize
argument_list|(
literal|11
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|2048
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellSize
argument_list|(
literal|12
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|polarDistance
operator|/
literal|4096
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|equatorialDistance
operator|/
literal|4096
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testQuadTreeLevelsForPrecision
specifier|public
name|void
name|testQuadTreeLevelsForPrecision
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|double
name|precision
init|=
name|randomDouble
argument_list|()
operator|*
literal|100
decl_stmt|;
name|int
name|level
init|=
name|GeoUtils
operator|.
name|quadTreeLevelsForPrecision
argument_list|(
name|precision
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellSize
argument_list|(
name|level
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|precision
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testQuadTreeLevelsForPrecisionString
specifier|public
name|void
name|testQuadTreeLevelsForPrecisionString
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|double
name|precision
init|=
name|randomDouble
argument_list|()
operator|*
literal|100
decl_stmt|;
name|String
name|precisionString
init|=
name|precision
operator|+
literal|"m"
decl_stmt|;
name|int
name|level
init|=
name|GeoUtils
operator|.
name|quadTreeLevelsForPrecision
argument_list|(
name|precisionString
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellSize
argument_list|(
name|level
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|precision
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNormalizeLatInNormalRange
specifier|public
name|void
name|testNormalizeLatInNormalRange
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|double
name|testValue
init|=
operator|(
name|randomDouble
argument_list|()
operator|*
literal|180.0
operator|)
operator|-
literal|90.0
decl_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
name|testValue
argument_list|)
argument_list|,
name|closeTo
argument_list|(
name|testValue
argument_list|,
name|MAX_ACCEPTABLE_ERROR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNormalizeLatOutsideNormalRange
specifier|public
name|void
name|testNormalizeLatOutsideNormalRange
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|double
name|normalisedValue
init|=
operator|(
name|randomDouble
argument_list|()
operator|*
literal|180.0
operator|)
operator|-
literal|90.0
decl_stmt|;
name|int
name|shift
init|=
operator|(
name|randomBoolean
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
operator|*
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|double
name|testValue
init|=
name|normalisedValue
operator|+
operator|(
literal|180.0
operator|*
name|shift
operator|)
decl_stmt|;
name|double
name|expectedValue
init|=
name|normalisedValue
operator|*
operator|(
name|shift
operator|%
literal|2
operator|==
literal|0
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
decl_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
name|testValue
argument_list|)
argument_list|,
name|closeTo
argument_list|(
name|expectedValue
argument_list|,
name|MAX_ACCEPTABLE_ERROR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNormalizeLatHuge
specifier|public
name|void
name|testNormalizeLatHuge
parameter_list|()
block|{
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|-
literal|18000000000091.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|-
literal|091.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|-
literal|18000000000090.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|-
literal|090.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|-
literal|18000000000089.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|-
literal|089.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|-
literal|18000000000088.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|-
literal|088.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|-
literal|18000000000001.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|-
literal|001.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|+
literal|18000000000000.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|+
literal|000.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|+
literal|18000000000001.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|+
literal|001.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|+
literal|18000000000002.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|+
literal|002.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|+
literal|18000000000088.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|+
literal|088.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|+
literal|18000000000089.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|+
literal|089.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|+
literal|18000000000090.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|+
literal|090.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|+
literal|18000000000091.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|+
literal|091.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNormalizeLatEdgeCases
specifier|public
name|void
name|testNormalizeLatEdgeCases
parameter_list|()
block|{
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|0.0
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
operator|-
literal|0.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|-
literal|0.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
literal|0.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|-
literal|180.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
literal|180.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
operator|-
literal|90.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|90.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLat
argument_list|(
literal|90.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|90.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNormalizeLonInNormalRange
specifier|public
name|void
name|testNormalizeLonInNormalRange
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|double
name|testValue
init|=
operator|(
name|randomDouble
argument_list|()
operator|*
literal|360.0
operator|)
operator|-
literal|180.0
decl_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
name|testValue
argument_list|)
argument_list|,
name|closeTo
argument_list|(
name|testValue
argument_list|,
name|MAX_ACCEPTABLE_ERROR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNormalizeLonOutsideNormalRange
specifier|public
name|void
name|testNormalizeLonOutsideNormalRange
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|double
name|normalisedValue
init|=
operator|(
name|randomDouble
argument_list|()
operator|*
literal|360.0
operator|)
operator|-
literal|180.0
decl_stmt|;
name|double
name|testValue
init|=
name|normalisedValue
operator|+
operator|(
operator|(
name|randomBoolean
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
operator|*
literal|360.0
operator|*
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10000
argument_list|)
operator|)
decl_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
name|testValue
argument_list|)
argument_list|,
name|closeTo
argument_list|(
name|normalisedValue
argument_list|,
name|MAX_ACCEPTABLE_ERROR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNormalizeLonHuge
specifier|public
name|void
name|testNormalizeLonHuge
parameter_list|()
block|{
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|-
literal|36000000000181.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|-
literal|181.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|-
literal|36000000000180.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|-
literal|180.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|-
literal|36000000000179.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|-
literal|179.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|-
literal|36000000000178.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|-
literal|178.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|-
literal|36000000000001.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|-
literal|001.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|+
literal|36000000000000.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|+
literal|000.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|+
literal|36000000000001.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|+
literal|001.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|+
literal|36000000000002.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|+
literal|002.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|+
literal|36000000000178.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|+
literal|178.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|+
literal|36000000000179.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|+
literal|179.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|+
literal|36000000000180.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|+
literal|180.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|+
literal|36000000000181.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|+
literal|181.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNormalizeLonEdgeCases
specifier|public
name|void
name|testNormalizeLonEdgeCases
parameter_list|()
block|{
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|0.0
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
operator|-
literal|0.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|-
literal|0.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
literal|0.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|-
literal|360.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
literal|360.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
operator|-
literal|180.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|180.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|normalizeLon
argument_list|(
literal|180.0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|180.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNormalizePointInNormalRange
specifier|public
name|void
name|testNormalizePointInNormalRange
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|double
name|testLat
init|=
operator|(
name|randomDouble
argument_list|()
operator|*
literal|180.0
operator|)
operator|-
literal|90.0
decl_stmt|;
name|double
name|testLon
init|=
operator|(
name|randomDouble
argument_list|()
operator|*
literal|360.0
operator|)
operator|-
literal|180.0
decl_stmt|;
name|GeoPoint
name|testPoint
init|=
operator|new
name|GeoPoint
argument_list|(
name|testLat
argument_list|,
name|testLon
argument_list|)
decl_stmt|;
name|assertNormalizedPoint
argument_list|(
name|testPoint
argument_list|,
name|testPoint
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNormalizePointOutsideNormalRange
specifier|public
name|void
name|testNormalizePointOutsideNormalRange
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|double
name|normalisedLat
init|=
operator|(
name|randomDouble
argument_list|()
operator|*
literal|180.0
operator|)
operator|-
literal|90.0
decl_stmt|;
name|double
name|normalisedLon
init|=
operator|(
name|randomDouble
argument_list|()
operator|*
literal|360.0
operator|)
operator|-
literal|180.0
decl_stmt|;
name|int
name|shiftLat
init|=
operator|(
name|randomBoolean
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
operator|*
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|int
name|shiftLon
init|=
operator|(
name|randomBoolean
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
operator|*
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|double
name|testLat
init|=
name|normalisedLat
operator|+
operator|(
literal|180.0
operator|*
name|shiftLat
operator|)
decl_stmt|;
name|double
name|testLon
init|=
name|normalisedLon
operator|+
operator|(
literal|360.0
operator|*
name|shiftLon
operator|)
decl_stmt|;
name|double
name|expectedLat
init|=
name|normalisedLat
operator|*
operator|(
name|shiftLat
operator|%
literal|2
operator|==
literal|0
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
decl_stmt|;
name|double
name|expectedLon
init|=
name|normalisedLon
operator|+
operator|(
name|shiftLat
operator|%
literal|2
operator|==
literal|0
condition|?
literal|0
else|:
literal|180
operator|)
decl_stmt|;
if|if
condition|(
name|expectedLon
operator|>
literal|180.0
condition|)
block|{
name|expectedLon
operator|-=
literal|360
expr_stmt|;
block|}
name|GeoPoint
name|testPoint
init|=
operator|new
name|GeoPoint
argument_list|(
name|testLat
argument_list|,
name|testLon
argument_list|)
decl_stmt|;
name|GeoPoint
name|expectedPoint
init|=
operator|new
name|GeoPoint
argument_list|(
name|expectedLat
argument_list|,
name|expectedLon
argument_list|)
decl_stmt|;
name|assertNormalizedPoint
argument_list|(
name|testPoint
argument_list|,
name|expectedPoint
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNormalizePointOutsideNormalRange_withOptions
specifier|public
name|void
name|testNormalizePointOutsideNormalRange_withOptions
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|normalize
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|double
name|normalisedLat
init|=
operator|(
name|randomDouble
argument_list|()
operator|*
literal|180.0
operator|)
operator|-
literal|90.0
decl_stmt|;
name|double
name|normalisedLon
init|=
operator|(
name|randomDouble
argument_list|()
operator|*
literal|360.0
operator|)
operator|-
literal|180.0
decl_stmt|;
name|int
name|shift
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|double
name|testLat
init|=
name|normalisedLat
operator|+
operator|(
literal|180.0
operator|*
name|shift
operator|)
decl_stmt|;
name|double
name|testLon
init|=
name|normalisedLon
operator|+
operator|(
literal|360.0
operator|*
name|shift
operator|)
decl_stmt|;
name|double
name|expectedLat
decl_stmt|;
name|double
name|expectedLon
decl_stmt|;
if|if
condition|(
name|normalize
condition|)
block|{
name|expectedLat
operator|=
name|normalisedLat
operator|*
operator|(
name|shift
operator|%
literal|2
operator|==
literal|0
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
expr_stmt|;
name|expectedLon
operator|=
name|normalisedLon
operator|+
operator|(
operator|(
name|shift
operator|%
literal|2
operator|==
literal|1
operator|)
condition|?
literal|180
else|:
literal|0
operator|)
expr_stmt|;
if|if
condition|(
name|expectedLon
operator|>
literal|180.0
condition|)
block|{
name|expectedLon
operator|-=
literal|360
expr_stmt|;
block|}
block|}
else|else
block|{
name|expectedLat
operator|=
name|testLat
expr_stmt|;
name|expectedLon
operator|=
name|testLon
expr_stmt|;
block|}
name|GeoPoint
name|testPoint
init|=
operator|new
name|GeoPoint
argument_list|(
name|testLat
argument_list|,
name|testLon
argument_list|)
decl_stmt|;
name|GeoPoint
name|expectedPoint
init|=
operator|new
name|GeoPoint
argument_list|(
name|expectedLat
argument_list|,
name|expectedLon
argument_list|)
decl_stmt|;
name|GeoUtils
operator|.
name|normalizePoint
argument_list|(
name|testPoint
argument_list|,
name|normalize
argument_list|,
name|normalize
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Unexpected Latitude"
argument_list|,
name|testPoint
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|expectedPoint
operator|.
name|lat
argument_list|()
argument_list|,
name|MAX_ACCEPTABLE_ERROR
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Unexpected Longitude"
argument_list|,
name|testPoint
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|expectedPoint
operator|.
name|lon
argument_list|()
argument_list|,
name|MAX_ACCEPTABLE_ERROR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNormalizePointHuge
specifier|public
name|void
name|testNormalizePointHuge
parameter_list|()
block|{
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|18000000000091.0
argument_list|,
operator|-
literal|36000000000181.0
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|089.0
argument_list|,
operator|-
literal|001.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|18000000000090.0
argument_list|,
operator|-
literal|36000000000180.0
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|090.0
argument_list|,
operator|+
literal|180.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|18000000000089.0
argument_list|,
operator|-
literal|36000000000179.0
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|089.0
argument_list|,
operator|-
literal|179.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|18000000000088.0
argument_list|,
operator|-
literal|36000000000178.0
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|088.0
argument_list|,
operator|-
literal|178.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|18000000000001.0
argument_list|,
operator|-
literal|36000000000001.0
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|001.0
argument_list|,
operator|-
literal|001.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
operator|+
literal|18000000000000.0
argument_list|,
operator|+
literal|18000000000000.0
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
operator|+
literal|000.0
argument_list|,
operator|+
literal|000.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
operator|+
literal|18000000000001.0
argument_list|,
operator|+
literal|36000000000001.0
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
operator|+
literal|001.0
argument_list|,
operator|+
literal|001.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
operator|+
literal|18000000000002.0
argument_list|,
operator|+
literal|36000000000002.0
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
operator|+
literal|002.0
argument_list|,
operator|+
literal|002.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
operator|+
literal|18000000000088.0
argument_list|,
operator|+
literal|36000000000178.0
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
operator|+
literal|088.0
argument_list|,
operator|+
literal|178.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
operator|+
literal|18000000000089.0
argument_list|,
operator|+
literal|36000000000179.0
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
operator|+
literal|089.0
argument_list|,
operator|+
literal|179.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
operator|+
literal|18000000000090.0
argument_list|,
operator|+
literal|36000000000180.0
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
operator|+
literal|090.0
argument_list|,
operator|+
literal|180.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
operator|+
literal|18000000000091.0
argument_list|,
operator|+
literal|36000000000181.0
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
operator|+
literal|089.0
argument_list|,
operator|+
literal|001.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNormalizePointEdgeCases
specifier|public
name|void
name|testNormalizePointEdgeCases
parameter_list|()
block|{
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
name|Double
operator|.
name|NaN
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
name|Double
operator|.
name|NaN
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
name|Double
operator|.
name|NaN
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
name|Double
operator|.
name|NaN
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|0.0
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
operator|-
literal|0.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|0.0
argument_list|,
operator|-
literal|0.0
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|180.0
argument_list|,
operator|-
literal|360.0
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
literal|0.0
argument_list|,
literal|180.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
literal|180.0
argument_list|,
literal|360.0
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
literal|0.0
argument_list|,
literal|180.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|90.0
argument_list|,
operator|-
literal|180.0
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|90.0
argument_list|,
operator|-
literal|180.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNormalizedPoint
argument_list|(
operator|new
name|GeoPoint
argument_list|(
literal|90.0
argument_list|,
literal|180.0
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
literal|90.0
argument_list|,
literal|180.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseGeoPoint
specifier|public
name|void
name|testParseGeoPoint
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|double
name|lat
init|=
name|randomDouble
argument_list|()
operator|*
literal|180
operator|-
literal|90
operator|+
name|randomIntBetween
argument_list|(
operator|-
literal|1000
argument_list|,
literal|1000
argument_list|)
operator|*
literal|180
decl_stmt|;
name|double
name|lon
init|=
name|randomDouble
argument_list|()
operator|*
literal|360
operator|-
literal|180
operator|+
name|randomIntBetween
argument_list|(
operator|-
literal|1000
argument_list|,
literal|1000
argument_list|)
operator|*
literal|360
decl_stmt|;
name|BytesReference
name|jsonBytes
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|lat
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|lon
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|jsonBytes
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|GeoPoint
name|point
init|=
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|point
argument_list|,
name|equalTo
argument_list|(
operator|new
name|GeoPoint
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|jsonBytes
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|lat
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|lon
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|parser
operator|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|jsonBytes
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|point
operator|=
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|point
argument_list|,
name|equalTo
argument_list|(
operator|new
name|GeoPoint
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|jsonBytes
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|value
argument_list|(
name|lon
argument_list|)
operator|.
name|value
argument_list|(
name|lat
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|parser
operator|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|jsonBytes
argument_list|)
expr_stmt|;
while|while
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|!=
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|point
operator|=
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|point
argument_list|,
name|equalTo
argument_list|(
operator|new
name|GeoPoint
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|jsonBytes
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
name|lat
operator|+
literal|","
operator|+
name|lon
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|parser
operator|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|jsonBytes
argument_list|)
expr_stmt|;
while|while
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|point
operator|=
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|point
argument_list|,
name|equalTo
argument_list|(
operator|new
name|GeoPoint
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseGeoPointGeohash
specifier|public
name|void
name|testParseGeoPointGeohash
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|int
name|geoHashLength
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|GeoHashUtils
operator|.
name|PRECISION
argument_list|)
decl_stmt|;
name|StringBuilder
name|geohashBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
name|geoHashLength
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|geoHashLength
condition|;
name|j
operator|++
control|)
block|{
name|geohashBuilder
operator|.
name|append
argument_list|(
name|BASE_32
index|[
name|randomInt
argument_list|(
name|BASE_32
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
name|BytesReference
name|jsonBytes
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"geohash"
argument_list|,
name|geohashBuilder
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|jsonBytes
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|GeoPoint
name|point
init|=
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|point
operator|.
name|lat
argument_list|()
argument_list|,
name|allOf
argument_list|(
name|lessThanOrEqualTo
argument_list|(
literal|90.0
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
operator|-
literal|90.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|point
operator|.
name|lon
argument_list|()
argument_list|,
name|allOf
argument_list|(
name|lessThanOrEqualTo
argument_list|(
literal|180.0
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
operator|-
literal|180.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|jsonBytes
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"geohash"
argument_list|,
name|geohashBuilder
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|parser
operator|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|jsonBytes
argument_list|)
expr_stmt|;
while|while
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|point
operator|=
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|point
operator|.
name|lat
argument_list|()
argument_list|,
name|allOf
argument_list|(
name|lessThanOrEqualTo
argument_list|(
literal|90.0
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
operator|-
literal|90.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|point
operator|.
name|lon
argument_list|()
argument_list|,
name|allOf
argument_list|(
name|lessThanOrEqualTo
argument_list|(
literal|180.0
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
operator|-
literal|180.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseGeoPointGeohashWrongType
specifier|public
name|void
name|testParseGeoPointGeohashWrongType
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesReference
name|jsonBytes
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"geohash"
argument_list|,
literal|1.0
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|jsonBytes
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
try|try
block|{
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ElasticsearchParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"geohash must be a string"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseGeoPointLatNoLon
specifier|public
name|void
name|testParseGeoPointLatNoLon
parameter_list|()
throws|throws
name|IOException
block|{
name|double
name|lat
init|=
literal|0.0
decl_stmt|;
name|BytesReference
name|jsonBytes
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|lat
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|jsonBytes
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
try|try
block|{
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ElasticsearchParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"field [lon] missing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseGeoPointLonNoLat
specifier|public
name|void
name|testParseGeoPointLonNoLat
parameter_list|()
throws|throws
name|IOException
block|{
name|double
name|lon
init|=
literal|0.0
decl_stmt|;
name|BytesReference
name|jsonBytes
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|lon
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|jsonBytes
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
try|try
block|{
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ElasticsearchParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"field [lat] missing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseGeoPointLonWrongType
specifier|public
name|void
name|testParseGeoPointLonWrongType
parameter_list|()
throws|throws
name|IOException
block|{
name|double
name|lat
init|=
literal|0.0
decl_stmt|;
name|BytesReference
name|jsonBytes
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|lat
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|jsonBytes
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
try|try
block|{
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ElasticsearchParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"longitude must be a number"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseGeoPointLatWrongType
specifier|public
name|void
name|testParseGeoPointLatWrongType
parameter_list|()
throws|throws
name|IOException
block|{
name|double
name|lon
init|=
literal|0.0
decl_stmt|;
name|BytesReference
name|jsonBytes
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|lon
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|jsonBytes
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
try|try
block|{
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ElasticsearchParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"latitude must be a number"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseGeoPointExtraField
specifier|public
name|void
name|testParseGeoPointExtraField
parameter_list|()
throws|throws
name|IOException
block|{
name|double
name|lat
init|=
literal|0.0
decl_stmt|;
name|double
name|lon
init|=
literal|0.0
decl_stmt|;
name|BytesReference
name|jsonBytes
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|lat
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|lon
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|jsonBytes
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
try|try
block|{
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ElasticsearchParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"field must be either [lat], [lon] or [geohash]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseGeoPointLonLatGeoHash
specifier|public
name|void
name|testParseGeoPointLonLatGeoHash
parameter_list|()
throws|throws
name|IOException
block|{
name|double
name|lat
init|=
literal|0.0
decl_stmt|;
name|double
name|lon
init|=
literal|0.0
decl_stmt|;
name|String
name|geohash
init|=
literal|"abcd"
decl_stmt|;
name|BytesReference
name|jsonBytes
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|lat
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|lon
argument_list|)
operator|.
name|field
argument_list|(
literal|"geohash"
argument_list|,
name|geohash
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|jsonBytes
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
try|try
block|{
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ElasticsearchParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"field must be either lat/lon or geohash"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseGeoPointArrayTooManyValues
specifier|public
name|void
name|testParseGeoPointArrayTooManyValues
parameter_list|()
throws|throws
name|IOException
block|{
name|double
name|lat
init|=
literal|0.0
decl_stmt|;
name|double
name|lon
init|=
literal|0.0
decl_stmt|;
name|double
name|elev
init|=
literal|0.0
decl_stmt|;
name|BytesReference
name|jsonBytes
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|value
argument_list|(
name|lon
argument_list|)
operator|.
name|value
argument_list|(
name|lat
argument_list|)
operator|.
name|value
argument_list|(
name|elev
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|jsonBytes
argument_list|)
decl_stmt|;
while|while
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|!=
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ElasticsearchParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"only two values allowed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseGeoPointArrayWrongType
specifier|public
name|void
name|testParseGeoPointArrayWrongType
parameter_list|()
throws|throws
name|IOException
block|{
name|double
name|lat
init|=
literal|0.0
decl_stmt|;
name|boolean
name|lon
init|=
literal|false
decl_stmt|;
name|BytesReference
name|jsonBytes
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|value
argument_list|(
name|lon
argument_list|)
operator|.
name|value
argument_list|(
name|lat
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|jsonBytes
argument_list|)
decl_stmt|;
while|while
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|!=
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ElasticsearchParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"numeric value expected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseGeoPointInvalidType
specifier|public
name|void
name|testParseGeoPointInvalidType
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesReference
name|jsonBytes
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|5
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|jsonBytes
argument_list|)
decl_stmt|;
while|while
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|!=
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ElasticsearchParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"geo_point expected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPrefixTreeCellSizes
specifier|public
name|void
name|testPrefixTreeCellSizes
parameter_list|()
block|{
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|EARTH_SEMI_MAJOR_AXIS
argument_list|,
name|equalTo
argument_list|(
name|DistanceUtils
operator|.
name|EARTH_EQUATORIAL_RADIUS_KM
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellWidth
argument_list|(
literal|0
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|GeoUtils
operator|.
name|EARTH_EQUATOR
argument_list|)
argument_list|)
expr_stmt|;
name|SpatialContext
name|spatialContext
init|=
operator|new
name|SpatialContext
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|GeohashPrefixTree
name|geohashPrefixTree
init|=
operator|new
name|GeohashPrefixTree
argument_list|(
name|spatialContext
argument_list|,
name|GeohashPrefixTree
operator|.
name|getMaxLevelsPossible
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|Cell
name|gNode
init|=
name|geohashPrefixTree
operator|.
name|getWorldCell
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|geohashPrefixTree
operator|.
name|getMaxLevels
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|double
name|width
init|=
name|GeoUtils
operator|.
name|geoHashCellWidth
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|double
name|height
init|=
name|GeoUtils
operator|.
name|geoHashCellHeight
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|double
name|size
init|=
name|GeoUtils
operator|.
name|geoHashCellSize
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|double
name|degrees
init|=
literal|360.0
operator|*
name|width
operator|/
name|GeoUtils
operator|.
name|EARTH_EQUATOR
decl_stmt|;
name|int
name|level
init|=
name|GeoUtils
operator|.
name|quadTreeLevelsForPrecision
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellWidth
argument_list|(
name|level
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|width
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellHeight
argument_list|(
name|level
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|height
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|geoHashLevelsForPrecision
argument_list|(
name|size
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|geohashPrefixTree
operator|.
name|getLevelForDistance
argument_list|(
name|degrees
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"width at level "
operator|+
name|i
argument_list|,
name|gNode
operator|.
name|getShape
argument_list|()
operator|.
name|getBoundingBox
argument_list|()
operator|.
name|getWidth
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|360.d
operator|*
name|width
operator|/
name|GeoUtils
operator|.
name|EARTH_EQUATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"height at level "
operator|+
name|i
argument_list|,
name|gNode
operator|.
name|getShape
argument_list|()
operator|.
name|getBoundingBox
argument_list|()
operator|.
name|getHeight
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|180.d
operator|*
name|height
operator|/
name|GeoUtils
operator|.
name|EARTH_POLAR_DISTANCE
argument_list|)
argument_list|)
expr_stmt|;
name|gNode
operator|=
name|gNode
operator|.
name|getNextLevelCells
argument_list|(
literal|null
argument_list|)
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|QuadPrefixTree
name|quadPrefixTree
init|=
operator|new
name|QuadPrefixTree
argument_list|(
name|spatialContext
argument_list|)
decl_stmt|;
name|Cell
name|qNode
init|=
name|quadPrefixTree
operator|.
name|getWorldCell
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|quadPrefixTree
operator|.
name|getMaxLevels
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|double
name|degrees
init|=
literal|360.0
operator|/
operator|(
literal|1L
operator|<<
name|i
operator|)
decl_stmt|;
name|double
name|width
init|=
name|GeoUtils
operator|.
name|quadTreeCellWidth
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|double
name|height
init|=
name|GeoUtils
operator|.
name|quadTreeCellHeight
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|double
name|size
init|=
name|GeoUtils
operator|.
name|quadTreeCellSize
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|level
init|=
name|GeoUtils
operator|.
name|quadTreeLevelsForPrecision
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellWidth
argument_list|(
name|level
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|width
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeCellHeight
argument_list|(
name|level
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|height
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoUtils
operator|.
name|quadTreeLevelsForPrecision
argument_list|(
name|size
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|quadPrefixTree
operator|.
name|getLevelForDistance
argument_list|(
name|degrees
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"width at level "
operator|+
name|i
argument_list|,
name|qNode
operator|.
name|getShape
argument_list|()
operator|.
name|getBoundingBox
argument_list|()
operator|.
name|getWidth
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|360.d
operator|*
name|width
operator|/
name|GeoUtils
operator|.
name|EARTH_EQUATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"height at level "
operator|+
name|i
argument_list|,
name|qNode
operator|.
name|getShape
argument_list|()
operator|.
name|getBoundingBox
argument_list|()
operator|.
name|getHeight
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|180.d
operator|*
name|height
operator|/
name|GeoUtils
operator|.
name|EARTH_POLAR_DISTANCE
argument_list|)
argument_list|)
expr_stmt|;
name|qNode
operator|=
name|qNode
operator|.
name|getNextLevelCells
argument_list|(
literal|null
argument_list|)
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertNormalizedPoint
specifier|private
specifier|static
name|void
name|assertNormalizedPoint
parameter_list|(
name|GeoPoint
name|input
parameter_list|,
name|GeoPoint
name|expected
parameter_list|)
block|{
name|GeoUtils
operator|.
name|normalizePoint
argument_list|(
name|input
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|expected
operator|.
name|lat
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
literal|"Unexpected Latitude"
argument_list|,
name|input
operator|.
name|lat
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|lat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
literal|"Unexpected Latitude"
argument_list|,
name|input
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|expected
operator|.
name|lat
argument_list|()
argument_list|,
name|MAX_ACCEPTABLE_ERROR
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|expected
operator|.
name|lon
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
literal|"Unexpected Longitude"
argument_list|,
name|input
operator|.
name|lon
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|lon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
literal|"Unexpected Longitude"
argument_list|,
name|input
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|expected
operator|.
name|lon
argument_list|()
argument_list|,
name|MAX_ACCEPTABLE_ERROR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

