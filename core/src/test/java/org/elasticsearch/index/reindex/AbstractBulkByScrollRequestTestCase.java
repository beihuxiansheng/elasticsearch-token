begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActiveShardCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|parseTimeValue
import|;
end_import

begin_comment
comment|/**  * Shared superclass for testing reindex and friends. In particular it makes sure to test the slice features.  */
end_comment

begin_class
DECL|class|AbstractBulkByScrollRequestTestCase
specifier|public
specifier|abstract
class|class
name|AbstractBulkByScrollRequestTestCase
parameter_list|<
name|R
extends|extends
name|AbstractBulkByScrollRequest
parameter_list|<
name|R
parameter_list|>
parameter_list|>
extends|extends
name|ESTestCase
block|{
DECL|method|testForSlice
specifier|public
name|void
name|testForSlice
parameter_list|()
block|{
name|R
name|original
init|=
name|newRequest
argument_list|()
decl_stmt|;
name|original
operator|.
name|setAbortOnVersionConflict
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|original
operator|.
name|setRefresh
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|original
operator|.
name|setTimeout
argument_list|(
name|parseTimeValue
argument_list|(
name|randomPositiveTimeValue
argument_list|()
argument_list|,
literal|"timeout"
argument_list|)
argument_list|)
expr_stmt|;
name|original
operator|.
name|setWaitForActiveShards
argument_list|(
name|randomFrom
argument_list|(
name|ActiveShardCount
operator|.
name|ALL
argument_list|,
name|ActiveShardCount
operator|.
name|NONE
argument_list|,
name|ActiveShardCount
operator|.
name|ONE
argument_list|,
name|ActiveShardCount
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|original
operator|.
name|setRetryBackoffInitialTime
argument_list|(
name|parseTimeValue
argument_list|(
name|randomPositiveTimeValue
argument_list|()
argument_list|,
literal|"retry_backoff_initial_time"
argument_list|)
argument_list|)
expr_stmt|;
name|original
operator|.
name|setMaxRetries
argument_list|(
name|between
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|original
operator|.
name|setSlices
argument_list|(
name|between
argument_list|(
literal|2
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|original
operator|.
name|setRequestsPerSecond
argument_list|(
name|randomBoolean
argument_list|()
condition|?
name|Float
operator|.
name|POSITIVE_INFINITY
else|:
name|randomValueOtherThanMany
argument_list|(
name|r
lambda|->
name|r
operator|<
literal|0
argument_list|,
name|ESTestCase
operator|::
name|randomFloat
argument_list|)
argument_list|)
expr_stmt|;
name|original
operator|.
name|setSize
argument_list|(
name|randomBoolean
argument_list|()
condition|?
name|AbstractBulkByScrollRequest
operator|.
name|SIZE_ALL_MATCHES
else|:
name|between
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|TaskId
name|slicingTask
init|=
operator|new
name|TaskId
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|randomLong
argument_list|()
argument_list|)
decl_stmt|;
name|SearchRequest
name|sliceRequest
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|R
name|forSliced
init|=
name|original
operator|.
name|forSlice
argument_list|(
name|slicingTask
argument_list|,
name|sliceRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|original
operator|.
name|isAbortOnVersionConflict
argument_list|()
argument_list|,
name|forSliced
operator|.
name|isAbortOnVersionConflict
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|original
operator|.
name|isRefresh
argument_list|()
argument_list|,
name|forSliced
operator|.
name|isRefresh
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|original
operator|.
name|getTimeout
argument_list|()
argument_list|,
name|forSliced
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|original
operator|.
name|getWaitForActiveShards
argument_list|()
argument_list|,
name|forSliced
operator|.
name|getWaitForActiveShards
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|original
operator|.
name|getRetryBackoffInitialTime
argument_list|()
argument_list|,
name|forSliced
operator|.
name|getRetryBackoffInitialTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|original
operator|.
name|getMaxRetries
argument_list|()
argument_list|,
name|forSliced
operator|.
name|getMaxRetries
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"only the parent task should store results"
argument_list|,
literal|false
argument_list|,
name|forSliced
operator|.
name|getShouldStoreResult
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"slice requests always have a single worker"
argument_list|,
literal|1
argument_list|,
name|forSliced
operator|.
name|getSlices
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"requests_per_second is split between all workers"
argument_list|,
name|original
operator|.
name|getRequestsPerSecond
argument_list|()
operator|/
name|original
operator|.
name|getSlices
argument_list|()
argument_list|,
name|forSliced
operator|.
name|getRequestsPerSecond
argument_list|()
argument_list|,
name|Float
operator|.
name|MIN_NORMAL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size is split evenly between all workers"
argument_list|,
name|original
operator|.
name|getSize
argument_list|()
operator|==
name|AbstractBulkByScrollRequest
operator|.
name|SIZE_ALL_MATCHES
condition|?
name|AbstractBulkByScrollRequest
operator|.
name|SIZE_ALL_MATCHES
else|:
name|original
operator|.
name|getSize
argument_list|()
operator|/
name|original
operator|.
name|getSlices
argument_list|()
argument_list|,
name|forSliced
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|slicingTask
argument_list|,
name|forSliced
operator|.
name|getParentTask
argument_list|()
argument_list|)
expr_stmt|;
name|extraForSliceAssertions
argument_list|(
name|original
argument_list|,
name|forSliced
argument_list|)
expr_stmt|;
block|}
DECL|method|newRequest
specifier|protected
specifier|abstract
name|R
name|newRequest
parameter_list|()
function_decl|;
DECL|method|extraRandomizationForSlice
specifier|protected
specifier|abstract
name|void
name|extraRandomizationForSlice
parameter_list|(
name|R
name|original
parameter_list|)
function_decl|;
DECL|method|extraForSliceAssertions
specifier|protected
specifier|abstract
name|void
name|extraForSliceAssertions
parameter_list|(
name|R
name|original
parameter_list|,
name|R
name|forSliced
parameter_list|)
function_decl|;
block|}
end_class

end_unit

