begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.engine
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|segments
operator|.
name|IndexSegments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|segments
operator|.
name|IndexShardSegments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|segments
operator|.
name|IndicesSegmentResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|segments
operator|.
name|ShardSegments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|InternalEngineIT
specifier|public
class|class
name|InternalEngineIT
extends|extends
name|ElasticsearchIntegrationTest
block|{
annotation|@
name|Test
DECL|method|testSetIndexCompoundOnFlush
specifier|public
name|void
name|testSetIndexCompoundOnFlush
parameter_list|()
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_shards"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|assertTotalCompoundSegments
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|EngineConfig
operator|.
name|INDEX_COMPOUND_ON_FLUSH
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|assertTotalCompoundSegments
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|EngineConfig
operator|.
name|INDEX_COMPOUND_ON_FLUSH
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|assertTotalCompoundSegments
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTotalCompoundSegments
specifier|private
name|void
name|assertTotalCompoundSegments
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|t
parameter_list|,
name|String
name|index
parameter_list|)
block|{
name|IndicesSegmentResponse
name|indicesSegmentResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareSegments
argument_list|(
name|index
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"indices segments response should contain indices"
argument_list|,
name|indicesSegmentResponse
operator|.
name|getIndices
argument_list|()
argument_list|)
expr_stmt|;
name|IndexSegments
name|indexSegments
init|=
name|indicesSegmentResponse
operator|.
name|getIndices
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|indexSegments
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|indexSegments
operator|.
name|getShards
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|IndexShardSegments
argument_list|>
name|values
init|=
name|indexSegments
operator|.
name|getShards
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
name|int
name|compounds
init|=
literal|0
decl_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|IndexShardSegments
name|indexShardSegments
range|:
name|values
control|)
block|{
for|for
control|(
name|ShardSegments
name|s
range|:
name|indexShardSegments
control|)
block|{
for|for
control|(
name|Segment
name|segment
range|:
name|s
control|)
block|{
if|if
condition|(
name|segment
operator|.
name|isSearch
argument_list|()
operator|&&
name|segment
operator|.
name|getNumDocs
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|segment
operator|.
name|isCompound
argument_list|()
condition|)
block|{
name|compounds
operator|++
expr_stmt|;
block|}
name|total
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertThat
argument_list|(
name|compounds
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|total
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|segments
specifier|private
name|Set
argument_list|<
name|Segment
argument_list|>
name|segments
parameter_list|(
name|IndexSegments
name|segments
parameter_list|)
block|{
name|Set
argument_list|<
name|Segment
argument_list|>
name|segmentSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexShardSegments
name|s
range|:
name|segments
control|)
block|{
for|for
control|(
name|ShardSegments
name|shardSegments
range|:
name|s
control|)
block|{
name|segmentSet
operator|.
name|addAll
argument_list|(
name|shardSegments
operator|.
name|getSegments
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|segmentSet
return|;
block|}
block|}
end_class

end_unit

