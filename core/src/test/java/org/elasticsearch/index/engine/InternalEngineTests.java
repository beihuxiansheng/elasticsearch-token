begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.engine
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LogEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|AbstractAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|filter
operator|.
name|RegexFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|KeepOnlyLastCommitDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LiveIndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LogByteSizeMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LogDocMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NoMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SnapshotDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TieredMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ReferenceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TotalHitCountCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockDirectoryWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|TransportActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalyzerScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|IndexAnalyzers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NamedAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|CodecService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
operator|.
name|Searcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ContentPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapperForType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapper
operator|.
name|BuilderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MetadataFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParsedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|RootObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|SourceFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|DocsStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexSearcherWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|TranslogRecoveryPerformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|DirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|DirectoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|mapper
operator|.
name|MapperRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|DummyShardLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|IndexSettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|REPLICA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|everyItem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasKey
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|InternalEngineTests
specifier|public
class|class
name|InternalEngineTests
extends|extends
name|ESTestCase
block|{
DECL|field|shardId
specifier|protected
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|INDEX_SETTINGS
specifier|private
specifier|static
specifier|final
name|IndexSettings
name|INDEX_SETTINGS
init|=
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
literal|"index"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
DECL|field|threadPool
specifier|protected
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|store
specifier|private
name|Store
name|store
decl_stmt|;
DECL|field|storeReplica
specifier|private
name|Store
name|storeReplica
decl_stmt|;
DECL|field|engine
specifier|protected
name|InternalEngine
name|engine
decl_stmt|;
DECL|field|replicaEngine
specifier|protected
name|InternalEngine
name|replicaEngine
decl_stmt|;
DECL|field|defaultSettings
specifier|private
name|IndexSettings
name|defaultSettings
decl_stmt|;
DECL|field|codecName
specifier|private
name|String
name|codecName
decl_stmt|;
DECL|field|primaryTranslogDir
specifier|private
name|Path
name|primaryTranslogDir
decl_stmt|;
DECL|field|replicaTranslogDir
specifier|private
name|Path
name|replicaTranslogDir
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|CodecService
name|codecService
init|=
operator|new
name|CodecService
argument_list|(
literal|null
argument_list|,
name|logger
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|Codec
operator|.
name|getDefault
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|asList
argument_list|(
name|codecService
operator|.
name|availableCodecs
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// some codecs are read only so we only take the ones that we have in the service and randomly
comment|// selected by lucene test case.
name|codecName
operator|=
name|name
expr_stmt|;
block|}
else|else
block|{
name|codecName
operator|=
literal|"default"
expr_stmt|;
block|}
name|defaultSettings
operator|=
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
literal|"test"
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|INDEX_GC_DELETES_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"1h"
argument_list|)
comment|// make sure this doesn't kick in on us
operator|.
name|put
argument_list|(
name|EngineConfig
operator|.
name|INDEX_CODEC_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|codecName
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|MAX_REFRESH_LISTENERS_PER_SHARD
operator|.
name|getKey
argument_list|()
argument_list|,
name|between
argument_list|(
literal|10
argument_list|,
literal|10
operator|*
name|IndexSettings
operator|.
name|MAX_REFRESH_LISTENERS_PER_SHARD
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO randomize more settings
name|threadPool
operator|=
operator|new
name|TestThreadPool
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|=
name|createStore
argument_list|()
expr_stmt|;
name|storeReplica
operator|=
name|createStore
argument_list|()
expr_stmt|;
name|Lucene
operator|.
name|cleanLuceneIndex
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|Lucene
operator|.
name|cleanLuceneIndex
argument_list|(
name|storeReplica
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|primaryTranslogDir
operator|=
name|createTempDir
argument_list|(
literal|"translog-primary"
argument_list|)
expr_stmt|;
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|primaryTranslogDir
argument_list|)
expr_stmt|;
name|LiveIndexWriterConfig
name|currentIndexWriterConfig
init|=
name|engine
operator|.
name|getCurrentIndexWriterConfig
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|config
argument_list|()
operator|.
name|getCodec
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|codecService
operator|.
name|codec
argument_list|(
name|codecName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentIndexWriterConfig
operator|.
name|getCodec
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|codecService
operator|.
name|codec
argument_list|(
name|codecName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|engine
operator|.
name|config
argument_list|()
operator|.
name|setEnableGcDeletes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|replicaTranslogDir
operator|=
name|createTempDir
argument_list|(
literal|"translog-replica"
argument_list|)
expr_stmt|;
name|replicaEngine
operator|=
name|createEngine
argument_list|(
name|storeReplica
argument_list|,
name|replicaTranslogDir
argument_list|)
expr_stmt|;
name|currentIndexWriterConfig
operator|=
name|replicaEngine
operator|.
name|getCurrentIndexWriterConfig
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|replicaEngine
operator|.
name|config
argument_list|()
operator|.
name|getCodec
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|codecService
operator|.
name|codec
argument_list|(
name|codecName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentIndexWriterConfig
operator|.
name|getCodec
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|codecService
operator|.
name|codec
argument_list|(
name|codecName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|engine
operator|.
name|config
argument_list|()
operator|.
name|setEnableGcDeletes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|copy
specifier|public
name|EngineConfig
name|copy
parameter_list|(
name|EngineConfig
name|config
parameter_list|,
name|EngineConfig
operator|.
name|OpenMode
name|openMode
parameter_list|)
block|{
return|return
operator|new
name|EngineConfig
argument_list|(
name|openMode
argument_list|,
name|config
operator|.
name|getShardId
argument_list|()
argument_list|,
name|config
operator|.
name|getThreadPool
argument_list|()
argument_list|,
name|config
operator|.
name|getIndexSettings
argument_list|()
argument_list|,
name|config
operator|.
name|getWarmer
argument_list|()
argument_list|,
name|config
operator|.
name|getStore
argument_list|()
argument_list|,
name|config
operator|.
name|getDeletionPolicy
argument_list|()
argument_list|,
name|config
operator|.
name|getMergePolicy
argument_list|()
argument_list|,
name|config
operator|.
name|getAnalyzer
argument_list|()
argument_list|,
name|config
operator|.
name|getSimilarity
argument_list|()
argument_list|,
operator|new
name|CodecService
argument_list|(
literal|null
argument_list|,
name|logger
argument_list|)
argument_list|,
name|config
operator|.
name|getEventListener
argument_list|()
argument_list|,
name|config
operator|.
name|getTranslogRecoveryPerformer
argument_list|()
argument_list|,
name|config
operator|.
name|getQueryCache
argument_list|()
argument_list|,
name|config
operator|.
name|getQueryCachingPolicy
argument_list|()
argument_list|,
name|config
operator|.
name|getTranslogConfig
argument_list|()
argument_list|,
name|config
operator|.
name|getFlushMergesAfter
argument_list|()
argument_list|,
name|config
operator|.
name|getRefreshListeners
argument_list|()
argument_list|,
name|config
operator|.
name|getMaxUnsafeAutoIdTimestamp
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|replicaEngine
argument_list|,
name|storeReplica
argument_list|,
name|engine
argument_list|,
name|store
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocumentWithTextField
specifier|private
name|Document
name|testDocumentWithTextField
parameter_list|()
block|{
name|Document
name|document
init|=
name|testDocument
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|document
return|;
block|}
DECL|method|testDocument
specifier|private
name|Document
name|testDocument
parameter_list|()
block|{
return|return
operator|new
name|Document
argument_list|()
return|;
block|}
DECL|method|testParsedDocument
specifier|private
name|ParsedDocument
name|testParsedDocument
parameter_list|(
name|String
name|uid
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|routing
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|long
name|ttl
parameter_list|,
name|Document
name|document
parameter_list|,
name|BytesReference
name|source
parameter_list|,
name|Mapping
name|mappingUpdate
parameter_list|)
block|{
name|Field
name|uidField
init|=
operator|new
name|Field
argument_list|(
literal|"_uid"
argument_list|,
name|uid
argument_list|,
name|UidFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
decl_stmt|;
name|Field
name|versionField
init|=
operator|new
name|NumericDocValuesField
argument_list|(
literal|"_version"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|uidField
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|versionField
argument_list|)
expr_stmt|;
return|return
operator|new
name|ParsedDocument
argument_list|(
name|versionField
argument_list|,
name|id
argument_list|,
name|type
argument_list|,
name|routing
argument_list|,
name|timestamp
argument_list|,
name|ttl
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|document
argument_list|)
argument_list|,
name|source
argument_list|,
name|mappingUpdate
argument_list|)
return|;
block|}
DECL|method|createStore
specifier|protected
name|Store
name|createStore
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|createStore
argument_list|(
name|newDirectory
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createStore
specifier|protected
name|Store
name|createStore
parameter_list|(
specifier|final
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DirectoryService
name|directoryService
init|=
operator|new
name|DirectoryService
argument_list|(
name|shardId
argument_list|,
name|INDEX_SETTINGS
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Directory
name|newDirectory
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|directory
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|throttleTimeInNanos
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|INDEX_SETTINGS
argument_list|,
name|directoryService
argument_list|,
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createTranslog
specifier|protected
name|Translog
name|createTranslog
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|createTranslog
argument_list|(
name|primaryTranslogDir
argument_list|)
return|;
block|}
DECL|method|createTranslog
specifier|protected
name|Translog
name|createTranslog
parameter_list|(
name|Path
name|translogPath
parameter_list|)
throws|throws
name|IOException
block|{
name|TranslogConfig
name|translogConfig
init|=
operator|new
name|TranslogConfig
argument_list|(
name|shardId
argument_list|,
name|translogPath
argument_list|,
name|INDEX_SETTINGS
argument_list|,
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|)
decl_stmt|;
return|return
operator|new
name|Translog
argument_list|(
name|translogConfig
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createSnapshotDeletionPolicy
specifier|protected
name|SnapshotDeletionPolicy
name|createSnapshotDeletionPolicy
parameter_list|()
block|{
return|return
operator|new
name|SnapshotDeletionPolicy
argument_list|(
operator|new
name|KeepOnlyLastCommitDeletionPolicy
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createEngine
specifier|protected
name|InternalEngine
name|createEngine
parameter_list|(
name|Store
name|store
parameter_list|,
name|Path
name|translogPath
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createEngine
argument_list|(
name|defaultSettings
argument_list|,
name|store
argument_list|,
name|translogPath
argument_list|,
name|newMergePolicy
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createEngine
specifier|protected
name|InternalEngine
name|createEngine
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|Store
name|store
parameter_list|,
name|Path
name|translogPath
parameter_list|,
name|MergePolicy
name|mergePolicy
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createEngine
argument_list|(
name|indexSettings
argument_list|,
name|store
argument_list|,
name|translogPath
argument_list|,
name|mergePolicy
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createEngine
specifier|protected
name|InternalEngine
name|createEngine
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|Store
name|store
parameter_list|,
name|Path
name|translogPath
parameter_list|,
name|MergePolicy
name|mergePolicy
parameter_list|,
name|Supplier
argument_list|<
name|IndexWriter
argument_list|>
name|indexWriterSupplier
parameter_list|)
throws|throws
name|IOException
block|{
name|EngineConfig
name|config
init|=
name|config
argument_list|(
name|indexSettings
argument_list|,
name|store
argument_list|,
name|translogPath
argument_list|,
name|mergePolicy
argument_list|,
name|IndexRequest
operator|.
name|UNSET_AUTO_GENERATED_TIMESTAMP
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|InternalEngine
name|internalEngine
init|=
operator|new
name|InternalEngine
argument_list|(
name|config
argument_list|)
block|{
annotation|@
name|Override
name|IndexWriter
name|createWriter
parameter_list|(
name|boolean
name|create
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|indexWriterSupplier
operator|!=
literal|null
operator|)
condition|?
name|indexWriterSupplier
operator|.
name|get
argument_list|()
else|:
name|super
operator|.
name|createWriter
argument_list|(
name|create
argument_list|)
return|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getOpenMode
argument_list|()
operator|==
name|EngineConfig
operator|.
name|OpenMode
operator|.
name|OPEN_INDEX_AND_TRANSLOG
condition|)
block|{
name|internalEngine
operator|.
name|recoverFromTranslog
argument_list|()
expr_stmt|;
block|}
return|return
name|internalEngine
return|;
block|}
DECL|method|config
specifier|public
name|EngineConfig
name|config
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|Store
name|store
parameter_list|,
name|Path
name|translogPath
parameter_list|,
name|MergePolicy
name|mergePolicy
parameter_list|,
name|long
name|maxUnsafeAutoIdTimestamp
parameter_list|,
name|ReferenceManager
operator|.
name|RefreshListener
name|refreshListener
parameter_list|)
block|{
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|TranslogConfig
name|translogConfig
init|=
operator|new
name|TranslogConfig
argument_list|(
name|shardId
argument_list|,
name|translogPath
argument_list|,
name|indexSettings
argument_list|,
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|)
decl_stmt|;
specifier|final
name|EngineConfig
operator|.
name|OpenMode
name|openMode
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Lucene
operator|.
name|indexExists
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|openMode
operator|=
name|EngineConfig
operator|.
name|OpenMode
operator|.
name|CREATE_INDEX_AND_TRANSLOG
expr_stmt|;
block|}
else|else
block|{
name|openMode
operator|=
name|EngineConfig
operator|.
name|OpenMode
operator|.
name|OPEN_INDEX_AND_TRANSLOG
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"can't find index?"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Engine
operator|.
name|EventListener
name|listener
init|=
operator|new
name|Engine
operator|.
name|EventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailedEngine
parameter_list|(
name|String
name|reason
parameter_list|,
annotation|@
name|Nullable
name|Exception
name|e
parameter_list|)
block|{
comment|// we don't need to notify anybody in this test
block|}
block|}
decl_stmt|;
name|EngineConfig
name|config
init|=
operator|new
name|EngineConfig
argument_list|(
name|openMode
argument_list|,
name|shardId
argument_list|,
name|threadPool
argument_list|,
name|indexSettings
argument_list|,
literal|null
argument_list|,
name|store
argument_list|,
name|createSnapshotDeletionPolicy
argument_list|()
argument_list|,
name|mergePolicy
argument_list|,
name|iwc
operator|.
name|getAnalyzer
argument_list|()
argument_list|,
name|iwc
operator|.
name|getSimilarity
argument_list|()
argument_list|,
operator|new
name|CodecService
argument_list|(
literal|null
argument_list|,
name|logger
argument_list|)
argument_list|,
name|listener
argument_list|,
operator|new
name|TranslogHandler
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|,
name|logger
argument_list|)
argument_list|,
name|IndexSearcher
operator|.
name|getDefaultQueryCache
argument_list|()
argument_list|,
name|IndexSearcher
operator|.
name|getDefaultQueryCachingPolicy
argument_list|()
argument_list|,
name|translogConfig
argument_list|,
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|,
name|refreshListener
argument_list|,
name|maxUnsafeAutoIdTimestamp
argument_list|)
decl_stmt|;
return|return
name|config
return|;
block|}
DECL|field|B_1
specifier|protected
specifier|static
specifier|final
name|BytesReference
name|B_1
init|=
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
DECL|field|B_2
specifier|protected
specifier|static
specifier|final
name|BytesReference
name|B_2
init|=
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
decl_stmt|;
DECL|field|B_3
specifier|protected
specifier|static
specifier|final
name|BytesReference
name|B_3
init|=
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|3
block|}
argument_list|)
decl_stmt|;
DECL|method|testSegments
specifier|public
name|void
name|testSegments
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|()
init|;
name|Engine
name|engine
operator|=
name|createEngine
argument_list|(
name|defaultSettings
argument_list|,
name|store
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Segment
argument_list|>
name|segments
init|=
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|(
literal|false
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|(
literal|false
argument_list|)
operator|.
name|getMemoryInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
comment|// create two docs and refresh
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|first
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|firstResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|first
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc2
init|=
name|testParsedDocument
argument_list|(
literal|"2"
argument_list|,
literal|"2"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|second
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc2
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|secondResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|second
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|secondResult
operator|.
name|getTranslogLocation
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|firstResult
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|SegmentsStats
name|stats
init|=
name|engine
operator|.
name|segmentsStats
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTermsMemoryInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getStoredFieldsMemoryInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTermVectorsMemoryInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getNormsMemoryInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getDocValuesMemoryInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|ramTree
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|(
literal|false
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc3
init|=
name|testParsedDocument
argument_list|(
literal|"3"
argument_list|,
literal|"3"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_3
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|doc3
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|(
literal|false
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|(
literal|false
argument_list|)
operator|.
name|getTermsMemoryInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|stats
operator|.
name|getTermsMemoryInBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|(
literal|false
argument_list|)
operator|.
name|getStoredFieldsMemoryInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|stats
operator|.
name|getStoredFieldsMemoryInBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|(
literal|false
argument_list|)
operator|.
name|getTermVectorsMemoryInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|(
literal|false
argument_list|)
operator|.
name|getNormsMemoryInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|stats
operator|.
name|getNormsMemoryInBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|(
literal|false
argument_list|)
operator|.
name|getDocValuesMemoryInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|stats
operator|.
name|getDocValuesMemoryInBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGeneration
argument_list|()
operator|<
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|(
literal|false
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGeneration
argument_list|()
operator|<
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|onSettingsChanged
argument_list|()
expr_stmt|;
name|ParsedDocument
name|doc4
init|=
name|testParsedDocument
argument_list|(
literal|"4"
argument_list|,
literal|"4"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_3
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|doc4
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|(
literal|false
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGeneration
argument_list|()
operator|<
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testVerboseSegments
specifier|public
name|void
name|testVerboseSegments
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|()
init|;
name|Engine
name|engine
operator|=
name|createEngine
argument_list|(
name|defaultSettings
argument_list|,
name|store
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Segment
argument_list|>
name|segments
init|=
name|engine
operator|.
name|segments
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|ramTree
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc2
init|=
name|testParsedDocument
argument_list|(
literal|"2"
argument_list|,
literal|"2"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc2
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc3
init|=
name|testParsedDocument
argument_list|(
literal|"3"
argument_list|,
literal|"3"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_3
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|doc3
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|ramTree
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|ramTree
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|ramTree
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSegmentsWithMergeFlag
specifier|public
name|void
name|testSegmentsWithMergeFlag
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|()
init|;
name|Engine
name|engine
operator|=
name|createEngine
argument_list|(
name|defaultSettings
argument_list|,
name|store
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
operator|new
name|TieredMergePolicy
argument_list|()
argument_list|)
init|)
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Segment
argument_list|>
name|segments
init|=
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|segments
control|)
block|{
name|assertThat
argument_list|(
name|segment
operator|.
name|getMergeId
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|segments
control|)
block|{
name|assertThat
argument_list|(
name|segment
operator|.
name|getMergeId
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
specifier|final
name|long
name|gen1
init|=
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
comment|// now, optimize and wait for merges, see that we have no merge flag
name|engine
operator|.
name|forceMerge
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
control|)
block|{
name|assertThat
argument_list|(
name|segment
operator|.
name|getMergeId
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// we could have multiple underlying merges, so the generation may increase more than once
name|assertTrue
argument_list|(
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
operator|.
name|getGeneration
argument_list|()
operator|>
name|gen1
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|flush
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|long
name|gen2
init|=
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
name|engine
operator|.
name|forceMerge
argument_list|(
name|flush
argument_list|)
expr_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
control|)
block|{
name|assertThat
argument_list|(
name|segment
operator|.
name|getMergeId
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flush
condition|)
block|{
comment|// we should have had just 1 merge, so last generation should be exact
name|assertEquals
argument_list|(
name|gen2
argument_list|,
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
operator|.
name|getLastGeneration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSegmentsStatsIncludingFileSizes
specifier|public
name|void
name|testSegmentsStatsIncludingFileSizes
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|()
init|;
name|Engine
name|engine
operator|=
name|createEngine
argument_list|(
name|defaultSettings
argument_list|,
name|store
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|(
literal|true
argument_list|)
operator|.
name|getFileSizes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|SegmentsStats
name|stats
init|=
name|engine
operator|.
name|segmentsStats
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getFileSizes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
parameter_list|()
lambda|->
name|stats
operator|.
name|getFileSizes
argument_list|()
operator|.
name|valuesIt
argument_list|()
argument_list|,
name|everyItem
argument_list|(
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|firstEntry
init|=
name|stats
operator|.
name|getFileSizes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|ParsedDocument
name|doc2
init|=
name|testParsedDocument
argument_list|(
literal|"2"
argument_list|,
literal|"2"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc2
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|(
literal|true
argument_list|)
operator|.
name|getFileSizes
argument_list|()
operator|.
name|get
argument_list|(
name|firstEntry
operator|.
name|key
argument_list|)
argument_list|,
name|greaterThan
argument_list|(
name|firstEntry
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCommitStats
specifier|public
name|void
name|testCommitStats
parameter_list|()
block|{
name|Document
name|document
init|=
name|testDocumentWithTextField
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|SourceFieldMapper
operator|.
name|NAME
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|B_1
argument_list|)
argument_list|,
name|SourceFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|document
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|CommitStats
name|stats1
init|=
name|engine
operator|.
name|commitStats
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|stats1
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats1
operator|.
name|getId
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats1
operator|.
name|getUserData
argument_list|()
argument_list|,
name|hasKey
argument_list|(
name|Translog
operator|.
name|TRANSLOG_GENERATION_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CommitStats
name|stats2
init|=
name|engine
operator|.
name|commitStats
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|stats2
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|stats1
operator|.
name|getGeneration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats2
operator|.
name|getId
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats2
operator|.
name|getId
argument_list|()
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|stats1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats2
operator|.
name|getUserData
argument_list|()
argument_list|,
name|hasKey
argument_list|(
name|Translog
operator|.
name|TRANSLOG_GENERATION_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats2
operator|.
name|getUserData
argument_list|()
argument_list|,
name|hasKey
argument_list|(
name|Translog
operator|.
name|TRANSLOG_UUID_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats2
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_GENERATION_KEY
argument_list|)
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|stats1
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_GENERATION_KEY
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats2
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_UUID_KEY
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|stats1
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_UUID_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexSearcherWrapper
specifier|public
name|void
name|testIndexSearcherWrapper
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|IndexSearcherWrapper
name|wrapper
init|=
operator|new
name|IndexSearcherWrapper
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DirectoryReader
name|wrap
parameter_list|(
name|DirectoryReader
name|reader
parameter_list|)
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|reader
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexSearcher
name|wrap
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|EngineException
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|searcher
return|;
block|}
block|}
decl_stmt|;
name|Store
name|store
init|=
name|createStore
argument_list|()
decl_stmt|;
name|Path
name|translog
init|=
name|createTempDir
argument_list|(
literal|"translog-test"
argument_list|)
decl_stmt|;
name|InternalEngine
name|engine
init|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|translog
argument_list|)
decl_stmt|;
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
name|engine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|copy
argument_list|(
name|engine
operator|.
name|config
argument_list|()
argument_list|,
name|EngineConfig
operator|.
name|OpenMode
operator|.
name|OPEN_INDEX_AND_TRANSLOG
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|engine
operator|.
name|isRecovering
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|recoverFromTranslog
argument_list|()
expr_stmt|;
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|wrapper
operator|.
name|wrap
argument_list|(
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|counter
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
DECL|method|testFlushIsDisabledDuringTranslogRecovery
specifier|public
name|void
name|testFlushIsDisabledDuringTranslogRecovery
parameter_list|()
throws|throws
name|IOException
block|{
name|assertFalse
argument_list|(
name|engine
operator|.
name|isRecovering
argument_list|()
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
name|engine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|copy
argument_list|(
name|engine
operator|.
name|config
argument_list|()
argument_list|,
name|EngineConfig
operator|.
name|OpenMode
operator|.
name|OPEN_INDEX_AND_TRANSLOG
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|engine
operator|.
name|flush
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|engine
operator|.
name|isRecovering
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|recoverFromTranslog
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|isRecovering
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testParsedDocument
argument_list|(
literal|"2"
argument_list|,
literal|"2"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|testTranslogMultipleOperationsSameDocument
specifier|public
name|void
name|testTranslogMultipleOperationsSameDocument
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|ops
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|32
argument_list|)
decl_stmt|;
name|Engine
name|initialEngine
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Engine
operator|.
name|Operation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|initialEngine
operator|=
name|engine
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ops
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
specifier|final
name|Engine
operator|.
name|Index
name|operation
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"test#1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|i
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|operations
operator|.
name|add
argument_list|(
name|operation
argument_list|)
expr_stmt|;
name|initialEngine
operator|.
name|index
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Engine
operator|.
name|Delete
name|operation
init|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"test#1"
argument_list|)
argument_list|,
name|i
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
decl_stmt|;
name|operations
operator|.
name|add
argument_list|(
name|operation
argument_list|)
expr_stmt|;
name|initialEngine
operator|.
name|delete
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|engine
argument_list|)
expr_stmt|;
block|}
name|Engine
name|recoveringEngine
init|=
literal|null
decl_stmt|;
try|try
block|{
name|recoveringEngine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|copy
argument_list|(
name|engine
operator|.
name|config
argument_list|()
argument_list|,
name|EngineConfig
operator|.
name|OpenMode
operator|.
name|OPEN_INDEX_AND_TRANSLOG
argument_list|)
argument_list|)
expr_stmt|;
name|recoveringEngine
operator|.
name|recoverFromTranslog
argument_list|()
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|recoveringEngine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
specifier|final
name|TotalHitCountCollector
name|collector
init|=
operator|new
name|TotalHitCountCollector
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collector
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|operations
operator|.
name|get
argument_list|(
name|operations
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|instanceof
name|Engine
operator|.
name|Delete
condition|?
literal|0
else|:
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|recoveringEngine
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTranslogRecoveryDoesNotReplayIntoTranslog
specifier|public
name|void
name|testTranslogRecoveryDoesNotReplayIntoTranslog
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|docs
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|32
argument_list|)
decl_stmt|;
name|Engine
name|initialEngine
init|=
literal|null
decl_stmt|;
try|try
block|{
name|initialEngine
operator|=
name|engine
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|id
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|id
argument_list|,
name|id
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|initialEngine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
name|id
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|initialEngine
argument_list|)
expr_stmt|;
block|}
name|Engine
name|recoveringEngine
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|AtomicBoolean
name|flushed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|recoveringEngine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|copy
argument_list|(
name|engine
operator|.
name|config
argument_list|()
argument_list|,
name|EngineConfig
operator|.
name|OpenMode
operator|.
name|OPEN_INDEX_AND_TRANSLOG
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CommitId
name|flush
parameter_list|(
name|boolean
name|force
parameter_list|,
name|boolean
name|waitIfOngoing
parameter_list|)
throws|throws
name|EngineException
block|{
name|assertThat
argument_list|(
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|docs
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|CommitId
name|commitId
init|=
name|super
operator|.
name|flush
argument_list|(
name|force
argument_list|,
name|waitIfOngoing
argument_list|)
decl_stmt|;
name|flushed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|commitId
return|;
block|}
block|}
expr_stmt|;
name|assertThat
argument_list|(
name|recoveringEngine
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|docs
argument_list|)
argument_list|)
expr_stmt|;
name|recoveringEngine
operator|.
name|recoverFromTranslog
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|flushed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|recoveringEngine
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testConcurrentGetAndFlush
specifier|public
name|void
name|testConcurrentGetAndFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Engine
operator|.
name|GetResult
argument_list|>
name|latestGetResult
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|latestGetResult
operator|.
name|set
argument_list|(
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|flushFinished
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Thread
name|getThread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|BrokenBarrierException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
while|while
condition|(
name|flushFinished
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|)
block|{
name|Engine
operator|.
name|GetResult
name|previousGetResult
init|=
name|latestGetResult
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|previousGetResult
operator|!=
literal|null
condition|)
block|{
name|previousGetResult
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|latestGetResult
operator|.
name|set
argument_list|(
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|latestGetResult
operator|.
name|get
argument_list|()
operator|.
name|exists
argument_list|()
operator|==
literal|false
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
decl_stmt|;
name|getThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|flushFinished
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|getThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|latestGetResult
operator|.
name|get
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|latestGetResult
operator|.
name|get
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|testSimpleOperations
specifier|public
name|void
name|testSimpleOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|Engine
operator|.
name|Searcher
name|searchResult
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// create a document
name|Document
name|document
init|=
name|testDocumentWithTextField
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|SourceFieldMapper
operator|.
name|NAME
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|B_1
argument_list|)
argument_list|,
name|SourceFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|document
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not there...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// but, not there non realtime
name|Engine
operator|.
name|GetResult
name|getResult
init|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|false
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// but, we can still get it (in realtime)
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|docIdAndVersion
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// refresh and it should be there
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// now its there...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// also in non realtime
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|false
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|docIdAndVersion
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// now do an update
name|document
operator|=
name|testDocument
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|SourceFieldMapper
operator|.
name|NAME
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|B_2
argument_list|)
argument_list|,
name|SourceFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|document
argument_list|,
name|B_2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not updated yet...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// but, we can still get it (in realtime)
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|docIdAndVersion
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// refresh and it should be updated
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// now delete
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not deleted yet
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// but, get should not see it (in realtime)
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// refresh and it should be deleted
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// add it back
name|document
operator|=
name|testDocumentWithTextField
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|SourceFieldMapper
operator|.
name|NAME
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|B_1
argument_list|)
argument_list|,
name|SourceFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|document
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_DELETED
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not there...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// refresh and it should be there
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// now its there...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// now flush
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// and, verify get (in real time)
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|docIdAndVersion
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// make sure we can still work with the engine
comment|// now do an update
name|document
operator|=
name|testDocument
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|document
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not updated yet...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// refresh and it should be updated
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSearchResultRelease
specifier|public
name|void
name|testSearchResultRelease
parameter_list|()
throws|throws
name|Exception
block|{
name|Engine
operator|.
name|Searcher
name|searchResult
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// create a document
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not there...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// refresh and it should be there
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// now its there...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// don't release the search result yet...
comment|// delete, refresh and do a new search, it should not be there
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Searcher
name|updateSearchResult
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|updateSearchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|updateSearchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// the non release search result should not see the deleted yet...
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSyncedFlush
specifier|public
name|void
name|testSyncedFlush
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|()
init|;
name|Engine
name|engine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|config
argument_list|(
name|defaultSettings
argument_list|,
name|store
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
operator|new
name|LogByteSizeMergePolicy
argument_list|()
argument_list|,
name|IndexRequest
operator|.
name|UNSET_AUTO_GENERATED_TIMESTAMP
argument_list|,
literal|null
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|String
name|syncId
init|=
name|randomUnicodeOfCodepointLengthBetween
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|CommitId
name|commitID
init|=
name|engine
operator|.
name|flush
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|commitID
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Engine
operator|.
name|CommitId
argument_list|(
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|wrongBytes
init|=
name|Base64
operator|.
name|getDecoder
argument_list|()
operator|.
name|decode
argument_list|(
name|commitID
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|wrongBytes
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
operator|~
name|wrongBytes
index|[
literal|0
index|]
expr_stmt|;
name|Engine
operator|.
name|CommitId
name|wrongId
init|=
operator|new
name|Engine
operator|.
name|CommitId
argument_list|(
name|wrongBytes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"should fail to sync flush with wrong id (but no docs)"
argument_list|,
name|engine
operator|.
name|syncFlush
argument_list|(
name|syncId
operator|+
literal|"1"
argument_list|,
name|wrongId
argument_list|)
argument_list|,
name|Engine
operator|.
name|SyncedFlushResult
operator|.
name|COMMIT_MISMATCH
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should fail to sync flush with right id but pending doc"
argument_list|,
name|engine
operator|.
name|syncFlush
argument_list|(
name|syncId
operator|+
literal|"2"
argument_list|,
name|commitID
argument_list|)
argument_list|,
name|Engine
operator|.
name|SyncedFlushResult
operator|.
name|PENDING_OPERATIONS
argument_list|)
expr_stmt|;
name|commitID
operator|=
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should succeed to flush commit with right id and no pending doc"
argument_list|,
name|engine
operator|.
name|syncFlush
argument_list|(
name|syncId
argument_list|,
name|commitID
argument_list|)
argument_list|,
name|Engine
operator|.
name|SyncedFlushResult
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|getLastCommittedSegmentInfos
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRenewSyncFlush
specifier|public
name|void
name|testRenewSyncFlush
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|iters
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|// run this a couple of times to get some coverage
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|()
init|;
name|InternalEngine
name|engine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|config
argument_list|(
name|defaultSettings
argument_list|,
name|store
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
operator|new
name|LogDocMergePolicy
argument_list|()
argument_list|,
name|IndexRequest
operator|.
name|UNSET_AUTO_GENERATED_TIMESTAMP
argument_list|,
literal|null
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|String
name|syncId
init|=
name|randomUnicodeOfCodepointLengthBetween
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|doc1
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|doc1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|getLastWriteNanos
argument_list|()
argument_list|,
name|doc1
operator|.
name|startTime
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Engine
operator|.
name|Index
name|doc2
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|doc2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|getLastWriteNanos
argument_list|()
argument_list|,
name|doc2
operator|.
name|startTime
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|forceMergeFlushes
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|forceMergeFlushes
condition|)
block|{
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|engine
operator|.
name|engineConfig
operator|.
name|getFlushMergesAfter
argument_list|()
operator|.
name|nanos
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Engine
operator|.
name|CommitId
name|commitID
init|=
name|engine
operator|.
name|flush
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"should succeed to flush commit with right id and no pending doc"
argument_list|,
name|engine
operator|.
name|syncFlush
argument_list|(
name|syncId
argument_list|,
name|commitID
argument_list|)
argument_list|,
name|Engine
operator|.
name|SyncedFlushResult
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|forceMerge
argument_list|(
name|forceMergeFlushes
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|forceMergeFlushes
operator|==
literal|false
condition|)
block|{
name|engine
operator|.
name|refresh
argument_list|(
literal|"make all segments visible"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|getLastCommittedSegmentInfos
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|engine
operator|.
name|tryRenewSyncCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|getLastCommittedSegmentInfos
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|Engine
operator|.
name|Index
name|doc4
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|doc4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|getLastWriteNanos
argument_list|()
argument_list|,
name|doc4
operator|.
name|startTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Engine
operator|.
name|Delete
name|delete
init|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
name|doc1
operator|.
name|type
argument_list|()
argument_list|,
name|doc1
operator|.
name|id
argument_list|()
argument_list|,
name|doc1
operator|.
name|uid
argument_list|()
argument_list|)
decl_stmt|;
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|getLastWriteNanos
argument_list|()
argument_list|,
name|delete
operator|.
name|startTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|engine
operator|.
name|tryRenewSyncCommit
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// we might hit a concurrent flush from a finishing merge here - just wait if ongoing...
name|assertNull
argument_list|(
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|engine
operator|.
name|getLastCommittedSegmentInfos
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSycnedFlushSurvivesEngineRestart
specifier|public
name|void
name|testSycnedFlushSurvivesEngineRestart
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|syncId
init|=
name|randomUnicodeOfCodepointLengthBetween
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Engine
operator|.
name|CommitId
name|commitID
init|=
name|engine
operator|.
name|flush
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"should succeed to flush commit with right id and no pending doc"
argument_list|,
name|engine
operator|.
name|syncFlush
argument_list|(
name|syncId
argument_list|,
name|commitID
argument_list|)
argument_list|,
name|Engine
operator|.
name|SyncedFlushResult
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|getLastCommittedSegmentInfos
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
name|EngineConfig
name|config
init|=
name|engine
operator|.
name|config
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|engine
operator|.
name|flushAndClose
argument_list|()
expr_stmt|;
block|}
name|engine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|copy
argument_list|(
name|config
argument_list|,
name|randomFrom
argument_list|(
name|EngineConfig
operator|.
name|OpenMode
operator|.
name|OPEN_INDEX_AND_TRANSLOG
argument_list|,
name|EngineConfig
operator|.
name|OpenMode
operator|.
name|OPEN_INDEX_CREATE_TRANSLOG
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|.
name|config
argument_list|()
operator|.
name|getOpenMode
argument_list|()
operator|==
name|EngineConfig
operator|.
name|OpenMode
operator|.
name|OPEN_INDEX_AND_TRANSLOG
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|engine
operator|.
name|recoverFromTranslog
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|engine
operator|.
name|config
argument_list|()
operator|.
name|getOpenMode
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|engine
operator|.
name|getLastCommittedSegmentInfos
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
block|}
DECL|method|testSycnedFlushVanishesOnReplay
specifier|public
name|void
name|testSycnedFlushVanishesOnReplay
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|syncId
init|=
name|randomUnicodeOfCodepointLengthBetween
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Engine
operator|.
name|CommitId
name|commitID
init|=
name|engine
operator|.
name|flush
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"should succeed to flush commit with right id and no pending doc"
argument_list|,
name|engine
operator|.
name|syncFlush
argument_list|(
name|syncId
argument_list|,
name|commitID
argument_list|)
argument_list|,
name|Engine
operator|.
name|SyncedFlushResult
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|getLastCommittedSegmentInfos
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testParsedDocument
argument_list|(
literal|"2"
argument_list|,
literal|"2"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|EngineConfig
name|config
init|=
name|engine
operator|.
name|config
argument_list|()
decl_stmt|;
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
name|engine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|copy
argument_list|(
name|config
argument_list|,
name|EngineConfig
operator|.
name|OpenMode
operator|.
name|OPEN_INDEX_AND_TRANSLOG
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|recoverFromTranslog
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"Sync ID must be gone since we have a document to replay"
argument_list|,
name|engine
operator|.
name|getLastCommittedSegmentInfos
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testVersioningNewCreate
specifier|public
name|void
name|testVersioningNewCreate
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|create
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_DELETED
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|create
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|create
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|create
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|replicaEngine
operator|.
name|index
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testVersioningNewIndex
specifier|public
name|void
name|testVersioningNewIndex
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|index
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExternalVersioningNewIndex
specifier|public
name|void
name|testExternalVersioningNewIndex
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|12
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12L
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|index
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testVersioningIndexConflict
specifier|public
name|void
name|testVersioningIndexConflict
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|1L
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// future versions should not work as well
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|3L
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExternalVersioningIndexConflict
specifier|public
name|void
name|testExternalVersioningIndexConflict
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|12
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12L
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|14
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|14L
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|13
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testForceVersioningNotAllowedExceptForOlderIndices
specifier|public
name|void
name|testForceVersioningNotAllowedExceptForOlderIndices
parameter_list|()
throws|throws
name|Exception
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|42
argument_list|,
name|VersionType
operator|.
name|FORCE
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"version type [FORCE] may not be used for indices created after 6.0"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexSettings
name|oldIndexSettings
init|=
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
literal|"test"
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_5_0_0_beta1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|()
init|;
name|Engine
name|engine
operator|=
name|createEngine
argument_list|(
name|oldIndexSettings
argument_list|,
name|store
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
init|)
block|{
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|84
argument_list|,
name|VersionType
operator|.
name|FORCE
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|IndexResult
name|result
init|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getFailure
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"version type [FORCE] may not be used for non-translog operations"
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|84
argument_list|,
name|VersionType
operator|.
name|FORCE
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|LOCAL_TRANSLOG_RECOVERY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|result
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|84L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testVersioningIndexConflictWithFlush
specifier|public
name|void
name|testVersioningIndexConflictWithFlush
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|1L
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// future versions should not work as well
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|3L
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExternalVersioningIndexConflictWithFlush
specifier|public
name|void
name|testExternalVersioningIndexConflictWithFlush
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|12
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12L
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|14
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|14L
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|13
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testForceMerge
specifier|public
name|void
name|testForceMerge
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|()
init|;
name|Engine
name|engine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|config
argument_list|(
name|defaultSettings
argument_list|,
name|store
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
operator|new
name|LogByteSizeMergePolicy
argument_list|()
argument_list|,
name|IndexRequest
operator|.
name|UNSET_AUTO_GENERATED_TIMESTAMP
argument_list|,
literal|null
argument_list|)
argument_list|)
init|)
block|{
comment|// use log MP here we test some behavior in ESMP
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Engine
operator|.
name|Searcher
name|test
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|test
operator|.
name|reader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|forceMerge
argument_list|(
literal|true
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|segments
argument_list|(
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
name|index
operator|.
name|type
argument_list|()
argument_list|,
name|index
operator|.
name|id
argument_list|()
argument_list|,
name|index
operator|.
name|uid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|forceMerge
argument_list|(
literal|true
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//expunge deletes
name|assertEquals
argument_list|(
name|engine
operator|.
name|segments
argument_list|(
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|test
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|numDocs
operator|-
literal|1
argument_list|,
name|test
operator|.
name|reader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|config
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|,
name|test
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doc
operator|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
name|index
operator|.
name|type
argument_list|()
argument_list|,
name|index
operator|.
name|id
argument_list|()
argument_list|,
name|index
operator|.
name|uid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|forceMerge
argument_list|(
literal|true
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//expunge deletes
name|assertEquals
argument_list|(
name|engine
operator|.
name|segments
argument_list|(
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|test
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|numDocs
operator|-
literal|2
argument_list|,
name|test
operator|.
name|reader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numDocs
operator|-
literal|1
argument_list|,
name|test
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testForceMergeAndClose
specifier|public
name|void
name|testForceMergeAndClose
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|numIters
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numIters
condition|;
name|j
operator|++
control|)
block|{
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|()
init|)
block|{
specifier|final
name|InternalEngine
name|engine
init|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startGun
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|indexed
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
try|try
block|{
name|startGun
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numDocs
condition|;
name|j
operator|++
control|)
block|{
name|i
operator|++
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|indexed
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|forceMerge
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
decl||
name|EngineClosedException
name|ex
parameter_list|)
block|{
comment|// fine
block|}
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|startGun
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|int
name|someIters
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|someIters
condition|;
name|i
operator|++
control|)
block|{
name|engine
operator|.
name|forceMerge
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexed
operator|.
name|await
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|engine
argument_list|)
expr_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testVersioningDeleteConflict
specifier|public
name|void
name|testVersioningDeleteConflict
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Delete
name|delete
init|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|1L
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|DeleteResult
name|result
init|=
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// future versions should not work as well
name|delete
operator|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|3L
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// now actually delete
name|delete
operator|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|2L
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
comment|// now check if we can index to a delete doc with version
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|2L
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testVersioningDeleteConflictWithFlush
specifier|public
name|void
name|testVersioningDeleteConflictWithFlush
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Engine
operator|.
name|Delete
name|delete
init|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|1L
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|DeleteResult
name|deleteResult
init|=
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|deleteResult
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deleteResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// future versions should not work as well
name|delete
operator|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|3L
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|deleteResult
operator|=
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deleteResult
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deleteResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// now actually delete
name|delete
operator|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|2L
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|deleteResult
operator|=
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deleteResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// now check if we can index to a delete doc with version
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|2L
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testVersioningCreateExistsException
specifier|public
name|void
name|testVersioningCreateExistsException
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|create
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_DELETED
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|create
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|create
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_DELETED
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testVersioningCreateExistsExceptionWithFlush
specifier|public
name|void
name|testVersioningCreateExistsExceptionWithFlush
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|create
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_DELETED
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|create
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|create
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_DELETED
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testVersioningReplicaConflict1
specifier|public
name|void
name|testVersioningReplicaConflict1
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
comment|// apply the second index to the replica, should work fine
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|VersionType
operator|.
name|INTERNAL
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
comment|// now, the old one should not work
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|1L
argument_list|,
name|VersionType
operator|.
name|INTERNAL
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// second version on replica should fail as well
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|2L
argument_list|,
name|VersionType
operator|.
name|INTERNAL
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testVersioningReplicaConflict2
specifier|public
name|void
name|testVersioningReplicaConflict2
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
comment|// apply the first index to the replica, should work fine
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|1L
argument_list|,
name|VersionType
operator|.
name|INTERNAL
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
comment|// index it again
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
comment|// now delete it
name|Engine
operator|.
name|Delete
name|delete
init|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|DeleteResult
name|deleteResult
init|=
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deleteResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
comment|// apply the delete on the replica (skipping the second index)
name|delete
operator|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|3L
argument_list|,
name|VersionType
operator|.
name|INTERNAL
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|deleteResult
operator|=
name|replicaEngine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deleteResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
comment|// second time delete with same version should fail
name|delete
operator|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|3L
argument_list|,
name|VersionType
operator|.
name|INTERNAL
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|deleteResult
operator|=
name|replicaEngine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deleteResult
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deleteResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// now do the second index on the replica, it should fail
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|2L
argument_list|,
name|VersionType
operator|.
name|INTERNAL
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasicCreatedFlag
specifier|public
name|void
name|testBasicCreatedFlag
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|indexResult
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|null
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreatedFlagAfterFlush
specifier|public
name|void
name|testCreatedFlagAfterFlush
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|null
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MockAppender
specifier|private
specifier|static
class|class
name|MockAppender
extends|extends
name|AbstractAppender
block|{
DECL|field|sawIndexWriterMessage
specifier|public
name|boolean
name|sawIndexWriterMessage
decl_stmt|;
DECL|field|sawIndexWriterIFDMessage
specifier|public
name|boolean
name|sawIndexWriterIFDMessage
decl_stmt|;
DECL|method|MockAppender
specifier|public
name|MockAppender
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IllegalAccessException
block|{
name|super
argument_list|(
name|name
argument_list|,
name|RegexFilter
operator|.
name|createFilter
argument_list|(
literal|".*(\n.*)*"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|append
specifier|public
name|void
name|append
parameter_list|(
name|LogEvent
name|event
parameter_list|)
block|{
specifier|final
name|String
name|formattedMessage
init|=
name|event
operator|.
name|getMessage
argument_list|()
operator|.
name|getFormattedMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getLevel
argument_list|()
operator|==
name|Level
operator|.
name|TRACE
operator|&&
name|event
operator|.
name|getMarker
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"[index][1] "
argument_list|)
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|getLoggerName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".IW"
argument_list|)
operator|&&
name|formattedMessage
operator|.
name|contains
argument_list|(
literal|"IW: apply all deletes during flush"
argument_list|)
condition|)
block|{
name|sawIndexWriterMessage
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getLoggerName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".IFD"
argument_list|)
condition|)
block|{
name|sawIndexWriterIFDMessage
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// #5891: make sure IndexWriter's infoStream output is
comment|// sent to lucene.iw with log level TRACE:
DECL|method|testIndexWriterInfoStream
specifier|public
name|void
name|testIndexWriterInfoStream
parameter_list|()
throws|throws
name|IllegalAccessException
block|{
name|assumeFalse
argument_list|(
literal|"who tests the tester?"
argument_list|,
name|VERBOSE
argument_list|)
expr_stmt|;
name|MockAppender
name|mockAppender
init|=
operator|new
name|MockAppender
argument_list|(
literal|"testIndexWriterInfoStream"
argument_list|)
decl_stmt|;
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|Level
name|savedLevel
init|=
name|rootLogger
operator|.
name|getLevel
argument_list|()
decl_stmt|;
name|Loggers
operator|.
name|addAppender
argument_list|(
name|rootLogger
argument_list|,
name|mockAppender
argument_list|)
expr_stmt|;
name|Loggers
operator|.
name|setLevel
argument_list|(
name|rootLogger
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|rootLogger
operator|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
expr_stmt|;
try|try
block|{
comment|// First, with DEBUG, which should NOT log IndexWriter output:
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|mockAppender
operator|.
name|sawIndexWriterMessage
argument_list|)
expr_stmt|;
comment|// Again, with TRACE, which should log IndexWriter output:
name|Loggers
operator|.
name|setLevel
argument_list|(
name|rootLogger
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|mockAppender
operator|.
name|sawIndexWriterMessage
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Loggers
operator|.
name|removeAppender
argument_list|(
name|rootLogger
argument_list|,
name|mockAppender
argument_list|)
expr_stmt|;
name|Loggers
operator|.
name|setLevel
argument_list|(
name|rootLogger
argument_list|,
name|savedLevel
argument_list|)
expr_stmt|;
block|}
block|}
comment|// #8603: make sure we can separately log IFD's messages
DECL|method|testIndexWriterIFDInfoStream
specifier|public
name|void
name|testIndexWriterIFDInfoStream
parameter_list|()
throws|throws
name|IllegalAccessException
block|{
name|assumeFalse
argument_list|(
literal|"who tests the tester?"
argument_list|,
name|VERBOSE
argument_list|)
expr_stmt|;
name|MockAppender
name|mockAppender
init|=
operator|new
name|MockAppender
argument_list|(
literal|"testIndexWriterIFDInfoStream"
argument_list|)
decl_stmt|;
specifier|final
name|Logger
name|iwIFDLogger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
literal|"org.elasticsearch.index.engine.Engine.IFD"
argument_list|)
decl_stmt|;
name|Loggers
operator|.
name|addAppender
argument_list|(
name|iwIFDLogger
argument_list|,
name|mockAppender
argument_list|)
expr_stmt|;
name|Loggers
operator|.
name|setLevel
argument_list|(
name|iwIFDLogger
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
try|try
block|{
comment|// First, with DEBUG, which should NOT log IndexWriter output:
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|mockAppender
operator|.
name|sawIndexWriterMessage
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mockAppender
operator|.
name|sawIndexWriterIFDMessage
argument_list|)
expr_stmt|;
comment|// Again, with TRACE, which should only log IndexWriter IFD output:
name|Loggers
operator|.
name|setLevel
argument_list|(
name|iwIFDLogger
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|mockAppender
operator|.
name|sawIndexWriterMessage
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mockAppender
operator|.
name|sawIndexWriterIFDMessage
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Loggers
operator|.
name|removeAppender
argument_list|(
name|iwIFDLogger
argument_list|,
name|mockAppender
argument_list|)
expr_stmt|;
name|Loggers
operator|.
name|setLevel
argument_list|(
name|iwIFDLogger
argument_list|,
operator|(
name|Level
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEnableGcDeletes
specifier|public
name|void
name|testEnableGcDeletes
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|()
init|;
name|Engine
name|engine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|config
argument_list|(
name|defaultSettings
argument_list|,
name|store
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|newMergePolicy
argument_list|()
argument_list|,
name|IndexRequest
operator|.
name|UNSET_AUTO_GENERATED_TIMESTAMP
argument_list|,
literal|null
argument_list|)
argument_list|)
init|)
block|{
name|engine
operator|.
name|config
argument_list|()
operator|.
name|setEnableGcDeletes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Add document
name|Document
name|document
init|=
name|testDocument
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|document
argument_list|,
name|B_2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|1
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete document we just added:
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|10
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get should not find the document
name|Engine
operator|.
name|GetResult
name|getResult
init|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Give the gc pruning logic a chance to kick in
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
comment|// Delete non-existent document
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"2"
argument_list|,
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
literal|10
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get should not find the document (we never indexed uid=2):
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to index uid=1 with a too-old version, should fail:
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|2
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get should still not find the document
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to index uid=2 with a too-old version, should fail:
name|Engine
operator|.
name|Index
name|index1
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|2
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get should not find the document
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newUid
specifier|protected
name|Term
name|newUid
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|testExtractShardId
specifier|public
name|void
name|testExtractShardId
parameter_list|()
block|{
try|try
init|(
name|Engine
operator|.
name|Searcher
name|test
init|=
name|this
operator|.
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|ShardId
name|shardId
init|=
name|ShardUtils
operator|.
name|extractShardId
argument_list|(
name|test
operator|.
name|getDirectoryReader
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardId
argument_list|,
name|engine
operator|.
name|config
argument_list|()
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Random test that throws random exception and ensures all references are      * counted down / released and resources are closed.      */
DECL|method|testFailStart
specifier|public
name|void
name|testFailStart
parameter_list|()
throws|throws
name|IOException
block|{
comment|// this test fails if any reader, searcher or directory is not closed - MDW FTW
specifier|final
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|MockDirectoryWrapper
name|wrapper
init|=
name|newMockDirectory
argument_list|()
decl_stmt|;
name|wrapper
operator|.
name|setFailOnOpenInput
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|setAllowRandomFileNotFoundException
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|setRandomIOExceptionRate
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|setRandomIOExceptionRateOnOpen
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|translogPath
init|=
name|createTempDir
argument_list|(
literal|"testFailStart"
argument_list|)
decl_stmt|;
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|(
name|wrapper
argument_list|)
init|)
block|{
name|int
name|refCount
init|=
name|store
operator|.
name|refCount
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"refCount: "
operator|+
name|store
operator|.
name|refCount
argument_list|()
argument_list|,
name|store
operator|.
name|refCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|InternalEngine
name|holder
decl_stmt|;
try|try
block|{
name|holder
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|translogPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineCreationFailureException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|store
operator|.
name|refCount
argument_list|()
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|assertEquals
argument_list|(
name|store
operator|.
name|refCount
argument_list|()
argument_list|,
name|refCount
operator|+
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numStarts
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numStarts
condition|;
name|j
operator|++
control|)
block|{
try|try
block|{
name|assertEquals
argument_list|(
name|store
operator|.
name|refCount
argument_list|()
argument_list|,
name|refCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|holder
operator|.
name|close
argument_list|()
expr_stmt|;
name|holder
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|translogPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|refCount
argument_list|()
argument_list|,
name|refCount
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineCreationFailureException
name|ex
parameter_list|)
block|{
comment|// all is fine
name|assertEquals
argument_list|(
name|store
operator|.
name|refCount
argument_list|()
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|holder
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|refCount
argument_list|()
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSettings
specifier|public
name|void
name|testSettings
parameter_list|()
block|{
name|CodecService
name|codecService
init|=
operator|new
name|CodecService
argument_list|(
literal|null
argument_list|,
name|logger
argument_list|)
decl_stmt|;
name|LiveIndexWriterConfig
name|currentIndexWriterConfig
init|=
name|engine
operator|.
name|getCurrentIndexWriterConfig
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|config
argument_list|()
operator|.
name|getCodec
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|codecService
operator|.
name|codec
argument_list|(
name|codecName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentIndexWriterConfig
operator|.
name|getCodec
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|codecService
operator|.
name|codec
argument_list|(
name|codecName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingTranslog
specifier|public
name|void
name|testMissingTranslog
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test that we can force start the engine , even if the translog is missing.
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// fake a new translog, causing the engine to point to a missing one.
name|Translog
name|translog
init|=
name|createTranslog
argument_list|()
decl_stmt|;
name|long
name|id
init|=
name|translog
operator|.
name|currentFileGeneration
argument_list|()
decl_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|rm
argument_list|(
name|translog
operator|.
name|location
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|getFilename
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|primaryTranslogDir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"engine shouldn't start without a valid translog id"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineCreationFailureException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
comment|// now it should be OK.
name|EngineConfig
name|config
init|=
name|copy
argument_list|(
name|config
argument_list|(
name|defaultSettings
argument_list|,
name|store
argument_list|,
name|primaryTranslogDir
argument_list|,
name|newMergePolicy
argument_list|()
argument_list|,
name|IndexRequest
operator|.
name|UNSET_AUTO_GENERATED_TIMESTAMP
argument_list|,
literal|null
argument_list|)
argument_list|,
name|EngineConfig
operator|.
name|OpenMode
operator|.
name|OPEN_INDEX_CREATE_TRANSLOG
argument_list|)
decl_stmt|;
name|engine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
DECL|method|testTranslogReplayWithFailure
specifier|public
name|void
name|testTranslogReplayWithFailure
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|firstIndexRequest
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_DELETED
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|firstIndexRequest
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
name|numDocs
argument_list|,
name|numDocs
operator|+
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|MockDirectoryWrapper
name|directory
init|=
name|DirectoryUtils
operator|.
name|getLeaf
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|MockDirectoryWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
operator|!=
literal|null
condition|)
block|{
comment|// since we rollback the IW we are writing the same segment files again after starting IW but MDW prevents
comment|// this so we have to disable the check explicitly
name|boolean
name|started
init|=
literal|false
decl_stmt|;
specifier|final
name|int
name|numIters
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIters
condition|;
name|i
operator|++
control|)
block|{
name|directory
operator|.
name|setRandomIOExceptionRateOnOpen
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
name|directory
operator|.
name|setRandomIOExceptionRate
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
name|directory
operator|.
name|setFailOnOpenInput
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|directory
operator|.
name|setAllowRandomFileNotFoundException
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|primaryTranslogDir
argument_list|)
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|EngineException
decl||
name|IOException
name|e
parameter_list|)
block|{                 }
block|}
name|directory
operator|.
name|setRandomIOExceptionRateOnOpen
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|directory
operator|.
name|setRandomIOExceptionRate
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|directory
operator|.
name|setFailOnOpenInput
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|directory
operator|.
name|setAllowRandomFileNotFoundException
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|started
operator|==
literal|false
condition|)
block|{
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|primaryTranslogDir
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// no mock directory, no fun.
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|primaryTranslogDir
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
name|numDocs
argument_list|,
name|numDocs
operator|+
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSkipTranslogReplay
specifier|public
name|void
name|testSkipTranslogReplay
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|firstIndexRequest
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_DELETED
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|firstIndexRequest
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
name|numDocs
argument_list|,
name|numDocs
operator|+
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
name|engine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|engine
operator|.
name|config
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
name|numDocs
argument_list|,
name|numDocs
operator|+
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dynamicUpdate
specifier|private
name|Mapping
name|dynamicUpdate
parameter_list|()
block|{
name|BuilderContext
name|context
init|=
operator|new
name|BuilderContext
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ContentPath
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RootObjectMapper
name|root
init|=
operator|new
name|RootObjectMapper
operator|.
name|Builder
argument_list|(
literal|"some_type"
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
operator|new
name|Mapping
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|,
name|root
argument_list|,
operator|new
name|MetadataFieldMapper
index|[
literal|0
index|]
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
DECL|method|testUpgradeOldIndex
specifier|public
name|void
name|testUpgradeOldIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|indexes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|getBwcIndicesPath
argument_list|()
argument_list|,
literal|"index-*.zip"
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|stream
control|)
block|{
name|indexes
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|indexes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|indexFile
range|:
name|indexes
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
name|indexes
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|)
control|)
block|{
specifier|final
name|String
name|indexName
init|=
name|indexFile
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|".zip"
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|Path
name|unzipDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|unzipDataDir
init|=
name|unzipDir
operator|.
name|resolve
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
comment|// decompress the index
try|try
init|(
name|InputStream
name|stream
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|indexFile
argument_list|)
init|)
block|{
name|TestUtil
operator|.
name|unzip
argument_list|(
name|stream
argument_list|,
name|unzipDir
argument_list|)
expr_stmt|;
block|}
comment|// check it is unique
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|unzipDataDir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
index|[]
name|list
init|=
name|filterExtraFSFiles
argument_list|(
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|unzipDataDir
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Backwards index must contain exactly one cluster but was "
operator|+
name|list
operator|.
name|length
operator|+
literal|" "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|list
argument_list|)
argument_list|)
throw|;
block|}
comment|// the bwc scripts packs the indices under this path
name|Path
name|src
init|=
name|list
index|[
literal|0
index|]
operator|.
name|resolve
argument_list|(
literal|"nodes/0/indices/"
operator|+
name|indexName
argument_list|)
decl_stmt|;
name|Path
name|translog
init|=
name|list
index|[
literal|0
index|]
operator|.
name|resolve
argument_list|(
literal|"nodes/0/indices/"
operator|+
name|indexName
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"0"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"translog"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"["
operator|+
name|indexFile
operator|+
literal|"] missing index dir: "
operator|+
name|src
operator|.
name|toString
argument_list|()
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"["
operator|+
name|indexFile
operator|+
literal|"] missing translog dir: "
operator|+
name|translog
operator|.
name|toString
argument_list|()
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|translog
argument_list|)
argument_list|)
expr_stmt|;
name|Path
index|[]
name|tlogFiles
init|=
name|filterExtraFSFiles
argument_list|(
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|translog
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|tlogFiles
argument_list|)
argument_list|,
name|tlogFiles
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// ckp& tlog
name|Path
name|tlogFile
init|=
name|tlogFiles
index|[
literal|0
index|]
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"tlog"
argument_list|)
condition|?
name|tlogFiles
index|[
literal|0
index|]
else|:
name|tlogFiles
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|long
name|size
init|=
name|Files
operator|.
name|size
argument_list|(
name|tlogFiles
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"upgrading index {} file: {} size: {}"
argument_list|,
name|indexName
argument_list|,
name|tlogFiles
index|[
literal|0
index|]
operator|.
name|getFileName
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|Directory
name|directory
init|=
name|newFSDirectory
argument_list|(
name|src
operator|.
name|resolve
argument_list|(
literal|"0"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"index"
argument_list|)
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|createStore
argument_list|(
name|directory
argument_list|)
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
comment|// make sure we can restart on an upgraded index
try|try
init|(
name|InternalEngine
name|engine
init|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|translog
argument_list|)
init|)
block|{
try|try
init|(
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TopDocs
name|search
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|numDocs
operator|=
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|numDocs
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|search
operator|.
name|totalHits
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
name|CommitStats
name|commitStats
init|=
name|engine
operator|.
name|commitStats
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userData
init|=
name|commitStats
operator|.
name|getUserData
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"userdata dosn't contain uuid"
argument_list|,
name|userData
operator|.
name|containsKey
argument_list|(
name|Translog
operator|.
name|TRANSLOG_UUID_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"userdata doesn't contain generation key"
argument_list|,
name|userData
operator|.
name|containsKey
argument_list|(
name|Translog
operator|.
name|TRANSLOG_GENERATION_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"userdata contains legacy marker"
argument_list|,
name|userData
operator|.
name|containsKey
argument_list|(
literal|"translog_id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|InternalEngine
name|engine
init|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|translog
argument_list|)
init|)
block|{
if|if
condition|(
name|numDocs
operator|==
operator|-
literal|1
condition|)
block|{
try|try
init|(
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|numDocs
operator|=
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|numDocs
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|numExtraDocs
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numExtraDocs
condition|;
name|i
operator|++
control|)
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"extra"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"extra"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|firstIndexRequest
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_DELETED
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|firstIndexRequest
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
name|numDocs
argument_list|,
name|numDocs
operator|+
name|numExtraDocs
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
operator|+
name|numExtraDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|,
name|directory
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|filterExtraFSFiles
specifier|private
name|Path
index|[]
name|filterExtraFSFiles
parameter_list|(
name|Path
index|[]
name|files
parameter_list|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|files
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"extra"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|paths
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|paths
operator|.
name|toArray
argument_list|(
operator|new
name|Path
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|testTranslogReplay
specifier|public
name|void
name|testTranslogReplay
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|firstIndexRequest
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_DELETED
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|firstIndexRequest
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
name|numDocs
argument_list|,
name|numDocs
operator|+
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TranslogHandler
name|parser
init|=
operator|(
name|TranslogHandler
operator|)
name|engine
operator|.
name|config
argument_list|()
operator|.
name|getTranslogRecoveryPerformer
argument_list|()
decl_stmt|;
name|parser
operator|.
name|mappingUpdate
operator|=
name|dynamicUpdate
argument_list|()
expr_stmt|;
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
name|engine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|copy
argument_list|(
name|engine
operator|.
name|config
argument_list|()
argument_list|,
name|EngineConfig
operator|.
name|OpenMode
operator|.
name|OPEN_INDEX_AND_TRANSLOG
argument_list|)
argument_list|)
expr_stmt|;
comment|// we need to reuse the engine config unless the parser.mappingModified won't work
name|engine
operator|.
name|recoverFromTranslog
argument_list|()
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
name|numDocs
argument_list|,
name|numDocs
operator|+
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parser
operator|=
operator|(
name|TranslogHandler
operator|)
name|engine
operator|.
name|config
argument_list|()
operator|.
name|getTranslogRecoveryPerformer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|parser
operator|.
name|recoveredOps
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|mappingUpdate
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parser
operator|.
name|getRecoveredTypes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|.
name|getRecoveredTypes
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parser
operator|.
name|getRecoveredTypes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|primaryTranslogDir
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
name|numDocs
argument_list|,
name|numDocs
operator|+
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parser
operator|=
operator|(
name|TranslogHandler
operator|)
name|engine
operator|.
name|config
argument_list|()
operator|.
name|getTranslogRecoveryPerformer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parser
operator|.
name|recoveredOps
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|flush
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|int
name|randomId
init|=
name|randomIntBetween
argument_list|(
name|numDocs
operator|+
literal|1
argument_list|,
name|numDocs
operator|+
literal|10
argument_list|)
decl_stmt|;
name|String
name|uuidValue
init|=
literal|"test#"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|randomId
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|uuidValue
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|randomId
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|firstIndexRequest
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
name|uuidValue
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|1
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|firstIndexRequest
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|flush
condition|)
block|{
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|doc
operator|=
name|testParsedDocument
argument_list|(
name|uuidValue
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|randomId
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Index
name|idxRequest
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
name|uuidValue
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|2
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|result
init|=
name|engine
operator|.
name|index
argument_list|(
name|idxRequest
argument_list|)
decl_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|numDocs
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|primaryTranslogDir
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|numDocs
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parser
operator|=
operator|(
name|TranslogHandler
operator|)
name|engine
operator|.
name|config
argument_list|()
operator|.
name|getTranslogRecoveryPerformer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|flush
condition|?
literal|1
else|:
literal|2
argument_list|,
name|parser
operator|.
name|recoveredOps
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|randomId
argument_list|)
argument_list|,
name|newUid
argument_list|(
name|uuidValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|primaryTranslogDir
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|numDocs
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TranslogHandler
specifier|public
specifier|static
class|class
name|TranslogHandler
extends|extends
name|TranslogRecoveryPerformer
block|{
DECL|field|docMapper
specifier|private
specifier|final
name|DocumentMapper
name|docMapper
decl_stmt|;
DECL|field|mappingUpdate
specifier|public
name|Mapping
name|mappingUpdate
init|=
literal|null
decl_stmt|;
DECL|field|recoveredOps
specifier|public
specifier|final
name|AtomicInteger
name|recoveredOps
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|TranslogHandler
specifier|public
name|TranslogHandler
parameter_list|(
name|String
name|indexName
parameter_list|,
name|Logger
name|logger
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RootObjectMapper
operator|.
name|Builder
name|rootBuilder
init|=
operator|new
name|RootObjectMapper
operator|.
name|Builder
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
name|indexName
argument_list|,
literal|"_na_"
argument_list|)
decl_stmt|;
name|IndexSettings
name|indexSettings
init|=
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
name|index
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|IndexAnalyzers
name|indexAnalyzers
init|=
literal|null
decl_stmt|;
name|NamedAnalyzer
name|defaultAnalyzer
init|=
operator|new
name|NamedAnalyzer
argument_list|(
literal|"default"
argument_list|,
name|AnalyzerScope
operator|.
name|INDEX
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|indexAnalyzers
operator|=
operator|new
name|IndexAnalyzers
argument_list|(
name|indexSettings
argument_list|,
name|defaultAnalyzer
argument_list|,
name|defaultAnalyzer
argument_list|,
name|defaultAnalyzer
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|SimilarityService
name|similarityService
init|=
operator|new
name|SimilarityService
argument_list|(
name|indexSettings
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|MapperRegistry
name|mapperRegistry
init|=
operator|new
name|IndicesModule
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
operator|.
name|getMapperRegistry
argument_list|()
decl_stmt|;
name|MapperService
name|mapperService
init|=
operator|new
name|MapperService
argument_list|(
name|indexSettings
argument_list|,
name|indexAnalyzers
argument_list|,
name|similarityService
argument_list|,
name|mapperRegistry
argument_list|,
parameter_list|()
lambda|->
literal|null
argument_list|)
decl_stmt|;
name|DocumentMapper
operator|.
name|Builder
name|b
init|=
operator|new
name|DocumentMapper
operator|.
name|Builder
argument_list|(
name|rootBuilder
argument_list|,
name|mapperService
argument_list|)
decl_stmt|;
name|this
operator|.
name|docMapper
operator|=
name|b
operator|.
name|build
argument_list|(
name|mapperService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docMapper
specifier|protected
name|DocumentMapperForType
name|docMapper
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
operator|new
name|DocumentMapperForType
argument_list|(
name|docMapper
argument_list|,
name|mappingUpdate
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|operationProcessed
specifier|protected
name|void
name|operationProcessed
parameter_list|()
block|{
name|recoveredOps
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testRecoverFromForeignTranslog
specifier|public
name|void
name|testRecoverFromForeignTranslog
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|firstIndexRequest
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_DELETED
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|index
init|=
name|engine
operator|.
name|index
argument_list|(
name|firstIndexRequest
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
name|numDocs
argument_list|,
name|numDocs
operator|+
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Translog
operator|.
name|TranslogGeneration
name|generation
init|=
name|engine
operator|.
name|getTranslog
argument_list|()
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
name|Translog
name|translog
init|=
operator|new
name|Translog
argument_list|(
operator|new
name|TranslogConfig
argument_list|(
name|shardId
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|INDEX_SETTINGS
argument_list|,
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"SomeBogusId"
argument_list|,
literal|"{}"
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|generation
operator|.
name|translogFileGeneration
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
name|EngineConfig
name|config
init|=
name|engine
operator|.
name|config
argument_list|()
decl_stmt|;
comment|/* create a TranslogConfig that has been created with a different UUID */
name|TranslogConfig
name|translogConfig
init|=
operator|new
name|TranslogConfig
argument_list|(
name|shardId
argument_list|,
name|translog
operator|.
name|location
argument_list|()
argument_list|,
name|config
operator|.
name|getIndexSettings
argument_list|()
argument_list|,
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|)
decl_stmt|;
name|EngineConfig
name|brokenConfig
init|=
operator|new
name|EngineConfig
argument_list|(
name|EngineConfig
operator|.
name|OpenMode
operator|.
name|OPEN_INDEX_AND_TRANSLOG
argument_list|,
name|shardId
argument_list|,
name|threadPool
argument_list|,
name|config
operator|.
name|getIndexSettings
argument_list|()
argument_list|,
literal|null
argument_list|,
name|store
argument_list|,
name|createSnapshotDeletionPolicy
argument_list|()
argument_list|,
name|newMergePolicy
argument_list|()
argument_list|,
name|config
operator|.
name|getAnalyzer
argument_list|()
argument_list|,
name|config
operator|.
name|getSimilarity
argument_list|()
argument_list|,
operator|new
name|CodecService
argument_list|(
literal|null
argument_list|,
name|logger
argument_list|)
argument_list|,
name|config
operator|.
name|getEventListener
argument_list|()
argument_list|,
name|config
operator|.
name|getTranslogRecoveryPerformer
argument_list|()
argument_list|,
name|IndexSearcher
operator|.
name|getDefaultQueryCache
argument_list|()
argument_list|,
name|IndexSearcher
operator|.
name|getDefaultQueryCachingPolicy
argument_list|()
argument_list|,
name|translogConfig
argument_list|,
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|,
name|config
operator|.
name|getRefreshListeners
argument_list|()
argument_list|,
name|IndexRequest
operator|.
name|UNSET_AUTO_GENERATED_TIMESTAMP
argument_list|)
decl_stmt|;
try|try
block|{
name|InternalEngine
name|internalEngine
init|=
operator|new
name|InternalEngine
argument_list|(
name|brokenConfig
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"translog belongs to a different engine"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineCreationFailureException
name|ex
parameter_list|)
block|{         }
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|primaryTranslogDir
argument_list|)
expr_stmt|;
comment|// and recover again!
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
name|numDocs
argument_list|,
name|numDocs
operator|+
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testShardNotAvailableExceptionWhenEngineClosedConcurrently
specifier|public
name|void
name|testShardNotAvailableExceptionWhenEngineClosedConcurrently
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|exception
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|operation
init|=
name|randomFrom
argument_list|(
literal|"optimize"
argument_list|,
literal|"refresh"
argument_list|,
literal|"flush"
argument_list|)
decl_stmt|;
name|Thread
name|mergeThread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"try with {}"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
while|while
condition|(
name|stop
operator|==
literal|false
condition|)
block|{
try|try
block|{
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
literal|"optimize"
case|:
block|{
name|engine
operator|.
name|forceMerge
argument_list|(
literal|true
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|"refresh"
case|:
block|{
name|engine
operator|.
name|refresh
argument_list|(
literal|"test refresh"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|"flush"
case|:
block|{
name|engine
operator|.
name|flush
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|stop
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|mergeThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
name|mergeThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"exception caught: "
argument_list|,
name|exception
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected an Exception that signals shard is not available"
argument_list|,
name|TransportActions
operator|.
name|isShardNotAvailableException
argument_list|(
name|exception
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCurrentTranslogIDisCommitted
specifier|public
name|void
name|testCurrentTranslogIDisCommitted
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|()
init|)
block|{
name|EngineConfig
name|config
init|=
name|config
argument_list|(
name|defaultSettings
argument_list|,
name|store
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|newMergePolicy
argument_list|()
argument_list|,
name|IndexRequest
operator|.
name|UNSET_AUTO_GENERATED_TIMESTAMP
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// create
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|firstIndexRequest
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_DELETED
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
init|(
name|InternalEngine
name|engine
init|=
operator|new
name|InternalEngine
argument_list|(
name|copy
argument_list|(
name|config
argument_list|,
name|EngineConfig
operator|.
name|OpenMode
operator|.
name|CREATE_INDEX_AND_TRANSLOG
argument_list|)
argument_list|)
init|)
block|{
name|assertFalse
argument_list|(
name|engine
operator|.
name|isRecovering
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|firstIndexRequest
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|engine
operator|.
name|recoverFromTranslog
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userData
init|=
name|engine
operator|.
name|getLastCommittedSegmentInfos
argument_list|()
operator|.
name|getUserData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|userData
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_GENERATION_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|getTranslog
argument_list|()
operator|.
name|getTranslogUUID
argument_list|()
argument_list|,
name|userData
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_UUID_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// open and recover tlog
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
try|try
init|(
name|InternalEngine
name|engine
init|=
operator|new
name|InternalEngine
argument_list|(
name|copy
argument_list|(
name|config
argument_list|,
name|EngineConfig
operator|.
name|OpenMode
operator|.
name|OPEN_INDEX_AND_TRANSLOG
argument_list|)
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|engine
operator|.
name|isRecovering
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userData
init|=
name|engine
operator|.
name|getLastCommittedSegmentInfos
argument_list|()
operator|.
name|getUserData
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|userData
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_GENERATION_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|userData
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_GENERATION_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|engine
operator|.
name|getTranslog
argument_list|()
operator|.
name|getTranslogUUID
argument_list|()
argument_list|,
name|userData
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_UUID_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|recoverFromTranslog
argument_list|()
expr_stmt|;
name|userData
operator|=
name|engine
operator|.
name|getLastCommittedSegmentInfos
argument_list|()
operator|.
name|getUserData
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|userData
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_GENERATION_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|getTranslog
argument_list|()
operator|.
name|getTranslogUUID
argument_list|()
argument_list|,
name|userData
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_UUID_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// open index with new tlog
block|{
try|try
init|(
name|InternalEngine
name|engine
init|=
operator|new
name|InternalEngine
argument_list|(
name|copy
argument_list|(
name|config
argument_list|,
name|EngineConfig
operator|.
name|OpenMode
operator|.
name|OPEN_INDEX_CREATE_TRANSLOG
argument_list|)
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userData
init|=
name|engine
operator|.
name|getLastCommittedSegmentInfos
argument_list|()
operator|.
name|getUserData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|userData
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_GENERATION_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|getTranslog
argument_list|()
operator|.
name|getTranslogUUID
argument_list|()
argument_list|,
name|userData
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_UUID_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|engine
operator|.
name|recoverFromTranslog
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// open and recover tlog with empty tlog
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
try|try
init|(
name|InternalEngine
name|engine
init|=
operator|new
name|InternalEngine
argument_list|(
name|copy
argument_list|(
name|config
argument_list|,
name|EngineConfig
operator|.
name|OpenMode
operator|.
name|OPEN_INDEX_AND_TRANSLOG
argument_list|)
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userData
init|=
name|engine
operator|.
name|getLastCommittedSegmentInfos
argument_list|()
operator|.
name|getUserData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|userData
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_GENERATION_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|getTranslog
argument_list|()
operator|.
name|getTranslogUUID
argument_list|()
argument_list|,
name|userData
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_UUID_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|recoverFromTranslog
argument_list|()
expr_stmt|;
name|userData
operator|=
name|engine
operator|.
name|getLastCommittedSegmentInfos
argument_list|()
operator|.
name|getUserData
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no changes - nothing to commit"
argument_list|,
literal|"1"
argument_list|,
name|userData
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_GENERATION_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|getTranslog
argument_list|()
operator|.
name|getTranslogUUID
argument_list|()
argument_list|,
name|userData
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_UUID_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|testCheckDocumentFailure
specifier|public
name|void
name|testCheckDocumentFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Exception
name|documentFailure
init|=
name|engine
operator|.
name|checkIfDocumentFailureOrThrow
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|,
operator|new
name|IOException
argument_list|(
literal|"simulated document failure"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|documentFailure
argument_list|,
name|instanceOf
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|checkIfDocumentFailureOrThrow
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|,
operator|new
name|CorruptIndexException
argument_list|(
literal|"simulated environment failure"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|envirnomentException
parameter_list|)
block|{
name|assertThat
argument_list|(
name|envirnomentException
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"simulated environment failure"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ThrowingIndexWriter
specifier|private
specifier|static
class|class
name|ThrowingIndexWriter
extends|extends
name|IndexWriter
block|{
DECL|field|throwDocumentFailure
specifier|private
name|boolean
name|throwDocumentFailure
decl_stmt|;
DECL|method|ThrowingIndexWriter
specifier|public
name|ThrowingIndexWriter
parameter_list|(
name|Directory
name|d
parameter_list|,
name|IndexWriterConfig
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|d
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addDocument
specifier|public
name|long
name|addDocument
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|throwDocumentFailure
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"simulated"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|deleteDocuments
specifier|public
name|long
name|deleteDocuments
parameter_list|(
name|Term
modifier|...
name|terms
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|throwDocumentFailure
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"simulated"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|deleteDocuments
argument_list|(
name|terms
argument_list|)
return|;
block|}
block|}
DECL|method|setThrowDocumentFailure
specifier|public
name|void
name|setThrowDocumentFailure
parameter_list|(
name|boolean
name|throwDocumentFailure
parameter_list|)
block|{
name|this
operator|.
name|throwDocumentFailure
operator|=
name|throwDocumentFailure
expr_stmt|;
block|}
block|}
DECL|method|testHandleDocumentFailure
specifier|public
name|void
name|testHandleDocumentFailure
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|()
init|)
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ThrowingIndexWriter
name|throwingIndexWriter
init|=
operator|new
name|ThrowingIndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Engine
name|engine
init|=
name|createEngine
argument_list|(
name|defaultSettings
argument_list|,
name|store
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|,
parameter_list|()
lambda|->
name|throwingIndexWriter
argument_list|)
init|)
block|{
comment|// test document failure while indexing
name|throwingIndexWriter
operator|.
name|setThrowDocumentFailure
argument_list|(
literal|true
argument_list|)
block|;
name|Engine
operator|.
name|IndexResult
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|randomAppendOnly
argument_list|(
literal|1
argument_list|,
name|doc
argument_list|,
literal|false
argument_list|)
argument_list|)
block|;
name|assertNotNull
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
argument_list|)
block|;
name|throwingIndexWriter
operator|.
name|setThrowDocumentFailure
argument_list|(
literal|false
argument_list|)
block|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|randomAppendOnly
argument_list|(
literal|1
argument_list|,
name|doc
argument_list|,
literal|false
argument_list|)
argument_list|)
block|;
name|assertNull
argument_list|(
name|indexResult
operator|.
name|getFailure
argument_list|()
argument_list|)
block|;
comment|// test document failure while deleting
name|throwingIndexWriter
operator|.
name|setThrowDocumentFailure
argument_list|(
literal|true
argument_list|)
block|;
name|Engine
operator|.
name|DeleteResult
name|deleteResult
operator|=
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|""
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
block|;
name|assertNotNull
argument_list|(
name|deleteResult
operator|.
name|getFailure
argument_list|()
argument_list|)
block|;             }
block|}
block|}
DECL|method|testDocStats
specifier|public
name|void
name|testDocStats
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// at least 2 documents otherwise we don't see any deletes below
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|firstIndexRequest
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|firstIndexRequest
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DocsStats
name|docStats
init|=
name|engine
operator|.
name|getDocStats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|docStats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docStats
operator|.
name|getDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|forceMerge
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|firstIndexRequest
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|index
init|=
name|engine
operator|.
name|index
argument_list|(
name|firstIndexRequest
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// flush - buffered deletes are not counted
name|docStats
operator|=
name|engine
operator|.
name|getDocStats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docStats
operator|.
name|getDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|docStats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|forceMerge
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|docStats
operator|=
name|engine
operator|.
name|getDocStats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docStats
operator|.
name|getDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|docStats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDoubleDelivery
specifier|public
name|void
name|testDoubleDelivery
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|operation
init|=
name|randomAppendOnly
argument_list|(
literal|1
argument_list|,
name|doc
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|retry
init|=
name|randomAppendOnly
argument_list|(
literal|1
argument_list|,
name|doc
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|operation
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|indexWriterHasDeletions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|engine
operator|.
name|getNumVersionLookups
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|indexResult
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|IndexResult
name|retryResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|retry
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|engine
operator|.
name|indexWriterHasDeletions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|engine
operator|.
name|getNumVersionLookups
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|retryResult
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|retryResult
operator|.
name|getTranslogLocation
argument_list|()
operator|.
name|compareTo
argument_list|(
name|indexResult
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Engine
operator|.
name|IndexResult
name|retryResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|retry
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|engine
operator|.
name|indexWriterHasDeletions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|engine
operator|.
name|getNumVersionLookups
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|retryResult
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|operation
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|engine
operator|.
name|indexWriterHasDeletions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|engine
operator|.
name|getNumVersionLookups
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|retryResult
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|retryResult
operator|.
name|getTranslogLocation
argument_list|()
operator|.
name|compareTo
argument_list|(
name|indexResult
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
name|operation
operator|=
name|randomAppendOnly
argument_list|(
literal|1
argument_list|,
name|doc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|retry
operator|=
name|randomAppendOnly
argument_list|(
literal|1
argument_list|,
name|doc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|operation
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|indexResult
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|IndexResult
name|retryResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|retry
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|retryResult
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|retryResult
operator|.
name|getTranslogLocation
argument_list|()
operator|.
name|compareTo
argument_list|(
name|indexResult
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Engine
operator|.
name|IndexResult
name|retryResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|retry
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|retryResult
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|operation
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|retryResult
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|retryResult
operator|.
name|getTranslogLocation
argument_list|()
operator|.
name|compareTo
argument_list|(
name|indexResult
operator|.
name|getTranslogLocation
argument_list|()
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRetryWithAutogeneratedIdWorksAndNoDuplicateDocs
specifier|public
name|void
name|testRetryWithAutogeneratedIdWorksAndNoDuplicateDocs
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|isRetry
init|=
literal|false
decl_stmt|;
name|long
name|autoGeneratedIdTimestamp
init|=
literal|0
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|autoGeneratedIdTimestamp
argument_list|,
name|isRetry
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|index
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|autoGeneratedIdTimestamp
argument_list|,
name|isRetry
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|isRetry
operator|=
literal|true
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|autoGeneratedIdTimestamp
argument_list|,
name|isRetry
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|indexResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|index
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|autoGeneratedIdTimestamp
argument_list|,
name|isRetry
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResult
operator|.
name|hasFailure
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|replicaEngine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRetryWithAutogeneratedIdsAndWrongOrderWorksAndNoDuplicateDocs
specifier|public
name|void
name|testRetryWithAutogeneratedIdsAndWrongOrderWorksAndNoDuplicateDocs
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|isRetry
init|=
literal|true
decl_stmt|;
name|long
name|autoGeneratedIdTimestamp
init|=
literal|0
decl_stmt|;
name|Engine
operator|.
name|Index
name|firstIndexRequest
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|autoGeneratedIdTimestamp
argument_list|,
name|isRetry
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|result
init|=
name|engine
operator|.
name|index
argument_list|(
name|firstIndexRequest
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Index
name|firstIndexRequestReplica
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|result
operator|.
name|getVersion
argument_list|()
argument_list|,
name|firstIndexRequest
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|autoGeneratedIdTimestamp
argument_list|,
name|isRetry
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexReplicaResult
init|=
name|replicaEngine
operator|.
name|index
argument_list|(
name|firstIndexRequestReplica
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexReplicaResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|isRetry
operator|=
literal|false
expr_stmt|;
name|Engine
operator|.
name|Index
name|secondIndexRequest
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|autoGeneratedIdTimestamp
argument_list|,
name|isRetry
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|indexResult
init|=
name|engine
operator|.
name|index
argument_list|(
name|secondIndexRequest
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|indexResult
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
name|Engine
operator|.
name|Index
name|secondIndexRequestReplica
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|result
operator|.
name|getVersion
argument_list|()
argument_list|,
name|firstIndexRequest
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|autoGeneratedIdTimestamp
argument_list|,
name|isRetry
argument_list|)
decl_stmt|;
name|replicaEngine
operator|.
name|index
argument_list|(
name|secondIndexRequestReplica
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|replicaEngine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomAppendOnly
specifier|public
name|Engine
operator|.
name|Index
name|randomAppendOnly
parameter_list|(
name|int
name|docId
parameter_list|,
name|ParsedDocument
name|doc
parameter_list|,
name|boolean
name|retry
parameter_list|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
return|return
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|docId
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|docId
argument_list|,
name|retry
argument_list|)
return|;
block|}
return|return
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|docId
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|1
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|REPLICA
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|docId
argument_list|,
name|retry
argument_list|)
return|;
block|}
DECL|method|testRetryConcurrently
specifier|public
name|void
name|testRetryConcurrently
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|Thread
index|[]
name|thread
init|=
operator|new
name|Thread
index|[
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
index|]
decl_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|1000
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Engine
operator|.
name|Index
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
name|i
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|originalIndex
init|=
name|randomAppendOnly
argument_list|(
name|i
argument_list|,
name|doc
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|retryIndex
init|=
name|randomAppendOnly
argument_list|(
name|i
argument_list|,
name|doc
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|originalIndex
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|retryIndex
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|docs
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|CountDownLatch
name|startGun
init|=
operator|new
name|CountDownLatch
argument_list|(
name|thread
operator|.
name|length
argument_list|)
decl_stmt|;
name|AtomicInteger
name|offset
init|=
operator|new
name|AtomicInteger
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thread
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|thread
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|startGun
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|startGun
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|int
name|docOffset
decl_stmt|;
while|while
condition|(
operator|(
name|docOffset
operator|=
name|offset
operator|.
name|incrementAndGet
argument_list|()
operator|)
operator|<
name|docs
operator|.
name|size
argument_list|()
condition|)
block|{
name|engine
operator|.
name|index
argument_list|(
name|docs
operator|.
name|get
argument_list|(
name|docOffset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|thread
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thread
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|thread
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|engine
operator|.
name|getNumVersionLookups
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|engine
operator|.
name|getNumIndexVersionsLookups
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|engine
operator|.
name|indexWriterHasDeletions
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEngineMaxTimestampIsInitialized
specifier|public
name|void
name|testEngineMaxTimestampIsInitialized
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|()
init|;
name|Engine
name|engine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|config
argument_list|(
name|defaultSettings
argument_list|,
name|store
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|,
name|IndexRequest
operator|.
name|UNSET_AUTO_GENERATED_TIMESTAMP
argument_list|,
literal|null
argument_list|)
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|IndexRequest
operator|.
name|UNSET_AUTO_GENERATED_TIMESTAMP
argument_list|,
name|engine
operator|.
name|segmentsStats
argument_list|(
literal|false
argument_list|)
operator|.
name|getMaxUnsafeAutoIdTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|maxTimestamp
init|=
name|Math
operator|.
name|abs
argument_list|(
name|randomLong
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|()
init|;
name|Engine
name|engine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|config
argument_list|(
name|defaultSettings
argument_list|,
name|store
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|,
name|maxTimestamp
argument_list|,
literal|null
argument_list|)
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|maxTimestamp
argument_list|,
name|engine
operator|.
name|segmentsStats
argument_list|(
literal|false
argument_list|)
operator|.
name|getMaxUnsafeAutoIdTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAppendConcurrently
specifier|public
name|void
name|testAppendConcurrently
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|Thread
index|[]
name|thread
init|=
operator|new
name|Thread
index|[
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
index|]
decl_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|1000
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|engine
operator|.
name|getNumVersionLookups
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|engine
operator|.
name|getNumIndexVersionsLookups
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Engine
operator|.
name|Index
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
name|i
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
name|randomAppendOnly
argument_list|(
name|i
argument_list|,
name|doc
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|docs
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|CountDownLatch
name|startGun
init|=
operator|new
name|CountDownLatch
argument_list|(
name|thread
operator|.
name|length
argument_list|)
decl_stmt|;
name|AtomicInteger
name|offset
init|=
operator|new
name|AtomicInteger
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thread
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|thread
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|startGun
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|startGun
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|int
name|docOffset
decl_stmt|;
while|while
condition|(
operator|(
name|docOffset
operator|=
name|offset
operator|.
name|incrementAndGet
argument_list|()
operator|)
operator|<
name|docs
operator|.
name|size
argument_list|()
condition|)
block|{
name|engine
operator|.
name|index
argument_list|(
name|docs
operator|.
name|get
argument_list|(
name|docOffset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|thread
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thread
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|thread
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|docs
operator|.
name|size
argument_list|()
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|engine
operator|.
name|getNumVersionLookups
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|engine
operator|.
name|getNumIndexVersionsLookups
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|indexWriterHasDeletions
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumVersionLookups
specifier|public
specifier|static
name|long
name|getNumVersionLookups
parameter_list|(
name|InternalEngine
name|engine
parameter_list|)
block|{
comment|// for other tests to access this
return|return
name|engine
operator|.
name|getNumVersionLookups
argument_list|()
return|;
block|}
DECL|method|getNumIndexVersionsLookups
specifier|public
specifier|static
name|long
name|getNumIndexVersionsLookups
parameter_list|(
name|InternalEngine
name|engine
parameter_list|)
block|{
comment|// for other tests to access this
return|return
name|engine
operator|.
name|getNumIndexVersionsLookups
argument_list|()
return|;
block|}
DECL|method|testFailEngineOnRandomIO
specifier|public
name|void
name|testFailEngineOnRandomIO
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|MockDirectoryWrapper
name|wrapper
init|=
name|newMockDirectory
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|translogPath
init|=
name|createTempDir
argument_list|(
literal|"testFailEngineOnRandomIO"
argument_list|)
decl_stmt|;
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|(
name|wrapper
argument_list|)
init|)
block|{
name|CyclicBarrier
name|join
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|CountDownLatch
name|start
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AtomicInteger
name|controller
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|EngineConfig
name|config
init|=
name|config
argument_list|(
name|defaultSettings
argument_list|,
name|store
argument_list|,
name|translogPath
argument_list|,
name|newMergePolicy
argument_list|()
argument_list|,
name|IndexRequest
operator|.
name|UNSET_AUTO_GENERATED_TIMESTAMP
argument_list|,
operator|new
name|ReferenceManager
operator|.
name|RefreshListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|beforeRefresh
parameter_list|()
throws|throws
name|IOException
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|afterRefresh
parameter_list|(
name|boolean
name|didRefresh
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
name|controller
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|MockDirectoryWrapper
operator|.
name|FakeIOException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|2
condition|)
block|{
try|try
block|{
name|start
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"boom"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|InternalEngine
name|internalEngine
init|=
operator|new
name|InternalEngine
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|int
name|docId
init|=
literal|0
decl_stmt|;
specifier|final
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|docId
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|docId
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
name|docId
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
name|randomAppendOnly
argument_list|(
name|docId
argument_list|,
name|doc
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|internalEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|Runnable
name|r
init|=
parameter_list|()
lambda|->
block|{
try|try
block|{
name|join
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|internalEngine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineClosedException
name|ex
parameter_list|)
block|{
comment|// we can't guarantee that we are entering the refresh call before it's fully
comment|// closed so we also expecting ECE here
name|assertTrue
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|MockDirectoryWrapper
operator|.
name|FakeIOException
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RefreshFailedEngineException
decl||
name|AlreadyClosedException
name|ex
parameter_list|)
block|{
comment|// fine
block|}
finally|finally
block|{
name|start
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|internalEngine
operator|.
name|isClosed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|internalEngine
operator|.
name|failedEngine
operator|.
name|get
argument_list|()
operator|instanceof
name|MockDirectoryWrapper
operator|.
name|FakeIOException
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

