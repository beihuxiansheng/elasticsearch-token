begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.engine
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedNumericSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedNumericSortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedSetSortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedSetSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_class
DECL|class|SegmentTests
specifier|public
class|class
name|SegmentTests
extends|extends
name|ESTestCase
block|{
DECL|method|randomSortField
specifier|static
name|SortField
name|randomSortField
parameter_list|()
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|SortedNumericSortField
name|field
init|=
operator|new
name|SortedNumericSortField
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|SortedNumericSelector
operator|.
name|Type
operator|.
name|MAX
else|:
name|SortedNumericSelector
operator|.
name|Type
operator|.
name|MIN
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|field
operator|.
name|setMissingValue
argument_list|(
name|randomInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|field
return|;
block|}
else|else
block|{
name|SortedSetSortField
name|field
init|=
operator|new
name|SortedSetSortField
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|SortedSetSelector
operator|.
name|Type
operator|.
name|MAX
else|:
name|SortedSetSelector
operator|.
name|Type
operator|.
name|MIN
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|field
operator|.
name|setMissingValue
argument_list|(
name|randomBoolean
argument_list|()
condition|?
name|SortedSetSortField
operator|.
name|STRING_FIRST
else|:
name|SortedSetSortField
operator|.
name|STRING_LAST
argument_list|)
expr_stmt|;
block|}
return|return
name|field
return|;
block|}
block|}
DECL|method|randomIndexSort
specifier|static
name|Sort
name|randomIndexSort
parameter_list|()
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|SortField
index|[]
name|fields
init|=
operator|new
name|SortField
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|fields
index|[
name|i
index|]
operator|=
name|randomSortField
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|Sort
argument_list|(
name|fields
argument_list|)
return|;
block|}
DECL|method|randomSegment
specifier|static
name|Segment
name|randomSegment
parameter_list|()
block|{
name|Segment
name|segment
init|=
operator|new
name|Segment
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|segment
operator|.
name|committed
operator|=
name|randomBoolean
argument_list|()
expr_stmt|;
name|segment
operator|.
name|search
operator|=
name|randomBoolean
argument_list|()
expr_stmt|;
name|segment
operator|.
name|sizeInBytes
operator|=
name|randomNonNegativeLong
argument_list|()
expr_stmt|;
name|segment
operator|.
name|docCount
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|segment
operator|.
name|delDocCount
operator|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|docCount
argument_list|)
expr_stmt|;
name|segment
operator|.
name|version
operator|=
name|Version
operator|.
name|LUCENE_6_5_0
expr_stmt|;
name|segment
operator|.
name|compound
operator|=
name|randomBoolean
argument_list|()
expr_stmt|;
name|segment
operator|.
name|mergeId
operator|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|segment
operator|.
name|memoryInBytes
operator|=
name|randomNonNegativeLong
argument_list|()
expr_stmt|;
name|segment
operator|.
name|segmentSort
operator|=
name|randomIndexSort
argument_list|()
expr_stmt|;
return|return
name|segment
return|;
block|}
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|Segment
name|segment
init|=
name|randomSegment
argument_list|()
decl_stmt|;
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|segment
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
name|StreamInput
name|input
init|=
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|Segment
name|deserialized
init|=
operator|new
name|Segment
argument_list|()
decl_stmt|;
name|deserialized
operator|.
name|readFrom
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isSegmentEquals
argument_list|(
name|deserialized
argument_list|,
name|segment
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isSegmentEquals
specifier|static
name|boolean
name|isSegmentEquals
parameter_list|(
name|Segment
name|seg1
parameter_list|,
name|Segment
name|seg2
parameter_list|)
block|{
return|return
name|seg1
operator|.
name|docCount
operator|==
name|seg2
operator|.
name|docCount
operator|&&
name|seg1
operator|.
name|delDocCount
operator|==
name|seg2
operator|.
name|delDocCount
operator|&&
name|seg1
operator|.
name|committed
operator|==
name|seg2
operator|.
name|committed
operator|&&
name|seg1
operator|.
name|search
operator|==
name|seg2
operator|.
name|search
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|seg1
operator|.
name|version
argument_list|,
name|seg2
operator|.
name|version
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|seg1
operator|.
name|compound
argument_list|,
name|seg2
operator|.
name|compound
argument_list|)
operator|&&
name|seg1
operator|.
name|sizeInBytes
operator|==
name|seg2
operator|.
name|sizeInBytes
operator|&&
name|seg1
operator|.
name|memoryInBytes
operator|==
name|seg2
operator|.
name|memoryInBytes
operator|&&
name|seg1
operator|.
name|getGeneration
argument_list|()
operator|==
name|seg2
operator|.
name|getGeneration
argument_list|()
operator|&&
name|seg1
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|seg2
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|seg1
operator|.
name|getMergeId
argument_list|()
operator|.
name|equals
argument_list|(
name|seg2
operator|.
name|getMergeId
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|seg1
operator|.
name|segmentSort
argument_list|,
name|seg2
operator|.
name|segmentSort
argument_list|)
return|;
block|}
block|}
end_class

end_unit

