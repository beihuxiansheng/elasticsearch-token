begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|VersionTypeTests
specifier|public
class|class
name|VersionTypeTests
extends|extends
name|ESTestCase
block|{
annotation|@
name|Test
DECL|method|testInternalVersionConflict
specifier|public
name|void
name|testInternalVersionConflict
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|isVersionConflictForWrites
argument_list|(
literal|10
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|isVersionConflictForReads
argument_list|(
literal|10
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
comment|// if we don't have a version in the index we accept everything
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|isVersionConflictForWrites
argument_list|(
name|Versions
operator|.
name|NOT_SET
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|isVersionConflictForReads
argument_list|(
name|Versions
operator|.
name|NOT_SET
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|isVersionConflictForWrites
argument_list|(
name|Versions
operator|.
name|NOT_SET
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|isVersionConflictForReads
argument_list|(
name|Versions
operator|.
name|NOT_SET
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
comment|// if we didn't find a version (but the index does support it), we don't like it unless MATCH_ANY
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|isVersionConflictForWrites
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|isVersionConflictForReads
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|isVersionConflictForWrites
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|isVersionConflictForReads
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
comment|// deletes
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|isVersionConflictForWrites
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
name|Versions
operator|.
name|MATCH_DELETED
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|isVersionConflictForWrites
argument_list|(
literal|10
argument_list|,
name|Versions
operator|.
name|MATCH_DELETED
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// and the stupid usual case
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|isVersionConflictForWrites
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|isVersionConflictForReads
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|isVersionConflictForWrites
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|isVersionConflictForReads
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|isVersionConflictForWrites
argument_list|(
literal|10
argument_list|,
literal|9
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|isVersionConflictForReads
argument_list|(
literal|10
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
comment|// Old indexing code, dictating behavior
comment|//        if (expectedVersion != Versions.MATCH_ANY&& currentVersion != Versions.NOT_SET) {
comment|//            // an explicit version is provided, see if there is a conflict
comment|//            // if we did not find anything, and a version is provided, so we do expect to find a doc under that version
comment|//            // this is important, since we don't allow to preset a version in order to handle deletes
comment|//            if (currentVersion == Versions.NOT_FOUND) {
comment|//                throw new VersionConflictEngineException(shardId, index.type(), index.id(), Versions.NOT_FOUND, expectedVersion);
comment|//            } else if (expectedVersion != currentVersion) {
comment|//                throw new VersionConflictEngineException(shardId, index.type(), index.id(), currentVersion, expectedVersion);
comment|//            }
comment|//        }
comment|//        updatedVersion = (currentVersion == Versions.NOT_SET || currentVersion == Versions.NOT_FOUND) ? 1 : currentVersion + 1;
block|}
annotation|@
name|Test
DECL|method|testVersionValidation
specifier|public
name|void
name|testVersionValidation
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|validateVersionForWrites
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|validateVersionForWrites
argument_list|(
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|validateVersionForWrites
argument_list|(
name|randomIntBetween
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|validateVersionForReads
argument_list|(
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|validateVersionForReads
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|validateVersionForReads
argument_list|(
name|randomIntBetween
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|validateVersionForWrites
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|validateVersionForWrites
argument_list|(
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|validateVersionForWrites
argument_list|(
name|randomIntBetween
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|validateVersionForReads
argument_list|(
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|validateVersionForReads
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|validateVersionForReads
argument_list|(
name|randomIntBetween
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|validateVersionForWrites
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|validateVersionForWrites
argument_list|(
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|validateVersionForWrites
argument_list|(
name|randomIntBetween
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|validateVersionForReads
argument_list|(
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|validateVersionForReads
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|validateVersionForReads
argument_list|(
name|randomIntBetween
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|validateVersionForWrites
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|validateVersionForWrites
argument_list|(
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|validateVersionForWrites
argument_list|(
name|randomIntBetween
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|validateVersionForReads
argument_list|(
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|validateVersionForReads
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|validateVersionForReads
argument_list|(
name|randomIntBetween
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExternalVersionConflict
specifier|public
name|void
name|testExternalVersionConflict
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|isVersionConflictForWrites
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|isVersionConflictForWrites
argument_list|(
name|Versions
operator|.
name|NOT_SET
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// MATCH_ANY must throw an exception in the case of external version, as the version must be set! it used as the new value
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|isVersionConflictForWrites
argument_list|(
literal|10
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// if we didn't find a version (but the index does support it), we always accept
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|isVersionConflictForWrites
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|isVersionConflictForWrites
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|isVersionConflictForReads
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
name|Versions
operator|.
name|NOT_FOUND
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|isVersionConflictForReads
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|isVersionConflictForReads
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
comment|// and the standard behavior
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|isVersionConflictForWrites
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|isVersionConflictForWrites
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|isVersionConflictForWrites
argument_list|(
literal|10
argument_list|,
literal|9
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|isVersionConflictForReads
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|isVersionConflictForReads
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|isVersionConflictForReads
argument_list|(
literal|10
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|isVersionConflictForReads
argument_list|(
literal|10
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
comment|// Old indexing code, dictating behavior
comment|//        // an external version is provided, just check, if a local version exists, that its higher than it
comment|//        // the actual version checking is one in an external system, and we just want to not index older versions
comment|//        if (currentVersion>= 0) { // we can check!, its there
comment|//            if (currentVersion>= index.version()) {
comment|//                throw new VersionConflictEngineException(shardId, index.type(), index.id(), currentVersion, index.version());
comment|//            }
comment|//        }
comment|//        updatedVersion = index.version();
block|}
annotation|@
name|Test
DECL|method|testExternalGTEVersionConflict
specifier|public
name|void
name|testExternalGTEVersionConflict
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|isVersionConflictForWrites
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|isVersionConflictForWrites
argument_list|(
name|Versions
operator|.
name|NOT_SET
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// MATCH_ANY must throw an exception in the case of external version, as the version must be set! it used as the new value
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|isVersionConflictForWrites
argument_list|(
literal|10
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// if we didn't find a version (but the index does support it), we always accept
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|isVersionConflictForWrites
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|isVersionConflictForWrites
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|isVersionConflictForReads
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
name|Versions
operator|.
name|NOT_FOUND
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|isVersionConflictForReads
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|isVersionConflictForReads
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
comment|// and the standard behavior
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|isVersionConflictForWrites
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|isVersionConflictForWrites
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|isVersionConflictForWrites
argument_list|(
literal|10
argument_list|,
literal|9
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|isVersionConflictForReads
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|isVersionConflictForReads
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|isVersionConflictForReads
argument_list|(
literal|10
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|isVersionConflictForReads
argument_list|(
literal|10
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testForceVersionConflict
specifier|public
name|void
name|testForceVersionConflict
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|isVersionConflictForWrites
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|isVersionConflictForWrites
argument_list|(
name|Versions
operator|.
name|NOT_SET
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// MATCH_ANY must throw an exception in the case of force version, as the version must be set! it used as the new value
try|try
block|{
name|VersionType
operator|.
name|FORCE
operator|.
name|isVersionConflictForWrites
argument_list|(
literal|10
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|//yes!!
block|}
comment|// if we didn't find a version (but the index does support it), we always accept
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|isVersionConflictForWrites
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|isVersionConflictForWrites
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|isVersionConflictForReads
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
name|Versions
operator|.
name|NOT_FOUND
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|isVersionConflictForReads
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|isVersionConflictForReads
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
comment|// and the standard behavior
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|isVersionConflictForWrites
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|isVersionConflictForWrites
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|isVersionConflictForWrites
argument_list|(
literal|10
argument_list|,
literal|9
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|isVersionConflictForReads
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|isVersionConflictForReads
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|isVersionConflictForReads
argument_list|(
literal|10
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|isVersionConflictForReads
argument_list|(
literal|10
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateVersion
specifier|public
name|void
name|testUpdateVersion
parameter_list|()
block|{
name|assertThat
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|updateVersion
argument_list|(
name|Versions
operator|.
name|NOT_SET
argument_list|,
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|updateVersion
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|updateVersion
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|VersionType
operator|.
name|INTERNAL
operator|.
name|updateVersion
argument_list|(
literal|2
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|updateVersion
argument_list|(
name|Versions
operator|.
name|NOT_SET
argument_list|,
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|10l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|updateVersion
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|10l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|updateVersion
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|10l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|updateVersion
argument_list|(
name|Versions
operator|.
name|NOT_SET
argument_list|,
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|10l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|updateVersion
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|10l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|updateVersion
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|10l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|VersionType
operator|.
name|EXTERNAL_GTE
operator|.
name|updateVersion
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|10l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|updateVersion
argument_list|(
name|Versions
operator|.
name|NOT_SET
argument_list|,
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|10l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|updateVersion
argument_list|(
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|10l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|VersionType
operator|.
name|FORCE
operator|.
name|updateVersion
argument_list|(
literal|11
argument_list|,
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|10l
argument_list|)
argument_list|)
expr_stmt|;
comment|// Old indexing code
comment|//        if (index.versionType() == VersionType.INTERNAL) { // internal version type
comment|//            updatedVersion = (currentVersion == Versions.NOT_SET || currentVersion == Versions.NOT_FOUND) ? 1 : currentVersion + 1;
comment|//        } else { // external version type
comment|//            updatedVersion = expectedVersion;
comment|//        }
block|}
block|}
end_class

end_unit

