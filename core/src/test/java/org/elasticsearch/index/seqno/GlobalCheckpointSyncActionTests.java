begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache license, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the license for the specific language governing permissions and  * limitations under the license.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.seqno
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|seqno
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
operator|.
name|ShardStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|CapturingTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|mock
operator|.
name|orig
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ClusterServiceUtils
operator|.
name|createClusterService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
DECL|class|GlobalCheckpointSyncActionTests
specifier|public
class|class
name|GlobalCheckpointSyncActionTests
extends|extends
name|ESTestCase
block|{
DECL|field|threadPool
specifier|private
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|transport
specifier|private
name|Transport
name|transport
decl_stmt|;
DECL|field|clusterService
specifier|private
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|transportService
specifier|private
name|TransportService
name|transportService
decl_stmt|;
DECL|field|shardStateAction
specifier|private
name|ShardStateAction
name|shardStateAction
decl_stmt|;
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|threadPool
operator|=
operator|new
name|TestThreadPool
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|transport
operator|=
operator|new
name|CapturingTransport
argument_list|()
expr_stmt|;
name|clusterService
operator|=
name|createClusterService
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
name|transportService
operator|=
operator|new
name|TransportService
argument_list|(
name|clusterService
operator|.
name|getSettings
argument_list|()
argument_list|,
name|transport
argument_list|,
name|threadPool
argument_list|,
name|TransportService
operator|.
name|NOOP_TRANSPORT_INTERCEPTOR
argument_list|,
name|boundAddress
lambda|->
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|start
argument_list|()
expr_stmt|;
name|transportService
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
name|shardStateAction
operator|=
operator|new
name|ShardStateAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
block|}
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|transport
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|terminate
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|testTranslogSyncAfterGlobalCheckpointSync
specifier|public
name|void
name|testTranslogSyncAfterGlobalCheckpointSync
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|IndicesService
name|indicesService
init|=
name|mock
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|,
literal|"uuid"
argument_list|)
decl_stmt|;
specifier|final
name|IndexService
name|indexService
init|=
name|mock
argument_list|(
name|IndexService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|index
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|indexService
argument_list|)
expr_stmt|;
specifier|final
name|int
name|id
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|IndexShard
name|indexShard
init|=
name|mock
argument_list|(
name|IndexShard
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|indexService
operator|.
name|getShard
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|indexShard
argument_list|)
expr_stmt|;
specifier|final
name|Translog
name|translog
init|=
name|mock
argument_list|(
name|Translog
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|indexShard
operator|.
name|getTranslog
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|translog
argument_list|)
expr_stmt|;
specifier|final
name|GlobalCheckpointSyncAction
name|action
init|=
operator|new
name|GlobalCheckpointSyncAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|indicesService
argument_list|,
name|threadPool
argument_list|,
name|shardStateAction
argument_list|,
operator|new
name|ActionFilters
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
argument_list|,
operator|new
name|IndexNameExpressionResolver
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
name|id
argument_list|)
decl_stmt|;
specifier|final
name|GlobalCheckpointSyncAction
operator|.
name|PrimaryRequest
name|primaryRequest
init|=
operator|new
name|GlobalCheckpointSyncAction
operator|.
name|PrimaryRequest
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|action
operator|.
name|shardOperationOnPrimary
argument_list|(
name|primaryRequest
argument_list|,
name|indexShard
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|.
name|shardOperationOnReplica
argument_list|(
operator|new
name|GlobalCheckpointSyncAction
operator|.
name|ReplicaRequest
argument_list|(
name|primaryRequest
argument_list|,
name|randomNonNegativeLong
argument_list|()
argument_list|)
argument_list|,
name|indexShard
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|translog
argument_list|)
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

