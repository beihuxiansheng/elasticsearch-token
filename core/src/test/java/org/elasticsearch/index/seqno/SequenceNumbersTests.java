begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.seqno
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|seqno
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasToString
import|;
end_import

begin_class
DECL|class|SequenceNumbersTests
specifier|public
class|class
name|SequenceNumbersTests
extends|extends
name|ESTestCase
block|{
DECL|method|testMin
specifier|public
name|void
name|testMin
parameter_list|()
block|{
specifier|final
name|long
name|seqNo
init|=
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|SequenceNumbers
operator|.
name|min
argument_list|(
name|SequenceNumbersService
operator|.
name|NO_OPS_PERFORMED
argument_list|,
name|seqNo
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|seqNo
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SequenceNumbers
operator|.
name|min
argument_list|(
name|SequenceNumbersService
operator|.
name|NO_OPS_PERFORMED
argument_list|,
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SequenceNumbers
operator|.
name|min
argument_list|(
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|,
name|seqNo
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|seqNo
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|minSeqNo
init|=
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|SequenceNumbers
operator|.
name|min
argument_list|(
name|minSeqNo
argument_list|,
name|seqNo
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|minSeqNo
argument_list|,
name|seqNo
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbers
operator|.
name|min
argument_list|(
name|minSeqNo
argument_list|,
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"sequence number must be assigned"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMax
specifier|public
name|void
name|testMax
parameter_list|()
block|{
specifier|final
name|long
name|seqNo
init|=
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|SequenceNumbers
operator|.
name|max
argument_list|(
name|SequenceNumbersService
operator|.
name|NO_OPS_PERFORMED
argument_list|,
name|seqNo
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|seqNo
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SequenceNumbers
operator|.
name|max
argument_list|(
name|SequenceNumbersService
operator|.
name|NO_OPS_PERFORMED
argument_list|,
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SequenceNumbers
operator|.
name|max
argument_list|(
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|,
name|seqNo
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|seqNo
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|maxSeqNo
init|=
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|SequenceNumbers
operator|.
name|min
argument_list|(
name|maxSeqNo
argument_list|,
name|seqNo
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|maxSeqNo
argument_list|,
name|seqNo
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbers
operator|.
name|min
argument_list|(
name|maxSeqNo
argument_list|,
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"sequence number must be assigned"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

