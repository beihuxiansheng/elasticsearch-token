begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTokenStreamTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|CustomNormalizerTests
specifier|public
class|class
name|CustomNormalizerTests
extends|extends
name|ESTokenStreamTestCase
block|{
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"index.analysis.normalizer.my_normalizer.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"asciifolding"
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ESTestCase
operator|.
name|TestAnalysis
name|analysis
init|=
name|AnalysisTestsHelper
operator|.
name|createTestAnalysisFromSettings
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|analysis
operator|.
name|indexAnalyzers
operator|.
name|get
argument_list|(
literal|"my_normalizer"
argument_list|)
argument_list|)
expr_stmt|;
name|NamedAnalyzer
name|normalizer
init|=
name|analysis
operator|.
name|indexAnalyzers
operator|.
name|getNormalizer
argument_list|(
literal|"my_normalizer"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|normalizer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"my_normalizer"
argument_list|,
name|normalizer
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|normalizer
operator|.
name|tokenStream
argument_list|(
literal|"foo"
argument_list|,
literal|"Cet Ã©tÃ©-lÃ "
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"cet ete-la"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"cet ete-la"
argument_list|)
argument_list|,
name|normalizer
operator|.
name|normalize
argument_list|(
literal|"foo"
argument_list|,
literal|"Cet Ã©tÃ©-lÃ "
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnknownType
specifier|public
name|void
name|testUnknownType
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.normalizer.my_normalizer.type"
argument_list|,
literal|"foobar"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.normalizer.my_normalizer.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"asciifolding"
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|AnalysisTestsHelper
operator|.
name|createTestAnalysisFromSettings
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unknown normalizer type [foobar] for [my_normalizer]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTokenizer
specifier|public
name|void
name|testTokenizer
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.normalizer.my_normalizer.tokenizer"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|AnalysisTestsHelper
operator|.
name|createTestAnalysisFromSettings
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Custom normalizer [my_normalizer] cannot configure a tokenizer"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharFilters
specifier|public
name|void
name|testCharFilters
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.char_filter.my_mapping.type"
argument_list|,
literal|"mapping"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.char_filter.my_mapping.mappings"
argument_list|,
literal|"a => z"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.normalizer.my_normalizer.char_filter"
argument_list|,
literal|"my_mapping"
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ESTestCase
operator|.
name|TestAnalysis
name|analysis
init|=
name|AnalysisTestsHelper
operator|.
name|createTestAnalysisFromSettings
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|analysis
operator|.
name|indexAnalyzers
operator|.
name|get
argument_list|(
literal|"my_normalizer"
argument_list|)
argument_list|)
expr_stmt|;
name|NamedAnalyzer
name|normalizer
init|=
name|analysis
operator|.
name|indexAnalyzers
operator|.
name|getNormalizer
argument_list|(
literal|"my_normalizer"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|normalizer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"my_normalizer"
argument_list|,
name|normalizer
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|normalizer
operator|.
name|tokenStream
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"zbc"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"zbc"
argument_list|)
argument_list|,
name|normalizer
operator|.
name|normalize
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIllegalFilters
specifier|public
name|void
name|testIllegalFilters
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"index.analysis.normalizer.my_normalizer.filter"
argument_list|,
literal|"porter_stem"
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|AnalysisTestsHelper
operator|.
name|createTestAnalysisFromSettings
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Custom normalizer [my_normalizer] may not use filter [porter_stem]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIllegalCharFilters
specifier|public
name|void
name|testIllegalCharFilters
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"index.analysis.normalizer.my_normalizer.char_filter"
argument_list|,
literal|"html_strip"
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|AnalysisTestsHelper
operator|.
name|createTestAnalysisFromSettings
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Custom normalizer [my_normalizer] may not use char filter [html_strip]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

