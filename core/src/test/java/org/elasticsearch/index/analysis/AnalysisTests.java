begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CharArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|MalformedInputException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_class
DECL|class|AnalysisTests
specifier|public
class|class
name|AnalysisTests
extends|extends
name|ESTestCase
block|{
DECL|method|testParseStemExclusion
specifier|public
name|void
name|testParseStemExclusion
parameter_list|()
block|{
comment|/* Comma separated list */
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"stem_exclusion"
argument_list|,
literal|"foo,bar"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CharArraySet
name|set
init|=
name|Analysis
operator|.
name|parseStemExclusion
argument_list|(
name|settings
argument_list|,
name|CharArraySet
operator|.
name|EMPTY_SET
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Array */
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"stem_exclusion"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|set
operator|=
name|Analysis
operator|.
name|parseStemExclusion
argument_list|(
name|settings
argument_list|,
name|CharArraySet
operator|.
name|EMPTY_SET
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseNonExistingFile
specifier|public
name|void
name|testParseNonExistingFile
parameter_list|()
block|{
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar_path"
argument_list|,
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"foo.dict"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|tempDir
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Environment
name|env
init|=
operator|new
name|Environment
argument_list|(
name|nodeSettings
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|ex
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Analysis
operator|.
name|getWordList
argument_list|(
name|env
argument_list|,
name|nodeSettings
argument_list|,
literal|"foo.bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"IOException while reading foo.bar_path: "
operator|+
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"foo.dict"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|FileNotFoundException
operator|||
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NoSuchFileException
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseFalseEncodedFile
specifier|public
name|void
name|testParseFalseEncodedFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|dict
init|=
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"foo.dict"
argument_list|)
decl_stmt|;
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar_path"
argument_list|,
name|dict
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|tempDir
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
init|(
name|OutputStream
name|writer
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|dict
argument_list|)
init|)
block|{
name|writer
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|}
argument_list|)
expr_stmt|;
comment|// some invalid UTF-8
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|Environment
name|env
init|=
operator|new
name|Environment
argument_list|(
name|nodeSettings
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|ex
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Analysis
operator|.
name|getWordList
argument_list|(
name|env
argument_list|,
name|nodeSettings
argument_list|,
literal|"foo.bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unsupported character encoding detected while reading foo.bar_path: "
operator|+
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"foo.dict"
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|" - files must be UTF-8 encoded"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|MalformedInputException
operator|||
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|CharacterCodingException
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseWordList
specifier|public
name|void
name|testParseWordList
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|dict
init|=
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"foo.dict"
argument_list|)
decl_stmt|;
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar_path"
argument_list|,
name|dict
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|tempDir
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
init|(
name|BufferedWriter
name|writer
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|dict
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|Environment
name|env
init|=
operator|new
name|Environment
argument_list|(
name|nodeSettings
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|wordList
init|=
name|Analysis
operator|.
name|getWordList
argument_list|(
name|env
argument_list|,
name|nodeSettings
argument_list|,
literal|"foo.bar"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hello"
argument_list|,
literal|"world"
argument_list|)
argument_list|,
name|wordList
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

