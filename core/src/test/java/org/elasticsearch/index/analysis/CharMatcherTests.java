begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_class
DECL|class|CharMatcherTests
specifier|public
class|class
name|CharMatcherTests
extends|extends
name|ESTestCase
block|{
DECL|method|testLetter
specifier|public
name|void
name|testLetter
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|LETTER
operator|.
name|isTokenChar
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Ll
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|LETTER
operator|.
name|isTokenChar
argument_list|(
literal|'Ã©'
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Ll
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|LETTER
operator|.
name|isTokenChar
argument_list|(
literal|'A'
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Lu
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|LETTER
operator|.
name|isTokenChar
argument_list|(
literal|'Ã'
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Lu
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|LETTER
operator|.
name|isTokenChar
argument_list|(
literal|'Ê°'
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Lm
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|LETTER
operator|.
name|isTokenChar
argument_list|(
literal|'Âª'
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Lo
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|LETTER
operator|.
name|isTokenChar
argument_list|(
literal|'Ç'
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Lt
name|assertFalse
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|LETTER
operator|.
name|isTokenChar
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|LETTER
operator|.
name|isTokenChar
argument_list|(
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|LETTER
operator|.
name|isTokenChar
argument_list|(
literal|'!'
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpace
specifier|public
name|void
name|testSpace
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|WHITESPACE
operator|.
name|isTokenChar
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|WHITESPACE
operator|.
name|isTokenChar
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|WHITESPACE
operator|.
name|isTokenChar
argument_list|(
literal|'\u00A0'
argument_list|)
argument_list|)
expr_stmt|;
comment|// nbsp
block|}
DECL|method|testNumber
specifier|public
name|void
name|testNumber
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|DIGIT
operator|.
name|isTokenChar
argument_list|(
literal|'1'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|DIGIT
operator|.
name|isTokenChar
argument_list|(
literal|'Ù¡'
argument_list|)
argument_list|)
expr_stmt|;
comment|// ARABIC-INDIC DIGIT ONE
name|assertFalse
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|DIGIT
operator|.
name|isTokenChar
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|DIGIT
operator|.
name|isTokenChar
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSymbol
specifier|public
name|void
name|testSymbol
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|SYMBOL
operator|.
name|isTokenChar
argument_list|(
literal|'$'
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Sc
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|SYMBOL
operator|.
name|isTokenChar
argument_list|(
literal|'+'
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Sm
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|SYMBOL
operator|.
name|isTokenChar
argument_list|(
literal|'`'
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Sm
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|SYMBOL
operator|.
name|isTokenChar
argument_list|(
literal|'^'
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Sk
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|SYMBOL
operator|.
name|isTokenChar
argument_list|(
literal|'Â¦'
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Sc
name|assertFalse
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|SYMBOL
operator|.
name|isTokenChar
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPunctuation
specifier|public
name|void
name|testPunctuation
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|PUNCTUATION
operator|.
name|isTokenChar
argument_list|(
literal|'('
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Ps
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|PUNCTUATION
operator|.
name|isTokenChar
argument_list|(
literal|')'
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Pe
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|PUNCTUATION
operator|.
name|isTokenChar
argument_list|(
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Pc
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|PUNCTUATION
operator|.
name|isTokenChar
argument_list|(
literal|'!'
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Po
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|PUNCTUATION
operator|.
name|isTokenChar
argument_list|(
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Pd
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|PUNCTUATION
operator|.
name|isTokenChar
argument_list|(
literal|'Â«'
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Pi
name|assertTrue
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|PUNCTUATION
operator|.
name|isTokenChar
argument_list|(
literal|'Â»'
argument_list|)
argument_list|)
expr_stmt|;
comment|// category Pf
name|assertFalse
argument_list|(
name|CharMatcher
operator|.
name|Basic
operator|.
name|PUNCTUATION
operator|.
name|isTokenChar
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

