begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|en
operator|.
name|EnglishAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|IndicesAnalysisService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_class
DECL|class|AnalysisServiceTests
specifier|public
class|class
name|AnalysisServiceTests
extends|extends
name|ESTestCase
block|{
DECL|method|analyzerProvider
specifier|private
specifier|static
name|AnalyzerProviderFactory
name|analyzerProvider
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|AnalyzerProviderFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AnalyzerProvider
name|create
parameter_list|(
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
return|return
operator|new
name|PreBuiltAnalyzerProvider
argument_list|(
name|name
argument_list|,
name|AnalyzerScope
operator|.
name|INDEX
argument_list|,
operator|new
name|EnglishAnalyzer
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|testDefaultAnalyzers
specifier|public
name|void
name|testDefaultAnalyzers
parameter_list|()
block|{
name|Version
name|version
init|=
name|VersionUtils
operator|.
name|randomVersion
argument_list|(
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|version
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndicesAnalysisService
name|indicesAnalysisService
init|=
operator|new
name|IndicesAnalysisService
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|AnalysisService
name|analysisService
init|=
operator|new
name|AnalysisService
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
name|settings
argument_list|,
name|indicesAnalysisService
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|analysisService
operator|.
name|defaultIndexAnalyzer
argument_list|()
operator|.
name|analyzer
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|StandardAnalyzer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|analysisService
operator|.
name|defaultSearchAnalyzer
argument_list|()
operator|.
name|analyzer
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|StandardAnalyzer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|analysisService
operator|.
name|defaultSearchQuoteAnalyzer
argument_list|()
operator|.
name|analyzer
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|StandardAnalyzer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverrideDefaultAnalyzer
specifier|public
name|void
name|testOverrideDefaultAnalyzer
parameter_list|()
block|{
name|Version
name|version
init|=
name|VersionUtils
operator|.
name|randomVersion
argument_list|(
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|version
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndicesAnalysisService
name|indicesAnalysisService
init|=
operator|new
name|IndicesAnalysisService
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|AnalysisService
name|analysisService
init|=
operator|new
name|AnalysisService
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
name|settings
argument_list|,
name|indicesAnalysisService
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"default"
argument_list|,
name|analyzerProvider
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|analysisService
operator|.
name|defaultIndexAnalyzer
argument_list|()
operator|.
name|analyzer
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|EnglishAnalyzer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|analysisService
operator|.
name|defaultSearchAnalyzer
argument_list|()
operator|.
name|analyzer
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|EnglishAnalyzer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|analysisService
operator|.
name|defaultSearchQuoteAnalyzer
argument_list|()
operator|.
name|analyzer
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|EnglishAnalyzer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverrideDefaultIndexAnalyzer
specifier|public
name|void
name|testOverrideDefaultIndexAnalyzer
parameter_list|()
block|{
name|Version
name|version
init|=
name|VersionUtils
operator|.
name|randomVersionBetween
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|Version
operator|.
name|V_3_0_0
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|version
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndicesAnalysisService
name|indicesAnalysisService
init|=
operator|new
name|IndicesAnalysisService
argument_list|(
name|settings
argument_list|)
decl_stmt|;
try|try
block|{
name|AnalysisService
name|analysisService
init|=
operator|new
name|AnalysisService
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
name|settings
argument_list|,
name|indicesAnalysisService
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"default_index"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"default_index"
argument_list|,
name|AnalyzerScope
operator|.
name|INDEX
argument_list|,
operator|new
name|EnglishAnalyzer
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected ISE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"[index.analysis.analyzer.default_index] is not supported"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBackCompatOverrideDefaultIndexAnalyzer
specifier|public
name|void
name|testBackCompatOverrideDefaultIndexAnalyzer
parameter_list|()
block|{
name|Version
name|version
init|=
name|VersionUtils
operator|.
name|randomVersionBetween
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|VersionUtils
operator|.
name|getFirstVersion
argument_list|()
argument_list|,
name|VersionUtils
operator|.
name|getPreviousVersion
argument_list|(
name|Version
operator|.
name|V_3_0_0
argument_list|)
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|version
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndicesAnalysisService
name|indicesAnalysisService
init|=
operator|new
name|IndicesAnalysisService
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|AnalysisService
name|analysisService
init|=
operator|new
name|AnalysisService
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
name|settings
argument_list|,
name|indicesAnalysisService
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"default_index"
argument_list|,
name|analyzerProvider
argument_list|(
literal|"default_index"
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|analysisService
operator|.
name|defaultIndexAnalyzer
argument_list|()
operator|.
name|analyzer
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|EnglishAnalyzer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|analysisService
operator|.
name|defaultSearchAnalyzer
argument_list|()
operator|.
name|analyzer
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|StandardAnalyzer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|analysisService
operator|.
name|defaultSearchQuoteAnalyzer
argument_list|()
operator|.
name|analyzer
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|StandardAnalyzer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverrideDefaultSearchAnalyzer
specifier|public
name|void
name|testOverrideDefaultSearchAnalyzer
parameter_list|()
block|{
name|Version
name|version
init|=
name|VersionUtils
operator|.
name|randomVersion
argument_list|(
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|version
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndicesAnalysisService
name|indicesAnalysisService
init|=
operator|new
name|IndicesAnalysisService
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|AnalysisService
name|analysisService
init|=
operator|new
name|AnalysisService
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
name|settings
argument_list|,
name|indicesAnalysisService
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"default_search"
argument_list|,
name|analyzerProvider
argument_list|(
literal|"default_search"
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|analysisService
operator|.
name|defaultIndexAnalyzer
argument_list|()
operator|.
name|analyzer
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|StandardAnalyzer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|analysisService
operator|.
name|defaultSearchAnalyzer
argument_list|()
operator|.
name|analyzer
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|EnglishAnalyzer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|analysisService
operator|.
name|defaultSearchQuoteAnalyzer
argument_list|()
operator|.
name|analyzer
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|EnglishAnalyzer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBackCompatOverrideDefaultIndexAndSearchAnalyzer
specifier|public
name|void
name|testBackCompatOverrideDefaultIndexAndSearchAnalyzer
parameter_list|()
block|{
name|Version
name|version
init|=
name|VersionUtils
operator|.
name|randomVersionBetween
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|VersionUtils
operator|.
name|getFirstVersion
argument_list|()
argument_list|,
name|VersionUtils
operator|.
name|getPreviousVersion
argument_list|(
name|Version
operator|.
name|V_3_0_0
argument_list|)
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|version
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndicesAnalysisService
name|indicesAnalysisService
init|=
operator|new
name|IndicesAnalysisService
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AnalyzerProviderFactory
argument_list|>
name|analyzers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|analyzers
operator|.
name|put
argument_list|(
literal|"default_index"
argument_list|,
name|analyzerProvider
argument_list|(
literal|"default_index"
argument_list|)
argument_list|)
expr_stmt|;
name|analyzers
operator|.
name|put
argument_list|(
literal|"default_search"
argument_list|,
name|analyzerProvider
argument_list|(
literal|"default_search"
argument_list|)
argument_list|)
expr_stmt|;
name|AnalysisService
name|analysisService
init|=
operator|new
name|AnalysisService
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
name|settings
argument_list|,
name|indicesAnalysisService
argument_list|,
name|analyzers
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|analysisService
operator|.
name|defaultIndexAnalyzer
argument_list|()
operator|.
name|analyzer
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|EnglishAnalyzer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|analysisService
operator|.
name|defaultSearchAnalyzer
argument_list|()
operator|.
name|analyzer
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|EnglishAnalyzer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|analysisService
operator|.
name|defaultSearchQuoteAnalyzer
argument_list|()
operator|.
name|analyzer
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|EnglishAnalyzer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

