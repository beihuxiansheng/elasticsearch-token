begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTokenStreamTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|IndexSettingsModule
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_class
DECL|class|PathHierarchyTokenizerFactoryTests
specifier|public
class|class
name|PathHierarchyTokenizerFactoryTests
extends|extends
name|ESTokenStreamTestCase
block|{
DECL|method|testDefaults
specifier|public
name|void
name|testDefaults
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|)
decl_stmt|;
specifier|final
name|Settings
name|indexSettings
init|=
name|newAnalysisSettingsBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|Tokenizer
name|tokenizer
init|=
operator|new
name|PathHierarchyTokenizerFactory
argument_list|(
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"path-hierarchy-tokenizer"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|tokenizer
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"/one/two/three"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/one"
block|,
literal|"/one/two"
block|,
literal|"/one/two/three"
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testReverse
specifier|public
name|void
name|testReverse
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|)
decl_stmt|;
specifier|final
name|Settings
name|indexSettings
init|=
name|newAnalysisSettingsBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|Settings
name|settings
init|=
name|newAnalysisSettingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"reverse"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Tokenizer
name|tokenizer
init|=
operator|new
name|PathHierarchyTokenizerFactory
argument_list|(
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"path-hierarchy-tokenizer"
argument_list|,
name|settings
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|tokenizer
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"/one/two/three"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/one/two/three"
block|,
literal|"one/two/three"
block|,
literal|"two/three"
block|,
literal|"three"
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testDelimiter
specifier|public
name|void
name|testDelimiter
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|)
decl_stmt|;
specifier|final
name|Settings
name|indexSettings
init|=
name|newAnalysisSettingsBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|Settings
name|settings
init|=
name|newAnalysisSettingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"delimiter"
argument_list|,
literal|"-"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Tokenizer
name|tokenizer
init|=
operator|new
name|PathHierarchyTokenizerFactory
argument_list|(
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"path-hierarchy-tokenizer"
argument_list|,
name|settings
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|tokenizer
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"/one/two/three"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/one/two/three"
block|}
argument_list|)
expr_stmt|;
name|tokenizer
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"one-two-three"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"one"
block|,
literal|"one-two"
block|,
literal|"one-two-three"
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplace
specifier|public
name|void
name|testReplace
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|)
decl_stmt|;
specifier|final
name|Settings
name|indexSettings
init|=
name|newAnalysisSettingsBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|Settings
name|settings
init|=
name|newAnalysisSettingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"replacement"
argument_list|,
literal|"-"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Tokenizer
name|tokenizer
init|=
operator|new
name|PathHierarchyTokenizerFactory
argument_list|(
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"path-hierarchy-tokenizer"
argument_list|,
name|settings
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|tokenizer
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"/one/two/three"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-one"
block|,
literal|"-one-two"
block|,
literal|"-one-two-three"
block|}
argument_list|)
expr_stmt|;
name|tokenizer
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"one-two-three"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"one-two-three"
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSkip
specifier|public
name|void
name|testSkip
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|)
decl_stmt|;
specifier|final
name|Settings
name|indexSettings
init|=
name|newAnalysisSettingsBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|Settings
name|settings
init|=
name|newAnalysisSettingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"skip"
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Tokenizer
name|tokenizer
init|=
operator|new
name|PathHierarchyTokenizerFactory
argument_list|(
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"path-hierarchy-tokenizer"
argument_list|,
name|settings
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|tokenizer
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"/one/two/three/four/five"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/three"
block|,
literal|"/three/four"
block|,
literal|"/three/four/five"
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testDelimiterExceptions
specifier|public
name|void
name|testDelimiterExceptions
parameter_list|()
block|{
specifier|final
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|)
decl_stmt|;
specifier|final
name|Settings
name|indexSettings
init|=
name|newAnalysisSettingsBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
block|{
name|String
name|delimiter
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"--"
block|,
literal|""
block|}
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|newAnalysisSettingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"delimiter"
argument_list|,
name|delimiter
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|PathHierarchyTokenizerFactory
argument_list|(
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"path-hierarchy-tokenizer"
argument_list|,
name|settings
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"delimiter must be a one char value"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|String
name|replacement
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"--"
block|,
literal|""
block|}
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|newAnalysisSettingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"replacement"
argument_list|,
name|replacement
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|PathHierarchyTokenizerFactory
argument_list|(
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"path-hierarchy-tokenizer"
argument_list|,
name|settings
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"replacement must be a one char value"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

