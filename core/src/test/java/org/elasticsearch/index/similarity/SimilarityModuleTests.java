begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.similarity
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInvertState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|CollectionStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|BM25Similarity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|ModuleTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_class
DECL|class|SimilarityModuleTests
specifier|public
class|class
name|SimilarityModuleTests
extends|extends
name|ModuleTestCase
block|{
DECL|method|testAddSimilarity
specifier|public
name|void
name|testAddSimilarity
parameter_list|()
block|{
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.similarity.my_similarity.type"
argument_list|,
literal|"test_similarity"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.similarity.my_similarity.key"
argument_list|,
literal|"there is a key"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SimilarityModule
name|module
init|=
operator|new
name|SimilarityModule
argument_list|(
operator|new
name|IndexSettings
argument_list|(
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|indexSettings
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
argument_list|)
decl_stmt|;
name|module
operator|.
name|addSimilarity
argument_list|(
literal|"test_similarity"
argument_list|,
parameter_list|(
name|string
parameter_list|,
name|settings
parameter_list|)
lambda|->
operator|new
name|SimilarityProvider
argument_list|()
block|{
block|@Override             public String name(
argument_list|)
block|{
return|return
name|string
return|;
block|}
annotation|@
name|Override
specifier|public
name|Similarity
name|get
parameter_list|()
block|{
return|return
operator|new
name|TestSimilarity
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
return|;
block|}
block|}
block|)
class|;
end_class

begin_expr_stmt
name|assertInstanceBinding
argument_list|(
name|module
argument_list|,
name|SimilarityService
operator|.
name|class
argument_list|,
parameter_list|(
name|inst
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|inst
operator|instanceof
name|SimilarityService
condition|)
block|{
name|assertNotNull
argument_list|(
name|inst
operator|.
name|getSimilarity
argument_list|(
literal|"my_similarity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inst
operator|.
name|getSimilarity
argument_list|(
literal|"my_similarity"
argument_list|)
operator|.
name|get
argument_list|()
operator|instanceof
name|TestSimilarity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"my_similarity"
argument_list|,
name|inst
operator|.
name|getSimilarity
argument_list|(
literal|"my_similarity"
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"there is a key"
argument_list|,
operator|(
operator|(
name|TestSimilarity
operator|)
name|inst
operator|.
name|getSimilarity
argument_list|(
literal|"my_similarity"
argument_list|)
operator|.
name|get
argument_list|()
operator|)
operator|.
name|key
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      public
DECL|method|testSetupUnknownSimilarity
name|void
name|testSetupUnknownSimilarity
parameter_list|()
block|{
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.similarity.my_similarity.type"
argument_list|,
literal|"test_similarity"
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SimilarityModule
name|module
init|=
operator|new
name|SimilarityModule
argument_list|(
operator|new
name|IndexSettings
argument_list|(
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|indexSettings
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|assertInstanceBinding
argument_list|(
name|module
argument_list|,
name|SimilarityService
operator|.
name|class
argument_list|,
parameter_list|(
name|inst
parameter_list|)
lambda|->
name|inst
operator|instanceof
name|SimilarityService
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Unknown Similarity type [test_similarity] for [my_similarity]"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|testSetupWithoutType
specifier|public
name|void
name|testSetupWithoutType
parameter_list|()
block|{
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.similarity.my_similarity.foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SimilarityModule
name|module
init|=
operator|new
name|SimilarityModule
argument_list|(
operator|new
name|IndexSettings
argument_list|(
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|indexSettings
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|assertInstanceBinding
argument_list|(
name|module
argument_list|,
name|SimilarityService
operator|.
name|class
argument_list|,
parameter_list|(
name|inst
parameter_list|)
lambda|->
name|inst
operator|instanceof
name|SimilarityService
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Similarity [my_similarity] must have an associated type"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_class
DECL|class|TestSimilarity
specifier|private
specifier|static
class|class
name|TestSimilarity
extends|extends
name|Similarity
block|{
DECL|field|delegate
specifier|private
specifier|final
name|Similarity
name|delegate
init|=
operator|new
name|BM25Similarity
argument_list|()
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
DECL|method|TestSimilarity
specifier|public
name|TestSimilarity
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"key is null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|computeNorm
specifier|public
name|long
name|computeNorm
parameter_list|(
name|FieldInvertState
name|state
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|computeNorm
argument_list|(
name|state
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|computeWeight
specifier|public
name|SimWeight
name|computeWeight
parameter_list|(
name|CollectionStatistics
name|collectionStats
parameter_list|,
name|TermStatistics
modifier|...
name|termStats
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|computeWeight
argument_list|(
name|collectionStats
argument_list|,
name|termStats
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|simScorer
specifier|public
name|SimScorer
name|simScorer
parameter_list|(
name|SimWeight
name|weight
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|simScorer
argument_list|(
name|weight
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
end_class

unit|}
end_unit

