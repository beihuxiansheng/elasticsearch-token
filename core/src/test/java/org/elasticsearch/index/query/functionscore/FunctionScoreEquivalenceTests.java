begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query.functionscore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchNoDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|RandomApproximationQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearchEquivalenceTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|CombineFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FiltersFunctionScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FiltersFunctionScoreQuery
operator|.
name|FilterFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FiltersFunctionScoreQuery
operator|.
name|ScoreMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FunctionScoreQuery
import|;
end_import

begin_class
DECL|class|FunctionScoreEquivalenceTests
specifier|public
class|class
name|FunctionScoreEquivalenceTests
extends|extends
name|SearchEquivalenceTestBase
block|{
DECL|method|testMinScoreAllIncluded
specifier|public
name|void
name|testMinScoreAllIncluded
parameter_list|()
throws|throws
name|Exception
block|{
name|Term
name|term
init|=
name|randomTerm
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|FunctionScoreQuery
name|fsq
init|=
operator|new
name|FunctionScoreQuery
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|0f
argument_list|,
literal|null
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|)
decl_stmt|;
name|assertSameScores
argument_list|(
name|query
argument_list|,
name|fsq
argument_list|)
expr_stmt|;
name|FiltersFunctionScoreQuery
name|ffsq
init|=
operator|new
name|FiltersFunctionScoreQuery
argument_list|(
name|query
argument_list|,
name|ScoreMode
operator|.
name|SUM
argument_list|,
operator|new
name|FilterFunction
index|[
literal|0
index|]
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
literal|0f
argument_list|,
name|CombineFunction
operator|.
name|MULTIPLY
argument_list|)
decl_stmt|;
name|assertSameScores
argument_list|(
name|query
argument_list|,
name|ffsq
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinScoreAllExcluded
specifier|public
name|void
name|testMinScoreAllExcluded
parameter_list|()
throws|throws
name|Exception
block|{
name|Term
name|term
init|=
name|randomTerm
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|FunctionScoreQuery
name|fsq
init|=
operator|new
name|FunctionScoreQuery
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
literal|null
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|)
decl_stmt|;
name|assertSameScores
argument_list|(
operator|new
name|MatchNoDocsQuery
argument_list|()
argument_list|,
name|fsq
argument_list|)
expr_stmt|;
name|FiltersFunctionScoreQuery
name|ffsq
init|=
operator|new
name|FiltersFunctionScoreQuery
argument_list|(
name|query
argument_list|,
name|ScoreMode
operator|.
name|SUM
argument_list|,
operator|new
name|FilterFunction
index|[
literal|0
index|]
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|CombineFunction
operator|.
name|MULTIPLY
argument_list|)
decl_stmt|;
name|assertSameScores
argument_list|(
operator|new
name|MatchNoDocsQuery
argument_list|()
argument_list|,
name|ffsq
argument_list|)
expr_stmt|;
block|}
DECL|method|testTwoPhaseMinScore
specifier|public
name|void
name|testTwoPhaseMinScore
parameter_list|()
throws|throws
name|Exception
block|{
name|Term
name|term
init|=
name|randomTerm
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|Float
name|minScore
init|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
decl_stmt|;
name|FunctionScoreQuery
name|fsq1
init|=
operator|new
name|FunctionScoreQuery
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|minScore
argument_list|,
literal|null
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|)
decl_stmt|;
name|FunctionScoreQuery
name|fsq2
init|=
operator|new
name|FunctionScoreQuery
argument_list|(
operator|new
name|RandomApproximationQuery
argument_list|(
name|query
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|minScore
argument_list|,
literal|null
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|)
decl_stmt|;
name|assertSameScores
argument_list|(
name|fsq1
argument_list|,
name|fsq2
argument_list|)
expr_stmt|;
name|FiltersFunctionScoreQuery
name|ffsq1
init|=
operator|new
name|FiltersFunctionScoreQuery
argument_list|(
name|query
argument_list|,
name|ScoreMode
operator|.
name|SUM
argument_list|,
operator|new
name|FilterFunction
index|[
literal|0
index|]
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|minScore
argument_list|,
name|CombineFunction
operator|.
name|MULTIPLY
argument_list|)
decl_stmt|;
name|FiltersFunctionScoreQuery
name|ffsq2
init|=
operator|new
name|FiltersFunctionScoreQuery
argument_list|(
name|query
argument_list|,
name|ScoreMode
operator|.
name|SUM
argument_list|,
operator|new
name|FilterFunction
index|[
literal|0
index|]
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|minScore
argument_list|,
name|CombineFunction
operator|.
name|MULTIPLY
argument_list|)
decl_stmt|;
name|assertSameScores
argument_list|(
name|ffsq1
argument_list|,
name|ffsq2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

