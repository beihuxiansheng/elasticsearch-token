begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|ShapeRelation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|SpatialStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|builders
operator|.
name|EnvelopeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|builders
operator|.
name|ShapeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|get
operator|.
name|GetResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|geo
operator|.
name|RandomShapeGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|GeoShapeQueryBuilderTests
specifier|public
class|class
name|GeoShapeQueryBuilderTests
extends|extends
name|AbstractQueryTestCase
argument_list|<
name|GeoShapeQueryBuilder
argument_list|>
block|{
DECL|field|indexedShapeId
specifier|private
specifier|static
name|String
name|indexedShapeId
decl_stmt|;
DECL|field|indexedShapeType
specifier|private
specifier|static
name|String
name|indexedShapeType
decl_stmt|;
DECL|field|indexedShapePath
specifier|private
specifier|static
name|String
name|indexedShapePath
decl_stmt|;
DECL|field|indexedShapeIndex
specifier|private
specifier|static
name|String
name|indexedShapeIndex
decl_stmt|;
DECL|field|indexedShapeToReturn
specifier|private
specifier|static
name|ShapeBuilder
name|indexedShapeToReturn
decl_stmt|;
annotation|@
name|Override
DECL|method|doCreateTestQueryBuilder
specifier|protected
name|GeoShapeQueryBuilder
name|doCreateTestQueryBuilder
parameter_list|()
block|{
name|ShapeBuilder
name|shape
init|=
name|RandomShapeGenerator
operator|.
name|createShapeWithin
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GeoShapeQueryBuilder
name|builder
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
try|try
block|{
name|builder
operator|=
operator|new
name|GeoShapeQueryBuilder
argument_list|(
name|GEO_SHAPE_FIELD_NAME
argument_list|,
name|shape
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|indexedShapeToReturn
operator|=
name|shape
expr_stmt|;
name|indexedShapeId
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|indexedShapeType
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|GeoShapeQueryBuilder
argument_list|(
name|GEO_SHAPE_FIELD_NAME
argument_list|,
name|indexedShapeId
argument_list|,
name|indexedShapeType
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|indexedShapeIndex
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|builder
operator|.
name|indexedShapeIndex
argument_list|(
name|indexedShapeIndex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|indexedShapePath
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|builder
operator|.
name|indexedShapePath
argument_list|(
name|indexedShapePath
argument_list|)
expr_stmt|;
block|}
block|}
name|SpatialStrategy
name|strategy
init|=
name|randomFrom
argument_list|(
name|SpatialStrategy
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|strategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
if|if
condition|(
name|strategy
operator|!=
name|SpatialStrategy
operator|.
name|TERM
condition|)
block|{
name|builder
operator|.
name|relation
argument_list|(
name|randomFrom
argument_list|(
name|ShapeRelation
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|executeGet
specifier|protected
name|GetResponse
name|executeGet
parameter_list|(
name|GetRequest
name|getRequest
parameter_list|)
block|{
name|assertThat
argument_list|(
name|indexedShapeToReturn
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexedShapeId
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexedShapeType
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getRequest
operator|.
name|id
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indexedShapeId
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getRequest
operator|.
name|type
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indexedShapeType
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|expectedShapeIndex
init|=
name|indexedShapeIndex
operator|==
literal|null
condition|?
name|GeoShapeQueryBuilder
operator|.
name|DEFAULT_SHAPE_INDEX_NAME
else|:
name|indexedShapeIndex
decl_stmt|;
name|assertThat
argument_list|(
name|getRequest
operator|.
name|index
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedShapeIndex
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|expectedShapePath
init|=
name|indexedShapePath
operator|==
literal|null
condition|?
name|GeoShapeQueryBuilder
operator|.
name|DEFAULT_SHAPE_FIELD_NAME
else|:
name|indexedShapePath
decl_stmt|;
name|String
name|json
decl_stmt|;
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|prettyPrint
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|expectedShapePath
argument_list|,
name|indexedShapeToReturn
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|json
operator|=
name|builder
operator|.
name|string
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"boom"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|GetResponse
name|response
init|=
operator|new
name|GetResponse
argument_list|(
operator|new
name|GetResult
argument_list|(
name|indexedShapeIndex
argument_list|,
name|indexedShapeType
argument_list|,
name|indexedShapeId
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
operator|new
name|BytesArray
argument_list|(
name|json
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|After
DECL|method|clearShapeFields
specifier|public
name|void
name|clearShapeFields
parameter_list|()
block|{
name|indexedShapeToReturn
operator|=
literal|null
expr_stmt|;
name|indexedShapeId
operator|=
literal|null
expr_stmt|;
name|indexedShapeType
operator|=
literal|null
expr_stmt|;
name|indexedShapePath
operator|=
literal|null
expr_stmt|;
name|indexedShapeIndex
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doAssertLuceneQuery
specifier|protected
name|void
name|doAssertLuceneQuery
parameter_list|(
name|GeoShapeQueryBuilder
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Logic for doToQuery is complex and is hard to test here. Need to rely
comment|// on Integration tests to determine if created query is correct
comment|// TODO improve GeoShapeQueryBuilder.doToQuery() method to make it
comment|// easier to test here
name|assertThat
argument_list|(
name|query
argument_list|,
name|anyOf
argument_list|(
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Overridden here to ensure the test is only run if at least one type is      * present in the mappings. Geo queries do not execute if the field is not      * explicitly mapped      */
annotation|@
name|Override
DECL|method|testToQuery
specifier|public
name|void
name|testToQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|super
operator|.
name|testToQuery
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testNoFieldName
specifier|public
name|void
name|testNoFieldName
parameter_list|()
throws|throws
name|Exception
block|{
name|ShapeBuilder
name|shape
init|=
name|RandomShapeGenerator
operator|.
name|createShapeWithin
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
operator|new
name|GeoShapeQueryBuilder
argument_list|(
literal|null
argument_list|,
name|shape
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoShape
specifier|public
name|void
name|testNoShape
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|GeoShapeQueryBuilder
name|builder
init|=
operator|new
name|GeoShapeQueryBuilder
argument_list|(
name|GEO_SHAPE_FIELD_NAME
argument_list|,
operator|(
name|ShapeBuilder
operator|)
literal|null
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testNoIndexedShape
specifier|public
name|void
name|testNoIndexedShape
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|GeoShapeQueryBuilder
argument_list|(
name|GEO_SHAPE_FIELD_NAME
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|,
literal|"type"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testNoIndexedShapeType
specifier|public
name|void
name|testNoIndexedShapeType
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|GeoShapeQueryBuilder
argument_list|(
name|GEO_SHAPE_FIELD_NAME
argument_list|,
literal|"id"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoRelation
specifier|public
name|void
name|testNoRelation
parameter_list|()
throws|throws
name|IOException
block|{
name|ShapeBuilder
name|shape
init|=
name|RandomShapeGenerator
operator|.
name|createShapeWithin
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|GeoShapeQueryBuilder
name|builder
init|=
operator|new
name|GeoShapeQueryBuilder
argument_list|(
name|GEO_SHAPE_FIELD_NAME
argument_list|,
name|shape
argument_list|)
decl_stmt|;
name|builder
operator|.
name|relation
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"relation cannot be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testInvalidRelation
specifier|public
name|void
name|testInvalidRelation
parameter_list|()
block|{
name|ShapeBuilder
name|shape
init|=
name|RandomShapeGenerator
operator|.
name|createShapeWithin
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|GeoShapeQueryBuilder
name|builder
init|=
operator|new
name|GeoShapeQueryBuilder
argument_list|(
name|GEO_SHAPE_FIELD_NAME
argument_list|,
name|shape
argument_list|)
decl_stmt|;
name|builder
operator|.
name|strategy
argument_list|(
name|SpatialStrategy
operator|.
name|TERM
argument_list|)
expr_stmt|;
name|ShapeRelation
name|relation
init|=
name|randomFrom
argument_list|(
name|ShapeRelation
operator|.
name|DISJOINT
argument_list|,
name|ShapeRelation
operator|.
name|WITHIN
argument_list|)
decl_stmt|;
name|builder
operator|.
name|relation
argument_list|(
name|relation
argument_list|)
expr_stmt|;
name|QueryValidationException
name|exception
init|=
name|builder
operator|.
name|validate
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|exception
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|validationErrors
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|validationErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|validationErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"["
operator|+
name|GeoShapeQueryBuilder
operator|.
name|NAME
operator|+
literal|"] strategy ["
operator|+
name|SpatialStrategy
operator|.
name|TERM
operator|.
name|getStrategyName
argument_list|()
operator|+
literal|"] only supports relation ["
operator|+
name|ShapeRelation
operator|.
name|INTERSECTS
operator|.
name|getRelationName
argument_list|()
operator|+
literal|"] found relation ["
operator|+
name|relation
operator|.
name|getRelationName
argument_list|()
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
comment|// see #3878
DECL|method|testThatXContentSerializationInsideOfArrayWorks
specifier|public
name|void
name|testThatXContentSerializationInsideOfArrayWorks
parameter_list|()
throws|throws
name|Exception
block|{
name|EnvelopeBuilder
name|envelopeBuilder
init|=
name|ShapeBuilder
operator|.
name|newEnvelope
argument_list|()
operator|.
name|topLeft
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|bottomRight
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|GeoShapeQueryBuilder
name|geoQuery
init|=
name|QueryBuilders
operator|.
name|geoShapeQuery
argument_list|(
literal|"searchGeometry"
argument_list|,
name|envelopeBuilder
argument_list|)
decl_stmt|;
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
operator|.
name|startArray
argument_list|()
operator|.
name|value
argument_list|(
name|geoQuery
argument_list|)
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

