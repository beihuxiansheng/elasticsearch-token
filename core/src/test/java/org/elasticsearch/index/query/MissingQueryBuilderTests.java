begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_class
DECL|class|MissingQueryBuilderTests
specifier|public
class|class
name|MissingQueryBuilderTests
extends|extends
name|AbstractQueryTestCase
argument_list|<
name|MissingQueryBuilder
argument_list|>
block|{
annotation|@
name|Override
DECL|method|doCreateTestQueryBuilder
specifier|protected
name|MissingQueryBuilder
name|doCreateTestQueryBuilder
parameter_list|()
block|{
name|String
name|fieldName
init|=
name|randomBoolean
argument_list|()
condition|?
name|randomFrom
argument_list|(
name|MAPPED_FIELD_NAMES
argument_list|)
else|:
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Boolean
name|existence
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|Boolean
name|nullValue
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|existence
operator|==
literal|false
operator|&&
name|nullValue
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|existence
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|nullValue
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
operator|new
name|MissingQueryBuilder
argument_list|(
name|fieldName
argument_list|,
name|nullValue
argument_list|,
name|existence
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doAssertLuceneQuery
specifier|protected
name|void
name|doAssertLuceneQuery
parameter_list|(
name|MissingQueryBuilder
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// too many mapping dependent cases to test, we don't want to end up
comment|// duplication the toQuery method
block|}
DECL|method|testIllegalArguments
specifier|public
name|void
name|testIllegalArguments
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
operator|new
name|MissingQueryBuilder
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|new
name|MissingQueryBuilder
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"must not be null or empty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
operator|new
name|MissingQueryBuilder
argument_list|(
literal|"fieldname"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"existence and nullValue cannot both be false"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
operator|new
name|MissingQueryBuilder
argument_list|(
literal|"fieldname"
argument_list|,
name|MissingQueryBuilder
operator|.
name|DEFAULT_NULL_VALUE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"existence and nullValue cannot both be false"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testBothNullValueAndExistenceFalse
specifier|public
name|void
name|testBothNullValueAndExistenceFalse
parameter_list|()
throws|throws
name|IOException
block|{
name|QueryShardContext
name|context
init|=
name|createShardContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setAllowUnmappedFields
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|MissingQueryBuilder
operator|.
name|newFilter
argument_list|(
name|context
argument_list|,
literal|"field"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected QueryShardException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryShardException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"missing must have either existence, or null_value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

