begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ScoreMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|HasChildQueryParserTests
specifier|public
class|class
name|HasChildQueryParserTests
extends|extends
name|ESTestCase
block|{
annotation|@
name|Test
DECL|method|minFromString
specifier|public
name|void
name|minFromString
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"fromString(min) != MIN"
argument_list|,
name|ScoreMode
operator|.
name|Min
argument_list|,
name|equalTo
argument_list|(
name|HasChildQueryParser
operator|.
name|parseScoreMode
argument_list|(
literal|"min"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|maxFromString
specifier|public
name|void
name|maxFromString
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"fromString(max) != MAX"
argument_list|,
name|ScoreMode
operator|.
name|Max
argument_list|,
name|equalTo
argument_list|(
name|HasChildQueryParser
operator|.
name|parseScoreMode
argument_list|(
literal|"max"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|avgFromString
specifier|public
name|void
name|avgFromString
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"fromString(avg) != AVG"
argument_list|,
name|ScoreMode
operator|.
name|Avg
argument_list|,
name|equalTo
argument_list|(
name|HasChildQueryParser
operator|.
name|parseScoreMode
argument_list|(
literal|"avg"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sumFromString
specifier|public
name|void
name|sumFromString
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"fromString(total) != SUM"
argument_list|,
name|ScoreMode
operator|.
name|Total
argument_list|,
name|equalTo
argument_list|(
name|HasChildQueryParser
operator|.
name|parseScoreMode
argument_list|(
literal|"total"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noneFromString
specifier|public
name|void
name|noneFromString
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"fromString(none) != NONE"
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|,
name|equalTo
argument_list|(
name|HasChildQueryParser
operator|.
name|parseScoreMode
argument_list|(
literal|"none"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Should throw {@link IllegalArgumentException} instead of NPE.      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|nullFromString_throwsException
specifier|public
name|void
name|nullFromString_throwsException
parameter_list|()
block|{
name|HasChildQueryParser
operator|.
name|parseScoreMode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Failure should not change (and the value should never match anything...).      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|unrecognizedFromString_throwsException
specifier|public
name|void
name|unrecognizedFromString_throwsException
parameter_list|()
block|{
name|HasChildQueryParser
operator|.
name|parseScoreMode
argument_list|(
literal|"unrecognized value"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

