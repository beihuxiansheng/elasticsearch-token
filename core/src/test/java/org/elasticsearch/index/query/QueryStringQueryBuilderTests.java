begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|MapperQueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|QueryParserSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DisjunctionMaxQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchNoDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|RegexpQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SynonymQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|TooComplexToDeterminizeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|all
operator|.
name|AllTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|AbstractQueryTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|queryStringQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertBooleanSubQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|either
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_class
DECL|class|QueryStringQueryBuilderTests
specifier|public
class|class
name|QueryStringQueryBuilderTests
extends|extends
name|AbstractQueryTestCase
argument_list|<
name|QueryStringQueryBuilder
argument_list|>
block|{
annotation|@
name|Override
DECL|method|doCreateTestQueryBuilder
specifier|protected
name|QueryStringQueryBuilder
name|doCreateTestQueryBuilder
parameter_list|()
block|{
name|int
name|numTerms
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTerms
condition|;
name|i
operator|++
control|)
block|{
comment|//min length 4 makes sure that the text is not an operator (AND/OR) so toQuery won't break
name|query
operator|+=
operator|(
name|randomBoolean
argument_list|()
condition|?
name|STRING_FIELD_NAME
operator|+
literal|":"
else|:
literal|""
operator|)
operator|+
name|randomAsciiOfLengthBetween
argument_list|(
literal|4
argument_list|,
literal|10
argument_list|)
operator|+
literal|" "
expr_stmt|;
block|}
name|QueryStringQueryBuilder
name|queryStringQueryBuilder
init|=
operator|new
name|QueryStringQueryBuilder
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|defaultField
argument_list|(
name|randomBoolean
argument_list|()
condition|?
name|STRING_FIELD_NAME
else|:
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|numFields
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|String
name|fieldName
init|=
name|randomBoolean
argument_list|()
condition|?
name|STRING_FIELD_NAME
else|:
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|field
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queryStringQueryBuilder
operator|.
name|field
argument_list|(
name|fieldName
argument_list|,
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|defaultOperator
argument_list|(
name|randomFrom
argument_list|(
name|Operator
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|//we only use string fields (either mapped or unmapped)
name|queryStringQueryBuilder
operator|.
name|fuzziness
argument_list|(
name|randomFuzziness
argument_list|(
name|STRING_FIELD_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|analyzer
argument_list|(
name|randomAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|quoteAnalyzer
argument_list|(
name|randomAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|allowLeadingWildcard
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|analyzeWildcard
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|maxDeterminizedStates
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|lowercaseExpandedTerms
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|autoGeneratePhraseQueries
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|enablePositionIncrements
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|lenient
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|escape
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|phraseSlop
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|fuzzyMaxExpansions
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|fuzzyPrefixLength
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|fuzzyRewrite
argument_list|(
name|getRandomRewriteMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|rewrite
argument_list|(
name|getRandomRewriteMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|quoteFieldSuffix
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|tieBreaker
argument_list|(
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|minimumShouldMatch
argument_list|(
name|randomMinimumShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|useDisMax
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|locale
argument_list|(
name|randomLocale
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryStringQueryBuilder
operator|.
name|timeZone
argument_list|(
name|randomDateTimeZone
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|queryStringQueryBuilder
operator|.
name|splitOnWhitespace
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|queryStringQueryBuilder
return|;
block|}
annotation|@
name|Override
DECL|method|doAssertLuceneQuery
specifier|protected
name|void
name|doAssertLuceneQuery
parameter_list|(
name|QueryStringQueryBuilder
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|SearchContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|queryBuilder
operator|.
name|queryString
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|MatchNoDocsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|either
argument_list|(
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|instanceOf
argument_list|(
name|AllTermQuery
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIllegalArguments
specifier|public
name|void
name|testIllegalArguments
parameter_list|()
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|QueryStringQueryBuilder
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQueryMatchAllQuery
specifier|public
name|void
name|testToQueryMatchAllQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
name|queryStringQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|MatchAllDocsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQueryTermQuery
specifier|public
name|void
name|testToQueryTermQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|queryStringQuery
argument_list|(
literal|"test"
argument_list|)
operator|.
name|defaultField
argument_list|(
name|STRING_FIELD_NAME
argument_list|)
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermQuery
name|termQuery
init|=
operator|(
name|TermQuery
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQueryPhraseQuery
specifier|public
name|void
name|testToQueryPhraseQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|queryStringQuery
argument_list|(
literal|"\"term1 term2\""
argument_list|)
operator|.
name|defaultField
argument_list|(
name|STRING_FIELD_NAME
argument_list|)
operator|.
name|phraseSlop
argument_list|(
literal|3
argument_list|)
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disjunctionMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|disjunctionMaxQuery
operator|.
name|getDisjuncts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|disjunctionMaxQuery
operator|.
name|getDisjuncts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|PhraseQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PhraseQuery
name|phraseQuery
init|=
operator|(
name|PhraseQuery
operator|)
name|disjunctionMaxQuery
operator|.
name|getDisjuncts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|phraseQuery
operator|.
name|getTerms
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|phraseQuery
operator|.
name|getTerms
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"term1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|phraseQuery
operator|.
name|getTerms
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"term2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|phraseQuery
operator|.
name|getSlop
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQueryBoosts
specifier|public
name|void
name|testToQueryBoosts
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QueryShardContext
name|shardContext
init|=
name|createShardContext
argument_list|()
decl_stmt|;
name|QueryStringQueryBuilder
name|queryStringQuery
init|=
name|queryStringQuery
argument_list|(
name|STRING_FIELD_NAME
operator|+
literal|":boosted^2"
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|queryStringQuery
operator|.
name|toQuery
argument_list|(
name|shardContext
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|BoostQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BoostQuery
name|boostQuery
init|=
operator|(
name|BoostQuery
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|boostQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|boostQuery
operator|.
name|getQuery
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|boostQuery
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"boosted"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|boost
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|query
operator|=
name|queryStringQuery
operator|.
name|toQuery
argument_list|(
name|shardContext
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|BoostQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|boostQuery
operator|=
operator|(
name|BoostQuery
operator|)
name|query
expr_stmt|;
name|assertThat
argument_list|(
name|boostQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|boostQuery
operator|.
name|getQuery
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|BoostQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|boostQuery
operator|=
operator|(
name|BoostQuery
operator|)
name|boostQuery
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|boostQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|=
name|queryStringQuery
argument_list|(
literal|"(("
operator|+
name|STRING_FIELD_NAME
operator|+
literal|":boosted^2) AND ("
operator|+
name|STRING_FIELD_NAME
operator|+
literal|":foo^1.5))^3"
argument_list|)
expr_stmt|;
name|query
operator|=
name|queryStringQuery
operator|.
name|toQuery
argument_list|(
name|shardContext
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|BoostQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|boostQuery
operator|=
operator|(
name|BoostQuery
operator|)
name|query
expr_stmt|;
name|assertThat
argument_list|(
name|boostQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3.0f
argument_list|)
argument_list|)
expr_stmt|;
name|BoostQuery
name|boostQuery1
init|=
name|assertBooleanSubQuery
argument_list|(
name|boostQuery
operator|.
name|getQuery
argument_list|()
argument_list|,
name|BoostQuery
operator|.
name|class
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|boostQuery1
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|boostQuery1
operator|.
name|getQuery
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|boostQuery1
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"boosted"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|BoostQuery
name|boostQuery2
init|=
name|assertBooleanSubQuery
argument_list|(
name|boostQuery
operator|.
name|getQuery
argument_list|()
argument_list|,
name|BoostQuery
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|boostQuery2
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|boostQuery2
operator|.
name|getQuery
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|boostQuery2
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|queryStringQuery
operator|.
name|boost
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|query
operator|=
name|queryStringQuery
operator|.
name|toQuery
argument_list|(
name|shardContext
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|BoostQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|boostQuery
operator|=
operator|(
name|BoostQuery
operator|)
name|query
expr_stmt|;
name|assertThat
argument_list|(
name|boostQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQueryMultipleTermsBooleanQuery
specifier|public
name|void
name|testToQueryMultipleTermsBooleanQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|queryStringQuery
argument_list|(
literal|"test1 test2"
argument_list|)
operator|.
name|field
argument_list|(
name|STRING_FIELD_NAME
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|bQuery
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|query
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|0
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|query
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|1
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"test2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQueryMultipleFieldsBooleanQuery
specifier|public
name|void
name|testToQueryMultipleFieldsBooleanQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|queryStringQuery
argument_list|(
literal|"test"
argument_list|)
operator|.
name|field
argument_list|(
name|STRING_FIELD_NAME
argument_list|)
operator|.
name|field
argument_list|(
name|STRING_FIELD_NAME_2
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|bQuery
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|query
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|0
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|query
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|1
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME_2
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQueryMultipleFieldsDisMaxQuery
specifier|public
name|void
name|testToQueryMultipleFieldsDisMaxQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|queryStringQuery
argument_list|(
literal|"test"
argument_list|)
operator|.
name|field
argument_list|(
name|STRING_FIELD_NAME
argument_list|)
operator|.
name|field
argument_list|(
name|STRING_FIELD_NAME_2
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|true
argument_list|)
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|query
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|disMaxQuery
operator|.
name|getDisjuncts
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME_2
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQueryFieldsWildcard
specifier|public
name|void
name|testToQueryFieldsWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|queryStringQuery
argument_list|(
literal|"test"
argument_list|)
operator|.
name|field
argument_list|(
literal|"mapped_str*"
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|bQuery
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|query
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|0
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|query
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|1
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME_2
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQueryDisMaxQuery
specifier|public
name|void
name|testToQueryDisMaxQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|queryStringQuery
argument_list|(
literal|"test"
argument_list|)
operator|.
name|field
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|2.2f
argument_list|)
operator|.
name|field
argument_list|(
name|STRING_FIELD_NAME_2
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|true
argument_list|)
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|query
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|disMaxQuery
operator|.
name|getDisjuncts
argument_list|()
decl_stmt|;
name|assertTermOrBoostQuery
argument_list|(
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|STRING_FIELD_NAME
argument_list|,
literal|"test"
argument_list|,
literal|2.2f
argument_list|)
expr_stmt|;
name|assertTermOrBoostQuery
argument_list|(
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|STRING_FIELD_NAME_2
argument_list|,
literal|"test"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQueryWildcarQuery
specifier|public
name|void
name|testToQueryWildcarQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
name|op
range|:
name|Operator
operator|.
name|values
argument_list|()
control|)
block|{
name|BooleanClause
operator|.
name|Occur
name|defaultOp
init|=
name|op
operator|.
name|toBooleanClauseOccur
argument_list|()
decl_stmt|;
name|MapperQueryParser
name|queryParser
init|=
operator|new
name|MapperQueryParser
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|QueryParserSettings
name|settings
init|=
operator|new
name|QueryParserSettings
argument_list|(
literal|"first foo-bar-foobar* last"
argument_list|)
decl_stmt|;
name|settings
operator|.
name|defaultField
argument_list|(
name|STRING_FIELD_NAME
argument_list|)
expr_stmt|;
name|settings
operator|.
name|fieldsAndWeights
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|analyzeWildcard
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|settings
operator|.
name|fuzziness
argument_list|(
name|Fuzziness
operator|.
name|AUTO
argument_list|)
expr_stmt|;
name|settings
operator|.
name|rewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|CONSTANT_SCORE_REWRITE
argument_list|)
expr_stmt|;
name|settings
operator|.
name|defaultOperator
argument_list|(
name|op
operator|.
name|toQueryParserOperator
argument_list|()
argument_list|)
expr_stmt|;
name|queryParser
operator|.
name|reset
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|queryParser
operator|.
name|parse
argument_list|(
literal|"first foo-bar-foobar* last"
argument_list|)
decl_stmt|;
name|Query
name|expectedQuery
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"first"
argument_list|)
argument_list|)
argument_list|,
name|defaultOp
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|defaultOp
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
name|defaultOp
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
argument_list|,
name|defaultOp
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|defaultOp
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"last"
argument_list|)
argument_list|)
argument_list|,
name|defaultOp
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|expectedQuery
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testToQueryWilcardQueryWithSynonyms
specifier|public
name|void
name|testToQueryWilcardQueryWithSynonyms
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
name|op
range|:
name|Operator
operator|.
name|values
argument_list|()
control|)
block|{
name|BooleanClause
operator|.
name|Occur
name|defaultOp
init|=
name|op
operator|.
name|toBooleanClauseOccur
argument_list|()
decl_stmt|;
name|MapperQueryParser
name|queryParser
init|=
operator|new
name|MapperQueryParser
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|QueryParserSettings
name|settings
init|=
operator|new
name|QueryParserSettings
argument_list|(
literal|"first foo-bar-foobar* last"
argument_list|)
decl_stmt|;
name|settings
operator|.
name|defaultField
argument_list|(
name|STRING_FIELD_NAME
argument_list|)
expr_stmt|;
name|settings
operator|.
name|fieldsAndWeights
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|analyzeWildcard
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|settings
operator|.
name|fuzziness
argument_list|(
name|Fuzziness
operator|.
name|AUTO
argument_list|)
expr_stmt|;
name|settings
operator|.
name|rewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|CONSTANT_SCORE_REWRITE
argument_list|)
expr_stmt|;
name|settings
operator|.
name|defaultOperator
argument_list|(
name|op
operator|.
name|toQueryParserOperator
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|forceAnalyzer
argument_list|(
operator|new
name|MockRepeatAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
name|queryParser
operator|.
name|reset
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|queryParser
operator|.
name|parse
argument_list|(
literal|"first foo-bar-foobar* last"
argument_list|)
decl_stmt|;
name|Query
name|expectedQuery
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"first"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"first"
argument_list|)
argument_list|)
argument_list|,
name|defaultOp
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|defaultOp
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
name|defaultOp
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
operator|.
name|setDisableCoord
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|defaultOp
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|defaultOp
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"last"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"last"
argument_list|)
argument_list|)
argument_list|,
name|defaultOp
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|expectedQuery
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testToQueryRegExpQuery
specifier|public
name|void
name|testToQueryRegExpQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|queryStringQuery
argument_list|(
literal|"/foo*bar/"
argument_list|)
operator|.
name|defaultField
argument_list|(
name|STRING_FIELD_NAME
argument_list|)
operator|.
name|maxDeterminizedStates
argument_list|(
literal|5000
argument_list|)
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|RegexpQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|RegexpQuery
name|regexpQuery
init|=
operator|(
name|RegexpQuery
operator|)
name|query
decl_stmt|;
name|assertTrue
argument_list|(
name|regexpQuery
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"/foo*bar/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQueryRegExpQueryTooComplex
specifier|public
name|void
name|testToQueryRegExpQueryTooComplex
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QueryStringQueryBuilder
name|queryBuilder
init|=
name|queryStringQuery
argument_list|(
literal|"/[ac]*a[ac]{50,200}/"
argument_list|)
operator|.
name|defaultField
argument_list|(
name|STRING_FIELD_NAME
argument_list|)
decl_stmt|;
name|TooComplexToDeterminizeException
name|e
init|=
name|expectThrows
argument_list|(
name|TooComplexToDeterminizeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|queryBuilder
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Determinizing [ac]*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"would result in more than 10000 states"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQueryFuzzyQueryAutoFuziness
specifier|public
name|void
name|testToQueryFuzzyQueryAutoFuziness
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|StringBuilder
name|queryString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|queryString
operator|.
name|append
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
block|}
name|queryString
operator|.
name|append
argument_list|(
literal|"~"
argument_list|)
expr_stmt|;
name|int
name|expectedEdits
decl_stmt|;
if|if
condition|(
name|length
operator|<=
literal|2
condition|)
block|{
name|expectedEdits
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|3
operator|<=
name|length
operator|&&
name|length
operator|<=
literal|5
condition|)
block|{
name|expectedEdits
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|expectedEdits
operator|=
literal|2
expr_stmt|;
block|}
name|Query
name|query
init|=
name|queryStringQuery
argument_list|(
name|queryString
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|defaultField
argument_list|(
name|STRING_FIELD_NAME
argument_list|)
operator|.
name|fuzziness
argument_list|(
name|Fuzziness
operator|.
name|AUTO
argument_list|)
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FuzzyQuery
name|fuzzyQuery
init|=
operator|(
name|FuzzyQuery
operator|)
name|query
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedEdits
argument_list|,
name|fuzzyQuery
operator|.
name|getMaxEdits
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFuzzyNumeric
specifier|public
name|void
name|testFuzzyNumeric
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QueryStringQueryBuilder
name|query
init|=
name|queryStringQuery
argument_list|(
literal|"12~0.2"
argument_list|)
operator|.
name|defaultField
argument_list|(
name|INT_FIELD_NAME
argument_list|)
decl_stmt|;
name|QueryShardContext
name|context
init|=
name|createShardContext
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|query
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Can only use fuzzy queries on keyword and text fields - not on [mapped_int] which is of type [integer]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|lenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|query
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// no exception
block|}
DECL|method|testPrefixNumeric
specifier|public
name|void
name|testPrefixNumeric
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QueryStringQueryBuilder
name|query
init|=
name|queryStringQuery
argument_list|(
literal|"12*"
argument_list|)
operator|.
name|defaultField
argument_list|(
name|INT_FIELD_NAME
argument_list|)
decl_stmt|;
name|QueryShardContext
name|context
init|=
name|createShardContext
argument_list|()
decl_stmt|;
name|QueryShardException
name|e
init|=
name|expectThrows
argument_list|(
name|QueryShardException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|query
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Can only use prefix queries on keyword and text fields - not on [mapped_int] which is of type [integer]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|lenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|query
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// no exception
block|}
DECL|method|testExactGeo
specifier|public
name|void
name|testExactGeo
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QueryStringQueryBuilder
name|query
init|=
name|queryStringQuery
argument_list|(
literal|"2,3"
argument_list|)
operator|.
name|defaultField
argument_list|(
name|GEO_POINT_FIELD_NAME
argument_list|)
decl_stmt|;
name|QueryShardContext
name|context
init|=
name|createShardContext
argument_list|()
decl_stmt|;
name|QueryShardException
name|e
init|=
name|expectThrows
argument_list|(
name|QueryShardException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|query
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Geo fields do not support exact searching, use dedicated geo queries instead: [mapped_geo_point]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|lenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|query
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// no exception
block|}
DECL|method|testTimezone
specifier|public
name|void
name|testTimezone
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|queryAsString
init|=
literal|"{\n"
operator|+
literal|"    \"query_string\":{\n"
operator|+
literal|"        \"time_zone\":\"Europe/Paris\",\n"
operator|+
literal|"        \"query\":\""
operator|+
name|DATE_FIELD_NAME
operator|+
literal|":[2012 TO 2014]\"\n"
operator|+
literal|"    }\n"
operator|+
literal|"}"
decl_stmt|;
name|QueryBuilder
name|queryBuilder
init|=
name|parseQuery
argument_list|(
name|queryAsString
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|queryBuilder
argument_list|,
name|instanceOf
argument_list|(
name|QueryStringQueryBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|QueryStringQueryBuilder
name|queryStringQueryBuilder
init|=
operator|(
name|QueryStringQueryBuilder
operator|)
name|queryBuilder
decl_stmt|;
name|assertThat
argument_list|(
name|queryStringQueryBuilder
operator|.
name|timeZone
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"Europe/Paris"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|invalidQueryAsString
init|=
literal|"{\n"
operator|+
literal|"    \"query_string\":{\n"
operator|+
literal|"        \"time_zone\":\"This timezone does not exist\",\n"
operator|+
literal|"        \"query\":\""
operator|+
name|DATE_FIELD_NAME
operator|+
literal|":[2012 TO 2014]\"\n"
operator|+
literal|"    }\n"
operator|+
literal|"}"
decl_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parseQuery
argument_list|(
name|invalidQueryAsString
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQueryBooleanQueryMultipleBoosts
specifier|public
name|void
name|testToQueryBooleanQueryMultipleBoosts
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|numBoosts
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|float
index|[]
name|boosts
init|=
operator|new
name|float
index|[
name|numBoosts
operator|+
literal|1
index|]
decl_stmt|;
name|String
name|queryStringPrefix
init|=
literal|""
decl_stmt|;
name|String
name|queryStringSuffix
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|boosts
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|float
name|boost
init|=
literal|2.0f
operator|/
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|boosts
index|[
name|i
index|]
operator|=
name|boost
expr_stmt|;
name|queryStringPrefix
operator|+=
literal|"("
expr_stmt|;
name|queryStringSuffix
operator|+=
literal|")^"
operator|+
name|boost
expr_stmt|;
block|}
name|String
name|queryString
init|=
name|queryStringPrefix
operator|+
literal|"foo bar"
operator|+
name|queryStringSuffix
decl_stmt|;
name|float
name|mainBoost
init|=
literal|2.0f
operator|/
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|boosts
index|[
name|boosts
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|mainBoost
expr_stmt|;
name|QueryStringQueryBuilder
name|queryStringQueryBuilder
init|=
operator|new
name|QueryStringQueryBuilder
argument_list|(
name|queryString
argument_list|)
operator|.
name|field
argument_list|(
name|STRING_FIELD_NAME
argument_list|)
operator|.
name|minimumShouldMatch
argument_list|(
literal|"2"
argument_list|)
operator|.
name|boost
argument_list|(
name|mainBoost
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|queryStringQueryBuilder
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|boosts
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|BoostQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BoostQuery
name|boostQuery
init|=
operator|(
name|BoostQuery
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|boostQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|boosts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
name|boostQuery
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|booleanQuery
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|booleanQuery
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|booleanQuery
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|booleanQuery
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|booleanQuery
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQueryPhraseQueryBoostAndSlop
specifier|public
name|void
name|testToQueryPhraseQueryBoostAndSlop
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QueryStringQueryBuilder
name|queryStringQueryBuilder
init|=
operator|new
name|QueryStringQueryBuilder
argument_list|(
literal|"\"test phrase\"~2"
argument_list|)
operator|.
name|field
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|5f
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|queryStringQueryBuilder
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disjunctionMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|disjunctionMaxQuery
operator|.
name|getDisjuncts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|disjunctionMaxQuery
operator|.
name|getDisjuncts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|BoostQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BoostQuery
name|boostQuery
init|=
operator|(
name|BoostQuery
operator|)
name|disjunctionMaxQuery
operator|.
name|getDisjuncts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|boostQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|boostQuery
operator|.
name|getQuery
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|PhraseQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PhraseQuery
name|phraseQuery
init|=
operator|(
name|PhraseQuery
operator|)
name|boostQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|phraseQuery
operator|.
name|getSlop
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|phraseQuery
operator|.
name|getTerms
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQuerySplitOnWhitespace
specifier|public
name|void
name|testToQuerySplitOnWhitespace
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// splitOnWhitespace=false
block|{
name|QueryStringQueryBuilder
name|queryBuilder
init|=
operator|new
name|QueryStringQueryBuilder
argument_list|(
literal|"foo bar"
argument_list|)
operator|.
name|field
argument_list|(
name|STRING_FIELD_NAME
argument_list|)
operator|.
name|field
argument_list|(
name|STRING_FIELD_NAME_2
argument_list|)
operator|.
name|splitOnWhitespace
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|queryBuilder
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|BooleanQuery
name|bq1
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|disjuncts
operator|.
name|add
argument_list|(
name|bq1
argument_list|)
expr_stmt|;
name|disjuncts
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME_2
argument_list|,
literal|"foo bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|expectedQuery
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|disjuncts
argument_list|,
literal|0.0f
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|equalTo
argument_list|(
name|expectedQuery
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QueryStringQueryBuilder
name|queryBuilder
init|=
operator|new
name|QueryStringQueryBuilder
argument_list|(
literal|"mapped_string:other foo bar"
argument_list|)
operator|.
name|field
argument_list|(
name|STRING_FIELD_NAME
argument_list|)
operator|.
name|field
argument_list|(
name|STRING_FIELD_NAME_2
argument_list|)
operator|.
name|splitOnWhitespace
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|queryBuilder
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|BooleanQuery
name|bq1
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|disjuncts
operator|.
name|add
argument_list|(
name|bq1
argument_list|)
expr_stmt|;
name|disjuncts
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME_2
argument_list|,
literal|"foo bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disjunctionMaxQuery
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|disjuncts
argument_list|,
literal|0.0f
argument_list|)
decl_stmt|;
name|BooleanQuery
name|expectedQuery
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
name|disjunctionMaxQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"other"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|equalTo
argument_list|(
name|expectedQuery
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QueryStringQueryBuilder
name|queryBuilder
init|=
operator|new
name|QueryStringQueryBuilder
argument_list|(
literal|"foo OR bar"
argument_list|)
operator|.
name|field
argument_list|(
name|STRING_FIELD_NAME
argument_list|)
operator|.
name|field
argument_list|(
name|STRING_FIELD_NAME_2
argument_list|)
operator|.
name|splitOnWhitespace
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|queryBuilder
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|disjuncts1
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disjuncts1
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME_2
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|maxQuery1
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|disjuncts1
argument_list|,
literal|0.0f
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|disjuncts2
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disjuncts2
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME_2
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|maxQuery2
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|disjuncts2
argument_list|,
literal|0.0f
argument_list|)
decl_stmt|;
name|BooleanQuery
name|expectedQuery
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|maxQuery1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|maxQuery2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|equalTo
argument_list|(
name|expectedQuery
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// split_on_whitespace=false breaks range query with simple syntax
block|{
comment|// throws an exception when lenient is set to false
name|QueryStringQueryBuilder
name|queryBuilder
init|=
operator|new
name|QueryStringQueryBuilder
argument_list|(
literal|">10 foo"
argument_list|)
operator|.
name|field
argument_list|(
name|INT_FIELD_NAME
argument_list|)
operator|.
name|splitOnWhitespace
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|exc
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|queryBuilder
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exc
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"For input string: \"10 foo\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// returns an empty boolean query when lenient is set to true
name|QueryStringQueryBuilder
name|queryBuilder
init|=
operator|new
name|QueryStringQueryBuilder
argument_list|(
literal|">10 foo"
argument_list|)
operator|.
name|field
argument_list|(
name|INT_FIELD_NAME
argument_list|)
operator|.
name|splitOnWhitespace
argument_list|(
literal|false
argument_list|)
operator|.
name|lenient
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|queryBuilder
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|bq
argument_list|,
name|equalTo
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// splitOnWhitespace=true
block|{
name|QueryStringQueryBuilder
name|queryBuilder
init|=
operator|new
name|QueryStringQueryBuilder
argument_list|(
literal|"foo bar"
argument_list|)
operator|.
name|field
argument_list|(
name|STRING_FIELD_NAME
argument_list|)
operator|.
name|field
argument_list|(
name|STRING_FIELD_NAME_2
argument_list|)
operator|.
name|splitOnWhitespace
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|queryBuilder
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|disjuncts1
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disjuncts1
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME_2
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|maxQuery1
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|disjuncts1
argument_list|,
literal|0.0f
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|disjuncts2
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disjuncts2
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME_2
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|maxQuery2
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|disjuncts2
argument_list|,
literal|0.0f
argument_list|)
decl_stmt|;
name|BooleanQuery
name|expectedQuery
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|maxQuery1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|maxQuery2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|equalTo
argument_list|(
name|expectedQuery
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFromJson
specifier|public
name|void
name|testFromJson
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|json
init|=
literal|"{\n"
operator|+
literal|"  \"query_string\" : {\n"
operator|+
literal|"    \"query\" : \"this AND that OR thus\",\n"
operator|+
literal|"    \"default_field\" : \"content\",\n"
operator|+
literal|"    \"fields\" : [ ],\n"
operator|+
literal|"    \"use_dis_max\" : true,\n"
operator|+
literal|"    \"tie_breaker\" : 0.0,\n"
operator|+
literal|"    \"default_operator\" : \"or\",\n"
operator|+
literal|"    \"auto_generate_phrase_queries\" : false,\n"
operator|+
literal|"    \"max_determined_states\" : 10000,\n"
operator|+
literal|"    \"lowercase_expanded_terms\" : true,\n"
operator|+
literal|"    \"enable_position_increment\" : true,\n"
operator|+
literal|"    \"fuzziness\" : \"AUTO\",\n"
operator|+
literal|"    \"fuzzy_prefix_length\" : 0,\n"
operator|+
literal|"    \"fuzzy_max_expansions\" : 50,\n"
operator|+
literal|"    \"phrase_slop\" : 0,\n"
operator|+
literal|"    \"locale\" : \"und\",\n"
operator|+
literal|"    \"escape\" : false,\n"
operator|+
literal|"    \"split_on_whitespace\" : true,\n"
operator|+
literal|"    \"boost\" : 1.0\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
name|QueryStringQueryBuilder
name|parsed
init|=
operator|(
name|QueryStringQueryBuilder
operator|)
name|parseQuery
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|checkGeneratedJson
argument_list|(
name|json
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
literal|"this AND that OR thus"
argument_list|,
name|parsed
operator|.
name|queryString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
literal|"content"
argument_list|,
name|parsed
operator|.
name|defaultField
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

