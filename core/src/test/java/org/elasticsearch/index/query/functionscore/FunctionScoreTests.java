begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query.functionscore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|exp
operator|.
name|ExponentialDecayFunctionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|gauss
operator|.
name|GaussDecayFunctionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|lin
operator|.
name|LinearDecayFunctionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MultiValueMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsEqual
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|FunctionScoreTests
specifier|public
class|class
name|FunctionScoreTests
extends|extends
name|ESTestCase
block|{
DECL|field|UNSUPPORTED
specifier|private
specifier|static
specifier|final
name|String
name|UNSUPPORTED
init|=
literal|"Method not implemented. This is just a stub for testing."
decl_stmt|;
DECL|class|IndexFieldDataStub
class|class
name|IndexFieldDataStub
implements|implements
name|IndexFieldData
argument_list|<
name|AtomicFieldData
argument_list|>
block|{
annotation|@
name|Override
DECL|method|getFieldNames
specifier|public
name|MappedFieldType
operator|.
name|Names
name|getFieldNames
parameter_list|()
block|{
return|return
operator|new
name|MappedFieldType
operator|.
name|Names
argument_list|(
literal|"test"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFieldDataType
specifier|public
name|FieldDataType
name|getFieldDataType
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|AtomicFieldData
name|load
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|AtomicFieldData
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ScriptDocValues
name|getScriptValues
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|SortedBinaryDocValues
name|getBytesValues
parameter_list|()
block|{
return|return
operator|new
name|SortedBinaryDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{                         }
annotation|@
name|Override
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|valueAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|BytesRef
argument_list|(
literal|"0"
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{                 }
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|loadDirect
specifier|public
name|AtomicFieldData
name|loadDirect
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|comparatorSource
specifier|public
name|IndexFieldData
operator|.
name|XFieldComparatorSource
name|comparatorSource
parameter_list|(
annotation|@
name|Nullable
name|Object
name|missingValue
parameter_list|,
name|MultiValueMode
name|sortMode
parameter_list|,
name|IndexFieldData
operator|.
name|XFieldComparatorSource
operator|.
name|Nested
name|nested
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|index
specifier|public
name|Index
name|index
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
block|}
DECL|class|IndexNumericFieldDataStub
class|class
name|IndexNumericFieldDataStub
implements|implements
name|IndexNumericFieldData
block|{
annotation|@
name|Override
DECL|method|getNumericType
specifier|public
name|NumericType
name|getNumericType
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getFieldNames
specifier|public
name|MappedFieldType
operator|.
name|Names
name|getFieldNames
parameter_list|()
block|{
return|return
operator|new
name|MappedFieldType
operator|.
name|Names
argument_list|(
literal|"test"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFieldDataType
specifier|public
name|FieldDataType
name|getFieldDataType
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|AtomicNumericFieldData
name|load
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|AtomicNumericFieldData
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SortedNumericDocValues
name|getLongValues
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|SortedNumericDoubleValues
name|getDoubleValues
parameter_list|()
block|{
return|return
operator|new
name|SortedNumericDoubleValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|doc
parameter_list|)
block|{                         }
annotation|@
name|Override
specifier|public
name|double
name|valueAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|ScriptDocValues
name|getScriptValues
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|SortedBinaryDocValues
name|getBytesValues
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{                 }
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|loadDirect
specifier|public
name|AtomicNumericFieldData
name|loadDirect
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|comparatorSource
specifier|public
name|XFieldComparatorSource
name|comparatorSource
parameter_list|(
annotation|@
name|Nullable
name|Object
name|missingValue
parameter_list|,
name|MultiValueMode
name|sortMode
parameter_list|,
name|XFieldComparatorSource
operator|.
name|Nested
name|nested
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|index
specifier|public
name|Index
name|index
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|UNSUPPORTED
argument_list|)
throw|;
block|}
block|}
DECL|field|TEXT
specifier|private
specifier|static
specifier|final
name|String
name|TEXT
init|=
literal|"The way out is through."
decl_stmt|;
DECL|field|FIELD
specifier|private
specifier|static
specifier|final
name|String
name|FIELD
init|=
literal|"test"
decl_stmt|;
DECL|field|TERM
specifier|private
specifier|static
specifier|final
name|Term
name|TERM
init|=
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"through"
argument_list|)
decl_stmt|;
DECL|field|dir
specifier|private
name|Directory
name|dir
decl_stmt|;
DECL|field|w
specifier|private
name|IndexWriter
name|w
decl_stmt|;
DECL|field|reader
specifier|private
name|DirectoryReader
name|reader
decl_stmt|;
DECL|field|searcher
specifier|private
name|IndexSearcher
name|searcher
decl_stmt|;
annotation|@
name|Before
DECL|method|initSearcher
specifier|public
name|void
name|initSearcher
parameter_list|()
throws|throws
name|IOException
block|{
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|w
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|ft
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|FIELD
argument_list|,
name|TEXT
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|reader
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|closeAllTheReaders
specifier|public
name|void
name|closeAllTheReaders
parameter_list|()
throws|throws
name|IOException
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExplainFunctionScoreQuery
specifier|public
name|void
name|testExplainFunctionScoreQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|Explanation
name|functionExplanation
init|=
name|getFunctionScoreExplanation
argument_list|(
name|searcher
argument_list|,
operator|new
name|RandomScoreFunction
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|IndexFieldDataStub
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|checkFunctionScoreExplanation
argument_list|(
name|functionExplanation
argument_list|,
literal|"random score function (seed: 0)"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|functionExplanation
operator|=
name|getFunctionScoreExplanation
argument_list|(
name|searcher
argument_list|,
operator|new
name|FieldValueFactorFunction
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|,
name|FieldValueFactorFunction
operator|.
name|Modifier
operator|.
name|LN
argument_list|,
operator|new
name|Double
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|checkFunctionScoreExplanation
argument_list|(
name|functionExplanation
argument_list|,
literal|"field value function: ln(doc['test'].value?:1.0 * factor=1.0)"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|functionExplanation
operator|=
name|getFunctionScoreExplanation
argument_list|(
name|searcher
argument_list|,
operator|new
name|DecayFunctionBuilder
operator|.
name|NumericFieldDataScoreFunction
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0.1
argument_list|,
literal|0
argument_list|,
name|GaussDecayFunctionBuilder
operator|.
name|GAUSS_DECAY_FUNCTION
argument_list|,
operator|new
name|IndexNumericFieldDataStub
argument_list|()
argument_list|,
name|MultiValueMode
operator|.
name|MAX
argument_list|)
argument_list|)
expr_stmt|;
name|checkFunctionScoreExplanation
argument_list|(
name|functionExplanation
argument_list|,
literal|"Function for field test:"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"0.1 = exp(-0.5*pow(MAX[Math.max(Math.abs(1.0(=doc value) - 0.0(=origin))) - 0.0(=offset), 0)],2.0)/0.21714724095162594)\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|functionExplanation
operator|=
name|getFunctionScoreExplanation
argument_list|(
name|searcher
argument_list|,
operator|new
name|DecayFunctionBuilder
operator|.
name|NumericFieldDataScoreFunction
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0.1
argument_list|,
literal|0
argument_list|,
name|ExponentialDecayFunctionBuilder
operator|.
name|EXP_DECAY_FUNCTION
argument_list|,
operator|new
name|IndexNumericFieldDataStub
argument_list|()
argument_list|,
name|MultiValueMode
operator|.
name|MAX
argument_list|)
argument_list|)
expr_stmt|;
name|checkFunctionScoreExplanation
argument_list|(
name|functionExplanation
argument_list|,
literal|"Function for field test:"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"0.1 = exp(- MAX[Math.max(Math.abs(1.0(=doc value) - 0.0(=origin))) - 0.0(=offset), 0)] * 2.3025850929940455)\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|functionExplanation
operator|=
name|getFunctionScoreExplanation
argument_list|(
name|searcher
argument_list|,
operator|new
name|DecayFunctionBuilder
operator|.
name|NumericFieldDataScoreFunction
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0.1
argument_list|,
literal|0
argument_list|,
name|LinearDecayFunctionBuilder
operator|.
name|LINEAR_DECAY_FUNCTION
argument_list|,
operator|new
name|IndexNumericFieldDataStub
argument_list|()
argument_list|,
name|MultiValueMode
operator|.
name|MAX
argument_list|)
argument_list|)
expr_stmt|;
name|checkFunctionScoreExplanation
argument_list|(
name|functionExplanation
argument_list|,
literal|"Function for field test:"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"0.1 = max(0.0, ((1.1111111111111112 - MAX[Math.max(Math.abs(1.0(=doc value) - 0.0(=origin))) - 0.0(=offset), 0)])/1.1111111111111112)\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getFunctionScoreExplanation
specifier|public
name|Explanation
name|getFunctionScoreExplanation
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|ScoreFunction
name|scoreFunction
parameter_list|)
throws|throws
name|IOException
block|{
name|FunctionScoreQuery
name|functionScoreQuery
init|=
operator|new
name|FunctionScoreQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|TERM
argument_list|)
argument_list|,
name|scoreFunction
argument_list|,
literal|0.0f
argument_list|,
name|CombineFunction
operator|.
name|AVG
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Weight
name|weight
init|=
name|functionScoreQuery
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Explanation
name|explanation
init|=
name|weight
operator|.
name|explain
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|explanation
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
return|;
block|}
DECL|method|checkFunctionScoreExplanation
specifier|public
name|void
name|checkFunctionScoreExplanation
parameter_list|(
name|Explanation
name|randomExplanation
parameter_list|,
name|String
name|functionExpl
parameter_list|)
block|{
name|assertThat
argument_list|(
name|randomExplanation
operator|.
name|getDescription
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"min of:"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|randomExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDescription
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|functionExpl
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExplainFiltersFunctionScoreQuery
specifier|public
name|void
name|testExplainFiltersFunctionScoreQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|Explanation
name|functionExplanation
init|=
name|getFiltersFunctionScoreExplanation
argument_list|(
name|searcher
argument_list|,
operator|new
name|RandomScoreFunction
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|IndexFieldDataStub
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|checkFiltersFunctionScoreExplanation
argument_list|(
name|functionExplanation
argument_list|,
literal|"random score function (seed: 0)"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDetails
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|functionExplanation
operator|=
name|getFiltersFunctionScoreExplanation
argument_list|(
name|searcher
argument_list|,
operator|new
name|FieldValueFactorFunction
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|,
name|FieldValueFactorFunction
operator|.
name|Modifier
operator|.
name|LN
argument_list|,
operator|new
name|Double
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|checkFiltersFunctionScoreExplanation
argument_list|(
name|functionExplanation
argument_list|,
literal|"field value function: ln(doc['test'].value?:1.0 * factor=1.0)"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDetails
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|functionExplanation
operator|=
name|getFiltersFunctionScoreExplanation
argument_list|(
name|searcher
argument_list|,
operator|new
name|DecayFunctionBuilder
operator|.
name|NumericFieldDataScoreFunction
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0.1
argument_list|,
literal|0
argument_list|,
name|GaussDecayFunctionBuilder
operator|.
name|GAUSS_DECAY_FUNCTION
argument_list|,
operator|new
name|IndexNumericFieldDataStub
argument_list|()
argument_list|,
name|MultiValueMode
operator|.
name|MAX
argument_list|)
argument_list|)
expr_stmt|;
name|checkFiltersFunctionScoreExplanation
argument_list|(
name|functionExplanation
argument_list|,
literal|"Function for field test:"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"0.1 = exp(-0.5*pow(MAX[Math.max(Math.abs(1.0(=doc value) - 0.0(=origin))) - 0.0(=offset), 0)],2.0)/0.21714724095162594)\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// now test all together
name|functionExplanation
operator|=
name|getFiltersFunctionScoreExplanation
argument_list|(
name|searcher
argument_list|,
operator|new
name|RandomScoreFunction
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|IndexFieldDataStub
argument_list|()
argument_list|)
argument_list|,
operator|new
name|FieldValueFactorFunction
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|,
name|FieldValueFactorFunction
operator|.
name|Modifier
operator|.
name|LN
argument_list|,
operator|new
name|Double
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|DecayFunctionBuilder
operator|.
name|NumericFieldDataScoreFunction
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0.1
argument_list|,
literal|0
argument_list|,
name|GaussDecayFunctionBuilder
operator|.
name|GAUSS_DECAY_FUNCTION
argument_list|,
operator|new
name|IndexNumericFieldDataStub
argument_list|()
argument_list|,
name|MultiValueMode
operator|.
name|MAX
argument_list|)
argument_list|,
operator|new
name|DecayFunctionBuilder
operator|.
name|NumericFieldDataScoreFunction
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0.1
argument_list|,
literal|0
argument_list|,
name|ExponentialDecayFunctionBuilder
operator|.
name|EXP_DECAY_FUNCTION
argument_list|,
operator|new
name|IndexNumericFieldDataStub
argument_list|()
argument_list|,
name|MultiValueMode
operator|.
name|MAX
argument_list|)
argument_list|,
operator|new
name|DecayFunctionBuilder
operator|.
name|NumericFieldDataScoreFunction
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0.1
argument_list|,
literal|0
argument_list|,
name|LinearDecayFunctionBuilder
operator|.
name|LINEAR_DECAY_FUNCTION
argument_list|,
operator|new
name|IndexNumericFieldDataStub
argument_list|()
argument_list|,
name|MultiValueMode
operator|.
name|MAX
argument_list|)
argument_list|)
expr_stmt|;
name|checkFiltersFunctionScoreExplanation
argument_list|(
name|functionExplanation
argument_list|,
literal|"random score function (seed: 0)"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDetails
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkFiltersFunctionScoreExplanation
argument_list|(
name|functionExplanation
argument_list|,
literal|"field value function: ln(doc['test'].value?:1.0 * factor=1.0)"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDetails
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkFiltersFunctionScoreExplanation
argument_list|(
name|functionExplanation
argument_list|,
literal|"Function for field test:"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|2
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"0.1 = exp(-0.5*pow(MAX[Math.max(Math.abs(1.0(=doc value) - 0.0(=origin))) - 0.0(=offset), 0)],2.0)/0.21714724095162594)\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|2
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkFiltersFunctionScoreExplanation
argument_list|(
name|functionExplanation
argument_list|,
literal|"Function for field test:"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|3
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"0.1 = exp(- MAX[Math.max(Math.abs(1.0(=doc value) - 0.0(=origin))) - 0.0(=offset), 0)] * 2.3025850929940455)\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|3
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkFiltersFunctionScoreExplanation
argument_list|(
name|functionExplanation
argument_list|,
literal|"Function for field test:"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|4
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"0.1 = max(0.0, ((1.1111111111111112 - MAX[Math.max(Math.abs(1.0(=doc value) - 0.0(=origin))) - 0.0(=offset), 0)])/1.1111111111111112)\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|4
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getFiltersFunctionScoreExplanation
specifier|public
name|Explanation
name|getFiltersFunctionScoreExplanation
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|ScoreFunction
modifier|...
name|scoreFunctions
parameter_list|)
throws|throws
name|IOException
block|{
name|FiltersFunctionScoreQuery
operator|.
name|FilterFunction
index|[]
name|filterFunctions
init|=
operator|new
name|FiltersFunctionScoreQuery
operator|.
name|FilterFunction
index|[
name|scoreFunctions
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scoreFunctions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|filterFunctions
index|[
name|i
index|]
operator|=
operator|new
name|FiltersFunctionScoreQuery
operator|.
name|FilterFunction
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|TERM
argument_list|)
argument_list|,
name|scoreFunctions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|FiltersFunctionScoreQuery
name|filtersFunctionScoreQuery
init|=
operator|new
name|FiltersFunctionScoreQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|TERM
argument_list|)
argument_list|,
name|FiltersFunctionScoreQuery
operator|.
name|ScoreMode
operator|.
name|AVG
argument_list|,
name|filterFunctions
argument_list|,
literal|100
argument_list|,
operator|new
name|Float
argument_list|(
literal|0.0
argument_list|)
argument_list|,
name|CombineFunction
operator|.
name|AVG
argument_list|)
decl_stmt|;
name|Weight
name|weight
init|=
name|filtersFunctionScoreQuery
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Explanation
name|explanation
init|=
name|weight
operator|.
name|explain
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|explanation
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
return|;
block|}
DECL|method|checkFiltersFunctionScoreExplanation
specifier|public
name|void
name|checkFiltersFunctionScoreExplanation
parameter_list|(
name|Explanation
name|randomExplanation
parameter_list|,
name|String
name|functionExpl
parameter_list|,
name|int
name|whichFunction
parameter_list|)
block|{
name|assertThat
argument_list|(
name|randomExplanation
operator|.
name|getDescription
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"min of:"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|randomExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDescription
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"function score, score mode [avg]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|randomExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
name|whichFunction
index|]
operator|.
name|getDescription
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"function score, product of:"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|randomExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
name|whichFunction
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDescription
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"match filter: "
operator|+
name|FIELD
operator|+
literal|":"
operator|+
name|TERM
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|randomExplanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
name|whichFunction
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDescription
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|functionExpl
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

