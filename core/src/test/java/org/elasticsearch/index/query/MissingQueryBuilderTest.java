begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|FieldNamesFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|object
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_class
DECL|class|MissingQueryBuilderTest
specifier|public
class|class
name|MissingQueryBuilderTest
extends|extends
name|BaseQueryTestCase
argument_list|<
name|MissingQueryBuilder
argument_list|>
block|{
annotation|@
name|Override
DECL|method|doCreateTestQueryBuilder
specifier|protected
name|MissingQueryBuilder
name|doCreateTestQueryBuilder
parameter_list|()
block|{
name|MissingQueryBuilder
name|query
init|=
operator|new
name|MissingQueryBuilder
argument_list|(
name|getRandomFieldName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|query
operator|.
name|nullValue
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|query
operator|.
name|existence
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// cannot set both to false
if|if
condition|(
operator|(
name|query
operator|.
name|nullValue
argument_list|()
operator|==
literal|false
operator|)
operator|&&
operator|(
name|query
operator|.
name|existence
argument_list|()
operator|==
literal|false
operator|)
condition|)
block|{
name|query
operator|.
name|existence
argument_list|(
operator|!
name|query
operator|.
name|existence
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
DECL|method|getRandomFieldName
specifier|private
name|String
name|getRandomFieldName
parameter_list|()
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
return|return
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
return|;
block|}
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
return|return
name|BOOLEAN_FIELD_NAME
return|;
case|case
literal|1
case|:
return|return
name|STRING_FIELD_NAME
return|;
case|case
literal|2
case|:
return|return
name|INT_FIELD_NAME
return|;
case|case
literal|3
case|:
return|return
name|DOUBLE_FIELD_NAME
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|doCreateExpectedQuery
specifier|protected
name|Query
name|doCreateExpectedQuery
parameter_list|(
name|MissingQueryBuilder
name|queryBuilder
parameter_list|,
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|existence
init|=
name|queryBuilder
operator|.
name|existence
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|nullValue
init|=
name|queryBuilder
operator|.
name|nullValue
argument_list|()
decl_stmt|;
name|String
name|fieldPattern
init|=
name|queryBuilder
operator|.
name|fieldPattern
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|existence
operator|&&
operator|!
name|nullValue
condition|)
block|{
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|context
argument_list|,
literal|"missing must have either existence, or null_value, or both set to true"
argument_list|)
throw|;
block|}
specifier|final
name|FieldNamesFieldMapper
operator|.
name|FieldNamesFieldType
name|fieldNamesFieldType
init|=
operator|(
name|FieldNamesFieldMapper
operator|.
name|FieldNamesFieldType
operator|)
name|context
operator|.
name|mapperService
argument_list|()
operator|.
name|fullName
argument_list|(
name|FieldNamesFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldNamesFieldType
operator|==
literal|null
condition|)
block|{
comment|// can only happen when no types exist, so no docs exist either
return|return
name|Queries
operator|.
name|newMatchNoDocsQuery
argument_list|()
return|;
block|}
name|ObjectMapper
name|objectMapper
init|=
name|context
operator|.
name|getObjectMapper
argument_list|(
name|fieldPattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|objectMapper
operator|!=
literal|null
condition|)
block|{
comment|// automatic make the object mapper pattern
name|fieldPattern
operator|=
name|fieldPattern
operator|+
literal|".*"
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|context
operator|.
name|simpleMatchToIndexNames
argument_list|(
name|fieldPattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|existence
condition|)
block|{
comment|// if we ask for existence of fields, and we found none, then we should match on all
return|return
name|Queries
operator|.
name|newMatchAllQuery
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
name|Query
name|existenceFilter
init|=
literal|null
decl_stmt|;
name|Query
name|nullFilter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|existence
condition|)
block|{
name|BooleanQuery
name|boolFilter
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|MappedFieldType
name|fieldType
init|=
name|context
operator|.
name|fieldMapper
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|Query
name|filter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fieldNamesFieldType
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
specifier|final
name|String
name|f
decl_stmt|;
if|if
condition|(
name|fieldType
operator|!=
literal|null
condition|)
block|{
name|f
operator|=
name|fieldType
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|f
operator|=
name|field
expr_stmt|;
block|}
name|filter
operator|=
name|fieldNamesFieldType
operator|.
name|termQuery
argument_list|(
name|f
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|// if _field_names are not indexed, we need to go the slow way
if|if
condition|(
name|filter
operator|==
literal|null
operator|&&
name|fieldType
operator|!=
literal|null
condition|)
block|{
name|filter
operator|=
name|fieldType
operator|.
name|rangeQuery
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
name|filter
operator|=
operator|new
name|TermRangeQuery
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|boolFilter
operator|.
name|add
argument_list|(
name|filter
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
name|existenceFilter
operator|=
name|boolFilter
expr_stmt|;
name|existenceFilter
operator|=
name|Queries
operator|.
name|not
argument_list|(
name|existenceFilter
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
if|if
condition|(
name|nullValue
condition|)
block|{
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|MappedFieldType
name|fieldType
init|=
name|context
operator|.
name|fieldMapper
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|!=
literal|null
condition|)
block|{
name|nullFilter
operator|=
name|fieldType
operator|.
name|nullValueQuery
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|Query
name|filter
decl_stmt|;
if|if
condition|(
name|nullFilter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existenceFilter
operator|!=
literal|null
condition|)
block|{
name|BooleanQuery
name|combined
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|combined
operator|.
name|add
argument_list|(
name|existenceFilter
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|combined
operator|.
name|add
argument_list|(
name|nullFilter
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// cache the not filter as well, so it will be faster
name|filter
operator|=
name|combined
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
name|nullFilter
expr_stmt|;
block|}
block|}
else|else
block|{
name|filter
operator|=
name|existenceFilter
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ConstantScoreQuery
argument_list|(
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testValidate
specifier|public
name|void
name|testValidate
parameter_list|()
block|{
name|MissingQueryBuilder
name|missingQueryBuilder
init|=
operator|new
name|MissingQueryBuilder
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|missingQueryBuilder
operator|.
name|validate
argument_list|()
operator|.
name|validationErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|missingQueryBuilder
operator|=
operator|new
name|MissingQueryBuilder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|missingQueryBuilder
operator|.
name|validate
argument_list|()
operator|.
name|validationErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|missingQueryBuilder
operator|=
operator|new
name|MissingQueryBuilder
argument_list|(
literal|"field"
argument_list|)
operator|.
name|existence
argument_list|(
literal|false
argument_list|)
operator|.
name|nullValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|missingQueryBuilder
operator|.
name|validate
argument_list|()
operator|.
name|validationErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|missingQueryBuilder
operator|=
operator|new
name|MissingQueryBuilder
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|missingQueryBuilder
operator|.
name|validate
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|QueryParsingException
operator|.
name|class
argument_list|)
DECL|method|testBothNullValueAndExistenceFalse
specifier|public
name|void
name|testBothNullValueAndExistenceFalse
parameter_list|()
throws|throws
name|IOException
block|{
name|QueryParseContext
name|context
init|=
name|createContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setAllowUnmappedFields
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MissingQueryBuilder
operator|.
name|newFilter
argument_list|(
name|context
argument_list|,
literal|"field"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

