begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|memory
operator|.
name|MemoryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|MoreLikeThisQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MoreLikeThisQueryBuilder
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_class
DECL|class|MoreLikeThisQueryBuilderTests
specifier|public
class|class
name|MoreLikeThisQueryBuilderTests
extends|extends
name|AbstractQueryTestCase
argument_list|<
name|MoreLikeThisQueryBuilder
argument_list|>
block|{
DECL|field|randomFields
specifier|private
specifier|static
name|String
index|[]
name|randomFields
decl_stmt|;
DECL|field|randomLikeItems
specifier|private
specifier|static
name|Item
index|[]
name|randomLikeItems
decl_stmt|;
DECL|field|randomUnlikeItems
specifier|private
specifier|static
name|Item
index|[]
name|randomUnlikeItems
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
block|{
comment|// MLT only supports string fields, unsupported fields are tested below
name|randomFields
operator|=
name|randomStringFields
argument_list|()
expr_stmt|;
comment|// we also preset the item requests
name|randomLikeItems
operator|=
operator|new
name|Item
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomLikeItems
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|randomLikeItems
index|[
name|i
index|]
operator|=
name|generateRandomItem
argument_list|()
expr_stmt|;
block|}
comment|// and for the unlike items too
name|randomUnlikeItems
operator|=
operator|new
name|Item
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomUnlikeItems
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|randomUnlikeItems
index|[
name|i
index|]
operator|=
name|generateRandomItem
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|randomStringFields
specifier|private
specifier|static
name|String
index|[]
name|randomStringFields
parameter_list|()
block|{
name|String
index|[]
name|mappedStringFields
init|=
operator|new
name|String
index|[]
block|{
name|STRING_FIELD_NAME
block|,
name|STRING_FIELD_NAME_2
block|}
decl_stmt|;
name|String
index|[]
name|unmappedStringFields
init|=
name|generateRandomStringArray
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|Stream
operator|.
name|concat
argument_list|(
name|Arrays
operator|.
name|stream
argument_list|(
name|mappedStringFields
argument_list|)
argument_list|,
name|Arrays
operator|.
name|stream
argument_list|(
name|unmappedStringFields
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
return|;
block|}
DECL|method|generateRandomItem
specifier|private
name|Item
name|generateRandomItem
parameter_list|()
block|{
name|String
name|index
init|=
name|randomBoolean
argument_list|()
condition|?
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|type
init|=
name|getRandomType
argument_list|()
decl_stmt|;
comment|// set to one type to avoid ambiguous types
comment|// indexed item or artificial document
name|Item
name|item
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|item
operator|=
operator|new
name|Item
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|item
operator|=
operator|new
name|Item
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|randomArtificialDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if no field is specified MLT uses all mapped fields for this item
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|item
operator|.
name|fields
argument_list|(
name|randomFrom
argument_list|(
name|randomFields
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// per field analyzer
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|item
operator|.
name|perFieldAnalyzer
argument_list|(
name|randomPerFieldAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|item
operator|.
name|routing
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|item
operator|.
name|version
argument_list|(
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|item
operator|.
name|versionType
argument_list|(
name|randomFrom
argument_list|(
name|VersionType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|item
return|;
block|}
DECL|method|randomArtificialDoc
specifier|private
name|XContentBuilder
name|randomArtificialDoc
parameter_list|()
block|{
name|XContentBuilder
name|doc
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|randomFields
control|)
block|{
name|doc
operator|.
name|field
argument_list|(
name|field
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Unable to generate random artificial doc!"
argument_list|)
throw|;
block|}
return|return
name|doc
return|;
block|}
DECL|method|randomPerFieldAnalyzer
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|randomPerFieldAnalyzer
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|perFieldAnalyzer
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|randomFields
control|)
block|{
name|perFieldAnalyzer
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|randomAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|perFieldAnalyzer
return|;
block|}
annotation|@
name|Override
DECL|method|doCreateTestQueryBuilder
specifier|protected
name|MoreLikeThisQueryBuilder
name|doCreateTestQueryBuilder
parameter_list|()
block|{
name|MoreLikeThisQueryBuilder
name|queryBuilder
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// for the default field
name|queryBuilder
operator|=
operator|new
name|MoreLikeThisQueryBuilder
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|queryBuilder
operator|=
operator|new
name|MoreLikeThisQueryBuilder
argument_list|(
name|randomFields
argument_list|)
expr_stmt|;
block|}
comment|// like field is required
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|like
argument_list|(
name|generateRandomStringArray
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queryBuilder
operator|.
name|like
argument_list|(
name|randomLikeItems
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|unlike
argument_list|(
name|generateRandomStringArray
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|unlike
argument_list|(
name|randomUnlikeItems
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|maxQueryTerms
argument_list|(
name|randomInt
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|minTermFreq
argument_list|(
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|minDocFreq
argument_list|(
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|maxDocFreq
argument_list|(
name|randomInt
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|minWordLength
argument_list|(
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|maxWordLength
argument_list|(
name|randomInt
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|stopWords
argument_list|(
name|generateRandomStringArray
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|analyzer
argument_list|(
name|randomAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix the analyzer?
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|minimumShouldMatch
argument_list|(
name|randomMinimumShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|boostTerms
argument_list|(
name|randomFloat
argument_list|()
operator|*
literal|10
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|include
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|failOnUnsupportedField
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|queryBuilder
return|;
block|}
annotation|@
name|Override
DECL|method|executeMultiTermVectors
specifier|protected
name|MultiTermVectorsResponse
name|executeMultiTermVectors
parameter_list|(
name|MultiTermVectorsRequest
name|mtvRequest
parameter_list|)
block|{
try|try
block|{
name|MultiTermVectorsItemResponse
index|[]
name|responses
init|=
operator|new
name|MultiTermVectorsItemResponse
index|[
name|mtvRequest
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TermVectorsRequest
name|request
range|:
name|mtvRequest
control|)
block|{
name|TermVectorsResponse
name|response
init|=
operator|new
name|TermVectorsResponse
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|setExists
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Fields
name|generatedFields
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|doc
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|generatedFields
operator|=
name|generateFields
argument_list|(
name|randomFields
argument_list|,
name|request
operator|.
name|doc
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|generatedFields
operator|=
name|generateFields
argument_list|(
name|request
operator|.
name|selectedFields
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EnumSet
argument_list|<
name|TermVectorsRequest
operator|.
name|Flag
argument_list|>
name|flags
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|TermVectorsRequest
operator|.
name|Flag
operator|.
name|Positions
argument_list|,
name|TermVectorsRequest
operator|.
name|Flag
operator|.
name|Offsets
argument_list|)
decl_stmt|;
name|response
operator|.
name|setFields
argument_list|(
name|generatedFields
argument_list|,
name|request
operator|.
name|selectedFields
argument_list|()
argument_list|,
name|flags
argument_list|,
name|generatedFields
argument_list|)
expr_stmt|;
name|responses
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|MultiTermVectorsItemResponse
argument_list|(
name|response
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MultiTermVectorsResponse
argument_list|(
name|responses
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"boom"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * Here we could go overboard and use a pre-generated indexed random document for a given Item,      * but for now we'd prefer to simply return the id as the content of the document and that for      * every field.      */
DECL|method|generateFields
specifier|private
specifier|static
name|Fields
name|generateFields
parameter_list|(
name|String
index|[]
name|fieldNames
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|MemoryIndex
name|index
init|=
operator|new
name|MemoryIndex
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
name|index
operator|.
name|addField
argument_list|(
name|fieldName
argument_list|,
name|text
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|MultiFields
operator|.
name|getFields
argument_list|(
name|index
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doAssertLuceneQuery
specifier|protected
name|void
name|doAssertLuceneQuery
parameter_list|(
name|MoreLikeThisQueryBuilder
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|queryBuilder
operator|.
name|likeItems
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|Matchers
operator|.
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we rely on integration tests for a deeper check here
name|assertThat
argument_list|(
name|query
argument_list|,
name|Matchers
operator|.
name|instanceOf
argument_list|(
name|MoreLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testValidate
specifier|public
name|void
name|testValidate
parameter_list|()
block|{
name|MoreLikeThisQueryBuilder
name|queryBuilder
init|=
operator|new
name|MoreLikeThisQueryBuilder
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|queryBuilder
operator|.
name|validate
argument_list|()
operator|.
name|validationErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|queryBuilder
operator|=
operator|new
name|MoreLikeThisQueryBuilder
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
operator|.
name|like
argument_list|(
literal|"some text"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|queryBuilder
operator|.
name|validate
argument_list|()
operator|.
name|validationErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|queryBuilder
operator|=
operator|new
name|MoreLikeThisQueryBuilder
argument_list|(
literal|"field"
argument_list|)
operator|.
name|like
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|queryBuilder
operator|.
name|validate
argument_list|()
operator|.
name|validationErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|queryBuilder
operator|=
operator|new
name|MoreLikeThisQueryBuilder
argument_list|(
literal|"field"
argument_list|)
operator|.
name|like
argument_list|(
name|Item
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|queryBuilder
operator|.
name|validate
argument_list|()
operator|.
name|validationErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|queryBuilder
operator|=
operator|new
name|MoreLikeThisQueryBuilder
argument_list|(
literal|"field"
argument_list|)
operator|.
name|like
argument_list|(
literal|"some text"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queryBuilder
operator|.
name|validate
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnsupportedFields
specifier|public
name|void
name|testUnsupportedFields
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|unsupportedField
init|=
name|randomFrom
argument_list|(
name|INT_FIELD_NAME
argument_list|,
name|DOUBLE_FIELD_NAME
argument_list|,
name|DATE_FIELD_NAME
argument_list|)
decl_stmt|;
name|MoreLikeThisQueryBuilder
name|queryBuilder
init|=
operator|new
name|MoreLikeThisQueryBuilder
argument_list|(
name|unsupportedField
argument_list|)
operator|.
name|like
argument_list|(
literal|"some text"
argument_list|)
operator|.
name|failOnUnsupportedField
argument_list|(
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|queryBuilder
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed with IllegalArgumentException for field: "
operator|+
name|unsupportedField
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Matchers
operator|.
name|containsString
argument_list|(
literal|"more_like_this doesn't support binary/numeric fields"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testItemSerialization
specifier|public
name|void
name|testItemSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|Item
name|expectedItem
init|=
name|generateRandomItem
argument_list|()
decl_stmt|;
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|expectedItem
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|Item
name|newItem
init|=
name|Item
operator|.
name|readItemFrom
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedItem
argument_list|,
name|newItem
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testItemFromXContent
specifier|public
name|void
name|testItemFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
name|Item
name|expectedItem
init|=
name|generateRandomItem
argument_list|()
decl_stmt|;
name|String
name|json
init|=
name|expectedItem
operator|.
name|toXContent
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
operator|.
name|string
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|json
argument_list|)
operator|.
name|createParser
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|Item
name|newItem
init|=
name|Item
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|,
operator|new
name|Item
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedItem
argument_list|,
name|newItem
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

