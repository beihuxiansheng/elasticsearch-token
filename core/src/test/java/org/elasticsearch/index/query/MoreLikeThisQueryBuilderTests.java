begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|memory
operator|.
name|MemoryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|MultiTermVectorsItemResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|MultiTermVectorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|MultiTermVectorsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|TermVectorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|TermVectorsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|MoreLikeThisQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MoreLikeThisQueryBuilder
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|AbstractQueryTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|moreLikeThisQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_class
DECL|class|MoreLikeThisQueryBuilderTests
specifier|public
class|class
name|MoreLikeThisQueryBuilderTests
extends|extends
name|AbstractQueryTestCase
argument_list|<
name|MoreLikeThisQueryBuilder
argument_list|>
block|{
DECL|field|SHUFFLE_PROTECTED_FIELDS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|SHUFFLE_PROTECTED_FIELDS
init|=
operator|new
name|String
index|[]
block|{
name|Item
operator|.
name|Field
operator|.
name|DOC
operator|.
name|getPreferredName
argument_list|()
block|}
decl_stmt|;
DECL|field|randomFields
specifier|private
specifier|static
name|String
index|[]
name|randomFields
decl_stmt|;
DECL|field|randomLikeItems
specifier|private
specifier|static
name|Item
index|[]
name|randomLikeItems
decl_stmt|;
DECL|field|randomUnlikeItems
specifier|private
specifier|static
name|Item
index|[]
name|randomUnlikeItems
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
block|{
comment|// MLT only supports string fields, unsupported fields are tested below
name|randomFields
operator|=
name|randomStringFields
argument_list|()
expr_stmt|;
comment|// we also preset the item requests
name|randomLikeItems
operator|=
operator|new
name|Item
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomLikeItems
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|randomLikeItems
index|[
name|i
index|]
operator|=
name|generateRandomItem
argument_list|()
expr_stmt|;
block|}
comment|// and for the unlike items too
name|randomUnlikeItems
operator|=
operator|new
name|Item
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomUnlikeItems
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|randomUnlikeItems
index|[
name|i
index|]
operator|=
name|generateRandomItem
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|randomStringFields
specifier|private
specifier|static
name|String
index|[]
name|randomStringFields
parameter_list|()
block|{
name|String
index|[]
name|mappedStringFields
init|=
operator|new
name|String
index|[]
block|{
name|STRING_FIELD_NAME
block|,
name|STRING_FIELD_NAME_2
block|}
decl_stmt|;
name|String
index|[]
name|unmappedStringFields
init|=
name|generateRandomStringArray
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|Stream
operator|.
name|concat
argument_list|(
name|Arrays
operator|.
name|stream
argument_list|(
name|mappedStringFields
argument_list|)
argument_list|,
name|Arrays
operator|.
name|stream
argument_list|(
name|unmappedStringFields
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
return|;
block|}
DECL|method|generateRandomItem
specifier|private
name|Item
name|generateRandomItem
parameter_list|()
block|{
name|String
name|index
init|=
name|randomBoolean
argument_list|()
condition|?
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|type
init|=
name|getRandomType
argument_list|()
decl_stmt|;
comment|// set to one type to avoid ambiguous types
comment|// indexed item or artificial document
name|Item
name|item
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|item
operator|=
operator|new
name|Item
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|item
operator|=
operator|new
name|Item
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|randomArtificialDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if no field is specified MLT uses all mapped fields for this item
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|item
operator|.
name|fields
argument_list|(
name|randomFrom
argument_list|(
name|randomFields
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// per field analyzer
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|item
operator|.
name|perFieldAnalyzer
argument_list|(
name|randomPerFieldAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|item
operator|.
name|routing
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|item
operator|.
name|version
argument_list|(
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|item
operator|.
name|versionType
argument_list|(
name|randomFrom
argument_list|(
name|VersionType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|item
return|;
block|}
DECL|method|randomArtificialDoc
specifier|private
name|XContentBuilder
name|randomArtificialDoc
parameter_list|()
block|{
name|XContentBuilder
name|doc
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|randomFields
control|)
block|{
name|doc
operator|.
name|field
argument_list|(
name|field
argument_list|,
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Unable to generate random artificial doc!"
argument_list|)
throw|;
block|}
return|return
name|doc
return|;
block|}
DECL|method|randomPerFieldAnalyzer
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|randomPerFieldAnalyzer
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|perFieldAnalyzer
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|randomFields
control|)
block|{
name|perFieldAnalyzer
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|randomAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|perFieldAnalyzer
return|;
block|}
annotation|@
name|Override
DECL|method|doCreateTestQueryBuilder
specifier|protected
name|MoreLikeThisQueryBuilder
name|doCreateTestQueryBuilder
parameter_list|()
block|{
name|MoreLikeThisQueryBuilder
name|queryBuilder
decl_stmt|;
name|String
index|[]
name|likeTexts
init|=
literal|null
decl_stmt|;
name|Item
index|[]
name|likeItems
init|=
literal|null
decl_stmt|;
comment|// like field is required
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|likeTexts
operator|=
name|generateRandomStringArray
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|likeItems
operator|=
name|randomLikeItems
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// for the default field
name|queryBuilder
operator|=
operator|new
name|MoreLikeThisQueryBuilder
argument_list|(
name|likeTexts
argument_list|,
name|likeItems
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queryBuilder
operator|=
operator|new
name|MoreLikeThisQueryBuilder
argument_list|(
name|randomFields
argument_list|,
name|likeTexts
argument_list|,
name|likeItems
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|unlike
argument_list|(
name|generateRandomStringArray
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|unlike
argument_list|(
name|randomUnlikeItems
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|maxQueryTerms
argument_list|(
name|randomInt
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|minTermFreq
argument_list|(
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|minDocFreq
argument_list|(
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|maxDocFreq
argument_list|(
name|randomInt
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|minWordLength
argument_list|(
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|maxWordLength
argument_list|(
name|randomInt
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|stopWords
argument_list|(
name|generateRandomStringArray
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|analyzer
argument_list|(
name|randomAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix the analyzer?
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|minimumShouldMatch
argument_list|(
name|randomMinimumShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|boostTerms
argument_list|(
name|randomFloat
argument_list|()
operator|*
literal|10
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|include
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|failOnUnsupportedField
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|queryBuilder
return|;
block|}
comment|/**      * we don't want to shuffle the "doc" field internally in {@link #testFromXContent()} because even though the      * documents would be functionally the same, their {@link BytesReference} representation isn't and thats what we      * compare when check for equality of the original and the shuffled builder      */
annotation|@
name|Override
DECL|method|shuffleProtectedFields
specifier|protected
name|String
index|[]
name|shuffleProtectedFields
parameter_list|()
block|{
return|return
name|SHUFFLE_PROTECTED_FIELDS
return|;
block|}
annotation|@
name|Override
DECL|method|getObjectsHoldingArbitraryContent
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getObjectsHoldingArbitraryContent
parameter_list|()
block|{
comment|//doc contains arbitrary content, anything can be added to it and no exception will be thrown
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|MoreLikeThisQueryBuilder
operator|.
name|Item
operator|.
name|Field
operator|.
name|DOC
operator|.
name|getPreferredName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|executeMultiTermVectors
specifier|protected
name|MultiTermVectorsResponse
name|executeMultiTermVectors
parameter_list|(
name|MultiTermVectorsRequest
name|mtvRequest
parameter_list|)
block|{
try|try
block|{
name|MultiTermVectorsItemResponse
index|[]
name|responses
init|=
operator|new
name|MultiTermVectorsItemResponse
index|[
name|mtvRequest
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TermVectorsRequest
name|request
range|:
name|mtvRequest
control|)
block|{
name|TermVectorsResponse
name|response
init|=
operator|new
name|TermVectorsResponse
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|setExists
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Fields
name|generatedFields
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|doc
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|generatedFields
operator|=
name|generateFields
argument_list|(
name|randomFields
argument_list|,
name|request
operator|.
name|doc
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|generatedFields
operator|=
name|generateFields
argument_list|(
name|request
operator|.
name|selectedFields
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|request
operator|.
name|selectedFields
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EnumSet
argument_list|<
name|TermVectorsRequest
operator|.
name|Flag
argument_list|>
name|flags
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|TermVectorsRequest
operator|.
name|Flag
operator|.
name|Positions
argument_list|,
name|TermVectorsRequest
operator|.
name|Flag
operator|.
name|Offsets
argument_list|)
decl_stmt|;
name|response
operator|.
name|setFields
argument_list|(
name|generatedFields
argument_list|,
name|request
operator|.
name|selectedFields
argument_list|()
argument_list|,
name|flags
argument_list|,
name|generatedFields
argument_list|)
expr_stmt|;
name|responses
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|MultiTermVectorsItemResponse
argument_list|(
name|response
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MultiTermVectorsResponse
argument_list|(
name|responses
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"boom"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * Here we could go overboard and use a pre-generated indexed random document for a given Item,      * but for now we'd prefer to simply return the id as the content of the document and that for      * every field.      */
DECL|method|generateFields
specifier|private
specifier|static
name|Fields
name|generateFields
parameter_list|(
name|String
index|[]
name|fieldNames
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|MemoryIndex
name|index
init|=
operator|new
name|MemoryIndex
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
name|index
operator|.
name|addField
argument_list|(
name|fieldName
argument_list|,
name|text
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|MultiFields
operator|.
name|getFields
argument_list|(
name|index
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doAssertLuceneQuery
specifier|protected
name|void
name|doAssertLuceneQuery
parameter_list|(
name|MoreLikeThisQueryBuilder
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|SearchContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|queryBuilder
operator|.
name|likeItems
argument_list|()
operator|!=
literal|null
operator|&&
name|queryBuilder
operator|.
name|likeItems
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|query
decl_stmt|;
for|for
control|(
name|BooleanClause
name|booleanClause
range|:
name|booleanQuery
control|)
block|{
if|if
condition|(
name|booleanClause
operator|.
name|getQuery
argument_list|()
operator|instanceof
name|MoreLikeThisQuery
condition|)
block|{
name|MoreLikeThisQuery
name|moreLikeThisQuery
init|=
operator|(
name|MoreLikeThisQuery
operator|)
name|booleanClause
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|moreLikeThisQuery
operator|.
name|getLikeFields
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// we rely on integration tests for a deeper check here
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|MoreLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testValidateEmptyFields
specifier|public
name|void
name|testValidateEmptyFields
parameter_list|()
block|{
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|MoreLikeThisQueryBuilder
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"likeText"
block|}
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"requires 'fields' to be specified"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testValidateEmptyLike
specifier|public
name|void
name|testValidateEmptyLike
parameter_list|()
block|{
name|String
index|[]
name|likeTexts
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
name|Item
index|[]
name|likeItems
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
operator|new
name|Item
index|[
literal|0
index|]
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|MoreLikeThisQueryBuilder
argument_list|(
name|likeTexts
argument_list|,
name|likeItems
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"requires either 'like' texts or items to be specified"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnsupportedFields
specifier|public
name|void
name|testUnsupportedFields
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|unsupportedField
init|=
name|randomFrom
argument_list|(
name|INT_FIELD_NAME
argument_list|,
name|DOUBLE_FIELD_NAME
argument_list|,
name|DATE_FIELD_NAME
argument_list|)
decl_stmt|;
name|MoreLikeThisQueryBuilder
name|queryBuilder
init|=
operator|new
name|MoreLikeThisQueryBuilder
argument_list|(
operator|new
name|String
index|[]
block|{
name|unsupportedField
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"some text"
block|}
argument_list|,
literal|null
argument_list|)
operator|.
name|failOnUnsupportedField
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|queryBuilder
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"more_like_this only supports text/keyword fields"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMoreLikeThisBuilder
specifier|public
name|void
name|testMoreLikeThisBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|parsedQuery
init|=
name|parseQuery
argument_list|(
name|moreLikeThisQuery
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"name.first"
block|,
literal|"name.last"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"something"
block|}
argument_list|,
literal|null
argument_list|)
operator|.
name|minTermFreq
argument_list|(
literal|1
argument_list|)
operator|.
name|maxQueryTerms
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MoreLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MoreLikeThisQuery
name|mltQuery
init|=
operator|(
name|MoreLikeThisQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMoreLikeFields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getLikeText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMinTermFrequency
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMaxQueryTerms
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testItemSerialization
specifier|public
name|void
name|testItemSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|Item
name|expectedItem
init|=
name|generateRandomItem
argument_list|()
decl_stmt|;
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|expectedItem
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|Item
name|newItem
init|=
operator|new
name|Item
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedItem
argument_list|,
name|newItem
argument_list|)
expr_stmt|;
block|}
DECL|method|testItemCopy
specifier|public
name|void
name|testItemCopy
parameter_list|()
throws|throws
name|IOException
block|{
name|Item
name|expectedItem
init|=
name|generateRandomItem
argument_list|()
decl_stmt|;
name|Item
name|newItem
init|=
operator|new
name|Item
argument_list|(
name|expectedItem
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedItem
argument_list|,
name|newItem
argument_list|)
expr_stmt|;
block|}
DECL|method|testItemFromXContent
specifier|public
name|void
name|testItemFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
name|Item
name|expectedItem
init|=
name|generateRandomItem
argument_list|()
decl_stmt|;
name|String
name|json
init|=
name|expectedItem
operator|.
name|toXContent
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
operator|.
name|string
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|Item
name|newItem
init|=
name|Item
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
operator|new
name|Item
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedItem
argument_list|,
name|newItem
argument_list|)
expr_stmt|;
block|}
DECL|method|testItemSerializationBwc
specifier|public
name|void
name|testItemSerializationBwc
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|data
init|=
name|Base64
operator|.
name|getDecoder
argument_list|()
operator|.
name|decode
argument_list|(
literal|"AQVpbmRleAEEdHlwZQEODXsiZm9vIjoiYmFyIn0A/wD//////////QAAAAAAAAAA"
argument_list|)
decl_stmt|;
specifier|final
name|Version
name|version
init|=
name|randomFrom
argument_list|(
name|Version
operator|.
name|V_5_0_0
argument_list|,
name|Version
operator|.
name|V_5_0_1
argument_list|,
name|Version
operator|.
name|V_5_0_2
argument_list|,
name|Version
operator|.
name|V_5_1_1
argument_list|,
name|Version
operator|.
name|V_5_1_2
argument_list|,
name|Version
operator|.
name|V_5_2_0
argument_list|)
decl_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|StreamInput
operator|.
name|wrap
argument_list|(
name|data
argument_list|)
init|)
block|{
name|in
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|Item
name|item
init|=
operator|new
name|Item
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
name|item
operator|.
name|xContentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"foo\":\"bar\"}"
argument_list|,
name|item
operator|.
name|doc
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"index"
argument_list|,
name|item
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"type"
argument_list|,
name|item
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|out
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|item
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|data
argument_list|,
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|toBytesRef
argument_list|()
operator|.
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|isCachable
specifier|protected
name|boolean
name|isCachable
parameter_list|(
name|MoreLikeThisQueryBuilder
name|queryBuilder
parameter_list|)
block|{
return|return
name|queryBuilder
operator|.
name|likeItems
argument_list|()
operator|.
name|length
operator|==
literal|0
return|;
comment|// items are always fetched
block|}
DECL|method|testFromJson
specifier|public
name|void
name|testFromJson
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|json
init|=
literal|"{\n"
operator|+
literal|"  \"more_like_this\" : {\n"
operator|+
literal|"    \"fields\" : [ \"title\", \"description\" ],\n"
operator|+
literal|"    \"like\" : [ \"and potentially some more text here as well\", {\n"
operator|+
literal|"      \"_index\" : \"imdb\",\n"
operator|+
literal|"      \"_type\" : \"movies\",\n"
operator|+
literal|"      \"_id\" : \"1\"\n"
operator|+
literal|"    }, {\n"
operator|+
literal|"      \"_index\" : \"imdb\",\n"
operator|+
literal|"      \"_type\" : \"movies\",\n"
operator|+
literal|"      \"_id\" : \"2\"\n"
operator|+
literal|"    } ],\n"
operator|+
literal|"    \"max_query_terms\" : 12,\n"
operator|+
literal|"    \"min_term_freq\" : 1,\n"
operator|+
literal|"    \"min_doc_freq\" : 5,\n"
operator|+
literal|"    \"max_doc_freq\" : 2147483647,\n"
operator|+
literal|"    \"min_word_length\" : 0,\n"
operator|+
literal|"    \"max_word_length\" : 0,\n"
operator|+
literal|"    \"minimum_should_match\" : \"30%\",\n"
operator|+
literal|"    \"boost_terms\" : 0.0,\n"
operator|+
literal|"    \"include\" : false,\n"
operator|+
literal|"    \"fail_on_unsupported_field\" : true,\n"
operator|+
literal|"    \"boost\" : 1.0\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
name|MoreLikeThisQueryBuilder
name|parsed
init|=
operator|(
name|MoreLikeThisQueryBuilder
operator|)
name|parseQuery
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|checkGeneratedJson
argument_list|(
name|json
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
literal|2
argument_list|,
name|parsed
operator|.
name|fields
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
literal|"and potentially some more text here as well"
argument_list|,
name|parsed
operator|.
name|likeTexts
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

