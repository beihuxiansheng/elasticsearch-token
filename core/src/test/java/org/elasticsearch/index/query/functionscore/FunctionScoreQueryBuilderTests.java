begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query.functionscore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|CombineFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FieldValueFactorFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FiltersFunctionScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FunctionScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|WeightFactorFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|AbstractQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|AbstractQueryTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MatchAllQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|RandomQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|TermQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|WrapperQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|exp
operator|.
name|ExponentialDecayFunctionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|fieldvaluefactor
operator|.
name|FieldValueFactorFunctionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|gauss
operator|.
name|GaussDecayFunctionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|lin
operator|.
name|LinearDecayFunctionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|random
operator|.
name|RandomScoreFunctionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|script
operator|.
name|ScriptScoreFunctionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|weight
operator|.
name|WeightBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|MockScriptEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MultiValueMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|functionScoreQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|termQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|closeTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|either
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|FunctionScoreQueryBuilderTests
specifier|public
class|class
name|FunctionScoreQueryBuilderTests
extends|extends
name|AbstractQueryTestCase
argument_list|<
name|FunctionScoreQueryBuilder
argument_list|>
block|{
annotation|@
name|Override
DECL|method|doCreateTestQueryBuilder
specifier|protected
name|FunctionScoreQueryBuilder
name|doCreateTestQueryBuilder
parameter_list|()
block|{
name|FunctionScoreQueryBuilder
name|functionScoreQueryBuilder
decl_stmt|;
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|int
name|numFunctions
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|FunctionScoreQueryBuilder
operator|.
name|FilterFunctionBuilder
index|[]
name|filterFunctionBuilders
init|=
operator|new
name|FunctionScoreQueryBuilder
operator|.
name|FilterFunctionBuilder
index|[
name|numFunctions
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFunctions
condition|;
name|i
operator|++
control|)
block|{
name|filterFunctionBuilders
index|[
name|i
index|]
operator|=
operator|new
name|FunctionScoreQueryBuilder
operator|.
name|FilterFunctionBuilder
argument_list|(
name|RandomQueryBuilder
operator|.
name|createQuery
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|randomScoreFunction
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|functionScoreQueryBuilder
operator|=
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
name|RandomQueryBuilder
operator|.
name|createQuery
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|filterFunctionBuilders
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|functionScoreQueryBuilder
operator|=
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
name|filterFunctionBuilders
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
name|functionScoreQueryBuilder
operator|=
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
name|randomScoreFunction
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|functionScoreQueryBuilder
operator|=
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
name|RandomQueryBuilder
operator|.
name|createQuery
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|randomScoreFunction
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|functionScoreQueryBuilder
operator|=
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
name|RandomQueryBuilder
operator|.
name|createQuery
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|functionScoreQueryBuilder
operator|.
name|boostMode
argument_list|(
name|randomFrom
argument_list|(
name|CombineFunction
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|functionScoreQueryBuilder
operator|.
name|scoreMode
argument_list|(
name|randomFrom
argument_list|(
name|FiltersFunctionScoreQuery
operator|.
name|ScoreMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|functionScoreQueryBuilder
operator|.
name|maxBoost
argument_list|(
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|functionScoreQueryBuilder
operator|.
name|setMinScore
argument_list|(
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|functionScoreQueryBuilder
return|;
block|}
DECL|method|randomScoreFunction
specifier|private
specifier|static
name|ScoreFunctionBuilder
name|randomScoreFunction
parameter_list|()
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
return|return
operator|new
name|WeightBuilder
argument_list|()
operator|.
name|setWeight
argument_list|(
name|randomFloat
argument_list|()
argument_list|)
return|;
block|}
name|ScoreFunctionBuilder
name|functionBuilder
decl_stmt|;
comment|//TODO random score function is temporarily disabled, it causes NPE in testToQuery when trying to access the shardId through SearchContext
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|DecayFunctionBuilder
name|decayFunctionBuilder
decl_stmt|;
name|Float
name|offset
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
name|randomFloat
argument_list|()
decl_stmt|;
name|double
name|decay
init|=
name|randomDouble
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|decayFunctionBuilder
operator|=
operator|new
name|GaussDecayFunctionBuilder
argument_list|(
name|INT_FIELD_NAME
argument_list|,
name|randomFloat
argument_list|()
argument_list|,
name|randomFloat
argument_list|()
argument_list|,
name|offset
argument_list|,
name|decay
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|decayFunctionBuilder
operator|=
operator|new
name|ExponentialDecayFunctionBuilder
argument_list|(
name|INT_FIELD_NAME
argument_list|,
name|randomFloat
argument_list|()
argument_list|,
name|randomFloat
argument_list|()
argument_list|,
name|offset
argument_list|,
name|decay
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|decayFunctionBuilder
operator|=
operator|new
name|LinearDecayFunctionBuilder
argument_list|(
name|INT_FIELD_NAME
argument_list|,
name|randomFloat
argument_list|()
argument_list|,
name|randomFloat
argument_list|()
argument_list|,
name|offset
argument_list|,
name|decay
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|decayFunctionBuilder
operator|.
name|setMultiValueMode
argument_list|(
name|randomFrom
argument_list|(
name|MultiValueMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|functionBuilder
operator|=
name|decayFunctionBuilder
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|FieldValueFactorFunctionBuilder
name|fieldValueFactorFunctionBuilder
init|=
operator|new
name|FieldValueFactorFunctionBuilder
argument_list|(
name|INT_FIELD_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|fieldValueFactorFunctionBuilder
operator|.
name|factor
argument_list|(
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|fieldValueFactorFunctionBuilder
operator|.
name|missing
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|fieldValueFactorFunctionBuilder
operator|.
name|modifier
argument_list|(
name|randomFrom
argument_list|(
name|FieldValueFactorFunction
operator|.
name|Modifier
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|functionBuilder
operator|=
name|fieldValueFactorFunctionBuilder
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|String
name|script
init|=
literal|"5"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|functionBuilder
operator|=
operator|new
name|ScriptScoreFunctionBuilder
argument_list|(
operator|new
name|Script
argument_list|(
name|script
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|MockScriptEngine
operator|.
name|NAME
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|RandomScoreFunctionBuilder
name|randomScoreFunctionBuilder
init|=
operator|new
name|RandomScoreFunctionBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|randomScoreFunctionBuilder
operator|.
name|seed
argument_list|(
name|randomLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|randomScoreFunctionBuilder
operator|.
name|seed
argument_list|(
name|randomInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|randomScoreFunctionBuilder
operator|.
name|seed
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|functionBuilder
operator|=
name|randomScoreFunctionBuilder
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|functionBuilder
operator|.
name|setWeight
argument_list|(
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|functionBuilder
return|;
block|}
annotation|@
name|Override
DECL|method|doAssertLuceneQuery
specifier|protected
name|void
name|doAssertLuceneQuery
parameter_list|(
name|FunctionScoreQueryBuilder
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|either
argument_list|(
name|instanceOf
argument_list|(
name|FunctionScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|instanceOf
argument_list|(
name|FiltersFunctionScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Overridden here to ensure the test is only run if at least one type is      * present in the mappings. Functions require the field to be      * explicitly mapped      */
annotation|@
name|Override
DECL|method|testToQuery
specifier|public
name|void
name|testToQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|super
operator|.
name|testToQuery
argument_list|()
expr_stmt|;
block|}
DECL|method|testIllegalArguments
specifier|public
name|void
name|testIllegalArguments
parameter_list|()
block|{
try|try
block|{
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
operator|(
name|QueryBuilder
argument_list|<
name|?
argument_list|>
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//all good
block|}
try|try
block|{
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
operator|(
name|ScoreFunctionBuilder
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//all good
block|}
try|try
block|{
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
operator|(
name|FunctionScoreQueryBuilder
operator|.
name|FilterFunctionBuilder
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//all good
block|}
try|try
block|{
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
literal|null
argument_list|,
name|ScoreFunctionBuilders
operator|.
name|randomFunction
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//all good
block|}
try|try
block|{
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|,
operator|(
name|ScoreFunctionBuilder
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//all good
block|}
try|try
block|{
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|,
operator|(
name|FunctionScoreQueryBuilder
operator|.
name|FilterFunctionBuilder
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//all good
block|}
try|try
block|{
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
literal|null
argument_list|,
operator|new
name|FunctionScoreQueryBuilder
operator|.
name|FilterFunctionBuilder
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//all good
block|}
try|try
block|{
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|,
operator|new
name|FunctionScoreQueryBuilder
operator|.
name|FilterFunctionBuilder
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"content of array must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//all good
block|}
try|try
block|{
operator|new
name|FunctionScoreQueryBuilder
operator|.
name|FilterFunctionBuilder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//all good
block|}
try|try
block|{
operator|new
name|FunctionScoreQueryBuilder
operator|.
name|FilterFunctionBuilder
argument_list|(
literal|null
argument_list|,
name|ScoreFunctionBuilders
operator|.
name|randomFunction
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//all good
block|}
try|try
block|{
operator|new
name|FunctionScoreQueryBuilder
operator|.
name|FilterFunctionBuilder
argument_list|(
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//all good
block|}
try|try
block|{
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|)
operator|.
name|scoreMode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//all good
block|}
try|try
block|{
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|)
operator|.
name|boostMode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//all good
block|}
block|}
DECL|method|testParseFunctionsArray
specifier|public
name|void
name|testParseFunctionsArray
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|functionScoreQuery
init|=
literal|"{\n"
operator|+
literal|"    \"function_score\":{\n"
operator|+
literal|"        \"query\":{\n"
operator|+
literal|"            \"term\":{\n"
operator|+
literal|"                \"field1\":\"value1\"\n"
operator|+
literal|"            }\n"
operator|+
literal|"        },\n"
operator|+
literal|"        \"functions\":  [\n"
operator|+
literal|"            {\n"
operator|+
literal|"                \"random_score\":  {\n"
operator|+
literal|"                    \"seed\":123456\n"
operator|+
literal|"                },\n"
operator|+
literal|"                \"weight\": 3,\n"
operator|+
literal|"                \"filter\": {\n"
operator|+
literal|"                    \"term\":{\n"
operator|+
literal|"                        \"field2\":\"value2\"\n"
operator|+
literal|"                    }\n"
operator|+
literal|"                }\n"
operator|+
literal|"            },\n"
operator|+
literal|"            {\n"
operator|+
literal|"                \"filter\": {\n"
operator|+
literal|"                    \"term\":{\n"
operator|+
literal|"                        \"field3\":\"value3\"\n"
operator|+
literal|"                    }\n"
operator|+
literal|"                },\n"
operator|+
literal|"                \"weight\": 9\n"
operator|+
literal|"            },\n"
operator|+
literal|"            {\n"
operator|+
literal|"                \"gauss\":  {\n"
operator|+
literal|"                    \"field_name\":  {\n"
operator|+
literal|"                        \"origin\":0.5,\n"
operator|+
literal|"                        \"scale\":0.6\n"
operator|+
literal|"                    }\n"
operator|+
literal|"                }\n"
operator|+
literal|"            }\n"
operator|+
literal|"        ],\n"
operator|+
literal|"        \"boost\" : 3,\n"
operator|+
literal|"        \"score_mode\" : \"avg\",\n"
operator|+
literal|"        \"boost_mode\" : \"replace\",\n"
operator|+
literal|"        \"max_boost\" : 10\n"
operator|+
literal|"    }\n"
operator|+
literal|"}"
decl_stmt|;
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|queryBuilder
init|=
name|parseQuery
argument_list|(
name|functionScoreQuery
argument_list|)
decl_stmt|;
comment|//given that we copy part of the decay functions as bytes, we test that fromXContent and toXContent both work no matter what the initial format was
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|XContentType
operator|.
name|values
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|queryBuilder
argument_list|,
name|instanceOf
argument_list|(
name|FunctionScoreQueryBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FunctionScoreQueryBuilder
name|functionScoreQueryBuilder
init|=
operator|(
name|FunctionScoreQueryBuilder
operator|)
name|queryBuilder
decl_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermQueryBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermQueryBuilder
name|termQueryBuilder
init|=
operator|(
name|TermQueryBuilder
operator|)
name|functionScoreQueryBuilder
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|termQueryBuilder
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termQueryBuilder
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|filterFunctionBuilders
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|filterFunctionBuilders
argument_list|()
index|[
literal|0
index|]
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermQueryBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|termQueryBuilder
operator|=
operator|(
name|TermQueryBuilder
operator|)
name|functionScoreQueryBuilder
operator|.
name|filterFunctionBuilders
argument_list|()
index|[
literal|0
index|]
operator|.
name|getFilter
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|termQueryBuilder
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termQueryBuilder
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|filterFunctionBuilders
argument_list|()
index|[
literal|1
index|]
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermQueryBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|termQueryBuilder
operator|=
operator|(
name|TermQueryBuilder
operator|)
name|functionScoreQueryBuilder
operator|.
name|filterFunctionBuilders
argument_list|()
index|[
literal|1
index|]
operator|.
name|getFilter
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|termQueryBuilder
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termQueryBuilder
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|filterFunctionBuilders
argument_list|()
index|[
literal|2
index|]
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|MatchAllQueryBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|filterFunctionBuilders
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScoreFunction
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|RandomScoreFunctionBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|RandomScoreFunctionBuilder
name|randomScoreFunctionBuilder
init|=
operator|(
name|RandomScoreFunctionBuilder
operator|)
name|functionScoreQueryBuilder
operator|.
name|filterFunctionBuilders
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScoreFunction
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|randomScoreFunctionBuilder
operator|.
name|getSeed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|123456
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|randomScoreFunctionBuilder
operator|.
name|getWeight
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|filterFunctionBuilders
argument_list|()
index|[
literal|1
index|]
operator|.
name|getScoreFunction
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|WeightBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|WeightBuilder
name|weightBuilder
init|=
operator|(
name|WeightBuilder
operator|)
name|functionScoreQueryBuilder
operator|.
name|filterFunctionBuilders
argument_list|()
index|[
literal|1
index|]
operator|.
name|getScoreFunction
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|weightBuilder
operator|.
name|getWeight
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|9f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|filterFunctionBuilders
argument_list|()
index|[
literal|2
index|]
operator|.
name|getScoreFunction
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|GaussDecayFunctionBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|GaussDecayFunctionBuilder
name|gaussDecayFunctionBuilder
init|=
operator|(
name|GaussDecayFunctionBuilder
operator|)
name|functionScoreQueryBuilder
operator|.
name|filterFunctionBuilders
argument_list|()
index|[
literal|2
index|]
operator|.
name|getScoreFunction
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|gaussDecayFunctionBuilder
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field_name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|boost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|scoreMode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|FiltersFunctionScoreQuery
operator|.
name|ScoreMode
operator|.
name|AVG
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|boostMode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|CombineFunction
operator|.
name|REPLACE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|maxBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10f
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|XContentType
operator|.
name|values
argument_list|()
operator|.
name|length
condition|)
block|{
name|queryBuilder
operator|=
name|parseQuery
argument_list|(
operator|(
operator|(
name|AbstractQueryBuilder
argument_list|<
name|?
argument_list|>
operator|)
name|queryBuilder
operator|)
operator|.
name|buildAsBytes
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testParseSingleFunction
specifier|public
name|void
name|testParseSingleFunction
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|functionScoreQuery
init|=
literal|"{\n"
operator|+
literal|"    \"function_score\":{\n"
operator|+
literal|"        \"query\":{\n"
operator|+
literal|"            \"term\":{\n"
operator|+
literal|"                \"field1\":\"value1\"\n"
operator|+
literal|"            }\n"
operator|+
literal|"        },\n"
operator|+
literal|"        \"gauss\":  {\n"
operator|+
literal|"            \"field_name\":  {\n"
operator|+
literal|"                \"origin\":0.5,\n"
operator|+
literal|"                \"scale\":0.6\n"
operator|+
literal|"            }\n"
operator|+
literal|"         },\n"
operator|+
literal|"        \"boost\" : 3,\n"
operator|+
literal|"        \"score_mode\" : \"avg\",\n"
operator|+
literal|"        \"boost_mode\" : \"replace\",\n"
operator|+
literal|"        \"max_boost\" : 10\n"
operator|+
literal|"    }\n"
operator|+
literal|"}"
decl_stmt|;
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|queryBuilder
init|=
name|parseQuery
argument_list|(
name|functionScoreQuery
argument_list|)
decl_stmt|;
comment|//given that we copy part of the decay functions as bytes, we test that fromXContent and toXContent both work no matter what the initial format was
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|XContentType
operator|.
name|values
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|queryBuilder
argument_list|,
name|instanceOf
argument_list|(
name|FunctionScoreQueryBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FunctionScoreQueryBuilder
name|functionScoreQueryBuilder
init|=
operator|(
name|FunctionScoreQueryBuilder
operator|)
name|queryBuilder
decl_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermQueryBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermQueryBuilder
name|termQueryBuilder
init|=
operator|(
name|TermQueryBuilder
operator|)
name|functionScoreQueryBuilder
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|termQueryBuilder
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termQueryBuilder
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|filterFunctionBuilders
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|filterFunctionBuilders
argument_list|()
index|[
literal|0
index|]
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|MatchAllQueryBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|filterFunctionBuilders
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScoreFunction
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|GaussDecayFunctionBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|GaussDecayFunctionBuilder
name|gaussDecayFunctionBuilder
init|=
operator|(
name|GaussDecayFunctionBuilder
operator|)
name|functionScoreQueryBuilder
operator|.
name|filterFunctionBuilders
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScoreFunction
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|gaussDecayFunctionBuilder
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field_name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gaussDecayFunctionBuilder
operator|.
name|getWeight
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|boost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|scoreMode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|FiltersFunctionScoreQuery
operator|.
name|ScoreMode
operator|.
name|AVG
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|boostMode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|CombineFunction
operator|.
name|REPLACE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|maxBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10f
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|XContentType
operator|.
name|values
argument_list|()
operator|.
name|length
condition|)
block|{
name|queryBuilder
operator|=
name|parseQuery
argument_list|(
operator|(
operator|(
name|AbstractQueryBuilder
argument_list|<
name|?
argument_list|>
operator|)
name|queryBuilder
operator|)
operator|.
name|buildAsBytes
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testProperErrorMessageWhenTwoFunctionsDefinedInQueryBody
specifier|public
name|void
name|testProperErrorMessageWhenTwoFunctionsDefinedInQueryBody
parameter_list|()
throws|throws
name|IOException
block|{
comment|//without a functions array, we support only a single function, weight can't be associated with the function either.
name|String
name|functionScoreQuery
init|=
literal|"{\n"
operator|+
literal|"    \"function_score\": {\n"
operator|+
literal|"      \"script_score\": {\n"
operator|+
literal|"        \"script\": \"5\"\n"
operator|+
literal|"      },\n"
operator|+
literal|"      \"weight\": 2\n"
operator|+
literal|"    }\n"
operator|+
literal|"}"
decl_stmt|;
try|try
block|{
name|parseQuery
argument_list|(
name|functionScoreQuery
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"parsing should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"use [functions] array if you want to define several functions."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testProperErrorMessageWhenTwoFunctionsDefinedInFunctionsArray
specifier|public
name|void
name|testProperErrorMessageWhenTwoFunctionsDefinedInFunctionsArray
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|functionScoreQuery
init|=
literal|"{\n"
operator|+
literal|"    \"function_score\":{\n"
operator|+
literal|"        \"functions\":  [\n"
operator|+
literal|"            {\n"
operator|+
literal|"                \"random_score\":  {\n"
operator|+
literal|"                    \"seed\":123456\n"
operator|+
literal|"                },\n"
operator|+
literal|"                \"weight\": 3,\n"
operator|+
literal|"                \"script_score\": {\n"
operator|+
literal|"                    \"script\": \"_index['text']['foo'].tf()\"\n"
operator|+
literal|"                },\n"
operator|+
literal|"                \"filter\": {\n"
operator|+
literal|"                    \"term\":{\n"
operator|+
literal|"                        \"field2\":\"value2\"\n"
operator|+
literal|"                    }\n"
operator|+
literal|"                }\n"
operator|+
literal|"            }\n"
operator|+
literal|"        ]\n"
operator|+
literal|"    }\n"
operator|+
literal|"}"
decl_stmt|;
try|try
block|{
name|parseQuery
argument_list|(
name|functionScoreQuery
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"parsing should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"failed to parse function_score functions. already found [random_score], now encountering [script_score]."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testProperErrorMessageWhenMissingFunction
specifier|public
name|void
name|testProperErrorMessageWhenMissingFunction
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|functionScoreQuery
init|=
literal|"{\n"
operator|+
literal|"    \"function_score\":{\n"
operator|+
literal|"        \"functions\":  [\n"
operator|+
literal|"            {\n"
operator|+
literal|"                \"filter\": {\n"
operator|+
literal|"                    \"term\":{\n"
operator|+
literal|"                        \"field2\":\"value2\"\n"
operator|+
literal|"                    }\n"
operator|+
literal|"                }\n"
operator|+
literal|"            }\n"
operator|+
literal|"        ]\n"
operator|+
literal|"    }\n"
operator|+
literal|"}"
decl_stmt|;
try|try
block|{
name|parseQuery
argument_list|(
name|functionScoreQuery
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"parsing should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"an entry in functions list is missing a function."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testWeight1fStillProducesWeightFunction
specifier|public
name|void
name|testWeight1fStillProducesWeightFunction
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|queryString
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"function_score"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"functions"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field_value_factor"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
name|INT_FIELD_NAME
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|1.0
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|query
init|=
name|parseQuery
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|FunctionScoreQueryBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FunctionScoreQueryBuilder
name|functionScoreQueryBuilder
init|=
operator|(
name|FunctionScoreQueryBuilder
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|functionScoreQueryBuilder
operator|.
name|filterFunctionBuilders
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScoreFunction
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|FieldValueFactorFunctionBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FieldValueFactorFunctionBuilder
name|fieldValueFactorFunctionBuilder
init|=
operator|(
name|FieldValueFactorFunctionBuilder
operator|)
name|functionScoreQueryBuilder
operator|.
name|filterFunctionBuilders
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScoreFunction
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|fieldValueFactorFunctionBuilder
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|INT_FIELD_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldValueFactorFunctionBuilder
operator|.
name|factor
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|FieldValueFactorFunctionBuilder
operator|.
name|DEFAULT_FACTOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldValueFactorFunctionBuilder
operator|.
name|modifier
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|FieldValueFactorFunctionBuilder
operator|.
name|DEFAULT_MODIFIER
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldValueFactorFunctionBuilder
operator|.
name|getWeight
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldValueFactorFunctionBuilder
operator|.
name|missing
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Query
name|luceneQuery
init|=
name|query
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|luceneQuery
argument_list|,
name|instanceOf
argument_list|(
name|FunctionScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FunctionScoreQuery
name|functionScoreQuery
init|=
operator|(
name|FunctionScoreQuery
operator|)
name|luceneQuery
decl_stmt|;
name|assertThat
argument_list|(
name|functionScoreQuery
operator|.
name|getFunction
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|WeightFactorFunction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|WeightFactorFunction
name|weightFactorFunction
init|=
operator|(
name|WeightFactorFunction
operator|)
name|functionScoreQuery
operator|.
name|getFunction
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|weightFactorFunction
operator|.
name|getWeight
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|weightFactorFunction
operator|.
name|getScoreFunction
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|FieldValueFactorFunction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testProperErrorMessagesForMisplacedWeightsAndFunctions
specifier|public
name|void
name|testProperErrorMessagesForMisplacedWeightsAndFunctions
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|query
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"function_score"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"functions"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"script_score"
argument_list|)
operator|.
name|field
argument_list|(
literal|"script"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
try|try
block|{
name|parseQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect exception here because array of functions and one weight in body is not allowed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"you can either define [functions] array or a single function, not both. already found [functions] array, now encountering [weight]."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|query
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"function_score"
argument_list|)
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|2
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"functions"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
try|try
block|{
name|parseQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect exception here because array of functions and one weight in body is not allowed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"you can either define [functions] array or a single function, not both. already found [weight], now encountering [functions]."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMalformedThrowsException
specifier|public
name|void
name|testMalformedThrowsException
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|json
init|=
literal|"{\n"
operator|+
literal|"    \"function_score\":{\n"
operator|+
literal|"        \"query\":{\n"
operator|+
literal|"            \"term\":{\n"
operator|+
literal|"                \"name.last\":\"banon\"\n"
operator|+
literal|"            }\n"
operator|+
literal|"        },\n"
operator|+
literal|"        \"functions\": [\n"
operator|+
literal|"            {\n"
operator|+
literal|"                {\n"
operator|+
literal|"            }\n"
operator|+
literal|"        ]\n"
operator|+
literal|"    }\n"
operator|+
literal|"}"
decl_stmt|;
try|try
block|{
name|parseQuery
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected JsonParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JsonParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Unexpected character ('{"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCustomWeightFactorQueryBuilderWithFunctionScore
specifier|public
name|void
name|testCustomWeightFactorQueryBuilderWithFunctionScore
parameter_list|()
throws|throws
name|IOException
block|{
name|Query
name|parsedQuery
init|=
name|parseQuery
argument_list|(
name|functionScoreQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|,
name|ScoreFunctionBuilders
operator|.
name|weightFactorFunction
argument_list|(
literal|1.3f
argument_list|)
argument_list|)
operator|.
name|buildAsBytes
argument_list|()
argument_list|)
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FunctionScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FunctionScoreQuery
name|functionScoreQuery
init|=
operator|(
name|FunctionScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|functionScoreQuery
operator|.
name|getSubQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
call|(
name|double
call|)
argument_list|(
operator|(
name|WeightFactorFunction
operator|)
name|functionScoreQuery
operator|.
name|getFunction
argument_list|()
argument_list|)
operator|.
name|getWeight
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.3
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCustomWeightFactorQueryBuilderWithFunctionScoreWithoutQueryGiven
specifier|public
name|void
name|testCustomWeightFactorQueryBuilderWithFunctionScoreWithoutQueryGiven
parameter_list|()
throws|throws
name|IOException
block|{
name|Query
name|parsedQuery
init|=
name|parseQuery
argument_list|(
name|functionScoreQuery
argument_list|(
name|ScoreFunctionBuilders
operator|.
name|weightFactorFunction
argument_list|(
literal|1.3f
argument_list|)
argument_list|)
operator|.
name|buildAsBytes
argument_list|()
argument_list|)
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FunctionScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FunctionScoreQuery
name|functionScoreQuery
init|=
operator|(
name|FunctionScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|functionScoreQuery
operator|.
name|getSubQuery
argument_list|()
operator|instanceof
name|MatchAllDocsQuery
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
call|(
name|double
call|)
argument_list|(
operator|(
name|WeightFactorFunction
operator|)
name|functionScoreQuery
operator|.
name|getFunction
argument_list|()
argument_list|)
operator|.
name|getWeight
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.3
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldValueFactorFactorArray
specifier|public
name|void
name|testFieldValueFactorFactorArray
parameter_list|()
throws|throws
name|IOException
block|{
comment|// don't permit an array of factors
name|String
name|querySource
init|=
literal|"{"
operator|+
literal|"  \"function_score\": {"
operator|+
literal|"    \"query\": {"
operator|+
literal|"      \"match\": {\"name\": \"foo\"}"
operator|+
literal|"      },"
operator|+
literal|"      \"functions\": ["
operator|+
literal|"        {"
operator|+
literal|"          \"field_value_factor\": {"
operator|+
literal|"            \"field\": \"test\","
operator|+
literal|"            \"factor\": [1.2,2]"
operator|+
literal|"          }"
operator|+
literal|"        }"
operator|+
literal|"      ]"
operator|+
literal|"    }"
operator|+
literal|"}"
decl_stmt|;
try|try
block|{
name|parseQuery
argument_list|(
name|querySource
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"parsing should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"[field_value_factor] field 'factor' does not support lists or objects"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFromJson
specifier|public
name|void
name|testFromJson
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|json
init|=
literal|"{\n"
operator|+
literal|"  \"function_score\" : {\n"
operator|+
literal|"    \"query\" : { },\n"
operator|+
literal|"    \"functions\" : [ {\n"
operator|+
literal|"      \"filter\" : { },\n"
operator|+
literal|"      \"weight\" : 23.0,\n"
operator|+
literal|"      \"random_score\" : { }\n"
operator|+
literal|"    }, {\n"
operator|+
literal|"      \"filter\" : { },\n"
operator|+
literal|"      \"weight\" : 5.0\n"
operator|+
literal|"    } ],\n"
operator|+
literal|"    \"score_mode\" : \"multiply\",\n"
operator|+
literal|"    \"boost_mode\" : \"multiply\",\n"
operator|+
literal|"    \"max_boost\" : 100.0,\n"
operator|+
literal|"    \"min_score\" : 1.0,\n"
operator|+
literal|"    \"boost\" : 42.0\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
name|FunctionScoreQueryBuilder
name|parsed
init|=
operator|(
name|FunctionScoreQueryBuilder
operator|)
name|parseQuery
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|checkGeneratedJson
argument_list|(
name|json
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
literal|2
argument_list|,
name|parsed
operator|.
name|filterFunctionBuilders
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
literal|42
argument_list|,
name|parsed
operator|.
name|boost
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
literal|100
argument_list|,
name|parsed
operator|.
name|maxBoost
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
literal|1
argument_list|,
name|parsed
operator|.
name|getMinScore
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|testMustRewrite
specifier|public
name|void
name|testMustRewrite
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|super
operator|.
name|testMustRewrite
argument_list|()
expr_stmt|;
block|}
DECL|method|testRewrite
specifier|public
name|void
name|testRewrite
parameter_list|()
throws|throws
name|IOException
block|{
name|FunctionScoreQueryBuilder
name|functionScoreQueryBuilder
init|=
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
operator|new
name|WrapperQueryBuilder
argument_list|(
operator|new
name|TermQueryBuilder
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|FunctionScoreQueryBuilder
name|rewrite
init|=
operator|(
name|FunctionScoreQueryBuilder
operator|)
name|functionScoreQueryBuilder
operator|.
name|rewrite
argument_list|(
name|queryShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|functionScoreQueryBuilder
argument_list|,
name|rewrite
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rewrite
operator|.
name|query
argument_list|()
argument_list|,
operator|new
name|TermQueryBuilder
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRewriteWithFunction
specifier|public
name|void
name|testRewriteWithFunction
parameter_list|()
throws|throws
name|IOException
block|{
name|TermQueryBuilder
name|secondFunction
init|=
operator|new
name|TermQueryBuilder
argument_list|(
literal|"tq"
argument_list|,
literal|"2"
argument_list|)
decl_stmt|;
name|QueryBuilder
name|queryBuilder
init|=
name|randomBoolean
argument_list|()
condition|?
operator|new
name|WrapperQueryBuilder
argument_list|(
operator|new
name|TermQueryBuilder
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
else|:
operator|new
name|TermQueryBuilder
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|FunctionScoreQueryBuilder
name|functionScoreQueryBuilder
init|=
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
name|queryBuilder
argument_list|,
operator|new
name|FunctionScoreQueryBuilder
operator|.
name|FilterFunctionBuilder
index|[]
block|{
operator|new
name|FunctionScoreQueryBuilder
operator|.
name|FilterFunctionBuilder
argument_list|(
operator|new
name|WrapperQueryBuilder
argument_list|(
operator|new
name|TermQueryBuilder
argument_list|(
literal|"tq"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|RandomScoreFunctionBuilder
argument_list|()
argument_list|)
block|,
operator|new
name|FunctionScoreQueryBuilder
operator|.
name|FilterFunctionBuilder
argument_list|(
name|secondFunction
argument_list|,
operator|new
name|RandomScoreFunctionBuilder
argument_list|()
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|FunctionScoreQueryBuilder
name|rewrite
init|=
operator|(
name|FunctionScoreQueryBuilder
operator|)
name|functionScoreQueryBuilder
operator|.
name|rewrite
argument_list|(
name|queryShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|functionScoreQueryBuilder
argument_list|,
name|rewrite
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rewrite
operator|.
name|query
argument_list|()
argument_list|,
operator|new
name|TermQueryBuilder
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rewrite
operator|.
name|filterFunctionBuilders
argument_list|()
index|[
literal|0
index|]
operator|.
name|getFilter
argument_list|()
argument_list|,
operator|new
name|TermQueryBuilder
argument_list|(
literal|"tq"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|rewrite
operator|.
name|filterFunctionBuilders
argument_list|()
index|[
literal|1
index|]
operator|.
name|getFilter
argument_list|()
argument_list|,
name|secondFunction
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryMalformedArrayNotSupported
specifier|public
name|void
name|testQueryMalformedArrayNotSupported
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|json
init|=
literal|"{\n"
operator|+
literal|"  \"function_score\" : {\n"
operator|+
literal|"    \"not_supported\" : []\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
try|try
block|{
name|parseQuery
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"parse should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"array [not_supported] is not supported"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testQueryMalformedFieldNotSupported
specifier|public
name|void
name|testQueryMalformedFieldNotSupported
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|json
init|=
literal|"{\n"
operator|+
literal|"  \"function_score\" : {\n"
operator|+
literal|"    \"not_supported\" : \"value\"\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
try|try
block|{
name|parseQuery
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"parse should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"field [not_supported] is not supported"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMalformedQueryFunctionFieldNotSupported
specifier|public
name|void
name|testMalformedQueryFunctionFieldNotSupported
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|json
init|=
literal|"{\n"
operator|+
literal|"  \"function_score\" : {\n"
operator|+
literal|"    \"functions\" : [ {\n"
operator|+
literal|"      \"not_supported\" : 23.0\n"
operator|+
literal|"    }\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
try|try
block|{
name|parseQuery
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"parse should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"field [not_supported] is not supported"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMalformedQuery
specifier|public
name|void
name|testMalformedQuery
parameter_list|()
throws|throws
name|IOException
block|{
comment|//verify that an error is thrown rather than setting the query twice (https://github.com/elastic/elasticsearch/issues/16583)
name|String
name|json
init|=
literal|"{\n"
operator|+
literal|"    \"function_score\":{\n"
operator|+
literal|"        \"query\":{\n"
operator|+
literal|"            \"bool\":{\n"
operator|+
literal|"                \"must\":{\"match\":{\"field\":\"value\"}}"
operator|+
literal|"             },\n"
operator|+
literal|"            \"ignored_field_name\": {\n"
operator|+
literal|"                {\"match\":{\"field\":\"value\"}}\n"
operator|+
literal|"            }\n"
operator|+
literal|"            }\n"
operator|+
literal|"        }\n"
operator|+
literal|"    }\n"
operator|+
literal|"}"
decl_stmt|;
try|try
block|{
name|parseQuery
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"parse should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"[query] is already defined."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

