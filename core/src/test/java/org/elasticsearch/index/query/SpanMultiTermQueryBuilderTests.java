begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanBoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanMultiTermQueryWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|AbstractQueryTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_class
DECL|class|SpanMultiTermQueryBuilderTests
specifier|public
class|class
name|SpanMultiTermQueryBuilderTests
extends|extends
name|AbstractQueryTestCase
argument_list|<
name|SpanMultiTermQueryBuilder
argument_list|>
block|{
annotation|@
name|Override
DECL|method|doCreateTestQueryBuilder
specifier|protected
name|SpanMultiTermQueryBuilder
name|doCreateTestQueryBuilder
parameter_list|()
block|{
name|MultiTermQueryBuilder
name|multiTermQueryBuilder
init|=
name|RandomQueryBuilder
operator|.
name|createMultiTermQuery
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|SpanMultiTermQueryBuilder
argument_list|(
name|multiTermQueryBuilder
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doAssertLuceneQuery
specifier|protected
name|void
name|doAssertLuceneQuery
parameter_list|(
name|SpanMultiTermQueryBuilder
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|SearchContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|queryBuilder
operator|.
name|innerQuery
argument_list|()
operator|.
name|boost
argument_list|()
operator|!=
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
condition|)
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|SpanBoostQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanBoostQuery
name|boostQuery
init|=
operator|(
name|SpanBoostQuery
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|boostQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|queryBuilder
operator|.
name|innerQuery
argument_list|()
operator|.
name|boost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
name|boostQuery
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|SpanMultiTermQueryWrapper
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanMultiTermQueryWrapper
name|spanMultiTermQueryWrapper
init|=
operator|(
name|SpanMultiTermQueryWrapper
operator|)
name|query
decl_stmt|;
name|Query
name|multiTermQuery
init|=
name|queryBuilder
operator|.
name|innerQuery
argument_list|()
operator|.
name|toQuery
argument_list|(
name|context
operator|.
name|getQueryShardContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryBuilder
operator|.
name|innerQuery
argument_list|()
operator|.
name|boost
argument_list|()
operator|!=
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
condition|)
block|{
name|assertThat
argument_list|(
name|multiTermQuery
argument_list|,
name|instanceOf
argument_list|(
name|BoostQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BoostQuery
name|boostQuery
init|=
operator|(
name|BoostQuery
operator|)
name|multiTermQuery
decl_stmt|;
name|multiTermQuery
operator|=
name|boostQuery
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|multiTermQuery
argument_list|,
name|instanceOf
argument_list|(
name|MultiTermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|spanMultiTermQueryWrapper
operator|.
name|getWrappedQuery
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<>
argument_list|(
operator|(
name|MultiTermQuery
operator|)
name|multiTermQuery
argument_list|)
operator|.
name|getWrappedQuery
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIllegalArgument
specifier|public
name|void
name|testIllegalArgument
parameter_list|()
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|SpanMultiTermQueryBuilder
argument_list|(
operator|(
name|MultiTermQueryBuilder
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * test checks that we throw an {@link UnsupportedOperationException} if the query wrapped      * by {@link SpanMultiTermQueryBuilder} does not generate a lucene {@link MultiTermQuery}.      * This is currently the case for {@link RangeQueryBuilder} when the target field is mapped      * to a date.      */
DECL|method|testUnsupportedInnerQueryType
specifier|public
name|void
name|testUnsupportedInnerQueryType
parameter_list|()
throws|throws
name|IOException
block|{
name|MultiTermQueryBuilder
name|query
init|=
operator|new
name|MultiTermQueryBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Query
name|toQuery
parameter_list|(
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|toFilter
parameter_list|(
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toQuery
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryBuilder
name|queryName
parameter_list|(
name|String
name|queryName
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|queryName
parameter_list|()
block|{
return|return
literal|"foo"
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|boost
parameter_list|()
block|{
return|return
literal|1f
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryBuilder
name|boost
parameter_list|(
name|float
name|boost
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"foo"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
literal|"foo"
return|;
block|}
annotation|@
name|Override
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|builder
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{              }
block|}
decl_stmt|;
name|SpanMultiTermQueryBuilder
name|spamMultiTermQuery
init|=
operator|new
name|SpanMultiTermQueryBuilder
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|UnsupportedOperationException
name|e
init|=
name|expectThrows
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|spamMultiTermQuery
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"unsupported inner query, should be "
operator|+
name|MultiTermQuery
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQueryInnerSpanMultiTerm
specifier|public
name|void
name|testToQueryInnerSpanMultiTerm
parameter_list|()
throws|throws
name|IOException
block|{
name|Query
name|query
init|=
operator|new
name|SpanOrQueryBuilder
argument_list|(
name|createTestQueryBuilder
argument_list|()
argument_list|)
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
comment|//verify that the result is still a span query, despite the boost that might get set (SpanBoostQuery rather than BoostQuery)
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|SpanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromJson
specifier|public
name|void
name|testFromJson
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|json
init|=
literal|"{\n"
operator|+
literal|"  \"span_multi\" : {\n"
operator|+
literal|"    \"match\" : {\n"
operator|+
literal|"      \"prefix\" : {\n"
operator|+
literal|"        \"user\" : {\n"
operator|+
literal|"          \"value\" : \"ki\",\n"
operator|+
literal|"          \"boost\" : 1.08\n"
operator|+
literal|"        }\n"
operator|+
literal|"      }\n"
operator|+
literal|"    },\n"
operator|+
literal|"    \"boost\" : 1.0\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
name|SpanMultiTermQueryBuilder
name|parsed
init|=
operator|(
name|SpanMultiTermQueryBuilder
operator|)
name|parseQuery
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|checkGeneratedJson
argument_list|(
name|json
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
literal|"ki"
argument_list|,
operator|(
operator|(
name|PrefixQueryBuilder
operator|)
name|parsed
operator|.
name|innerQuery
argument_list|()
operator|)
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
literal|1.08
argument_list|,
name|parsed
operator|.
name|innerQuery
argument_list|()
operator|.
name|boost
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

