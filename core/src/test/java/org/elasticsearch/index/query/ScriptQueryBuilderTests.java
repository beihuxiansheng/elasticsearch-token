begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|ScriptQueryBuilder
operator|.
name|ScriptQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|MockScriptEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|AbstractQueryTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_class
DECL|class|ScriptQueryBuilderTests
specifier|public
class|class
name|ScriptQueryBuilderTests
extends|extends
name|AbstractQueryTestCase
argument_list|<
name|ScriptQueryBuilder
argument_list|>
block|{
annotation|@
name|Override
DECL|method|doCreateTestQueryBuilder
specifier|protected
name|ScriptQueryBuilder
name|doCreateTestQueryBuilder
parameter_list|()
block|{
name|String
name|script
init|=
literal|"1"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
return|return
operator|new
name|ScriptQueryBuilder
argument_list|(
operator|new
name|Script
argument_list|(
name|script
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|MockScriptEngine
operator|.
name|NAME
argument_list|,
name|params
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|builderGeneratesCacheableQueries
specifier|protected
name|boolean
name|builderGeneratesCacheableQueries
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|doAssertLuceneQuery
specifier|protected
name|void
name|doAssertLuceneQuery
parameter_list|(
name|ScriptQueryBuilder
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|SearchContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|ScriptQueryBuilder
operator|.
name|ScriptQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure the query would not get cached
name|ScriptQuery
name|sQuery
init|=
operator|(
name|ScriptQuery
operator|)
name|query
decl_stmt|;
name|ScriptQuery
name|clone
init|=
operator|new
name|ScriptQuery
argument_list|(
name|sQuery
operator|.
name|script
argument_list|,
name|sQuery
operator|.
name|searchScript
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|sQuery
operator|.
name|equals
argument_list|(
name|clone
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sQuery
operator|.
name|hashCode
argument_list|()
operator|==
name|clone
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIllegalConstructorArg
specifier|public
name|void
name|testIllegalConstructorArg
parameter_list|()
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|ScriptQueryBuilder
argument_list|(
operator|(
name|Script
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromJsonVerbose
specifier|public
name|void
name|testFromJsonVerbose
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|json
init|=
literal|"{\n"
operator|+
literal|"  \"script\" : {\n"
operator|+
literal|"    \"script\" : {\n"
operator|+
literal|"      \"inline\" : \"5\",\n"
operator|+
literal|"      \"lang\" : \"mockscript\",\n"
operator|+
literal|"      \"params\" : { }\n"
operator|+
literal|"    },\n"
operator|+
literal|"    \"boost\" : 1.0,\n"
operator|+
literal|"    \"_name\" : \"PcKdEyPOmR\"\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
name|ScriptQueryBuilder
name|parsed
init|=
operator|(
name|ScriptQueryBuilder
operator|)
name|parseQuery
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|checkGeneratedJson
argument_list|(
name|json
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
literal|"mockscript"
argument_list|,
name|parsed
operator|.
name|script
argument_list|()
operator|.
name|getLang
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromJson
specifier|public
name|void
name|testFromJson
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|json
init|=
literal|"{\n"
operator|+
literal|"  \"script\" : {\n"
operator|+
literal|"    \"script\" : \"5\","
operator|+
literal|"    \"boost\" : 1.0,\n"
operator|+
literal|"    \"_name\" : \"PcKdEyPOmR\"\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
name|ScriptQueryBuilder
name|parsed
init|=
operator|(
name|ScriptQueryBuilder
operator|)
name|parseQuery
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
literal|"5"
argument_list|,
name|parsed
operator|.
name|script
argument_list|()
operator|.
name|getScript
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getObjectsHoldingArbitraryContent
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getObjectsHoldingArbitraryContent
parameter_list|()
block|{
comment|//script_score.script.params can contain arbitrary parameters. no error is expected when
comment|//adding additional objects within the params object.
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|Script
operator|.
name|ScriptField
operator|.
name|PARAMS
operator|.
name|getPreferredName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isCachable
specifier|protected
name|boolean
name|isCachable
parameter_list|(
name|ScriptQueryBuilder
name|queryBuilder
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

