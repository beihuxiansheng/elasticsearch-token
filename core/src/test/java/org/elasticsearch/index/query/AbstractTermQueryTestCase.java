begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|AbstractTermQueryTestCase
specifier|public
specifier|abstract
class|class
name|AbstractTermQueryTestCase
parameter_list|<
name|QB
extends|extends
name|BaseTermQueryBuilder
parameter_list|<
name|QB
parameter_list|>
parameter_list|>
extends|extends
name|AbstractQueryTestCase
argument_list|<
name|QB
argument_list|>
block|{
annotation|@
name|Override
DECL|method|doCreateTestQueryBuilder
specifier|protected
specifier|final
name|QB
name|doCreateTestQueryBuilder
parameter_list|()
block|{
name|String
name|fieldName
init|=
literal|null
decl_stmt|;
name|Object
name|value
decl_stmt|;
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|fieldName
operator|=
name|BOOLEAN_FIELD_NAME
expr_stmt|;
block|}
name|value
operator|=
name|randomBoolean
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|fieldName
operator|=
name|STRING_FIELD_NAME
expr_stmt|;
block|}
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
name|value
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// generate unicode string in 10% of cases
name|value
operator|=
name|randomUnicodeOfLength
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|fieldName
operator|=
name|INT_FIELD_NAME
expr_stmt|;
block|}
name|value
operator|=
name|randomInt
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|fieldName
operator|=
name|DOUBLE_FIELD_NAME
expr_stmt|;
block|}
name|value
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
if|if
condition|(
name|fieldName
operator|==
literal|null
condition|)
block|{
name|fieldName
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
return|return
name|createQueryBuilder
argument_list|(
name|fieldName
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|createQueryBuilder
specifier|protected
specifier|abstract
name|QB
name|createQueryBuilder
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Object
name|value
parameter_list|)
function_decl|;
annotation|@
name|Test
DECL|method|testIllegalArguments
specifier|public
name|void
name|testIllegalArguments
parameter_list|()
throws|throws
name|QueryShardException
block|{
try|try
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|createQueryBuilder
argument_list|(
literal|null
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|30
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createQueryBuilder
argument_list|(
literal|""
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|30
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"fieldname cannot be null or empty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|createQueryBuilder
argument_list|(
literal|"field"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"value cannot be null or empty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Override
DECL|method|getAlternateVersions
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|QB
argument_list|>
name|getAlternateVersions
parameter_list|()
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|QB
argument_list|>
name|alternateVersions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|QB
name|tempQuery
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|QB
name|testQuery
init|=
name|createQueryBuilder
argument_list|(
name|tempQuery
operator|.
name|fieldName
argument_list|()
argument_list|,
name|tempQuery
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isString
init|=
name|testQuery
operator|.
name|value
argument_list|()
operator|instanceof
name|String
decl_stmt|;
name|String
name|value
init|=
operator|(
name|isString
condition|?
literal|"\""
else|:
literal|""
operator|)
operator|+
name|testQuery
operator|.
name|value
argument_list|()
operator|+
operator|(
name|isString
condition|?
literal|"\""
else|:
literal|""
operator|)
decl_stmt|;
name|String
name|contentString
init|=
literal|"{\n"
operator|+
literal|"    \""
operator|+
name|testQuery
operator|.
name|getName
argument_list|()
operator|+
literal|"\" : {\n"
operator|+
literal|"        \""
operator|+
name|testQuery
operator|.
name|fieldName
argument_list|()
operator|+
literal|"\" : "
operator|+
name|value
operator|+
literal|"\n"
operator|+
literal|"    }\n"
operator|+
literal|"}"
decl_stmt|;
name|alternateVersions
operator|.
name|put
argument_list|(
name|contentString
argument_list|,
name|testQuery
argument_list|)
expr_stmt|;
return|return
name|alternateVersions
return|;
block|}
block|}
end_class

end_unit

