begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
operator|.
name|OpType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|indexedscripts
operator|.
name|delete
operator|.
name|DeleteIndexedScriptResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|indexedscripts
operator|.
name|get
operator|.
name|GetIndexedScriptResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|indexedscripts
operator|.
name|put
operator|.
name|PutIndexedScriptRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|indexedscripts
operator|.
name|put
operator|.
name|PutIndexedScriptResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Template
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|mustache
operator|.
name|MustacheScriptEngineService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_comment
comment|/**  * Full integration test of the template query plugin.  */
end_comment

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ESIntegTestCase
operator|.
name|Scope
operator|.
name|SUITE
argument_list|)
DECL|class|TemplateQueryIT
specifier|public
class|class
name|TemplateQueryIT
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"testtype"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"testtype"
argument_list|,
literal|"2"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nodeSettings
specifier|public
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|super
operator|.
name|nodeSettings
argument_list|(
name|nodeOrdinal
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"path.conf"
argument_list|,
name|this
operator|.
name|getDataPath
argument_list|(
literal|"config"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testTemplateInBody
specifier|public
name|void
name|testTemplateInBody
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|vars
operator|.
name|put
argument_list|(
literal|"template"
argument_list|,
literal|"all"
argument_list|)
expr_stmt|;
name|TemplateQueryBuilder
name|builder
init|=
operator|new
name|TemplateQueryBuilder
argument_list|(
operator|new
name|Template
argument_list|(
literal|"{\"match_{{template}}\": {}}\""
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|vars
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|sr
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|builder
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|sr
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|//    @Test NOCOMMIT fix this
comment|//    public void testTemplateInBodyWithSize() throws IOException {
comment|//        String request = "{\n" +
comment|//                "    \"size\":0," +
comment|//                "    \"query\": {\n" +
comment|//                "        \"template\": {\n" +
comment|//                "            \"query\": {\"match_{{template}}\": {}},\n" +
comment|//                "            \"params\" : {\n" +
comment|//                "                \"template\" : \"all\"\n" +
comment|//                "            }\n" +
comment|//                "        }\n" +
comment|//                "    }\n" +
comment|//                "}";
comment|//        SearchResponse sr = client().prepareSearch().setSource(new BytesArray(request))
comment|//                .execute().actionGet();
comment|//        assertNoFailures(sr);
comment|//        assertThat(sr.getHits().hits().length, equalTo(0));
comment|//        request = "{\n" +
comment|//                "    \"query\": {\n" +
comment|//                "        \"template\": {\n" +
comment|//                "            \"query\": {\"match_{{template}}\": {}},\n" +
comment|//                "            \"params\" : {\n" +
comment|//                "                \"template\" : \"all\"\n" +
comment|//                "            }\n" +
comment|//                "        }\n" +
comment|//                "    },\n" +
comment|//                "    \"size\":0" +
comment|//                "}";
comment|//
comment|//        sr = client().prepareSearch().setSource(new BytesArray(request))
comment|//                .execute().actionGet();
comment|//        assertNoFailures(sr);
comment|//        assertThat(sr.getHits().hits().length, equalTo(0));
comment|//    }
annotation|@
name|Test
DECL|method|testTemplateWOReplacementInBody
specifier|public
name|void
name|testTemplateWOReplacementInBody
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TemplateQueryBuilder
name|builder
init|=
operator|new
name|TemplateQueryBuilder
argument_list|(
operator|new
name|Template
argument_list|(
literal|"{\"match_all\": {}}\""
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|vars
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|sr
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|builder
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|sr
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTemplateInFile
specifier|public
name|void
name|testTemplateInFile
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|vars
operator|.
name|put
argument_list|(
literal|"template"
argument_list|,
literal|"all"
argument_list|)
expr_stmt|;
name|TemplateQueryBuilder
name|builder
init|=
operator|new
name|TemplateQueryBuilder
argument_list|(
operator|new
name|Template
argument_list|(
literal|"storedTemplate"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|FILE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|vars
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|sr
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|builder
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|sr
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// NORELEASE These need to be tested in TemplateQueryBuilderTests
comment|// @Test
comment|// public void testRawEscapedTemplate() throws IOException {
comment|// String query =
comment|// "{\"template\": {\"query\": \"{\\\"match_{{template}}\\\": {}}\\\"\",\"params\" : {\"template\" : \"all\"}}}";
comment|//
comment|// SearchResponse sr = client().prepareSearch().setQuery(query).get();
comment|// assertHitCount(sr, 2);
comment|// }
comment|//
comment|// @Test
comment|// public void testRawTemplate() throws IOException {
comment|// String query =
comment|// "{\"template\": {\"query\": {\"match_{{template}}\": {}},\"params\" : {\"template\" : \"all\"}}}";
comment|// SearchResponse sr = client().prepareSearch().setQuery(query).get();
comment|// assertHitCount(sr, 2);
comment|// }
comment|//
comment|// @Test
comment|// public void testRawFSTemplate() throws IOException {
comment|// String query =
comment|// "{\"template\": {\"file\": \"storedTemplate\",\"params\" : {\"template\" : \"all\"}}}";
comment|//
comment|// SearchResponse sr = client().prepareSearch().setQuery(query).get();
comment|// assertHitCount(sr, 2);
comment|// }
annotation|@
name|Test
DECL|method|testSearchRequestTemplateSource
specifier|public
name|void
name|testSearchRequestTemplateSource
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"_all"
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"{ \"template\" : { \"query\": {\"match_{{template}}\": {} } }, \"params\" : { \"template\":\"all\" } }"
decl_stmt|;
name|BytesReference
name|bytesRef
init|=
operator|new
name|BytesArray
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|searchRequest
operator|.
name|templateSource
argument_list|(
name|bytesRef
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// Releates to #6318
DECL|method|testSearchRequestFail
specifier|public
name|void
name|testSearchRequestFail
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"_all"
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|query
init|=
literal|"{ \"template\" : { \"query\": {\"match_all\": {}}, \"size\" : \"{{my_size}}\"  } }"
decl_stmt|;
name|BytesReference
name|bytesRef
init|=
operator|new
name|BytesArray
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|searchRequest
operator|.
name|templateSource
argument_list|(
name|bytesRef
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected - no params
block|}
name|String
name|query
init|=
literal|"{ \"template\" : { \"query\": {\"match_all\": {}}, \"size\" : \"{{my_size}}\"  }, \"params\" : { \"my_size\": 1 } }"
decl_stmt|;
name|BytesReference
name|bytesRef
init|=
operator|new
name|BytesArray
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|searchRequest
operator|.
name|templateSource
argument_list|(
name|bytesRef
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatParametersCanBeSet
specifier|public
name|void
name|testThatParametersCanBeSet
parameter_list|()
throws|throws
name|Exception
block|{
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"theField"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"theField"
argument_list|,
literal|"foo 2"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"theField"
argument_list|,
literal|"foo 3"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"theField"
argument_list|,
literal|"foo 4"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"5"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"otherField"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|templateParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|templateParams
operator|.
name|put
argument_list|(
literal|"mySize"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|templateParams
operator|.
name|put
argument_list|(
literal|"myField"
argument_list|,
literal|"theField"
argument_list|)
expr_stmt|;
name|templateParams
operator|.
name|put
argument_list|(
literal|"myValue"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setTemplate
argument_list|(
operator|new
name|Template
argument_list|(
literal|"full-query-template"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|,
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|null
argument_list|,
name|templateParams
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// size kicks in here...
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|templateParams
operator|.
name|put
argument_list|(
literal|"myField"
argument_list|,
literal|"otherField"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setTemplate
argument_list|(
operator|new
name|Template
argument_list|(
literal|"full-query-template"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|,
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|null
argument_list|,
name|templateParams
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSearchTemplateQueryFromFile
specifier|public
name|void
name|testSearchTemplateQueryFromFile
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"_all"
argument_list|)
expr_stmt|;
name|String
name|templateString
init|=
literal|"{"
operator|+
literal|"  \"file\": \"full-query-template\","
operator|+
literal|"  \"params\":{"
operator|+
literal|"    \"mySize\": 2,"
operator|+
literal|"    \"myField\": \"text\","
operator|+
literal|"    \"myValue\": \"value1\""
operator|+
literal|"  }"
operator|+
literal|"}"
decl_stmt|;
name|BytesReference
name|bytesRef
init|=
operator|new
name|BytesArray
argument_list|(
name|templateString
argument_list|)
decl_stmt|;
name|searchRequest
operator|.
name|templateSource
argument_list|(
name|bytesRef
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that template can be expressed as a single escaped string.      */
annotation|@
name|Test
DECL|method|testTemplateQueryAsEscapedString
specifier|public
name|void
name|testTemplateQueryAsEscapedString
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"_all"
argument_list|)
expr_stmt|;
name|String
name|templateString
init|=
literal|"{"
operator|+
literal|"  \"template\" : \"{ \\\"size\\\": \\\"{{size}}\\\", \\\"query\\\":{\\\"match_all\\\":{}}}\","
operator|+
literal|"  \"params\":{"
operator|+
literal|"    \"size\": 1"
operator|+
literal|"  }"
operator|+
literal|"}"
decl_stmt|;
name|BytesReference
name|bytesRef
init|=
operator|new
name|BytesArray
argument_list|(
name|templateString
argument_list|)
decl_stmt|;
name|searchRequest
operator|.
name|templateSource
argument_list|(
name|bytesRef
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that template can contain conditional clause. In this case it is at      * the beginning of the string.      */
annotation|@
name|Test
DECL|method|testTemplateQueryAsEscapedStringStartingWithConditionalClause
specifier|public
name|void
name|testTemplateQueryAsEscapedStringStartingWithConditionalClause
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"_all"
argument_list|)
expr_stmt|;
name|String
name|templateString
init|=
literal|"{"
operator|+
literal|"  \"template\" : \"{ {{#use_size}} \\\"size\\\": \\\"{{size}}\\\", {{/use_size}} \\\"query\\\":{\\\"match_all\\\":{}}}\","
operator|+
literal|"  \"params\":{"
operator|+
literal|"    \"size\": 1,"
operator|+
literal|"    \"use_size\": true"
operator|+
literal|"  }"
operator|+
literal|"}"
decl_stmt|;
name|BytesReference
name|bytesRef
init|=
operator|new
name|BytesArray
argument_list|(
name|templateString
argument_list|)
decl_stmt|;
name|searchRequest
operator|.
name|templateSource
argument_list|(
name|bytesRef
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that template can contain conditional clause. In this case it is at      * the end of the string.      */
annotation|@
name|Test
DECL|method|testTemplateQueryAsEscapedStringWithConditionalClauseAtEnd
specifier|public
name|void
name|testTemplateQueryAsEscapedStringWithConditionalClauseAtEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|searchRequest
operator|.
name|indices
argument_list|(
literal|"_all"
argument_list|)
expr_stmt|;
name|String
name|templateString
init|=
literal|"{"
operator|+
literal|"  \"inline\" : \"{ \\\"query\\\":{\\\"match_all\\\":{}} {{#use_size}}, \\\"size\\\": \\\"{{size}}\\\" {{/use_size}} }\","
operator|+
literal|"  \"params\":{"
operator|+
literal|"    \"size\": 1,"
operator|+
literal|"    \"use_size\": true"
operator|+
literal|"  }"
operator|+
literal|"}"
decl_stmt|;
name|BytesReference
name|bytesRef
init|=
operator|new
name|BytesArray
argument_list|(
name|templateString
argument_list|)
decl_stmt|;
name|searchRequest
operator|.
name|templateSource
argument_list|(
name|bytesRef
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SearchPhaseExecutionException
operator|.
name|class
argument_list|)
DECL|method|testIndexedTemplateClient
specifier|public
name|void
name|testIndexedTemplateClient
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_INDEX
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_INDEX
argument_list|)
expr_stmt|;
name|PutIndexedScriptResponse
name|scriptResponse
init|=
name|client
argument_list|()
operator|.
name|preparePutIndexedScript
argument_list|(
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"testTemplate"
argument_list|,
literal|"{"
operator|+
literal|"\"template\":{"
operator|+
literal|"                \"query\":{"
operator|+
literal|"                   \"match\":{"
operator|+
literal|"                    \"theField\" : \"{{fieldParam}}\"}"
operator|+
literal|"       }"
operator|+
literal|"}"
operator|+
literal|"}"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|scriptResponse
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
name|scriptResponse
operator|=
name|client
argument_list|()
operator|.
name|preparePutIndexedScript
argument_list|(
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"testTemplate"
argument_list|,
literal|"{"
operator|+
literal|"\"template\":{"
operator|+
literal|"                \"query\":{"
operator|+
literal|"                   \"match\":{"
operator|+
literal|"                    \"theField\" : \"{{fieldParam}}\"}"
operator|+
literal|"       }"
operator|+
literal|"}"
operator|+
literal|"}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|scriptResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|GetIndexedScriptResponse
name|getResponse
init|=
name|client
argument_list|()
operator|.
name|prepareGetIndexedScript
argument_list|(
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"testTemplate"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|getResponse
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo 2\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo 3\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo 4\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"bar\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|templateParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|templateParams
operator|.
name|put
argument_list|(
literal|"fieldParam"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setTemplate
argument_list|(
operator|new
name|Template
argument_list|(
literal|"testTemplate"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|null
argument_list|,
name|templateParams
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|DeleteIndexedScriptResponse
name|deleteResponse
init|=
name|client
argument_list|()
operator|.
name|prepareDeleteIndexedScript
argument_list|(
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"testTemplate"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|deleteResponse
operator|.
name|isFound
argument_list|()
argument_list|)
expr_stmt|;
name|getResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareGetIndexedScript
argument_list|(
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"testTemplate"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|getResponse
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setTemplate
argument_list|(
operator|new
name|Template
argument_list|(
literal|"/template_index/mustache/1000"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|null
argument_list|,
name|templateParams
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndexedTemplate
specifier|public
name|void
name|testIndexedTemplate
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_INDEX
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_INDEX
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_INDEX
argument_list|,
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"1a"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{"
operator|+
literal|"\"template\":{"
operator|+
literal|"                \"query\":{"
operator|+
literal|"                   \"match\":{"
operator|+
literal|"                    \"theField\" : \"{{fieldParam}}\"}"
operator|+
literal|"       }"
operator|+
literal|"}"
operator|+
literal|"}"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_INDEX
argument_list|,
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{"
operator|+
literal|"\"template\":{"
operator|+
literal|"                \"query\":{"
operator|+
literal|"                   \"match\":{"
operator|+
literal|"                    \"theField\" : \"{{fieldParam}}\"}"
operator|+
literal|"       }"
operator|+
literal|"}"
operator|+
literal|"}"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_INDEX
argument_list|,
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{"
operator|+
literal|"\"template\":{"
operator|+
literal|"             \"match\":{"
operator|+
literal|"                    \"theField\" : \"{{fieldParam}}\"}"
operator|+
literal|"       }"
operator|+
literal|"}"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|builders
operator|.
name|clear
argument_list|()
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo 2\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo 3\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo 4\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"bar\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|templateParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|templateParams
operator|.
name|put
argument_list|(
literal|"fieldParam"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setTemplate
argument_list|(
operator|new
name|Template
argument_list|(
literal|"/mustache/1a"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|null
argument_list|,
name|templateParams
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|4
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setTemplate
argument_list|(
operator|new
name|Template
argument_list|(
literal|"/template_index/mustache/1000"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|null
argument_list|,
name|templateParams
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"shouldn't get here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|spee
parameter_list|)
block|{
comment|//all good
block|}
try|try
block|{
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setTemplate
argument_list|(
operator|new
name|Template
argument_list|(
literal|"/myindex/mustache/1"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|null
argument_list|,
name|templateParams
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|spee
parameter_list|)
block|{
comment|//all good
block|}
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setTemplate
argument_list|(
operator|new
name|Template
argument_list|(
literal|"1a"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|null
argument_list|,
name|templateParams
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|templateParams
operator|.
name|put
argument_list|(
literal|"fieldParam"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setTemplate
argument_list|(
operator|new
name|Template
argument_list|(
literal|"/mustache/2"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|null
argument_list|,
name|templateParams
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|vars
operator|.
name|put
argument_list|(
literal|"fieldParam"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|TemplateQueryBuilder
name|builder
init|=
operator|new
name|TemplateQueryBuilder
argument_list|(
operator|new
name|Template
argument_list|(
literal|"3"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INDEXED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|vars
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|sr
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|builder
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|sr
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// "{\"template\": {\"id\": \"3\",\"params\" : {\"fieldParam\" : \"foo\"}}}";
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"fieldParam"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|TemplateQueryBuilder
name|templateQuery
init|=
operator|new
name|TemplateQueryBuilder
argument_list|(
operator|new
name|Template
argument_list|(
literal|"3"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|params
argument_list|)
argument_list|)
decl_stmt|;
name|sr
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|templateQuery
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|sr
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|templateQuery
operator|=
operator|new
name|TemplateQueryBuilder
argument_list|(
operator|new
name|Template
argument_list|(
literal|"/mustache/3"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
name|sr
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|templateQuery
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|sr
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
comment|// Relates to #10397
annotation|@
name|Test
DECL|method|testIndexedTemplateOverwrite
specifier|public
name|void
name|testIndexedTemplateOverwrite
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"testindex"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"testindex"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"testindex"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"searchtext"
argument_list|,
literal|"dev1"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|int
name|iterations
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|11
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|PutIndexedScriptResponse
name|scriptResponse
init|=
name|client
argument_list|()
operator|.
name|preparePutIndexedScript
argument_list|(
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"git01"
argument_list|,
literal|"{\"query\": {\"match\": {\"searchtext\": {\"query\": \"{{P_Keyword1}}\",\"type\": \"ooophrase_prefix\"}}}}"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|i
operator|*
literal|2
operator|-
literal|1
argument_list|,
name|scriptResponse
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|GetIndexedScriptResponse
name|getResponse
init|=
name|client
argument_list|()
operator|.
name|prepareGetIndexedScript
argument_list|(
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"git01"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|getResponse
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|templateParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|templateParams
operator|.
name|put
argument_list|(
literal|"P_Keyword1"
argument_list|,
literal|"dev"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"testindex"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTemplate
argument_list|(
operator|new
name|Template
argument_list|(
literal|"git01"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|null
argument_list|,
name|templateParams
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Broken test template is parsing w/o error."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{
comment|// the above is expected to fail
block|}
name|PutIndexedScriptRequestBuilder
name|builder
init|=
name|client
argument_list|()
operator|.
name|preparePutIndexedScript
argument_list|(
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"git01"
argument_list|,
literal|"{\"query\": {\"match\": {\"searchtext\": {\"query\": \"{{P_Keyword1}}\",\"type\": \"phrase_prefix\"}}}}"
argument_list|)
operator|.
name|setOpType
argument_list|(
name|OpType
operator|.
name|INDEX
argument_list|)
decl_stmt|;
name|scriptResponse
operator|=
name|builder
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|*
literal|2
argument_list|,
name|scriptResponse
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"testindex"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTemplate
argument_list|(
operator|new
name|Template
argument_list|(
literal|"git01"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|null
argument_list|,
name|templateParams
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIndexedTemplateWithArray
specifier|public
name|void
name|testIndexedTemplateWithArray
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_INDEX
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_INDEX
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|multiQuery
init|=
literal|"{\"query\":{\"terms\":{\"theField\":[\"{{#fieldParam}}\",\"{{.}}\",\"{{/fieldParam}}\"]}}}"
decl_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_INDEX
argument_list|,
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"template"
argument_list|,
name|multiQuery
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|builders
operator|.
name|clear
argument_list|()
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo 2\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo 3\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"foo 4\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"theField\":\"bar\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|arrayTemplateParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|fieldParams
init|=
block|{
literal|"foo"
block|,
literal|"bar"
block|}
decl_stmt|;
name|arrayTemplateParams
operator|.
name|put
argument_list|(
literal|"fieldParam"
argument_list|,
name|fieldParams
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setTemplate
argument_list|(
operator|new
name|Template
argument_list|(
literal|"/mustache/4"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|null
argument_list|,
name|arrayTemplateParams
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

