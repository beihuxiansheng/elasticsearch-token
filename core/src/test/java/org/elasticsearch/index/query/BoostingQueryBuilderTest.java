begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|BoostingQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_class
DECL|class|BoostingQueryBuilderTest
specifier|public
class|class
name|BoostingQueryBuilderTest
extends|extends
name|BaseQueryTestCase
argument_list|<
name|BoostingQueryBuilder
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createTestQueryBuilder
specifier|protected
name|BoostingQueryBuilder
name|createTestQueryBuilder
parameter_list|()
block|{
name|BoostingQueryBuilder
name|query
init|=
operator|new
name|BoostingQueryBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|positive
argument_list|(
name|RandomQueryBuilder
operator|.
name|create
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|negative
argument_list|(
name|RandomQueryBuilder
operator|.
name|create
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|negativeBoost
argument_list|(
literal|2.0f
operator|/
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|query
operator|.
name|boost
argument_list|(
literal|2.0f
operator|/
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
annotation|@
name|Override
DECL|method|createExpectedQuery
specifier|protected
name|Query
name|createExpectedQuery
parameter_list|(
name|BoostingQueryBuilder
name|queryBuilder
parameter_list|,
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Query
name|positive
init|=
name|queryBuilder
operator|.
name|positive
argument_list|()
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Query
name|negative
init|=
name|queryBuilder
operator|.
name|negative
argument_list|()
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|BoostingQuery
name|boostingQuery
init|=
operator|new
name|BoostingQuery
argument_list|(
name|positive
argument_list|,
name|negative
argument_list|,
name|queryBuilder
operator|.
name|negativeBoost
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryBuilder
operator|.
name|boost
argument_list|()
operator|!=
literal|1.0f
condition|)
block|{
name|boostingQuery
operator|.
name|setBoost
argument_list|(
name|queryBuilder
operator|.
name|boost
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|boostingQuery
return|;
block|}
annotation|@
name|Test
DECL|method|testToXContentIllegalArgumentExceptions
specifier|public
name|void
name|testToXContentIllegalArgumentExceptions
parameter_list|()
throws|throws
name|IOException
block|{
name|BoostingQueryBuilder
name|boostingQueryBuilder
init|=
operator|new
name|BoostingQueryBuilder
argument_list|()
decl_stmt|;
name|boostingQueryBuilder
operator|.
name|positive
argument_list|(
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|boostingQueryBuilder
operator|.
name|toXContent
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException because of missing negative query."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|boostingQueryBuilder
operator|=
operator|new
name|BoostingQueryBuilder
argument_list|()
expr_stmt|;
name|boostingQueryBuilder
operator|.
name|negative
argument_list|(
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|boostingQueryBuilder
operator|.
name|toXContent
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException because of missing positive query."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|/**      * tests that we signal upstream queries to ignore this query by returning<tt>null</tt>      * if any of the inner query builder is not set      */
annotation|@
name|Test
DECL|method|testInnerQueryBuilderNull
specifier|public
name|void
name|testInnerQueryBuilderNull
parameter_list|()
throws|throws
name|IOException
block|{
name|BoostingQueryBuilder
name|boostingQueryBuilder
init|=
operator|new
name|BoostingQueryBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|boostingQueryBuilder
operator|.
name|positive
argument_list|(
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|)
operator|.
name|negative
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boostingQueryBuilder
operator|.
name|positive
argument_list|(
literal|null
argument_list|)
operator|.
name|negative
argument_list|(
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|boostingQueryBuilder
operator|.
name|toQuery
argument_list|(
name|createContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInnerQueryBuilderReturnsNull
specifier|public
name|void
name|testInnerQueryBuilderReturnsNull
parameter_list|()
throws|throws
name|IOException
block|{
name|QueryBuilder
name|noOpBuilder
init|=
operator|new
name|AbstractQueryBuilder
argument_list|<
name|QueryBuilder
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"dummy"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{             }
annotation|@
name|Override
specifier|public
name|Query
name|toQuery
parameter_list|(
name|QueryParseContext
name|context
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|BoostingQueryBuilder
name|boostingQueryBuilder
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|boostingQueryBuilder
operator|=
operator|new
name|BoostingQueryBuilder
argument_list|()
operator|.
name|positive
argument_list|(
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|)
operator|.
name|negative
argument_list|(
name|noOpBuilder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boostingQueryBuilder
operator|=
operator|new
name|BoostingQueryBuilder
argument_list|()
operator|.
name|positive
argument_list|(
name|noOpBuilder
argument_list|)
operator|.
name|negative
argument_list|(
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|boostingQueryBuilder
operator|.
name|toQuery
argument_list|(
name|createContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidate
specifier|public
name|void
name|testValidate
parameter_list|()
block|{
name|BoostingQueryBuilder
name|boostingQueryBuilder
init|=
operator|new
name|BoostingQueryBuilder
argument_list|()
decl_stmt|;
comment|// check for error with negative `negative boost` factor
name|boostingQueryBuilder
operator|.
name|negativeBoost
argument_list|(
operator|-
literal|0.5f
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|boostingQueryBuilder
operator|.
name|validate
argument_list|()
operator|.
name|validationErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

