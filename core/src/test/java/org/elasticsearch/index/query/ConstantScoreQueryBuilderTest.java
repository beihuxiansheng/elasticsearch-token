begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|ConstantScoreQueryBuilderTest
specifier|public
class|class
name|ConstantScoreQueryBuilderTest
extends|extends
name|BaseQueryTestCase
argument_list|<
name|ConstantScoreQueryBuilder
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createExpectedQuery
specifier|protected
name|Query
name|createExpectedQuery
parameter_list|(
name|ConstantScoreQueryBuilder
name|testBuilder
parameter_list|,
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|QueryParsingException
throws|,
name|IOException
block|{
name|Query
name|expectedQuery
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
name|testBuilder
operator|.
name|query
argument_list|()
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|expectedQuery
operator|.
name|setBoost
argument_list|(
name|testBuilder
operator|.
name|boost
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|expectedQuery
return|;
block|}
comment|/**      * @return a {@link ConstantScoreQueryBuilder} with random boost between 0.1f and 2.0f      */
annotation|@
name|Override
DECL|method|createTestQueryBuilder
specifier|protected
name|ConstantScoreQueryBuilder
name|createTestQueryBuilder
parameter_list|()
block|{
name|ConstantScoreQueryBuilder
name|query
init|=
operator|new
name|ConstantScoreQueryBuilder
argument_list|(
name|RandomQueryBuilder
operator|.
name|create
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|query
operator|.
name|boost
argument_list|(
literal|2.0f
operator|/
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
comment|/**      * test that missing "filter" element causes {@link QueryParsingException}      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|QueryParsingException
operator|.
name|class
argument_list|)
DECL|method|testNoFilterElement
specifier|public
name|void
name|testNoFilterElement
parameter_list|()
throws|throws
name|IOException
block|{
name|QueryParseContext
name|context
init|=
name|createContext
argument_list|()
decl_stmt|;
name|String
name|queryId
init|=
name|ConstantScoreQueryBuilder
operator|.
name|PROTOTYPE
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|queryString
init|=
literal|"{ \""
operator|+
name|queryId
operator|+
literal|"\" : {}"
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|queryString
argument_list|)
operator|.
name|createParser
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
name|context
operator|.
name|reset
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertQueryHeader
argument_list|(
name|parser
argument_list|,
name|queryId
argument_list|)
expr_stmt|;
name|context
operator|.
name|indexQueryParserService
argument_list|()
operator|.
name|queryParser
argument_list|(
name|queryId
argument_list|)
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test empty "filter" element.      * Current DSL allows inner filter element to be empty, returning a `null` inner filter builder      */
annotation|@
name|Test
DECL|method|testEmptyFilterElement
specifier|public
name|void
name|testEmptyFilterElement
parameter_list|()
throws|throws
name|IOException
block|{
name|QueryParseContext
name|context
init|=
name|createContext
argument_list|()
decl_stmt|;
name|String
name|queryId
init|=
name|ConstantScoreQueryBuilder
operator|.
name|PROTOTYPE
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|queryString
init|=
literal|"{ \""
operator|+
name|queryId
operator|+
literal|"\" : { \"filter\" : { } }"
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|queryString
argument_list|)
operator|.
name|createParser
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
name|context
operator|.
name|reset
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertQueryHeader
argument_list|(
name|parser
argument_list|,
name|queryId
argument_list|)
expr_stmt|;
name|ConstantScoreQueryBuilder
name|queryBuilder
init|=
operator|(
name|ConstantScoreQueryBuilder
operator|)
name|context
operator|.
name|indexQueryParserService
argument_list|()
operator|.
name|queryParser
argument_list|(
name|queryId
argument_list|)
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|queryBuilder
operator|.
name|query
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queryBuilder
operator|.
name|toQuery
argument_list|(
name|createContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

