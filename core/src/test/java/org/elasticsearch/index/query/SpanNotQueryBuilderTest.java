begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanNotQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|spanNearQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|spanTermQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
DECL|class|SpanNotQueryBuilderTest
specifier|public
class|class
name|SpanNotQueryBuilderTest
extends|extends
name|BaseQueryTestCase
argument_list|<
name|SpanNotQueryBuilder
argument_list|>
block|{
annotation|@
name|Override
DECL|method|doCreateTestQueryBuilder
specifier|protected
name|SpanNotQueryBuilder
name|doCreateTestQueryBuilder
parameter_list|()
block|{
name|SpanTermQueryBuilder
index|[]
name|spanTermQueries
init|=
operator|new
name|SpanTermQueryBuilderTest
argument_list|()
operator|.
name|createSpanTermQueryBuilders
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|SpanNotQueryBuilder
name|queryBuilder
init|=
operator|new
name|SpanNotQueryBuilder
argument_list|(
name|spanTermQueries
index|[
literal|0
index|]
argument_list|,
name|spanTermQueries
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// also test negative values, they should implicitly be changed to 0
name|queryBuilder
operator|.
name|dist
argument_list|(
name|randomIntBetween
argument_list|(
operator|-
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|pre
argument_list|(
name|randomIntBetween
argument_list|(
operator|-
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|post
argument_list|(
name|randomIntBetween
argument_list|(
operator|-
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|queryBuilder
return|;
block|}
annotation|@
name|Override
DECL|method|doAssertLuceneQuery
specifier|protected
name|void
name|doAssertLuceneQuery
parameter_list|(
name|SpanNotQueryBuilder
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|SpanNotQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNotQuery
name|spanNotQuery
init|=
operator|(
name|SpanNotQuery
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|spanNotQuery
operator|.
name|getExclude
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|queryBuilder
operator|.
name|excludeQuery
argument_list|()
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|spanNotQuery
operator|.
name|getInclude
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|queryBuilder
operator|.
name|includeQuery
argument_list|()
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidate
specifier|public
name|void
name|testValidate
parameter_list|()
block|{
name|int
name|totalExpectedErrors
init|=
literal|0
decl_stmt|;
name|SpanQueryBuilder
name|include
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|include
operator|=
operator|new
name|SpanTermQueryBuilder
argument_list|(
literal|""
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|include
operator|=
literal|null
expr_stmt|;
block|}
name|totalExpectedErrors
operator|++
expr_stmt|;
block|}
else|else
block|{
name|include
operator|=
operator|new
name|SpanTermQueryBuilder
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
block|}
name|SpanQueryBuilder
name|exclude
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|exclude
operator|=
operator|new
name|SpanTermQueryBuilder
argument_list|(
literal|""
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exclude
operator|=
literal|null
expr_stmt|;
block|}
name|totalExpectedErrors
operator|++
expr_stmt|;
block|}
else|else
block|{
name|exclude
operator|=
operator|new
name|SpanTermQueryBuilder
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
block|}
name|SpanNotQueryBuilder
name|queryBuilder
init|=
operator|new
name|SpanNotQueryBuilder
argument_list|(
name|include
argument_list|,
name|exclude
argument_list|)
decl_stmt|;
name|assertValidate
argument_list|(
name|queryBuilder
argument_list|,
name|totalExpectedErrors
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDist
specifier|public
name|void
name|testDist
parameter_list|()
block|{
name|SpanNotQueryBuilder
name|builder
init|=
operator|new
name|SpanNotQueryBuilder
argument_list|(
operator|new
name|SpanTermQueryBuilder
argument_list|(
literal|"name1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
operator|new
name|SpanTermQueryBuilder
argument_list|(
literal|"name2"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|builder
operator|.
name|pre
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|builder
operator|.
name|post
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|dist
argument_list|(
operator|-
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|builder
operator|.
name|pre
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|builder
operator|.
name|post
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|dist
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|builder
operator|.
name|pre
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|builder
operator|.
name|post
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrePost
specifier|public
name|void
name|testPrePost
parameter_list|()
block|{
name|SpanNotQueryBuilder
name|builder
init|=
operator|new
name|SpanNotQueryBuilder
argument_list|(
operator|new
name|SpanTermQueryBuilder
argument_list|(
literal|"name1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
operator|new
name|SpanTermQueryBuilder
argument_list|(
literal|"name2"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|builder
operator|.
name|pre
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|builder
operator|.
name|post
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|pre
argument_list|(
operator|-
literal|4
argument_list|)
operator|.
name|post
argument_list|(
operator|-
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|builder
operator|.
name|pre
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|builder
operator|.
name|post
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|pre
argument_list|(
literal|1
argument_list|)
operator|.
name|post
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|builder
operator|.
name|pre
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|builder
operator|.
name|post
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * test correct parsing of `dist` parameter, this should create builder with pre/post set to same value      */
annotation|@
name|Test
DECL|method|testParseDist
specifier|public
name|void
name|testParseDist
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|SpanNotQueryBuilder
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"exclude"
argument_list|)
expr_stmt|;
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"jumped"
argument_list|)
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"include"
argument_list|)
expr_stmt|;
name|spanNearQuery
argument_list|(
literal|1
argument_list|)
operator|.
name|clause
argument_list|(
name|QueryBuilders
operator|.
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|QueryBuilders
operator|.
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"dist"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|SpanNotQueryBuilder
name|query
init|=
operator|(
name|SpanNotQueryBuilder
operator|)
name|parseQuery
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|query
operator|.
name|pre
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|query
operator|.
name|post
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|query
operator|.
name|includeQuery
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|query
operator|.
name|excludeQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * test exceptions for three types of broken json, missing include / exclude and both dist and pre/post specified      */
annotation|@
name|Test
DECL|method|testParserExceptions
specifier|public
name|void
name|testParserExceptions
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|SpanNotQueryBuilder
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"exclude"
argument_list|)
expr_stmt|;
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"jumped"
argument_list|)
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"dist"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
try|try
block|{
name|parseQuery
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"QueryParsingException should have been caught"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"QueryParsingException should have been caught"
argument_list|,
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"spanNot must have [include]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|SpanNotQueryBuilder
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"include"
argument_list|)
expr_stmt|;
name|spanNearQuery
argument_list|(
literal|1
argument_list|)
operator|.
name|clause
argument_list|(
name|QueryBuilders
operator|.
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|QueryBuilders
operator|.
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"dist"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
try|try
block|{
name|parseQuery
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"QueryParsingException should have been caught"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"QueryParsingException should have been caught"
argument_list|,
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"spanNot must have [exclude]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|SpanNotQueryBuilder
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"include"
argument_list|)
expr_stmt|;
name|spanNearQuery
argument_list|(
literal|1
argument_list|)
operator|.
name|clause
argument_list|(
name|QueryBuilders
operator|.
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|QueryBuilders
operator|.
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"exclude"
argument_list|)
expr_stmt|;
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"jumped"
argument_list|)
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"dist"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"pre"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
try|try
block|{
name|parseQuery
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"QueryParsingException should have been caught"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"QueryParsingException should have been caught"
argument_list|,
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"spanNot can either use [dist] or [pre]& [post] (or none)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

