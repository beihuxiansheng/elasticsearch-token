begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|innerhits
operator|.
name|InnerHitsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|QueryInnerHitsTests
specifier|public
class|class
name|QueryInnerHitsTests
extends|extends
name|ESTestCase
block|{
DECL|method|testSerialize
specifier|public
name|void
name|testSerialize
parameter_list|()
throws|throws
name|IOException
block|{
name|copyAndAssert
argument_list|(
operator|new
name|QueryInnerHits
argument_list|()
argument_list|)
expr_stmt|;
name|copyAndAssert
argument_list|(
operator|new
name|QueryInnerHits
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|InnerHitsBuilder
operator|.
name|InnerHit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|copyAndAssert
argument_list|(
operator|new
name|QueryInnerHits
argument_list|(
literal|"foo"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|copyAndAssert
argument_list|(
operator|new
name|QueryInnerHits
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|InnerHitsBuilder
operator|.
name|InnerHit
argument_list|()
operator|.
name|setSize
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToXContent
specifier|public
name|void
name|testToXContent
parameter_list|()
throws|throws
name|IOException
block|{
name|assertJson
argument_list|(
literal|"{\"inner_hits\":{}}"
argument_list|,
operator|new
name|QueryInnerHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertJson
argument_list|(
literal|"{\"inner_hits\":{\"name\":\"foo\"}}"
argument_list|,
operator|new
name|QueryInnerHits
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|InnerHitsBuilder
operator|.
name|InnerHit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertJson
argument_list|(
literal|"{\"inner_hits\":{\"name\":\"bar\"}}"
argument_list|,
operator|new
name|QueryInnerHits
argument_list|(
literal|"bar"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertJson
argument_list|(
literal|"{\"inner_hits\":{\"name\":\"foo\",\"size\":42}}"
argument_list|,
operator|new
name|QueryInnerHits
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|InnerHitsBuilder
operator|.
name|InnerHit
argument_list|()
operator|.
name|setSize
argument_list|(
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertJson
argument_list|(
literal|"{\"inner_hits\":{\"name\":\"boom\",\"from\":66,\"size\":666}}"
argument_list|,
operator|new
name|QueryInnerHits
argument_list|(
literal|"boom"
argument_list|,
operator|new
name|InnerHitsBuilder
operator|.
name|InnerHit
argument_list|()
operator|.
name|setFrom
argument_list|(
literal|66
argument_list|)
operator|.
name|setSize
argument_list|(
literal|666
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertJson
specifier|private
name|void
name|assertJson
parameter_list|(
name|String
name|expected
parameter_list|,
name|QueryInnerHits
name|hits
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryInnerHits
name|queryInnerHits
init|=
name|copyAndAssert
argument_list|(
name|hits
argument_list|)
decl_stmt|;
name|String
name|actual
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|actual
operator|=
name|oneLineJSON
argument_list|(
name|queryInnerHits
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actual
operator|=
name|oneLineJSON
argument_list|(
name|hits
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|XContentParser
name|parser
init|=
name|hits
operator|.
name|getXcontentParser
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|QueryInnerHits
name|other
init|=
name|copyAndAssert
argument_list|(
operator|new
name|QueryInnerHits
argument_list|(
name|parser
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|oneLineJSON
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|copyAndAssert
specifier|public
name|QueryInnerHits
name|copyAndAssert
parameter_list|(
name|QueryInnerHits
name|hits
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|hits
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|QueryInnerHits
name|copy
init|=
name|randomBoolean
argument_list|()
condition|?
name|hits
operator|.
name|readFrom
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
else|:
operator|new
name|QueryInnerHits
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|copy
operator|.
name|toString
argument_list|()
operator|+
literal|" vs. "
operator|+
name|hits
operator|.
name|toString
argument_list|()
argument_list|,
name|copy
argument_list|,
name|hits
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
DECL|method|oneLineJSON
specifier|private
name|String
name|oneLineJSON
parameter_list|(
name|QueryInnerHits
name|hits
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|hits
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
block|}
end_class

end_unit

