begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|FieldNamesFieldMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|ExistsQueryBuilderTest
specifier|public
class|class
name|ExistsQueryBuilderTest
extends|extends
name|BaseQueryTestCase
argument_list|<
name|ExistsQueryBuilder
argument_list|>
block|{
DECL|method|getFieldNamePattern
specifier|private
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|getFieldNamePattern
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|QueryParseContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|&&
name|fieldName
operator|.
name|equals
argument_list|(
name|BaseQueryTestCase
operator|.
name|OBJECT_FIELD_NAME
argument_list|)
condition|)
block|{
comment|// "object" field has two inner fields (age, price), so if query hits that field, we
comment|// extend field name with wildcard to match both nested fields. This is similar to what
comment|// is done internally in ExistsQueryBuilder.toQuery()
name|fieldName
operator|=
name|fieldName
operator|+
literal|".*"
expr_stmt|;
block|}
return|return
name|context
operator|.
name|simpleMatchToIndexNames
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createExpectedQuery
specifier|protected
name|Query
name|createExpectedQuery
parameter_list|(
name|ExistsQueryBuilder
name|queryBuilder
parameter_list|,
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FieldNamesFieldMapper
operator|.
name|FieldNamesFieldType
name|fieldNamesFieldType
init|=
operator|(
name|FieldNamesFieldMapper
operator|.
name|FieldNamesFieldType
operator|)
name|context
operator|.
name|mapperService
argument_list|()
operator|.
name|fullName
argument_list|(
name|FieldNamesFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|getFieldNamePattern
argument_list|(
name|queryBuilder
operator|.
name|name
argument_list|()
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|isEmpty
argument_list|()
operator|||
name|fieldNamesFieldType
operator|==
literal|null
condition|)
block|{
return|return
name|Queries
operator|.
name|newMatchNoDocsQuery
argument_list|()
return|;
block|}
name|BooleanQuery
name|boolFilter
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|fieldNamesFieldType
operator|!=
literal|null
operator|&&
name|fieldNamesFieldType
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|boolFilter
operator|.
name|add
argument_list|(
name|fieldNamesFieldType
operator|.
name|termQuery
argument_list|(
name|field
argument_list|,
name|context
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MappedFieldType
name|fieldType
init|=
name|context
operator|.
name|fieldMapper
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|==
literal|null
condition|)
block|{
name|boolFilter
operator|.
name|add
argument_list|(
operator|new
name|TermRangeQuery
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolFilter
operator|.
name|add
argument_list|(
name|fieldType
operator|.
name|rangeQuery
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|context
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|ConstantScoreQuery
argument_list|(
name|boolFilter
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|assertLuceneQuery
specifier|protected
name|void
name|assertLuceneQuery
parameter_list|(
name|ExistsQueryBuilder
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|QueryParseContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|queryBuilder
operator|.
name|queryName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Query
name|namedQuery
init|=
name|context
operator|.
name|copyNamedFilters
argument_list|()
operator|.
name|get
argument_list|(
name|queryBuilder
operator|.
name|queryName
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|getFieldNamePattern
argument_list|(
name|queryBuilder
operator|.
name|name
argument_list|()
argument_list|,
name|context
argument_list|)
decl_stmt|;
specifier|final
name|FieldNamesFieldMapper
operator|.
name|FieldNamesFieldType
name|fieldNamesFieldType
init|=
operator|(
name|FieldNamesFieldMapper
operator|.
name|FieldNamesFieldType
operator|)
name|context
operator|.
name|mapperService
argument_list|()
operator|.
name|fullName
argument_list|(
name|FieldNamesFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldNamesFieldType
operator|==
literal|null
operator|||
name|fields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertNull
argument_list|(
name|namedQuery
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
operator|(
operator|(
name|ConstantScoreQuery
operator|)
name|query
operator|)
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|namedQuery
argument_list|,
name|equalTo
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createTestQueryBuilder
specifier|protected
name|ExistsQueryBuilder
name|createTestQueryBuilder
parameter_list|()
block|{
name|String
name|fieldPattern
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|fieldPattern
operator|=
name|randomFrom
argument_list|(
name|mappedFieldNames
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fieldPattern
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
comment|// also sometimes test wildcard patterns
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|fieldPattern
operator|=
name|fieldPattern
operator|+
literal|"*"
expr_stmt|;
block|}
else|else
block|{
name|fieldPattern
operator|=
name|MetaData
operator|.
name|ALL
expr_stmt|;
block|}
block|}
name|ExistsQueryBuilder
name|query
init|=
operator|new
name|ExistsQueryBuilder
argument_list|(
name|fieldPattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|query
operator|.
name|queryName
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
block|}
end_class

end_unit

