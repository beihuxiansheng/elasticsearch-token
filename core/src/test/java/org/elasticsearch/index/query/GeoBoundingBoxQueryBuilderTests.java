begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LegacyNumericRangeQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchNoDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|search
operator|.
name|GeoPointInBBoxQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
operator|.
name|LegacyInMemoryGeoBoundingBoxQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|AbstractQueryTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|geo
operator|.
name|RandomShapeGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|io
operator|.
name|GeohashUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|closeTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|GeoBoundingBoxQueryBuilderTests
specifier|public
class|class
name|GeoBoundingBoxQueryBuilderTests
extends|extends
name|AbstractQueryTestCase
argument_list|<
name|GeoBoundingBoxQueryBuilder
argument_list|>
block|{
comment|/** Randomly generate either NaN or one of the two infinity values. */
DECL|field|brokenDoubles
specifier|private
specifier|static
name|Double
index|[]
name|brokenDoubles
init|=
block|{
name|Double
operator|.
name|NaN
block|,
name|Double
operator|.
name|POSITIVE_INFINITY
block|,
name|Double
operator|.
name|NEGATIVE_INFINITY
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|doCreateTestQueryBuilder
specifier|protected
name|GeoBoundingBoxQueryBuilder
name|doCreateTestQueryBuilder
parameter_list|()
block|{
name|GeoBoundingBoxQueryBuilder
name|builder
init|=
operator|new
name|GeoBoundingBoxQueryBuilder
argument_list|(
name|GEO_POINT_FIELD_NAME
argument_list|)
decl_stmt|;
name|Rectangle
name|box
init|=
name|RandomShapeGenerator
operator|.
name|xRandomRectangle
argument_list|(
name|random
argument_list|()
argument_list|,
name|RandomShapeGenerator
operator|.
name|xRandomPoint
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// check the top-left/bottom-right combination of setters
name|int
name|path
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|path
condition|)
block|{
case|case
literal|0
case|:
name|builder
operator|.
name|setCorners
argument_list|(
operator|new
name|GeoPoint
argument_list|(
name|box
operator|.
name|getMaxY
argument_list|()
argument_list|,
name|box
operator|.
name|getMinX
argument_list|()
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
name|box
operator|.
name|getMinY
argument_list|()
argument_list|,
name|box
operator|.
name|getMaxX
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|builder
operator|.
name|setCorners
argument_list|(
name|GeohashUtils
operator|.
name|encodeLatLon
argument_list|(
name|box
operator|.
name|getMaxY
argument_list|()
argument_list|,
name|box
operator|.
name|getMinX
argument_list|()
argument_list|)
argument_list|,
name|GeohashUtils
operator|.
name|encodeLatLon
argument_list|(
name|box
operator|.
name|getMinY
argument_list|()
argument_list|,
name|box
operator|.
name|getMaxX
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|builder
operator|.
name|setCorners
argument_list|(
name|box
operator|.
name|getMaxY
argument_list|()
argument_list|,
name|box
operator|.
name|getMinX
argument_list|()
argument_list|,
name|box
operator|.
name|getMinY
argument_list|()
argument_list|,
name|box
operator|.
name|getMaxX
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// check the bottom-left/ top-right combination of setters
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setCornersOGC
argument_list|(
operator|new
name|GeoPoint
argument_list|(
name|box
operator|.
name|getMinY
argument_list|()
argument_list|,
name|box
operator|.
name|getMinX
argument_list|()
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
name|box
operator|.
name|getMaxY
argument_list|()
argument_list|,
name|box
operator|.
name|getMaxX
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|setCornersOGC
argument_list|(
name|GeohashUtils
operator|.
name|encodeLatLon
argument_list|(
name|box
operator|.
name|getMinY
argument_list|()
argument_list|,
name|box
operator|.
name|getMinX
argument_list|()
argument_list|)
argument_list|,
name|GeohashUtils
operator|.
name|encodeLatLon
argument_list|(
name|box
operator|.
name|getMaxY
argument_list|()
argument_list|,
name|box
operator|.
name|getMaxX
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setValidationMethod
argument_list|(
name|randomFrom
argument_list|(
name|GeoValidationMethod
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|ignoreUnmapped
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|type
argument_list|(
name|randomFrom
argument_list|(
name|GeoExecType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|testValidationNullFieldname
specifier|public
name|void
name|testValidationNullFieldname
parameter_list|()
block|{
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|GeoBoundingBoxQueryBuilder
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Field name must not be empty."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testValidationNullType
specifier|public
name|void
name|testValidationNullType
parameter_list|()
block|{
name|GeoBoundingBoxQueryBuilder
name|qb
init|=
operator|new
name|GeoBoundingBoxQueryBuilder
argument_list|(
literal|"teststring"
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|qb
operator|.
name|type
argument_list|(
operator|(
name|GeoExecType
operator|)
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Type is not allowed to be null."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testValidationNullTypeString
specifier|public
name|void
name|testValidationNullTypeString
parameter_list|()
block|{
name|GeoBoundingBoxQueryBuilder
name|qb
init|=
operator|new
name|GeoBoundingBoxQueryBuilder
argument_list|(
literal|"teststring"
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|qb
operator|.
name|type
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cannot parse type from null string"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|testToQuery
specifier|public
name|void
name|testToQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|super
operator|.
name|testToQuery
argument_list|()
expr_stmt|;
block|}
DECL|method|testExceptionOnMissingTypes
specifier|public
name|void
name|testExceptionOnMissingTypes
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QueryShardException
name|e
init|=
name|expectThrows
argument_list|(
name|QueryShardException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|super
operator|.
name|testToQuery
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"failed to find geo_point field [mapped_geo_point]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBrokenCoordinateCannotBeSet
specifier|public
name|void
name|testBrokenCoordinateCannotBeSet
parameter_list|()
block|{
name|PointTester
index|[]
name|testers
init|=
block|{
operator|new
name|TopTester
argument_list|()
block|,
operator|new
name|LeftTester
argument_list|()
block|,
operator|new
name|BottomTester
argument_list|()
block|,
operator|new
name|RightTester
argument_list|()
block|}
decl_stmt|;
name|GeoBoundingBoxQueryBuilder
name|builder
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setValidationMethod
argument_list|(
name|GeoValidationMethod
operator|.
name|STRICT
argument_list|)
expr_stmt|;
for|for
control|(
name|PointTester
name|tester
range|:
name|testers
control|)
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|tester
operator|.
name|invalidateCoordinate
argument_list|(
name|builder
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBrokenCoordinateCanBeSetWithIgnoreMalformed
specifier|public
name|void
name|testBrokenCoordinateCanBeSetWithIgnoreMalformed
parameter_list|()
block|{
name|PointTester
index|[]
name|testers
init|=
block|{
operator|new
name|TopTester
argument_list|()
block|,
operator|new
name|LeftTester
argument_list|()
block|,
operator|new
name|BottomTester
argument_list|()
block|,
operator|new
name|RightTester
argument_list|()
block|}
decl_stmt|;
name|GeoBoundingBoxQueryBuilder
name|builder
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setValidationMethod
argument_list|(
name|GeoValidationMethod
operator|.
name|IGNORE_MALFORMED
argument_list|)
expr_stmt|;
for|for
control|(
name|PointTester
name|tester
range|:
name|testers
control|)
block|{
name|tester
operator|.
name|invalidateCoordinate
argument_list|(
name|builder
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testValidation
specifier|public
name|void
name|testValidation
parameter_list|()
block|{
name|PointTester
index|[]
name|testers
init|=
block|{
operator|new
name|TopTester
argument_list|()
block|,
operator|new
name|LeftTester
argument_list|()
block|,
operator|new
name|BottomTester
argument_list|()
block|,
operator|new
name|RightTester
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|PointTester
name|tester
range|:
name|testers
control|)
block|{
name|QueryValidationException
name|except
init|=
literal|null
decl_stmt|;
name|GeoBoundingBoxQueryBuilder
name|builder
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|tester
operator|.
name|invalidateCoordinate
argument_list|(
name|builder
operator|.
name|setValidationMethod
argument_list|(
name|GeoValidationMethod
operator|.
name|COERCE
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|except
operator|=
name|builder
operator|.
name|checkLatLon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Inner post 2.0 validation w/ coerce should ignore invalid "
operator|+
name|tester
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" coordinate: "
operator|+
name|tester
operator|.
name|invalidCoordinate
operator|+
literal|" "
argument_list|,
name|except
argument_list|)
expr_stmt|;
name|tester
operator|.
name|invalidateCoordinate
argument_list|(
name|builder
operator|.
name|setValidationMethod
argument_list|(
name|GeoValidationMethod
operator|.
name|COERCE
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|except
operator|=
name|builder
operator|.
name|checkLatLon
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Inner pre 2.0 validation w/ coerce should ignore invalid coordinate: "
operator|+
name|tester
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" coordinate: "
operator|+
name|tester
operator|.
name|invalidCoordinate
operator|+
literal|" "
argument_list|,
name|except
argument_list|)
expr_stmt|;
name|tester
operator|.
name|invalidateCoordinate
argument_list|(
name|builder
operator|.
name|setValidationMethod
argument_list|(
name|GeoValidationMethod
operator|.
name|STRICT
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|except
operator|=
name|builder
operator|.
name|checkLatLon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Inner pre 2.0 validation w/o coerce should ignore invalid coordinate for old indexes: "
operator|+
name|tester
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" coordinate: "
operator|+
name|tester
operator|.
name|invalidCoordinate
argument_list|,
name|except
argument_list|)
expr_stmt|;
name|tester
operator|.
name|invalidateCoordinate
argument_list|(
name|builder
operator|.
name|setValidationMethod
argument_list|(
name|GeoValidationMethod
operator|.
name|STRICT
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|except
operator|=
name|builder
operator|.
name|checkLatLon
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Inner post 2.0 validation w/o coerce should detect invalid coordinate: "
operator|+
name|tester
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" coordinate: "
operator|+
name|tester
operator|.
name|invalidCoordinate
argument_list|,
name|except
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTopBottomCannotBeFlipped
specifier|public
name|void
name|testTopBottomCannotBeFlipped
parameter_list|()
block|{
name|GeoBoundingBoxQueryBuilder
name|builder
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|double
name|top
init|=
name|builder
operator|.
name|topLeft
argument_list|()
operator|.
name|getLat
argument_list|()
decl_stmt|;
name|double
name|left
init|=
name|builder
operator|.
name|topLeft
argument_list|()
operator|.
name|getLon
argument_list|()
decl_stmt|;
name|double
name|bottom
init|=
name|builder
operator|.
name|bottomRight
argument_list|()
operator|.
name|getLat
argument_list|()
decl_stmt|;
name|double
name|right
init|=
name|builder
operator|.
name|bottomRight
argument_list|()
operator|.
name|getLon
argument_list|()
decl_stmt|;
name|assumeTrue
argument_list|(
literal|"top should not be equal to bottom for flip check"
argument_list|,
name|top
operator|!=
name|bottom
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"top: {} bottom: {}"
argument_list|,
name|top
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setValidationMethod
argument_list|(
name|GeoValidationMethod
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|setCorners
argument_list|(
name|bottom
argument_list|,
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"top is below bottom corner:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTopBottomCanBeFlippedOnIgnoreMalformed
specifier|public
name|void
name|testTopBottomCanBeFlippedOnIgnoreMalformed
parameter_list|()
block|{
name|GeoBoundingBoxQueryBuilder
name|builder
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|double
name|top
init|=
name|builder
operator|.
name|topLeft
argument_list|()
operator|.
name|getLat
argument_list|()
decl_stmt|;
name|double
name|left
init|=
name|builder
operator|.
name|topLeft
argument_list|()
operator|.
name|getLon
argument_list|()
decl_stmt|;
name|double
name|bottom
init|=
name|builder
operator|.
name|bottomRight
argument_list|()
operator|.
name|getLat
argument_list|()
decl_stmt|;
name|double
name|right
init|=
name|builder
operator|.
name|bottomRight
argument_list|()
operator|.
name|getLon
argument_list|()
decl_stmt|;
name|assumeTrue
argument_list|(
literal|"top should not be equal to bottom for flip check"
argument_list|,
name|top
operator|!=
name|bottom
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setValidationMethod
argument_list|(
name|GeoValidationMethod
operator|.
name|IGNORE_MALFORMED
argument_list|)
operator|.
name|setCorners
argument_list|(
name|bottom
argument_list|,
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
DECL|method|testLeftRightCanBeFlipped
specifier|public
name|void
name|testLeftRightCanBeFlipped
parameter_list|()
block|{
name|GeoBoundingBoxQueryBuilder
name|builder
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|double
name|top
init|=
name|builder
operator|.
name|topLeft
argument_list|()
operator|.
name|getLat
argument_list|()
decl_stmt|;
name|double
name|left
init|=
name|builder
operator|.
name|topLeft
argument_list|()
operator|.
name|getLon
argument_list|()
decl_stmt|;
name|double
name|bottom
init|=
name|builder
operator|.
name|bottomRight
argument_list|()
operator|.
name|getLat
argument_list|()
decl_stmt|;
name|double
name|right
init|=
name|builder
operator|.
name|bottomRight
argument_list|()
operator|.
name|getLon
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setValidationMethod
argument_list|(
name|GeoValidationMethod
operator|.
name|IGNORE_MALFORMED
argument_list|)
operator|.
name|setCorners
argument_list|(
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setValidationMethod
argument_list|(
name|GeoValidationMethod
operator|.
name|STRICT
argument_list|)
operator|.
name|setCorners
argument_list|(
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|,
name|left
argument_list|)
expr_stmt|;
block|}
DECL|method|testNormalization
specifier|public
name|void
name|testNormalization
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|GeoBoundingBoxQueryBuilder
name|qb
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|!=
literal|0
operator|&&
literal|"mapped_geo"
operator|.
name|equals
argument_list|(
name|qb
operator|.
name|fieldName
argument_list|()
argument_list|)
condition|)
block|{
comment|// only execute this test if we are running on a valid geo field
name|qb
operator|.
name|setCorners
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|,
name|qb
operator|.
name|bottomRight
argument_list|()
operator|.
name|getLat
argument_list|()
argument_list|,
name|qb
operator|.
name|bottomRight
argument_list|()
operator|.
name|getLon
argument_list|()
argument_list|)
expr_stmt|;
name|qb
operator|.
name|setValidationMethod
argument_list|(
name|GeoValidationMethod
operator|.
name|COERCE
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|qb
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|instanceof
name|ConstantScoreQuery
condition|)
block|{
name|ConstantScoreQuery
name|result
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|query
decl_stmt|;
name|BooleanQuery
name|bboxFilter
init|=
operator|(
name|BooleanQuery
operator|)
name|result
operator|.
name|getQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|BooleanClause
name|clause
range|:
name|bboxFilter
operator|.
name|clauses
argument_list|()
control|)
block|{
name|LegacyNumericRangeQuery
name|boundary
init|=
operator|(
name|LegacyNumericRangeQuery
operator|)
name|clause
operator|.
name|getQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|boundary
operator|.
name|getMax
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"If defined, non of the maximum range values should be larger than 180"
argument_list|,
name|boundary
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<=
literal|180
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"memory queries should result in LegacyInMemoryGeoBoundingBoxQuery"
argument_list|,
name|query
operator|instanceof
name|LegacyInMemoryGeoBoundingBoxQuery
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testStrictnessDefault
specifier|public
name|void
name|testStrictnessDefault
parameter_list|()
block|{
name|assertFalse
argument_list|(
literal|"Someone changed the default for coordinate validation - were the docs changed as well?"
argument_list|,
name|GeoValidationMethod
operator|.
name|DEFAULT_LENIENT_PARSING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doAssertLuceneQuery
specifier|protected
name|void
name|doAssertLuceneQuery
parameter_list|(
name|GeoBoundingBoxQueryBuilder
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|MappedFieldType
name|fieldType
init|=
name|context
operator|.
name|fieldMapper
argument_list|(
name|queryBuilder
operator|.
name|fieldName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Found no indexed geo query."
argument_list|,
name|query
operator|instanceof
name|MatchNoDocsQuery
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|context
operator|.
name|indexVersionCreated
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_2_2_0
argument_list|)
condition|)
block|{
if|if
condition|(
name|queryBuilder
operator|.
name|type
argument_list|()
operator|==
name|GeoExecType
operator|.
name|INDEXED
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Found no indexed geo query."
argument_list|,
name|query
operator|instanceof
name|ConstantScoreQuery
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Found no indexed geo query."
argument_list|,
name|query
operator|instanceof
name|LegacyInMemoryGeoBoundingBoxQuery
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|indexVersionCreated
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_0_0_beta1
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Found no indexed geo query."
argument_list|,
name|query
operator|instanceof
name|GeoPointInBBoxQuery
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Found no indexed geo query."
argument_list|,
name|query
operator|instanceof
name|Query
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|PointTester
specifier|public
specifier|abstract
class|class
name|PointTester
block|{
DECL|field|brokenCoordinate
specifier|private
name|double
name|brokenCoordinate
init|=
name|randomFrom
argument_list|(
name|brokenDoubles
argument_list|)
decl_stmt|;
DECL|field|invalidCoordinate
specifier|private
name|double
name|invalidCoordinate
decl_stmt|;
DECL|method|PointTester
specifier|public
name|PointTester
parameter_list|(
name|double
name|invalidCoodinate
parameter_list|)
block|{
name|this
operator|.
name|invalidCoordinate
operator|=
name|invalidCoodinate
expr_stmt|;
block|}
DECL|method|invalidateCoordinate
specifier|public
name|void
name|invalidateCoordinate
parameter_list|(
name|GeoBoundingBoxQueryBuilder
name|qb
parameter_list|,
name|boolean
name|useBrokenDouble
parameter_list|)
block|{
if|if
condition|(
name|useBrokenDouble
condition|)
block|{
name|fillIn
argument_list|(
name|brokenCoordinate
argument_list|,
name|qb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fillIn
argument_list|(
name|invalidCoordinate
argument_list|,
name|qb
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fillIn
specifier|protected
specifier|abstract
name|void
name|fillIn
parameter_list|(
name|double
name|fillIn
parameter_list|,
name|GeoBoundingBoxQueryBuilder
name|qb
parameter_list|)
function_decl|;
block|}
DECL|class|TopTester
specifier|public
class|class
name|TopTester
extends|extends
name|PointTester
block|{
DECL|method|TopTester
specifier|public
name|TopTester
parameter_list|()
block|{
name|super
argument_list|(
name|randomDoubleBetween
argument_list|(
name|GeoUtils
operator|.
name|MAX_LAT
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fillIn
specifier|public
name|void
name|fillIn
parameter_list|(
name|double
name|coordinate
parameter_list|,
name|GeoBoundingBoxQueryBuilder
name|qb
parameter_list|)
block|{
name|qb
operator|.
name|setCorners
argument_list|(
name|coordinate
argument_list|,
name|qb
operator|.
name|topLeft
argument_list|()
operator|.
name|getLon
argument_list|()
argument_list|,
name|qb
operator|.
name|bottomRight
argument_list|()
operator|.
name|getLat
argument_list|()
argument_list|,
name|qb
operator|.
name|bottomRight
argument_list|()
operator|.
name|getLon
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|LeftTester
specifier|public
class|class
name|LeftTester
extends|extends
name|PointTester
block|{
DECL|method|LeftTester
specifier|public
name|LeftTester
parameter_list|()
block|{
name|super
argument_list|(
name|randomDoubleBetween
argument_list|(
operator|-
name|Double
operator|.
name|MAX_VALUE
argument_list|,
name|GeoUtils
operator|.
name|MIN_LON
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fillIn
specifier|public
name|void
name|fillIn
parameter_list|(
name|double
name|coordinate
parameter_list|,
name|GeoBoundingBoxQueryBuilder
name|qb
parameter_list|)
block|{
name|qb
operator|.
name|setCorners
argument_list|(
name|qb
operator|.
name|topLeft
argument_list|()
operator|.
name|getLat
argument_list|()
argument_list|,
name|coordinate
argument_list|,
name|qb
operator|.
name|bottomRight
argument_list|()
operator|.
name|getLat
argument_list|()
argument_list|,
name|qb
operator|.
name|bottomRight
argument_list|()
operator|.
name|getLon
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BottomTester
specifier|public
class|class
name|BottomTester
extends|extends
name|PointTester
block|{
DECL|method|BottomTester
specifier|public
name|BottomTester
parameter_list|()
block|{
name|super
argument_list|(
name|randomDoubleBetween
argument_list|(
operator|-
name|Double
operator|.
name|MAX_VALUE
argument_list|,
name|GeoUtils
operator|.
name|MIN_LAT
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fillIn
specifier|public
name|void
name|fillIn
parameter_list|(
name|double
name|coordinate
parameter_list|,
name|GeoBoundingBoxQueryBuilder
name|qb
parameter_list|)
block|{
name|qb
operator|.
name|setCorners
argument_list|(
name|qb
operator|.
name|topLeft
argument_list|()
operator|.
name|getLat
argument_list|()
argument_list|,
name|qb
operator|.
name|topLeft
argument_list|()
operator|.
name|getLon
argument_list|()
argument_list|,
name|coordinate
argument_list|,
name|qb
operator|.
name|bottomRight
argument_list|()
operator|.
name|getLon
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RightTester
specifier|public
class|class
name|RightTester
extends|extends
name|PointTester
block|{
DECL|method|RightTester
specifier|public
name|RightTester
parameter_list|()
block|{
name|super
argument_list|(
name|randomDoubleBetween
argument_list|(
name|GeoUtils
operator|.
name|MAX_LON
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fillIn
specifier|public
name|void
name|fillIn
parameter_list|(
name|double
name|coordinate
parameter_list|,
name|GeoBoundingBoxQueryBuilder
name|qb
parameter_list|)
block|{
name|qb
operator|.
name|setCorners
argument_list|(
name|qb
operator|.
name|topLeft
argument_list|()
operator|.
name|getLat
argument_list|()
argument_list|,
name|qb
operator|.
name|topLeft
argument_list|()
operator|.
name|getLon
argument_list|()
argument_list|,
name|qb
operator|.
name|bottomRight
argument_list|()
operator|.
name|getLat
argument_list|()
argument_list|,
name|coordinate
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParsingAndToQuery1
specifier|public
name|void
name|testParsingAndToQuery1
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"{\n"
operator|+
literal|"    \"geo_bounding_box\":{\n"
operator|+
literal|"        \""
operator|+
name|GEO_POINT_FIELD_NAME
operator|+
literal|"\":{\n"
operator|+
literal|"            \"top_left\":[-70, 40],\n"
operator|+
literal|"            \"bottom_right\":[-80, 30]\n"
operator|+
literal|"        }\n"
operator|+
literal|"    }\n"
operator|+
literal|"}\n"
decl_stmt|;
name|assertGeoBoundingBoxQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
DECL|method|testParsingAndToQuery2
specifier|public
name|void
name|testParsingAndToQuery2
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"{\n"
operator|+
literal|"    \"geo_bounding_box\":{\n"
operator|+
literal|"        \""
operator|+
name|GEO_POINT_FIELD_NAME
operator|+
literal|"\":{\n"
operator|+
literal|"            \"top_left\":{\n"
operator|+
literal|"                \"lat\":40,\n"
operator|+
literal|"                \"lon\":-70\n"
operator|+
literal|"            },\n"
operator|+
literal|"            \"bottom_right\":{\n"
operator|+
literal|"                \"lat\":30,\n"
operator|+
literal|"                \"lon\":-80\n"
operator|+
literal|"            }\n"
operator|+
literal|"        }\n"
operator|+
literal|"    }\n"
operator|+
literal|"}\n"
decl_stmt|;
name|assertGeoBoundingBoxQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
DECL|method|testParsingAndToQuery3
specifier|public
name|void
name|testParsingAndToQuery3
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"{\n"
operator|+
literal|"    \"geo_bounding_box\":{\n"
operator|+
literal|"        \""
operator|+
name|GEO_POINT_FIELD_NAME
operator|+
literal|"\":{\n"
operator|+
literal|"            \"top_left\":\"40, -70\",\n"
operator|+
literal|"            \"bottom_right\":\"30, -80\"\n"
operator|+
literal|"        }\n"
operator|+
literal|"    }\n"
operator|+
literal|"}\n"
decl_stmt|;
name|assertGeoBoundingBoxQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
DECL|method|testParsingAndToQuery4
specifier|public
name|void
name|testParsingAndToQuery4
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"{\n"
operator|+
literal|"    \"geo_bounding_box\":{\n"
operator|+
literal|"        \""
operator|+
name|GEO_POINT_FIELD_NAME
operator|+
literal|"\":{\n"
operator|+
literal|"            \"top_left\":\"drn5x1g8cu2y\",\n"
operator|+
literal|"            \"bottom_right\":\"30, -80\"\n"
operator|+
literal|"        }\n"
operator|+
literal|"    }\n"
operator|+
literal|"}\n"
decl_stmt|;
name|assertGeoBoundingBoxQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
DECL|method|testParsingAndToQuery5
specifier|public
name|void
name|testParsingAndToQuery5
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"{\n"
operator|+
literal|"    \"geo_bounding_box\":{\n"
operator|+
literal|"        \""
operator|+
name|GEO_POINT_FIELD_NAME
operator|+
literal|"\":{\n"
operator|+
literal|"            \"top_right\":\"40, -80\",\n"
operator|+
literal|"            \"bottom_left\":\"30, -70\"\n"
operator|+
literal|"        }\n"
operator|+
literal|"    }\n"
operator|+
literal|"}\n"
decl_stmt|;
name|assertGeoBoundingBoxQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
DECL|method|testParsingAndToQuery6
specifier|public
name|void
name|testParsingAndToQuery6
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"{\n"
operator|+
literal|"    \"geo_bounding_box\":{\n"
operator|+
literal|"        \""
operator|+
name|GEO_POINT_FIELD_NAME
operator|+
literal|"\":{\n"
operator|+
literal|"            \"right\": -80,\n"
operator|+
literal|"            \"top\": 40,\n"
operator|+
literal|"            \"left\": -70,\n"
operator|+
literal|"            \"bottom\": 30\n"
operator|+
literal|"        }\n"
operator|+
literal|"    }\n"
operator|+
literal|"}\n"
decl_stmt|;
name|assertGeoBoundingBoxQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
DECL|method|assertGeoBoundingBoxQuery
specifier|private
name|void
name|assertGeoBoundingBoxQuery
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryShardContext
name|shardContext
init|=
name|createShardContext
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|parseQuery
argument_list|(
name|query
argument_list|)
operator|.
name|toQuery
argument_list|(
name|shardContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardContext
operator|.
name|indexVersionCreated
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_2_2_0
argument_list|)
condition|)
block|{
name|LegacyInMemoryGeoBoundingBoxQuery
name|filter
init|=
operator|(
name|LegacyInMemoryGeoBoundingBoxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|GEO_POINT_FIELD_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|1E
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|1E
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|1E
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|1E
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|shardContext
operator|.
name|indexVersionCreated
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_0_0_beta1
argument_list|)
condition|)
block|{
name|GeoPointInBBoxQuery
name|q
init|=
operator|(
name|GeoPointInBBoxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|GEO_POINT_FIELD_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|getMaxLat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|1E
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|getMinLon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|1E
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|getMinLat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|1E
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|getMaxLon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|1E
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFromJson
specifier|public
name|void
name|testFromJson
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|json
init|=
literal|"{\n"
operator|+
literal|"  \"geo_bounding_box\" : {\n"
operator|+
literal|"    \"pin.location\" : {\n"
operator|+
literal|"      \"top_left\" : [ -74.1, 40.73 ],\n"
operator|+
literal|"      \"bottom_right\" : [ -71.12, 40.01 ]\n"
operator|+
literal|"    },\n"
operator|+
literal|"    \"validation_method\" : \"STRICT\",\n"
operator|+
literal|"    \"type\" : \"MEMORY\",\n"
operator|+
literal|"    \"ignore_unmapped\" : false,\n"
operator|+
literal|"    \"boost\" : 1.0\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
name|GeoBoundingBoxQueryBuilder
name|parsed
init|=
operator|(
name|GeoBoundingBoxQueryBuilder
operator|)
name|parseQuery
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|checkGeneratedJson
argument_list|(
name|json
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
literal|"pin.location"
argument_list|,
name|parsed
operator|.
name|fieldName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
operator|-
literal|74.1
argument_list|,
name|parsed
operator|.
name|topLeft
argument_list|()
operator|.
name|getLon
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
literal|40.73
argument_list|,
name|parsed
operator|.
name|topLeft
argument_list|()
operator|.
name|getLat
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
operator|-
literal|71.12
argument_list|,
name|parsed
operator|.
name|bottomRight
argument_list|()
operator|.
name|getLon
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
literal|40.01
argument_list|,
name|parsed
operator|.
name|bottomRight
argument_list|()
operator|.
name|getLat
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
literal|1.0
argument_list|,
name|parsed
operator|.
name|boost
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
name|GeoExecType
operator|.
name|MEMORY
argument_list|,
name|parsed
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|deprecatedJson
init|=
literal|"{\n"
operator|+
literal|"  \"geo_bbox\" : {\n"
operator|+
literal|"    \"pin.location\" : {\n"
operator|+
literal|"      \"top_left\" : [ -74.1, 40.73 ],\n"
operator|+
literal|"      \"bottom_right\" : [ -71.12, 40.01 ]\n"
operator|+
literal|"    },\n"
operator|+
literal|"    \"validation_method\" : \"STRICT\",\n"
operator|+
literal|"    \"type\" : \"MEMORY\",\n"
operator|+
literal|"    \"ignore_unmapped\" : false,\n"
operator|+
literal|"    \"boost\" : 1.0\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
name|QueryBuilder
name|parsedGeoBboxShortcut
init|=
name|parseQuery
argument_list|(
name|json
argument_list|,
name|ParseFieldMatcher
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedGeoBboxShortcut
argument_list|,
name|equalTo
argument_list|(
name|parsed
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parseQuery
argument_list|(
name|deprecatedJson
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Deprecated field [geo_bbox] used, expected [geo_bounding_box] instead"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromJsonCoerceFails
specifier|public
name|void
name|testFromJsonCoerceFails
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|json
init|=
literal|"{\n"
operator|+
literal|"  \"geo_bounding_box\" : {\n"
operator|+
literal|"    \"pin.location\" : {\n"
operator|+
literal|"      \"top_left\" : [ -74.1, 40.73 ],\n"
operator|+
literal|"      \"bottom_right\" : [ -71.12, 40.01 ]\n"
operator|+
literal|"    },\n"
operator|+
literal|"    \"coerce\" : true,\n"
operator|+
literal|"    \"type\" : \"MEMORY\",\n"
operator|+
literal|"    \"ignore_unmapped\" : false,\n"
operator|+
literal|"    \"boost\" : 1.0\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parseQuery
argument_list|(
name|json
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Deprecated field "
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromJsonIgnoreMalformedFails
specifier|public
name|void
name|testFromJsonIgnoreMalformedFails
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|json
init|=
literal|"{\n"
operator|+
literal|"  \"geo_bounding_box\" : {\n"
operator|+
literal|"    \"pin.location\" : {\n"
operator|+
literal|"      \"top_left\" : [ -74.1, 40.73 ],\n"
operator|+
literal|"      \"bottom_right\" : [ -71.12, 40.01 ]\n"
operator|+
literal|"    },\n"
operator|+
literal|"    \"ignore_malformed\" : true,\n"
operator|+
literal|"    \"type\" : \"MEMORY\",\n"
operator|+
literal|"    \"ignore_unmapped\" : false,\n"
operator|+
literal|"    \"boost\" : 1.0\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parseQuery
argument_list|(
name|json
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Deprecated field "
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|testMustRewrite
specifier|public
name|void
name|testMustRewrite
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|super
operator|.
name|testMustRewrite
argument_list|()
expr_stmt|;
block|}
DECL|method|testIgnoreUnmapped
specifier|public
name|void
name|testIgnoreUnmapped
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|GeoBoundingBoxQueryBuilder
name|queryBuilder
init|=
operator|new
name|GeoBoundingBoxQueryBuilder
argument_list|(
literal|"unmapped"
argument_list|)
operator|.
name|setCorners
argument_list|(
literal|1.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
name|queryBuilder
operator|.
name|ignoreUnmapped
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QueryShardContext
name|shardContext
init|=
name|createShardContext
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
name|queryBuilder
operator|.
name|toQuery
argument_list|(
name|shardContext
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|MatchNoDocsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|GeoBoundingBoxQueryBuilder
name|failingQueryBuilder
init|=
operator|new
name|GeoBoundingBoxQueryBuilder
argument_list|(
literal|"unmapped"
argument_list|)
operator|.
name|setCorners
argument_list|(
literal|1.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
name|failingQueryBuilder
operator|.
name|ignoreUnmapped
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QueryShardException
name|e
init|=
name|expectThrows
argument_list|(
name|QueryShardException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|failingQueryBuilder
operator|.
name|toQuery
argument_list|(
name|shardContext
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"failed to find geo_point field [unmapped]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

