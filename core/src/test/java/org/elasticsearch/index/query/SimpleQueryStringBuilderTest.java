begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|SimpleQueryStringBuilderTest
specifier|public
class|class
name|SimpleQueryStringBuilderTest
extends|extends
name|BaseQueryTestCase
argument_list|<
name|SimpleQueryStringBuilder
argument_list|>
block|{
DECL|field|MINIMUM_SHOULD_MATCH
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|MINIMUM_SHOULD_MATCH
init|=
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"-1"
block|,
literal|"75%"
block|,
literal|"-25%"
block|,
literal|"2<75%"
block|,
literal|"2<-25%"
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|doCreateTestQueryBuilder
specifier|protected
name|SimpleQueryStringBuilder
name|doCreateTestQueryBuilder
parameter_list|()
block|{
name|SimpleQueryStringBuilder
name|result
init|=
operator|new
name|SimpleQueryStringBuilder
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|result
operator|.
name|analyzeWildcard
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|result
operator|.
name|lenient
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|result
operator|.
name|lowercaseExpandedTerms
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|result
operator|.
name|locale
argument_list|(
name|randomLocale
argument_list|(
name|getRandom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|result
operator|.
name|minimumShouldMatch
argument_list|(
name|randomFrom
argument_list|(
name|MINIMUM_SHOULD_MATCH
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|result
operator|.
name|analyzer
argument_list|(
literal|"simple"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|result
operator|.
name|defaultOperator
argument_list|(
name|randomFrom
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|SimpleQueryStringFlag
argument_list|>
name|flagSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|SimpleQueryStringFlag
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|flagSet
operator|.
name|add
argument_list|(
name|randomFrom
argument_list|(
name|SimpleQueryStringFlag
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flagSet
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|flags
argument_list|(
name|flagSet
operator|.
name|toArray
argument_list|(
operator|new
name|SimpleQueryStringFlag
index|[
name|flagSet
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|fieldCount
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fields
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fields
operator|.
name|put
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2.0f
operator|/
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|fields
argument_list|(
name|fields
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|doAssertLuceneQuery
specifier|protected
name|void
name|doAssertLuceneQuery
parameter_list|(
name|SimpleQueryStringBuilder
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaults
specifier|public
name|void
name|testDefaults
parameter_list|()
block|{
name|SimpleQueryStringBuilder
name|qb
init|=
operator|new
name|SimpleQueryStringBuilder
argument_list|(
literal|"The quick brown fox."
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong default default boost."
argument_list|,
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
argument_list|,
name|qb
operator|.
name|boost
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong default default boost field."
argument_list|,
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
argument_list|,
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_BOOST
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong default flags."
argument_list|,
name|SimpleQueryStringFlag
operator|.
name|ALL
operator|.
name|value
argument_list|,
name|qb
operator|.
name|flags
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong default flags field."
argument_list|,
name|SimpleQueryStringFlag
operator|.
name|ALL
operator|.
name|value
argument_list|()
argument_list|,
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_FLAGS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong default default operator."
argument_list|,
name|Operator
operator|.
name|OR
argument_list|,
name|qb
operator|.
name|defaultOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong default default operator field."
argument_list|,
name|Operator
operator|.
name|OR
argument_list|,
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_OPERATOR
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong default default locale."
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|,
name|qb
operator|.
name|locale
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong default default locale field."
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|,
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_LOCALE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong default default analyze_wildcard."
argument_list|,
literal|false
argument_list|,
name|qb
operator|.
name|analyzeWildcard
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong default default analyze_wildcard field."
argument_list|,
literal|false
argument_list|,
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_ANALYZE_WILDCARD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong default default lowercase_expanded_terms."
argument_list|,
literal|true
argument_list|,
name|qb
operator|.
name|lowercaseExpandedTerms
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong default default lowercase_expanded_terms field."
argument_list|,
literal|true
argument_list|,
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_LOWERCASE_EXPANDED_TERMS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong default default lenient."
argument_list|,
literal|false
argument_list|,
name|qb
operator|.
name|lenient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong default default lenient field."
argument_list|,
literal|false
argument_list|,
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_LENIENT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong default default locale."
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|,
name|qb
operator|.
name|locale
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong default default locale field."
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|,
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_LOCALE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultNullLocale
specifier|public
name|void
name|testDefaultNullLocale
parameter_list|()
block|{
name|SimpleQueryStringBuilder
name|qb
init|=
operator|new
name|SimpleQueryStringBuilder
argument_list|(
literal|"The quick brown fox."
argument_list|)
decl_stmt|;
name|qb
operator|.
name|locale
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Setting locale to null should result in returning to default value."
argument_list|,
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_LOCALE
argument_list|,
name|qb
operator|.
name|locale
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultNullComplainFlags
specifier|public
name|void
name|testDefaultNullComplainFlags
parameter_list|()
block|{
name|SimpleQueryStringBuilder
name|qb
init|=
operator|new
name|SimpleQueryStringBuilder
argument_list|(
literal|"The quick brown fox."
argument_list|)
decl_stmt|;
name|qb
operator|.
name|flags
argument_list|(
operator|(
name|SimpleQueryStringFlag
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Setting flags to null should result in returning to default value."
argument_list|,
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_FLAGS
argument_list|,
name|qb
operator|.
name|flags
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultEmptyComplainFlags
specifier|public
name|void
name|testDefaultEmptyComplainFlags
parameter_list|()
block|{
name|SimpleQueryStringBuilder
name|qb
init|=
operator|new
name|SimpleQueryStringBuilder
argument_list|(
literal|"The quick brown fox."
argument_list|)
decl_stmt|;
name|qb
operator|.
name|flags
argument_list|(
operator|new
name|SimpleQueryStringFlag
index|[]
block|{}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Setting flags to empty should result in returning to default value."
argument_list|,
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_FLAGS
argument_list|,
name|qb
operator|.
name|flags
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultNullComplainOp
specifier|public
name|void
name|testDefaultNullComplainOp
parameter_list|()
block|{
name|SimpleQueryStringBuilder
name|qb
init|=
operator|new
name|SimpleQueryStringBuilder
argument_list|(
literal|"The quick brown fox."
argument_list|)
decl_stmt|;
name|qb
operator|.
name|defaultOperator
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Setting operator to null should result in returning to default value."
argument_list|,
name|SimpleQueryStringBuilder
operator|.
name|DEFAULT_OPERATOR
argument_list|,
name|qb
operator|.
name|defaultOperator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check operator handling, and default field handling.
annotation|@
name|Test
DECL|method|testDefaultOperatorHandling
specifier|public
name|void
name|testDefaultOperatorHandling
parameter_list|()
throws|throws
name|IOException
block|{
name|SimpleQueryStringBuilder
name|qb
init|=
operator|new
name|SimpleQueryStringBuilder
argument_list|(
literal|"The quick brown fox."
argument_list|)
operator|.
name|field
argument_list|(
name|STRING_FIELD_NAME
argument_list|)
decl_stmt|;
name|QueryShardContext
name|shardContext
init|=
name|createShardContext
argument_list|()
decl_stmt|;
name|shardContext
operator|.
name|setAllowUnmappedFields
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// to avoid occasional cases in setup where we didn't add types but strict field resolution
name|BooleanQuery
name|boolQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|qb
operator|.
name|toQuery
argument_list|(
name|shardContext
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|shouldClauses
argument_list|(
name|boolQuery
argument_list|)
argument_list|,
name|is
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|qb
operator|.
name|defaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
name|boolQuery
operator|=
operator|(
name|BooleanQuery
operator|)
name|qb
operator|.
name|toQuery
argument_list|(
name|shardContext
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shouldClauses
argument_list|(
name|boolQuery
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|qb
operator|.
name|defaultOperator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
expr_stmt|;
name|boolQuery
operator|=
operator|(
name|BooleanQuery
operator|)
name|qb
operator|.
name|toQuery
argument_list|(
name|shardContext
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shouldClauses
argument_list|(
name|boolQuery
argument_list|)
argument_list|,
name|is
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidation
specifier|public
name|void
name|testValidation
parameter_list|()
block|{
name|SimpleQueryStringBuilder
name|qb
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|qb
operator|.
name|validate
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNullQueryTextGeneratesException
specifier|public
name|void
name|testNullQueryTextGeneratesException
parameter_list|()
block|{
name|SimpleQueryStringBuilder
name|builder
init|=
operator|new
name|SimpleQueryStringBuilder
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|QueryValidationException
name|exception
init|=
name|builder
operator|.
name|validate
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|exception
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testFieldCannotBeNull
specifier|public
name|void
name|testFieldCannotBeNull
parameter_list|()
block|{
name|SimpleQueryStringBuilder
name|qb
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|qb
operator|.
name|field
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testFieldCannotBeNullAndWeighted
specifier|public
name|void
name|testFieldCannotBeNullAndWeighted
parameter_list|()
block|{
name|SimpleQueryStringBuilder
name|qb
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|qb
operator|.
name|field
argument_list|(
literal|null
argument_list|,
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testFieldCannotBeEmpty
specifier|public
name|void
name|testFieldCannotBeEmpty
parameter_list|()
block|{
name|SimpleQueryStringBuilder
name|qb
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|qb
operator|.
name|field
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testFieldCannotBeEmptyAndWeighted
specifier|public
name|void
name|testFieldCannotBeEmptyAndWeighted
parameter_list|()
block|{
name|SimpleQueryStringBuilder
name|qb
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|qb
operator|.
name|field
argument_list|(
literal|""
argument_list|,
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
argument_list|)
expr_stmt|;
block|}
comment|/**      * The following should fail fast - never silently set the map containing      * fields and weights to null but refuse to accept null instead.      * */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|testFieldsCannotBeSetToNull
specifier|public
name|void
name|testFieldsCannotBeSetToNull
parameter_list|()
block|{
name|SimpleQueryStringBuilder
name|qb
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|qb
operator|.
name|fields
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldClauses
specifier|private
name|int
name|shouldClauses
parameter_list|(
name|BooleanQuery
name|query
parameter_list|)
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BooleanClause
name|c
range|:
name|query
operator|.
name|clauses
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getOccur
argument_list|()
operator|==
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
condition|)
block|{
name|result
operator|++
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

