begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|TermsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchNoDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ScoreMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|PerFieldSimilarityWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|put
operator|.
name|PutMappingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|TypeFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|InnerHitsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|FieldSortBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|AbstractQueryTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|startsWith
import|;
end_import

begin_class
DECL|class|HasChildQueryBuilderTests
specifier|public
class|class
name|HasChildQueryBuilderTests
extends|extends
name|AbstractQueryTestCase
argument_list|<
name|HasChildQueryBuilder
argument_list|>
block|{
DECL|field|PARENT_TYPE
specifier|protected
specifier|static
specifier|final
name|String
name|PARENT_TYPE
init|=
literal|"parent"
decl_stmt|;
DECL|field|CHILD_TYPE
specifier|protected
specifier|static
specifier|final
name|String
name|CHILD_TYPE
init|=
literal|"child"
decl_stmt|;
DECL|field|similarity
specifier|private
specifier|static
name|String
name|similarity
decl_stmt|;
DECL|field|requiresRewrite
name|boolean
name|requiresRewrite
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|initializeAdditionalMappings
specifier|protected
name|void
name|initializeAdditionalMappings
parameter_list|(
name|MapperService
name|mapperService
parameter_list|)
throws|throws
name|IOException
block|{
name|similarity
operator|=
name|randomFrom
argument_list|(
literal|"classic"
argument_list|,
literal|"BM25"
argument_list|)
expr_stmt|;
name|mapperService
operator|.
name|merge
argument_list|(
name|PARENT_TYPE
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|PutMappingRequest
operator|.
name|buildFromSimplifiedDef
argument_list|(
name|PARENT_TYPE
argument_list|,
name|STRING_FIELD_NAME
argument_list|,
literal|"type=text"
argument_list|,
name|STRING_FIELD_NAME_2
argument_list|,
literal|"type=keyword"
argument_list|,
name|INT_FIELD_NAME
argument_list|,
literal|"type=integer"
argument_list|,
name|DOUBLE_FIELD_NAME
argument_list|,
literal|"type=double"
argument_list|,
name|BOOLEAN_FIELD_NAME
argument_list|,
literal|"type=boolean"
argument_list|,
name|DATE_FIELD_NAME
argument_list|,
literal|"type=date"
argument_list|,
name|OBJECT_FIELD_NAME
argument_list|,
literal|"type=object"
argument_list|)
operator|.
name|string
argument_list|()
argument_list|)
argument_list|,
name|MapperService
operator|.
name|MergeReason
operator|.
name|MAPPING_UPDATE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mapperService
operator|.
name|merge
argument_list|(
name|CHILD_TYPE
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|PutMappingRequest
operator|.
name|buildFromSimplifiedDef
argument_list|(
name|CHILD_TYPE
argument_list|,
literal|"_parent"
argument_list|,
literal|"type="
operator|+
name|PARENT_TYPE
argument_list|,
name|STRING_FIELD_NAME
argument_list|,
literal|"type=text"
argument_list|,
literal|"custom_string"
argument_list|,
literal|"type=text,similarity="
operator|+
name|similarity
argument_list|,
name|INT_FIELD_NAME
argument_list|,
literal|"type=integer"
argument_list|,
name|DOUBLE_FIELD_NAME
argument_list|,
literal|"type=double"
argument_list|,
name|BOOLEAN_FIELD_NAME
argument_list|,
literal|"type=boolean"
argument_list|,
name|DATE_FIELD_NAME
argument_list|,
literal|"type=date"
argument_list|,
name|OBJECT_FIELD_NAME
argument_list|,
literal|"type=object"
argument_list|)
operator|.
name|string
argument_list|()
argument_list|)
argument_list|,
name|MapperService
operator|.
name|MergeReason
operator|.
name|MAPPING_UPDATE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return a {@link HasChildQueryBuilder} with random values all over the place      */
annotation|@
name|Override
DECL|method|doCreateTestQueryBuilder
specifier|protected
name|HasChildQueryBuilder
name|doCreateTestQueryBuilder
parameter_list|()
block|{
name|int
name|min
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|max
init|=
name|randomIntBetween
argument_list|(
name|min
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|QueryBuilder
name|innerQueryBuilder
init|=
name|RandomQueryBuilder
operator|.
name|createQuery
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|requiresRewrite
operator|=
literal|true
expr_stmt|;
name|innerQueryBuilder
operator|=
operator|new
name|WrapperQueryBuilder
argument_list|(
name|innerQueryBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HasChildQueryBuilder
name|hqb
init|=
operator|new
name|HasChildQueryBuilder
argument_list|(
name|CHILD_TYPE
argument_list|,
name|innerQueryBuilder
argument_list|,
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|ScoreMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hqb
operator|.
name|minMaxChildren
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|hqb
operator|.
name|innerHit
argument_list|(
operator|new
name|InnerHitBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|setSize
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|addSort
argument_list|(
operator|new
name|FieldSortBuilder
argument_list|(
name|STRING_FIELD_NAME_2
argument_list|)
operator|.
name|order
argument_list|(
name|SortOrder
operator|.
name|ASC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hqb
operator|.
name|ignoreUnmapped
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|hqb
return|;
block|}
annotation|@
name|Override
DECL|method|doAssertLuceneQuery
specifier|protected
name|void
name|doAssertLuceneQuery
parameter_list|(
name|HasChildQueryBuilder
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|HasChildQueryBuilder
operator|.
name|LateParsingQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|HasChildQueryBuilder
operator|.
name|LateParsingQuery
name|lpq
init|=
operator|(
name|HasChildQueryBuilder
operator|.
name|LateParsingQuery
operator|)
name|query
decl_stmt|;
name|assertEquals
argument_list|(
name|queryBuilder
operator|.
name|minChildren
argument_list|()
argument_list|,
name|lpq
operator|.
name|getMinChildren
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|queryBuilder
operator|.
name|maxChildren
argument_list|()
argument_list|,
name|lpq
operator|.
name|getMaxChildren
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|queryBuilder
operator|.
name|scoreMode
argument_list|()
argument_list|,
name|lpq
operator|.
name|getScoreMode
argument_list|()
argument_list|)
expr_stmt|;
comment|// WTF is this why do we have two?
if|if
condition|(
name|queryBuilder
operator|.
name|innerHit
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// have to rewrite again because the provided queryBuilder hasn't been rewritten (directly returned from
comment|// doCreateTestQueryBuilder)
name|queryBuilder
operator|=
operator|(
name|HasChildQueryBuilder
operator|)
name|queryBuilder
operator|.
name|rewrite
argument_list|(
name|searchContext
operator|.
name|getQueryShardContext
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|InnerHitBuilder
argument_list|>
name|innerHitBuilders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|InnerHitBuilder
operator|.
name|extractInnerHits
argument_list|(
name|queryBuilder
argument_list|,
name|innerHitBuilders
argument_list|)
expr_stmt|;
for|for
control|(
name|InnerHitBuilder
name|builder
range|:
name|innerHitBuilders
operator|.
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|build
argument_list|(
name|searchContext
argument_list|,
name|searchContext
operator|.
name|innerHits
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|searchContext
operator|.
name|innerHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|searchContext
operator|.
name|innerHits
argument_list|()
operator|.
name|getInnerHits
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|searchContext
operator|.
name|innerHits
argument_list|()
operator|.
name|getInnerHits
argument_list|()
operator|.
name|containsKey
argument_list|(
name|queryBuilder
operator|.
name|innerHit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|InnerHitsContext
operator|.
name|BaseInnerHits
name|innerHits
init|=
name|searchContext
operator|.
name|innerHits
argument_list|()
operator|.
name|getInnerHits
argument_list|()
operator|.
name|get
argument_list|(
name|queryBuilder
operator|.
name|innerHit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|innerHits
operator|.
name|size
argument_list|()
argument_list|,
name|queryBuilder
operator|.
name|innerHit
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|innerHits
operator|.
name|sort
argument_list|()
operator|.
name|sort
operator|.
name|getSort
argument_list|()
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|innerHits
operator|.
name|sort
argument_list|()
operator|.
name|sort
operator|.
name|getSort
argument_list|()
index|[
literal|0
index|]
operator|.
name|getField
argument_list|()
argument_list|,
name|STRING_FIELD_NAME_2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIllegalValues
specifier|public
name|void
name|testIllegalValues
parameter_list|()
block|{
name|QueryBuilder
name|query
init|=
name|RandomQueryBuilder
operator|.
name|createQuery
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|QueryBuilders
operator|.
name|hasChildQuery
argument_list|(
literal|null
argument_list|,
name|query
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[has_child] requires 'type' field"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|QueryBuilders
operator|.
name|hasChildQuery
argument_list|(
literal|"foo"
argument_list|,
literal|null
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[has_child] requires 'query' field"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|QueryBuilders
operator|.
name|hasChildQuery
argument_list|(
literal|"foo"
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[has_child] requires 'score_mode' field"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|positiveValue
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|HasChildQueryBuilder
name|foo
init|=
name|QueryBuilders
operator|.
name|hasChildQuery
argument_list|(
literal|"foo"
argument_list|,
name|query
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|)
decl_stmt|;
comment|// all good
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|foo
operator|.
name|minMaxChildren
argument_list|(
name|randomIntBetween
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|positiveValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[has_child] requires non-negative 'min_children' field"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|foo
operator|.
name|minMaxChildren
argument_list|(
name|positiveValue
argument_list|,
name|randomIntBetween
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[has_child] requires non-negative 'max_children' field"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|foo
operator|.
name|minMaxChildren
argument_list|(
name|positiveValue
argument_list|,
name|positiveValue
operator|-
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[has_child] 'max_children' is less than 'min_children'"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromJson
specifier|public
name|void
name|testFromJson
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|query
init|=
literal|"{\n"
operator|+
literal|"  \"has_child\" : {\n"
operator|+
literal|"    \"query\" : {\n"
operator|+
literal|"      \"range\" : {\n"
operator|+
literal|"        \"mapped_string\" : {\n"
operator|+
literal|"          \"from\" : \"agJhRET\",\n"
operator|+
literal|"          \"to\" : \"zvqIq\",\n"
operator|+
literal|"          \"include_lower\" : true,\n"
operator|+
literal|"          \"include_upper\" : true,\n"
operator|+
literal|"          \"boost\" : 1.0\n"
operator|+
literal|"        }\n"
operator|+
literal|"      }\n"
operator|+
literal|"    },\n"
operator|+
literal|"    \"type\" : \"child\",\n"
operator|+
literal|"    \"score_mode\" : \"avg\",\n"
operator|+
literal|"    \"min_children\" : 883170873,\n"
operator|+
literal|"    \"max_children\" : 1217235442,\n"
operator|+
literal|"    \"ignore_unmapped\" : false,\n"
operator|+
literal|"    \"boost\" : 2.0,\n"
operator|+
literal|"    \"_name\" : \"WNzYMJKRwePuRBh\",\n"
operator|+
literal|"    \"inner_hits\" : {\n"
operator|+
literal|"      \"name\" : \"inner_hits_name\",\n"
operator|+
literal|"      \"from\" : 0,\n"
operator|+
literal|"      \"size\" : 100,\n"
operator|+
literal|"      \"version\" : false,\n"
operator|+
literal|"      \"explain\" : false,\n"
operator|+
literal|"      \"track_scores\" : false,\n"
operator|+
literal|"      \"sort\" : [ {\n"
operator|+
literal|"        \"mapped_string\" : {\n"
operator|+
literal|"          \"order\" : \"asc\"\n"
operator|+
literal|"        }\n"
operator|+
literal|"      } ]\n"
operator|+
literal|"    }\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
name|HasChildQueryBuilder
name|queryBuilder
init|=
operator|(
name|HasChildQueryBuilder
operator|)
name|parseQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|checkGeneratedJson
argument_list|(
name|query
argument_list|,
name|queryBuilder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query
argument_list|,
name|queryBuilder
operator|.
name|maxChildren
argument_list|()
argument_list|,
literal|1217235442
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query
argument_list|,
name|queryBuilder
operator|.
name|minChildren
argument_list|()
argument_list|,
literal|883170873
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query
argument_list|,
name|queryBuilder
operator|.
name|boost
argument_list|()
argument_list|,
literal|2.0f
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query
argument_list|,
name|queryBuilder
operator|.
name|queryName
argument_list|()
argument_list|,
literal|"WNzYMJKRwePuRBh"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query
argument_list|,
name|queryBuilder
operator|.
name|childType
argument_list|()
argument_list|,
literal|"child"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query
argument_list|,
name|queryBuilder
operator|.
name|scoreMode
argument_list|()
argument_list|,
name|ScoreMode
operator|.
name|Avg
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|query
argument_list|,
name|queryBuilder
operator|.
name|innerHit
argument_list|()
argument_list|)
expr_stmt|;
name|InnerHitBuilder
name|expected
init|=
operator|new
name|InnerHitBuilder
argument_list|(
operator|new
name|InnerHitBuilder
argument_list|()
argument_list|,
name|queryBuilder
operator|.
name|query
argument_list|()
argument_list|,
literal|"child"
argument_list|)
operator|.
name|setName
argument_list|(
literal|"inner_hits_name"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
operator|.
name|addSort
argument_list|(
operator|new
name|FieldSortBuilder
argument_list|(
literal|"mapped_string"
argument_list|)
operator|.
name|order
argument_list|(
name|SortOrder
operator|.
name|ASC
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|query
argument_list|,
name|queryBuilder
operator|.
name|innerHit
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
comment|/**      * we resolve empty inner clauses by representing this whole query as empty optional upstream      */
DECL|method|testFromJsonEmptyQueryBody
specifier|public
name|void
name|testFromJsonEmptyQueryBody
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|query
init|=
literal|"{\n"
operator|+
literal|"  \"has_child\" : {\n"
operator|+
literal|"    \"query\" : { },\n"
operator|+
literal|"    \"type\" : \"child\""
operator|+
literal|"   }"
operator|+
literal|"}"
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|query
argument_list|)
operator|.
name|createParser
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|QueryParseContext
name|context
init|=
name|createParseContext
argument_list|(
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|QueryBuilder
argument_list|>
name|innerQueryBuilder
init|=
name|context
operator|.
name|parseInnerQueryBuilder
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|innerQueryBuilder
operator|.
name|isPresent
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|parser
operator|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|query
argument_list|)
operator|.
name|createParser
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|QueryParseContext
name|otherContext
init|=
name|createParseContext
argument_list|(
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|ex
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|otherContext
operator|.
name|parseInnerQueryBuilder
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"query malformed, empty clause found at"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQueryInnerQueryType
specifier|public
name|void
name|testToQueryInnerQueryType
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|searchTypes
init|=
operator|new
name|String
index|[]
block|{
name|PARENT_TYPE
block|}
decl_stmt|;
name|QueryShardContext
name|shardContext
init|=
name|createShardContext
argument_list|()
decl_stmt|;
name|shardContext
operator|.
name|setTypes
argument_list|(
name|searchTypes
argument_list|)
expr_stmt|;
name|HasChildQueryBuilder
name|hasChildQueryBuilder
init|=
name|QueryBuilders
operator|.
name|hasChildQuery
argument_list|(
name|CHILD_TYPE
argument_list|,
operator|new
name|IdsQueryBuilder
argument_list|()
operator|.
name|addIds
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|hasChildQueryBuilder
operator|.
name|toQuery
argument_list|(
name|shardContext
argument_list|)
decl_stmt|;
comment|//verify that the context types are still the same as the ones we previously set
name|assertThat
argument_list|(
name|shardContext
operator|.
name|getTypes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|searchTypes
argument_list|)
argument_list|)
expr_stmt|;
name|assertLateParsingQuery
argument_list|(
name|query
argument_list|,
name|CHILD_TYPE
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertLateParsingQuery
specifier|static
name|void
name|assertLateParsingQuery
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|HasChildQueryBuilder
operator|.
name|LateParsingQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|HasChildQueryBuilder
operator|.
name|LateParsingQuery
name|lateParsingQuery
init|=
operator|(
name|HasChildQueryBuilder
operator|.
name|LateParsingQuery
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|lateParsingQuery
operator|.
name|getInnerQuery
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|lateParsingQuery
operator|.
name|getInnerQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|booleanQuery
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|//check the inner ids query, we have to call rewrite to get to check the type it's executed against
name|assertThat
argument_list|(
name|booleanQuery
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|booleanQuery
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermsQuery
name|termsQuery
init|=
operator|(
name|TermsQuery
operator|)
name|booleanQuery
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|Query
name|rewrittenTermsQuery
init|=
name|termsQuery
operator|.
name|rewrite
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rewrittenTermsQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|rewrittenTermsQuery
decl_stmt|;
name|assertThat
argument_list|(
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanTermsQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|booleanTermsQuery
operator|.
name|clauses
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|booleanTermsQuery
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|booleanTermsQuery
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|booleanTermsQuery
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermQuery
name|termQuery
init|=
operator|(
name|TermQuery
operator|)
name|booleanTermsQuery
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|//we want to make sure that the inner ids query gets executed against the child type rather than the main type we initially set to the context
name|BytesRef
index|[]
name|ids
init|=
name|Uid
operator|.
name|createUidsForTypesAndIds
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|type
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ids
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|//check the type filter
name|assertThat
argument_list|(
name|booleanQuery
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|FILTER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeFieldMapper
operator|.
name|TypeQuery
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|,
name|booleanQuery
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|testMustRewrite
specifier|public
name|void
name|testMustRewrite
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|super
operator|.
name|testMustRewrite
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
if|if
condition|(
name|requiresRewrite
operator|==
literal|false
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|testNonDefaultSimilarity
specifier|public
name|void
name|testNonDefaultSimilarity
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryShardContext
name|shardContext
init|=
name|createShardContext
argument_list|()
decl_stmt|;
name|HasChildQueryBuilder
name|hasChildQueryBuilder
init|=
name|QueryBuilders
operator|.
name|hasChildQuery
argument_list|(
name|CHILD_TYPE
argument_list|,
operator|new
name|TermQueryBuilder
argument_list|(
literal|"custom_string"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|)
decl_stmt|;
name|HasChildQueryBuilder
operator|.
name|LateParsingQuery
name|query
init|=
operator|(
name|HasChildQueryBuilder
operator|.
name|LateParsingQuery
operator|)
name|hasChildQueryBuilder
operator|.
name|toQuery
argument_list|(
name|shardContext
argument_list|)
decl_stmt|;
name|Similarity
name|expected
init|=
name|SimilarityService
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|similarity
argument_list|)
operator|.
name|apply
argument_list|(
name|similarity
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|PerFieldSimilarityWrapper
operator|)
name|query
operator|.
name|getSimilarity
argument_list|()
operator|)
operator|.
name|get
argument_list|(
literal|"custom_string"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|expected
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinFromString
specifier|public
name|void
name|testMinFromString
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"fromString(min) != MIN"
argument_list|,
name|ScoreMode
operator|.
name|Min
argument_list|,
name|equalTo
argument_list|(
name|HasChildQueryBuilder
operator|.
name|parseScoreMode
argument_list|(
literal|"min"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"min"
argument_list|,
name|equalTo
argument_list|(
name|HasChildQueryBuilder
operator|.
name|scoreModeAsString
argument_list|(
name|ScoreMode
operator|.
name|Min
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMaxFromString
specifier|public
name|void
name|testMaxFromString
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"fromString(max) != MAX"
argument_list|,
name|ScoreMode
operator|.
name|Max
argument_list|,
name|equalTo
argument_list|(
name|HasChildQueryBuilder
operator|.
name|parseScoreMode
argument_list|(
literal|"max"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"max"
argument_list|,
name|equalTo
argument_list|(
name|HasChildQueryBuilder
operator|.
name|scoreModeAsString
argument_list|(
name|ScoreMode
operator|.
name|Max
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAvgFromString
specifier|public
name|void
name|testAvgFromString
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"fromString(avg) != AVG"
argument_list|,
name|ScoreMode
operator|.
name|Avg
argument_list|,
name|equalTo
argument_list|(
name|HasChildQueryBuilder
operator|.
name|parseScoreMode
argument_list|(
literal|"avg"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"avg"
argument_list|,
name|equalTo
argument_list|(
name|HasChildQueryBuilder
operator|.
name|scoreModeAsString
argument_list|(
name|ScoreMode
operator|.
name|Avg
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSumFromString
specifier|public
name|void
name|testSumFromString
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"fromString(total) != SUM"
argument_list|,
name|ScoreMode
operator|.
name|Total
argument_list|,
name|equalTo
argument_list|(
name|HasChildQueryBuilder
operator|.
name|parseScoreMode
argument_list|(
literal|"sum"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"sum"
argument_list|,
name|equalTo
argument_list|(
name|HasChildQueryBuilder
operator|.
name|scoreModeAsString
argument_list|(
name|ScoreMode
operator|.
name|Total
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoneFromString
specifier|public
name|void
name|testNoneFromString
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"fromString(none) != NONE"
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|,
name|equalTo
argument_list|(
name|HasChildQueryBuilder
operator|.
name|parseScoreMode
argument_list|(
literal|"none"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"none"
argument_list|,
name|equalTo
argument_list|(
name|HasChildQueryBuilder
operator|.
name|scoreModeAsString
argument_list|(
name|ScoreMode
operator|.
name|None
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Should throw {@link IllegalArgumentException} instead of NPE.      */
DECL|method|testThatNullFromStringThrowsException
specifier|public
name|void
name|testThatNullFromStringThrowsException
parameter_list|()
block|{
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|HasChildQueryBuilder
operator|.
name|parseScoreMode
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"No score mode for child query [null] found"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Failure should not change (and the value should never match anything...).      */
DECL|method|testThatUnrecognizedFromStringThrowsException
specifier|public
name|void
name|testThatUnrecognizedFromStringThrowsException
parameter_list|()
block|{
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|HasChildQueryBuilder
operator|.
name|parseScoreMode
argument_list|(
literal|"unrecognized value"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"No score mode for child query [unrecognized value] found"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIgnoreUnmapped
specifier|public
name|void
name|testIgnoreUnmapped
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|HasChildQueryBuilder
name|queryBuilder
init|=
operator|new
name|HasChildQueryBuilder
argument_list|(
literal|"unmapped"
argument_list|,
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|)
decl_stmt|;
name|queryBuilder
operator|.
name|ignoreUnmapped
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|queryBuilder
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|MatchNoDocsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|HasChildQueryBuilder
name|failingQueryBuilder
init|=
operator|new
name|HasChildQueryBuilder
argument_list|(
literal|"unmapped"
argument_list|,
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|)
decl_stmt|;
name|failingQueryBuilder
operator|.
name|ignoreUnmapped
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QueryShardException
name|e
init|=
name|expectThrows
argument_list|(
name|QueryShardException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|failingQueryBuilder
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"["
operator|+
name|HasChildQueryBuilder
operator|.
name|NAME
operator|+
literal|"] no mapping found for type [unmapped]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

