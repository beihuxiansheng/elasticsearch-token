begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanOrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|SpanOrQueryBuilderTest
specifier|public
class|class
name|SpanOrQueryBuilderTest
extends|extends
name|BaseQueryTestCase
argument_list|<
name|SpanOrQueryBuilder
argument_list|>
block|{
annotation|@
name|Override
DECL|method|doCreateExpectedQuery
specifier|protected
name|Query
name|doCreateExpectedQuery
parameter_list|(
name|SpanOrQueryBuilder
name|testQueryBuilder
parameter_list|,
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|SpanQueryBuilder
argument_list|>
name|clauses
init|=
name|testQueryBuilder
operator|.
name|clauses
argument_list|()
decl_stmt|;
name|SpanQuery
index|[]
name|spanQueries
init|=
operator|new
name|SpanQuery
index|[
name|clauses
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clauses
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Query
name|query
init|=
name|clauses
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
decl_stmt|;
assert|assert
name|query
operator|instanceof
name|SpanQuery
assert|;
name|spanQueries
index|[
name|i
index|]
operator|=
operator|(
name|SpanQuery
operator|)
name|query
expr_stmt|;
block|}
return|return
operator|new
name|SpanOrQuery
argument_list|(
name|spanQueries
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doCreateTestQueryBuilder
specifier|protected
name|SpanOrQueryBuilder
name|doCreateTestQueryBuilder
parameter_list|()
block|{
name|SpanOrQueryBuilder
name|queryBuilder
init|=
operator|new
name|SpanOrQueryBuilder
argument_list|()
decl_stmt|;
name|SpanTermQueryBuilder
index|[]
name|spanTermQueries
init|=
operator|new
name|SpanTermQueryBuilderTest
argument_list|()
operator|.
name|createSpanTermQueryBuilders
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|SpanTermQueryBuilder
name|clause
range|:
name|spanTermQueries
control|)
block|{
name|queryBuilder
operator|.
name|clause
argument_list|(
name|clause
argument_list|)
expr_stmt|;
block|}
return|return
name|queryBuilder
return|;
block|}
annotation|@
name|Test
DECL|method|testValidate
specifier|public
name|void
name|testValidate
parameter_list|()
block|{
name|SpanOrQueryBuilder
name|queryBuilder
init|=
operator|new
name|SpanOrQueryBuilder
argument_list|()
decl_stmt|;
name|assertValidate
argument_list|(
name|queryBuilder
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// empty clause list
name|int
name|totalExpectedErrors
init|=
literal|0
decl_stmt|;
name|int
name|clauses
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clauses
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|clause
argument_list|(
operator|new
name|SpanTermQueryBuilder
argument_list|(
literal|""
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|totalExpectedErrors
operator|++
expr_stmt|;
block|}
else|else
block|{
name|queryBuilder
operator|.
name|clause
argument_list|(
operator|new
name|SpanTermQueryBuilder
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertValidate
argument_list|(
name|queryBuilder
argument_list|,
name|totalExpectedErrors
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

