begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|CodepointSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|io
operator|.
name|JsonStringEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|put
operator|.
name|PutMappingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|MultiTermVectorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|MultiTermVectorsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|ModulesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|multibindings
operator|.
name|Multibinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableAwareStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|EnvironmentModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|IndexCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|bitset
operator|.
name|BitsetFilterCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|query
operator|.
name|none
operator|.
name|NoneQueryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionParserMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|support
operator|.
name|QueryParsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesWarmer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|CircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|NoneCircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|mustache
operator|.
name|MustacheScriptEngineService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|IndexSettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|TestSearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|cluster
operator|.
name|TestClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPoolModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_class
DECL|class|AbstractQueryTestCase
specifier|public
specifier|abstract
class|class
name|AbstractQueryTestCase
parameter_list|<
name|QB
extends|extends
name|AbstractQueryBuilder
parameter_list|<
name|QB
parameter_list|>
parameter_list|>
extends|extends
name|ESTestCase
block|{
DECL|field|geohashGenerator
specifier|private
specifier|static
specifier|final
name|GeohashGenerator
name|geohashGenerator
init|=
operator|new
name|GeohashGenerator
argument_list|()
decl_stmt|;
DECL|field|STRING_FIELD_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|STRING_FIELD_NAME
init|=
literal|"mapped_string"
decl_stmt|;
DECL|field|STRING_FIELD_NAME_2
specifier|protected
specifier|static
specifier|final
name|String
name|STRING_FIELD_NAME_2
init|=
literal|"mapped_string_2"
decl_stmt|;
DECL|field|INT_FIELD_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|INT_FIELD_NAME
init|=
literal|"mapped_int"
decl_stmt|;
DECL|field|DOUBLE_FIELD_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|DOUBLE_FIELD_NAME
init|=
literal|"mapped_double"
decl_stmt|;
DECL|field|BOOLEAN_FIELD_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|BOOLEAN_FIELD_NAME
init|=
literal|"mapped_boolean"
decl_stmt|;
DECL|field|DATE_FIELD_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|DATE_FIELD_NAME
init|=
literal|"mapped_date"
decl_stmt|;
DECL|field|OBJECT_FIELD_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|OBJECT_FIELD_NAME
init|=
literal|"mapped_object"
decl_stmt|;
DECL|field|GEO_POINT_FIELD_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|GEO_POINT_FIELD_NAME
init|=
literal|"mapped_geo_point"
decl_stmt|;
DECL|field|GEO_SHAPE_FIELD_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|GEO_SHAPE_FIELD_NAME
init|=
literal|"mapped_geo_shape"
decl_stmt|;
DECL|field|MAPPED_FIELD_NAMES
specifier|protected
specifier|static
specifier|final
name|String
index|[]
name|MAPPED_FIELD_NAMES
init|=
operator|new
name|String
index|[]
block|{
name|STRING_FIELD_NAME
block|,
name|INT_FIELD_NAME
block|,
name|DOUBLE_FIELD_NAME
block|,
name|BOOLEAN_FIELD_NAME
block|,
name|DATE_FIELD_NAME
block|,
name|OBJECT_FIELD_NAME
block|,
name|GEO_POINT_FIELD_NAME
block|,
name|GEO_SHAPE_FIELD_NAME
block|}
decl_stmt|;
DECL|field|MAPPED_LEAF_FIELD_NAMES
specifier|protected
specifier|static
specifier|final
name|String
index|[]
name|MAPPED_LEAF_FIELD_NAMES
init|=
operator|new
name|String
index|[]
block|{
name|STRING_FIELD_NAME
block|,
name|INT_FIELD_NAME
block|,
name|DOUBLE_FIELD_NAME
block|,
name|BOOLEAN_FIELD_NAME
block|,
name|DATE_FIELD_NAME
block|,
name|GEO_POINT_FIELD_NAME
block|}
decl_stmt|;
DECL|field|NUMBER_OF_TESTQUERIES
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER_OF_TESTQUERIES
init|=
literal|20
decl_stmt|;
DECL|field|injector
specifier|private
specifier|static
name|Injector
name|injector
decl_stmt|;
DECL|field|queryParserService
specifier|private
specifier|static
name|IndexQueryParserService
name|queryParserService
decl_stmt|;
DECL|method|queryParserService
specifier|protected
specifier|static
name|IndexQueryParserService
name|queryParserService
parameter_list|()
block|{
return|return
name|queryParserService
return|;
block|}
DECL|field|index
specifier|private
specifier|static
name|Index
name|index
decl_stmt|;
DECL|method|getIndex
specifier|protected
specifier|static
name|Index
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
DECL|field|currentTypes
specifier|private
specifier|static
name|String
index|[]
name|currentTypes
decl_stmt|;
DECL|method|getCurrentTypes
specifier|protected
specifier|static
name|String
index|[]
name|getCurrentTypes
parameter_list|()
block|{
return|return
name|currentTypes
return|;
block|}
DECL|field|namedWriteableRegistry
specifier|private
specifier|static
name|NamedWriteableRegistry
name|namedWriteableRegistry
decl_stmt|;
DECL|field|randomTypes
specifier|private
specifier|static
name|String
index|[]
name|randomTypes
decl_stmt|;
DECL|field|clientInvocationHandler
specifier|private
specifier|static
name|ClientInvocationHandler
name|clientInvocationHandler
init|=
operator|new
name|ClientInvocationHandler
argument_list|()
decl_stmt|;
comment|/**      * Setup for the whole base test class.      */
annotation|@
name|BeforeClass
DECL|method|init
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
comment|// we have to prefer CURRENT since with the range of versions we support it's rather unlikely to get the current actually.
name|Version
name|version
init|=
name|randomBoolean
argument_list|()
condition|?
name|Version
operator|.
name|CURRENT
else|:
name|VersionUtils
operator|.
name|randomVersionBetween
argument_list|(
name|random
argument_list|()
argument_list|,
name|Version
operator|.
name|V_2_0_0_beta1
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|AbstractQueryTestCase
operator|.
name|class
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|version
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|index
operator|=
operator|new
name|Index
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|IndexSettings
name|idxSettings
init|=
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TestClusterService
name|clusterService
init|=
operator|new
name|TestClusterService
argument_list|()
decl_stmt|;
name|clusterService
operator|.
name|setState
argument_list|(
operator|new
name|ClusterState
operator|.
name|Builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|metaData
argument_list|(
operator|new
name|MetaData
operator|.
name|Builder
argument_list|()
operator|.
name|put
argument_list|(
operator|new
name|IndexMetaData
operator|.
name|Builder
argument_list|(
name|index
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|indexSettings
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Client
name|proxy
init|=
operator|(
name|Client
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|Client
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Client
operator|.
name|class
block|}
argument_list|,
name|clientInvocationHandler
argument_list|)
decl_stmt|;
name|injector
operator|=
operator|new
name|ModulesBuilder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|EnvironmentModule
argument_list|(
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SettingsModule
argument_list|(
name|settings
argument_list|)
argument_list|,
operator|new
name|ThreadPoolModule
argument_list|(
operator|new
name|ThreadPool
argument_list|(
name|settings
argument_list|)
argument_list|)
argument_list|,
operator|new
name|IndicesModule
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// skip services
name|bindQueryParsersExtension
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
operator|new
name|ScriptModule
argument_list|(
name|settings
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
comment|// no file watching, so we don't need a ResourceWatcherService
operator|.
name|put
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_AUTO_RELOAD_ENABLED_SETTING
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MockScriptEngine
name|mockScriptEngine
init|=
operator|new
name|MockScriptEngine
argument_list|()
decl_stmt|;
name|Multibinder
argument_list|<
name|ScriptEngineService
argument_list|>
name|multibinder
init|=
name|Multibinder
operator|.
name|newSetBinder
argument_list|(
name|binder
argument_list|()
argument_list|,
name|ScriptEngineService
operator|.
name|class
argument_list|)
decl_stmt|;
name|multibinder
operator|.
name|addBinding
argument_list|()
operator|.
name|toInstance
argument_list|(
name|mockScriptEngine
argument_list|)
expr_stmt|;
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"com.github.mustachejava.Mustache"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"error while loading mustache"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|MustacheScriptEngineService
name|mustacheScriptEngineService
init|=
operator|new
name|MustacheScriptEngineService
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ScriptEngineService
argument_list|>
name|engines
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|engines
operator|.
name|add
argument_list|(
name|mockScriptEngine
argument_list|)
expr_stmt|;
name|engines
operator|.
name|add
argument_list|(
name|mustacheScriptEngineService
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ScriptContext
operator|.
name|Plugin
argument_list|>
name|customContexts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|bind
argument_list|(
name|ScriptContextRegistry
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|ScriptContextRegistry
argument_list|(
name|customContexts
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|ScriptService
name|scriptService
init|=
operator|new
name|ScriptService
argument_list|(
name|settings
argument_list|,
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
argument_list|,
name|engines
argument_list|,
literal|null
argument_list|,
operator|new
name|ScriptContextRegistry
argument_list|(
name|customContexts
argument_list|)
argument_list|)
decl_stmt|;
name|bind
argument_list|(
name|ScriptService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|scriptService
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"error while binding ScriptService"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|,
operator|new
name|IndexSettingsModule
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
argument_list|,
operator|new
name|AbstractModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
try|try
block|{
name|bind
argument_list|(
name|AnalysisService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|AnalysisRegistry
argument_list|(
literal|null
argument_list|,
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(
name|idxSettings
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|SimilarityService
name|service
init|=
operator|new
name|SimilarityService
argument_list|(
name|idxSettings
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|bind
argument_list|(
name|SimilarityService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|BitsetFilterCache
name|bitsetFilterCache
init|=
operator|new
name|BitsetFilterCache
argument_list|(
name|idxSettings
argument_list|,
operator|new
name|IndicesWarmer
argument_list|(
name|idxSettings
operator|.
name|getNodeSettings
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|bind
argument_list|(
name|BitsetFilterCache
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|bitsetFilterCache
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|IndexCache
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|IndexCache
argument_list|(
name|idxSettings
argument_list|,
operator|new
name|NoneQueryCache
argument_list|(
name|idxSettings
argument_list|)
argument_list|,
name|bitsetFilterCache
argument_list|)
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|Client
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|Multibinder
operator|.
name|newSetBinder
argument_list|(
name|binder
argument_list|()
argument_list|,
name|ScoreFunctionParser
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ScoreFunctionParserMapper
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
name|Providers
operator|.
name|of
argument_list|(
name|clusterService
argument_list|)
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|CircuitBreakerService
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|NoneCircuitBreakerService
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|NamedWriteableRegistry
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|createInjector
argument_list|()
expr_stmt|;
name|queryParserService
operator|=
name|injector
operator|.
name|getInstance
argument_list|(
name|IndexQueryParserService
operator|.
name|class
argument_list|)
expr_stmt|;
name|MapperService
name|mapperService
init|=
name|queryParserService
operator|.
name|mapperService
decl_stmt|;
comment|//create some random type with some default field, those types will stick around for all of the subclasses
name|currentTypes
operator|=
operator|new
name|String
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|type
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|mapperService
operator|.
name|merge
argument_list|(
name|type
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|PutMappingRequest
operator|.
name|buildFromSimplifiedDef
argument_list|(
name|type
argument_list|,
name|STRING_FIELD_NAME
argument_list|,
literal|"type=string"
argument_list|,
name|STRING_FIELD_NAME_2
argument_list|,
literal|"type=string"
argument_list|,
name|INT_FIELD_NAME
argument_list|,
literal|"type=integer"
argument_list|,
name|DOUBLE_FIELD_NAME
argument_list|,
literal|"type=double"
argument_list|,
name|BOOLEAN_FIELD_NAME
argument_list|,
literal|"type=boolean"
argument_list|,
name|DATE_FIELD_NAME
argument_list|,
literal|"type=date"
argument_list|,
name|OBJECT_FIELD_NAME
argument_list|,
literal|"type=object"
argument_list|,
name|GEO_POINT_FIELD_NAME
argument_list|,
literal|"type=geo_point,lat_lon=true,geohash=true,geohash_prefix=true"
argument_list|,
name|GEO_SHAPE_FIELD_NAME
argument_list|,
literal|"type=geo_shape"
argument_list|)
operator|.
name|string
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// also add mappings for two inner field in the object field
name|mapperService
operator|.
name|merge
argument_list|(
name|type
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
literal|"{\"properties\":{\""
operator|+
name|OBJECT_FIELD_NAME
operator|+
literal|"\":{\"type\":\"object\","
operator|+
literal|"\"properties\":{\""
operator|+
name|DATE_FIELD_NAME
operator|+
literal|"\":{\"type\":\"date\"},\""
operator|+
name|INT_FIELD_NAME
operator|+
literal|"\":{\"type\":\"integer\"}}}}}"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|currentTypes
index|[
name|i
index|]
operator|=
name|type
expr_stmt|;
block|}
name|namedWriteableRegistry
operator|=
name|injector
operator|.
name|getInstance
argument_list|(
name|NamedWriteableRegistry
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|terminate
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|ThreadPool
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|injector
operator|=
literal|null
expr_stmt|;
name|index
operator|=
literal|null
expr_stmt|;
name|queryParserService
operator|=
literal|null
expr_stmt|;
name|currentTypes
operator|=
literal|null
expr_stmt|;
name|namedWriteableRegistry
operator|=
literal|null
expr_stmt|;
name|randomTypes
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|beforeTest
specifier|public
name|void
name|beforeTest
parameter_list|()
block|{
name|clientInvocationHandler
operator|.
name|delegate
operator|=
name|this
expr_stmt|;
comment|//set some random types to be queried as part the search request, before each test
name|randomTypes
operator|=
name|getRandomTypes
argument_list|()
expr_stmt|;
block|}
DECL|method|setSearchContext
specifier|protected
name|void
name|setSearchContext
parameter_list|(
name|String
index|[]
name|types
parameter_list|)
block|{
name|TestSearchContext
name|testSearchContext
init|=
operator|new
name|TestSearchContext
argument_list|()
decl_stmt|;
name|testSearchContext
operator|.
name|setTypes
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|SearchContext
operator|.
name|setCurrent
argument_list|(
name|testSearchContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|afterTest
specifier|public
name|void
name|afterTest
parameter_list|()
block|{
name|clientInvocationHandler
operator|.
name|delegate
operator|=
literal|null
expr_stmt|;
name|QueryShardContext
operator|.
name|removeTypes
argument_list|()
expr_stmt|;
name|SearchContext
operator|.
name|removeCurrent
argument_list|()
expr_stmt|;
block|}
DECL|method|createTestQueryBuilder
specifier|protected
specifier|final
name|QB
name|createTestQueryBuilder
parameter_list|()
block|{
name|QB
name|query
init|=
name|doCreateTestQueryBuilder
argument_list|()
decl_stmt|;
comment|//we should not set boost and query name for queries that don't parse it
if|if
condition|(
name|supportsBoostAndQueryName
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|query
operator|.
name|boost
argument_list|(
literal|2.0f
operator|/
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|query
operator|.
name|queryName
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|query
return|;
block|}
comment|/**      * Create the query that is being tested      */
DECL|method|doCreateTestQueryBuilder
specifier|protected
specifier|abstract
name|QB
name|doCreateTestQueryBuilder
parameter_list|()
function_decl|;
comment|/**      * Generic test that creates new query from the test query and checks both for equality      * and asserts equality on the two queries.      */
DECL|method|testFromXContent
specifier|public
name|void
name|testFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_TESTQUERIES
condition|;
name|runs
operator|++
control|)
block|{
name|QB
name|testQuery
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|assertParsedQuery
argument_list|(
name|testQuery
operator|.
name|toString
argument_list|()
argument_list|,
name|testQuery
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|QB
argument_list|>
name|alternateVersion
range|:
name|getAlternateVersions
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertParsedQuery
argument_list|(
name|alternateVersion
operator|.
name|getKey
argument_list|()
argument_list|,
name|alternateVersion
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Test that unknown field trigger ParsingException.      * To find the right position in the root query, we add a marker as `queryName` which      * all query builders support. The added bogus field after that should trigger the exception.      * Queries that allow arbitrary field names at this level need to override this test.      */
DECL|method|testUnknownField
specifier|public
name|void
name|testUnknownField
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|marker
init|=
literal|"#marker#"
decl_stmt|;
name|QB
name|testQuery
decl_stmt|;
do|do
block|{
name|testQuery
operator|=
name|createTestQueryBuilder
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|testQuery
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|marker
argument_list|)
condition|)
do|;
name|testQuery
operator|.
name|queryName
argument_list|(
name|marker
argument_list|)
expr_stmt|;
comment|// to find root query to add additional bogus field there
name|String
name|queryAsString
init|=
name|testQuery
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\""
operator|+
name|marker
operator|+
literal|"\""
argument_list|,
literal|"\""
operator|+
name|marker
operator|+
literal|"\", \"bogusField\" : \"someValue\""
argument_list|)
decl_stmt|;
try|try
block|{
name|parseQuery
argument_list|(
name|queryAsString
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ParsingException expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParsingException
name|e
parameter_list|)
block|{
comment|// we'd like to see the offending field name here
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"bogusField"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns alternate string representation of the query that need to be tested as they are never used as output      * of {@link QueryBuilder#toXContent(XContentBuilder, ToXContent.Params)}. By default there are no alternate versions.      */
DECL|method|getAlternateVersions
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|QB
argument_list|>
name|getAlternateVersions
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
comment|/**      * Parses the query provided as string argument and compares it with the expected result provided as argument as a {@link QueryBuilder}      */
DECL|method|assertParsedQuery
specifier|protected
specifier|final
name|void
name|assertParsedQuery
parameter_list|(
name|String
name|queryAsString
parameter_list|,
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|expectedQuery
parameter_list|)
throws|throws
name|IOException
block|{
name|assertParsedQuery
argument_list|(
name|queryAsString
argument_list|,
name|expectedQuery
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
DECL|method|assertParsedQuery
specifier|protected
specifier|final
name|void
name|assertParsedQuery
parameter_list|(
name|String
name|queryAsString
parameter_list|,
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|expectedQuery
parameter_list|,
name|ParseFieldMatcher
name|matcher
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|newQuery
init|=
name|parseQuery
argument_list|(
name|queryAsString
argument_list|,
name|matcher
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|newQuery
argument_list|,
name|expectedQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedQuery
argument_list|,
name|newQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedQuery
operator|.
name|hashCode
argument_list|()
argument_list|,
name|newQuery
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|parseQuery
specifier|protected
specifier|final
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|parseQuery
parameter_list|(
name|String
name|queryAsString
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|parseQuery
argument_list|(
name|queryAsString
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
return|;
block|}
DECL|method|parseQuery
specifier|protected
specifier|final
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|parseQuery
parameter_list|(
name|String
name|queryAsString
parameter_list|,
name|ParseFieldMatcher
name|matcher
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|queryAsString
argument_list|)
operator|.
name|createParser
argument_list|(
name|queryAsString
argument_list|)
decl_stmt|;
return|return
name|parseQuery
argument_list|(
name|parser
argument_list|,
name|matcher
argument_list|)
return|;
block|}
DECL|method|parseQuery
specifier|protected
specifier|final
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|parseQuery
parameter_list|(
name|BytesReference
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|query
argument_list|)
operator|.
name|createParser
argument_list|(
name|query
argument_list|)
decl_stmt|;
return|return
name|parseQuery
argument_list|(
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
return|;
block|}
DECL|method|parseQuery
specifier|protected
specifier|final
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|parseQuery
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|ParseFieldMatcher
name|matcher
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryParseContext
name|context
init|=
name|createParseContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|reset
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|context
operator|.
name|parseFieldMatcher
argument_list|(
name|matcher
argument_list|)
expr_stmt|;
name|QueryBuilder
name|parseInnerQueryBuilder
init|=
name|context
operator|.
name|parseInnerQueryBuilder
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return
name|parseInnerQueryBuilder
return|;
block|}
comment|/**      * Test creates the {@link Query} from the {@link QueryBuilder} under test and delegates the      * assertions being made on the result to the implementing subclass.      */
DECL|method|testToQuery
specifier|public
name|void
name|testToQuery
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_TESTQUERIES
condition|;
name|runs
operator|++
control|)
block|{
name|QueryShardContext
name|context
init|=
name|createShardContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setAllowUnmappedFields
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QB
name|firstQuery
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|QB
name|controlQuery
init|=
name|copyQuery
argument_list|(
name|firstQuery
argument_list|)
decl_stmt|;
name|setSearchContext
argument_list|(
name|randomTypes
argument_list|)
expr_stmt|;
comment|// only set search context for toQuery to be more realistic
name|Query
name|firstLuceneQuery
init|=
name|firstQuery
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertLuceneQuery
argument_list|(
name|firstQuery
argument_list|,
name|firstLuceneQuery
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|SearchContext
operator|.
name|removeCurrent
argument_list|()
expr_stmt|;
comment|// remove after assertLuceneQuery since the assertLuceneQuery impl might access the context as well
name|assertTrue
argument_list|(
literal|"query is not equal to its copy after calling toQuery, firstQuery: "
operator|+
name|firstQuery
operator|+
literal|", secondQuery: "
operator|+
name|controlQuery
argument_list|,
name|firstQuery
operator|.
name|equals
argument_list|(
name|controlQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not symmetric after calling toQuery, firstQuery: "
operator|+
name|firstQuery
operator|+
literal|", secondQuery: "
operator|+
name|controlQuery
argument_list|,
name|controlQuery
operator|.
name|equals
argument_list|(
name|firstQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"query copy's hashcode is different from original hashcode after calling toQuery, firstQuery: "
operator|+
name|firstQuery
operator|+
literal|", secondQuery: "
operator|+
name|controlQuery
argument_list|,
name|controlQuery
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstQuery
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QB
name|secondQuery
init|=
name|copyQuery
argument_list|(
name|firstQuery
argument_list|)
decl_stmt|;
comment|// query _name never should affect the result of toQuery, we randomly set it to make sure
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|secondQuery
operator|.
name|queryName
argument_list|(
name|secondQuery
operator|.
name|queryName
argument_list|()
operator|==
literal|null
condition|?
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|30
argument_list|)
else|:
name|secondQuery
operator|.
name|queryName
argument_list|()
operator|+
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setSearchContext
argument_list|(
name|randomTypes
argument_list|)
expr_stmt|;
name|Query
name|secondLuceneQuery
init|=
name|secondQuery
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertLuceneQuery
argument_list|(
name|secondQuery
argument_list|,
name|secondLuceneQuery
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|SearchContext
operator|.
name|removeCurrent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"two equivalent query builders lead to different lucene queries"
argument_list|,
name|secondLuceneQuery
argument_list|,
name|equalTo
argument_list|(
name|firstLuceneQuery
argument_list|)
argument_list|)
expr_stmt|;
comment|// if the initial lucene query is null, changing its boost won't have any effect, we shouldn't test that
if|if
condition|(
name|firstLuceneQuery
operator|!=
literal|null
operator|&&
name|supportsBoostAndQueryName
argument_list|()
condition|)
block|{
name|secondQuery
operator|.
name|boost
argument_list|(
name|firstQuery
operator|.
name|boost
argument_list|()
operator|+
literal|1f
operator|+
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
name|setSearchContext
argument_list|(
name|randomTypes
argument_list|)
expr_stmt|;
name|Query
name|thirdLuceneQuery
init|=
name|secondQuery
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SearchContext
operator|.
name|removeCurrent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"modifying the boost doesn't affect the corresponding lucene query"
argument_list|,
name|firstLuceneQuery
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|thirdLuceneQuery
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Few queries allow you to set the boost and queryName on the java api, although the corresponding parser doesn't parse them as they are not supported.      * This method allows to disable boost and queryName related tests for those queries. Those queries are easy to identify: their parsers      * don't parse `boost` and `_name` as they don't apply to the specific query: wrapper query and match_none      */
DECL|method|supportsBoostAndQueryName
specifier|protected
name|boolean
name|supportsBoostAndQueryName
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Checks the result of {@link QueryBuilder#toQuery(QueryShardContext)} given the original {@link QueryBuilder} and {@link QueryShardContext}.      * Verifies that named queries and boost are properly handled and delegates to {@link #doAssertLuceneQuery(AbstractQueryBuilder, Query, QueryShardContext)}      * for query specific checks.      */
DECL|method|assertLuceneQuery
specifier|protected
specifier|final
name|void
name|assertLuceneQuery
parameter_list|(
name|QB
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|queryBuilder
operator|.
name|queryName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Query
name|namedQuery
init|=
name|context
operator|.
name|copyNamedQueries
argument_list|()
operator|.
name|get
argument_list|(
name|queryBuilder
operator|.
name|queryName
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|namedQuery
argument_list|,
name|equalTo
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|assertBoost
argument_list|(
name|queryBuilder
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
name|doAssertLuceneQuery
argument_list|(
name|queryBuilder
argument_list|,
name|query
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * Allows to override boost assertions for queries that don't have the default behaviour      */
DECL|method|assertBoost
specifier|protected
name|void
name|assertBoost
parameter_list|(
name|QB
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|)
throws|throws
name|IOException
block|{
comment|// workaround https://bugs.openjdk.java.net/browse/JDK-8056984
name|float
name|boost
init|=
name|queryBuilder
operator|.
name|boost
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|query
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|boost
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks the result of {@link QueryBuilder#toQuery(QueryShardContext)} given the original {@link QueryBuilder} and {@link QueryShardContext}.      * Contains the query specific checks to be implemented by subclasses.      */
DECL|method|doAssertLuceneQuery
specifier|protected
specifier|abstract
name|void
name|doAssertLuceneQuery
parameter_list|(
name|QB
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Test serialization and deserialization of the test query.      */
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_TESTQUERIES
condition|;
name|runs
operator|++
control|)
block|{
name|QB
name|testQuery
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|assertSerialization
argument_list|(
name|testQuery
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Serialize the given query builder and asserts that both are equal      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|assertSerialization
specifier|protected
name|QB
name|assertSerialization
parameter_list|(
name|QB
name|testQuery
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|testQuery
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|,
name|namedWriteableRegistry
argument_list|)
init|)
block|{
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|prototype
init|=
name|queryParser
argument_list|(
name|testQuery
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getBuilderPrototype
argument_list|()
decl_stmt|;
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|deserializedQuery
init|=
name|prototype
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|deserializedQuery
argument_list|,
name|testQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deserializedQuery
operator|.
name|hashCode
argument_list|()
argument_list|,
name|testQuery
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|deserializedQuery
argument_list|,
name|testQuery
argument_list|)
expr_stmt|;
return|return
operator|(
name|QB
operator|)
name|deserializedQuery
return|;
block|}
block|}
block|}
DECL|method|testEqualsAndHashcode
specifier|public
name|void
name|testEqualsAndHashcode
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_TESTQUERIES
condition|;
name|runs
operator|++
control|)
block|{
name|QB
name|firstQuery
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"query is equal to null"
argument_list|,
name|firstQuery
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"query is equal to incompatible type"
argument_list|,
name|firstQuery
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"query is not equal to self"
argument_list|,
name|firstQuery
operator|.
name|equals
argument_list|(
name|firstQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"same query's hashcode returns different values if called multiple times"
argument_list|,
name|firstQuery
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstQuery
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QB
name|secondQuery
init|=
name|copyQuery
argument_list|(
name|firstQuery
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"query is not equal to self"
argument_list|,
name|secondQuery
operator|.
name|equals
argument_list|(
name|secondQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"query is not equal to its copy"
argument_list|,
name|firstQuery
operator|.
name|equals
argument_list|(
name|secondQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not symmetric"
argument_list|,
name|secondQuery
operator|.
name|equals
argument_list|(
name|firstQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"query copy's hashcode is different from original hashcode"
argument_list|,
name|secondQuery
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstQuery
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QB
name|thirdQuery
init|=
name|copyQuery
argument_list|(
name|secondQuery
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"query is not equal to self"
argument_list|,
name|thirdQuery
operator|.
name|equals
argument_list|(
name|thirdQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"query is not equal to its copy"
argument_list|,
name|secondQuery
operator|.
name|equals
argument_list|(
name|thirdQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"query copy's hashcode is different from original hashcode"
argument_list|,
name|secondQuery
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|thirdQuery
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not transitive"
argument_list|,
name|firstQuery
operator|.
name|equals
argument_list|(
name|thirdQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"query copy's hashcode is different from original hashcode"
argument_list|,
name|firstQuery
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|thirdQuery
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not symmetric"
argument_list|,
name|thirdQuery
operator|.
name|equals
argument_list|(
name|secondQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not symmetric"
argument_list|,
name|thirdQuery
operator|.
name|equals
argument_list|(
name|firstQuery
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|secondQuery
operator|.
name|queryName
argument_list|(
name|secondQuery
operator|.
name|queryName
argument_list|()
operator|==
literal|null
condition|?
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|30
argument_list|)
else|:
name|secondQuery
operator|.
name|queryName
argument_list|()
operator|+
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secondQuery
operator|.
name|boost
argument_list|(
name|firstQuery
operator|.
name|boost
argument_list|()
operator|+
literal|1f
operator|+
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
literal|"different queries should not be equal"
argument_list|,
name|secondQuery
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|firstQuery
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"different queries should have different hashcode"
argument_list|,
name|secondQuery
operator|.
name|hashCode
argument_list|()
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|firstQuery
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|queryParser
specifier|private
name|QueryParser
argument_list|<
name|?
argument_list|>
name|queryParser
parameter_list|(
name|String
name|queryId
parameter_list|)
block|{
return|return
name|queryParserService
operator|.
name|indicesQueriesRegistry
argument_list|()
operator|.
name|queryParsers
argument_list|()
operator|.
name|get
argument_list|(
name|queryId
argument_list|)
return|;
block|}
comment|//we use the streaming infra to create a copy of the query provided as argument
DECL|method|copyQuery
specifier|protected
name|QB
name|copyQuery
parameter_list|(
name|QB
name|query
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|query
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|,
name|namedWriteableRegistry
argument_list|)
init|)
block|{
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|prototype
init|=
name|queryParser
argument_list|(
name|query
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getBuilderPrototype
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|QB
name|secondQuery
init|=
operator|(
name|QB
operator|)
name|prototype
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
name|secondQuery
return|;
block|}
block|}
block|}
comment|/**      * @return a new {@link QueryShardContext} based on the base test index and queryParserService      */
DECL|method|createShardContext
specifier|protected
specifier|static
name|QueryShardContext
name|createShardContext
parameter_list|()
block|{
name|QueryShardContext
name|queryCreationContext
init|=
operator|new
name|QueryShardContext
argument_list|(
name|queryParserService
argument_list|)
decl_stmt|;
name|queryCreationContext
operator|.
name|reset
argument_list|()
expr_stmt|;
name|queryCreationContext
operator|.
name|parseFieldMatcher
argument_list|(
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
return|return
name|queryCreationContext
return|;
block|}
comment|/**      * @return a new {@link QueryParseContext} based on the base test index and queryParserService      */
DECL|method|createParseContext
specifier|protected
specifier|static
name|QueryParseContext
name|createParseContext
parameter_list|()
block|{
name|QueryParseContext
name|queryParseContext
init|=
operator|new
name|QueryParseContext
argument_list|(
name|queryParserService
operator|.
name|indicesQueriesRegistry
argument_list|()
argument_list|)
decl_stmt|;
name|queryParseContext
operator|.
name|reset
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|queryParseContext
operator|.
name|parseFieldMatcher
argument_list|(
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
return|return
name|queryParseContext
return|;
block|}
comment|/**      * create a random value for either {@link AbstractQueryTestCase#BOOLEAN_FIELD_NAME}, {@link AbstractQueryTestCase#INT_FIELD_NAME},      * {@link AbstractQueryTestCase#DOUBLE_FIELD_NAME}, {@link AbstractQueryTestCase#STRING_FIELD_NAME} or      * {@link AbstractQueryTestCase#DATE_FIELD_NAME}, or a String value by default      */
DECL|method|getRandomValueForFieldName
specifier|protected
specifier|static
name|Object
name|getRandomValueForFieldName
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Object
name|value
decl_stmt|;
switch|switch
condition|(
name|fieldName
condition|)
block|{
case|case
name|STRING_FIELD_NAME
case|:
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
comment|// unicode in 10% cases
name|JsonStringEncoder
name|encoder
init|=
name|JsonStringEncoder
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|value
operator|=
operator|new
name|String
argument_list|(
name|encoder
operator|.
name|quoteAsString
argument_list|(
name|randomUnicodeOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INT_FIELD_NAME
case|:
name|value
operator|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE_FIELD_NAME
case|:
name|value
operator|=
name|randomDouble
argument_list|()
operator|*
literal|10
expr_stmt|;
break|break;
case|case
name|BOOLEAN_FIELD_NAME
case|:
name|value
operator|=
name|randomBoolean
argument_list|()
expr_stmt|;
break|break;
case|case
name|DATE_FIELD_NAME
case|:
name|value
operator|=
operator|new
name|DateTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
default|default:
name|value
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
DECL|method|getRandomQueryText
specifier|protected
specifier|static
name|String
name|getRandomQueryText
parameter_list|()
block|{
name|int
name|terms
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/**      * Helper method to return a mapped or a random field      */
DECL|method|getRandomFieldName
specifier|protected
name|String
name|getRandomFieldName
parameter_list|()
block|{
comment|// if no type is set then return a random field name
if|if
condition|(
name|currentTypes
operator|==
literal|null
operator|||
name|currentTypes
operator|.
name|length
operator|==
literal|0
operator|||
name|randomBoolean
argument_list|()
condition|)
block|{
return|return
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
return|;
block|}
return|return
name|randomFrom
argument_list|(
name|MAPPED_LEAF_FIELD_NAMES
argument_list|)
return|;
block|}
comment|/**      * Helper method to return a random field (mapped or unmapped) and a value      */
DECL|method|getRandomFieldNameAndValue
specifier|protected
name|Tuple
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getRandomFieldNameAndValue
parameter_list|()
block|{
name|String
name|fieldName
init|=
name|getRandomFieldName
argument_list|()
decl_stmt|;
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|fieldName
argument_list|,
name|getRandomValueForFieldName
argument_list|(
name|fieldName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Helper method to return a random rewrite method      */
DECL|method|getRandomRewriteMethod
specifier|protected
specifier|static
name|String
name|getRandomRewriteMethod
parameter_list|()
block|{
name|String
name|rewrite
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|rewrite
operator|=
name|randomFrom
argument_list|(
name|QueryParsers
operator|.
name|CONSTANT_SCORE
argument_list|,
name|QueryParsers
operator|.
name|SCORING_BOOLEAN
argument_list|,
name|QueryParsers
operator|.
name|CONSTANT_SCORE_BOOLEAN
argument_list|)
operator|.
name|getPreferredName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rewrite
operator|=
name|randomFrom
argument_list|(
name|QueryParsers
operator|.
name|TOP_TERMS
argument_list|,
name|QueryParsers
operator|.
name|TOP_TERMS_BOOST
argument_list|,
name|QueryParsers
operator|.
name|TOP_TERMS_BLENDED_FREQS
argument_list|)
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"1"
expr_stmt|;
block|}
return|return
name|rewrite
return|;
block|}
DECL|method|getRandomTypes
specifier|protected
name|String
index|[]
name|getRandomTypes
parameter_list|()
block|{
name|String
index|[]
name|types
decl_stmt|;
if|if
condition|(
name|currentTypes
operator|.
name|length
operator|>
literal|0
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|numberOfQueryTypes
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|currentTypes
operator|.
name|length
argument_list|)
decl_stmt|;
name|types
operator|=
operator|new
name|String
index|[
name|numberOfQueryTypes
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfQueryTypes
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
name|randomFrom
argument_list|(
name|currentTypes
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|types
operator|=
operator|new
name|String
index|[]
block|{
name|MetaData
operator|.
name|ALL
block|}
expr_stmt|;
block|}
else|else
block|{
name|types
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
return|return
name|types
return|;
block|}
DECL|method|getRandomType
specifier|protected
name|String
name|getRandomType
parameter_list|()
block|{
return|return
operator|(
name|currentTypes
operator|.
name|length
operator|==
literal|0
operator|)
condition|?
name|MetaData
operator|.
name|ALL
else|:
name|randomFrom
argument_list|(
name|currentTypes
argument_list|)
return|;
block|}
DECL|method|randomGeohash
specifier|public
specifier|static
name|String
name|randomGeohash
parameter_list|(
name|int
name|minPrecision
parameter_list|,
name|int
name|maxPrecision
parameter_list|)
block|{
return|return
name|geohashGenerator
operator|.
name|ofStringLength
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|minPrecision
argument_list|,
name|maxPrecision
argument_list|)
return|;
block|}
DECL|class|GeohashGenerator
specifier|public
specifier|static
class|class
name|GeohashGenerator
extends|extends
name|CodepointSetGenerator
block|{
DECL|field|ASCII_SET
specifier|private
specifier|final
specifier|static
name|char
index|[]
name|ASCII_SET
init|=
literal|"0123456789bcdefghjkmnpqrstuvwxyz"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
DECL|method|GeohashGenerator
specifier|public
name|GeohashGenerator
parameter_list|()
block|{
name|super
argument_list|(
name|ASCII_SET
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomFuzziness
specifier|protected
specifier|static
name|Fuzziness
name|randomFuzziness
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
return|return
name|Fuzziness
operator|.
name|fromEdits
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
return|return
name|Fuzziness
operator|.
name|AUTO
return|;
block|}
switch|switch
condition|(
name|fieldName
condition|)
block|{
case|case
name|INT_FIELD_NAME
case|:
return|return
name|Fuzziness
operator|.
name|build
argument_list|(
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|100
argument_list|)
argument_list|)
return|;
case|case
name|DOUBLE_FIELD_NAME
case|:
return|return
name|Fuzziness
operator|.
name|build
argument_list|(
literal|1
operator|+
name|randomFloat
argument_list|()
operator|*
literal|10
argument_list|)
return|;
case|case
name|DATE_FIELD_NAME
case|:
return|return
name|Fuzziness
operator|.
name|build
argument_list|(
name|randomTimeValue
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|Fuzziness
operator|.
name|AUTO
return|;
block|}
block|}
DECL|method|isNumericFieldName
specifier|protected
specifier|static
name|boolean
name|isNumericFieldName
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|INT_FIELD_NAME
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
name|DOUBLE_FIELD_NAME
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
DECL|method|randomAnalyzer
specifier|protected
specifier|static
name|String
name|randomAnalyzer
parameter_list|()
block|{
return|return
name|randomFrom
argument_list|(
literal|"simple"
argument_list|,
literal|"standard"
argument_list|,
literal|"keyword"
argument_list|,
literal|"whitespace"
argument_list|)
return|;
block|}
DECL|method|randomMinimumShouldMatch
specifier|protected
specifier|static
name|String
name|randomMinimumShouldMatch
parameter_list|()
block|{
return|return
name|randomFrom
argument_list|(
literal|"1"
argument_list|,
literal|"-1"
argument_list|,
literal|"75%"
argument_list|,
literal|"-25%"
argument_list|,
literal|"2<75%"
argument_list|,
literal|"2<-25%"
argument_list|)
return|;
block|}
DECL|method|randomTimeZone
specifier|protected
specifier|static
name|String
name|randomTimeZone
parameter_list|()
block|{
return|return
name|randomFrom
argument_list|(
name|TIMEZONE_IDS
argument_list|)
return|;
block|}
DECL|field|TIMEZONE_IDS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|TIMEZONE_IDS
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|DateTimeZone
operator|.
name|getAvailableIDs
argument_list|()
argument_list|)
decl_stmt|;
DECL|class|ClientInvocationHandler
specifier|private
specifier|static
class|class
name|ClientInvocationHandler
implements|implements
name|InvocationHandler
block|{
DECL|field|delegate
name|AbstractQueryTestCase
name|delegate
decl_stmt|;
annotation|@
name|Override
DECL|method|invoke
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
name|Client
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"get"
argument_list|,
name|GetRequest
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|new
name|PlainActionFuture
argument_list|<
name|GetResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|GetResponse
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
return|return
name|delegate
operator|.
name|executeGet
argument_list|(
operator|(
name|GetRequest
operator|)
name|args
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
name|Client
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"multiTermVectors"
argument_list|,
name|MultiTermVectorsRequest
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|new
name|PlainActionFuture
argument_list|<
name|MultiTermVectorsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MultiTermVectorsResponse
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
return|return
name|delegate
operator|.
name|executeMultiTermVectors
argument_list|(
operator|(
name|MultiTermVectorsRequest
operator|)
name|args
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"toString"
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|"MockClient"
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"this test can't handle calls to: "
operator|+
name|method
argument_list|)
throw|;
block|}
block|}
comment|/**      * Override this to handle {@link Client#get(GetRequest)} calls from parsers / builders      */
DECL|method|executeGet
specifier|protected
name|GetResponse
name|executeGet
parameter_list|(
name|GetRequest
name|getRequest
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"this test can't handle GET requests"
argument_list|)
throw|;
block|}
comment|/**      * Override this to handle {@link Client#get(GetRequest)} calls from parsers / builders      */
DECL|method|executeMultiTermVectors
specifier|protected
name|MultiTermVectorsResponse
name|executeMultiTermVectors
parameter_list|(
name|MultiTermVectorsRequest
name|mtvRequest
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"this test can't handle MultiTermVector requests"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

