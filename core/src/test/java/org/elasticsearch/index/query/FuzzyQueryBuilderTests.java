begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|AbstractQueryTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_class
DECL|class|FuzzyQueryBuilderTests
specifier|public
class|class
name|FuzzyQueryBuilderTests
extends|extends
name|AbstractQueryTestCase
argument_list|<
name|FuzzyQueryBuilder
argument_list|>
block|{
annotation|@
name|Override
DECL|method|doCreateTestQueryBuilder
specifier|protected
name|FuzzyQueryBuilder
name|doCreateTestQueryBuilder
parameter_list|()
block|{
name|FuzzyQueryBuilder
name|query
init|=
operator|new
name|FuzzyQueryBuilder
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
name|getRandomValueForFieldName
argument_list|(
name|STRING_FIELD_NAME
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|query
operator|.
name|fuzziness
argument_list|(
name|randomFuzziness
argument_list|(
name|query
operator|.
name|fieldName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|query
operator|.
name|prefixLength
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|query
operator|.
name|maxExpansions
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|query
operator|.
name|transpositions
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|query
operator|.
name|rewrite
argument_list|(
name|getRandomRewriteMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
annotation|@
name|Override
DECL|method|getAlternateVersions
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|FuzzyQueryBuilder
argument_list|>
name|getAlternateVersions
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|FuzzyQueryBuilder
argument_list|>
name|alternateVersions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|FuzzyQueryBuilder
name|fuzzyQuery
init|=
operator|new
name|FuzzyQueryBuilder
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|contentString
init|=
literal|"{\n"
operator|+
literal|"    \"fuzzy\" : {\n"
operator|+
literal|"        \""
operator|+
name|fuzzyQuery
operator|.
name|fieldName
argument_list|()
operator|+
literal|"\" : \""
operator|+
name|fuzzyQuery
operator|.
name|value
argument_list|()
operator|+
literal|"\"\n"
operator|+
literal|"    }\n"
operator|+
literal|"}"
decl_stmt|;
name|alternateVersions
operator|.
name|put
argument_list|(
name|contentString
argument_list|,
name|fuzzyQuery
argument_list|)
expr_stmt|;
return|return
name|alternateVersions
return|;
block|}
annotation|@
name|Override
DECL|method|doAssertLuceneQuery
specifier|protected
name|void
name|doAssertLuceneQuery
parameter_list|(
name|FuzzyQueryBuilder
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|SearchContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIllegalArguments
specifier|public
name|void
name|testIllegalArguments
parameter_list|()
block|{
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|FuzzyQueryBuilder
argument_list|(
literal|null
argument_list|,
literal|"text"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"field name cannot be null or empty"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|FuzzyQueryBuilder
argument_list|(
literal|""
argument_list|,
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field name cannot be null or empty"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|FuzzyQueryBuilder
argument_list|(
literal|"field"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"query value cannot be null"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnsupportedFuzzinessForStringType
specifier|public
name|void
name|testUnsupportedFuzzinessForStringType
parameter_list|()
throws|throws
name|IOException
block|{
name|QueryShardContext
name|context
init|=
name|createShardContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setAllowUnmappedFields
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FuzzyQueryBuilder
name|fuzzyQueryBuilder
init|=
operator|new
name|FuzzyQueryBuilder
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"text"
argument_list|)
decl_stmt|;
name|fuzzyQueryBuilder
operator|.
name|fuzziness
argument_list|(
name|Fuzziness
operator|.
name|build
argument_list|(
name|randomFrom
argument_list|(
literal|"a string which is not auto"
argument_list|,
literal|"3h"
argument_list|,
literal|"200s"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|NumberFormatException
name|e
init|=
name|expectThrows
argument_list|(
name|NumberFormatException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|fuzzyQueryBuilder
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"For input string"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQueryWithStringField
specifier|public
name|void
name|testToQueryWithStringField
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"{\n"
operator|+
literal|"    \"fuzzy\":{\n"
operator|+
literal|"        \""
operator|+
name|STRING_FIELD_NAME
operator|+
literal|"\":{\n"
operator|+
literal|"            \"value\":\"sh\",\n"
operator|+
literal|"            \"fuzziness\": \"AUTO\",\n"
operator|+
literal|"            \"prefix_length\":1,\n"
operator|+
literal|"            \"boost\":2.0\n"
operator|+
literal|"        }\n"
operator|+
literal|"    }\n"
operator|+
literal|"}"
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|parseQuery
argument_list|(
name|query
argument_list|)
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BoostQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BoostQuery
name|boostQuery
init|=
operator|(
name|BoostQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|boostQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|boostQuery
operator|.
name|getQuery
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FuzzyQuery
name|fuzzyQuery
init|=
operator|(
name|FuzzyQuery
operator|)
name|boostQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
name|STRING_FIELD_NAME
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getMaxEdits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Fuzziness
operator|.
name|AUTO
operator|.
name|asDistance
argument_list|(
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getPrefixLength
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToQueryWithNumericField
specifier|public
name|void
name|testToQueryWithNumericField
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"test runs only when at least a type is registered"
argument_list|,
name|getCurrentTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"{\n"
operator|+
literal|"    \"fuzzy\":{\n"
operator|+
literal|"        \""
operator|+
name|INT_FIELD_NAME
operator|+
literal|"\":{\n"
operator|+
literal|"            \"value\":12,\n"
operator|+
literal|"            \"fuzziness\":5\n"
operator|+
literal|"        }\n"
operator|+
literal|"    }\n"
operator|+
literal|"}\n"
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parseQuery
argument_list|(
name|query
argument_list|)
operator|.
name|toQuery
argument_list|(
name|createShardContext
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Can only use fuzzy queries on keyword and text fields - not on [mapped_int] which is of type [integer]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromJson
specifier|public
name|void
name|testFromJson
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|json
init|=
literal|"{\n"
operator|+
literal|"  \"fuzzy\" : {\n"
operator|+
literal|"    \"user\" : {\n"
operator|+
literal|"      \"value\" : \"ki\",\n"
operator|+
literal|"      \"fuzziness\" : \"2\",\n"
operator|+
literal|"      \"prefix_length\" : 0,\n"
operator|+
literal|"      \"max_expansions\" : 100,\n"
operator|+
literal|"      \"transpositions\" : false,\n"
operator|+
literal|"      \"boost\" : 42.0\n"
operator|+
literal|"    }\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
name|FuzzyQueryBuilder
name|parsed
init|=
operator|(
name|FuzzyQueryBuilder
operator|)
name|parseQuery
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|checkGeneratedJson
argument_list|(
name|json
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
literal|42.0
argument_list|,
name|parsed
operator|.
name|boost
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|json
argument_list|,
literal|2
argument_list|,
name|parsed
operator|.
name|fuzziness
argument_list|()
operator|.
name|asFloat
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseFailsWithMultipleFields
specifier|public
name|void
name|testParseFailsWithMultipleFields
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|json1
init|=
literal|"{\n"
operator|+
literal|"  \"fuzzy\" : {\n"
operator|+
literal|"    \"message1\" : {\n"
operator|+
literal|"      \"value\" : \"this is a test\"\n"
operator|+
literal|"    }\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
name|parseQuery
argument_list|(
name|json1
argument_list|)
expr_stmt|;
comment|// should be all good
name|String
name|json2
init|=
literal|"{\n"
operator|+
literal|"  \"fuzzy\" : {\n"
operator|+
literal|"    \"message1\" : {\n"
operator|+
literal|"      \"value\" : \"this is a test\"\n"
operator|+
literal|"    },\n"
operator|+
literal|"    \"message2\" : {\n"
operator|+
literal|"      \"value\" : \"this is a test\"\n"
operator|+
literal|"    }\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
name|ParsingException
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parseQuery
argument_list|(
name|json2
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[fuzzy] query doesn't support multiple fields, found [message1] and [message2]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|shortJson
init|=
literal|"{\n"
operator|+
literal|"  \"fuzzy\" : {\n"
operator|+
literal|"    \"message1\" : \"this is a test\",\n"
operator|+
literal|"    \"message2\" : \"value\" : \"this is a test\"\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parseQuery
argument_list|(
name|shortJson
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[fuzzy] query doesn't support multiple fields, found [message1] and [message2]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

