begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|memory
operator|.
name|MemoryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|BoostingQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|ExtendedCommonTermsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|TermsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ToParentBlockJoinQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|IntersectsPrefixTreeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|TooComplexToDeterminizeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|MoreLikeThisQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|BoostScoreFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FunctionScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|WeightFactorFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|DistanceUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParsedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|NumberFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
operator|.
name|GeoDistanceRangeQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
operator|.
name|GeoPolygonQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
operator|.
name|InMemoryGeoBoundingBoxQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|morelikethis
operator|.
name|MoreLikeThisFetchService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|StreamsUtils
operator|.
name|copyToBytesFromClasspath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|StreamsUtils
operator|.
name|copyToStringFromClasspath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertBooleanSubQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
DECL|class|SimpleIndexQueryParserTests
specifier|public
class|class
name|SimpleIndexQueryParserTests
extends|extends
name|ESSingleNodeTestCase
block|{
DECL|field|queryParser
specifier|private
name|IndexQueryParserService
name|queryParser
decl_stmt|;
DECL|field|indexService
specifier|private
name|IndexService
name|indexService
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.cache.filter.type"
argument_list|,
literal|"none"
argument_list|)
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"SimpleIndexQueryParserTests"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|MapperService
name|mapperService
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
decl_stmt|;
name|String
name|mapping
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/mapping.json"
argument_list|)
decl_stmt|;
name|mapperService
operator|.
name|merge
argument_list|(
literal|"person"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|mapperService
operator|.
name|documentMapper
argument_list|(
literal|"person"
argument_list|)
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"person"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|BytesArray
argument_list|(
name|copyToBytesFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/data.json"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
operator|.
name|dynamicMappingsUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"person"
argument_list|)
operator|.
name|setSource
argument_list|(
name|doc
operator|.
name|dynamicMappingsUpdate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexService
operator|=
name|indexService
expr_stmt|;
name|queryParser
operator|=
name|indexService
operator|.
name|queryParserService
argument_list|()
expr_stmt|;
block|}
DECL|method|queryParser
specifier|private
name|IndexQueryParserService
name|queryParser
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|queryParser
return|;
block|}
DECL|method|longToPrefixCoded
specifier|private
name|BytesRef
name|longToPrefixCoded
parameter_list|(
name|long
name|val
parameter_list|,
name|int
name|shift
parameter_list|)
block|{
name|BytesRefBuilder
name|bytesRef
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|val
argument_list|,
name|shift
argument_list|,
name|bytesRef
argument_list|)
expr_stmt|;
return|return
name|bytesRef
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringBuilder
specifier|public
name|void
name|testQueryStringBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|queryStringQuery
argument_list|(
literal|"test"
argument_list|)
operator|.
name|defaultField
argument_list|(
literal|"content"
argument_list|)
operator|.
name|phraseSlop
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermQuery
name|termQuery
init|=
operator|(
name|TermQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryString
specifier|public
name|void
name|testQueryString
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/query.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermQuery
name|termQuery
init|=
operator|(
name|TermQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringBoostsBuilder
specifier|public
name|void
name|testQueryStringBoostsBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|QueryStringQueryBuilder
name|builder
init|=
name|queryStringQuery
argument_list|(
literal|"field:boosted^2"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|builder
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|parsedQuery
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"boosted"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|boost
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|parsedQuery
operator|=
name|queryParser
operator|.
name|parse
argument_list|(
name|builder
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4.0f
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|queryStringQuery
argument_list|(
literal|"((field:boosted^2) AND (field:foo^1.5))^3"
argument_list|)
expr_stmt|;
name|parsedQuery
operator|=
name|queryParser
operator|.
name|parse
argument_list|(
name|builder
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|0
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"boosted"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|0
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|1
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|1
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3.0f
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|boost
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|parsedQuery
operator|=
name|queryParser
operator|.
name|parse
argument_list|(
name|builder
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringFields1Builder
specifier|public
name|void
name|testQueryStringFields1Builder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|queryStringQuery
argument_list|(
literal|"test"
argument_list|)
operator|.
name|field
argument_list|(
literal|"content"
argument_list|)
operator|.
name|field
argument_list|(
literal|"name"
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|bQuery
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|0
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|1
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringFields1
specifier|public
name|void
name|testQueryStringFields1
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/query-fields1.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|bQuery
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|0
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|1
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringFieldsMatch
specifier|public
name|void
name|testQueryStringFieldsMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/query-fields-match.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|bQuery
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"test"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|0
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|1
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringFields2Builder
specifier|public
name|void
name|testQueryStringFields2Builder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|queryStringQuery
argument_list|(
literal|"test"
argument_list|)
operator|.
name|field
argument_list|(
literal|"content"
argument_list|)
operator|.
name|field
argument_list|(
literal|"name"
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|disMaxQuery
operator|.
name|getDisjuncts
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringFields2
specifier|public
name|void
name|testQueryStringFields2
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/query-fields2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|disMaxQuery
operator|.
name|getDisjuncts
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringFields3Builder
specifier|public
name|void
name|testQueryStringFields3Builder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|queryStringQuery
argument_list|(
literal|"test"
argument_list|)
operator|.
name|field
argument_list|(
literal|"content"
argument_list|,
literal|2.2f
argument_list|)
operator|.
name|field
argument_list|(
literal|"name"
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|disMaxQuery
operator|.
name|getDisjuncts
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.2
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringFields3
specifier|public
name|void
name|testQueryStringFields3
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/query-fields3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|disMaxQuery
operator|.
name|getDisjuncts
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.2
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringTimezone
specifier|public
name|void
name|testQueryStringTimezone
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/query-timezone.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|TermRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/query-timezone-incorrect.json"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"we expect a QueryParsingException as we are providing an unknown time_zome"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
comment|// We expect this one
block|}
block|}
annotation|@
name|Test
DECL|method|testQueryStringRegexp
specifier|public
name|void
name|testQueryStringRegexp
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/query-regexp-max-determinized-states.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|RegexpQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|RegexpQuery
name|regexpQuery
init|=
operator|(
name|RegexpQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertTrue
argument_list|(
name|regexpQuery
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"/foo*bar/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringRegexpTooManyDeterminizedStates
specifier|public
name|void
name|testQueryStringRegexpTooManyDeterminizedStates
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/query-regexp-too-many-determinized-states.json"
argument_list|)
decl_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|qpe
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|qpe
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TooComplexToDeterminizeException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMatchAllBuilder
specifier|public
name|void
name|testMatchAllBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|matchAllQuery
argument_list|()
operator|.
name|boost
argument_list|(
literal|1.2f
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MatchAllDocsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MatchAllDocsQuery
name|matchAllDocsQuery
init|=
operator|(
name|MatchAllDocsQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|matchAllDocsQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMatchAll
specifier|public
name|void
name|testMatchAll
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/matchAll.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MatchAllDocsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MatchAllDocsQuery
name|matchAllDocsQuery
init|=
operator|(
name|MatchAllDocsQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|matchAllDocsQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMatchAllEmpty1
specifier|public
name|void
name|testMatchAllEmpty1
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/match_all_empty1.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|equalTo
argument_list|(
name|Queries
operator|.
name|newMatchAllQuery
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|not
argument_list|(
name|sameInstance
argument_list|(
name|Queries
operator|.
name|newMatchAllQuery
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMatchAllEmpty2
specifier|public
name|void
name|testMatchAllEmpty2
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/match_all_empty2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|equalTo
argument_list|(
name|Queries
operator|.
name|newMatchAllQuery
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|not
argument_list|(
name|sameInstance
argument_list|(
name|Queries
operator|.
name|newMatchAllQuery
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStarColonStar
specifier|public
name|void
name|testStarColonStar
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/starColonStar.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MatchAllDocsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisMaxBuilder
specifier|public
name|void
name|testDisMaxBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|disMaxQuery
argument_list|()
operator|.
name|boost
argument_list|(
literal|1.2f
argument_list|)
operator|.
name|tieBreaker
argument_list|(
literal|0.7f
argument_list|)
operator|.
name|add
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"first"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|termQuery
argument_list|(
literal|"name.last"
argument_list|,
literal|"last"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disjunctionMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|disjunctionMaxQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|disjunctionMaxQuery
operator|.
name|getDisjuncts
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|disjuncts
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|firstQ
init|=
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|firstQ
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|firstQ
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"first"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|secondsQ
init|=
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|secondsQ
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|secondsQ
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"last"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisMax
specifier|public
name|void
name|testDisMax
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/disMax.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disjunctionMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|disjunctionMaxQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|disjunctionMaxQuery
operator|.
name|getDisjuncts
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|disjuncts
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|firstQ
init|=
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|firstQ
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|firstQ
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"first"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|secondsQ
init|=
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|secondsQ
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|secondsQ
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"last"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisMax2
specifier|public
name|void
name|testDisMax2
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/disMax2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disjunctionMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|disjunctionMaxQuery
operator|.
name|getDisjuncts
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|disjuncts
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|firstQ
init|=
operator|(
name|PrefixQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|firstQ
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|firstQ
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermQueryBuilder
specifier|public
name|void
name|testTermQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|termQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
operator|.
name|buildAsBytes
argument_list|()
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|TermQuery
name|fieldQuery
init|=
name|unwrapTermQuery
argument_list|(
name|parsedQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indexedValueForSearch
argument_list|(
literal|34l
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermQuery
specifier|public
name|void
name|testTermQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/term.json"
argument_list|)
decl_stmt|;
name|TermQuery
name|fieldQuery
init|=
name|unwrapTermQuery
argument_list|(
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indexedValueForSearch
argument_list|(
literal|34l
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|QueryParsingException
operator|.
name|class
argument_list|)
DECL|method|testTermQueryArrayInvalid
specifier|public
name|void
name|testTermQueryArrayInvalid
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/term-array-invalid.json"
argument_list|)
decl_stmt|;
name|unwrapTermQuery
argument_list|(
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|unwrapTermQuery
specifier|private
specifier|static
name|TermQuery
name|unwrapTermQuery
parameter_list|(
name|Query
name|q
parameter_list|)
block|{
name|assertThat
argument_list|(
name|q
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|TermQuery
operator|)
name|q
return|;
block|}
annotation|@
name|Test
DECL|method|testFuzzyQueryBuilder
specifier|public
name|void
name|testFuzzyQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|fuzzyQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
operator|.
name|buildAsBytes
argument_list|()
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FuzzyQuery
name|fuzzyQuery
init|=
operator|(
name|FuzzyQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFuzzyQuery
specifier|public
name|void
name|testFuzzyQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/fuzzy.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FuzzyQuery
name|fuzzyQuery
init|=
operator|(
name|FuzzyQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getRewriteMethod
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|MultiTermQuery
operator|.
name|TopTermsBlendedFreqScoringRewrite
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFuzzyQueryWithFieldsBuilder
specifier|public
name|void
name|testFuzzyQueryWithFieldsBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|fuzzyQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
operator|.
name|fuzziness
argument_list|(
name|Fuzziness
operator|.
name|ONE
argument_list|)
operator|.
name|prefixLength
argument_list|(
literal|1
argument_list|)
operator|.
name|boost
argument_list|(
literal|2.0f
argument_list|)
operator|.
name|buildAsBytes
argument_list|()
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FuzzyQuery
name|fuzzyQuery
init|=
operator|(
name|FuzzyQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getMaxEdits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|FuzzyQuery
operator|.
name|floatToEdits
argument_list|(
literal|0.1f
argument_list|,
literal|"sh"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getPrefixLength
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFuzzyQueryWithFields
specifier|public
name|void
name|testFuzzyQueryWithFields
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/fuzzy-with-fields.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FuzzyQuery
name|fuzzyQuery
init|=
operator|(
name|FuzzyQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getMaxEdits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Fuzziness
operator|.
name|AUTO
operator|.
name|asDistance
argument_list|(
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getPrefixLength
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFuzzyQueryWithFields2
specifier|public
name|void
name|testFuzzyQueryWithFields2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/fuzzy-with-fields2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|fuzzyQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getMin
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|7l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getMax
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|17l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermWithBoostQueryBuilder
specifier|public
name|void
name|testTermWithBoostQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|termQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
operator|.
name|boost
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|TermQuery
name|fieldQuery
init|=
name|unwrapTermQuery
argument_list|(
name|parsedQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indexedValueForSearch
argument_list|(
literal|34l
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|parsedQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.0
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|indexedValueForSearch
specifier|private
name|BytesRef
name|indexedValueForSearch
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|BytesRefBuilder
name|bytesRef
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|bytesRef
argument_list|)
expr_stmt|;
comment|// 0 because of
comment|// exact
comment|// match
return|return
name|bytesRef
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testTermWithBoostQuery
specifier|public
name|void
name|testTermWithBoostQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/term-with-boost.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|TermQuery
name|fieldQuery
init|=
name|unwrapTermQuery
argument_list|(
name|parsedQuery
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getTerm
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indexedValueForSearch
argument_list|(
literal|34l
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|parsedQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.0
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixQueryBuilder
specifier|public
name|void
name|testPrefixQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|prefixQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|PrefixQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|prefixQuery
init|=
operator|(
name|PrefixQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixQuery
specifier|public
name|void
name|testPrefixQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/prefix.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|PrefixQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|prefixQuery
init|=
operator|(
name|PrefixQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixBoostQuery
specifier|public
name|void
name|testPrefixBoostQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/prefix-boost.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|PrefixQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|prefixQuery
init|=
operator|(
name|PrefixQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|prefixQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefiFilteredQueryBuilder
specifier|public
name|void
name|testPrefiFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|,
name|prefixQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefiFilteredQuery
specifier|public
name|void
name|testPrefiFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/prefix-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixNamedFilteredQuery
specifier|public
name|void
name|testPrefixNamedFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/prefix-filter-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixQueryBoostQueryBuilder
specifier|public
name|void
name|testPrefixQueryBoostQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|prefixQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
operator|.
name|boost
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|PrefixQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|prefixQuery
init|=
operator|(
name|PrefixQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|prefixQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.0
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixQueryBoostQuery
specifier|public
name|void
name|testPrefixQueryBoostQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/prefix-with-boost.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|PrefixQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|prefixQuery
init|=
operator|(
name|PrefixQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|prefixQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.0
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixQueryWithUnknownField
specifier|public
name|void
name|testPrefixQueryWithUnknownField
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|prefixQuery
argument_list|(
literal|"unknown"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|PrefixQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|prefixQuery
init|=
operator|(
name|PrefixQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"unknown"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getRewriteMethod
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegexpQueryBuilder
specifier|public
name|void
name|testRegexpQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|regexpQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"s.*y"
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|RegexpQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|RegexpQuery
name|regexpQuery
init|=
operator|(
name|RegexpQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|regexpQuery
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegexpQuery
specifier|public
name|void
name|testRegexpQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/regexp.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|RegexpQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|RegexpQuery
name|regexpQuery
init|=
operator|(
name|RegexpQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|regexpQuery
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegexpQueryWithMaxDeterminizedStates
specifier|public
name|void
name|testRegexpQueryWithMaxDeterminizedStates
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/regexp-max-determinized-states.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|RegexpQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|RegexpQuery
name|regexpQuery
init|=
operator|(
name|RegexpQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|regexpQuery
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegexpFilteredQuery
specifier|public
name|void
name|testRegexpFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/regexp-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"s.*y"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegexpFilteredQueryWithMaxDeterminizedStates
specifier|public
name|void
name|testRegexpFilteredQueryWithMaxDeterminizedStates
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/regexp-filter-max-determinized-states.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"s.*y"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNamedRegexpFilteredQuery
specifier|public
name|void
name|testNamedRegexpFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/regexp-filter-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"s.*y"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegexpWithFlagsFilteredQuery
specifier|public
name|void
name|testRegexpWithFlagsFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/regexp-filter-flags.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"s.*y"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNamedAndCachedRegexpWithFlagsFilteredQuery
specifier|public
name|void
name|testNamedAndCachedRegexpWithFlagsFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/regexp-filter-flags-named-cached.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"s.*y"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegexpBoostQuery
specifier|public
name|void
name|testRegexpBoostQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/regexp-boost.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|RegexpQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|RegexpQuery
name|regexpQuery
init|=
operator|(
name|RegexpQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|regexpQuery
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1.2f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWildcardQueryBuilder
specifier|public
name|void
name|testWildcardQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|wildcardQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh*"
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|WildcardQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|WildcardQuery
name|wildcardQuery
init|=
operator|(
name|WildcardQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wildcardQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWildcardQuery
specifier|public
name|void
name|testWildcardQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/wildcard.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|WildcardQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|WildcardQuery
name|wildcardQuery
init|=
operator|(
name|WildcardQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wildcardQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWildcardBoostQuery
specifier|public
name|void
name|testWildcardBoostQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/wildcard-boost.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|WildcardQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|WildcardQuery
name|wildcardQuery
init|=
operator|(
name|WildcardQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wildcardQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|wildcardQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRangeQueryBuilder
specifier|public
name|void
name|testRangeQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|rangeQuery
argument_list|(
literal|"age"
argument_list|)
operator|.
name|from
argument_list|(
literal|23
argument_list|)
operator|.
name|to
argument_list|(
literal|54
argument_list|)
operator|.
name|includeLower
argument_list|(
literal|true
argument_list|)
operator|.
name|includeUpper
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|rangeQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRangeQuery
specifier|public
name|void
name|testRangeQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/range.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|rangeQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRange2Query
specifier|public
name|void
name|testRange2Query
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/range2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|rangeQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRangeFilteredQueryBuilder
specifier|public
name|void
name|testRangeFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|,
name|rangeQuery
argument_list|(
literal|"age"
argument_list|)
operator|.
name|from
argument_list|(
literal|23
argument_list|)
operator|.
name|to
argument_list|(
literal|54
argument_list|)
operator|.
name|includeLower
argument_list|(
literal|true
argument_list|)
operator|.
name|includeUpper
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"age"
argument_list|,
literal|23L
argument_list|,
literal|54L
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRangeFilteredQuery
specifier|public
name|void
name|testRangeFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/range-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"age"
argument_list|,
literal|23L
argument_list|,
literal|54L
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRangeNamedFilteredQuery
specifier|public
name|void
name|testRangeNamedFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/range-filter-named.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"age"
argument_list|,
literal|23L
argument_list|,
literal|54L
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoolFilteredQueryBuilder
specifier|public
name|void
name|testBoolFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|,
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
operator|.
name|mustNot
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay2"
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay3"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|BooleanQuery
name|filter
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|filter
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|filter
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|filter
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay2"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|filter
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay3"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoolFilteredQuery
specifier|public
name|void
name|testBoolFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/bool-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|BooleanQuery
name|filter
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|filter
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|filter
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|filter
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay2"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|filter
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay3"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAndFilteredQueryBuilder
specifier|public
name|void
name|testAndFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|andQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|,
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|BooleanQuery
name|and
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|and
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|and
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|expected
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
name|and
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAndFilteredQuery
specifier|public
name|void
name|testAndFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/and-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|BooleanQuery
name|and
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|and
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|and
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
name|and
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAndNamedFilteredQuery
specifier|public
name|void
name|testAndNamedFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/and-filter-named.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|BooleanQuery
name|and
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|and
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|and
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
name|and
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAndFilteredQuery2
specifier|public
name|void
name|testAndFilteredQuery2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/and-filter2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|BooleanQuery
name|and
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|and
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|and
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
name|and
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOrFilteredQueryBuilder
specifier|public
name|void
name|testOrFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|orQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|,
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|BooleanQuery
name|or
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|or
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|or
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|expected
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
name|or
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOrFilteredQuery
specifier|public
name|void
name|testOrFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/or-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|BooleanQuery
name|or
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|or
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|or
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
name|or
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOrFilteredQuery2
specifier|public
name|void
name|testOrFilteredQuery2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/or-filter2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|BooleanQuery
name|or
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|or
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|or
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
name|or
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNotFilteredQueryBuilder
specifier|public
name|void
name|testNotFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|notQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|ConstantScoreQuery
name|expected
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
name|Queries
operator|.
name|not
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNotFilteredQuery
specifier|public
name|void
name|testNotFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/not-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
name|Queries
operator|.
name|not
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNotFilteredQuery2
specifier|public
name|void
name|testNotFilteredQuery2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/not-filter2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
name|Queries
operator|.
name|not
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNotFilteredQuery3
specifier|public
name|void
name|testNotFilteredQuery3
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/not-filter3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
name|Queries
operator|.
name|not
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoostingQueryBuilder
specifier|public
name|void
name|testBoostingQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|boostingQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
operator|.
name|negativeBoost
argument_list|(
literal|0.2f
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BoostingQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoostingQuery
specifier|public
name|void
name|testBoostingQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/boosting-query.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BoostingQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringFuzzyNumeric
specifier|public
name|void
name|testQueryStringFuzzyNumeric
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/query2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|fuzzyQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getMin
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getMax
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoolQueryBuilder
specifier|public
name|void
name|testBoolQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|termQuery
argument_list|(
literal|"content"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|termQuery
argument_list|(
literal|"content"
argument_list|,
literal|"test4"
argument_list|)
argument_list|)
operator|.
name|mustNot
argument_list|(
name|termQuery
argument_list|(
literal|"content"
argument_list|,
literal|"test2"
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|termQuery
argument_list|(
literal|"content"
argument_list|,
literal|"test3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|BooleanClause
index|[]
name|clauses
init|=
name|booleanQuery
operator|.
name|getClauses
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clauses
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|1
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|2
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|2
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|3
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|3
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoolQuery
specifier|public
name|void
name|testBoolQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/bool.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|BooleanClause
index|[]
name|clauses
init|=
name|booleanQuery
operator|.
name|getClauses
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clauses
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|1
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|2
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|2
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|3
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|3
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermsQueryBuilder
specifier|public
name|void
name|testTermsQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|termsQuery
argument_list|(
literal|"name.first"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"shay"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|BooleanClause
index|[]
name|clauses
init|=
name|booleanQuery
operator|.
name|getClauses
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clauses
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|1
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermsQuery
specifier|public
name|void
name|testTermsQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/terms-query.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|BooleanClause
index|[]
name|clauses
init|=
name|booleanQuery
operator|.
name|getClauses
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clauses
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|1
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"terms query disable_coord disabled by default"
argument_list|,
name|booleanQuery
operator|.
name|isCoordDisabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermsQueryOptions
specifier|public
name|void
name|testTermsQueryOptions
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/terms-query-options.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|BooleanClause
index|[]
name|clauses
init|=
name|booleanQuery
operator|.
name|getClauses
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clauses
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|1
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|2
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"elasticsearch"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|2
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"terms query disable_coord option mismatch"
argument_list|,
name|booleanQuery
operator|.
name|isCoordDisabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|booleanQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|booleanQuery
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermsQueryWithMultipleFields
specifier|public
name|void
name|testTermsQueryWithMultipleFields
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|array
argument_list|(
literal|"foo"
argument_list|,
literal|123
argument_list|)
operator|.
name|array
argument_list|(
literal|"bar"
argument_list|,
literal|456
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[terms] query does not support multiple fields"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTermsFilterWithMultipleFields
specifier|public
name|void
name|testTermsFilterWithMultipleFields
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"filtered"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"query"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"match_all"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"filter"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|array
argument_list|(
literal|"foo"
argument_list|,
literal|123
argument_list|)
operator|.
name|array
argument_list|(
literal|"bar"
argument_list|,
literal|456
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[terms] query does not support multiple fields"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInQuery
specifier|public
name|void
name|testInQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|termsQuery
argument_list|(
literal|"name.first"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|BooleanClause
index|[]
name|clauses
init|=
name|booleanQuery
operator|.
name|getClauses
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clauses
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"test2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|1
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|2
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"test3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|2
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilteredQueryBuilder
specifier|public
name|void
name|testFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|,
name|termQuery
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilteredQuery
specifier|public
name|void
name|testFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/filtered-query.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilteredQuery2
specifier|public
name|void
name|testFilteredQuery2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/filtered-query2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilteredQuery3
specifier|public
name|void
name|testFilteredQuery3
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/filtered-query3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"age"
argument_list|,
literal|23L
argument_list|,
literal|54L
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilteredQuery4
specifier|public
name|void
name|testFilteredQuery4
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/filtered-query4.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expectedQuery
init|=
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh*"
argument_list|)
argument_list|)
decl_stmt|;
name|expectedQuery
operator|.
name|setBoost
argument_list|(
literal|1.1f
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
name|expectedQuery
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermFilterQuery
specifier|public
name|void
name|testTermFilterQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/term-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermNamedFilterQuery
specifier|public
name|void
name|testTermNamedFilterQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/term-filter-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermQueryParserShouldOnlyAllowSingleTerm
specifier|public
name|void
name|testTermQueryParserShouldOnlyAllowSingleTerm
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/term-filter-broken-multi-terms.json"
argument_list|)
decl_stmt|;
name|assertQueryParsingFailureDueToMultipleTermsInTermFilter
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermQueryParserShouldOnlyAllowSingleTermInAlternateFormat
specifier|public
name|void
name|testTermQueryParserShouldOnlyAllowSingleTermInAlternateFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/term-filter-broken-multi-terms-2.json"
argument_list|)
decl_stmt|;
name|assertQueryParsingFailureDueToMultipleTermsInTermFilter
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
DECL|method|assertQueryParsingFailureDueToMultipleTermsInTermFilter
specifier|private
name|void
name|assertQueryParsingFailureDueToMultipleTermsInTermFilter
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected Query Parsing Exception but did not happen"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"[term] query does not support different field names, use [bool] query instead"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTermsFilterQueryBuilder
specifier|public
name|void
name|testTermsFilterQueryBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|,
name|termsQuery
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|,
literal|"kimchy"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TermsQuery
argument_list|(
literal|"name.last"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"banon"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"kimchy"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermsFilterQuery
specifier|public
name|void
name|testTermsFilterQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/terms-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TermsQuery
argument_list|(
literal|"name.last"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"banon"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"kimchy"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermsWithNameFilterQuery
specifier|public
name|void
name|testTermsWithNameFilterQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/terms-filter-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TermsQuery
argument_list|(
literal|"name.last"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"banon"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"kimchy"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConstantScoreQueryBuilder
specifier|public
name|void
name|testConstantScoreQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|constantScoreQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|getTerm
argument_list|(
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConstantScoreQuery
specifier|public
name|void
name|testConstantScoreQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/constantScore-query.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|getTerm
argument_list|(
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomWeightFactorQueryBuilder_withFunctionScore
specifier|public
name|void
name|testCustomWeightFactorQueryBuilder_withFunctionScore
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|functionScoreQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|,
name|ScoreFunctionBuilders
operator|.
name|weightFactorFunction
argument_list|(
literal|1.3f
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FunctionScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FunctionScoreQuery
name|functionScoreQuery
init|=
operator|(
name|FunctionScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|functionScoreQuery
operator|.
name|getSubQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
call|(
name|double
call|)
argument_list|(
operator|(
name|WeightFactorFunction
operator|)
name|functionScoreQuery
operator|.
name|getFunction
argument_list|()
argument_list|)
operator|.
name|getWeight
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.3
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomWeightFactorQueryBuilder_withFunctionScoreWithoutQueryGiven
specifier|public
name|void
name|testCustomWeightFactorQueryBuilder_withFunctionScoreWithoutQueryGiven
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|functionScoreQuery
argument_list|(
name|ScoreFunctionBuilders
operator|.
name|weightFactorFunction
argument_list|(
literal|1.3f
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FunctionScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FunctionScoreQuery
name|functionScoreQuery
init|=
operator|(
name|FunctionScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|functionScoreQuery
operator|.
name|getSubQuery
argument_list|()
operator|instanceof
name|MatchAllDocsQuery
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
call|(
name|double
call|)
argument_list|(
operator|(
name|WeightFactorFunction
operator|)
name|functionScoreQuery
operator|.
name|getFunction
argument_list|()
argument_list|)
operator|.
name|getWeight
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.3
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanTermQueryBuilder
specifier|public
name|void
name|testSpanTermQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanTermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanTermQuery
name|termQuery
init|=
operator|(
name|SpanTermQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanTermQuery
specifier|public
name|void
name|testSpanTermQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/spanTerm.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanTermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanTermQuery
name|termQuery
init|=
operator|(
name|SpanTermQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanNotQueryBuilder
specifier|public
name|void
name|testSpanNotQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|spanNotQuery
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
argument_list|,
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|35
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanNotQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNotQuery
name|spanNotQuery
init|=
operator|(
name|SpanNotQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNotQuery
operator|.
name|getInclude
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNotQuery
operator|.
name|getExclude
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanNotQuery
specifier|public
name|void
name|testSpanNotQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/spanNot.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanNotQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNotQuery
name|spanNotQuery
init|=
operator|(
name|SpanNotQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNotQuery
operator|.
name|getInclude
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNotQuery
operator|.
name|getExclude
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanWithinQueryBuilder
specifier|public
name|void
name|testSpanWithinQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|expectedQuery
init|=
operator|new
name|SpanWithinQuery
argument_list|(
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|actualQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|spanWithinQuery
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
argument_list|,
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|35
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedQuery
argument_list|,
name|actualQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanWithinQueryParser
specifier|public
name|void
name|testSpanWithinQueryParser
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|expectedQuery
init|=
operator|new
name|SpanWithinQuery
argument_list|(
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|queryText
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/spanWithin.json"
argument_list|)
decl_stmt|;
name|Query
name|actualQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|queryText
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedQuery
argument_list|,
name|actualQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanContainingQueryBuilder
specifier|public
name|void
name|testSpanContainingQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|expectedQuery
init|=
operator|new
name|SpanContainingQuery
argument_list|(
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|actualQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|spanContainingQuery
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
argument_list|,
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|35
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedQuery
argument_list|,
name|actualQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanContainingQueryParser
specifier|public
name|void
name|testSpanContainingQueryParser
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|expectedQuery
init|=
operator|new
name|SpanContainingQuery
argument_list|(
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|queryText
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/spanContaining.json"
argument_list|)
decl_stmt|;
name|Query
name|actualQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|queryText
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedQuery
argument_list|,
name|actualQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanFirstQueryBuilder
specifier|public
name|void
name|testSpanFirstQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|spanFirstQuery
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
argument_list|,
literal|12
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanFirstQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanFirstQuery
name|spanFirstQuery
init|=
operator|(
name|SpanFirstQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanFirstQuery
operator|.
name|getMatch
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|spanFirstQuery
operator|.
name|getEnd
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanFirstQuery
specifier|public
name|void
name|testSpanFirstQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/spanFirst.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanFirstQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanFirstQuery
name|spanFirstQuery
init|=
operator|(
name|SpanFirstQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanFirstQuery
operator|.
name|getMatch
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|spanFirstQuery
operator|.
name|getEnd
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanNearQueryBuilder
specifier|public
name|void
name|testSpanNearQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|spanNearQuery
argument_list|(
literal|12
argument_list|)
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|35
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|36
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|(
literal|false
argument_list|)
operator|.
name|collectPayloads
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanNearQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNearQuery
name|spanNearQuery
init|=
operator|(
name|SpanNearQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|36
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|spanNearQuery
operator|.
name|isInOrder
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanNearQuery
specifier|public
name|void
name|testSpanNearQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/spanNear.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanNearQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNearQuery
name|spanNearQuery
init|=
operator|(
name|SpanNearQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|36
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|spanNearQuery
operator|.
name|isInOrder
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFieldMaskingSpanQuery
specifier|public
name|void
name|testFieldMaskingSpanQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/spanFieldMaskingTerm.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanNearQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNearQuery
name|spanNearQuery
init|=
operator|(
name|SpanNearQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
call|(
name|SpanTermQuery
call|)
argument_list|(
operator|(
name|FieldMaskingSpanQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|2
index|]
argument_list|)
operator|.
name|getMaskedQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age_1"
argument_list|,
literal|"36"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|spanNearQuery
operator|.
name|isInOrder
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanOrQueryBuilder
specifier|public
name|void
name|testSpanOrQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|spanOrQuery
argument_list|()
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|35
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|36
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanOrQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanOrQuery
name|spanOrQuery
init|=
operator|(
name|SpanOrQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|36
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanOrQuery
specifier|public
name|void
name|testSpanOrQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/spanOr.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanOrQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanOrQuery
name|spanOrQuery
init|=
operator|(
name|SpanOrQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|36
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanOrQuery2
specifier|public
name|void
name|testSpanOrQuery2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/spanOr2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanOrQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanOrQuery
name|spanOrQuery
init|=
operator|(
name|SpanOrQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|36
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanMultiTermWildcardQuery
specifier|public
name|void
name|testSpanMultiTermWildcardQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/span-multi-term-wildcard.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanMultiTermQueryWrapper
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|WildcardQuery
name|expectedWrapped
init|=
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"user"
argument_list|,
literal|"ki*y"
argument_list|)
argument_list|)
decl_stmt|;
name|expectedWrapped
operator|.
name|setBoost
argument_list|(
literal|1.08f
argument_list|)
expr_stmt|;
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
name|wrapper
init|=
operator|(
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wrapper
argument_list|,
name|equalTo
argument_list|(
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
argument_list|(
name|expectedWrapped
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanMultiTermPrefixQuery
specifier|public
name|void
name|testSpanMultiTermPrefixQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/span-multi-term-prefix.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanMultiTermQueryWrapper
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|expectedWrapped
init|=
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"user"
argument_list|,
literal|"ki"
argument_list|)
argument_list|)
decl_stmt|;
name|expectedWrapped
operator|.
name|setBoost
argument_list|(
literal|1.08f
argument_list|)
expr_stmt|;
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
name|wrapper
init|=
operator|(
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wrapper
argument_list|,
name|equalTo
argument_list|(
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
argument_list|(
name|expectedWrapped
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanMultiTermFuzzyTermQuery
specifier|public
name|void
name|testSpanMultiTermFuzzyTermQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/span-multi-term-fuzzy-term.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanMultiTermQueryWrapper
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
name|wrapper
init|=
operator|(
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wrapper
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanMultiTermFuzzyRangeQuery
specifier|public
name|void
name|testSpanMultiTermFuzzyRangeQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/span-multi-term-fuzzy-range.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanMultiTermQueryWrapper
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
argument_list|<
name|Long
argument_list|>
name|expectedWrapped
init|=
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"age"
argument_list|,
name|NumberFieldMapper
operator|.
name|Defaults
operator|.
name|PRECISION_STEP_64_BIT
argument_list|,
literal|7l
argument_list|,
literal|17l
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|expectedWrapped
operator|.
name|setBoost
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
name|wrapper
init|=
operator|(
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wrapper
argument_list|,
name|equalTo
argument_list|(
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
argument_list|(
name|expectedWrapped
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanMultiTermNumericRangeQuery
specifier|public
name|void
name|testSpanMultiTermNumericRangeQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/span-multi-term-range-numeric.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanMultiTermQueryWrapper
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
argument_list|<
name|Long
argument_list|>
name|expectedWrapped
init|=
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"age"
argument_list|,
name|NumberFieldMapper
operator|.
name|Defaults
operator|.
name|PRECISION_STEP_64_BIT
argument_list|,
literal|10l
argument_list|,
literal|20l
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|expectedWrapped
operator|.
name|setBoost
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
name|wrapper
init|=
operator|(
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wrapper
argument_list|,
name|equalTo
argument_list|(
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
argument_list|(
name|expectedWrapped
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanMultiTermTermRangeQuery
specifier|public
name|void
name|testSpanMultiTermTermRangeQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/span-multi-term-range-term.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanMultiTermQueryWrapper
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermRangeQuery
name|expectedWrapped
init|=
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
literal|"user"
argument_list|,
literal|"alice"
argument_list|,
literal|"bob"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|expectedWrapped
operator|.
name|setBoost
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
name|wrapper
init|=
operator|(
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wrapper
argument_list|,
name|equalTo
argument_list|(
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
argument_list|(
name|expectedWrapped
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryQueryBuilder
specifier|public
name|void
name|testQueryQueryBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|,
name|termQuery
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryFilter
specifier|public
name|void
name|testQueryFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/query-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFQueryFilter
specifier|public
name|void
name|testFQueryFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/fquery-filter.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoreLikeThisBuilder
specifier|public
name|void
name|testMoreLikeThisBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|moreLikeThisQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"name.last"
argument_list|)
operator|.
name|likeText
argument_list|(
literal|"something"
argument_list|)
operator|.
name|minTermFreq
argument_list|(
literal|1
argument_list|)
operator|.
name|maxQueryTerms
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MoreLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MoreLikeThisQuery
name|mltQuery
init|=
operator|(
name|MoreLikeThisQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMoreLikeFields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getLikeText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMinTermFrequency
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMaxQueryTerms
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoreLikeThis
specifier|public
name|void
name|testMoreLikeThis
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/mlt.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MoreLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MoreLikeThisQuery
name|mltQuery
init|=
operator|(
name|MoreLikeThisQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMoreLikeFields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMoreLikeFields
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"name.last"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getLikeText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMinTermFrequency
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMaxQueryTerms
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoreLikeThisIds
specifier|public
name|void
name|testMoreLikeThisIds
parameter_list|()
throws|throws
name|Exception
block|{
name|MoreLikeThisQueryParser
name|parser
init|=
operator|(
name|MoreLikeThisQueryParser
operator|)
name|queryParser
operator|.
name|queryParser
argument_list|(
literal|"more_like_this"
argument_list|)
decl_stmt|;
name|parser
operator|.
name|setFetchService
argument_list|(
operator|new
name|MockMoreLikeThisFetchService
argument_list|()
argument_list|)
expr_stmt|;
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/mlt-items.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|booleanQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanClause
name|itemClause
init|=
name|booleanQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|itemClause
operator|.
name|getOccur
argument_list|()
argument_list|,
name|is
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|itemClause
operator|.
name|getQuery
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|MoreLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MoreLikeThisQuery
name|mltQuery
init|=
operator|(
name|MoreLikeThisQuery
operator|)
name|itemClause
operator|.
name|getQuery
argument_list|()
decl_stmt|;
comment|// check each Fields is for each item
for|for
control|(
name|int
name|id
init|=
literal|1
init|;
name|id
operator|<=
literal|4
condition|;
name|id
operator|++
control|)
block|{
name|Fields
name|fields
init|=
name|mltQuery
operator|.
name|getLikeFields
argument_list|()
index|[
name|id
operator|-
literal|1
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|termsToString
argument_list|(
name|fields
operator|.
name|terms
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termsToString
argument_list|(
name|fields
operator|.
name|terms
argument_list|(
literal|"name.last"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMLTMinimumShouldMatch
specifier|public
name|void
name|testMLTMinimumShouldMatch
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup for mocking fetching items
name|MoreLikeThisQueryParser
name|parser
init|=
operator|(
name|MoreLikeThisQueryParser
operator|)
name|queryParser
operator|.
name|queryParser
argument_list|(
literal|"more_like_this"
argument_list|)
decl_stmt|;
name|parser
operator|.
name|setFetchService
argument_list|(
operator|new
name|MockMoreLikeThisFetchService
argument_list|()
argument_list|)
expr_stmt|;
comment|// parsing the ES query
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/mlt-items.json"
argument_list|)
decl_stmt|;
name|BooleanQuery
name|parsedQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
comment|// get MLT query, other clause is for include/exclude items
name|MoreLikeThisQuery
name|mltQuery
init|=
operator|(
name|MoreLikeThisQuery
operator|)
name|parsedQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
decl_stmt|;
comment|// all terms must match
name|mltQuery
operator|.
name|setMinimumShouldMatch
argument_list|(
literal|"100%"
argument_list|)
expr_stmt|;
name|mltQuery
operator|.
name|setMinWordLen
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mltQuery
operator|.
name|setMinDocFreq
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// one document has all values
name|MemoryIndex
name|index
init|=
operator|new
name|MemoryIndex
argument_list|()
decl_stmt|;
name|index
operator|.
name|addField
argument_list|(
literal|"name.first"
argument_list|,
literal|"apache lucene"
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|addField
argument_list|(
literal|"name.last"
argument_list|,
literal|"1 2 3 4"
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
comment|// two clauses, one for items and one for like_text if set
name|BooleanQuery
name|luceneQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|mltQuery
operator|.
name|rewrite
argument_list|(
name|index
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|BooleanClause
index|[]
name|clauses
init|=
name|luceneQuery
operator|.
name|getClauses
argument_list|()
decl_stmt|;
comment|// check for items
name|int
name|minNumberShouldMatch
init|=
operator|(
call|(
name|BooleanQuery
call|)
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
argument_list|)
operator|)
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|minNumberShouldMatch
argument_list|,
name|is
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// and for like_text
name|minNumberShouldMatch
operator|=
operator|(
call|(
name|BooleanQuery
call|)
argument_list|(
name|clauses
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
argument_list|)
operator|)
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|minNumberShouldMatch
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|MockMoreLikeThisFetchService
specifier|private
specifier|static
class|class
name|MockMoreLikeThisFetchService
extends|extends
name|MoreLikeThisFetchService
block|{
DECL|method|MockMoreLikeThisFetchService
specifier|public
name|MockMoreLikeThisFetchService
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|,
name|Settings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fetchResponse
specifier|public
name|MultiTermVectorsResponse
name|fetchResponse
parameter_list|(
name|MultiTermVectorsRequest
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|MultiTermVectorsItemResponse
index|[]
name|responses
init|=
operator|new
name|MultiTermVectorsItemResponse
index|[
name|items
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TermVectorsRequest
name|item
range|:
name|items
control|)
block|{
name|TermVectorsResponse
name|response
init|=
operator|new
name|TermVectorsResponse
argument_list|(
name|item
operator|.
name|index
argument_list|()
argument_list|,
name|item
operator|.
name|type
argument_list|()
argument_list|,
name|item
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|setExists
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Fields
name|generatedFields
init|=
name|generateFields
argument_list|(
name|item
operator|.
name|selectedFields
argument_list|()
operator|.
name|toArray
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
argument_list|,
name|item
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|TermVectorsRequest
operator|.
name|Flag
argument_list|>
name|flags
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|TermVectorsRequest
operator|.
name|Flag
operator|.
name|Positions
argument_list|,
name|TermVectorsRequest
operator|.
name|Flag
operator|.
name|Offsets
argument_list|)
decl_stmt|;
name|response
operator|.
name|setFields
argument_list|(
name|generatedFields
argument_list|,
name|item
operator|.
name|selectedFields
argument_list|()
argument_list|,
name|flags
argument_list|,
name|generatedFields
argument_list|)
expr_stmt|;
name|responses
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|MultiTermVectorsItemResponse
argument_list|(
name|response
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MultiTermVectorsResponse
argument_list|(
name|responses
argument_list|)
return|;
block|}
block|}
DECL|method|generateFields
specifier|private
specifier|static
name|Fields
name|generateFields
parameter_list|(
name|String
index|[]
name|fieldNames
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|MemoryIndex
name|index
init|=
operator|new
name|MemoryIndex
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
name|index
operator|.
name|addField
argument_list|(
name|fieldName
argument_list|,
name|text
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|MultiFields
operator|.
name|getFields
argument_list|(
name|index
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
return|;
block|}
DECL|method|termsToString
specifier|private
specifier|static
name|String
name|termsToString
parameter_list|(
name|Terms
name|terms
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|strings
init|=
literal|""
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|CharsRefBuilder
name|spare
init|=
operator|new
name|CharsRefBuilder
argument_list|()
decl_stmt|;
name|BytesRef
name|text
decl_stmt|;
while|while
condition|(
operator|(
name|text
operator|=
name|termsEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|spare
operator|.
name|copyUTF8Bytes
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|String
name|term
init|=
name|spare
operator|.
name|toString
argument_list|()
decl_stmt|;
name|strings
operator|+=
name|term
expr_stmt|;
block|}
return|return
name|strings
return|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceRangeQueryNamed
specifier|public
name|void
name|testGeoDistanceRangeQueryNamed
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|GeoDistanceRangeQuery
name|filter
init|=
operator|(
name|GeoDistanceRangeQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|minInclusiveDistance
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|maxInclusiveDistance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceRangeQuery1
specifier|public
name|void
name|testGeoDistanceRangeQuery1
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance1.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceRangeQuery
name|filter
init|=
operator|(
name|GeoDistanceRangeQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|minInclusiveDistance
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|maxInclusiveDistance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceRangeQuery2
specifier|public
name|void
name|testGeoDistanceRangeQuery2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceRangeQuery
name|filter
init|=
operator|(
name|GeoDistanceRangeQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|minInclusiveDistance
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|maxInclusiveDistance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceRangeQuery3
specifier|public
name|void
name|testGeoDistanceRangeQuery3
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceRangeQuery
name|filter
init|=
operator|(
name|GeoDistanceRangeQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|minInclusiveDistance
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|maxInclusiveDistance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceRangeQuery4
specifier|public
name|void
name|testGeoDistanceRangeQuery4
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance4.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceRangeQuery
name|filter
init|=
operator|(
name|GeoDistanceRangeQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|minInclusiveDistance
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|maxInclusiveDistance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceRangeQuery5
specifier|public
name|void
name|testGeoDistanceRangeQuery5
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance5.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceRangeQuery
name|filter
init|=
operator|(
name|GeoDistanceRangeQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|minInclusiveDistance
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|maxInclusiveDistance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceRangeQuery6
specifier|public
name|void
name|testGeoDistanceRangeQuery6
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance6.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceRangeQuery
name|filter
init|=
operator|(
name|GeoDistanceRangeQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|minInclusiveDistance
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|maxInclusiveDistance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceRangeQuery7
specifier|public
name|void
name|testGeoDistanceRangeQuery7
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance7.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceRangeQuery
name|filter
init|=
operator|(
name|GeoDistanceRangeQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|minInclusiveDistance
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|maxInclusiveDistance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|0.012
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceRangeQuery8
specifier|public
name|void
name|testGeoDistanceRangeQuery8
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance8.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceRangeQuery
name|filter
init|=
operator|(
name|GeoDistanceRangeQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|minInclusiveDistance
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|maxInclusiveDistance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|KILOMETERS
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceRangeQuery9
specifier|public
name|void
name|testGeoDistanceRangeQuery9
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance9.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceRangeQuery
name|filter
init|=
operator|(
name|GeoDistanceRangeQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|minInclusiveDistance
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|maxInclusiveDistance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceRangeQuery10
specifier|public
name|void
name|testGeoDistanceRangeQuery10
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance10.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceRangeQuery
name|filter
init|=
operator|(
name|GeoDistanceRangeQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|minInclusiveDistance
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|maxInclusiveDistance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceRangeQuery11
specifier|public
name|void
name|testGeoDistanceRangeQuery11
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance11.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceRangeQuery
name|filter
init|=
operator|(
name|GeoDistanceRangeQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|minInclusiveDistance
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|maxInclusiveDistance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceRangeQuery12
specifier|public
name|void
name|testGeoDistanceRangeQuery12
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance12.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceRangeQuery
name|filter
init|=
operator|(
name|GeoDistanceRangeQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|minInclusiveDistance
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|maxInclusiveDistance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoBoundingBoxFilterNamed
specifier|public
name|void
name|testGeoBoundingBoxFilterNamed
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_boundingbox-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|InMemoryGeoBoundingBoxQuery
name|filter
init|=
operator|(
name|InMemoryGeoBoundingBoxQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoBoundingBoxFilter1
specifier|public
name|void
name|testGeoBoundingBoxFilter1
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_boundingbox1.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|InMemoryGeoBoundingBoxQuery
name|filter
init|=
operator|(
name|InMemoryGeoBoundingBoxQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoBoundingBoxFilter2
specifier|public
name|void
name|testGeoBoundingBoxFilter2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_boundingbox2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|InMemoryGeoBoundingBoxQuery
name|filter
init|=
operator|(
name|InMemoryGeoBoundingBoxQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoBoundingBoxFilter3
specifier|public
name|void
name|testGeoBoundingBoxFilter3
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_boundingbox3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|InMemoryGeoBoundingBoxQuery
name|filter
init|=
operator|(
name|InMemoryGeoBoundingBoxQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoBoundingBoxFilter4
specifier|public
name|void
name|testGeoBoundingBoxFilter4
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_boundingbox4.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|InMemoryGeoBoundingBoxQuery
name|filter
init|=
operator|(
name|InMemoryGeoBoundingBoxQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoBoundingBoxFilter5
specifier|public
name|void
name|testGeoBoundingBoxFilter5
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_boundingbox5.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|InMemoryGeoBoundingBoxQuery
name|filter
init|=
operator|(
name|InMemoryGeoBoundingBoxQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoBoundingBoxFilter6
specifier|public
name|void
name|testGeoBoundingBoxFilter6
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_boundingbox6.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|InMemoryGeoBoundingBoxQuery
name|filter
init|=
operator|(
name|InMemoryGeoBoundingBoxQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoPolygonNamedFilter
specifier|public
name|void
name|testGeoPolygonNamedFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_polygon-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|GeoPolygonQuery
name|filter
init|=
operator|(
name|GeoPolygonQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|20
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|90
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoPolygonFilterParsingExceptions
specifier|public
name|void
name|testGeoPolygonFilterParsingExceptions
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|brokenFiles
init|=
operator|new
name|String
index|[]
block|{
literal|"/org/elasticsearch/index/query/geo_polygon_exception_1.json"
block|,
literal|"/org/elasticsearch/index/query/geo_polygon_exception_2.json"
block|,
literal|"/org/elasticsearch/index/query/geo_polygon_exception_3.json"
block|,
literal|"/org/elasticsearch/index/query/geo_polygon_exception_4.json"
block|,
literal|"/org/elasticsearch/index/query/geo_polygon_exception_5.json"
block|}
decl_stmt|;
for|for
control|(
name|String
name|brokenFile
range|:
name|brokenFiles
control|)
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
name|brokenFile
argument_list|)
decl_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"parsing a broken geo_polygon filter didn't fail as expected while parsing: "
operator|+
name|brokenFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
comment|// success!
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testGeoPolygonFilter1
specifier|public
name|void
name|testGeoPolygonFilter1
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_polygon1.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoPolygonQuery
name|filter
init|=
operator|(
name|GeoPolygonQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|20
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|90
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoPolygonFilter2
specifier|public
name|void
name|testGeoPolygonFilter2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_polygon2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoPolygonQuery
name|filter
init|=
operator|(
name|GeoPolygonQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|20
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|90
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoPolygonFilter3
specifier|public
name|void
name|testGeoPolygonFilter3
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_polygon3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoPolygonQuery
name|filter
init|=
operator|(
name|GeoPolygonQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|20
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|90
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoPolygonFilter4
specifier|public
name|void
name|testGeoPolygonFilter4
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_polygon4.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoPolygonQuery
name|filter
init|=
operator|(
name|GeoPolygonQuery
operator|)
name|constantScoreQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|20
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|90
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoShapeFilter
specifier|public
name|void
name|testGeoShapeFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geoShape-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|parsedQuery
operator|instanceof
name|ConstantScoreQuery
condition|)
block|{
name|parsedQuery
operator|=
operator|(
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
operator|)
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|IntersectsPrefixTreeFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoShapeQuery
specifier|public
name|void
name|testGeoShapeQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geoShape-query.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|csq
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|csq
operator|.
name|getQuery
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IntersectsPrefixTreeFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommonTermsQuery1
specifier|public
name|void
name|testCommonTermsQuery1
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/commonTerms-query1.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ExtendedCommonTermsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ExtendedCommonTermsQuery
name|ectQuery
init|=
operator|(
name|ExtendedCommonTermsQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|ectQuery
operator|.
name|getHighFreqMinimumNumberShouldMatchSpec
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ectQuery
operator|.
name|getLowFreqMinimumNumberShouldMatchSpec
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommonTermsQuery2
specifier|public
name|void
name|testCommonTermsQuery2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/commonTerms-query2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ExtendedCommonTermsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ExtendedCommonTermsQuery
name|ectQuery
init|=
operator|(
name|ExtendedCommonTermsQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|ectQuery
operator|.
name|getHighFreqMinimumNumberShouldMatchSpec
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"50%"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ectQuery
operator|.
name|getLowFreqMinimumNumberShouldMatchSpec
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"5<20%"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommonTermsQuery3
specifier|public
name|void
name|testCommonTermsQuery3
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/commonTerms-query3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ExtendedCommonTermsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ExtendedCommonTermsQuery
name|ectQuery
init|=
operator|(
name|ExtendedCommonTermsQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|ectQuery
operator|.
name|getHighFreqMinimumNumberShouldMatchSpec
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ectQuery
operator|.
name|getLowFreqMinimumNumberShouldMatchSpec
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// see #11730
DECL|method|testCommonTermsQuery4
specifier|public
name|void
name|testCommonTermsQuery4
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|disableCoord
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ExtendedCommonTermsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ExtendedCommonTermsQuery
name|ectQuery
init|=
operator|(
name|ExtendedCommonTermsQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertFalse
argument_list|(
name|ectQuery
operator|.
name|isCoordDisabled
argument_list|()
argument_list|)
expr_stmt|;
name|parsedQuery
operator|=
name|queryParser
operator|.
name|parse
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|disableCoord
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ExtendedCommonTermsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ectQuery
operator|=
operator|(
name|ExtendedCommonTermsQuery
operator|)
name|parsedQuery
expr_stmt|;
name|assertTrue
argument_list|(
name|ectQuery
operator|.
name|isCoordDisabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|QueryParsingException
operator|.
name|class
argument_list|)
DECL|method|assureMalformedThrowsException
specifier|public
name|void
name|assureMalformedThrowsException
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
decl_stmt|;
name|queryParser
operator|=
name|queryParser
argument_list|()
expr_stmt|;
name|String
name|query
decl_stmt|;
name|query
operator|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/faulty-function-score-query.json"
argument_list|)
expr_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilterParsing
specifier|public
name|void
name|testFilterParsing
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
decl_stmt|;
name|queryParser
operator|=
name|queryParser
argument_list|()
expr_stmt|;
name|String
name|query
decl_stmt|;
name|query
operator|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/function-filter-score-query.json"
argument_list|)
expr_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
call|(
name|double
call|)
argument_list|(
name|parsedQuery
operator|.
name|getBoost
argument_list|()
argument_list|)
argument_list|,
name|Matchers
operator|.
name|closeTo
argument_list|(
literal|3.0
argument_list|,
literal|1.e-7
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBadTypeMatchQuery
specifier|public
name|void
name|testBadTypeMatchQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/match-query-bad-type.json"
argument_list|)
decl_stmt|;
name|QueryParsingException
name|expectedException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|qpe
parameter_list|)
block|{
name|expectedException
operator|=
name|qpe
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|expectedException
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiMatchQuery
specifier|public
name|void
name|testMultiMatchQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/multiMatch-query-simple.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBadTypeMultiMatchQuery
specifier|public
name|void
name|testBadTypeMultiMatchQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/multiMatch-query-bad-type.json"
argument_list|)
decl_stmt|;
name|QueryParsingException
name|expectedException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|qpe
parameter_list|)
block|{
name|expectedException
operator|=
name|qpe
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|expectedException
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiMatchQueryWithFieldsAsString
specifier|public
name|void
name|testMultiMatchQueryWithFieldsAsString
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/multiMatch-query-fields-as-string.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCrossFieldMultiMatchQuery
specifier|public
name|void
name|testCrossFieldMultiMatchQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"banon"
argument_list|,
literal|"name.first^2"
argument_list|,
literal|"name.last^3"
argument_list|,
literal|"foobar"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|indexService
operator|.
name|shardSafe
argument_list|(
literal|0
argument_list|)
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|Query
name|rewrittenQuery
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|rewrite
argument_list|(
name|parsedQuery
argument_list|)
decl_stmt|;
name|BooleanQuery
name|expected
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foobar"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|TermQuery
name|tq1
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
decl_stmt|;
name|tq1
operator|.
name|setBoost
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|TermQuery
name|tq2
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
decl_stmt|;
name|tq2
operator|.
name|setBoost
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|Arrays
operator|.
expr|<
name|Query
operator|>
name|asList
argument_list|(
name|tq1
argument_list|,
name|tq2
argument_list|)
argument_list|,
literal|0f
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|rewrittenQuery
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMatchWithFuzzyTranspositions
specifier|public
name|void
name|testMatchWithFuzzyTranspositions
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/match-with-fuzzy-transpositions.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|FuzzyQuery
operator|)
name|parsedQuery
operator|)
operator|.
name|getTranspositions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMatchWithoutFuzzyTranspositions
specifier|public
name|void
name|testMatchWithoutFuzzyTranspositions
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/match-without-fuzzy-transpositions.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|FuzzyQuery
operator|)
name|parsedQuery
operator|)
operator|.
name|getTranspositions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// https://github.com/elasticsearch/elasticsearch/issues/7240
annotation|@
name|Test
DECL|method|testEmptyBooleanQuery
specifier|public
name|void
name|testEmptyBooleanQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"bool"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MatchAllDocsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// https://github.com/elasticsearch/elasticsearch/issues/7240
annotation|@
name|Test
DECL|method|testEmptyBooleanQueryInsideFQuery
specifier|public
name|void
name|testEmptyBooleanQueryInsideFQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/fquery-with-empty-bool-query.json"
argument_list|)
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parseInnerFilter
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|Queries
operator|.
name|filtered
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"text"
argument_list|,
literal|"apache"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"text"
argument_list|,
literal|"apache"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProperErrorMessageWhenTwoFunctionsDefinedInQueryBody
specifier|public
name|void
name|testProperErrorMessageWhenTwoFunctionsDefinedInQueryBody
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/function-score-query-causing-NPE.json"
argument_list|)
decl_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"FunctionScoreQueryParser should throw an exception here because two functions in body are not allowed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"use [functions] array if you want to define several functions."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testWeight1fStillProducesWeighFunction
specifier|public
name|void
name|testWeight1fStillProducesWeighFunction
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|queryString
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"function_score"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"functions"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field_value_factor"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"popularity"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|1.0
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"testidx"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"testidx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"doc"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"popularity"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"float"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SearchContext
operator|.
name|setCurrent
argument_list|(
name|createSearchContext
argument_list|(
name|indexService
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|queryString
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|FunctionScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|FunctionScoreQuery
operator|)
name|query
operator|)
operator|.
name|getFunction
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|WeightFactorFunction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SearchContext
operator|.
name|removeCurrent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProperErrorMessagesForMisplacedWeightsAndFunctions
specifier|public
name|void
name|testProperErrorMessagesForMisplacedWeightsAndFunctions
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"function_score"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"functions"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|2
argument_list|)
operator|.
name|field
argument_list|(
literal|"boost_factor"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expect exception here because boost_factor must not have a weight"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|BoostScoreFunction
operator|.
name|BOOST_WEIGHT_ERROR_MESSAGE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|query
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"function_score"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"functions"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"boost_factor"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expect exception here because array of functions and one weight in body is not allowed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"you can either define [functions] array or a single function, not both. already found [functions] array, now encountering [weight]."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|query
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"function_score"
argument_list|)
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|2
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"functions"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"boost_factor"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expect exception here because array of functions and one weight in body is not allowed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"you can either define [functions] array or a single function, not both. already found [weight], now encountering [functions]."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// https://github.com/elasticsearch/elasticsearch/issues/6722
DECL|method|testEmptyBoolSubClausesIsMatchAll
specifier|public
name|void
name|testEmptyBoolSubClausesIsMatchAll
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/bool-query-with-empty-clauses-for-parsing.json"
argument_list|)
decl_stmt|;
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"testidx"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"testidx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"foo"
argument_list|,
literal|"nested"
argument_list|,
literal|"type=nested"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchContext
operator|.
name|setCurrent
argument_list|(
name|createSearchContext
argument_list|(
name|indexService
argument_list|)
argument_list|)
expr_stmt|;
name|IndexQueryParserService
name|queryParser
init|=
name|indexService
operator|.
name|queryParserService
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
operator|)
operator|.
name|getQuery
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ToParentBlockJoinQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
operator|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"ToParentBlockJoinQuery (+*:* #random_access(QueryWrapperFilter(_type:__nested)))"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchContext
operator|.
name|removeCurrent
argument_list|()
expr_stmt|;
block|}
comment|/**      * helper to extract term from TermQuery. */
DECL|method|getTerm
specifier|private
name|Term
name|getTerm
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
while|while
condition|(
name|query
operator|instanceof
name|QueryWrapperFilter
condition|)
block|{
name|query
operator|=
operator|(
operator|(
name|QueryWrapperFilter
operator|)
name|query
operator|)
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
name|TermQuery
name|wrapped
init|=
operator|(
name|TermQuery
operator|)
name|query
decl_stmt|;
return|return
name|wrapped
operator|.
name|getTerm
argument_list|()
return|;
block|}
DECL|method|testDefaultBooleanQueryMinShouldMatch
specifier|public
name|void
name|testDefaultBooleanQueryMinShouldMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
comment|// Queries have a minShouldMatch of 0
name|BooleanQuery
name|bq
init|=
operator|(
name|BooleanQuery
operator|)
name|queryParser
operator|.
name|parse
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bq
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
name|bq
operator|=
operator|(
name|BooleanQuery
operator|)
name|queryParser
operator|.
name|parse
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|should
argument_list|(
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bq
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
comment|// Filters have a minShouldMatch of 0/1
name|ConstantScoreQuery
name|csq
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|queryParser
operator|.
name|parse
argument_list|(
name|constantScoreQuery
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|bq
operator|=
operator|(
name|BooleanQuery
operator|)
name|csq
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bq
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
name|csq
operator|=
operator|(
name|ConstantScoreQuery
operator|)
name|queryParser
operator|.
name|parse
argument_list|(
name|constantScoreQuery
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|should
argument_list|(
name|termQuery
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|bq
operator|=
operator|(
name|BooleanQuery
operator|)
name|csq
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bq
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermsQueryFilter
specifier|public
name|void
name|testTermsQueryFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TermsQuery is tricky in that it parses differently as a query or a filter
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|termsQuery
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|q
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|csq
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|queryParser
operator|.
name|parse
argument_list|(
name|constantScoreQuery
argument_list|(
name|termsQuery
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|q
operator|=
name|csq
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|q
argument_list|,
name|instanceOf
argument_list|(
name|TermsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlendedRewriteMethod
specifier|public
name|void
name|testBlendedRewriteMethod
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|rewrite
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"top_terms_blended_freqs_10"
argument_list|,
literal|"topTermsBlendedFreqs10"
argument_list|)
control|)
block|{
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|prefixQuery
argument_list|(
literal|"field"
argument_list|,
literal|"val"
argument_list|)
operator|.
name|rewrite
argument_list|(
name|rewrite
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|PrefixQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|prefixQuery
init|=
operator|(
name|PrefixQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"val"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getRewriteMethod
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|MultiTermQuery
operator|.
name|TopTermsBlendedFreqScoringRewrite
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

