begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.percolator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|percolator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|PercolatorQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|SearchContextHighlight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|sameInstance
import|;
end_import

begin_class
DECL|class|PercolatorHighlightSubFetchPhaseTests
specifier|public
class|class
name|PercolatorHighlightSubFetchPhaseTests
extends|extends
name|ESTestCase
block|{
DECL|method|testHitsExecutionNeeded
specifier|public
name|void
name|testHitsExecutionNeeded
parameter_list|()
block|{
name|PercolatorQuery
name|percolatorQuery
init|=
operator|new
name|PercolatorQuery
operator|.
name|Builder
argument_list|(
literal|""
argument_list|,
name|ctx
lambda|->
literal|null
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
name|Mockito
operator|.
name|mock
argument_list|(
name|IndexSearcher
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PercolatorHighlightSubFetchPhase
name|subFetchPhase
init|=
operator|new
name|PercolatorHighlightSubFetchPhase
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|SearchContext
name|searchContext
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SearchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|searchContext
operator|.
name|highlight
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|SearchContextHighlight
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|searchContext
operator|.
name|query
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|subFetchPhase
operator|.
name|hitsExecutionNeeded
argument_list|(
name|searchContext
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalStateException
name|exception
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|subFetchPhase
operator|.
name|hitsExecute
argument_list|(
name|searchContext
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"couldn't locate percolator query"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|searchContext
operator|.
name|query
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|percolatorQuery
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|subFetchPhase
operator|.
name|hitsExecutionNeeded
argument_list|(
name|searchContext
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLocatePercolatorQuery
specifier|public
name|void
name|testLocatePercolatorQuery
parameter_list|()
block|{
name|PercolatorQuery
name|percolatorQuery
init|=
operator|new
name|PercolatorQuery
operator|.
name|Builder
argument_list|(
literal|""
argument_list|,
name|ctx
lambda|->
literal|null
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
name|Mockito
operator|.
name|mock
argument_list|(
name|IndexSearcher
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|PercolatorHighlightSubFetchPhase
operator|.
name|locatePercolatorQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|PercolatorHighlightSubFetchPhase
operator|.
name|locatePercolatorQuery
argument_list|(
name|bq
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|percolatorQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|PercolatorHighlightSubFetchPhase
operator|.
name|locatePercolatorQuery
argument_list|(
name|bq
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|sameInstance
argument_list|(
name|percolatorQuery
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|PercolatorHighlightSubFetchPhase
operator|.
name|locatePercolatorQuery
argument_list|(
name|constantScoreQuery
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|constantScoreQuery
operator|=
operator|new
name|ConstantScoreQuery
argument_list|(
name|percolatorQuery
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|PercolatorHighlightSubFetchPhase
operator|.
name|locatePercolatorQuery
argument_list|(
name|constantScoreQuery
argument_list|)
argument_list|,
name|sameInstance
argument_list|(
name|percolatorQuery
argument_list|)
argument_list|)
expr_stmt|;
name|BoostQuery
name|boostQuery
init|=
operator|new
name|BoostQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|1f
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|PercolatorHighlightSubFetchPhase
operator|.
name|locatePercolatorQuery
argument_list|(
name|boostQuery
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|boostQuery
operator|=
operator|new
name|BoostQuery
argument_list|(
name|percolatorQuery
argument_list|,
literal|1f
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|PercolatorHighlightSubFetchPhase
operator|.
name|locatePercolatorQuery
argument_list|(
name|boostQuery
argument_list|)
argument_list|,
name|sameInstance
argument_list|(
name|percolatorQuery
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

