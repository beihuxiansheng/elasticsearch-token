begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|ModuleTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|InternalEngineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexSearcherWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|engine
operator|.
name|MockEngineFactory
import|;
end_import

begin_class
DECL|class|IndexModuleTests
specifier|public
class|class
name|IndexModuleTests
extends|extends
name|ModuleTestCase
block|{
DECL|method|testWrapperIsBound
specifier|public
name|void
name|testWrapperIsBound
parameter_list|()
block|{
name|IndexModule
name|module
init|=
operator|new
name|IndexModule
argument_list|(
name|IndexMetaData
operator|.
name|PROTO
argument_list|)
decl_stmt|;
name|assertInstanceBinding
argument_list|(
name|module
argument_list|,
name|IndexSearcherWrapper
operator|.
name|class
argument_list|,
parameter_list|(
name|x
parameter_list|)
lambda|->
name|x
operator|==
literal|null
argument_list|)
expr_stmt|;
name|module
operator|.
name|indexSearcherWrapper
operator|=
name|Wrapper
operator|.
name|class
expr_stmt|;
name|assertBinding
argument_list|(
name|module
argument_list|,
name|IndexSearcherWrapper
operator|.
name|class
argument_list|,
name|Wrapper
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testEngineFactoryBound
specifier|public
name|void
name|testEngineFactoryBound
parameter_list|()
block|{
name|IndexModule
name|module
init|=
operator|new
name|IndexModule
argument_list|(
name|IndexMetaData
operator|.
name|PROTO
argument_list|)
decl_stmt|;
name|assertBinding
argument_list|(
name|module
argument_list|,
name|EngineFactory
operator|.
name|class
argument_list|,
name|InternalEngineFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|module
operator|.
name|engineFactoryImpl
operator|=
name|MockEngineFactory
operator|.
name|class
expr_stmt|;
name|assertBinding
argument_list|(
name|module
argument_list|,
name|EngineFactory
operator|.
name|class
argument_list|,
name|MockEngineFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testOtherServiceBound
specifier|public
name|void
name|testOtherServiceBound
parameter_list|()
block|{
specifier|final
name|IndexMetaData
name|meta
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|IndexMetaData
operator|.
name|PROTO
argument_list|)
operator|.
name|index
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexModule
name|module
init|=
operator|new
name|IndexModule
argument_list|(
name|meta
argument_list|)
decl_stmt|;
name|assertBinding
argument_list|(
name|module
argument_list|,
name|IndexService
operator|.
name|class
argument_list|,
name|IndexService
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertBinding
argument_list|(
name|module
argument_list|,
name|IndexServicesProvider
operator|.
name|class
argument_list|,
name|IndexServicesProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertInstanceBinding
argument_list|(
name|module
argument_list|,
name|IndexMetaData
operator|.
name|class
argument_list|,
parameter_list|(
name|x
parameter_list|)
lambda|->
name|x
operator|==
name|meta
argument_list|)
expr_stmt|;
block|}
DECL|class|Wrapper
specifier|public
specifier|static
specifier|final
class|class
name|Wrapper
implements|implements
name|IndexSearcherWrapper
block|{
annotation|@
name|Override
DECL|method|wrap
specifier|public
name|DirectoryReader
name|wrap
parameter_list|(
name|DirectoryReader
name|reader
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|wrap
specifier|public
name|IndexSearcher
name|wrap
parameter_list|(
name|EngineConfig
name|engineConfig
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|EngineException
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

