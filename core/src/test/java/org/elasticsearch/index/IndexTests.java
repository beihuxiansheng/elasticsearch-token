begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
operator|.
name|randomSimpleString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_class
DECL|class|IndexTests
specifier|public
class|class
name|IndexTests
extends|extends
name|ESTestCase
block|{
DECL|method|testToString
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"[name/uuid]"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"name"
argument_list|,
literal|"uuid"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[name]"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"name"
argument_list|,
name|ClusterState
operator|.
name|UNKNOWN_UUID
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Index
name|random
init|=
operator|new
name|Index
argument_list|(
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|,
name|usually
argument_list|()
condition|?
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|(
name|random
argument_list|()
argument_list|)
else|:
name|ClusterState
operator|.
name|UNKNOWN_UUID
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|random
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|random
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ClusterState
operator|.
name|UNKNOWN_UUID
operator|.
name|equals
argument_list|(
name|random
operator|.
name|getUUID
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|random
operator|.
name|toString
argument_list|()
argument_list|,
name|not
argument_list|(
name|containsString
argument_list|(
name|random
operator|.
name|getUUID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|random
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|random
operator|.
name|getUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testXContent
specifier|public
name|void
name|testXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|name
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|4
argument_list|,
literal|15
argument_list|)
decl_stmt|;
specifier|final
name|String
name|uuid
init|=
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
decl_stmt|;
specifier|final
name|Index
name|original
init|=
operator|new
name|Index
argument_list|(
name|name
argument_list|,
name|uuid
argument_list|)
decl_stmt|;
specifier|final
name|XContentBuilder
name|builder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|original
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// the beginning of the parser
name|assertThat
argument_list|(
name|Index
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

