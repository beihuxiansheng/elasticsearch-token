begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.snapshots.blobstore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|blobstore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomInts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|SlicedInputStreamTest
specifier|public
class|class
name|SlicedInputStreamTest
extends|extends
name|ESTestCase
block|{
annotation|@
name|Test
DECL|method|readRandom
specifier|public
name|void
name|readRandom
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|parts
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|stream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|numWriteOps
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1000
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
specifier|final
name|long
name|seed
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numWriteOps
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|stream
operator|.
name|write
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|stream
operator|.
name|write
argument_list|(
name|randomBytes
argument_list|(
name|random
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|final
name|CheckClosedInputStream
index|[]
name|streams
init|=
operator|new
name|CheckClosedInputStream
index|[
name|parts
index|]
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|stream
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|int
name|slice
init|=
name|bytes
operator|.
name|length
operator|/
name|parts
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
condition|;
name|i
operator|++
control|)
block|{
name|length
operator|=
name|i
operator|==
name|parts
operator|-
literal|1
condition|?
name|bytes
operator|.
name|length
operator|-
name|offset
else|:
name|slice
expr_stmt|;
name|streams
index|[
name|i
index|]
operator|=
operator|new
name|CheckClosedInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|length
expr_stmt|;
block|}
name|SlicedInputStream
name|input
init|=
operator|new
name|SlicedInputStream
argument_list|(
name|parts
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|InputStream
name|openSlice
parameter_list|(
name|long
name|slice
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|streams
index|[
operator|(
name|int
operator|)
name|slice
index|]
return|;
block|}
block|}
decl_stmt|;
name|random
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|available
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|streams
index|[
literal|0
index|]
operator|.
name|available
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numWriteOps
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|assertThat
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|input
operator|.
name|read
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|byte
index|[]
name|b
init|=
name|randomBytes
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|b
operator|.
name|length
index|]
decl_stmt|;
name|int
name|read
init|=
name|readFully
argument_list|(
name|input
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|b
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|read
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|b
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|assertThat
argument_list|(
name|input
operator|.
name|available
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|streams
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|streams
index|[
name|i
index|]
operator|.
name|closed
argument_list|)
expr_stmt|;
block|}
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|streams
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|streams
index|[
name|i
index|]
operator|.
name|closed
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readFully
specifier|private
name|int
name|readFully
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffer
operator|.
name|length
condition|;
control|)
block|{
name|int
name|read
init|=
name|stream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|i
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
name|i
return|;
block|}
block|}
name|i
operator|+=
name|read
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|length
return|;
block|}
DECL|method|randomBytes
specifier|private
name|byte
index|[]
name|randomBytes
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
name|int
name|length
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
DECL|class|CheckClosedInputStream
specifier|private
specifier|static
specifier|final
class|class
name|CheckClosedInputStream
extends|extends
name|FilterInputStream
block|{
DECL|field|closed
specifier|public
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|method|CheckClosedInputStream
specifier|public
name|CheckClosedInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

