begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.snapshots.blobstore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|blobstore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|blobstore
operator|.
name|BlobStoreIndexShardSnapshot
operator|.
name|FileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|StoreFileMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|FileInfoTests
specifier|public
class|class
name|FileInfoTests
extends|extends
name|ESTestCase
block|{
DECL|method|testToFromXContent
specifier|public
name|void
name|testToFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
specifier|final
name|BytesRef
name|hash
init|=
operator|new
name|BytesRef
argument_list|(
name|scaledRandomIntBetween
argument_list|(
literal|0
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|hash
operator|.
name|length
operator|=
name|hash
operator|.
name|bytes
operator|.
name|length
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hash
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|hash
operator|.
name|bytes
index|[
name|i
index|]
operator|=
name|randomByte
argument_list|()
expr_stmt|;
block|}
name|StoreFileMetaData
name|meta
init|=
operator|new
name|StoreFileMetaData
argument_list|(
literal|"foobar"
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|randomLong
argument_list|()
argument_list|)
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|Version
operator|.
name|LATEST
argument_list|,
name|hash
argument_list|)
decl_stmt|;
name|ByteSizeValue
name|size
init|=
operator|new
name|ByteSizeValue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|randomLong
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|BlobStoreIndexShardSnapshot
operator|.
name|FileInfo
name|info
init|=
operator|new
name|BlobStoreIndexShardSnapshot
operator|.
name|FileInfo
argument_list|(
literal|"_foobar"
argument_list|,
name|meta
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|prettyPrint
argument_list|()
decl_stmt|;
name|BlobStoreIndexShardSnapshot
operator|.
name|FileInfo
operator|.
name|toXContent
argument_list|(
name|info
argument_list|,
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|byte
index|[]
name|xcontent
init|=
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|shuffleXContent
argument_list|(
name|builder
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|BlobStoreIndexShardSnapshot
operator|.
name|FileInfo
name|parsedInfo
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|xcontent
argument_list|)
init|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|parsedInfo
operator|=
name|BlobStoreIndexShardSnapshot
operator|.
name|FileInfo
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|parsedInfo
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|physicalName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|parsedInfo
operator|.
name|physicalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|length
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|parsedInfo
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|checksum
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|parsedInfo
operator|.
name|checksum
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|partSize
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|parsedInfo
operator|.
name|partSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedInfo
operator|.
name|metadata
argument_list|()
operator|.
name|hash
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|hash
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedInfo
operator|.
name|metadata
argument_list|()
operator|.
name|hash
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedInfo
operator|.
name|metadata
argument_list|()
operator|.
name|writtenBy
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Version
operator|.
name|LATEST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedInfo
operator|.
name|isSame
argument_list|(
name|info
operator|.
name|metadata
argument_list|()
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInvalidFieldsInFromXContent
specifier|public
name|void
name|testInvalidFieldsInFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
specifier|final
name|BytesRef
name|hash
init|=
operator|new
name|BytesRef
argument_list|(
name|scaledRandomIntBetween
argument_list|(
literal|0
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|hash
operator|.
name|length
operator|=
name|hash
operator|.
name|bytes
operator|.
name|length
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hash
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|hash
operator|.
name|bytes
index|[
name|i
index|]
operator|=
name|randomByte
argument_list|()
expr_stmt|;
block|}
name|String
name|name
init|=
literal|"foobar"
decl_stmt|;
name|String
name|physicalName
init|=
literal|"_foobar"
decl_stmt|;
name|String
name|failure
init|=
literal|null
decl_stmt|;
name|long
name|length
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|randomLong
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// random corruption
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|name
operator|=
literal|"foo,bar"
expr_stmt|;
name|failure
operator|=
literal|"missing or invalid file name"
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|physicalName
operator|=
literal|"_foo,bar"
expr_stmt|;
name|failure
operator|=
literal|"missing or invalid physical file name"
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|length
operator|=
operator|-
name|Math
operator|.
name|abs
argument_list|(
name|randomLong
argument_list|()
argument_list|)
expr_stmt|;
name|failure
operator|=
literal|"missing or invalid file length"
expr_stmt|;
break|break;
case|case
literal|3
case|:
break|break;
default|default:
name|fail
argument_list|(
literal|"shouldn't be here"
argument_list|)
expr_stmt|;
block|}
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|FileInfo
operator|.
name|NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|FileInfo
operator|.
name|PHYSICAL_NAME
argument_list|,
name|physicalName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|FileInfo
operator|.
name|LENGTH
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|FileInfo
operator|.
name|WRITTEN_BY
argument_list|,
name|Version
operator|.
name|LATEST
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|FileInfo
operator|.
name|CHECKSUM
argument_list|,
literal|"666"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|byte
index|[]
name|xContent
init|=
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
comment|// No failures should read as usual
specifier|final
name|BlobStoreIndexShardSnapshot
operator|.
name|FileInfo
name|parsedInfo
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|xContent
argument_list|)
init|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|parsedInfo
operator|=
name|BlobStoreIndexShardSnapshot
operator|.
name|FileInfo
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|name
argument_list|,
name|equalTo
argument_list|(
name|parsedInfo
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|physicalName
argument_list|,
name|equalTo
argument_list|(
name|parsedInfo
operator|.
name|physicalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|length
argument_list|,
name|equalTo
argument_list|(
name|parsedInfo
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"666"
argument_list|,
name|parsedInfo
operator|.
name|checksum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"666"
argument_list|,
name|parsedInfo
operator|.
name|metadata
argument_list|()
operator|.
name|checksum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Version
operator|.
name|LATEST
argument_list|,
name|parsedInfo
operator|.
name|metadata
argument_list|()
operator|.
name|writtenBy
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|xContent
argument_list|)
init|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|BlobStoreIndexShardSnapshot
operator|.
name|FileInfo
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed with ["
operator|+
name|failure
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|failure
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testGetPartSize
specifier|public
name|void
name|testGetPartSize
parameter_list|()
block|{
name|BlobStoreIndexShardSnapshot
operator|.
name|FileInfo
name|info
init|=
operator|new
name|BlobStoreIndexShardSnapshot
operator|.
name|FileInfo
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"foo"
argument_list|,
literal|36
argument_list|,
literal|"666"
argument_list|)
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numBytes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|info
operator|.
name|numberOfParts
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|numBytes
operator|+=
name|info
operator|.
name|partBytes
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|numBytes
argument_list|,
literal|36
argument_list|)
expr_stmt|;
name|info
operator|=
operator|new
name|BlobStoreIndexShardSnapshot
operator|.
name|FileInfo
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"foo"
argument_list|,
literal|35
argument_list|,
literal|"666"
argument_list|)
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|numBytes
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|info
operator|.
name|numberOfParts
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|numBytes
operator|+=
name|info
operator|.
name|partBytes
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|numBytes
argument_list|,
literal|35
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numIters
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numIters
condition|;
name|j
operator|++
control|)
block|{
name|StoreFileMetaData
name|metaData
init|=
operator|new
name|StoreFileMetaData
argument_list|(
literal|"foo"
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|)
argument_list|,
literal|"666"
argument_list|)
decl_stmt|;
name|info
operator|=
operator|new
name|BlobStoreIndexShardSnapshot
operator|.
name|FileInfo
argument_list|(
literal|"foo"
argument_list|,
name|metaData
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|numBytes
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|info
operator|.
name|numberOfParts
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|numBytes
operator|+=
name|info
operator|.
name|partBytes
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|numBytes
argument_list|,
name|metaData
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

