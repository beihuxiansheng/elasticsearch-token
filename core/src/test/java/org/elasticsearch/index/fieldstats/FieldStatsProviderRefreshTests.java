begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fieldstats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fieldstats
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|refresh
operator|.
name|RefreshResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesRequestCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|FieldStatsProviderRefreshTests
specifier|public
class|class
name|FieldStatsProviderRefreshTests
extends|extends
name|ESSingleNodeTestCase
block|{
DECL|method|testQueryRewriteOnRefresh
specifier|public
name|void
name|testQueryRewriteOnRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"index"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"s"
argument_list|,
literal|"type=text"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|IndicesRequestCache
operator|.
name|INDEX_CACHE_REQUEST_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Index some documents
name|indexDocument
argument_list|(
literal|"1"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|indexDocument
argument_list|(
literal|"2"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|indexDocument
argument_list|(
literal|"3"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|refreshIndex
argument_list|()
expr_stmt|;
comment|// check request cache stats are clean
name|assertRequestCacheStats
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Search for a range and check that it missed the cache (since its the
comment|// first time it has run)
specifier|final
name|SearchResponse
name|r1
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"s"
argument_list|)
operator|.
name|gte
argument_list|(
literal|"a"
argument_list|)
operator|.
name|lte
argument_list|(
literal|"g"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r1
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|assertRequestCacheStats
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Search again and check it hits the cache
specifier|final
name|SearchResponse
name|r2
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"s"
argument_list|)
operator|.
name|gte
argument_list|(
literal|"a"
argument_list|)
operator|.
name|lte
argument_list|(
literal|"g"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r2
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|assertRequestCacheStats
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Index some more documents in the query range and refresh
name|indexDocument
argument_list|(
literal|"4"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|indexDocument
argument_list|(
literal|"5"
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
name|refreshIndex
argument_list|()
expr_stmt|;
comment|// Search again and check the request cache for another miss since request cache should be invalidated by refresh
specifier|final
name|SearchResponse
name|r3
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"s"
argument_list|)
operator|.
name|gte
argument_list|(
literal|"a"
argument_list|)
operator|.
name|lte
argument_list|(
literal|"g"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|r3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r3
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
name|assertRequestCacheStats
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|assertRequestCacheStats
specifier|private
name|void
name|assertRequestCacheStats
parameter_list|(
name|long
name|expectedHits
parameter_list|,
name|long
name|expectedMisses
parameter_list|)
block|{
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setRequestCache
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getRequestCache
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedHits
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setRequestCache
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getRequestCache
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedMisses
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|refreshIndex
specifier|private
name|void
name|refreshIndex
parameter_list|()
block|{
name|RefreshResponse
name|refreshResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"index"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|refreshResponse
operator|.
name|getSuccessfulShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|refreshResponse
operator|.
name|getSuccessfulShards
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|indexDocument
specifier|private
name|void
name|indexDocument
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|sValue
parameter_list|)
block|{
name|IndexResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
name|id
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"s"
argument_list|,
name|sValue
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|status
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|OK
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|CREATED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

