begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|IndexStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|InternalClusterInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|TestShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|ShardLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|flush
operator|.
name|FlushStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParsedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|seqno
operator|.
name|SequenceNumbersService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|DummyShardLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|IndexSettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalSettingsPlugin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|IMMEDIATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|NONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|IndexShardIT
specifier|public
class|class
name|IndexShardIT
extends|extends
name|ESSingleNodeTestCase
block|{
annotation|@
name|Override
DECL|method|getPlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|getPlugins
parameter_list|()
block|{
return|return
name|pluginList
argument_list|(
name|InternalSettingsPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|testParsedDocument
specifier|private
name|ParsedDocument
name|testParsedDocument
parameter_list|(
name|String
name|uid
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|routing
parameter_list|,
name|long
name|seqNo
parameter_list|,
name|ParseContext
operator|.
name|Document
name|document
parameter_list|,
name|BytesReference
name|source
parameter_list|,
name|Mapping
name|mappingUpdate
parameter_list|)
block|{
name|Field
name|uidField
init|=
operator|new
name|Field
argument_list|(
literal|"_uid"
argument_list|,
name|uid
argument_list|,
name|UidFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
decl_stmt|;
name|Field
name|seqNoField
init|=
operator|new
name|NumericDocValuesField
argument_list|(
literal|"_seq_no"
argument_list|,
name|seqNo
argument_list|)
decl_stmt|;
name|Field
name|versionField
init|=
operator|new
name|NumericDocValuesField
argument_list|(
literal|"_version"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|uidField
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|versionField
argument_list|)
expr_stmt|;
return|return
operator|new
name|ParsedDocument
argument_list|(
name|versionField
argument_list|,
name|seqNoField
argument_list|,
name|id
argument_list|,
name|type
argument_list|,
name|routing
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|document
argument_list|)
argument_list|,
name|source
argument_list|,
name|mappingUpdate
argument_list|)
return|;
block|}
DECL|method|testLockTryingToDelete
specifier|public
name|void
name|testLockTryingToDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|NodeEnvironment
name|env
init|=
name|getInstanceFromNode
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClusterService
name|cs
init|=
name|getInstanceFromNode
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Index
name|index
init|=
name|cs
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|Path
index|[]
name|shardPaths
init|=
name|env
operator|.
name|availableShardPaths
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> paths: [{}]"
argument_list|,
operator|(
name|Object
operator|)
name|shardPaths
argument_list|)
expr_stmt|;
comment|// Should not be able to acquire the lock because it's already open
try|try
block|{
name|NodeEnvironment
operator|.
name|acquireFSLockForPaths
argument_list|(
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
literal|"test"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|shardPaths
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not have been able to acquire the lock"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"msg: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"unable to acquire write.lock"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test without the regular shard lock to assume we can acquire it
comment|// (worst case, meaning that the shard lock could be acquired and
comment|// we're green to delete the shard's directory)
name|ShardLock
name|sLock
init|=
operator|new
name|DummyShardLock
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|env
operator|.
name|deleteShardDirectoryUnderLock
argument_list|(
name|sLock
argument_list|,
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
literal|"test"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not have been able to delete the directory"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"msg: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"unable to acquire write.lock"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMarkAsInactiveTriggersSyncedFlush
specifier|public
name|void
name|testMarkAsInactiveTriggersSyncedFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
operator|.
name|checkIdle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
name|IndexStats
name|indexStats
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"test"
argument_list|)
operator|.
name|clear
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|indexStats
operator|.
name|getShards
argument_list|()
index|[
literal|0
index|]
operator|.
name|getCommitStats
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
operator|.
name|checkIdle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|IndexStats
name|indexStats
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|indexStats
operator|.
name|getShards
argument_list|()
index|[
literal|0
index|]
operator|.
name|getCommitStats
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDurableFlagHasEffect
specifier|public
name|void
name|testDurableFlagHasEffect
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durability
operator|.
name|REQUEST
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ShardUtilsTests
operator|.
name|getShardEngine
argument_list|(
name|shard
argument_list|)
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durability
operator|.
name|ASYNC
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ShardUtilsTests
operator|.
name|getShardEngine
argument_list|(
name|shard
argument_list|)
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durability
operator|.
name|REQUEST
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|ShardUtilsTests
operator|.
name|getShardEngine
argument_list|(
name|shard
argument_list|)
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durability
operator|.
name|ASYNC
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ShardUtilsTests
operator|.
name|getShardEngine
argument_list|(
name|shard
argument_list|)
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durability
operator|.
name|REQUEST
argument_list|)
expr_stmt|;
name|assertNoFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ShardUtilsTests
operator|.
name|getShardEngine
argument_list|(
name|shard
argument_list|)
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durability
operator|.
name|ASYNC
argument_list|)
expr_stmt|;
name|assertNoFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durability
operator|.
name|REQUEST
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ShardUtilsTests
operator|.
name|getShardEngine
argument_list|(
name|shard
argument_list|)
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setDurability
specifier|private
name|void
name|setDurability
parameter_list|(
name|IndexShard
name|shard
parameter_list|,
name|Translog
operator|.
name|Durability
name|durability
parameter_list|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
operator|.
name|getIndexName
argument_list|()
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|INDEX_TRANSLOG_DURABILITY_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|durability
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|durability
argument_list|,
name|shard
operator|.
name|getTranslogDurability
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testUpdatePriority
specifier|public
name|void
name|testUpdatePriority
parameter_list|()
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_PRIORITY
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|IndexService
name|indexService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|indexService
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getSettings
argument_list|()
operator|.
name|getAsInt
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_PRIORITY
argument_list|,
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_PRIORITY
argument_list|,
literal|400
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|indexService
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getSettings
argument_list|()
operator|.
name|getAsInt
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_PRIORITY
argument_list|,
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexDirIsDeletedWhenShardRemoved
specifier|public
name|void
name|testIndexDirIsDeletedWhenShardRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|getInstanceFromNode
argument_list|(
name|Environment
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|idxPath
init|=
name|env
operator|.
name|sharedDataFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> idxPath: [{}]"
argument_list|,
name|idxPath
argument_list|)
expr_stmt|;
name|Settings
name|idxSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|idxPath
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|idxSettings
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|IMMEDIATE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertAllIndicesRemovedAndDeletionCompleted
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathHasBeenCleared
argument_list|(
name|idxPath
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpectedShardSizeIsPresent
specifier|public
name|void
name|testExpectedShardSizeIsPresent
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|InternalClusterInfoService
name|clusterInfoService
init|=
operator|(
name|InternalClusterInfoService
operator|)
name|getInstanceFromNode
argument_list|(
name|ClusterInfoService
operator|.
name|class
argument_list|)
decl_stmt|;
name|clusterInfoService
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|ClusterState
name|state
init|=
name|getInstanceFromNode
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
operator|.
name|state
argument_list|()
decl_stmt|;
name|Long
name|test
init|=
name|clusterInfoService
operator|.
name|getClusterInfo
argument_list|()
operator|.
name|getShardSize
argument_list|(
name|state
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexCanChangeCustomDataPath
specifier|public
name|void
name|testIndexCanChangeCustomDataPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|getInstanceFromNode
argument_list|(
name|Environment
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|idxPath
init|=
name|env
operator|.
name|sharedDataFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|INDEX
init|=
literal|"idx"
decl_stmt|;
name|Path
name|startDir
init|=
name|idxPath
operator|.
name|resolve
argument_list|(
literal|"start-"
operator|+
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|endDir
init|=
name|idxPath
operator|.
name|resolve
argument_list|(
literal|"end-"
operator|+
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start dir: [{}]"
argument_list|,
name|startDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"-->   end dir: [{}]"
argument_list|,
name|endDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// temp dirs are automatically created, but the end dir is what
comment|// startDir is going to be renamed as, so it needs to be deleted
comment|// otherwise we get all sorts of errors about the directory
comment|// already existing
name|IOUtils
operator|.
name|rm
argument_list|(
name|endDir
argument_list|)
expr_stmt|;
name|Settings
name|sb
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|startDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Settings
name|sb2
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|endDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating an index with data_path [{}]"
argument_list|,
name|startDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
name|INDEX
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|INDEX
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
literal|"bar"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|IMMEDIATE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"found the hit"
argument_list|,
name|resp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> closing the index [{}]"
argument_list|,
name|INDEX
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClose
argument_list|(
name|INDEX
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> index closed, re-opening..."
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOpen
argument_list|(
name|INDEX
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> index re-opened"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|INDEX
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"found the hit"
argument_list|,
name|resp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now, try closing and changing the settings
name|logger
operator|.
name|info
argument_list|(
literal|"--> closing the index [{}]"
argument_list|,
name|INDEX
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClose
argument_list|(
name|INDEX
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> moving data on disk [{}] to [{}]"
argument_list|,
name|startDir
operator|.
name|getFileName
argument_list|()
argument_list|,
name|endDir
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|Files
operator|.
name|exists
argument_list|(
name|endDir
argument_list|)
operator|==
literal|false
operator|:
literal|"end directory should not exist!"
assert|;
name|Files
operator|.
name|move
argument_list|(
name|startDir
argument_list|,
name|endDir
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> updating settings..."
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|sb2
argument_list|)
operator|.
name|setIndicesOptions
argument_list|(
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
assert|assert
name|Files
operator|.
name|exists
argument_list|(
name|startDir
argument_list|)
operator|==
literal|false
operator|:
literal|"start dir shouldn't exist"
assert|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> settings updated and files moved, re-opening index"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOpen
argument_list|(
name|INDEX
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> index re-opened"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|INDEX
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"found the hit"
argument_list|,
name|resp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|INDEX
argument_list|)
argument_list|)
expr_stmt|;
name|assertAllIndicesRemovedAndDeletionCompleted
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathHasBeenCleared
argument_list|(
name|startDir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertPathHasBeenCleared
argument_list|(
name|endDir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMaybeFlush
specifier|public
name|void
name|testMaybeFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|INDEX_TRANSLOG_DURABILITY_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|Translog
operator|.
name|Durability
operator|.
name|REQUEST
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|shard
operator|.
name|shouldFlush
argument_list|()
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|117
comment|/* size of the operation + header&footer*/
argument_list|,
name|ByteSizeUnit
operator|.
name|BYTES
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|randomBoolean
argument_list|()
condition|?
name|IMMEDIATE
else|:
name|NONE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|shard
operator|.
name|shouldFlush
argument_list|()
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|,
operator|new
name|ParseContext
operator|.
name|Document
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|shard
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|shard
operator|.
name|shouldFlush
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|randomBoolean
argument_list|()
condition|?
name|IMMEDIATE
else|:
name|NONE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
comment|// this is async
name|assertFalse
argument_list|(
name|shard
operator|.
name|shouldFlush
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|)
expr_stmt|;
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|sync
argument_list|()
expr_stmt|;
name|long
name|size
init|=
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|sizeInBytes
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> current translog size: [{}] num_ops [{}] generation [{}]"
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|size
argument_list|,
name|ByteSizeUnit
operator|.
name|BYTES
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> translog size after delete: [{}] num_ops [{}] generation [{}]"
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
comment|// this is async
name|logger
operator|.
name|info
argument_list|(
literal|"--> translog size on iter  : [{}] num_ops [{}] generation [{}]"
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|shard
operator|.
name|shouldFlush
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStressMaybeFlush
specifier|public
name|void
name|testStressMaybeFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|shard
operator|.
name|shouldFlush
argument_list|()
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|117
comment|/* size of the operation + header&footer*/
argument_list|,
name|ByteSizeUnit
operator|.
name|BYTES
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|randomBoolean
argument_list|()
condition|?
name|IMMEDIATE
else|:
name|NONE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|shard
operator|.
name|shouldFlush
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|running
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numThreads
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|numThreads
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|BrokenBarrierException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
while|while
condition|(
name|running
operator|.
name|get
argument_list|()
condition|)
block|{
name|shard
operator|.
name|maybeFlush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|FlushStats
name|flushStats
init|=
name|shard
operator|.
name|flushStats
argument_list|()
decl_stmt|;
name|long
name|total
init|=
name|flushStats
operator|.
name|getTotal
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
name|assertEquals
argument_list|(
name|total
operator|+
literal|1
argument_list|,
name|shard
operator|.
name|flushStats
argument_list|()
operator|.
name|getTotal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|running
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|total
operator|+
literal|1
argument_list|,
name|shard
operator|.
name|flushStats
argument_list|()
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testShardHasMemoryBufferOnTranslogRecover
specifier|public
name|void
name|testShardHasMemoryBufferOnTranslogRecover
parameter_list|()
throws|throws
name|Throwable
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|indexService
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"foo\" : \"bar\"}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"foo\" : \"bar\"}"
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|IMMEDIATE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|IndexSearcherWrapper
name|wrapper
init|=
operator|new
name|IndexSearcherWrapper
argument_list|()
block|{}
decl_stmt|;
name|shard
operator|.
name|close
argument_list|(
literal|"simon says"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AtomicReference
argument_list|<
name|IndexShard
argument_list|>
name|shardRef
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Exception
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|IndexingOperationListener
name|listener
init|=
operator|new
name|IndexingOperationListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|postIndex
parameter_list|(
name|Engine
operator|.
name|Index
name|index
parameter_list|,
name|Engine
operator|.
name|IndexResult
name|result
parameter_list|)
block|{
try|try
block|{
name|assertNotNull
argument_list|(
name|shardRef
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// this is all IMC needs to do - check current memory and refresh
name|assertTrue
argument_list|(
name|shardRef
operator|.
name|get
argument_list|()
operator|.
name|getIndexBufferRAMBytesUsed
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|shardRef
operator|.
name|get
argument_list|()
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDelete
parameter_list|(
name|Engine
operator|.
name|Delete
name|delete
parameter_list|,
name|Engine
operator|.
name|DeleteResult
name|result
parameter_list|)
block|{
try|try
block|{
name|assertNotNull
argument_list|(
name|shardRef
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// this is all IMC needs to do - check current memory and refresh
name|assertTrue
argument_list|(
name|shardRef
operator|.
name|get
argument_list|()
operator|.
name|getIndexBufferRAMBytesUsed
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|shardRef
operator|.
name|get
argument_list|()
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
decl_stmt|;
specifier|final
name|IndexShard
name|newShard
init|=
name|newIndexShard
argument_list|(
name|indexService
argument_list|,
name|shard
argument_list|,
name|wrapper
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|shardRef
operator|.
name|set
argument_list|(
name|newShard
argument_list|)
expr_stmt|;
name|recoverShard
argument_list|(
name|newShard
argument_list|)
expr_stmt|;
try|try
block|{
name|ExceptionsHelper
operator|.
name|rethrowAndSuppress
argument_list|(
name|failures
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|newShard
operator|.
name|close
argument_list|(
literal|"just do it"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|recoverShard
specifier|public
specifier|static
specifier|final
name|IndexShard
name|recoverShard
parameter_list|(
name|IndexShard
name|newShard
parameter_list|)
throws|throws
name|IOException
block|{
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"foo"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|newShard
operator|.
name|markAsRecovering
argument_list|(
literal|"store"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|newShard
operator|.
name|routingEntry
argument_list|()
argument_list|,
name|localNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newShard
operator|.
name|recoverFromStore
argument_list|()
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|updateRoutingEntry
argument_list|(
name|newShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|moveToStarted
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newShard
return|;
block|}
DECL|method|newIndexShard
specifier|public
specifier|static
specifier|final
name|IndexShard
name|newIndexShard
parameter_list|(
name|IndexService
name|indexService
parameter_list|,
name|IndexShard
name|shard
parameter_list|,
name|IndexSearcherWrapper
name|wrapper
parameter_list|,
name|IndexingOperationListener
modifier|...
name|listeners
parameter_list|)
throws|throws
name|IOException
block|{
name|ShardRouting
name|initializingShardRouting
init|=
name|getInitializingShardRouting
argument_list|(
name|shard
operator|.
name|routingEntry
argument_list|()
argument_list|)
decl_stmt|;
name|IndexShard
name|newShard
init|=
operator|new
name|IndexShard
argument_list|(
name|initializingShardRouting
argument_list|,
name|indexService
operator|.
name|getIndexSettings
argument_list|()
argument_list|,
name|shard
operator|.
name|shardPath
argument_list|()
argument_list|,
name|shard
operator|.
name|store
argument_list|()
argument_list|,
name|indexService
operator|.
name|cache
argument_list|()
argument_list|,
name|indexService
operator|.
name|mapperService
argument_list|()
argument_list|,
name|indexService
operator|.
name|similarityService
argument_list|()
argument_list|,
name|indexService
operator|.
name|fieldData
argument_list|()
argument_list|,
name|shard
operator|.
name|getEngineFactory
argument_list|()
argument_list|,
name|indexService
operator|.
name|getIndexEventListener
argument_list|()
argument_list|,
name|wrapper
argument_list|,
name|indexService
operator|.
name|getThreadPool
argument_list|()
argument_list|,
name|indexService
operator|.
name|getBigArrays
argument_list|()
argument_list|,
literal|null
argument_list|,
parameter_list|()
lambda|->
block|{}
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|listeners
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|newShard
return|;
block|}
DECL|method|getInitializingShardRouting
specifier|private
specifier|static
name|ShardRouting
name|getInitializingShardRouting
parameter_list|(
name|ShardRouting
name|existingShardRouting
parameter_list|)
block|{
name|ShardRouting
name|shardRouting
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|existingShardRouting
operator|.
name|shardId
argument_list|()
argument_list|,
name|existingShardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|existingShardRouting
operator|.
name|primary
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|existingShardRouting
operator|.
name|allocationId
argument_list|()
argument_list|)
decl_stmt|;
name|shardRouting
operator|=
name|shardRouting
operator|.
name|updateUnassigned
argument_list|(
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|INDEX_REOPENED
argument_list|,
literal|"fake recovery"
argument_list|)
argument_list|,
name|RecoverySource
operator|.
name|StoreRecoverySource
operator|.
name|EXISTING_STORE_INSTANCE
argument_list|)
expr_stmt|;
return|return
name|shardRouting
return|;
block|}
block|}
end_class

end_unit

