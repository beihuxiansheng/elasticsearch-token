begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPoolStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_class
DECL|class|IndexShardOperationPermitsTests
specifier|public
class|class
name|IndexShardOperationPermitsTests
extends|extends
name|ESTestCase
block|{
DECL|field|threadPool
specifier|private
specifier|static
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|permits
specifier|private
name|IndexShardOperationPermits
name|permits
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupThreadPool
specifier|public
specifier|static
name|void
name|setupThreadPool
parameter_list|()
block|{
name|threadPool
operator|=
operator|new
name|TestThreadPool
argument_list|(
literal|"IndexShardOperationsLockTests"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdownThreadPool
specifier|public
specifier|static
name|void
name|shutdownThreadPool
parameter_list|()
block|{
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|threadPool
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|threadPool
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|createIndexShardOperationsLock
specifier|public
name|void
name|createIndexShardOperationsLock
parameter_list|()
block|{
name|permits
operator|=
operator|new
name|IndexShardOperationPermits
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"blubb"
argument_list|,
literal|"id"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|logger
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|checkNoInflightOperations
specifier|public
name|void
name|checkNoInflightOperations
parameter_list|()
block|{
name|assertThat
argument_list|(
name|permits
operator|.
name|semaphore
operator|.
name|availablePermits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permits
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAllOperationsInvoked
specifier|public
name|void
name|testAllOperationsInvoked
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|ExecutionException
block|{
name|int
name|numThreads
init|=
literal|10
decl_stmt|;
name|List
argument_list|<
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|operationThreads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numThreads
operator|/
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
name|future
init|=
operator|new
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Releasable
name|releasable
parameter_list|)
block|{
name|releasable
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|onResponse
argument_list|(
name|releasable
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|permits
operator|.
name|acquire
argument_list|(
name|future
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|operationThreads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
name|CountDownLatch
name|blockFinished
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|blockAndWait
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|blockFinished
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|operationThreads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|assertNotNull
argument_list|(
name|future
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|operationThreads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|blockFinished
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
DECL|method|testOperationsInvokedImmediatelyIfNoBlock
specifier|public
name|void
name|testOperationsInvokedImmediatelyIfNoBlock
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
name|future
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|permits
operator|.
name|acquire
argument_list|(
name|future
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|get
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testOperationsIfClosed
specifier|public
name|void
name|testOperationsIfClosed
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
name|future
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|permits
operator|.
name|close
argument_list|()
expr_stmt|;
name|permits
operator|.
name|acquire
argument_list|(
name|future
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ExecutionException
name|exception
init|=
name|expectThrows
argument_list|(
name|ExecutionException
operator|.
name|class
argument_list|,
name|future
operator|::
name|get
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IndexShardClosedException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBlockIfClosed
specifier|public
name|void
name|testBlockIfClosed
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|permits
operator|.
name|close
argument_list|()
expr_stmt|;
name|expectThrows
argument_list|(
name|IndexShardClosedException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|permits
operator|.
name|blockOperations
argument_list|(
name|randomInt
argument_list|(
literal|10
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
parameter_list|()
lambda|->
block|{
throw|throw
argument_list|new
name|IllegalArgumentException
argument_list|(
literal|"fake error"
argument_list|)
argument_list|;
block|}
block|)
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
DECL|method|testOperationsDelayedIfBlock
name|void
name|testOperationsDelayedIfBlock
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
name|future
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|Releasable
name|ignored
init|=
name|blockAndWait
argument_list|()
init|)
block|{
name|permits
operator|.
name|acquire
argument_list|(
name|future
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|future
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Tests that the ThreadContext is restored when a operation is executed after it has been delayed due to a block      */
end_comment

begin_function
DECL|method|testThreadContextPreservedIfBlock
specifier|public
name|void
name|testThreadContextPreservedIfBlock
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
specifier|final
name|ThreadContext
name|context
init|=
name|threadPool
operator|.
name|getThreadContext
argument_list|()
decl_stmt|;
specifier|final
name|Function
argument_list|<
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
argument_list|,
name|Boolean
argument_list|>
name|contextChecker
init|=
parameter_list|(
name|listener
parameter_list|)
lambda|->
block|{
if|if
condition|(
literal|"bar"
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|==
literal|false
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"context did not have value [bar] for header [foo]. Actual value ["
operator|+
name|context
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"baz"
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getTransient
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
operator|==
literal|false
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"context did not have value [baz] for transient [bar]. Actual value ["
operator|+
name|context
operator|.
name|getTransient
argument_list|(
literal|"bar"
argument_list|)
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
name|future
init|=
operator|new
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Releasable
name|releasable
parameter_list|)
block|{
if|if
condition|(
name|contextChecker
operator|.
name|apply
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|super
operator|.
name|onResponse
argument_list|(
name|releasable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
name|future2
init|=
operator|new
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Releasable
name|releasable
parameter_list|)
block|{
if|if
condition|(
name|contextChecker
operator|.
name|apply
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|super
operator|.
name|onResponse
argument_list|(
name|releasable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
try|try
init|(
name|Releasable
name|ignored
init|=
name|blockAndWait
argument_list|()
init|)
block|{
comment|// we preserve the thread context here so that we have a different context in the call to acquire than the context present
comment|// when the releasable is closed
try|try
init|(
name|ThreadContext
operator|.
name|StoredContext
name|ignore
init|=
name|context
operator|.
name|newStoredContext
argument_list|(
literal|false
argument_list|)
init|)
block|{
name|context
operator|.
name|putHeader
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|context
operator|.
name|putTransient
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
comment|// test both with and without a executor name
name|permits
operator|.
name|acquire
argument_list|(
name|future
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|permits
operator|.
name|acquire
argument_list|(
name|future2
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|future
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|future2
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|blockAndWait
specifier|protected
name|Releasable
name|blockAndWait
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|CountDownLatch
name|blockAcquired
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|releaseBlock
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|blockReleased
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|throwsException
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|IndexShardClosedException
name|exception
init|=
operator|new
name|IndexShardClosedException
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"blubb"
argument_list|,
literal|"id"
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|permits
operator|.
name|blockOperations
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
block|{
name|blockAcquired
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|releaseBlock
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|throwsException
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|!=
name|exception
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|blockReleased
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|blockAcquired
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
parameter_list|()
lambda|->
block|{
name|releaseBlock
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|blockReleased
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|;
block|}
end_function

begin_function
DECL|method|testAsyncBlockOperationsOperationWhileBlocked
specifier|public
name|void
name|testAsyncBlockOperationsOperationWhileBlocked
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|CountDownLatch
name|blockAcquired
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|releaseBlock
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|blocked
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|permits
operator|.
name|asyncBlockOperations
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
parameter_list|()
lambda|->
block|{
name|blocked
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|blockAcquired
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|releaseBlock
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
argument_list|,
name|e
lambda|->
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
name|blockAcquired
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|blocked
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// an operation that is submitted while there is a delay in place should be delayed
specifier|final
name|CountDownLatch
name|delayedOperation
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|delayed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
name|permits
operator|.
name|acquire
argument_list|(
operator|new
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
argument_list|()
block|{
block|@Override                             public void onResponse(Releasable releasable
argument_list|)
block|{
name|delayed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
block|;
name|releasable
operator|.
name|close
argument_list|()
block|;
name|delayedOperation
operator|.
name|countDown
argument_list|()
block|;                             }
expr|@
name|Override
specifier|public
name|void
name|onFailure
argument_list|(
name|Exception
name|e
argument_list|)
block|{                              }
block|}
end_function

begin_operator
operator|,
end_operator

begin_expr_stmt
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
operator|,
literal|false
end_expr_stmt

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertFalse
argument_list|(
name|delayed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|releaseBlock
operator|.
name|countDown
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|delayedOperation
operator|.
name|await
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|delayed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
end_expr_stmt

begin_function
unit|}      public
DECL|method|testAsyncBlockOperationsOperationBeforeBlocked
name|void
name|testAsyncBlockOperationsOperationBeforeBlocked
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|BrokenBarrierException
block|{
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|operationExecutingLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|firstOperationLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|firstOperationCompleteLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Thread
name|firstOperationThread
init|=
operator|new
name|Thread
argument_list|(
name|controlledAcquire
argument_list|(
name|barrier
argument_list|,
name|operationExecutingLatch
argument_list|,
name|firstOperationLatch
argument_list|,
name|firstOperationCompleteLatch
argument_list|)
argument_list|)
decl_stmt|;
name|firstOperationThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|operationExecutingLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// now we will delay operations while the first operation is still executing (because it is latched)
specifier|final
name|CountDownLatch
name|blockedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|onBlocked
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|permits
operator|.
name|asyncBlockOperations
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
parameter_list|()
lambda|->
block|{
name|onBlocked
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|blockedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
argument_list|,
name|e
lambda|->
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|onBlocked
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// if we submit another operation, it should be delayed
specifier|final
name|CountDownLatch
name|secondOperationExecuting
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|secondOperationComplete
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|secondOperation
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|Thread
name|secondOperationThread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|secondOperationExecuting
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|permits
operator|.
name|acquire
argument_list|(
operator|new
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Releasable
name|releasable
parameter_list|)
block|{
name|secondOperation
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|releasable
operator|.
name|close
argument_list|()
expr_stmt|;
name|secondOperationComplete
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|secondOperationThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|secondOperationExecuting
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|secondOperation
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|firstOperationLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|firstOperationCompleteLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|blockedLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|onBlocked
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|secondOperationComplete
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|secondOperation
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|firstOperationThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|secondOperationThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testAsyncBlockOperationsRace
specifier|public
name|void
name|testAsyncBlockOperationsRace
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we racily submit operations and a delay, and then ensure that all operations were actually completed
specifier|final
name|int
name|operations
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|64
argument_list|)
decl_stmt|;
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|1
operator|+
literal|1
operator|+
name|operations
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|operationLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
operator|+
name|operations
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|values
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operations
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|value
init|=
name|i
decl_stmt|;
specifier|final
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|BrokenBarrierException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|permits
operator|.
name|acquire
argument_list|(
operator|new
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Releasable
name|releasable
parameter_list|)
block|{
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|releasable
operator|.
name|close
argument_list|()
expr_stmt|;
name|operationLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                              }
block|}
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Thread
name|blockingThread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|BrokenBarrierException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|permits
operator|.
name|asyncBlockOperations
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
parameter_list|()
lambda|->
block|{
name|values
operator|.
name|add
argument_list|(
name|operations
argument_list|)
expr_stmt|;
name|operationLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
argument_list|,
name|e
lambda|->
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|blockingThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|operationLatch
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|blockingThread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// check that all operations completed
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operations
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|values
operator|.
name|contains
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|values
operator|.
name|contains
argument_list|(
name|operations
argument_list|)
argument_list|)
expr_stmt|;
comment|/*          * The block operation is executed on another thread and the operations can have completed before this thread has returned all the          * permits to the semaphore. We wait here until all generic threads are idle as an indication that all permits have been returned to          * the semaphore.          */
name|awaitBusy
argument_list|(
parameter_list|()
lambda|->
block|{
for|for
control|(
specifier|final
name|ThreadPoolStats
operator|.
name|Stats
name|stats
range|:
name|threadPool
operator|.
name|stats
argument_list|()
control|)
block|{
if|if
condition|(
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
operator|.
name|equals
argument_list|(
name|stats
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|stats
operator|.
name|getActive
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testActiveOperationsCount
specifier|public
name|void
name|testActiveOperationsCount
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
name|future1
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|permits
operator|.
name|acquire
argument_list|(
name|future1
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future1
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permits
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
name|future2
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|permits
operator|.
name|acquire
argument_list|(
name|future2
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future2
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permits
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|future1
operator|.
name|get
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permits
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|future1
operator|.
name|get
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// check idempotence
name|assertThat
argument_list|(
name|permits
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|future2
operator|.
name|get
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permits
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Releasable
name|releasable
init|=
name|blockAndWait
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|permits
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
name|future3
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|permits
operator|.
name|acquire
argument_list|(
name|future3
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future3
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permits
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|future3
operator|.
name|get
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permits
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testAsyncBlockOperationsOnFailure
specifier|public
name|void
name|testAsyncBlockOperationsOnFailure
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|reference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|onFailureLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|permits
operator|.
name|asyncBlockOperations
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
parameter_list|()
lambda|->
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"simulated"
argument_list|)
throw|;
block|}
argument_list|,
name|e
lambda|->
block|{
name|reference
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|onFailureLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|onFailureLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|reference
operator|.
name|get
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reference
operator|.
name|get
argument_list|()
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"simulated"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testTimeout
specifier|public
name|void
name|testTimeout
parameter_list|()
throws|throws
name|BrokenBarrierException
throws|,
name|InterruptedException
block|{
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|operationExecutingLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|operationLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|operationCompleteLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|controlledAcquire
argument_list|(
name|barrier
argument_list|,
name|operationExecutingLatch
argument_list|,
name|operationLatch
argument_list|,
name|operationCompleteLatch
argument_list|)
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|operationExecutingLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|{
specifier|final
name|TimeoutException
name|e
init|=
name|expectThrows
argument_list|(
name|TimeoutException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|permits
operator|.
name|blockOperations
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
parameter_list|()
lambda|->
block|{}
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"timeout while blocking operations"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|reference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|onFailureLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|permits
operator|.
name|asyncBlockOperations
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
parameter_list|()
lambda|->
block|{}
argument_list|,
name|e
lambda|->
block|{
name|reference
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|onFailureLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|onFailureLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|reference
operator|.
name|get
argument_list|()
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"timeout while blocking operations"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|operationLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|operationCompleteLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Returns an operation that acquires a permit and synchronizes in the following manner:      *<ul>      *<li>waits on the {@code barrier} before acquiring a permit</li>      *<li>counts down the {@code operationExecutingLatch} when it acquires the permit</li>      *<li>waits on the {@code operationLatch} before releasing the permit</li>      *<li>counts down the {@code operationCompleteLatch} after releasing the permit</li>      *</ul>      *      * @param barrier                 the barrier to wait on      * @param operationExecutingLatch the latch to countdown after acquiring the permit      * @param operationLatch          the latch to wait on before releasing the permit      * @param operationCompleteLatch  the latch to countdown after releasing the permit      * @return a controllable runnable that acquires a permit      */
end_comment

begin_function
DECL|method|controlledAcquire
specifier|private
name|Runnable
name|controlledAcquire
parameter_list|(
specifier|final
name|CyclicBarrier
name|barrier
parameter_list|,
specifier|final
name|CountDownLatch
name|operationExecutingLatch
parameter_list|,
specifier|final
name|CountDownLatch
name|operationLatch
parameter_list|,
specifier|final
name|CountDownLatch
name|operationCompleteLatch
parameter_list|)
block|{
return|return
parameter_list|()
lambda|->
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|BrokenBarrierException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|permits
operator|.
name|acquire
argument_list|(
operator|new
name|ActionListener
argument_list|<
name|Releasable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Releasable
name|releasable
parameter_list|)
block|{
name|operationExecutingLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|operationLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|releasable
operator|.
name|close
argument_list|()
expr_stmt|;
name|operationCompleteLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|;
block|}
end_function

unit|}
end_unit

