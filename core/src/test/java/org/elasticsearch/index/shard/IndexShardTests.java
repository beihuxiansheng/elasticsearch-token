begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|flush
operator|.
name|FlushRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|CommonStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|CommonStatsFlags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|ShardStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|RepositoryMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|AllocationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|TestShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldDataStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParsedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardSnapshotStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesQueryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|IndexId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotShardFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|DummyShardLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|FieldMaskingReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
operator|.
name|cleanLuceneIndex
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
operator|.
name|EMPTY_PARAMS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasKey
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_comment
comment|/**  * Simple unit-test IndexShard related operations.  */
end_comment

begin_class
DECL|class|IndexShardTests
specifier|public
class|class
name|IndexShardTests
extends|extends
name|IndexShardTestCase
block|{
DECL|method|load
specifier|public
specifier|static
name|ShardStateMetaData
name|load
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|Path
modifier|...
name|shardPaths
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ShardStateMetaData
operator|.
name|FORMAT
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|shardPaths
argument_list|)
return|;
block|}
DECL|method|write
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|ShardStateMetaData
name|shardStateMetaData
parameter_list|,
name|Path
modifier|...
name|shardPaths
parameter_list|)
throws|throws
name|IOException
block|{
name|ShardStateMetaData
operator|.
name|FORMAT
operator|.
name|write
argument_list|(
name|shardStateMetaData
argument_list|,
name|shardPaths
argument_list|)
expr_stmt|;
block|}
DECL|method|getEngineFromShard
specifier|public
specifier|static
name|Engine
name|getEngineFromShard
parameter_list|(
name|IndexShard
name|shard
parameter_list|)
block|{
return|return
name|shard
operator|.
name|getEngineOrNull
argument_list|()
return|;
block|}
DECL|method|testWriteShardState
specifier|public
name|void
name|testWriteShardState
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|NodeEnvironment
name|env
init|=
name|newNodeEnvironment
argument_list|()
init|)
block|{
name|ShardId
name|id
init|=
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|"fooUUID"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|long
name|version
init|=
name|between
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|/
literal|2
argument_list|)
decl_stmt|;
name|boolean
name|primary
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|AllocationId
name|allocationId
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
name|randomAllocationId
argument_list|()
decl_stmt|;
name|ShardStateMetaData
name|state1
init|=
operator|new
name|ShardStateMetaData
argument_list|(
name|version
argument_list|,
name|primary
argument_list|,
literal|"fooUUID"
argument_list|,
name|allocationId
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|state1
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|ShardStateMetaData
name|shardStateMetaData
init|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|state1
argument_list|)
expr_stmt|;
name|ShardStateMetaData
name|state2
init|=
operator|new
name|ShardStateMetaData
argument_list|(
name|version
argument_list|,
name|primary
argument_list|,
literal|"fooUUID"
argument_list|,
name|allocationId
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|state2
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|shardStateMetaData
operator|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|state1
argument_list|)
expr_stmt|;
name|ShardStateMetaData
name|state3
init|=
operator|new
name|ShardStateMetaData
argument_list|(
name|version
operator|+
literal|1
argument_list|,
name|primary
argument_list|,
literal|"fooUUID"
argument_list|,
name|allocationId
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|state3
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|shardStateMetaData
operator|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|state3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fooUUID"
argument_list|,
name|state3
operator|.
name|indexUUID
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPersistenceStateMetadataPersistence
specifier|public
name|void
name|testPersistenceStateMetadataPersistence
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|shardStatePath
init|=
name|shard
operator|.
name|shardPath
argument_list|()
operator|.
name|getShardStatePath
argument_list|()
decl_stmt|;
name|ShardStateMetaData
name|shardStateMetaData
init|=
name|load
argument_list|(
name|logger
argument_list|,
name|shardStatePath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getShardStateMetadata
argument_list|(
name|shard
argument_list|)
argument_list|,
name|shardStateMetaData
argument_list|)
expr_stmt|;
name|ShardRouting
name|routing
init|=
name|shard
operator|.
name|shardRouting
decl_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|shardStateMetaData
operator|=
name|load
argument_list|(
name|logger
argument_list|,
name|shardStatePath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|getShardStateMetadata
argument_list|(
name|shard
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
operator|new
name|ShardStateMetaData
argument_list|(
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|shard
operator|.
name|indexSettings
argument_list|()
operator|.
name|getUUID
argument_list|()
argument_list|,
name|routing
operator|.
name|allocationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|routing
operator|=
name|TestShardRouting
operator|.
name|relocate
argument_list|(
name|shard
operator|.
name|shardRouting
argument_list|,
literal|"some node"
argument_list|,
literal|42L
argument_list|)
expr_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|shardStateMetaData
operator|=
name|load
argument_list|(
name|logger
argument_list|,
name|shardStatePath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|getShardStateMetadata
argument_list|(
name|shard
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
operator|new
name|ShardStateMetaData
argument_list|(
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|shard
operator|.
name|indexSettings
argument_list|()
operator|.
name|getUUID
argument_list|()
argument_list|,
name|routing
operator|.
name|allocationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailShard
specifier|public
name|void
name|testFailShard
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|()
decl_stmt|;
specifier|final
name|ShardPath
name|shardPath
init|=
name|shard
operator|.
name|shardPath
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|shardPath
argument_list|)
expr_stmt|;
comment|// fail shard
name|shard
operator|.
name|failShard
argument_list|(
literal|"test shard fail"
argument_list|,
operator|new
name|CorruptIndexException
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
comment|// check state file still exists
name|ShardStateMetaData
name|shardStateMetaData
init|=
name|load
argument_list|(
name|logger
argument_list|,
name|shardPath
operator|.
name|getShardStatePath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|getShardStateMetadata
argument_list|(
name|shard
argument_list|)
argument_list|)
expr_stmt|;
comment|// but index can't be opened for a failed shard
name|assertThat
argument_list|(
literal|"store index should be corrupted"
argument_list|,
name|Store
operator|.
name|canOpenIndex
argument_list|(
name|logger
argument_list|,
name|shardPath
operator|.
name|resolveIndex
argument_list|()
argument_list|,
name|shard
operator|.
name|shardId
argument_list|()
argument_list|,
parameter_list|(
name|shardId
parameter_list|,
name|lockTimeoutMS
parameter_list|)
lambda|->
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getShardStateMetadata
name|ShardStateMetaData
name|getShardStateMetadata
parameter_list|(
name|IndexShard
name|shard
parameter_list|)
block|{
name|ShardRouting
name|shardRouting
init|=
name|shard
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|shardRouting
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|ShardStateMetaData
argument_list|(
name|shardRouting
operator|.
name|primary
argument_list|()
argument_list|,
name|shard
operator|.
name|indexSettings
argument_list|()
operator|.
name|getUUID
argument_list|()
argument_list|,
name|shardRouting
operator|.
name|allocationId
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|randomAllocationId
specifier|private
name|AllocationId
name|randomAllocationId
parameter_list|()
block|{
name|AllocationId
name|allocationId
init|=
name|AllocationId
operator|.
name|newInitializing
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|allocationId
operator|=
name|AllocationId
operator|.
name|newRelocation
argument_list|(
name|allocationId
argument_list|)
expr_stmt|;
block|}
return|return
name|allocationId
return|;
block|}
DECL|method|testShardStateMetaHashCodeEquals
specifier|public
name|void
name|testShardStateMetaHashCodeEquals
parameter_list|()
block|{
name|AllocationId
name|allocationId
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
name|randomAllocationId
argument_list|()
decl_stmt|;
name|ShardStateMetaData
name|meta
init|=
operator|new
name|ShardStateMetaData
argument_list|(
name|randomLong
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|allocationId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|meta
argument_list|,
operator|new
name|ShardStateMetaData
argument_list|(
name|meta
operator|.
name|legacyVersion
argument_list|,
name|meta
operator|.
name|primary
argument_list|,
name|meta
operator|.
name|indexUUID
argument_list|,
name|meta
operator|.
name|allocationId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|hashCode
argument_list|()
argument_list|,
operator|new
name|ShardStateMetaData
argument_list|(
name|meta
operator|.
name|legacyVersion
argument_list|,
name|meta
operator|.
name|primary
argument_list|,
name|meta
operator|.
name|indexUUID
argument_list|,
name|meta
operator|.
name|allocationId
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|equals
argument_list|(
operator|new
name|ShardStateMetaData
argument_list|(
name|meta
operator|.
name|legacyVersion
argument_list|,
operator|!
name|meta
operator|.
name|primary
argument_list|,
name|meta
operator|.
name|indexUUID
argument_list|,
name|meta
operator|.
name|allocationId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|equals
argument_list|(
operator|new
name|ShardStateMetaData
argument_list|(
name|meta
operator|.
name|legacyVersion
operator|+
literal|1
argument_list|,
name|meta
operator|.
name|primary
argument_list|,
name|meta
operator|.
name|indexUUID
argument_list|,
name|meta
operator|.
name|allocationId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|equals
argument_list|(
operator|new
name|ShardStateMetaData
argument_list|(
name|meta
operator|.
name|legacyVersion
argument_list|,
operator|!
name|meta
operator|.
name|primary
argument_list|,
name|meta
operator|.
name|indexUUID
operator|+
literal|"foo"
argument_list|,
name|meta
operator|.
name|allocationId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|equals
argument_list|(
operator|new
name|ShardStateMetaData
argument_list|(
name|meta
operator|.
name|legacyVersion
argument_list|,
operator|!
name|meta
operator|.
name|primary
argument_list|,
name|meta
operator|.
name|indexUUID
operator|+
literal|"foo"
argument_list|,
name|randomAllocationId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|hashCodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
block|{
comment|// just a sanity check that we impl hashcode
name|allocationId
operator|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
name|randomAllocationId
argument_list|()
expr_stmt|;
name|meta
operator|=
operator|new
name|ShardStateMetaData
argument_list|(
name|randomLong
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|allocationId
argument_list|)
expr_stmt|;
name|hashCodes
operator|.
name|add
argument_list|(
name|meta
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"more than one unique hashcode expected but got: "
operator|+
name|hashCodes
operator|.
name|size
argument_list|()
argument_list|,
name|hashCodes
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testClosesPreventsNewOperations
specifier|public
name|void
name|testClosesPreventsNewOperations
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
name|IndexShard
name|indexShard
init|=
name|newStartedShard
argument_list|()
decl_stmt|;
name|closeShards
argument_list|(
name|indexShard
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexShard
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|indexShard
operator|.
name|acquirePrimaryOperationLock
argument_list|(
literal|null
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|INDEX
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"we should not be able to increment anymore"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexShardClosedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|indexShard
operator|.
name|acquireReplicaOperationLock
argument_list|(
name|indexShard
operator|.
name|getPrimaryTerm
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|INDEX
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"we should not be able to increment anymore"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexShardClosedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testOperationLocksOnPrimaryShards
specifier|public
name|void
name|testOperationLocksOnPrimaryShards
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|IndexShard
name|indexShard
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// relocation target
name|indexShard
operator|=
name|newShard
argument_list|(
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|shardId
argument_list|,
literal|"local_node"
argument_list|,
literal|"other node"
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|AllocationId
operator|.
name|newRelocation
argument_list|(
name|AllocationId
operator|.
name|newInitializing
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// simulate promotion
name|indexShard
operator|=
name|newShard
argument_list|(
name|shardId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ShardRouting
name|replicaRouting
init|=
name|indexShard
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
name|indexShard
operator|.
name|updatePrimaryTerm
argument_list|(
name|indexShard
operator|.
name|getPrimaryTerm
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|ShardRouting
name|primaryRouting
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|replicaRouting
operator|.
name|shardId
argument_list|()
argument_list|,
name|replicaRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|replicaRouting
operator|.
name|allocationId
argument_list|()
argument_list|)
decl_stmt|;
name|indexShard
operator|.
name|updateRoutingEntry
argument_list|(
name|primaryRouting
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexShard
operator|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|primaryTerm
init|=
name|indexShard
operator|.
name|getPrimaryTerm
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexShard
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|isRelocationTarget
argument_list|()
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|indexShard
operator|.
name|acquireReplicaOperationLock
argument_list|(
name|primaryTerm
argument_list|,
literal|null
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|INDEX
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"shard shouldn't accept operations as replica"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ignored
parameter_list|)
block|{              }
block|}
name|Releasable
name|operation1
init|=
name|acquirePrimaryOperationLockBlockingly
argument_list|(
name|indexShard
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexShard
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|)
expr_stmt|;
name|Releasable
name|operation2
init|=
name|acquirePrimaryOperationLockBlockingly
argument_list|(
name|indexShard
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|indexShard
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|)
expr_stmt|;
name|Releasables
operator|.
name|close
argument_list|(
name|operation1
argument_list|,
name|operation2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexShard
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|indexShard
argument_list|)
expr_stmt|;
block|}
DECL|method|acquirePrimaryOperationLockBlockingly
specifier|private
name|Releasable
name|acquirePrimaryOperationLockBlockingly
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
name|fut
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|indexShard
operator|.
name|acquirePrimaryOperationLock
argument_list|(
name|fut
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|INDEX
argument_list|)
expr_stmt|;
return|return
name|fut
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|acquireReplicaOperationLockBlockingly
specifier|private
name|Releasable
name|acquireReplicaOperationLockBlockingly
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|,
name|long
name|opPrimaryTerm
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
name|fut
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|indexShard
operator|.
name|acquireReplicaOperationLock
argument_list|(
name|opPrimaryTerm
argument_list|,
name|fut
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|INDEX
argument_list|)
expr_stmt|;
return|return
name|fut
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|testOperationLocksOnReplicaShards
specifier|public
name|void
name|testOperationLocksOnReplicaShards
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|IndexShard
name|indexShard
decl_stmt|;
switch|switch
condition|(
name|randomInt
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
comment|// started replica
name|indexShard
operator|=
name|newStartedShard
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
block|{
comment|// initializing replica / primary
specifier|final
name|boolean
name|relocating
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|ShardRouting
name|routing
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|shardId
argument_list|,
literal|"local_node"
argument_list|,
name|relocating
condition|?
literal|"sourceNode"
else|:
literal|null
argument_list|,
name|relocating
condition|?
name|randomBoolean
argument_list|()
else|:
literal|false
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|relocating
condition|?
name|AllocationId
operator|.
name|newRelocation
argument_list|(
name|AllocationId
operator|.
name|newInitializing
argument_list|()
argument_list|)
else|:
name|AllocationId
operator|.
name|newInitializing
argument_list|()
argument_list|)
decl_stmt|;
name|indexShard
operator|=
name|newShard
argument_list|(
name|routing
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|2
case|:
block|{
comment|// relocation source
name|indexShard
operator|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ShardRouting
name|routing
init|=
name|indexShard
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
name|routing
operator|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|routing
operator|.
name|shardId
argument_list|()
argument_list|,
name|routing
operator|.
name|currentNodeId
argument_list|()
argument_list|,
literal|"otherNode"
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|RELOCATING
argument_list|,
name|AllocationId
operator|.
name|newRelocation
argument_list|(
name|routing
operator|.
name|allocationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|indexShard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|indexShard
operator|.
name|relocated
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"get your numbers straight"
argument_list|)
throw|;
block|}
specifier|final
name|ShardRouting
name|shardRouting
init|=
name|indexShard
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"shard routing to {}"
argument_list|,
name|shardRouting
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexShard
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|indexShard
operator|.
name|acquirePrimaryOperationLock
argument_list|(
literal|null
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|INDEX
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"shard shouldn't accept primary ops"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ShardNotFoundException
name|ignored
parameter_list|)
block|{              }
block|}
specifier|final
name|long
name|primaryTerm
init|=
name|indexShard
operator|.
name|getPrimaryTerm
argument_list|()
decl_stmt|;
name|Releasable
name|operation1
init|=
name|acquireReplicaOperationLockBlockingly
argument_list|(
name|indexShard
argument_list|,
name|primaryTerm
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexShard
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|)
expr_stmt|;
name|Releasable
name|operation2
init|=
name|acquireReplicaOperationLockBlockingly
argument_list|(
name|indexShard
argument_list|,
name|primaryTerm
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|indexShard
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|indexShard
operator|.
name|acquireReplicaOperationLock
argument_list|(
name|primaryTerm
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|INDEX
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"you can not increment the operation counter with an older primary term"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"operation term"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"too old"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// but you can increment with a newer one..
name|acquireReplicaOperationLockBlockingly
argument_list|(
name|indexShard
argument_list|,
name|primaryTerm
operator|+
literal|1
operator|+
name|randomInt
argument_list|(
literal|20
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Releasables
operator|.
name|close
argument_list|(
name|operation1
argument_list|,
name|operation2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexShard
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|indexShard
argument_list|)
expr_stmt|;
block|}
DECL|method|testAcquireIndexCommit
specifier|public
name|void
name|testAcquireIndexCommit
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|()
decl_stmt|;
name|int
name|numDocs
init|=
name|randomInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|indexDoc
argument_list|(
name|shard
argument_list|,
literal|"type"
argument_list|,
literal|"id_"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|flushFirst
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|IndexCommit
name|commit
init|=
name|shard
operator|.
name|acquireIndexCommit
argument_list|(
name|flushFirst
argument_list|)
decl_stmt|;
name|int
name|moreDocs
init|=
name|randomInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|moreDocs
condition|;
name|i
operator|++
control|)
block|{
name|indexDoc
argument_list|(
name|shard
argument_list|,
literal|"type"
argument_list|,
literal|"id_"
operator|+
name|numDocs
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|flushShard
argument_list|(
name|shard
argument_list|)
expr_stmt|;
comment|// check that we can still read the commit that we captured
try|try
init|(
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|commit
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|flushFirst
condition|?
name|numDocs
else|:
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|shard
operator|.
name|releaseIndexCommit
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|flushShard
argument_list|(
name|shard
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check it's clean up
name|assertThat
argument_list|(
name|DirectoryReader
operator|.
name|listCommits
argument_list|(
name|shard
operator|.
name|store
argument_list|()
operator|.
name|directory
argument_list|()
argument_list|)
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
comment|/***      * test one can snapshot the store at various lifecycle stages      */
DECL|method|testSnapshotStore
specifier|public
name|void
name|testSnapshotStore
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|indexDoc
argument_list|(
name|shard
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|flushShard
argument_list|(
name|shard
argument_list|)
expr_stmt|;
specifier|final
name|IndexShard
name|newShard
init|=
name|reinitShard
argument_list|(
name|shard
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"foo"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|Store
operator|.
name|MetadataSnapshot
name|snapshot
init|=
name|newShard
operator|.
name|snapshotStoreMetadata
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|getSegmentsFile
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"segments_2"
argument_list|)
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|markAsRecovering
argument_list|(
literal|"store"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|newShard
operator|.
name|routingEntry
argument_list|()
argument_list|,
name|localNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|newShard
operator|.
name|snapshotStoreMetadata
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|getSegmentsFile
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"segments_2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newShard
operator|.
name|recoverFromStore
argument_list|()
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|newShard
operator|.
name|snapshotStoreMetadata
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|getSegmentsFile
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"segments_2"
argument_list|)
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|updateRoutingEntry
argument_list|(
name|newShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|moveToStarted
argument_list|()
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|newShard
operator|.
name|snapshotStoreMetadata
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|getSegmentsFile
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"segments_2"
argument_list|)
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|close
argument_list|(
literal|"test"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|newShard
operator|.
name|snapshotStoreMetadata
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|getSegmentsFile
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"segments_2"
argument_list|)
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|newShard
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsyncFsync
specifier|public
name|void
name|testAsyncFsync
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|()
decl_stmt|;
name|Semaphore
name|semaphore
init|=
operator|new
name|Semaphore
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|thread
init|=
operator|new
name|Thread
index|[
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
index|]
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|thread
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thread
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|thread
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|shard
operator|.
name|sync
argument_list|(
name|TranslogTests
operator|.
name|randomTranslogLocation
argument_list|()
argument_list|,
parameter_list|(
name|ex
parameter_list|)
lambda|->
name|semaphore
operator|.
name|release
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
expr_stmt|;
name|thread
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thread
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|thread
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|semaphore
operator|.
name|tryAcquire
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinimumCompatVersion
specifier|public
name|void
name|testMinimumCompatVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|Version
name|versionCreated
init|=
name|VersionUtils
operator|.
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|versionCreated
operator|.
name|id
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
name|metaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
operator|.
name|primaryTerm
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexShard
name|test
init|=
name|newShard
argument_list|(
operator|new
name|ShardId
argument_list|(
name|metaData
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|"n1"
argument_list|,
name|metaData
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|recoveryShardFromStore
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|test
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionCreated
operator|.
name|luceneVersion
argument_list|,
name|test
operator|.
name|minimumCompatibleVersion
argument_list|()
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|test
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionCreated
operator|.
name|luceneVersion
argument_list|,
name|test
operator|.
name|minimumCompatibleVersion
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|.
name|getEngine
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Version
operator|.
name|CURRENT
operator|.
name|luceneVersion
argument_list|,
name|test
operator|.
name|minimumCompatibleVersion
argument_list|()
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
DECL|method|testShardStats
specifier|public
name|void
name|testShardStats
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|()
decl_stmt|;
name|ShardStats
name|stats
init|=
operator|new
name|ShardStats
argument_list|(
name|shard
operator|.
name|routingEntry
argument_list|()
argument_list|,
name|shard
operator|.
name|shardPath
argument_list|()
argument_list|,
operator|new
name|CommonStats
argument_list|(
operator|new
name|IndicesQueryCache
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|shard
argument_list|,
operator|new
name|CommonStatsFlags
argument_list|()
argument_list|)
argument_list|,
name|shard
operator|.
name|commitStats
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|shard
operator|.
name|shardPath
argument_list|()
operator|.
name|getRootDataPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|stats
operator|.
name|getDataPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shard
operator|.
name|shardPath
argument_list|()
operator|.
name|getRootStatePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|stats
operator|.
name|getStatePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shard
operator|.
name|shardPath
argument_list|()
operator|.
name|isCustomDataPath
argument_list|()
argument_list|,
name|stats
operator|.
name|isCustomDataPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
operator|||
literal|true
condition|)
block|{
comment|// try to serialize it to ensure values survive the serialization
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|stats
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|stats
operator|=
name|ShardStats
operator|.
name|readShardStats
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|stats
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|String
name|xContent
init|=
name|builder
operator|.
name|string
argument_list|()
decl_stmt|;
name|StringBuilder
name|expectedSubSequence
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"\"shard_path\":{\"state_path\":\""
argument_list|)
decl_stmt|;
name|expectedSubSequence
operator|.
name|append
argument_list|(
name|shard
operator|.
name|shardPath
argument_list|()
operator|.
name|getRootStatePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|expectedSubSequence
operator|.
name|append
argument_list|(
literal|"\",\"data_path\":\""
argument_list|)
expr_stmt|;
name|expectedSubSequence
operator|.
name|append
argument_list|(
name|shard
operator|.
name|shardPath
argument_list|()
operator|.
name|getRootDataPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|expectedSubSequence
operator|.
name|append
argument_list|(
literal|"\",\"is_custom_data_path\":"
argument_list|)
operator|.
name|append
argument_list|(
name|shard
operator|.
name|shardPath
argument_list|()
operator|.
name|isCustomDataPath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|WINDOWS
condition|)
block|{
comment|// Some path weirdness on windows
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|xContent
operator|.
name|contains
argument_list|(
name|expectedSubSequence
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testParsedDocument
specifier|private
name|ParsedDocument
name|testParsedDocument
parameter_list|(
name|String
name|uid
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|routing
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|long
name|ttl
parameter_list|,
name|ParseContext
operator|.
name|Document
name|document
parameter_list|,
name|BytesReference
name|source
parameter_list|,
name|Mapping
name|mappingUpdate
parameter_list|)
block|{
name|Field
name|uidField
init|=
operator|new
name|Field
argument_list|(
literal|"_uid"
argument_list|,
name|uid
argument_list|,
name|UidFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
decl_stmt|;
name|Field
name|versionField
init|=
operator|new
name|NumericDocValuesField
argument_list|(
literal|"_version"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|uidField
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|versionField
argument_list|)
expr_stmt|;
return|return
operator|new
name|ParsedDocument
argument_list|(
name|versionField
argument_list|,
name|id
argument_list|,
name|type
argument_list|,
name|routing
argument_list|,
name|timestamp
argument_list|,
name|ttl
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|document
argument_list|)
argument_list|,
name|source
argument_list|,
name|mappingUpdate
argument_list|)
return|;
block|}
DECL|method|testIndexingOperationsListeners
specifier|public
name|void
name|testIndexingOperationsListeners
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|indexDoc
argument_list|(
name|shard
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|,
literal|"{\"foo\" : \"bar\"}"
argument_list|)
expr_stmt|;
name|AtomicInteger
name|preIndex
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|AtomicInteger
name|postIndexCreate
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|AtomicInteger
name|postIndexUpdate
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|AtomicInteger
name|postIndexException
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|AtomicInteger
name|preDelete
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|AtomicInteger
name|postDelete
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|AtomicInteger
name|postDeleteException
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|shard
operator|.
name|close
argument_list|(
literal|"simon says"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|shard
operator|=
name|reinitShard
argument_list|(
name|shard
argument_list|,
operator|new
name|IndexingOperationListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|preOperation
parameter_list|(
name|Engine
operator|.
name|Operation
name|operation
parameter_list|)
block|{
switch|switch
condition|(
name|operation
operator|.
name|operationType
argument_list|()
condition|)
block|{
case|case
name|INDEX
case|:
name|preIndex
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|preDelete
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postOperation
parameter_list|(
name|Engine
operator|.
name|Operation
name|operation
parameter_list|)
block|{
switch|switch
condition|(
name|operation
operator|.
name|operationType
argument_list|()
condition|)
block|{
case|case
name|INDEX
case|:
if|if
condition|(
operator|(
operator|(
name|Engine
operator|.
name|Index
operator|)
name|operation
operator|)
operator|.
name|isCreated
argument_list|()
condition|)
block|{
name|postIndexCreate
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|postIndexUpdate
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|DELETE
case|:
name|postDelete
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postOperation
parameter_list|(
name|Engine
operator|.
name|Operation
name|operation
parameter_list|,
name|Exception
name|ex
parameter_list|)
block|{
switch|switch
condition|(
name|operation
operator|.
name|operationType
argument_list|()
condition|)
block|{
case|case
name|INDEX
case|:
name|postIndexException
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|postDeleteException
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|recoveryShardFromStore
argument_list|(
name|shard
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|ParseContext
operator|.
name|Document
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|shard
operator|.
name|execute
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|preIndex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postIndexCreate
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postIndexUpdate
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postIndexException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|preDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postDeleteException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|shard
operator|.
name|execute
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|preIndex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postIndexCreate
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postIndexUpdate
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postIndexException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|preDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postDeleteException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Delete
name|delete
init|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|shard
operator|.
name|execute
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|preIndex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postIndexCreate
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postIndexUpdate
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postIndexException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|preDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postDeleteException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|shard
operator|.
name|close
argument_list|(
literal|"Unexpected close"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|shard
operator|.
name|state
operator|=
name|IndexShardState
operator|.
name|STARTED
expr_stmt|;
comment|// It will generate exception
try|try
block|{
name|shard
operator|.
name|execute
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalIndexShardStateException
name|e
parameter_list|)
block|{          }
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|preIndex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postIndexCreate
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postIndexUpdate
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postIndexException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|preDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postDeleteException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|shard
operator|.
name|execute
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalIndexShardStateException
name|e
parameter_list|)
block|{          }
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|preIndex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postIndexCreate
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postIndexUpdate
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postIndexException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|preDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postDeleteException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testLockingBeforeAndAfterRelocated
specifier|public
name|void
name|testLockingBeforeAndAfterRelocated
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|ShardRoutingHelper
operator|.
name|relocate
argument_list|(
name|shard
operator|.
name|routingEntry
argument_list|()
argument_list|,
literal|"other_node"
argument_list|)
argument_list|)
expr_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Thread
name|recoveryThread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|shard
operator|.
name|relocated
argument_list|(
literal|"simulated recovery"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
init|(
name|Releasable
name|ignored
init|=
name|acquirePrimaryOperationLockBlockingly
argument_list|(
name|shard
argument_list|)
init|)
block|{
comment|// start finalization of recovery
name|recoveryThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// recovery can only be finalized after we release the current primaryOperationLock
name|assertThat
argument_list|(
name|shard
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexShardState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// recovery can be now finalized
name|recoveryThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|shard
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexShardState
operator|.
name|RELOCATED
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Releasable
name|ignored
init|=
name|acquirePrimaryOperationLockBlockingly
argument_list|(
name|shard
argument_list|)
init|)
block|{
comment|// lock can again be acquired
name|assertThat
argument_list|(
name|shard
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexShardState
operator|.
name|RELOCATED
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testDelayedOperationsBeforeAndAfterRelocated
specifier|public
name|void
name|testDelayedOperationsBeforeAndAfterRelocated
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|ShardRoutingHelper
operator|.
name|relocate
argument_list|(
name|shard
operator|.
name|routingEntry
argument_list|()
argument_list|,
literal|"other_node"
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
name|recoveryThread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|shard
operator|.
name|relocated
argument_list|(
literal|"simulated recovery"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
decl_stmt|;
name|recoveryThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
argument_list|>
name|onLockAcquiredActions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
name|onLockAcquired
init|=
operator|new
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Releasable
name|releasable
parameter_list|)
block|{
name|releasable
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|onResponse
argument_list|(
name|releasable
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|shard
operator|.
name|acquirePrimaryOperationLock
argument_list|(
name|onLockAcquired
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|INDEX
argument_list|)
expr_stmt|;
name|onLockAcquiredActions
operator|.
name|add
argument_list|(
name|onLockAcquired
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PlainActionFuture
argument_list|<
name|Releasable
argument_list|>
name|onLockAcquired
range|:
name|onLockAcquiredActions
control|)
block|{
name|assertNotNull
argument_list|(
name|onLockAcquired
operator|.
name|get
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|recoveryThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testStressRelocated
specifier|public
name|void
name|testStressRelocated
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|ShardRoutingHelper
operator|.
name|relocate
argument_list|(
name|shard
operator|.
name|routingEntry
argument_list|()
argument_list|,
literal|"other_node"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numThreads
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|indexThreads
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
name|CountDownLatch
name|allPrimaryOperationLocksAcquired
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|numThreads
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexThreads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|indexThreads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
init|(
name|Releasable
name|operationLock
init|=
name|acquirePrimaryOperationLockBlockingly
argument_list|(
name|shard
argument_list|)
init|)
block|{
name|allPrimaryOperationLocksAcquired
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|BrokenBarrierException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
expr_stmt|;
name|indexThreads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|AtomicBoolean
name|relocated
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|Thread
name|recoveryThread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|shard
operator|.
name|relocated
argument_list|(
literal|"simulated recovery"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|relocated
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
comment|// ensure we wait for all primary operation locks to be acquired
name|allPrimaryOperationLocksAcquired
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// start recovery thread
name|recoveryThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|relocated
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shard
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// ensure we only transition to RELOCATED state after pending operations completed
name|assertThat
argument_list|(
name|shard
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexShardState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
comment|// complete pending operations
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// complete recovery/relocation
name|recoveryThread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// ensure relocated successfully once pending operations are done
name|assertThat
argument_list|(
name|relocated
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shard
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexShardState
operator|.
name|RELOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shard
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|indexThread
range|:
name|indexThreads
control|)
block|{
name|indexThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testRelocatedShardCanNotBeRevived
specifier|public
name|void
name|testRelocatedShardCanNotBeRevived
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|ShardRouting
name|originalRouting
init|=
name|shard
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|ShardRoutingHelper
operator|.
name|relocate
argument_list|(
name|originalRouting
argument_list|,
literal|"other_node"
argument_list|)
argument_list|)
expr_stmt|;
name|shard
operator|.
name|relocated
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalIndexShardStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|originalRouting
argument_list|)
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testShardCanNotBeMarkedAsRelocatedIfRelocationCancelled
specifier|public
name|void
name|testShardCanNotBeMarkedAsRelocatedIfRelocationCancelled
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|ShardRouting
name|originalRouting
init|=
name|shard
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|ShardRoutingHelper
operator|.
name|relocate
argument_list|(
name|originalRouting
argument_list|,
literal|"other_node"
argument_list|)
argument_list|)
expr_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|originalRouting
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalIndexShardStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|shard
operator|.
name|relocated
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testRelocatedShardCanNotBeRevivedConcurrently
specifier|public
name|void
name|testRelocatedShardCanNotBeRevivedConcurrently
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|BrokenBarrierException
block|{
specifier|final
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|ShardRouting
name|originalRouting
init|=
name|shard
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|ShardRoutingHelper
operator|.
name|relocate
argument_list|(
name|originalRouting
argument_list|,
literal|"other_node"
argument_list|)
argument_list|)
expr_stmt|;
name|CyclicBarrier
name|cyclicBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|relocationException
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|Thread
name|relocationThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|relocationException
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|cyclicBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|shard
operator|.
name|relocated
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|relocationThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|cancellingException
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|Thread
name|cancellingThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|cancellingException
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|cyclicBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|originalRouting
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|cancellingThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|cyclicBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|relocationThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|cancellingThread
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|shard
operator|.
name|state
argument_list|()
operator|==
name|IndexShardState
operator|.
name|RELOCATED
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"shard was relocated successfully"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cancellingException
operator|.
name|get
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IllegalIndexShardStateException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"current routing:"
operator|+
name|shard
operator|.
name|routingEntry
argument_list|()
argument_list|,
name|shard
operator|.
name|routingEntry
argument_list|()
operator|.
name|relocating
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|relocationException
operator|.
name|get
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"shard relocation was cancelled"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|relocationException
operator|.
name|get
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IllegalIndexShardStateException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"current routing:"
operator|+
name|shard
operator|.
name|routingEntry
argument_list|()
argument_list|,
name|shard
operator|.
name|routingEntry
argument_list|()
operator|.
name|relocating
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cancellingException
operator|.
name|get
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testRecoverFromStore
specifier|public
name|void
name|testRecoverFromStore
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|int
name|translogOps
init|=
literal|1
decl_stmt|;
name|indexDoc
argument_list|(
name|shard
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|flushShard
argument_list|(
name|shard
argument_list|)
expr_stmt|;
name|translogOps
operator|=
literal|0
expr_stmt|;
block|}
name|IndexShard
name|newShard
init|=
name|reinitShard
argument_list|(
name|shard
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"foo"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|newShard
operator|.
name|markAsRecovering
argument_list|(
literal|"store"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|newShard
operator|.
name|routingEntry
argument_list|()
argument_list|,
name|localNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newShard
operator|.
name|recoverFromStore
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|translogOps
argument_list|,
name|newShard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|recoveredOperations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|translogOps
argument_list|,
name|newShard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|translogOps
argument_list|,
name|newShard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperationsOnStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100.0f
argument_list|,
name|newShard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|recoveredPercent
argument_list|()
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|updateRoutingEntry
argument_list|(
name|newShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|moveToStarted
argument_list|()
argument_list|)
expr_stmt|;
name|assertDocCount
argument_list|(
name|newShard
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|newShard
argument_list|)
expr_stmt|;
block|}
DECL|method|testRecoverFromCleanStore
specifier|public
name|void
name|testRecoverFromCleanStore
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|indexDoc
argument_list|(
name|shard
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|flushShard
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ShardRouting
name|shardRouting
init|=
name|shard
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
name|IndexShard
name|newShard
init|=
name|reinitShard
argument_list|(
name|shard
argument_list|,
name|ShardRoutingHelper
operator|.
name|initWithSameId
argument_list|(
name|shardRouting
argument_list|,
name|RecoverySource
operator|.
name|StoreRecoverySource
operator|.
name|EMPTY_STORE_INSTANCE
argument_list|)
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"foo"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|newShard
operator|.
name|markAsRecovering
argument_list|(
literal|"store"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|newShard
operator|.
name|routingEntry
argument_list|()
argument_list|,
name|localNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newShard
operator|.
name|recoverFromStore
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|newShard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|recoveredOperations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|newShard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|newShard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperationsOnStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100.0f
argument_list|,
name|newShard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|recoveredPercent
argument_list|()
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|updateRoutingEntry
argument_list|(
name|newShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|moveToStarted
argument_list|()
argument_list|)
expr_stmt|;
name|assertDocCount
argument_list|(
name|newShard
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|newShard
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailIfIndexNotPresentInRecoverFromStore
specifier|public
name|void
name|testFailIfIndexNotPresentInRecoverFromStore
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|indexDoc
argument_list|(
name|shard
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|flushShard
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
name|Store
name|store
init|=
name|shard
operator|.
name|store
argument_list|()
decl_stmt|;
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
name|cleanLuceneIndex
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|IndexShard
name|newShard
init|=
name|reinitShard
argument_list|(
name|shard
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"foo"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|ShardRouting
name|routing
init|=
name|newShard
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
name|newShard
operator|.
name|markAsRecovering
argument_list|(
literal|"store"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|routing
argument_list|,
name|localNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|newShard
operator|.
name|recoverFromStore
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"index not there!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexShardRecoveryException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"failed to fetch index version after copying it over"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|routing
operator|=
name|ShardRoutingHelper
operator|.
name|moveToUnassigned
argument_list|(
name|routing
argument_list|,
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|INDEX_CREATED
argument_list|,
literal|"because I say so"
argument_list|)
argument_list|)
expr_stmt|;
name|routing
operator|=
name|ShardRoutingHelper
operator|.
name|initialize
argument_list|(
name|routing
argument_list|,
name|newShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|currentNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"it's already recovering, we should ignore new ones"
argument_list|,
name|newShard
operator|.
name|ignoreRecoveryAttempt
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|newShard
operator|.
name|markAsRecovering
argument_list|(
literal|"store"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|routing
argument_list|,
name|localNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"we are already recovering, can't mark again"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalIndexShardStateException
name|e
parameter_list|)
block|{
comment|// OK!
block|}
name|newShard
operator|=
name|reinitShard
argument_list|(
name|newShard
argument_list|,
name|ShardRoutingHelper
operator|.
name|initWithSameId
argument_list|(
name|routing
argument_list|,
name|RecoverySource
operator|.
name|StoreRecoverySource
operator|.
name|EMPTY_STORE_INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|markAsRecovering
argument_list|(
literal|"store"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|newShard
operator|.
name|routingEntry
argument_list|()
argument_list|,
name|localNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"recover even if there is nothing to recover"
argument_list|,
name|newShard
operator|.
name|recoverFromStore
argument_list|()
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|updateRoutingEntry
argument_list|(
name|newShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|moveToStarted
argument_list|()
argument_list|)
expr_stmt|;
name|assertDocCount
argument_list|(
name|newShard
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// we can't issue this request through a client because of the inconsistencies we created with the cluster state
comment|// doing it directly instead
name|indexDoc
argument_list|(
name|newShard
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertDocCount
argument_list|(
name|newShard
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|newShard
argument_list|)
expr_stmt|;
block|}
DECL|method|testRecoveryFailsAfterMovingToRelocatedState
specifier|public
name|void
name|testRecoveryFailsAfterMovingToRelocatedState
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
specifier|final
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|ShardRouting
name|origRouting
init|=
name|shard
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|shard
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexShardState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|ShardRouting
name|inRecoveryRouting
init|=
name|ShardRoutingHelper
operator|.
name|relocate
argument_list|(
name|origRouting
argument_list|,
literal|"some_node"
argument_list|)
decl_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|inRecoveryRouting
argument_list|)
expr_stmt|;
name|shard
operator|.
name|relocated
argument_list|(
literal|"simulate mark as relocated"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shard
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexShardState
operator|.
name|RELOCATED
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|origRouting
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IndexShardRelocatedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexShardRelocatedException
name|expected
parameter_list|)
block|{         }
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testRestoreShard
specifier|public
name|void
name|testRestoreShard
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|IndexShard
name|source
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|IndexShard
name|target
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|indexDoc
argument_list|(
name|source
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|source
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
name|indexDoc
argument_list|(
name|target
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|target
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertDocs
argument_list|(
name|target
argument_list|,
operator|new
name|Uid
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|flushShard
argument_list|(
name|source
argument_list|)
expr_stmt|;
comment|// only flush source
specifier|final
name|ShardRouting
name|origRouting
init|=
name|target
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
name|ShardRouting
name|routing
init|=
name|ShardRoutingHelper
operator|.
name|reinitPrimary
argument_list|(
name|origRouting
argument_list|)
decl_stmt|;
specifier|final
name|Snapshot
name|snapshot
init|=
operator|new
name|Snapshot
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|SnapshotId
argument_list|(
literal|"bar"
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|routing
operator|=
name|ShardRoutingHelper
operator|.
name|newWithRestoreSource
argument_list|(
name|routing
argument_list|,
operator|new
name|RecoverySource
operator|.
name|SnapshotRecoverySource
argument_list|(
name|snapshot
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|target
operator|=
name|reinitShard
argument_list|(
name|target
argument_list|,
name|routing
argument_list|)
expr_stmt|;
name|Store
name|sourceStore
init|=
name|source
operator|.
name|store
argument_list|()
decl_stmt|;
name|Store
name|targetStore
init|=
name|target
operator|.
name|store
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"foo"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|target
operator|.
name|markAsRecovering
argument_list|(
literal|"store"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|routing
argument_list|,
name|localNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|target
operator|.
name|restoreFromRepository
argument_list|(
operator|new
name|RestoreOnlyRepository
argument_list|(
literal|"test"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|restoreShard
parameter_list|(
name|IndexShard
name|shard
parameter_list|,
name|SnapshotId
name|snapshotId
parameter_list|,
name|Version
name|version
parameter_list|,
name|IndexId
name|indexId
parameter_list|,
name|ShardId
name|snapshotShardId
parameter_list|,
name|RecoveryState
name|recoveryState
parameter_list|)
block|{
try|try
block|{
name|cleanLuceneIndex
argument_list|(
name|targetStore
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|file
range|:
name|sourceStore
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|equals
argument_list|(
literal|"write.lock"
argument_list|)
operator|||
name|file
operator|.
name|startsWith
argument_list|(
literal|"extra"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|targetStore
operator|.
name|directory
argument_list|()
operator|.
name|copyFrom
argument_list|(
name|sourceStore
operator|.
name|directory
argument_list|()
argument_list|,
name|file
argument_list|,
name|file
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|target
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
operator|.
name|moveToStarted
argument_list|()
argument_list|)
expr_stmt|;
name|assertDocs
argument_list|(
name|target
argument_list|,
operator|new
name|Uid
argument_list|(
literal|"test"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
DECL|method|testSearcherWrapperIsUsed
specifier|public
name|void
name|testSearcherWrapperIsUsed
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|indexDoc
argument_list|(
name|shard
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|,
literal|"{\"foo\" : \"bar\"}"
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|shard
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|,
literal|"{\"foobar\" : \"bar\"}"
argument_list|)
expr_stmt|;
name|shard
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|GetResult
name|getResult
init|=
name|shard
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|false
argument_list|,
operator|new
name|Term
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|,
name|Uid
operator|.
name|createUid
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getResult
operator|.
name|searcher
argument_list|()
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|shard
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|search
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|search
operator|.
name|totalHits
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|search
operator|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foobar"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|search
operator|.
name|totalHits
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|IndexSearcherWrapper
name|wrapper
init|=
operator|new
name|IndexSearcherWrapper
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DirectoryReader
name|wrap
parameter_list|(
name|DirectoryReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FieldMaskingReader
argument_list|(
literal|"foo"
argument_list|,
name|reader
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexSearcher
name|wrap
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|EngineException
block|{
return|return
name|searcher
return|;
block|}
block|}
decl_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
name|IndexShard
name|newShard
init|=
name|newShard
argument_list|(
name|ShardRoutingHelper
operator|.
name|reinitPrimary
argument_list|(
name|shard
operator|.
name|routingEntry
argument_list|()
argument_list|)
argument_list|,
name|shard
operator|.
name|shardPath
argument_list|()
argument_list|,
name|shard
operator|.
name|indexSettings
argument_list|()
operator|.
name|getIndexMetaData
argument_list|()
argument_list|,
name|wrapper
argument_list|)
decl_stmt|;
name|recoveryShardFromStore
argument_list|(
name|newShard
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|newShard
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|search
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|search
operator|.
name|totalHits
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|search
operator|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foobar"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|search
operator|.
name|totalHits
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|getResult
operator|=
name|newShard
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|false
argument_list|,
operator|new
name|Term
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|,
name|Uid
operator|.
name|createUid
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getResult
operator|.
name|searcher
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure get uses the wrapped reader
name|assertTrue
argument_list|(
name|getResult
operator|.
name|searcher
argument_list|()
operator|.
name|reader
argument_list|()
operator|instanceof
name|FieldMaskingReader
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
name|closeShards
argument_list|(
name|newShard
argument_list|)
expr_stmt|;
block|}
DECL|method|testSearcherWrapperWorksWithGlobalOrdinals
specifier|public
name|void
name|testSearcherWrapperWorksWithGlobalOrdinals
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexSearcherWrapper
name|wrapper
init|=
operator|new
name|IndexSearcherWrapper
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DirectoryReader
name|wrap
parameter_list|(
name|DirectoryReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FieldMaskingReader
argument_list|(
literal|"foo"
argument_list|,
name|reader
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexSearcher
name|wrap
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|EngineException
block|{
return|return
name|searcher
return|;
block|}
block|}
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
name|metaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|putMapping
argument_list|(
literal|"test"
argument_list|,
literal|"{ \"properties\": { \"foo\":  { \"type\": \"text\", \"fielddata\": true }}}"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
operator|.
name|primaryTerm
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexShard
name|shard
init|=
name|newShard
argument_list|(
operator|new
name|ShardId
argument_list|(
name|metaData
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|"n1"
argument_list|,
name|metaData
argument_list|,
name|wrapper
argument_list|)
decl_stmt|;
name|recoveryShardFromStore
argument_list|(
name|shard
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|shard
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|,
literal|"{\"foo\" : \"bar\"}"
argument_list|)
expr_stmt|;
name|shard
operator|.
name|refresh
argument_list|(
literal|"created segment 1"
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|shard
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|,
literal|"{\"foobar\" : \"bar\"}"
argument_list|)
expr_stmt|;
name|shard
operator|.
name|refresh
argument_list|(
literal|"created segment 2"
argument_list|)
expr_stmt|;
comment|// test global ordinals are evicted
name|MappedFieldType
name|foo
init|=
name|shard
operator|.
name|mapperService
argument_list|()
operator|.
name|fullName
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|IndexFieldData
operator|.
name|Global
name|ifd
init|=
name|shard
operator|.
name|indexFieldDataService
argument_list|()
operator|.
name|getForField
argument_list|(
name|foo
argument_list|)
decl_stmt|;
name|FieldDataStats
name|before
init|=
name|shard
operator|.
name|fieldData
argument_list|()
operator|.
name|stats
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|before
operator|.
name|getMemorySizeInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|FieldDataStats
name|after
init|=
literal|null
decl_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|shard
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
literal|"we have to have more than one segment"
argument_list|,
name|searcher
operator|.
name|getDirectoryReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ifd
operator|.
name|loadGlobal
argument_list|(
name|searcher
operator|.
name|getDirectoryReader
argument_list|()
argument_list|)
expr_stmt|;
name|after
operator|=
name|shard
operator|.
name|fieldData
argument_list|()
operator|.
name|stats
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|after
operator|.
name|getEvictions
argument_list|()
argument_list|,
name|before
operator|.
name|getEvictions
argument_list|()
argument_list|)
expr_stmt|;
comment|// If a field doesn't exist an empty IndexFieldData is returned and that isn't cached:
name|assertThat
argument_list|(
name|after
operator|.
name|getMemorySizeInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|shard
operator|.
name|fieldData
argument_list|()
operator|.
name|stats
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getEvictions
argument_list|()
argument_list|,
name|before
operator|.
name|getEvictions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shard
operator|.
name|fieldData
argument_list|()
operator|.
name|stats
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getMemorySizeInBytes
argument_list|()
argument_list|,
name|after
operator|.
name|getMemorySizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
name|shard
operator|.
name|flush
argument_list|(
operator|new
name|FlushRequest
argument_list|()
operator|.
name|force
argument_list|(
literal|true
argument_list|)
operator|.
name|waitIfOngoing
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|shard
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shard
operator|.
name|fieldData
argument_list|()
operator|.
name|stats
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getMemorySizeInBytes
argument_list|()
argument_list|,
name|before
operator|.
name|getMemorySizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shard
operator|.
name|fieldData
argument_list|()
operator|.
name|stats
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getEvictions
argument_list|()
argument_list|,
name|before
operator|.
name|getEvictions
argument_list|()
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexingOperationListenersIsInvokedOnRecovery
specifier|public
name|void
name|testIndexingOperationListenersIsInvokedOnRecovery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|indexDoc
argument_list|(
name|shard
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|,
literal|"{\"foo\" : \"bar\"}"
argument_list|)
expr_stmt|;
name|deleteDoc
argument_list|(
name|shard
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|shard
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|,
literal|"{\"foo\" : \"bar\"}"
argument_list|)
expr_stmt|;
name|shard
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|preIndex
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|postIndex
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|preDelete
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|postDelete
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|IndexingOperationListener
name|listener
init|=
operator|new
name|IndexingOperationListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|preOperation
parameter_list|(
name|Engine
operator|.
name|Operation
name|operation
parameter_list|)
block|{
switch|switch
condition|(
name|operation
operator|.
name|operationType
argument_list|()
condition|)
block|{
case|case
name|INDEX
case|:
name|preIndex
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|preDelete
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postOperation
parameter_list|(
name|Engine
operator|.
name|Operation
name|operation
parameter_list|)
block|{
switch|switch
condition|(
name|operation
operator|.
name|operationType
argument_list|()
condition|)
block|{
case|case
name|INDEX
case|:
name|postIndex
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|postDelete
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
decl_stmt|;
specifier|final
name|IndexShard
name|newShard
init|=
name|reinitShard
argument_list|(
name|shard
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|recoveryShardFromStore
argument_list|(
name|newShard
argument_list|)
expr_stmt|;
name|IndexingStats
name|indexingStats
init|=
name|newShard
operator|.
name|indexingStats
argument_list|()
decl_stmt|;
comment|// ensure we are not influencing the indexing stats
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexingStats
operator|.
name|getTotal
argument_list|()
operator|.
name|getDeleteCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexingStats
operator|.
name|getTotal
argument_list|()
operator|.
name|getDeleteCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexingStats
operator|.
name|getTotal
argument_list|()
operator|.
name|getIndexCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexingStats
operator|.
name|getTotal
argument_list|()
operator|.
name|getIndexCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexingStats
operator|.
name|getTotal
argument_list|()
operator|.
name|getIndexFailedCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|preIndex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|postIndex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|preDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|newShard
argument_list|)
expr_stmt|;
block|}
DECL|method|testSearchIsReleaseIfWrapperFails
specifier|public
name|void
name|testSearchIsReleaseIfWrapperFails
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|indexDoc
argument_list|(
name|shard
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|,
literal|"{\"foo\" : \"bar\"}"
argument_list|)
expr_stmt|;
name|shard
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|IndexSearcherWrapper
name|wrapper
init|=
operator|new
name|IndexSearcherWrapper
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DirectoryReader
name|wrap
parameter_list|(
name|DirectoryReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"boom"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|IndexSearcher
name|wrap
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|EngineException
block|{
return|return
name|searcher
return|;
block|}
block|}
decl_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
name|IndexShard
name|newShard
init|=
name|newShard
argument_list|(
name|ShardRoutingHelper
operator|.
name|reinitPrimary
argument_list|(
name|shard
operator|.
name|routingEntry
argument_list|()
argument_list|)
argument_list|,
name|shard
operator|.
name|shardPath
argument_list|()
argument_list|,
name|shard
operator|.
name|indexSettings
argument_list|()
operator|.
name|getIndexMetaData
argument_list|()
argument_list|,
name|wrapper
argument_list|)
decl_stmt|;
name|recoveryShardFromStore
argument_list|(
name|newShard
argument_list|)
expr_stmt|;
try|try
block|{
name|newShard
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
comment|//
block|}
name|closeShards
argument_list|(
name|newShard
argument_list|)
expr_stmt|;
block|}
DECL|method|testTranslogRecoverySyncsTranslog
specifier|public
name|void
name|testTranslogRecoverySyncsTranslog
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
name|metaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|putMapping
argument_list|(
literal|"test"
argument_list|,
literal|"{ \"properties\": { \"foo\":  { \"type\": \"text\"}}}"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
operator|.
name|primaryTerm
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexShard
name|primary
init|=
name|newShard
argument_list|(
operator|new
name|ShardId
argument_list|(
name|metaData
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|"n1"
argument_list|,
name|metaData
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|recoveryShardFromStore
argument_list|(
name|primary
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|primary
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|,
literal|"{\"foo\" : \"bar\"}"
argument_list|)
expr_stmt|;
name|IndexShard
name|replica
init|=
name|newShard
argument_list|(
name|primary
operator|.
name|shardId
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"n2"
argument_list|,
name|metaData
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|recoverReplica
argument_list|(
name|replica
argument_list|,
name|primary
argument_list|,
parameter_list|(
name|shard
parameter_list|,
name|discoveryNode
parameter_list|)
lambda|->
operator|new
name|RecoveryTarget
argument_list|(
name|shard
argument_list|,
name|discoveryNode
argument_list|,
name|recoveryListener
argument_list|,
name|aLong
lambda|->
block|{             }
argument_list|)
block|{
block|@Override                 public void indexTranslogOperations(List<Translog.Operation> operations
argument_list|,
name|int
name|totalTranslogOps
argument_list|)
block|{
name|super
operator|.
name|indexTranslogOperations
argument_list|(
name|operations
argument_list|,
name|totalTranslogOps
argument_list|)
block|;
name|assertFalse
argument_list|(
name|replica
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
block|;                 }
block|}
operator|,
literal|true
block|)
class|;
end_class

begin_expr_stmt
name|closeShards
argument_list|(
name|primary
argument_list|,
name|replica
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      public
DECL|method|testShardActiveDuringInternalRecovery
name|void
name|testShardActiveDuringInternalRecovery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexShard
name|shard
init|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|indexDoc
argument_list|(
name|shard
argument_list|,
literal|"type"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|shard
operator|=
name|reinitShard
argument_list|(
name|shard
argument_list|)
expr_stmt|;
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"foo"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|shard
operator|.
name|markAsRecovering
argument_list|(
literal|"for testing"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|shard
operator|.
name|routingEntry
argument_list|()
argument_list|,
name|localNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shard is still inactive since we haven't started recovering yet
name|assertFalse
argument_list|(
name|shard
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|shard
operator|.
name|prepareForIndexRecovery
argument_list|()
expr_stmt|;
comment|// Shard is still inactive since we haven't started recovering yet
name|assertFalse
argument_list|(
name|shard
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|shard
operator|.
name|performTranslogRecovery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Shard should now be active since we did recover:
name|assertTrue
argument_list|(
name|shard
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testShardActiveDuringPeerRecovery
specifier|public
name|void
name|testShardActiveDuringPeerRecovery
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
name|metaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|putMapping
argument_list|(
literal|"test"
argument_list|,
literal|"{ \"properties\": { \"foo\":  { \"type\": \"text\"}}}"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
operator|.
name|primaryTerm
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexShard
name|primary
init|=
name|newShard
argument_list|(
operator|new
name|ShardId
argument_list|(
name|metaData
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|"n1"
argument_list|,
name|metaData
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|recoveryShardFromStore
argument_list|(
name|primary
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|primary
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|,
literal|"{\"foo\" : \"bar\"}"
argument_list|)
expr_stmt|;
name|IndexShard
name|replica
init|=
name|newShard
argument_list|(
name|primary
operator|.
name|shardId
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"n2"
argument_list|,
name|metaData
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"foo"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|replica
operator|.
name|markAsRecovering
argument_list|(
literal|"for testing"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|replica
operator|.
name|routingEntry
argument_list|()
argument_list|,
name|localNode
argument_list|,
name|localNode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shard is still inactive since we haven't started recovering yet
name|assertFalse
argument_list|(
name|replica
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|recoverReplica
argument_list|(
name|replica
argument_list|,
name|primary
argument_list|,
parameter_list|(
name|shard
parameter_list|,
name|discoveryNode
parameter_list|)
lambda|->
operator|new
name|RecoveryTarget
argument_list|(
name|shard
argument_list|,
name|discoveryNode
argument_list|,
name|recoveryListener
argument_list|,
name|aLong
lambda|->
block|{             }
argument_list|)
block|{
block|@Override                 public void prepareForTranslogOperations(int totalTranslogOps
argument_list|,
name|long
name|maxUnsafeAutoIdTimestamp
argument_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|prepareForTranslogOperations
argument_list|(
name|totalTranslogOps
argument_list|,
name|maxUnsafeAutoIdTimestamp
argument_list|)
expr_stmt|;
comment|// Shard is still inactive since we haven't started recovering yet
name|assertFalse
argument_list|(
name|replica
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|indexTranslogOperations
parameter_list|(
name|List
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|operations
parameter_list|,
name|int
name|totalTranslogOps
parameter_list|)
block|{
name|super
operator|.
name|indexTranslogOperations
argument_list|(
name|operations
argument_list|,
name|totalTranslogOps
argument_list|)
expr_stmt|;
comment|// Shard should now be active since we did recover:
name|assertTrue
argument_list|(
name|replica
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
unit|},
literal|false
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|closeShards
argument_list|(
name|primary
argument_list|,
name|replica
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      public
DECL|method|testRecoverFromLocalShard
name|void
name|testRecoverFromLocalShard
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
name|metaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"source"
argument_list|)
operator|.
name|putMapping
argument_list|(
literal|"test"
argument_list|,
literal|"{ \"properties\": { \"foo\":  { \"type\": \"text\"}}}"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
operator|.
name|primaryTerm
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexShard
name|sourceShard
init|=
name|newShard
argument_list|(
operator|new
name|ShardId
argument_list|(
name|metaData
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|"n1"
argument_list|,
name|metaData
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|recoveryShardFromStore
argument_list|(
name|sourceShard
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sourceShard
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|,
literal|"{\"foo\" : \"bar\"}"
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sourceShard
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|,
literal|"{\"foo\" : \"bar\"}"
argument_list|)
expr_stmt|;
name|sourceShard
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ShardRouting
name|targetRouting
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"index_1"
argument_list|,
literal|"index_1"
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|"n1"
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|RecoverySource
operator|.
name|LocalShardsRecoverySource
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
specifier|final
name|IndexShard
name|targetShard
decl_stmt|;
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"foo"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|requestedMappingUpdates
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
block|{
name|targetShard
operator|=
name|newShard
argument_list|(
name|targetRouting
argument_list|)
expr_stmt|;
name|targetShard
operator|.
name|markAsRecovering
argument_list|(
literal|"store"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|targetShard
operator|.
name|routingEntry
argument_list|()
argument_list|,
name|localNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|BiConsumer
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|mappingConsumer
init|=
parameter_list|(
name|type
parameter_list|,
name|mapping
parameter_list|)
lambda|->
block|{
name|assertNull
argument_list|(
name|requestedMappingUpdates
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
specifier|final
name|IndexShard
name|differentIndex
init|=
name|newShard
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"index_2"
argument_list|,
literal|"index_2"
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|recoveryShardFromStore
argument_list|(
name|differentIndex
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|targetShard
operator|.
name|recoverFromLocalShards
argument_list|(
name|mappingConsumer
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|sourceShard
argument_list|,
name|differentIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|differentIndex
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetShard
operator|.
name|recoverFromLocalShards
argument_list|(
name|mappingConsumer
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|sourceShard
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RecoveryState
name|recoveryState
init|=
name|targetShard
operator|.
name|recoveryState
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|RecoveryState
operator|.
name|Stage
operator|.
name|DONE
argument_list|,
name|recoveryState
operator|.
name|getStage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|fileDetails
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|RecoveryState
operator|.
name|File
name|file
range|:
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|fileDetails
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|reused
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|file
operator|.
name|recovered
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|file
operator|.
name|recovered
argument_list|()
argument_list|,
name|file
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|targetShard
operator|.
name|updateRoutingEntry
argument_list|(
name|ShardRoutingHelper
operator|.
name|moveToStarted
argument_list|(
name|targetShard
operator|.
name|routingEntry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertDocCount
argument_list|(
name|targetShard
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// now check that it's persistent ie. that the added shards are committed
block|{
specifier|final
name|IndexShard
name|newShard
init|=
name|reinitShard
argument_list|(
name|targetShard
argument_list|)
decl_stmt|;
name|recoveryShardFromStore
argument_list|(
name|newShard
argument_list|)
expr_stmt|;
name|assertDocCount
argument_list|(
name|newShard
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|newShard
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|requestedMappingUpdates
argument_list|,
name|hasKey
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|requestedMappingUpdates
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|source
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{\"properties\":{\"foo\":{\"type\":\"text\"}}}"
argument_list|)
argument_list|)
expr_stmt|;
name|closeShards
argument_list|(
name|sourceShard
argument_list|,
name|targetShard
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/** A dummy repository for testing which just needs restore overridden */
end_comment

begin_class
DECL|class|RestoreOnlyRepository
specifier|private
specifier|abstract
specifier|static
class|class
name|RestoreOnlyRepository
extends|extends
name|AbstractLifecycleComponent
implements|implements
name|Repository
block|{
DECL|field|indexName
specifier|private
specifier|final
name|String
name|indexName
decl_stmt|;
DECL|method|RestoreOnlyRepository
specifier|public
name|RestoreOnlyRepository
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
name|super
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexName
operator|=
name|indexName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|getMetadata
specifier|public
name|RepositoryMetaData
name|getMetadata
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getSnapshotInfo
specifier|public
name|SnapshotInfo
name|getSnapshotInfo
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getSnapshotMetaData
specifier|public
name|MetaData
name|getSnapshotMetaData
parameter_list|(
name|SnapshotInfo
name|snapshot
parameter_list|,
name|List
argument_list|<
name|IndexId
argument_list|>
name|indices
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getRepositoryData
specifier|public
name|RepositoryData
name|getRepositoryData
parameter_list|()
block|{
name|Map
argument_list|<
name|IndexId
argument_list|,
name|Set
argument_list|<
name|SnapshotId
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
operator|new
name|IndexId
argument_list|(
name|indexName
argument_list|,
literal|"blah"
argument_list|)
argument_list|,
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|RepositoryData
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|map
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|initializeSnapshot
specifier|public
name|void
name|initializeSnapshot
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|List
argument_list|<
name|IndexId
argument_list|>
name|indices
parameter_list|,
name|MetaData
name|metaData
parameter_list|)
block|{         }
annotation|@
name|Override
DECL|method|finalizeSnapshot
specifier|public
name|SnapshotInfo
name|finalizeSnapshot
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|List
argument_list|<
name|IndexId
argument_list|>
name|indices
parameter_list|,
name|long
name|startTime
parameter_list|,
name|String
name|failure
parameter_list|,
name|int
name|totalShards
parameter_list|,
name|List
argument_list|<
name|SnapshotShardFailure
argument_list|>
name|shardFailures
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|deleteSnapshot
specifier|public
name|void
name|deleteSnapshot
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|)
block|{         }
annotation|@
name|Override
DECL|method|getSnapshotThrottleTimeInNanos
specifier|public
name|long
name|getSnapshotThrottleTimeInNanos
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getRestoreThrottleTimeInNanos
specifier|public
name|long
name|getRestoreThrottleTimeInNanos
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|startVerification
specifier|public
name|String
name|startVerification
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|endVerification
specifier|public
name|void
name|endVerification
parameter_list|(
name|String
name|verificationToken
parameter_list|)
block|{         }
annotation|@
name|Override
DECL|method|isReadOnly
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|snapshotShard
specifier|public
name|void
name|snapshotShard
parameter_list|(
name|IndexShard
name|shard
parameter_list|,
name|SnapshotId
name|snapshotId
parameter_list|,
name|IndexId
name|indexId
parameter_list|,
name|IndexCommit
name|snapshotIndexCommit
parameter_list|,
name|IndexShardSnapshotStatus
name|snapshotStatus
parameter_list|)
block|{         }
annotation|@
name|Override
DECL|method|getShardSnapshotStatus
specifier|public
name|IndexShardSnapshotStatus
name|getShardSnapshotStatus
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|Version
name|version
parameter_list|,
name|IndexId
name|indexId
parameter_list|,
name|ShardId
name|shardId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|verify
specifier|public
name|void
name|verify
parameter_list|(
name|String
name|verificationToken
parameter_list|,
name|DiscoveryNode
name|localNode
parameter_list|)
block|{         }
block|}
end_class

unit|}
end_unit

