begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|flush
operator|.
name|FlushRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|CommonStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|CommonStatsFlags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|IndexStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|ShardStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|TransportIndexAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|InternalClusterInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|SnapshotId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|AllocationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RestoreSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|TestShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|DummyTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|ShardLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|NodeServicesProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldDataStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|flush
operator|.
name|FlushStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParsedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardSnapshotStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|DummyShardLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|FieldMaskingReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|IndexSettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalSettingsPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
operator|.
name|cleanLuceneIndex
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
operator|.
name|EMPTY_PARAMS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchHits
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_comment
comment|/**  * Simple unit-test IndexShard related operations.  */
end_comment

begin_class
DECL|class|IndexShardTests
specifier|public
class|class
name|IndexShardTests
extends|extends
name|ESSingleNodeTestCase
block|{
annotation|@
name|Override
DECL|method|getPlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|getPlugins
parameter_list|()
block|{
return|return
name|pluginList
argument_list|(
name|InternalSettingsPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|testWriteShardState
specifier|public
name|void
name|testWriteShardState
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|NodeEnvironment
name|env
init|=
name|newNodeEnvironment
argument_list|()
init|)
block|{
name|ShardId
name|id
init|=
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|long
name|version
init|=
name|between
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|/
literal|2
argument_list|)
decl_stmt|;
name|boolean
name|primary
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|AllocationId
name|allocationId
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
name|randomAllocationId
argument_list|()
decl_stmt|;
name|ShardStateMetaData
name|state1
init|=
operator|new
name|ShardStateMetaData
argument_list|(
name|version
argument_list|,
name|primary
argument_list|,
literal|"foo"
argument_list|,
name|allocationId
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|state1
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|ShardStateMetaData
name|shardStateMetaData
init|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|state1
argument_list|)
expr_stmt|;
name|ShardStateMetaData
name|state2
init|=
operator|new
name|ShardStateMetaData
argument_list|(
name|version
argument_list|,
name|primary
argument_list|,
literal|"foo"
argument_list|,
name|allocationId
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|state2
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|shardStateMetaData
operator|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|state1
argument_list|)
expr_stmt|;
name|ShardStateMetaData
name|state3
init|=
operator|new
name|ShardStateMetaData
argument_list|(
name|version
operator|+
literal|1
argument_list|,
name|primary
argument_list|,
literal|"foo"
argument_list|,
name|allocationId
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|state3
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|shardStateMetaData
operator|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|state3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|state3
operator|.
name|indexUUID
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLockTryingToDelete
specifier|public
name|void
name|testLockTryingToDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|NodeEnvironment
name|env
init|=
name|getInstanceFromNode
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
index|[]
name|shardPaths
init|=
name|env
operator|.
name|availableShardPaths
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> paths: [{}]"
argument_list|,
operator|(
name|Object
operator|)
name|shardPaths
argument_list|)
expr_stmt|;
comment|// Should not be able to acquire the lock because it's already open
try|try
block|{
name|NodeEnvironment
operator|.
name|acquireFSLockForPaths
argument_list|(
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
literal|"test"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|shardPaths
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not have been able to acquire the lock"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"msg: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"unable to acquire write.lock"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test without the regular shard lock to assume we can acquire it
comment|// (worst case, meaning that the shard lock could be acquired and
comment|// we're green to delete the shard's directory)
name|ShardLock
name|sLock
init|=
operator|new
name|DummyShardLock
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|env
operator|.
name|deleteShardDirectoryUnderLock
argument_list|(
name|sLock
argument_list|,
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
literal|"test"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not have been able to delete the directory"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"msg: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"unable to acquire write.lock"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPersistenceStateMetadataPersistence
specifier|public
name|void
name|testPersistenceStateMetadataPersistence
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeEnvironment
name|env
init|=
name|getInstanceFromNode
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ShardStateMetaData
name|shardStateMetaData
init|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|shard
operator|.
name|shardId
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getShardStateMetadata
argument_list|(
name|shard
argument_list|)
argument_list|,
name|shardStateMetaData
argument_list|)
expr_stmt|;
name|ShardRouting
name|routing
init|=
operator|new
name|ShardRouting
argument_list|(
name|shard
operator|.
name|shardRouting
argument_list|)
decl_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|shardStateMetaData
operator|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|shard
operator|.
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|getShardStateMetadata
argument_list|(
name|shard
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
operator|new
name|ShardStateMetaData
argument_list|(
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|shard
operator|.
name|indexSettings
argument_list|()
operator|.
name|getUUID
argument_list|()
argument_list|,
name|routing
operator|.
name|allocationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that we don't write shard state metadata if persist == false
name|ShardRouting
name|updatedRouting
init|=
operator|new
name|ShardRouting
argument_list|(
name|shard
operator|.
name|shardRouting
argument_list|)
decl_stmt|;
name|TestShardRouting
operator|.
name|relocate
argument_list|(
name|updatedRouting
argument_list|,
literal|"some node"
argument_list|,
literal|42L
argument_list|)
expr_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|updatedRouting
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|shardStateMetaData
operator|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|shard
operator|.
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"shard state persisted despite of persist=false"
argument_list|,
name|shardStateMetaData
operator|.
name|equals
argument_list|(
name|getShardStateMetadata
argument_list|(
name|shard
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"shard state persisted despite of persist=false"
argument_list|,
name|shardStateMetaData
argument_list|,
operator|new
name|ShardStateMetaData
argument_list|(
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|shard
operator|.
name|indexSettings
argument_list|()
operator|.
name|getUUID
argument_list|()
argument_list|,
name|routing
operator|.
name|allocationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that we write shard state metadata if persist == true
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// move back state in IndexShard
name|routing
operator|=
operator|new
name|ShardRouting
argument_list|(
name|updatedRouting
argument_list|)
expr_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|shardStateMetaData
operator|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|shard
operator|.
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|getShardStateMetadata
argument_list|(
name|shard
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
operator|new
name|ShardStateMetaData
argument_list|(
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|shard
operator|.
name|indexSettings
argument_list|()
operator|.
name|getUUID
argument_list|()
argument_list|,
name|routing
operator|.
name|allocationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailShard
specifier|public
name|void
name|testFailShard
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeEnvironment
name|env
init|=
name|getInstanceFromNode
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// fail shard
name|shard
operator|.
name|failShard
argument_list|(
literal|"test shard fail"
argument_list|,
operator|new
name|CorruptIndexException
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// check state file still exists
name|ShardStateMetaData
name|shardStateMetaData
init|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|shard
operator|.
name|shardId
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|getShardStateMetadata
argument_list|(
name|shard
argument_list|)
argument_list|)
expr_stmt|;
name|ShardPath
name|shardPath
init|=
name|ShardPath
operator|.
name|loadShardPath
argument_list|(
name|logger
argument_list|,
name|env
argument_list|,
name|shard
operator|.
name|shardId
argument_list|()
argument_list|,
name|test
operator|.
name|getIndexSettings
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|shardPath
argument_list|)
expr_stmt|;
comment|// but index can't be opened for a failed shard
name|assertThat
argument_list|(
literal|"store index should be corrupted"
argument_list|,
name|Store
operator|.
name|canOpenIndex
argument_list|(
name|logger
argument_list|,
name|shardPath
operator|.
name|resolveIndex
argument_list|()
argument_list|,
name|shard
operator|.
name|shardId
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getShardStateMetadata
name|ShardStateMetaData
name|getShardStateMetadata
parameter_list|(
name|IndexShard
name|shard
parameter_list|)
block|{
name|ShardRouting
name|shardRouting
init|=
name|shard
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|shardRouting
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|ShardStateMetaData
argument_list|(
name|shardRouting
operator|.
name|primary
argument_list|()
argument_list|,
name|shard
operator|.
name|indexSettings
argument_list|()
operator|.
name|getUUID
argument_list|()
argument_list|,
name|shardRouting
operator|.
name|allocationId
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|randomAllocationId
specifier|private
name|AllocationId
name|randomAllocationId
parameter_list|()
block|{
name|AllocationId
name|allocationId
init|=
name|AllocationId
operator|.
name|newInitializing
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|allocationId
operator|=
name|AllocationId
operator|.
name|newRelocation
argument_list|(
name|allocationId
argument_list|)
expr_stmt|;
block|}
return|return
name|allocationId
return|;
block|}
DECL|method|testShardStateMetaHashCodeEquals
specifier|public
name|void
name|testShardStateMetaHashCodeEquals
parameter_list|()
block|{
name|AllocationId
name|allocationId
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
name|randomAllocationId
argument_list|()
decl_stmt|;
name|ShardStateMetaData
name|meta
init|=
operator|new
name|ShardStateMetaData
argument_list|(
name|randomLong
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|allocationId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|meta
argument_list|,
operator|new
name|ShardStateMetaData
argument_list|(
name|meta
operator|.
name|legacyVersion
argument_list|,
name|meta
operator|.
name|primary
argument_list|,
name|meta
operator|.
name|indexUUID
argument_list|,
name|meta
operator|.
name|allocationId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|hashCode
argument_list|()
argument_list|,
operator|new
name|ShardStateMetaData
argument_list|(
name|meta
operator|.
name|legacyVersion
argument_list|,
name|meta
operator|.
name|primary
argument_list|,
name|meta
operator|.
name|indexUUID
argument_list|,
name|meta
operator|.
name|allocationId
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|equals
argument_list|(
operator|new
name|ShardStateMetaData
argument_list|(
name|meta
operator|.
name|legacyVersion
argument_list|,
operator|!
name|meta
operator|.
name|primary
argument_list|,
name|meta
operator|.
name|indexUUID
argument_list|,
name|meta
operator|.
name|allocationId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|equals
argument_list|(
operator|new
name|ShardStateMetaData
argument_list|(
name|meta
operator|.
name|legacyVersion
operator|+
literal|1
argument_list|,
name|meta
operator|.
name|primary
argument_list|,
name|meta
operator|.
name|indexUUID
argument_list|,
name|meta
operator|.
name|allocationId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|equals
argument_list|(
operator|new
name|ShardStateMetaData
argument_list|(
name|meta
operator|.
name|legacyVersion
argument_list|,
operator|!
name|meta
operator|.
name|primary
argument_list|,
name|meta
operator|.
name|indexUUID
operator|+
literal|"foo"
argument_list|,
name|meta
operator|.
name|allocationId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|equals
argument_list|(
operator|new
name|ShardStateMetaData
argument_list|(
name|meta
operator|.
name|legacyVersion
argument_list|,
operator|!
name|meta
operator|.
name|primary
argument_list|,
name|meta
operator|.
name|indexUUID
operator|+
literal|"foo"
argument_list|,
name|randomAllocationId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|hashCodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
block|{
comment|// just a sanity check that we impl hashcode
name|allocationId
operator|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
name|randomAllocationId
argument_list|()
expr_stmt|;
name|meta
operator|=
operator|new
name|ShardStateMetaData
argument_list|(
name|randomLong
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|allocationId
argument_list|)
expr_stmt|;
name|hashCodes
operator|.
name|add
argument_list|(
name|meta
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"more than one unique hashcode expected but got: "
operator|+
name|hashCodes
operator|.
name|size
argument_list|()
argument_list|,
name|hashCodes
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteIndexPreventsNewOperations
specifier|public
name|void
name|testDeleteIndexPreventsNewOperations
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|indexShard
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|indexShard
operator|.
name|acquirePrimaryOperationLock
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"we should not be able to increment anymore"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexShardClosedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|indexShard
operator|.
name|acquireReplicaOperationLock
argument_list|(
name|indexShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|primaryTerm
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"we should not be able to increment anymore"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexShardClosedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testIndexOperationsCounter
specifier|public
name|void
name|testIndexOperationsCounter
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|long
name|primaryTerm
init|=
name|indexShard
operator|.
name|shardRouting
operator|.
name|primaryTerm
argument_list|()
decl_stmt|;
comment|// ugly hack to allow the shard to operated both as a replica and a primary
name|ShardRouting
name|temp
init|=
name|indexShard
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
name|ShardRouting
name|newShardRouting
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|temp
operator|.
name|index
argument_list|()
argument_list|,
name|temp
operator|.
name|id
argument_list|()
argument_list|,
name|temp
operator|.
name|currentNodeId
argument_list|()
argument_list|,
literal|"BLA!"
argument_list|,
name|temp
operator|.
name|primaryTerm
argument_list|()
argument_list|,
name|temp
operator|.
name|primary
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|AllocationId
operator|.
name|newRelocation
argument_list|(
name|temp
operator|.
name|allocationId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|indexShard
operator|.
name|updateRoutingEntry
argument_list|(
name|newShardRouting
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexShard
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|)
expr_stmt|;
name|Releasable
name|operation1
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|operation1
operator|=
name|indexShard
operator|.
name|acquirePrimaryOperationLock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|operation1
operator|=
name|indexShard
operator|.
name|acquireReplicaOperationLock
argument_list|(
name|primaryTerm
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexShard
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|)
expr_stmt|;
name|Releasable
name|operation2
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|operation2
operator|=
name|indexShard
operator|.
name|acquirePrimaryOperationLock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|operation2
operator|=
name|indexShard
operator|.
name|acquireReplicaOperationLock
argument_list|(
name|primaryTerm
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|indexShard
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|indexShard
operator|.
name|acquireReplicaOperationLock
argument_list|(
name|primaryTerm
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"you can not increment the operation counter with an older primary term"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalIndexShardStateException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"operation term"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"too old"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// but you can increment with a newer one..
name|indexShard
operator|.
name|acquireReplicaOperationLock
argument_list|(
name|primaryTerm
operator|+
literal|1
operator|+
name|randomInt
argument_list|(
literal|20
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Releasables
operator|.
name|close
argument_list|(
name|operation1
argument_list|,
name|operation2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexShard
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMarkAsInactiveTriggersSyncedFlush
specifier|public
name|void
name|testMarkAsInactiveTriggersSyncedFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
operator|.
name|checkIdle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
name|IndexStats
name|indexStats
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"test"
argument_list|)
operator|.
name|clear
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|indexStats
operator|.
name|getShards
argument_list|()
index|[
literal|0
index|]
operator|.
name|getCommitStats
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
operator|.
name|checkIdle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|IndexStats
name|indexStats
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|indexStats
operator|.
name|getShards
argument_list|()
index|[
literal|0
index|]
operator|.
name|getCommitStats
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|load
specifier|public
specifier|static
name|ShardStateMetaData
name|load
parameter_list|(
name|ESLogger
name|logger
parameter_list|,
name|Path
modifier|...
name|shardPaths
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ShardStateMetaData
operator|.
name|FORMAT
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|shardPaths
argument_list|)
return|;
block|}
DECL|method|write
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|ShardStateMetaData
name|shardStateMetaData
parameter_list|,
name|Path
modifier|...
name|shardPaths
parameter_list|)
throws|throws
name|IOException
block|{
name|ShardStateMetaData
operator|.
name|FORMAT
operator|.
name|write
argument_list|(
name|shardStateMetaData
argument_list|,
name|shardStateMetaData
operator|.
name|legacyVersion
argument_list|,
name|shardPaths
argument_list|)
expr_stmt|;
block|}
DECL|method|testDurableFlagHasEffect
specifier|public
name|void
name|testDurableFlagHasEffect
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durability
operator|.
name|REQUEST
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durability
operator|.
name|ASYNC
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durability
operator|.
name|REQUEST
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durability
operator|.
name|ASYNC
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durability
operator|.
name|REQUEST
argument_list|)
expr_stmt|;
name|assertNoFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durability
operator|.
name|ASYNC
argument_list|)
expr_stmt|;
name|assertNoFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durability
operator|.
name|REQUEST
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setDurability
specifier|private
name|void
name|setDurability
parameter_list|(
name|IndexShard
name|shard
parameter_list|,
name|Translog
operator|.
name|Durability
name|durability
parameter_list|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|shard
operator|.
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|INDEX_TRANSLOG_DURABILITY_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|durability
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|durability
argument_list|,
name|shard
operator|.
name|getTranslogDurability
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinimumCompatVersion
specifier|public
name|void
name|testMinimumCompatVersion
parameter_list|()
block|{
name|Version
name|versionCreated
init|=
name|VersionUtils
operator|.
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|,
name|SETTING_VERSION_CREATED
argument_list|,
name|versionCreated
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexShard
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|versionCreated
operator|.
name|luceneVersion
argument_list|,
name|test
operator|.
name|minimumCompatibleVersion
argument_list|()
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|versionCreated
operator|.
name|luceneVersion
argument_list|,
name|test
operator|.
name|minimumCompatibleVersion
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|.
name|getEngine
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Version
operator|.
name|CURRENT
operator|.
name|luceneVersion
argument_list|,
name|test
operator|.
name|minimumCompatibleVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testUpdatePriority
specifier|public
name|void
name|testUpdatePriority
parameter_list|()
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_PRIORITY
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|IndexService
name|indexService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|indexService
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getSettings
argument_list|()
operator|.
name|getAsInt
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_PRIORITY
argument_list|,
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_PRIORITY
argument_list|,
literal|400
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|indexService
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getSettings
argument_list|()
operator|.
name|getAsInt
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_PRIORITY
argument_list|,
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRecoverIntoLeftover
specifier|public
name|void
name|testRecoverIntoLeftover
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ShardPath
name|shardPath
init|=
name|shard
operator|.
name|shardPath
argument_list|()
decl_stmt|;
name|Path
name|dataPath
init|=
name|shardPath
operator|.
name|getDataPath
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClose
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Files
operator|.
name|move
argument_list|(
name|dataPath
argument_list|,
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|dataPath
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|move
argument_list|(
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|dataPath
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexDirIsDeletedWhenShardRemoved
specifier|public
name|void
name|testIndexDirIsDeletedWhenShardRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|getInstanceFromNode
argument_list|(
name|Environment
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|idxPath
init|=
name|env
operator|.
name|sharedDataFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> idxPath: [{}]"
argument_list|,
name|idxPath
argument_list|)
expr_stmt|;
name|Settings
name|idxSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|idxPath
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|idxSettings
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertPathHasBeenCleared
argument_list|(
name|idxPath
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpectedShardSizeIsPresent
specifier|public
name|void
name|testExpectedShardSizeIsPresent
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|InternalClusterInfoService
name|clusterInfoService
init|=
operator|(
name|InternalClusterInfoService
operator|)
name|getInstanceFromNode
argument_list|(
name|ClusterInfoService
operator|.
name|class
argument_list|)
decl_stmt|;
name|clusterInfoService
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|ClusterState
name|state
init|=
name|getInstanceFromNode
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
operator|.
name|state
argument_list|()
decl_stmt|;
name|Long
name|test
init|=
name|clusterInfoService
operator|.
name|getClusterInfo
argument_list|()
operator|.
name|getShardSize
argument_list|(
name|state
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexCanChangeCustomDataPath
specifier|public
name|void
name|testIndexCanChangeCustomDataPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|getInstanceFromNode
argument_list|(
name|Environment
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|idxPath
init|=
name|env
operator|.
name|sharedDataFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|INDEX
init|=
literal|"idx"
decl_stmt|;
name|Path
name|startDir
init|=
name|idxPath
operator|.
name|resolve
argument_list|(
literal|"start-"
operator|+
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|endDir
init|=
name|idxPath
operator|.
name|resolve
argument_list|(
literal|"end-"
operator|+
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start dir: [{}]"
argument_list|,
name|startDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"-->   end dir: [{}]"
argument_list|,
name|endDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// temp dirs are automatically created, but the end dir is what
comment|// startDir is going to be renamed as, so it needs to be deleted
comment|// otherwise we get all sorts of errors about the directory
comment|// already existing
name|IOUtils
operator|.
name|rm
argument_list|(
name|endDir
argument_list|)
expr_stmt|;
name|Settings
name|sb
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|startDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Settings
name|sb2
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|endDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating an index with data_path [{}]"
argument_list|,
name|startDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
name|INDEX
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|INDEX
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
literal|"bar"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"found the hit"
argument_list|,
name|resp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> closing the index [{}]"
argument_list|,
name|INDEX
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClose
argument_list|(
name|INDEX
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> index closed, re-opening..."
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOpen
argument_list|(
name|INDEX
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> index re-opened"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|INDEX
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"found the hit"
argument_list|,
name|resp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now, try closing and changing the settings
name|logger
operator|.
name|info
argument_list|(
literal|"--> closing the index [{}]"
argument_list|,
name|INDEX
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClose
argument_list|(
name|INDEX
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> moving data on disk [{}] to [{}]"
argument_list|,
name|startDir
operator|.
name|getFileName
argument_list|()
argument_list|,
name|endDir
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|Files
operator|.
name|exists
argument_list|(
name|endDir
argument_list|)
operator|==
literal|false
operator|:
literal|"end directory should not exist!"
assert|;
name|Files
operator|.
name|move
argument_list|(
name|startDir
argument_list|,
name|endDir
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> updating settings..."
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|sb2
argument_list|)
operator|.
name|setIndicesOptions
argument_list|(
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
assert|assert
name|Files
operator|.
name|exists
argument_list|(
name|startDir
argument_list|)
operator|==
literal|false
operator|:
literal|"start dir shouldn't exist"
assert|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> settings updated and files moved, re-opening index"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOpen
argument_list|(
name|INDEX
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> index re-opened"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|INDEX
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"found the hit"
argument_list|,
name|resp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|INDEX
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathHasBeenCleared
argument_list|(
name|startDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertPathHasBeenCleared
argument_list|(
name|endDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testShardStats
specifier|public
name|void
name|testShardStats
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ShardStats
name|stats
init|=
operator|new
name|ShardStats
argument_list|(
name|shard
operator|.
name|routingEntry
argument_list|()
argument_list|,
name|shard
operator|.
name|shardPath
argument_list|()
argument_list|,
operator|new
name|CommonStats
argument_list|(
name|indicesService
operator|.
name|getIndicesQueryCache
argument_list|()
argument_list|,
name|shard
argument_list|,
operator|new
name|CommonStatsFlags
argument_list|()
argument_list|)
argument_list|,
name|shard
operator|.
name|commitStats
argument_list|()
argument_list|,
name|shard
operator|.
name|seqNoStats
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|shard
operator|.
name|shardPath
argument_list|()
operator|.
name|getRootDataPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|stats
operator|.
name|getDataPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shard
operator|.
name|shardPath
argument_list|()
operator|.
name|getRootStatePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|stats
operator|.
name|getStatePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shard
operator|.
name|shardPath
argument_list|()
operator|.
name|isCustomDataPath
argument_list|()
argument_list|,
name|stats
operator|.
name|isCustomDataPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
operator|||
literal|true
condition|)
block|{
comment|// try to serialize it to ensure values survive the serialization
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|stats
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|StreamInput
name|in
init|=
name|StreamInput
operator|.
name|wrap
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|stats
operator|=
name|ShardStats
operator|.
name|readShardStats
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|stats
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|String
name|xContent
init|=
name|builder
operator|.
name|string
argument_list|()
decl_stmt|;
name|StringBuilder
name|expectedSubSequence
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"\"shard_path\":{\"state_path\":\""
argument_list|)
decl_stmt|;
name|expectedSubSequence
operator|.
name|append
argument_list|(
name|shard
operator|.
name|shardPath
argument_list|()
operator|.
name|getRootStatePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|expectedSubSequence
operator|.
name|append
argument_list|(
literal|"\",\"data_path\":\""
argument_list|)
expr_stmt|;
name|expectedSubSequence
operator|.
name|append
argument_list|(
name|shard
operator|.
name|shardPath
argument_list|()
operator|.
name|getRootDataPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|expectedSubSequence
operator|.
name|append
argument_list|(
literal|"\",\"is_custom_data_path\":"
argument_list|)
operator|.
name|append
argument_list|(
name|shard
operator|.
name|shardPath
argument_list|()
operator|.
name|isCustomDataPath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|assumeFalse
argument_list|(
literal|"Some path weirdness on windows"
argument_list|,
name|Constants
operator|.
name|WINDOWS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xContent
operator|.
name|contains
argument_list|(
name|expectedSubSequence
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParsedDocument
specifier|private
name|ParsedDocument
name|testParsedDocument
parameter_list|(
name|String
name|uid
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|routing
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|long
name|ttl
parameter_list|,
name|ParseContext
operator|.
name|Document
name|document
parameter_list|,
name|BytesReference
name|source
parameter_list|,
name|Mapping
name|mappingUpdate
parameter_list|)
block|{
name|Field
name|uidField
init|=
operator|new
name|Field
argument_list|(
literal|"_uid"
argument_list|,
name|uid
argument_list|,
name|UidFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
decl_stmt|;
name|Field
name|versionField
init|=
operator|new
name|NumericDocValuesField
argument_list|(
literal|"_version"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Field
name|seqNoField
init|=
operator|new
name|NumericDocValuesField
argument_list|(
literal|"_seq_no"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|uidField
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|versionField
argument_list|)
expr_stmt|;
return|return
operator|new
name|ParsedDocument
argument_list|(
name|uidField
argument_list|,
name|versionField
argument_list|,
name|seqNoField
argument_list|,
name|id
argument_list|,
name|type
argument_list|,
name|routing
argument_list|,
name|timestamp
argument_list|,
name|ttl
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|document
argument_list|)
argument_list|,
name|source
argument_list|,
name|mappingUpdate
argument_list|)
return|;
block|}
DECL|method|testIndexingOperationsListeners
specifier|public
name|void
name|testIndexingOperationsListeners
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
literal|"test_iol"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test_iol"
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"foo\" : \"bar\"}"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test_iol"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicInteger
name|preIndex
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|AtomicInteger
name|postIndex
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|AtomicInteger
name|postIndexException
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|AtomicInteger
name|preDelete
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|AtomicInteger
name|postDelete
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|AtomicInteger
name|postDeleteException
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|shard
operator|=
name|reinitWithWrapper
argument_list|(
name|test
argument_list|,
name|shard
argument_list|,
literal|null
argument_list|,
operator|new
name|IndexingOperationListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Engine
operator|.
name|Index
name|preIndex
parameter_list|(
name|Engine
operator|.
name|Index
name|operation
parameter_list|)
block|{
name|preIndex
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|operation
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postIndex
parameter_list|(
name|Engine
operator|.
name|Index
name|index
parameter_list|)
block|{
name|postIndex
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postIndex
parameter_list|(
name|Engine
operator|.
name|Index
name|index
parameter_list|,
name|Throwable
name|ex
parameter_list|)
block|{
name|postIndexException
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Engine
operator|.
name|Delete
name|preDelete
parameter_list|(
name|Engine
operator|.
name|Delete
name|delete
parameter_list|)
block|{
name|preDelete
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|delete
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDelete
parameter_list|(
name|Engine
operator|.
name|Delete
name|delete
parameter_list|)
block|{
name|postDelete
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDelete
parameter_list|(
name|Engine
operator|.
name|Delete
name|delete
parameter_list|,
name|Throwable
name|ex
parameter_list|)
block|{
name|postDeleteException
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|ParseContext
operator|.
name|Document
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|shard
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|preIndex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postIndex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postIndexException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|preDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postDeleteException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Delete
name|delete
init|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|shard
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|preIndex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postIndex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postIndexException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|preDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postDeleteException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|shard
operator|.
name|close
argument_list|(
literal|"Unexpected close"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|shard
operator|.
name|state
operator|=
name|IndexShardState
operator|.
name|STARTED
expr_stmt|;
comment|// It will generate exception
try|try
block|{
name|shard
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalIndexShardStateException
name|e
parameter_list|)
block|{          }
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|preIndex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postIndex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postIndexException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|preDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|postDeleteException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|shard
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalIndexShardStateException
name|e
parameter_list|)
block|{          }
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|preIndex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postIndex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postIndexException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|preDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postDelete
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|postDeleteException
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMaybeFlush
specifier|public
name|void
name|testMaybeFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|INDEX_TRANSLOG_DURABILITY_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|Translog
operator|.
name|Durability
operator|.
name|REQUEST
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|shard
operator|.
name|shouldFlush
argument_list|()
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|133
comment|/* size of the operation + header&footer*/
argument_list|,
name|ByteSizeUnit
operator|.
name|BYTES
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setRefresh
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|shard
operator|.
name|shouldFlush
argument_list|()
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|ParseContext
operator|.
name|Document
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|shard
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|shard
operator|.
name|shouldFlush
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setRefresh
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
comment|// this is async
name|assertFalse
argument_list|(
name|shard
operator|.
name|shouldFlush
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|)
expr_stmt|;
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|sync
argument_list|()
expr_stmt|;
name|long
name|size
init|=
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|sizeInBytes
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> current translog size: [{}] num_ops [{}] generation [{}]"
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|size
argument_list|,
name|ByteSizeUnit
operator|.
name|BYTES
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> translog size after delete: [{}] num_ops [{}] generation [{}]"
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
comment|// this is async
name|logger
operator|.
name|info
argument_list|(
literal|"--> translog size on iter  : [{}] num_ops [{}] generation [{}]"
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|shard
operator|.
name|shouldFlush
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shard
operator|.
name|getEngine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStressMaybeFlush
specifier|public
name|void
name|testStressMaybeFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|shard
operator|.
name|shouldFlush
argument_list|()
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|133
comment|/* size of the operation + header&footer*/
argument_list|,
name|ByteSizeUnit
operator|.
name|BYTES
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setRefresh
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|shard
operator|.
name|shouldFlush
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|running
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numThreads
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|numThreads
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|BrokenBarrierException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
while|while
condition|(
name|running
operator|.
name|get
argument_list|()
condition|)
block|{
name|shard
operator|.
name|maybeFlush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|FlushStats
name|flushStats
init|=
name|shard
operator|.
name|flushStats
argument_list|()
decl_stmt|;
name|long
name|total
init|=
name|flushStats
operator|.
name|getTotal
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
name|assertEquals
argument_list|(
name|total
operator|+
literal|1
argument_list|,
name|shard
operator|.
name|flushStats
argument_list|()
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|running
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|total
operator|+
literal|1
argument_list|,
name|shard
operator|.
name|flushStats
argument_list|()
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLockingBeforeAndAfterRelocated
specifier|public
name|void
name|testLockingBeforeAndAfterRelocated
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Thread
name|recoveryThread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|shard
operator|.
name|relocated
argument_list|(
literal|"simulated recovery"
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
try|try
init|(
name|Releasable
name|ignored
init|=
name|shard
operator|.
name|acquirePrimaryOperationLock
argument_list|()
init|)
block|{
comment|// start finalization of recovery
name|recoveryThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// recovery can only be finalized after we release the current primaryOperationLock
name|assertThat
argument_list|(
name|shard
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexShardState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// recovery can be now finalized
name|recoveryThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|shard
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexShardState
operator|.
name|RELOCATED
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Releasable
name|ignored
init|=
name|shard
operator|.
name|acquirePrimaryOperationLock
argument_list|()
init|)
block|{
comment|// lock can again be acquired
name|assertThat
argument_list|(
name|shard
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexShardState
operator|.
name|RELOCATED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testStressRelocated
specifier|public
name|void
name|testStressRelocated
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numThreads
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|indexThreads
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
name|CountDownLatch
name|allPrimaryOperationLocksAcquired
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|numThreads
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexThreads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|indexThreads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
init|(
name|Releasable
name|operationLock
init|=
name|shard
operator|.
name|acquirePrimaryOperationLock
argument_list|()
init|)
block|{
name|allPrimaryOperationLocksAcquired
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|BrokenBarrierException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
expr_stmt|;
name|indexThreads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|AtomicBoolean
name|relocated
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|Thread
name|recoveryThread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|shard
operator|.
name|relocated
argument_list|(
literal|"simulated recovery"
argument_list|)
expr_stmt|;
name|relocated
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
comment|// ensure we wait for all primary operation locks to be acquired
name|allPrimaryOperationLocksAcquired
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// start recovery thread
name|recoveryThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|relocated
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shard
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// ensure we only transition to RELOCATED state after pending operations completed
name|assertThat
argument_list|(
name|shard
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexShardState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
comment|// complete pending operations
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// complete recovery/relocation
name|recoveryThread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// ensure relocated successfully once pending operations are done
name|assertThat
argument_list|(
name|relocated
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shard
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexShardState
operator|.
name|RELOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shard
operator|.
name|getActiveOperationsCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|indexThread
range|:
name|indexThreads
control|)
block|{
name|indexThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testRecoverFromStore
specifier|public
name|void
name|testRecoverFromStore
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|translogOps
init|=
literal|1
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setRefresh
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|translogOps
operator|=
literal|0
expr_stmt|;
block|}
name|ShardRouting
name|routing
init|=
operator|new
name|ShardRouting
argument_list|(
name|shard
operator|.
name|routingEntry
argument_list|()
argument_list|)
decl_stmt|;
name|test
operator|.
name|removeShard
argument_list|(
literal|0
argument_list|,
literal|"b/c simon says so"
argument_list|)
expr_stmt|;
name|ShardRoutingHelper
operator|.
name|reinit
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|IndexShard
name|newShard
init|=
name|test
operator|.
name|createShard
argument_list|(
name|routing
argument_list|)
decl_stmt|;
name|newShard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"foo"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|newShard
operator|.
name|markAsRecovering
argument_list|(
literal|"store"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|newShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|RecoveryState
operator|.
name|Type
operator|.
name|STORE
argument_list|,
name|localNode
argument_list|,
name|localNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newShard
operator|.
name|recoverFromStore
argument_list|(
name|localNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|translogOps
argument_list|,
name|newShard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|recoveredOperations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|translogOps
argument_list|,
name|newShard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|translogOps
argument_list|,
name|newShard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperationsOnStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100.0f
argument_list|,
name|newShard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|recoveredPercent
argument_list|()
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
name|routing
operator|=
operator|new
name|ShardRouting
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|ShardRoutingHelper
operator|.
name|moveToStarted
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testRecoverFromCleanStore
specifier|public
name|void
name|testRecoverFromCleanStore
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setRefresh
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|ShardRouting
name|routing
init|=
operator|new
name|ShardRouting
argument_list|(
name|shard
operator|.
name|routingEntry
argument_list|()
argument_list|)
decl_stmt|;
name|test
operator|.
name|removeShard
argument_list|(
literal|0
argument_list|,
literal|"b/c simon says so"
argument_list|)
expr_stmt|;
name|ShardRoutingHelper
operator|.
name|reinit
argument_list|(
name|routing
argument_list|,
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|INDEX_CREATED
argument_list|)
expr_stmt|;
name|IndexShard
name|newShard
init|=
name|test
operator|.
name|createShard
argument_list|(
name|routing
argument_list|)
decl_stmt|;
name|newShard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"foo"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|newShard
operator|.
name|markAsRecovering
argument_list|(
literal|"store"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|newShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|RecoveryState
operator|.
name|Type
operator|.
name|STORE
argument_list|,
name|localNode
argument_list|,
name|localNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newShard
operator|.
name|recoverFromStore
argument_list|(
name|localNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|newShard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|recoveredOperations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|newShard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|newShard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperationsOnStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100.0f
argument_list|,
name|newShard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|recoveredPercent
argument_list|()
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
name|routing
operator|=
operator|new
name|ShardRouting
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|ShardRoutingHelper
operator|.
name|moveToStarted
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailIfIndexNotPresentInRecoverFromStore
specifier|public
name|void
name|testFailIfIndexNotPresentInRecoverFromStore
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"foo"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setRefresh
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
specifier|final
name|ShardRouting
name|origRouting
init|=
name|shard
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
name|ShardRouting
name|routing
init|=
operator|new
name|ShardRouting
argument_list|(
name|origRouting
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|shard
operator|.
name|store
argument_list|()
decl_stmt|;
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|test
operator|.
name|removeShard
argument_list|(
literal|0
argument_list|,
literal|"b/c simon says so"
argument_list|)
expr_stmt|;
name|cleanLuceneIndex
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|ShardRoutingHelper
operator|.
name|reinit
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|IndexShard
name|newShard
init|=
name|test
operator|.
name|createShard
argument_list|(
name|routing
argument_list|)
decl_stmt|;
name|newShard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|markAsRecovering
argument_list|(
literal|"store"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|newShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|RecoveryState
operator|.
name|Type
operator|.
name|STORE
argument_list|,
name|localNode
argument_list|,
name|localNode
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|newShard
operator|.
name|recoverFromStore
argument_list|(
name|localNode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"index not there!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexShardRecoveryException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"failed to fetch index version after copying it over"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ShardRoutingHelper
operator|.
name|moveToUnassigned
argument_list|(
name|routing
argument_list|,
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|INDEX_CREATED
argument_list|,
literal|"because I say so"
argument_list|)
argument_list|)
expr_stmt|;
name|ShardRoutingHelper
operator|.
name|initialize
argument_list|(
name|routing
argument_list|,
name|origRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"it's already recovering, we should ignore new ones"
argument_list|,
name|newShard
operator|.
name|ignoreRecoveryAttempt
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|newShard
operator|.
name|markAsRecovering
argument_list|(
literal|"store"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|newShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|RecoveryState
operator|.
name|Type
operator|.
name|STORE
argument_list|,
name|localNode
argument_list|,
name|localNode
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"we are already recovering, can't mark again"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalIndexShardStateException
name|e
parameter_list|)
block|{
comment|// OK!
block|}
name|test
operator|.
name|removeShard
argument_list|(
literal|0
argument_list|,
literal|"I broken it"
argument_list|)
expr_stmt|;
name|newShard
operator|=
name|test
operator|.
name|createShard
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|markAsRecovering
argument_list|(
literal|"store"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|newShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|RecoveryState
operator|.
name|Type
operator|.
name|STORE
argument_list|,
name|localNode
argument_list|,
name|localNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"recover even if there is nothing to recover"
argument_list|,
name|newShard
operator|.
name|recoverFromStore
argument_list|(
name|localNode
argument_list|)
argument_list|)
expr_stmt|;
name|routing
operator|=
operator|new
name|ShardRouting
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|ShardRoutingHelper
operator|.
name|moveToStarted
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// we can't issue this request through a client because of the inconsistencies we created with the cluster state
comment|// doing it directly instead
name|IndexRequest
name|request
init|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|request
argument_list|()
decl_stmt|;
name|request
operator|.
name|process
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|test
operator|.
name|getMetaData
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|TransportIndexAction
operator|.
name|executeIndexRequestOnPrimary
argument_list|(
name|request
argument_list|,
name|newShard
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testRecoveryFailsAfterMovingToRelocatedState
specifier|public
name|void
name|testRecoveryFailsAfterMovingToRelocatedState
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ShardRouting
name|origRouting
init|=
name|shard
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|shard
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexShardState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|ShardRouting
name|inRecoveryRouting
init|=
operator|new
name|ShardRouting
argument_list|(
name|origRouting
argument_list|)
decl_stmt|;
name|ShardRoutingHelper
operator|.
name|relocate
argument_list|(
name|inRecoveryRouting
argument_list|,
literal|"some_node"
argument_list|)
expr_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|inRecoveryRouting
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|shard
operator|.
name|relocated
argument_list|(
literal|"simulate mark as relocated"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shard
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexShardState
operator|.
name|RELOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|ShardRouting
name|failedRecoveryRouting
init|=
operator|new
name|ShardRouting
argument_list|(
name|origRouting
argument_list|)
decl_stmt|;
try|try
block|{
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|failedRecoveryRouting
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IndexShardRelocatedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexShardRelocatedException
name|expected
parameter_list|)
block|{         }
block|}
DECL|method|testRestoreShard
specifier|public
name|void
name|testRestoreShard
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"test_target"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexService
name|test_target
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test_target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|IndexShard
name|test_shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setRefresh
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test_target"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test_target"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test_target"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// only flush test
specifier|final
name|ShardRouting
name|origRouting
init|=
name|test_target
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
name|ShardRouting
name|routing
init|=
operator|new
name|ShardRouting
argument_list|(
name|origRouting
argument_list|)
decl_stmt|;
name|ShardRoutingHelper
operator|.
name|reinit
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|routing
operator|=
name|ShardRoutingHelper
operator|.
name|newWithRestoreSource
argument_list|(
name|routing
argument_list|,
operator|new
name|RestoreSource
argument_list|(
operator|new
name|SnapshotId
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|test_target
operator|.
name|removeShard
argument_list|(
literal|0
argument_list|,
literal|"just do it man!"
argument_list|)
expr_stmt|;
specifier|final
name|IndexShard
name|test_target_shard
init|=
name|test_target
operator|.
name|createShard
argument_list|(
name|routing
argument_list|)
decl_stmt|;
name|Store
name|sourceStore
init|=
name|test_shard
operator|.
name|store
argument_list|()
decl_stmt|;
name|Store
name|targetStore
init|=
name|test_target_shard
operator|.
name|store
argument_list|()
decl_stmt|;
name|test_target_shard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"foo"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|test_target_shard
operator|.
name|markAsRecovering
argument_list|(
literal|"store"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|routing
operator|.
name|shardId
argument_list|()
argument_list|,
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|RecoveryState
operator|.
name|Type
operator|.
name|SNAPSHOT
argument_list|,
name|routing
operator|.
name|restoreSource
argument_list|()
argument_list|,
name|localNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test_target_shard
operator|.
name|restoreFromRepository
argument_list|(
operator|new
name|IndexShardRepository
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|snapshot
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|ShardId
name|shardId
parameter_list|,
name|IndexCommit
name|snapshotIndexCommit
parameter_list|,
name|IndexShardSnapshotStatus
name|snapshotStatus
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|restore
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|Version
name|version
parameter_list|,
name|ShardId
name|shardId
parameter_list|,
name|ShardId
name|snapshotShardId
parameter_list|,
name|RecoveryState
name|recoveryState
parameter_list|)
block|{
try|try
block|{
name|cleanLuceneIndex
argument_list|(
name|targetStore
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|file
range|:
name|sourceStore
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|equals
argument_list|(
literal|"write.lock"
argument_list|)
operator|||
name|file
operator|.
name|startsWith
argument_list|(
literal|"extra"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|targetStore
operator|.
name|directory
argument_list|()
operator|.
name|copyFrom
argument_list|(
name|sourceStore
operator|.
name|directory
argument_list|()
argument_list|,
name|file
argument_list|,
name|file
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|IndexShardSnapshotStatus
name|snapshotStatus
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|Version
name|version
parameter_list|,
name|ShardId
name|shardId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verify
parameter_list|(
name|String
name|verificationToken
parameter_list|)
block|{             }
block|}
argument_list|,
name|localNode
argument_list|)
argument_list|)
expr_stmt|;
name|routing
operator|=
operator|new
name|ShardRouting
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|ShardRoutingHelper
operator|.
name|moveToStarted
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|test_target_shard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test_target"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test_target"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSearcherWrapperIsUsed
specifier|public
name|void
name|testSearcherWrapperIsUsed
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|indexService
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"foo\" : \"bar\"}"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"foobar\" : \"bar\"}"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Engine
operator|.
name|GetResult
name|getResult
init|=
name|shard
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|false
argument_list|,
operator|new
name|Term
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|,
name|Uid
operator|.
name|createUid
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getResult
operator|.
name|searcher
argument_list|()
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|shard
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|search
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|search
operator|.
name|totalHits
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|search
operator|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foobar"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|search
operator|.
name|totalHits
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|IndexSearcherWrapper
name|wrapper
init|=
operator|new
name|IndexSearcherWrapper
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DirectoryReader
name|wrap
parameter_list|(
name|DirectoryReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FieldMaskingReader
argument_list|(
literal|"foo"
argument_list|,
name|reader
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexSearcher
name|wrap
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|EngineException
block|{
return|return
name|searcher
return|;
block|}
block|}
decl_stmt|;
name|IndexShard
name|newShard
init|=
name|reinitWithWrapper
argument_list|(
name|indexService
argument_list|,
name|shard
argument_list|,
name|wrapper
argument_list|)
decl_stmt|;
try|try
block|{
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|newShard
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|search
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|search
operator|.
name|totalHits
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|search
operator|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foobar"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|search
operator|.
name|totalHits
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|getResult
operator|=
name|newShard
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|false
argument_list|,
operator|new
name|Term
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|,
name|Uid
operator|.
name|createUid
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getResult
operator|.
name|searcher
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure get uses the wrapped reader
name|assertTrue
argument_list|(
name|getResult
operator|.
name|searcher
argument_list|()
operator|.
name|reader
argument_list|()
operator|instanceof
name|FieldMaskingReader
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|newShard
operator|.
name|close
argument_list|(
literal|"just do it"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSearcherWrapperWorksWithGlobaOrdinals
specifier|public
name|void
name|testSearcherWrapperWorksWithGlobaOrdinals
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|indexService
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"foo\" : \"bar\"}"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"foobar\" : \"bar\"}"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|IndexSearcherWrapper
name|wrapper
init|=
operator|new
name|IndexSearcherWrapper
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DirectoryReader
name|wrap
parameter_list|(
name|DirectoryReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FieldMaskingReader
argument_list|(
literal|"foo"
argument_list|,
name|reader
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexSearcher
name|wrap
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|EngineException
block|{
return|return
name|searcher
return|;
block|}
block|}
decl_stmt|;
name|IndexShard
name|newShard
init|=
name|reinitWithWrapper
argument_list|(
name|indexService
argument_list|,
name|shard
argument_list|,
name|wrapper
argument_list|)
decl_stmt|;
try|try
block|{
comment|// test global ordinals are evicted
name|MappedFieldType
name|foo
init|=
name|newShard
operator|.
name|mapperService
argument_list|()
operator|.
name|fullName
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|IndexFieldData
operator|.
name|Global
name|ifd
init|=
name|shard
operator|.
name|indexFieldDataService
argument_list|()
operator|.
name|getForField
argument_list|(
name|foo
argument_list|)
decl_stmt|;
name|FieldDataStats
name|before
init|=
name|shard
operator|.
name|fieldData
argument_list|()
operator|.
name|stats
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|before
operator|.
name|getMemorySizeInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|FieldDataStats
name|after
init|=
literal|null
decl_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|newShard
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|assumeTrue
argument_list|(
literal|"we have to have more than one segment"
argument_list|,
name|searcher
operator|.
name|getDirectoryReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|IndexFieldData
name|indexFieldData
init|=
name|ifd
operator|.
name|loadGlobal
argument_list|(
name|searcher
operator|.
name|getDirectoryReader
argument_list|()
argument_list|)
decl_stmt|;
name|after
operator|=
name|shard
operator|.
name|fieldData
argument_list|()
operator|.
name|stats
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|after
operator|.
name|getEvictions
argument_list|()
argument_list|,
name|before
operator|.
name|getEvictions
argument_list|()
argument_list|)
expr_stmt|;
comment|// If a field doesn't exist an empty IndexFieldData is returned and that isn't cached:
name|assertThat
argument_list|(
name|after
operator|.
name|getMemorySizeInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|shard
operator|.
name|fieldData
argument_list|()
operator|.
name|stats
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getEvictions
argument_list|()
argument_list|,
name|before
operator|.
name|getEvictions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shard
operator|.
name|fieldData
argument_list|()
operator|.
name|stats
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getMemorySizeInBytes
argument_list|()
argument_list|,
name|after
operator|.
name|getMemorySizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|flush
argument_list|(
operator|new
name|FlushRequest
argument_list|()
operator|.
name|force
argument_list|(
literal|true
argument_list|)
operator|.
name|waitIfOngoing
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shard
operator|.
name|fieldData
argument_list|()
operator|.
name|stats
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getMemorySizeInBytes
argument_list|()
argument_list|,
name|before
operator|.
name|getMemorySizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shard
operator|.
name|fieldData
argument_list|()
operator|.
name|stats
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getEvictions
argument_list|()
argument_list|,
name|before
operator|.
name|getEvictions
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|newShard
operator|.
name|close
argument_list|(
literal|"just do it"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSearchIsReleaseIfWrapperFails
specifier|public
name|void
name|testSearchIsReleaseIfWrapperFails
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|indexService
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"foo\" : \"bar\"}"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|IndexSearcherWrapper
name|wrapper
init|=
operator|new
name|IndexSearcherWrapper
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DirectoryReader
name|wrap
parameter_list|(
name|DirectoryReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"boom"
argument_list|)
throw|;
block|}
specifier|public
name|IndexSearcher
name|wrap
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|EngineException
block|{
return|return
name|searcher
return|;
block|}
block|}
decl_stmt|;
name|IndexShard
name|newShard
init|=
name|reinitWithWrapper
argument_list|(
name|indexService
argument_list|,
name|shard
argument_list|,
name|wrapper
argument_list|)
decl_stmt|;
try|try
block|{
name|newShard
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
comment|//
block|}
finally|finally
block|{
name|newShard
operator|.
name|close
argument_list|(
literal|"just do it"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test will fail due to unclosed searchers if the searcher is not released
block|}
DECL|method|reinitWithWrapper
specifier|private
specifier|final
name|IndexShard
name|reinitWithWrapper
parameter_list|(
name|IndexService
name|indexService
parameter_list|,
name|IndexShard
name|shard
parameter_list|,
name|IndexSearcherWrapper
name|wrapper
parameter_list|,
name|IndexingOperationListener
modifier|...
name|listeners
parameter_list|)
throws|throws
name|IOException
block|{
name|ShardRouting
name|routing
init|=
operator|new
name|ShardRouting
argument_list|(
name|shard
operator|.
name|routingEntry
argument_list|()
argument_list|)
decl_stmt|;
name|shard
operator|.
name|close
argument_list|(
literal|"simon says"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NodeServicesProvider
name|indexServices
init|=
name|indexService
operator|.
name|getIndexServices
argument_list|()
decl_stmt|;
name|IndexShard
name|newShard
init|=
operator|new
name|IndexShard
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
argument_list|,
name|indexService
operator|.
name|getIndexSettings
argument_list|()
argument_list|,
name|shard
operator|.
name|shardPath
argument_list|()
argument_list|,
name|shard
operator|.
name|store
argument_list|()
argument_list|,
name|indexService
operator|.
name|cache
argument_list|()
argument_list|,
name|indexService
operator|.
name|mapperService
argument_list|()
argument_list|,
name|indexService
operator|.
name|similarityService
argument_list|()
argument_list|,
name|indexService
operator|.
name|fieldData
argument_list|()
argument_list|,
name|shard
operator|.
name|getEngineFactory
argument_list|()
argument_list|,
name|indexService
operator|.
name|getIndexEventListener
argument_list|()
argument_list|,
name|wrapper
argument_list|,
name|indexServices
argument_list|,
name|indexService
operator|.
name|getSearchSlowLog
argument_list|()
argument_list|,
literal|null
argument_list|,
name|listeners
argument_list|)
decl_stmt|;
name|ShardRoutingHelper
operator|.
name|reinit
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"foo"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|newShard
operator|.
name|markAsRecovering
argument_list|(
literal|"store"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|newShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|RecoveryState
operator|.
name|Type
operator|.
name|STORE
argument_list|,
name|localNode
argument_list|,
name|localNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newShard
operator|.
name|recoverFromStore
argument_list|(
name|localNode
argument_list|)
argument_list|)
expr_stmt|;
name|routing
operator|=
operator|new
name|ShardRouting
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|ShardRoutingHelper
operator|.
name|moveToStarted
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|newShard
return|;
block|}
DECL|method|testTranslogRecoverySyncsTranslog
specifier|public
name|void
name|testTranslogRecoverySyncsTranslog
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
literal|"testindexfortranslogsync"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"testindexfortranslogsync"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"testtype"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"testtype"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"testindexfortranslogsync"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ShardRouting
name|routing
init|=
operator|new
name|ShardRouting
argument_list|(
name|shard
operator|.
name|routingEntry
argument_list|()
argument_list|)
decl_stmt|;
name|test
operator|.
name|removeShard
argument_list|(
literal|0
argument_list|,
literal|"b/c britta says so"
argument_list|)
expr_stmt|;
name|IndexShard
name|newShard
init|=
name|test
operator|.
name|createShard
argument_list|(
name|routing
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"foo"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|newShard
operator|.
name|markAsRecovering
argument_list|(
literal|"for testing"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|newShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|RecoveryState
operator|.
name|Type
operator|.
name|REPLICA
argument_list|,
name|localNode
argument_list|,
name|localNode
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|operations
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"testtype"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
operator|.
name|toBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|prepareForIndexRecovery
argument_list|()
expr_stmt|;
name|newShard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|(
name|operations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|skipTranslogRecovery
argument_list|()
expr_stmt|;
name|newShard
operator|.
name|performBatchRecovery
argument_list|(
name|operations
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|newShard
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexingBufferDuringInternalRecovery
specifier|public
name|void
name|testIndexingBufferDuringInternalRecovery
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"testtype"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"testtype"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"index"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ShardRouting
name|routing
init|=
operator|new
name|ShardRouting
argument_list|(
name|shard
operator|.
name|routingEntry
argument_list|()
argument_list|)
decl_stmt|;
name|test
operator|.
name|removeShard
argument_list|(
literal|0
argument_list|,
literal|"b/c britta says so"
argument_list|)
expr_stmt|;
name|IndexShard
name|newShard
init|=
name|test
operator|.
name|createShard
argument_list|(
name|routing
argument_list|)
decl_stmt|;
name|newShard
operator|.
name|shardRouting
operator|=
name|routing
expr_stmt|;
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"foo"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|newShard
operator|.
name|markAsRecovering
argument_list|(
literal|"for testing"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|newShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|RecoveryState
operator|.
name|Type
operator|.
name|REPLICA
argument_list|,
name|localNode
argument_list|,
name|localNode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shard is still inactive since we haven't started recovering yet
name|assertFalse
argument_list|(
name|newShard
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|prepareForIndexRecovery
argument_list|()
expr_stmt|;
comment|// Shard is still inactive since we haven't started recovering yet
name|assertFalse
argument_list|(
name|newShard
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|performTranslogRecovery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Shard should now be active since we did recover:
name|assertTrue
argument_list|(
name|newShard
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexingBufferDuringPeerRecovery
specifier|public
name|void
name|testIndexingBufferDuringPeerRecovery
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"testtype"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"testtype"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
literal|"index"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|test
operator|.
name|getShardOrNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ShardRouting
name|routing
init|=
operator|new
name|ShardRouting
argument_list|(
name|shard
operator|.
name|routingEntry
argument_list|()
argument_list|)
decl_stmt|;
name|test
operator|.
name|removeShard
argument_list|(
literal|0
argument_list|,
literal|"b/c britta says so"
argument_list|)
expr_stmt|;
name|IndexShard
name|newShard
init|=
name|test
operator|.
name|createShard
argument_list|(
name|routing
argument_list|)
decl_stmt|;
name|newShard
operator|.
name|shardRouting
operator|=
name|routing
expr_stmt|;
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"foo"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|newShard
operator|.
name|markAsRecovering
argument_list|(
literal|"for testing"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|newShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|RecoveryState
operator|.
name|Type
operator|.
name|REPLICA
argument_list|,
name|localNode
argument_list|,
name|localNode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shard is still inactive since we haven't started recovering yet
name|assertFalse
argument_list|(
name|newShard
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|operations
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"testtype"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
operator|.
name|toBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|prepareForIndexRecovery
argument_list|()
expr_stmt|;
name|newShard
operator|.
name|skipTranslogRecovery
argument_list|()
expr_stmt|;
comment|// Shard is still inactive since we haven't started recovering yet
name|assertFalse
argument_list|(
name|newShard
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|newShard
operator|.
name|performBatchRecovery
argument_list|(
name|operations
argument_list|)
expr_stmt|;
comment|// Shard should now be active since we did recover:
name|assertTrue
argument_list|(
name|newShard
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

