begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|IndexStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|MutableShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|ShardLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|DummyShardLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchSingleNodeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  * Simple unit-test IndexShard related operations.  */
end_comment

begin_class
DECL|class|IndexShardTests
specifier|public
class|class
name|IndexShardTests
extends|extends
name|ElasticsearchSingleNodeTest
block|{
DECL|method|testFlushOnDeleteSetting
specifier|public
name|void
name|testFlushOnDeleteSetting
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|initValue
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexShard
operator|.
name|INDEX_FLUSH_ON_CLOSE
argument_list|,
name|initValue
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|test
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|initValue
argument_list|,
name|shard
operator|.
name|isFlushOnClose
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|newValue
init|=
operator|!
name|initValue
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexShard
operator|.
name|INDEX_FLUSH_ON_CLOSE
argument_list|,
name|newValue
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newValue
argument_list|,
name|shard
operator|.
name|isFlushOnClose
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexShard
operator|.
name|INDEX_FLUSH_ON_CLOSE
argument_list|,
literal|"FOOBAR"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{          }
name|assertEquals
argument_list|(
name|newValue
argument_list|,
name|shard
operator|.
name|isFlushOnClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteShardState
specifier|public
name|void
name|testWriteShardState
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|NodeEnvironment
name|env
init|=
name|newNodeEnvironment
argument_list|()
init|)
block|{
name|ShardId
name|id
init|=
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|long
name|version
init|=
name|between
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|/
literal|2
argument_list|)
decl_stmt|;
name|boolean
name|primary
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|ShardStateMetaData
name|state1
init|=
operator|new
name|ShardStateMetaData
argument_list|(
name|version
argument_list|,
name|primary
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|state1
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|ShardStateMetaData
name|shardStateMetaData
init|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|state1
argument_list|)
expr_stmt|;
name|ShardStateMetaData
name|state2
init|=
operator|new
name|ShardStateMetaData
argument_list|(
name|version
argument_list|,
name|primary
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|state2
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|shardStateMetaData
operator|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|state1
argument_list|)
expr_stmt|;
name|ShardStateMetaData
name|state3
init|=
operator|new
name|ShardStateMetaData
argument_list|(
name|version
operator|+
literal|1
argument_list|,
name|primary
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|state3
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|shardStateMetaData
operator|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|state3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|state3
operator|.
name|indexUUID
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLockTryingToDelete
specifier|public
name|void
name|testLockTryingToDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
comment|//IndicesService indicesService = getInstanceFromNode(IndicesService.class);
name|NodeEnvironment
name|env
init|=
name|getInstanceFromNode
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
index|[]
name|shardPaths
init|=
name|env
operator|.
name|availableShardPaths
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> paths: [{}]"
argument_list|,
name|shardPaths
argument_list|)
expr_stmt|;
comment|// Should not be able to acquire the lock because it's already open
try|try
block|{
name|NodeEnvironment
operator|.
name|acquireFSLockForPaths
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|shardPaths
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not have been able to acquire the lock"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"msg: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"unable to acquire write.lock"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test without the regular shard lock to assume we can acquire it
comment|// (worst case, meaning that the shard lock could be acquired and
comment|// we're green to delete the shard's directory)
name|ShardLock
name|sLock
init|=
operator|new
name|DummyShardLock
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|env
operator|.
name|deleteShardDirectoryUnderLock
argument_list|(
name|sLock
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not have been able to delete the directory"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"msg: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"unable to acquire write.lock"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPersistenceStateMetadataPersistence
specifier|public
name|void
name|testPersistenceStateMetadataPersistence
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeEnvironment
name|env
init|=
name|getInstanceFromNode
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|test
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ShardStateMetaData
name|shardStateMetaData
init|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|shard
operator|.
name|shardId
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getShardStateMetadata
argument_list|(
name|shard
argument_list|)
argument_list|,
name|shardStateMetaData
argument_list|)
expr_stmt|;
name|ShardRouting
name|routing
init|=
operator|new
name|MutableShardRouting
argument_list|(
name|shard
operator|.
name|shardRouting
argument_list|,
name|shard
operator|.
name|shardRouting
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|shardStateMetaData
operator|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|shard
operator|.
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|getShardStateMetadata
argument_list|(
name|shard
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
operator|new
name|ShardStateMetaData
argument_list|(
name|routing
operator|.
name|version
argument_list|()
argument_list|,
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|shard
operator|.
name|indexSettings
operator|.
name|get
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_UUID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|routing
operator|=
operator|new
name|MutableShardRouting
argument_list|(
name|shard
operator|.
name|shardRouting
argument_list|,
name|shard
operator|.
name|shardRouting
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|shardStateMetaData
operator|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|shard
operator|.
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|getShardStateMetadata
argument_list|(
name|shard
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
operator|new
name|ShardStateMetaData
argument_list|(
name|routing
operator|.
name|version
argument_list|()
argument_list|,
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|shard
operator|.
name|indexSettings
operator|.
name|get
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_UUID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|routing
operator|=
operator|new
name|MutableShardRouting
argument_list|(
name|shard
operator|.
name|shardRouting
argument_list|,
name|shard
operator|.
name|shardRouting
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|shardStateMetaData
operator|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|shard
operator|.
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|getShardStateMetadata
argument_list|(
name|shard
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
operator|new
name|ShardStateMetaData
argument_list|(
name|routing
operator|.
name|version
argument_list|()
argument_list|,
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|shard
operator|.
name|indexSettings
operator|.
name|get
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_UUID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test if we still write it even if the shard is not active
name|MutableShardRouting
name|inactiveRouting
init|=
operator|new
name|MutableShardRouting
argument_list|(
name|shard
operator|.
name|shardRouting
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|shardRouting
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|shard
operator|.
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|shard
operator|.
name|shardRouting
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|shard
operator|.
name|persistMetadata
argument_list|(
name|inactiveRouting
argument_list|,
name|shard
operator|.
name|shardRouting
argument_list|)
expr_stmt|;
name|shardStateMetaData
operator|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|shard
operator|.
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"inactive shard state shouldn't be persisted"
argument_list|,
name|shardStateMetaData
argument_list|,
name|getShardStateMetadata
argument_list|(
name|shard
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"inactive shard state shouldn't be persisted"
argument_list|,
name|shardStateMetaData
argument_list|,
operator|new
name|ShardStateMetaData
argument_list|(
name|routing
operator|.
name|version
argument_list|()
argument_list|,
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|shard
operator|.
name|indexSettings
operator|.
name|get
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_UUID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
operator|new
name|MutableShardRouting
argument_list|(
name|shard
operator|.
name|shardRouting
argument_list|,
name|shard
operator|.
name|shardRouting
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|shardStateMetaData
operator|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|shard
operator|.
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"shard state persisted despite of persist=false"
argument_list|,
name|shardStateMetaData
operator|.
name|equals
argument_list|(
name|getShardStateMetadata
argument_list|(
name|shard
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"shard state persisted despite of persist=false"
argument_list|,
name|shardStateMetaData
argument_list|,
operator|new
name|ShardStateMetaData
argument_list|(
name|routing
operator|.
name|version
argument_list|()
argument_list|,
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|shard
operator|.
name|indexSettings
operator|.
name|get
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_UUID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|routing
operator|=
operator|new
name|MutableShardRouting
argument_list|(
name|shard
operator|.
name|shardRouting
argument_list|,
name|shard
operator|.
name|shardRouting
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|shardStateMetaData
operator|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|shard
operator|.
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|getShardStateMetadata
argument_list|(
name|shard
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
operator|new
name|ShardStateMetaData
argument_list|(
name|routing
operator|.
name|version
argument_list|()
argument_list|,
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|shard
operator|.
name|indexSettings
operator|.
name|get
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_UUID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteShardState
specifier|public
name|void
name|testDeleteShardState
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeEnvironment
name|env
init|=
name|getInstanceFromNode
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|test
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|shard
operator|.
name|deleteShardState
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"shard is active metadata delete must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// fine - only delete if non-active
block|}
name|ShardRouting
name|routing
init|=
name|shard
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
name|ShardStateMetaData
name|shardStateMetaData
init|=
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|shard
operator|.
name|shardId
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|shardStateMetaData
argument_list|,
name|getShardStateMetadata
argument_list|(
name|shard
argument_list|)
argument_list|)
expr_stmt|;
name|routing
operator|=
operator|new
name|MutableShardRouting
argument_list|(
name|shard
operator|.
name|shardId
operator|.
name|index
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|shard
operator|.
name|shardId
operator|.
name|id
argument_list|()
argument_list|,
name|routing
operator|.
name|currentNodeId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|shard
operator|.
name|shardRouting
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|shard
operator|.
name|updateRoutingEntry
argument_list|(
name|routing
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|shard
operator|.
name|deleteShardState
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"no shard state expected after delete on initializing"
argument_list|,
name|load
argument_list|(
name|logger
argument_list|,
name|env
operator|.
name|availableShardPaths
argument_list|(
name|shard
operator|.
name|shardId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getShardStateMetadata
name|ShardStateMetaData
name|getShardStateMetadata
parameter_list|(
name|IndexShard
name|shard
parameter_list|)
block|{
name|ShardRouting
name|shardRouting
init|=
name|shard
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|shardRouting
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|ShardStateMetaData
argument_list|(
name|shardRouting
operator|.
name|version
argument_list|()
argument_list|,
name|shardRouting
operator|.
name|primary
argument_list|()
argument_list|,
name|shard
operator|.
name|indexSettings
operator|.
name|get
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_UUID
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|testShardStateMetaHashCodeEquals
specifier|public
name|void
name|testShardStateMetaHashCodeEquals
parameter_list|()
block|{
name|ShardStateMetaData
name|meta
init|=
operator|new
name|ShardStateMetaData
argument_list|(
name|randomLong
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|meta
argument_list|,
operator|new
name|ShardStateMetaData
argument_list|(
name|meta
operator|.
name|version
argument_list|,
name|meta
operator|.
name|primary
argument_list|,
name|meta
operator|.
name|indexUUID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|hashCode
argument_list|()
argument_list|,
operator|new
name|ShardStateMetaData
argument_list|(
name|meta
operator|.
name|version
argument_list|,
name|meta
operator|.
name|primary
argument_list|,
name|meta
operator|.
name|indexUUID
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|equals
argument_list|(
operator|new
name|ShardStateMetaData
argument_list|(
name|meta
operator|.
name|version
argument_list|,
operator|!
name|meta
operator|.
name|primary
argument_list|,
name|meta
operator|.
name|indexUUID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|equals
argument_list|(
operator|new
name|ShardStateMetaData
argument_list|(
name|meta
operator|.
name|version
operator|+
literal|1
argument_list|,
name|meta
operator|.
name|primary
argument_list|,
name|meta
operator|.
name|indexUUID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|equals
argument_list|(
operator|new
name|ShardStateMetaData
argument_list|(
name|meta
operator|.
name|version
argument_list|,
operator|!
name|meta
operator|.
name|primary
argument_list|,
name|meta
operator|.
name|indexUUID
operator|+
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|hashCodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
block|{
comment|// just a sanity check that we impl hashcode
name|meta
operator|=
operator|new
name|ShardStateMetaData
argument_list|(
name|randomLong
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|hashCodes
operator|.
name|add
argument_list|(
name|meta
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"more than one unique hashcode expected but got: "
operator|+
name|hashCodes
operator|.
name|size
argument_list|()
argument_list|,
name|hashCodes
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteIndexDecreasesCounter
specifier|public
name|void
name|testDeleteIndexDecreasesCounter
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|indexShard
operator|.
name|getOperationsCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|indexShard
operator|.
name|incrementOperationCounter
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"we should not be able to increment anymore"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexShardClosedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testIndexShardCounter
specifier|public
name|void
name|testIndexShardCounter
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexShard
operator|.
name|getOperationsCount
argument_list|()
argument_list|)
expr_stmt|;
name|indexShard
operator|.
name|incrementOperationCounter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|indexShard
operator|.
name|getOperationsCount
argument_list|()
argument_list|)
expr_stmt|;
name|indexShard
operator|.
name|incrementOperationCounter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|indexShard
operator|.
name|getOperationsCount
argument_list|()
argument_list|)
expr_stmt|;
name|indexShard
operator|.
name|decrementOperationCounter
argument_list|()
expr_stmt|;
name|indexShard
operator|.
name|decrementOperationCounter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexShard
operator|.
name|getOperationsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarkAsInactiveTriggersSyncedFlush
specifier|public
name|void
name|testMarkAsInactiveTriggersSyncedFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|indicesService
operator|.
name|indexService
argument_list|(
literal|"test"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|markAsInactive
argument_list|()
expr_stmt|;
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
comment|// should be very very quick
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|IndexStats
name|indexStats
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|indexStats
operator|.
name|getShards
argument_list|()
index|[
literal|0
index|]
operator|.
name|getCommitStats
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|IndexStats
name|indexStats
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|indexStats
operator|.
name|getShards
argument_list|()
index|[
literal|0
index|]
operator|.
name|getCommitStats
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|load
specifier|public
specifier|static
name|ShardStateMetaData
name|load
parameter_list|(
name|ESLogger
name|logger
parameter_list|,
name|Path
modifier|...
name|shardPaths
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ShardStateMetaData
operator|.
name|FORMAT
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|shardPaths
argument_list|)
return|;
block|}
DECL|method|write
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|ShardStateMetaData
name|shardStateMetaData
parameter_list|,
name|Path
modifier|...
name|shardPaths
parameter_list|)
throws|throws
name|IOException
block|{
name|ShardStateMetaData
operator|.
name|FORMAT
operator|.
name|write
argument_list|(
name|shardStateMetaData
argument_list|,
name|shardStateMetaData
operator|.
name|version
argument_list|,
name|shardPaths
argument_list|)
expr_stmt|;
block|}
DECL|method|testDurableFlagHasEffect
specifier|public
name|void
name|testDurableFlagHasEffect
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|test
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durabilty
operator|.
name|REQUEST
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|shard
operator|.
name|engine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durabilty
operator|.
name|ASYNC
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|shard
operator|.
name|engine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durabilty
operator|.
name|REQUEST
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|shard
operator|.
name|engine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durabilty
operator|.
name|ASYNC
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|shard
operator|.
name|engine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durabilty
operator|.
name|REQUEST
argument_list|)
expr_stmt|;
name|assertNoFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|shard
operator|.
name|engine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durabilty
operator|.
name|ASYNC
argument_list|)
expr_stmt|;
name|assertNoFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"bar"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|setDurability
argument_list|(
name|shard
argument_list|,
name|Translog
operator|.
name|Durabilty
operator|.
name|REQUEST
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|shard
operator|.
name|engine
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setDurability
specifier|private
name|void
name|setDurability
parameter_list|(
name|IndexShard
name|shard
parameter_list|,
name|Translog
operator|.
name|Durabilty
name|durabilty
parameter_list|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|shard
operator|.
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|TranslogConfig
operator|.
name|INDEX_TRANSLOG_DURABILITY
argument_list|,
name|durabilty
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|durabilty
argument_list|,
name|shard
operator|.
name|getTranslogDurability
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteByQueryBWC
specifier|public
name|void
name|testDeleteByQueryBWC
parameter_list|()
block|{
name|Version
name|version
init|=
name|VersionUtils
operator|.
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|,
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|version
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"person"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{ \"user\" : \"kimchy\" }"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|IndexShard
name|shard
init|=
name|test
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
literal|1
decl_stmt|;
name|shard
operator|.
name|state
operator|=
name|IndexShardState
operator|.
name|RECOVERING
expr_stmt|;
try|try
block|{
name|shard
operator|.
name|recoveryState
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|totalOperations
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|shard
operator|.
name|engine
argument_list|()
operator|.
name|config
argument_list|()
operator|.
name|getTranslogRecoveryPerformer
argument_list|()
operator|.
name|performRecoveryOperation
argument_list|(
name|shard
operator|.
name|engine
argument_list|()
argument_list|,
operator|new
name|Translog
operator|.
name|DeleteByQuery
argument_list|(
operator|new
name|Engine
operator|.
name|DeleteByQuery
argument_list|(
literal|null
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{\"term\" : { \"user\" : \"kimchy\" }}"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|RECOVERY
argument_list|,
literal|0
argument_list|,
literal|"person"
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|version
operator|.
name|onOrBefore
argument_list|(
name|Version
operator|.
name|V_1_0_0_Beta2
argument_list|)
argument_list|)
expr_stmt|;
name|numDocs
operator|=
literal|0
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|version
operator|.
name|after
argument_list|(
name|Version
operator|.
name|V_1_0_0_Beta2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shard
operator|.
name|state
operator|=
name|IndexShardState
operator|.
name|STARTED
expr_stmt|;
block|}
name|shard
operator|.
name|engine
argument_list|()
operator|.
name|refresh
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|shard
operator|.
name|engine
argument_list|()
operator|.
name|acquireSearcher
argument_list|(
literal|"foo"
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMinimumCompatVersion
specifier|public
name|void
name|testMinimumCompatVersion
parameter_list|()
block|{
name|Version
name|versionCreated
init|=
name|VersionUtils
operator|.
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|,
name|SETTING_VERSION_CREATED
argument_list|,
name|versionCreated
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexShard
name|test
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
literal|"test"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|versionCreated
operator|.
name|luceneVersion
argument_list|,
name|test
operator|.
name|minimumCompatibleVersion
argument_list|()
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|versionCreated
operator|.
name|luceneVersion
argument_list|,
name|test
operator|.
name|minimumCompatibleVersion
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|.
name|engine
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Version
operator|.
name|CURRENT
operator|.
name|luceneVersion
argument_list|,
name|test
operator|.
name|minimumCompatibleVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

