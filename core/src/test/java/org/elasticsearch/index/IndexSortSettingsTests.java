begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MultiValueMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettingsTests
operator|.
name|newIndexMeta
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|IndexSortSettingsTests
specifier|public
class|class
name|IndexSortSettingsTests
extends|extends
name|ESTestCase
block|{
DECL|method|indexSettings
specifier|private
specifier|static
name|IndexSettings
name|indexSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
return|return
name|indexSettings
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|indexSettings
specifier|private
specifier|static
name|IndexSettings
name|indexSettings
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
specifier|final
name|Settings
name|newSettings
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|newSettings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|version
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|newSettings
operator|=
name|settings
expr_stmt|;
block|}
return|return
operator|new
name|IndexSettings
argument_list|(
name|newIndexMeta
argument_list|(
literal|"test"
argument_list|,
name|newSettings
argument_list|)
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
return|;
block|}
DECL|method|testNoIndexSort
specifier|public
name|void
name|testNoIndexSort
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexSettings
name|indexSettings
init|=
name|indexSettings
argument_list|(
name|EMPTY_SETTINGS
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|indexSettings
operator|.
name|getIndexSortConfig
argument_list|()
operator|.
name|hasIndexSort
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleIndexSort
specifier|public
name|void
name|testSimpleIndexSort
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.sort.field"
argument_list|,
literal|"field1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.sort.order"
argument_list|,
literal|"asc"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.sort.mode"
argument_list|,
literal|"max"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.sort.missing"
argument_list|,
literal|"_last"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexSettings
name|indexSettings
init|=
name|indexSettings
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|IndexSortConfig
name|config
init|=
name|indexSettings
operator|.
name|getIndexSortConfig
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|config
operator|.
name|hasIndexSort
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|sortSpecs
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|sortSpecs
index|[
literal|0
index|]
operator|.
name|field
argument_list|,
name|equalTo
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|sortSpecs
index|[
literal|0
index|]
operator|.
name|order
argument_list|,
name|equalTo
argument_list|(
name|SortOrder
operator|.
name|ASC
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|sortSpecs
index|[
literal|0
index|]
operator|.
name|missingValue
argument_list|,
name|equalTo
argument_list|(
literal|"_last"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|sortSpecs
index|[
literal|0
index|]
operator|.
name|mode
argument_list|,
name|equalTo
argument_list|(
name|MultiValueMode
operator|.
name|MAX
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexSortWithArrays
specifier|public
name|void
name|testIndexSortWithArrays
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"index.sort.field"
argument_list|,
literal|"field1"
argument_list|,
literal|"field2"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.sort.order"
argument_list|,
literal|"asc"
argument_list|,
literal|"desc"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.sort.missing"
argument_list|,
literal|"_last"
argument_list|,
literal|"_first"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexSettings
name|indexSettings
init|=
name|indexSettings
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|IndexSortConfig
name|config
init|=
name|indexSettings
operator|.
name|getIndexSortConfig
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|config
operator|.
name|hasIndexSort
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|sortSpecs
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|sortSpecs
index|[
literal|0
index|]
operator|.
name|field
argument_list|,
name|equalTo
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|sortSpecs
index|[
literal|1
index|]
operator|.
name|field
argument_list|,
name|equalTo
argument_list|(
literal|"field2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|sortSpecs
index|[
literal|0
index|]
operator|.
name|order
argument_list|,
name|equalTo
argument_list|(
name|SortOrder
operator|.
name|ASC
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|sortSpecs
index|[
literal|1
index|]
operator|.
name|order
argument_list|,
name|equalTo
argument_list|(
name|SortOrder
operator|.
name|DESC
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|sortSpecs
index|[
literal|0
index|]
operator|.
name|missingValue
argument_list|,
name|equalTo
argument_list|(
literal|"_last"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|sortSpecs
index|[
literal|1
index|]
operator|.
name|missingValue
argument_list|,
name|equalTo
argument_list|(
literal|"_first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|config
operator|.
name|sortSpecs
index|[
literal|0
index|]
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|config
operator|.
name|sortSpecs
index|[
literal|1
index|]
operator|.
name|mode
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidIndexSort
specifier|public
name|void
name|testInvalidIndexSort
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.sort.field"
argument_list|,
literal|"field1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.sort.order"
argument_list|,
literal|"asc, desc"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|exc
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|indexSettings
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exc
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"index.sort.field:[field1] index.sort.order:[asc, desc], size mismatch"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidIndexSortWithArray
specifier|public
name|void
name|testInvalidIndexSortWithArray
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.sort.field"
argument_list|,
literal|"field1"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.sort.order"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"asc"
block|,
literal|"desc"
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|exc
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|indexSettings
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exc
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"index.sort.field:[field1] index.sort.order:[asc, desc], size mismatch"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidOrder
specifier|public
name|void
name|testInvalidOrder
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.sort.field"
argument_list|,
literal|"field1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.sort.order"
argument_list|,
literal|"invalid"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|exc
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|indexSettings
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exc
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Illegal sort order:invalid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidMode
specifier|public
name|void
name|testInvalidMode
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.sort.field"
argument_list|,
literal|"field1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.sort.mode"
argument_list|,
literal|"invalid"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|exc
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|indexSettings
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exc
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Illegal sort mode: invalid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidMissing
specifier|public
name|void
name|testInvalidMissing
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.sort.field"
argument_list|,
literal|"field1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.sort.missing"
argument_list|,
literal|"default"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|exc
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|indexSettings
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exc
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Illegal missing value:[default],"
operator|+
literal|" must be one of [_last, _first]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidVersion
specifier|public
name|void
name|testInvalidVersion
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.sort.field"
argument_list|,
literal|"field1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|exc
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|indexSettings
argument_list|(
name|settings
argument_list|,
name|Version
operator|.
name|V_5_4_0
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exc
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"unsupported index.version.created:5.4.0, "
operator|+
literal|"can't set index.sort on versions prior to 6.0.0-alpha1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

