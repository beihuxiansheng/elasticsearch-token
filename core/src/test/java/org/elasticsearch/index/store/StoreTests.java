begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFormatTooNewException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFormatTooOldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|KeepOnlyLastCommitDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NoDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NoMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SnapshotDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|BaseDirectoryWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ChecksumIndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockDirectoryWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|InputStreamStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|OutputStreamStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|ShardLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|store
operator|.
name|TransportNodesListShardStoreMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|DummyShardLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|IndexSettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
operator|.
name|randomVersion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|empty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|endsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|StoreTests
specifier|public
class|class
name|StoreTests
extends|extends
name|ESTestCase
block|{
DECL|field|INDEX_SETTINGS
specifier|private
specifier|static
specifier|final
name|IndexSettings
name|INDEX_SETTINGS
init|=
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
literal|"index"
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|testRefCount
specifier|public
name|void
name|testRefCount
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|IndexSettings
name|indexSettings
init|=
name|INDEX_SETTINGS
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|,
name|directoryService
argument_list|,
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|incs
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|incs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|store
operator|.
name|tryIncRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|ensureOpen
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|incs
condition|;
name|i
operator|++
control|)
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|store
operator|.
name|ensureOpen
argument_list|()
expr_stmt|;
block|}
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|incs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|store
operator|.
name|tryIncRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|ensureOpen
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|incs
condition|;
name|i
operator|++
control|)
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|store
operator|.
name|ensureOpen
argument_list|()
expr_stmt|;
block|}
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|refCount
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|store
operator|.
name|tryIncRef
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|" expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|ex
parameter_list|)
block|{          }
try|try
block|{
name|store
operator|.
name|ensureOpen
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|" expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|ex
parameter_list|)
block|{          }
block|}
DECL|method|testVerifyingIndexOutput
specifier|public
name|void
name|testVerifyingIndexOutput
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|output
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|,
name|bytesRef
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexInput
name|indexInput
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|String
name|checksum
init|=
name|Store
operator|.
name|digestToString
argument_list|(
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|indexInput
argument_list|)
argument_list|)
decl_stmt|;
name|indexInput
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|BytesRef
name|ref
init|=
operator|new
name|BytesRef
argument_list|(
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|length
init|=
name|indexInput
operator|.
name|length
argument_list|()
decl_stmt|;
name|IndexOutput
name|verifyingOutput
init|=
operator|new
name|Store
operator|.
name|LuceneVerifyingIndexOutput
argument_list|(
operator|new
name|StoreFileMetaData
argument_list|(
literal|"foo1.bar"
argument_list|,
name|length
argument_list|,
name|checksum
argument_list|)
argument_list|,
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo1.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|verifyingOutput
operator|.
name|writeByte
argument_list|(
name|indexInput
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|length
operator|--
expr_stmt|;
block|}
else|else
block|{
name|int
name|min
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|ref
operator|.
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|indexInput
operator|.
name|readBytes
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|verifyingOutput
operator|.
name|writeBytes
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|length
operator|-=
name|min
expr_stmt|;
block|}
block|}
name|Store
operator|.
name|verify
argument_list|(
name|verifyingOutput
argument_list|)
expr_stmt|;
try|try
block|{
name|appendRandomData
argument_list|(
name|verifyingOutput
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should be a corrupted index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
decl||
name|IndexFormatTooOldException
decl||
name|IndexFormatTooNewException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
try|try
block|{
name|Store
operator|.
name|verify
argument_list|(
name|verifyingOutput
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should be a corrupted index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
decl||
name|IndexFormatTooOldException
decl||
name|IndexFormatTooNewException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|indexInput
argument_list|,
name|verifyingOutput
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testVerifyingIndexOutputOnEmptyFile
specifier|public
name|void
name|testVerifyingIndexOutputOnEmptyFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|verifyingOutput
init|=
operator|new
name|Store
operator|.
name|LuceneVerifyingIndexOutput
argument_list|(
operator|new
name|StoreFileMetaData
argument_list|(
literal|"foo.bar"
argument_list|,
literal|0
argument_list|,
name|Store
operator|.
name|digestToString
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo1.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Store
operator|.
name|verify
argument_list|(
name|verifyingOutput
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should be a corrupted index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
decl||
name|IndexFormatTooOldException
decl||
name|IndexFormatTooNewException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|verifyingOutput
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testChecksumCorrupted
specifier|public
name|void
name|testChecksumCorrupted
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|output
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|,
name|bytesRef
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|writeInt
argument_list|(
name|CodecUtil
operator|.
name|FOOTER_MAGIC
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|String
name|checksum
init|=
name|Store
operator|.
name|digestToString
argument_list|(
name|output
operator|.
name|getChecksum
argument_list|()
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeLong
argument_list|(
name|output
operator|.
name|getChecksum
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// write a wrong checksum to the file
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexInput
name|indexInput
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|indexInput
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|BytesRef
name|ref
init|=
operator|new
name|BytesRef
argument_list|(
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|length
init|=
name|indexInput
operator|.
name|length
argument_list|()
decl_stmt|;
name|IndexOutput
name|verifyingOutput
init|=
operator|new
name|Store
operator|.
name|LuceneVerifyingIndexOutput
argument_list|(
operator|new
name|StoreFileMetaData
argument_list|(
literal|"foo1.bar"
argument_list|,
name|length
argument_list|,
name|checksum
argument_list|)
argument_list|,
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo1.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|length
operator|-=
literal|8
expr_stmt|;
comment|// we write the checksum in the try / catch block below
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|verifyingOutput
operator|.
name|writeByte
argument_list|(
name|indexInput
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|length
operator|--
expr_stmt|;
block|}
else|else
block|{
name|int
name|min
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|ref
operator|.
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|indexInput
operator|.
name|readBytes
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|verifyingOutput
operator|.
name|writeBytes
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|length
operator|-=
name|min
expr_stmt|;
block|}
block|}
try|try
block|{
name|BytesRef
name|checksumBytes
init|=
operator|new
name|BytesRef
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|checksumBytes
operator|.
name|length
operator|=
literal|8
expr_stmt|;
name|indexInput
operator|.
name|readBytes
argument_list|(
name|checksumBytes
operator|.
name|bytes
argument_list|,
name|checksumBytes
operator|.
name|offset
argument_list|,
name|checksumBytes
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|verifyingOutput
operator|.
name|writeBytes
argument_list|(
name|checksumBytes
operator|.
name|bytes
argument_list|,
name|checksumBytes
operator|.
name|offset
argument_list|,
name|checksumBytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|checksumBytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|verifyingOutput
operator|.
name|writeByte
argument_list|(
name|checksumBytes
operator|.
name|bytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|fail
argument_list|(
literal|"should be a corrupted index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
decl||
name|IndexFormatTooOldException
decl||
name|IndexFormatTooNewException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|indexInput
argument_list|,
name|verifyingOutput
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|appendRandomData
specifier|private
name|void
name|appendRandomData
parameter_list|(
name|IndexOutput
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numBytes
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
specifier|final
name|BytesRef
name|ref
init|=
operator|new
name|BytesRef
argument_list|(
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
name|numBytes
argument_list|)
argument_list|)
decl_stmt|;
name|ref
operator|.
name|length
operator|=
name|ref
operator|.
name|bytes
operator|.
name|length
expr_stmt|;
while|while
condition|(
name|numBytes
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|output
operator|.
name|writeByte
argument_list|(
name|randomByte
argument_list|()
argument_list|)
expr_stmt|;
name|numBytes
operator|--
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ref
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ref
operator|.
name|bytes
index|[
name|i
index|]
operator|=
name|randomByte
argument_list|()
expr_stmt|;
block|}
specifier|final
name|int
name|min
init|=
name|Math
operator|.
name|min
argument_list|(
name|numBytes
argument_list|,
name|ref
operator|.
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|numBytes
operator|-=
name|min
expr_stmt|;
block|}
block|}
block|}
DECL|method|testVerifyingIndexOutputWithBogusInput
specifier|public
name|void
name|testVerifyingIndexOutputWithBogusInput
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|IndexOutput
name|verifyingOutput
init|=
operator|new
name|Store
operator|.
name|LuceneVerifyingIndexOutput
argument_list|(
operator|new
name|StoreFileMetaData
argument_list|(
literal|"foo1.bar"
argument_list|,
name|length
argument_list|,
literal|""
argument_list|)
argument_list|,
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo1.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|verifyingOutput
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|length
operator|--
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"should be a corrupted index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
decl||
name|IndexFormatTooOldException
decl||
name|IndexFormatTooNewException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|verifyingOutput
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewChecksums
specifier|public
name|void
name|testNewChecksums
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|INDEX_SETTINGS
argument_list|,
name|directoryService
argument_list|,
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
argument_list|)
decl_stmt|;
comment|// set default codec - all segments need checksums
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|random
argument_list|()
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|getDefaultCodec
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|docs
init|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// flush
block|}
name|Store
operator|.
name|MetadataSnapshot
name|metadata
decl_stmt|;
comment|// check before we committed
try|try
block|{
name|store
operator|.
name|getMetadata
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no index present - expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|metadata
operator|=
name|store
operator|.
name|getMetadata
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StoreFileMetaData
name|meta
range|:
name|metadata
control|)
block|{
try|try
init|(
name|IndexInput
name|input
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|String
name|checksum
init|=
name|Store
operator|.
name|digestToString
argument_list|(
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"File: "
operator|+
name|meta
operator|.
name|name
argument_list|()
operator|+
literal|" has a different checksum"
argument_list|,
name|meta
operator|.
name|checksum
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|checksum
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|meta
operator|.
name|writtenBy
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Version
operator|.
name|LATEST
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|meta
operator|.
name|name
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".si"
argument_list|)
operator|||
name|meta
operator|.
name|name
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"segments_"
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|meta
operator|.
name|hash
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertConsistent
argument_list|(
name|store
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|checkIndex
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|assertDeleteContent
argument_list|(
name|store
argument_list|,
name|directoryService
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
DECL|method|testRenameFile
specifier|public
name|void
name|testRenameFile
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|(
name|random
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|INDEX_SETTINGS
argument_list|,
name|directoryService
argument_list|,
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|IndexOutput
name|output
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|createOutput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|,
name|bytesRef
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|store
operator|.
name|renameFile
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"bar.foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|numNonExtraFiles
argument_list|(
name|store
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|lastChecksum
decl_stmt|;
try|try
init|(
name|IndexInput
name|input
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
literal|"bar.foo"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|lastChecksum
operator|=
name|CodecUtil
operator|.
name|checksumEntireFile
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"file was renamed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
decl||
name|NoSuchFileException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|{
name|IndexOutput
name|output
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|createOutput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|,
name|bytesRef
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|store
operator|.
name|renameFile
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"bar.foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|numNonExtraFiles
argument_list|(
name|store
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertDeleteContent
argument_list|(
name|store
argument_list|,
name|directoryService
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckIntegrity
specifier|public
name|void
name|testCheckIntegrity
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|long
name|luceneFileLength
init|=
literal|0
decl_stmt|;
try|try
init|(
name|IndexOutput
name|output
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"lucene_checksum.bin"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|,
name|bytesRef
operator|.
name|length
argument_list|)
expr_stmt|;
name|luceneFileLength
operator|+=
name|bytesRef
operator|.
name|length
expr_stmt|;
block|}
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|luceneFileLength
operator|+=
name|CodecUtil
operator|.
name|footerLength
argument_list|()
expr_stmt|;
block|}
specifier|final
name|long
name|luceneChecksum
decl_stmt|;
try|try
init|(
name|IndexInput
name|indexInput
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"lucene_checksum.bin"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|luceneFileLength
argument_list|,
name|indexInput
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|luceneChecksum
operator|=
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|indexInput
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testVerifyingIndexInput
specifier|public
name|void
name|testVerifyingIndexInput
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|output
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|,
name|bytesRef
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Check file
name|IndexInput
name|indexInput
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|long
name|checksum
init|=
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|indexInput
argument_list|)
decl_stmt|;
name|indexInput
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|IndexInput
name|verifyingIndexInput
init|=
operator|new
name|Store
operator|.
name|VerifyingIndexInput
argument_list|(
name|dir
operator|.
name|openInput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|readIndexInputFullyWithRandomSeeks
argument_list|(
name|verifyingIndexInput
argument_list|)
expr_stmt|;
name|Store
operator|.
name|verify
argument_list|(
name|verifyingIndexInput
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checksum
argument_list|,
name|equalTo
argument_list|(
operator|(
operator|(
name|ChecksumIndexInput
operator|)
name|verifyingIndexInput
operator|)
operator|.
name|getChecksum
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|indexInput
argument_list|,
name|verifyingIndexInput
argument_list|)
expr_stmt|;
comment|// Corrupt file and check again
name|corruptFile
argument_list|(
name|dir
argument_list|,
literal|"foo.bar"
argument_list|,
literal|"foo1.bar"
argument_list|)
expr_stmt|;
name|verifyingIndexInput
operator|=
operator|new
name|Store
operator|.
name|VerifyingIndexInput
argument_list|(
name|dir
operator|.
name|openInput
argument_list|(
literal|"foo1.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|readIndexInputFullyWithRandomSeeks
argument_list|(
name|verifyingIndexInput
argument_list|)
expr_stmt|;
try|try
block|{
name|Store
operator|.
name|verify
argument_list|(
name|verifyingIndexInput
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should be a corrupted index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
decl||
name|IndexFormatTooOldException
decl||
name|IndexFormatTooNewException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|verifyingIndexInput
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|readIndexInputFullyWithRandomSeeks
specifier|private
name|void
name|readIndexInputFullyWithRandomSeeks
parameter_list|(
name|IndexInput
name|indexInput
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesRef
name|ref
init|=
operator|new
name|BytesRef
argument_list|(
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|indexInput
operator|.
name|length
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|pos
argument_list|,
name|indexInput
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|op
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|0
condition|)
block|{
name|int
name|shift
init|=
literal|100
operator|-
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|pos
operator|=
name|Math
operator|.
name|min
argument_list|(
name|indexInput
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|pos
operator|+
name|shift
argument_list|)
argument_list|)
expr_stmt|;
name|indexInput
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
literal|1
condition|)
block|{
name|indexInput
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
else|else
block|{
name|int
name|min
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|indexInput
operator|.
name|length
argument_list|()
operator|-
name|pos
argument_list|,
name|ref
operator|.
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|indexInput
operator|.
name|readBytes
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|min
expr_stmt|;
block|}
block|}
block|}
DECL|method|corruptFile
specifier|private
name|void
name|corruptFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|fileIn
parameter_list|,
name|String
name|fileOut
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexInput
name|input
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|fileIn
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
decl_stmt|;
name|IndexOutput
name|output
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|fileOut
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|long
name|len
init|=
name|input
operator|.
name|length
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|long
name|broken
init|=
name|randomInt
argument_list|(
operator|(
name|int
operator|)
name|len
operator|-
literal|1
argument_list|)
decl_stmt|;
name|long
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|len
condition|)
block|{
name|int
name|min
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|input
operator|.
name|length
argument_list|()
operator|-
name|pos
argument_list|,
name|b
operator|.
name|length
argument_list|)
decl_stmt|;
name|input
operator|.
name|readBytes
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|min
argument_list|)
expr_stmt|;
if|if
condition|(
name|broken
operator|>=
name|pos
operator|&&
name|broken
operator|<
name|pos
operator|+
name|min
condition|)
block|{
comment|// Flip one byte
name|int
name|flipPos
init|=
call|(
name|int
call|)
argument_list|(
name|broken
operator|-
name|pos
argument_list|)
decl_stmt|;
name|b
index|[
name|flipPos
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|b
index|[
name|flipPos
index|]
operator|^
literal|42
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|writeBytes
argument_list|(
name|b
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|min
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDeleteContent
specifier|public
name|void
name|assertDeleteContent
parameter_list|(
name|Store
name|store
parameter_list|,
name|DirectoryService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteContent
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|,
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|stats
argument_list|()
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|newDirectory
argument_list|()
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|LuceneManagedDirectoryService
specifier|private
specifier|static
specifier|final
class|class
name|LuceneManagedDirectoryService
extends|extends
name|DirectoryService
block|{
DECL|field|dir
specifier|private
specifier|final
name|Directory
name|dir
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
DECL|method|LuceneManagedDirectoryService
specifier|public
name|LuceneManagedDirectoryService
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
name|this
argument_list|(
name|random
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|LuceneManagedDirectoryService
specifier|public
name|LuceneManagedDirectoryService
parameter_list|(
name|Random
name|random
parameter_list|,
name|boolean
name|preventDoubleWrite
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|ShardId
argument_list|(
name|INDEX_SETTINGS
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
name|INDEX_SETTINGS
argument_list|)
expr_stmt|;
name|dir
operator|=
name|StoreTests
operator|.
name|newDirectory
argument_list|(
name|random
argument_list|)
expr_stmt|;
if|if
condition|(
name|dir
operator|instanceof
name|MockDirectoryWrapper
condition|)
block|{
operator|(
operator|(
name|MockDirectoryWrapper
operator|)
name|dir
operator|)
operator|.
name|setPreventDoubleWrite
argument_list|(
name|preventDoubleWrite
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newDirectory
specifier|public
name|Directory
name|newDirectory
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|dir
return|;
block|}
annotation|@
name|Override
DECL|method|throttleTimeInNanos
specifier|public
name|long
name|throttleTimeInNanos
parameter_list|()
block|{
return|return
name|random
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
return|;
block|}
block|}
DECL|method|assertConsistent
specifier|public
specifier|static
name|void
name|assertConsistent
parameter_list|(
name|Store
name|store
parameter_list|,
name|Store
operator|.
name|MetadataSnapshot
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|file
range|:
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|IndexWriter
operator|.
name|WRITE_LOCK_NAME
operator|.
name|equals
argument_list|(
name|file
argument_list|)
operator|&&
operator|!
name|IndexFileNames
operator|.
name|OLD_SEGMENTS_GEN
operator|.
name|equals
argument_list|(
name|file
argument_list|)
operator|&&
name|file
operator|.
name|startsWith
argument_list|(
literal|"extra"
argument_list|)
operator|==
literal|false
condition|)
block|{
name|assertTrue
argument_list|(
name|file
operator|+
literal|" is not in the map: "
operator|+
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" vs. "
operator|+
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|,
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|file
operator|+
literal|" is not in the map: "
operator|+
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" vs. "
operator|+
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|,
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRecoveryDiff
specifier|public
name|void
name|testRecoveryDiff
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|numDocs
init|=
literal|2
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Document
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|long
name|seed
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|Store
operator|.
name|MetadataSnapshot
name|first
decl_stmt|;
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|getDefaultCodec
argument_list|()
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setUseCompoundFile
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|INDEX_SETTINGS
argument_list|,
name|directoryService
argument_list|,
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|lotsOfSegments
init|=
name|rarely
argument_list|(
name|random
argument_list|)
decl_stmt|;
for|for
control|(
name|Document
name|d
range|:
name|docs
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|lotsOfSegments
operator|&&
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rarely
argument_list|(
name|random
argument_list|)
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|first
operator|=
name|store
operator|.
name|getMetadata
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertDeleteContent
argument_list|(
name|store
argument_list|,
name|directoryService
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|long
name|time
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
while|while
condition|(
name|time
operator|==
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// bump the time
block|}
name|Store
operator|.
name|MetadataSnapshot
name|second
decl_stmt|;
name|Store
name|store
decl_stmt|;
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|getDefaultCodec
argument_list|()
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setUseCompoundFile
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|store
operator|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|INDEX_SETTINGS
argument_list|,
name|directoryService
argument_list|,
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|lotsOfSegments
init|=
name|rarely
argument_list|(
name|random
argument_list|)
decl_stmt|;
for|for
control|(
name|Document
name|d
range|:
name|docs
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|lotsOfSegments
operator|&&
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rarely
argument_list|(
name|random
argument_list|)
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|second
operator|=
name|store
operator|.
name|getMetadata
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|Store
operator|.
name|RecoveryDiff
name|diff
init|=
name|first
operator|.
name|recoveryDiff
argument_list|(
name|second
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|first
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|second
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StoreFileMetaData
name|md
range|:
name|first
control|)
block|{
name|assertThat
argument_list|(
name|second
operator|.
name|get
argument_list|(
name|md
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// si files are different - containing timestamps etc
name|assertThat
argument_list|(
name|second
operator|.
name|get
argument_list|(
name|md
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isSame
argument_list|(
name|md
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|diff
operator|.
name|different
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|first
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|identical
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// in lucene 5 nothing is identical - we use random ids in file headers
name|assertThat
argument_list|(
name|diff
operator|.
name|missing
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the self diff
name|Store
operator|.
name|RecoveryDiff
name|selfDiff
init|=
name|first
operator|.
name|recoveryDiff
argument_list|(
name|first
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|selfDiff
operator|.
name|identical
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|first
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|selfDiff
operator|.
name|different
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|selfDiff
operator|.
name|missing
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
comment|// lets add some deletes
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|getDefaultCodec
argument_list|()
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setUseCompoundFile
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setOpenMode
argument_list|(
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|APPEND
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDocs
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Store
operator|.
name|MetadataSnapshot
name|metadata
init|=
name|store
operator|.
name|getMetadata
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|StoreFileMetaData
name|delFile
init|=
literal|null
decl_stmt|;
for|for
control|(
name|StoreFileMetaData
name|md
range|:
name|metadata
control|)
block|{
if|if
condition|(
name|md
operator|.
name|name
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".liv"
argument_list|)
condition|)
block|{
name|delFile
operator|=
name|md
expr_stmt|;
break|break;
block|}
block|}
name|Store
operator|.
name|RecoveryDiff
name|afterDeleteDiff
init|=
name|metadata
operator|.
name|recoveryDiff
argument_list|(
name|second
argument_list|)
decl_stmt|;
if|if
condition|(
name|delFile
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|afterDeleteDiff
operator|.
name|identical
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|metadata
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// segments_N + del file
name|assertThat
argument_list|(
name|afterDeleteDiff
operator|.
name|different
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|afterDeleteDiff
operator|.
name|missing
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// an entire segment must be missing (single doc segment got dropped)
name|assertThat
argument_list|(
name|afterDeleteDiff
operator|.
name|identical
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|afterDeleteDiff
operator|.
name|different
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|afterDeleteDiff
operator|.
name|missing
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// the commit file is different
block|}
comment|// check the self diff
name|selfDiff
operator|=
name|metadata
operator|.
name|recoveryDiff
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|selfDiff
operator|.
name|identical
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|metadata
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|selfDiff
operator|.
name|different
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|selfDiff
operator|.
name|missing
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
comment|// add a new commit
name|iwc
operator|=
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|getDefaultCodec
argument_list|()
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setUseCompoundFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// force CFS - easier to test here since we know it will add 3 files
name|iwc
operator|.
name|setOpenMode
argument_list|(
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|APPEND
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|iwc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|docs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Store
operator|.
name|MetadataSnapshot
name|newCommitMetaData
init|=
name|store
operator|.
name|getMetadata
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Store
operator|.
name|RecoveryDiff
name|newCommitDiff
init|=
name|newCommitMetaData
operator|.
name|recoveryDiff
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
if|if
condition|(
name|delFile
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|newCommitDiff
operator|.
name|identical
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|newCommitMetaData
operator|.
name|size
argument_list|()
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// segments_N, del file, cfs, cfe, si for the new segment
name|assertThat
argument_list|(
name|newCommitDiff
operator|.
name|different
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// the del file must be different
name|assertThat
argument_list|(
name|newCommitDiff
operator|.
name|different
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|endsWith
argument_list|(
literal|".liv"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newCommitDiff
operator|.
name|missing
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// segments_N,cfs, cfe, si for the new segment
block|}
else|else
block|{
name|assertThat
argument_list|(
name|newCommitDiff
operator|.
name|identical
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|newCommitMetaData
operator|.
name|size
argument_list|()
operator|-
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// segments_N, cfs, cfe, si for the new segment
name|assertThat
argument_list|(
name|newCommitDiff
operator|.
name|different
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newCommitDiff
operator|.
name|missing
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// an entire segment must be missing (single doc segment got dropped)  plus the commit is different
block|}
name|deleteContent
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
DECL|method|testCleanupFromSnapshot
specifier|public
name|void
name|testCleanupFromSnapshot
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|INDEX_SETTINGS
argument_list|,
name|directoryService
argument_list|,
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
argument_list|)
decl_stmt|;
comment|// this time random codec....
name|IndexWriterConfig
name|indexWriterConfig
init|=
name|newIndexWriterConfig
argument_list|(
name|random
argument_list|()
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|getDefaultCodec
argument_list|()
argument_list|)
decl_stmt|;
comment|// we keep all commits and that allows us clean based on multiple snapshots
name|indexWriterConfig
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|NoDeletionPolicy
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|indexWriterConfig
argument_list|)
decl_stmt|;
name|int
name|docs
init|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|int
name|numCommits
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|numCommits
operator|++
expr_stmt|;
block|}
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numCommits
operator|<
literal|1
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|docs
operator|++
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|Store
operator|.
name|MetadataSnapshot
name|firstMeta
init|=
name|store
operator|.
name|getMetadata
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Store
operator|.
name|MetadataSnapshot
name|secondMeta
init|=
name|store
operator|.
name|getMetadata
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|store
operator|.
name|cleanupAndVerify
argument_list|(
literal|"test"
argument_list|,
name|firstMeta
argument_list|)
expr_stmt|;
name|String
index|[]
name|strings
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
decl_stmt|;
name|int
name|numChecksums
init|=
literal|0
decl_stmt|;
name|int
name|numNotFound
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|strings
control|)
block|{
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
literal|"extra"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|assertTrue
argument_list|(
name|firstMeta
operator|.
name|contains
argument_list|(
name|file
argument_list|)
operator|||
name|file
operator|.
name|equals
argument_list|(
literal|"write.lock"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondMeta
operator|.
name|contains
argument_list|(
name|file
argument_list|)
operator|==
literal|false
condition|)
block|{
name|numNotFound
operator|++
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"at least one file must not be in here since we have two commits?"
argument_list|,
name|numNotFound
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|store
operator|.
name|cleanupAndVerify
argument_list|(
literal|"test"
argument_list|,
name|secondMeta
argument_list|)
expr_stmt|;
name|String
index|[]
name|strings
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
decl_stmt|;
name|int
name|numChecksums
init|=
literal|0
decl_stmt|;
name|int
name|numNotFound
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|strings
control|)
block|{
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
literal|"extra"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|assertTrue
argument_list|(
name|file
argument_list|,
name|secondMeta
operator|.
name|contains
argument_list|(
name|file
argument_list|)
operator|||
name|file
operator|.
name|equals
argument_list|(
literal|"write.lock"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstMeta
operator|.
name|contains
argument_list|(
name|file
argument_list|)
operator|==
literal|false
condition|)
block|{
name|numNotFound
operator|++
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"at least one file must not be in here since we have two commits?"
argument_list|,
name|numNotFound
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|deleteContent
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
DECL|method|testOnCloseCallback
specifier|public
name|void
name|testOnCloseCallback
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ShardLock
name|lock
init|=
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|INDEX_SETTINGS
argument_list|,
name|directoryService
argument_list|,
name|lock
argument_list|,
name|theLock
lambda|->
block|{
name|assertEquals
argument_list|(
name|shardId
argument_list|,
name|theLock
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lock
argument_list|,
name|theLock
argument_list|)
expr_stmt|;
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|count
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|int
name|iters
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testStoreStats
specifier|public
name|void
name|testStoreStats
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|Store
operator|.
name|INDEX_STORE_STATS_REFRESH_INTERVAL_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
literal|"index"
argument_list|,
name|settings
argument_list|)
argument_list|,
name|directoryService
argument_list|,
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|initialStoreSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|extraFiles
range|:
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"expected extraFS file but got: "
operator|+
name|extraFiles
argument_list|,
name|extraFiles
operator|.
name|startsWith
argument_list|(
literal|"extra"
argument_list|)
argument_list|)
expr_stmt|;
name|initialStoreSize
operator|+=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|fileLength
argument_list|(
name|extraFiles
argument_list|)
expr_stmt|;
block|}
name|StoreStats
name|stats
init|=
name|store
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|stats
operator|.
name|getSize
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|initialStoreSize
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|store
operator|.
name|directory
argument_list|()
decl_stmt|;
specifier|final
name|long
name|length
decl_stmt|;
try|try
init|(
name|IndexOutput
name|output
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|,
name|bytesRef
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|length
operator|=
name|output
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|numNonExtraFiles
argument_list|(
name|store
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|stats
operator|=
name|store
operator|.
name|stats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|stats
operator|.
name|getSizeInBytes
argument_list|()
argument_list|,
name|length
operator|+
name|initialStoreSize
argument_list|)
expr_stmt|;
name|deleteContent
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteContent
specifier|public
specifier|static
name|void
name|deleteContent
parameter_list|(
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
index|[]
name|files
init|=
name|directory
operator|.
name|listAll
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
try|try
block|{
name|directory
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFileException
decl||
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|ExceptionsHelper
operator|.
name|rethrowAndSuppress
argument_list|(
name|exceptions
argument_list|)
expr_stmt|;
block|}
DECL|method|numNonExtraFiles
specifier|public
name|int
name|numNonExtraFiles
parameter_list|(
name|Store
name|store
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numNonExtra
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
literal|"extra"
argument_list|)
operator|==
literal|false
condition|)
block|{
name|numNonExtra
operator|++
expr_stmt|;
block|}
block|}
return|return
name|numNonExtra
return|;
block|}
DECL|method|testMetadataSnapshotStreaming
specifier|public
name|void
name|testMetadataSnapshotStreaming
parameter_list|()
throws|throws
name|Exception
block|{
name|Store
operator|.
name|MetadataSnapshot
name|outMetadataSnapshot
init|=
name|createMetaDataSnapshot
argument_list|()
decl_stmt|;
name|org
operator|.
name|elasticsearch
operator|.
name|Version
name|targetNodeVersion
init|=
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|outBuffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStreamStreamOutput
name|out
init|=
operator|new
name|OutputStreamStreamOutput
argument_list|(
name|outBuffer
argument_list|)
decl_stmt|;
name|out
operator|.
name|setVersion
argument_list|(
name|targetNodeVersion
argument_list|)
expr_stmt|;
name|outMetadataSnapshot
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|inBuffer
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|outBuffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|InputStreamStreamInput
name|in
init|=
operator|new
name|InputStreamStreamInput
argument_list|(
name|inBuffer
argument_list|)
decl_stmt|;
name|in
operator|.
name|setVersion
argument_list|(
name|targetNodeVersion
argument_list|)
expr_stmt|;
name|Store
operator|.
name|MetadataSnapshot
name|inMetadataSnapshot
init|=
operator|new
name|Store
operator|.
name|MetadataSnapshot
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|origEntries
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|origEntries
operator|.
name|putAll
argument_list|(
name|outMetadataSnapshot
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|entry
range|:
name|inMetadataSnapshot
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|origEntries
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|origEntries
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|inMetadataSnapshot
operator|.
name|getCommitUserData
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|outMetadataSnapshot
operator|.
name|getCommitUserData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createMetaDataSnapshot
specifier|protected
name|Store
operator|.
name|MetadataSnapshot
name|createMetaDataSnapshot
parameter_list|()
block|{
name|StoreFileMetaData
name|storeFileMetaData1
init|=
operator|new
name|StoreFileMetaData
argument_list|(
literal|"segments"
argument_list|,
literal|1
argument_list|,
literal|"666"
argument_list|)
decl_stmt|;
name|StoreFileMetaData
name|storeFileMetaData2
init|=
operator|new
name|StoreFileMetaData
argument_list|(
literal|"no_segments"
argument_list|,
literal|1
argument_list|,
literal|"666"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|storeFileMetaDataMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|storeFileMetaDataMap
operator|.
name|put
argument_list|(
name|storeFileMetaData1
operator|.
name|name
argument_list|()
argument_list|,
name|storeFileMetaData1
argument_list|)
expr_stmt|;
name|storeFileMetaDataMap
operator|.
name|put
argument_list|(
name|storeFileMetaData2
operator|.
name|name
argument_list|()
argument_list|,
name|storeFileMetaData2
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commitUserData
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|commitUserData
operator|.
name|put
argument_list|(
literal|"userdata_1"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|commitUserData
operator|.
name|put
argument_list|(
literal|"userdata_2"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Store
operator|.
name|MetadataSnapshot
argument_list|(
name|unmodifiableMap
argument_list|(
name|storeFileMetaDataMap
argument_list|)
argument_list|,
name|unmodifiableMap
argument_list|(
name|commitUserData
argument_list|)
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|testUserDataRead
specifier|public
name|void
name|testUserDataRead
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|INDEX_SETTINGS
argument_list|,
name|directoryService
argument_list|,
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|config
init|=
name|newIndexWriterConfig
argument_list|(
name|random
argument_list|()
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|getDefaultCodec
argument_list|()
argument_list|)
decl_stmt|;
name|SnapshotDeletionPolicy
name|deletionPolicy
init|=
operator|new
name|SnapshotDeletionPolicy
argument_list|(
operator|new
name|KeepOnlyLastCommitDeletionPolicy
argument_list|()
argument_list|)
decl_stmt|;
name|config
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|deletionPolicy
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commitData
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|syncId
init|=
literal|"a sync id"
decl_stmt|;
name|String
name|translogId
init|=
literal|"a translog id"
decl_stmt|;
name|commitData
operator|.
name|put
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
name|commitData
operator|.
name|put
argument_list|(
name|Translog
operator|.
name|TRANSLOG_GENERATION_KEY
argument_list|,
name|translogId
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setCommitData
argument_list|(
name|commitData
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Store
operator|.
name|MetadataSnapshot
name|metadata
decl_stmt|;
name|metadata
operator|=
name|store
operator|.
name|getMetadata
argument_list|(
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
name|deletionPolicy
operator|.
name|snapshot
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// do not check for correct files, we have enough tests for that above
name|assertThat
argument_list|(
name|metadata
operator|.
name|getCommitUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|syncId
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|metadata
operator|.
name|getCommitUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_GENERATION_KEY
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|translogId
argument_list|)
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|checkIndex
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|assertDeleteContent
argument_list|(
name|store
argument_list|,
name|directoryService
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
DECL|method|testStreamStoreFilesMetaData
specifier|public
name|void
name|testStreamStoreFilesMetaData
parameter_list|()
throws|throws
name|Exception
block|{
name|Store
operator|.
name|MetadataSnapshot
name|metadataSnapshot
init|=
name|createMetaDataSnapshot
argument_list|()
decl_stmt|;
name|TransportNodesListShardStoreMetaData
operator|.
name|StoreFilesMetaData
name|outStoreFileMetaData
init|=
operator|new
name|TransportNodesListShardStoreMetaData
operator|.
name|StoreFilesMetaData
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|metadataSnapshot
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|outBuffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStreamStreamOutput
name|out
init|=
operator|new
name|OutputStreamStreamOutput
argument_list|(
name|outBuffer
argument_list|)
decl_stmt|;
name|org
operator|.
name|elasticsearch
operator|.
name|Version
name|targetNodeVersion
init|=
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|setVersion
argument_list|(
name|targetNodeVersion
argument_list|)
expr_stmt|;
name|outStoreFileMetaData
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|inBuffer
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|outBuffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|InputStreamStreamInput
name|in
init|=
operator|new
name|InputStreamStreamInput
argument_list|(
name|inBuffer
argument_list|)
decl_stmt|;
name|in
operator|.
name|setVersion
argument_list|(
name|targetNodeVersion
argument_list|)
expr_stmt|;
name|TransportNodesListShardStoreMetaData
operator|.
name|StoreFilesMetaData
name|inStoreFileMetaData
init|=
name|TransportNodesListShardStoreMetaData
operator|.
name|StoreFilesMetaData
operator|.
name|readStoreFilesMetaData
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|StoreFileMetaData
argument_list|>
name|outFiles
init|=
name|outStoreFileMetaData
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|StoreFileMetaData
name|inFile
range|:
name|inStoreFileMetaData
control|)
block|{
name|assertThat
argument_list|(
name|inFile
operator|.
name|name
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|outFiles
operator|.
name|next
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|outStoreFileMetaData
operator|.
name|syncId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|inStoreFileMetaData
operator|.
name|syncId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMarkCorruptedOnTruncatedSegmentsFile
specifier|public
name|void
name|testMarkCorruptedOnTruncatedSegmentsFile
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|INDEX_SETTINGS
argument_list|,
name|directoryService
argument_list|,
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Document
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Document
name|d
range|:
name|docs
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|MockDirectoryWrapper
name|leaf
init|=
name|DirectoryUtils
operator|.
name|getLeaf
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|MockDirectoryWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|leaf
operator|!=
literal|null
condition|)
block|{
name|leaf
operator|.
name|setPreventDoubleWrite
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// I do this on purpose
block|}
name|SegmentInfos
name|segmentCommitInfos
init|=
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
decl_stmt|;
try|try
init|(
name|IndexOutput
name|out
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|createOutput
argument_list|(
name|segmentCommitInfos
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
comment|// empty file
block|}
try|try
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|store
operator|.
name|getMetadata
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"corrupted segments_N file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|assertTrue
argument_list|(
name|store
operator|.
name|isMarkedCorrupted
argument_list|()
argument_list|)
expr_stmt|;
name|Lucene
operator|.
name|cleanLuceneIndex
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
comment|// we have to remove the index since it's corrupted and might fail the MocKDirWrapper checkindex call
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testCanOpenIndex
specifier|public
name|void
name|testCanOpenIndex
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
specifier|final
name|BaseDirectoryWrapper
name|dir
init|=
name|newFSDirectory
argument_list|(
name|tempDir
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Store
operator|.
name|canOpenIndex
argument_list|(
name|logger
argument_list|,
name|tempDir
argument_list|,
name|shardId
argument_list|,
parameter_list|(
name|id
parameter_list|,
name|l
parameter_list|)
lambda|->
operator|new
name|DummyShardLock
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Store
operator|.
name|canOpenIndex
argument_list|(
name|logger
argument_list|,
name|tempDir
argument_list|,
name|shardId
argument_list|,
parameter_list|(
name|id
parameter_list|,
name|l
parameter_list|)
lambda|->
operator|new
name|DummyShardLock
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|DirectoryService
argument_list|(
name|shardId
argument_list|,
name|INDEX_SETTINGS
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|long
name|throttleTimeInNanos
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Directory
name|newDirectory
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|dir
return|;
block|}
block|}
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|INDEX_SETTINGS
argument_list|,
name|directoryService
argument_list|,
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
argument_list|)
decl_stmt|;
name|store
operator|.
name|markStoreCorrupted
argument_list|(
operator|new
name|CorruptIndexException
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Store
operator|.
name|canOpenIndex
argument_list|(
name|logger
argument_list|,
name|tempDir
argument_list|,
name|shardId
argument_list|,
parameter_list|(
name|id
parameter_list|,
name|l
parameter_list|)
lambda|->
operator|new
name|DummyShardLock
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDeserializeCorruptionException
specifier|public
name|void
name|testDeserializeCorruptionException
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
comment|// I use ram dir to prevent that virusscanner being a PITA
name|DirectoryService
name|directoryService
init|=
operator|new
name|DirectoryService
argument_list|(
name|shardId
argument_list|,
name|INDEX_SETTINGS
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|long
name|throttleTimeInNanos
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Directory
name|newDirectory
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|dir
return|;
block|}
block|}
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|INDEX_SETTINGS
argument_list|,
name|directoryService
argument_list|,
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
argument_list|)
decl_stmt|;
name|CorruptIndexException
name|ex
init|=
operator|new
name|CorruptIndexException
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|store
operator|.
name|markStoreCorrupted
argument_list|(
name|ex
argument_list|)
expr_stmt|;
try|try
block|{
name|store
operator|.
name|failIfCorrupted
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should be corrupted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|ex
operator|.
name|getStackTrace
argument_list|()
argument_list|,
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|removeCorruptionMarker
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|store
operator|.
name|isMarkedCorrupted
argument_list|()
argument_list|)
expr_stmt|;
name|FileNotFoundException
name|ioe
init|=
operator|new
name|FileNotFoundException
argument_list|(
literal|"foobar"
argument_list|)
decl_stmt|;
name|store
operator|.
name|markStoreCorrupted
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
try|try
block|{
name|store
operator|.
name|failIfCorrupted
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should be corrupted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"foobar (resource=preexisting_corruption)"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|ioe
operator|.
name|getStackTrace
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testCanReadOldCorruptionMarker
specifier|public
name|void
name|testCanReadOldCorruptionMarker
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
comment|// I use ram dir to prevent that virusscanner being a PITA
name|DirectoryService
name|directoryService
init|=
operator|new
name|DirectoryService
argument_list|(
name|shardId
argument_list|,
name|INDEX_SETTINGS
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|long
name|throttleTimeInNanos
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Directory
name|newDirectory
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|dir
return|;
block|}
block|}
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|INDEX_SETTINGS
argument_list|,
name|directoryService
argument_list|,
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
argument_list|)
decl_stmt|;
name|CorruptIndexException
name|exception
init|=
operator|new
name|CorruptIndexException
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|String
name|uuid
init|=
name|Store
operator|.
name|CORRUPTED
operator|+
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
decl_stmt|;
try|try
init|(
name|IndexOutput
name|output
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|uuid
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|output
argument_list|,
name|Store
operator|.
name|CODEC
argument_list|,
name|Store
operator|.
name|VERSION_STACK_TRACE
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeString
argument_list|(
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeString
argument_list|(
name|ExceptionsHelper
operator|.
name|stackTrace
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|store
operator|.
name|failIfCorrupted
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should be corrupted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"[index][1] Preexisting corrupted index ["
operator|+
name|uuid
operator|+
literal|"] caused by: CorruptIndexException[foo (resource=bar)]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|ExceptionsHelper
operator|.
name|stackTrace
argument_list|(
name|exception
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|removeCorruptionMarker
argument_list|()
expr_stmt|;
try|try
init|(
name|IndexOutput
name|output
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|uuid
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|output
argument_list|,
name|Store
operator|.
name|CODEC
argument_list|,
name|Store
operator|.
name|VERSION_START
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeString
argument_list|(
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|store
operator|.
name|failIfCorrupted
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should be corrupted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"[index][1] Preexisting corrupted index ["
operator|+
name|uuid
operator|+
literal|"] caused by: CorruptIndexException[foo (resource=bar)]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|ExceptionsHelper
operator|.
name|stackTrace
argument_list|(
name|exception
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|removeCorruptionMarker
argument_list|()
expr_stmt|;
try|try
init|(
name|IndexOutput
name|output
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|uuid
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|output
argument_list|,
name|Store
operator|.
name|CODEC
argument_list|,
name|Store
operator|.
name|VERSION_START
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// corrupted header
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|store
operator|.
name|failIfCorrupted
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should be too old"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexFormatTooOldException
name|e
parameter_list|)
block|{         }
name|store
operator|.
name|removeCorruptionMarker
argument_list|()
expr_stmt|;
try|try
init|(
name|IndexOutput
name|output
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|uuid
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|output
argument_list|,
name|Store
operator|.
name|CODEC
argument_list|,
name|Store
operator|.
name|VERSION
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// corrupted header
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|store
operator|.
name|failIfCorrupted
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should be too new"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexFormatTooNewException
name|e
parameter_list|)
block|{         }
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

