begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.plain
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedNumericDoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|NumberFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|HalfFloatFielddataTests
specifier|public
class|class
name|HalfFloatFielddataTests
extends|extends
name|ESTestCase
block|{
DECL|method|testSingleValued
specifier|public
name|void
name|testSingleValued
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
comment|// we need the default codec to check for singletons
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
operator|.
name|setCodec
argument_list|(
name|TestUtil
operator|.
name|getDefaultCodec
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexableField
name|f
range|:
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|HALF_FLOAT
operator|.
name|createFields
argument_list|(
literal|"half_float"
argument_list|,
literal|3f
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|DirectoryReader
name|dirReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|LeafReader
name|reader
init|=
name|getOnlyLeafReader
argument_list|(
name|dirReader
argument_list|)
decl_stmt|;
name|SortedNumericDoubleValues
name|values
init|=
operator|new
name|SortedNumericDVIndexFieldData
operator|.
name|SortedNumericHalfFloatFieldData
argument_list|(
name|reader
argument_list|,
literal|"half_float"
argument_list|)
operator|.
name|getDoubleValues
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|FieldData
operator|.
name|unwrapSingleton
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|values
operator|.
name|advanceExact
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|values
operator|.
name|docValueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3f
argument_list|,
name|values
operator|.
name|nextValue
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|dirReader
argument_list|,
name|w
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValued
specifier|public
name|void
name|testMultiValued
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexableField
name|f
range|:
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|HALF_FLOAT
operator|.
name|createFields
argument_list|(
literal|"half_float"
argument_list|,
literal|3f
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|IndexableField
name|f
range|:
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|HALF_FLOAT
operator|.
name|createFields
argument_list|(
literal|"half_float"
argument_list|,
literal|2f
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|DirectoryReader
name|dirReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|LeafReader
name|reader
init|=
name|getOnlyLeafReader
argument_list|(
name|dirReader
argument_list|)
decl_stmt|;
name|SortedNumericDoubleValues
name|values
init|=
operator|new
name|SortedNumericDVIndexFieldData
operator|.
name|SortedNumericHalfFloatFieldData
argument_list|(
name|reader
argument_list|,
literal|"half_float"
argument_list|)
operator|.
name|getDoubleValues
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|FieldData
operator|.
name|unwrapSingleton
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|values
operator|.
name|advanceExact
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|values
operator|.
name|docValueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2f
argument_list|,
name|values
operator|.
name|nextValue
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3f
argument_list|,
name|values
operator|.
name|nextValue
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|dirReader
argument_list|,
name|w
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

