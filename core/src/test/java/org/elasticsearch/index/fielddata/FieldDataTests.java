begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_class
DECL|class|FieldDataTests
specifier|public
class|class
name|FieldDataTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|method|testSortableLongBitsToDoubles
specifier|public
name|void
name|testSortableLongBitsToDoubles
parameter_list|()
block|{
specifier|final
name|double
name|value
init|=
name|randomDouble
argument_list|()
decl_stmt|;
specifier|final
name|long
name|valueBits
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|NumericDocValues
name|values
init|=
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|valueBits
return|;
block|}
block|}
decl_stmt|;
name|SortedNumericDoubleValues
name|asMultiDoubles
init|=
name|FieldData
operator|.
name|sortableLongBitsToDoubles
argument_list|(
name|DocValues
operator|.
name|singleton
argument_list|(
name|values
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|NumericDoubleValues
name|asDoubles
init|=
name|FieldData
operator|.
name|unwrapSingleton
argument_list|(
name|asMultiDoubles
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|asDoubles
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|asDoubles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NumericDocValues
name|backToLongs
init|=
name|DocValues
operator|.
name|unwrapSingleton
argument_list|(
name|FieldData
operator|.
name|toSortableLongBits
argument_list|(
name|asMultiDoubles
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|values
argument_list|,
name|backToLongs
argument_list|)
expr_stmt|;
name|SortedNumericDocValues
name|multiValues
init|=
operator|new
name|SortedNumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|valueAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|valueBits
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|doc
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
decl_stmt|;
name|asMultiDoubles
operator|=
name|FieldData
operator|.
name|sortableLongBitsToDoubles
argument_list|(
name|multiValues
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|asMultiDoubles
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|multiValues
argument_list|,
name|FieldData
operator|.
name|toSortableLongBits
argument_list|(
name|asMultiDoubles
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDoublesToSortableLongBits
specifier|public
name|void
name|testDoublesToSortableLongBits
parameter_list|()
block|{
specifier|final
name|double
name|value
init|=
name|randomDouble
argument_list|()
decl_stmt|;
specifier|final
name|long
name|valueBits
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|NumericDoubleValues
name|values
init|=
operator|new
name|NumericDoubleValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|value
return|;
block|}
block|}
decl_stmt|;
name|SortedNumericDocValues
name|asMultiLongs
init|=
name|FieldData
operator|.
name|toSortableLongBits
argument_list|(
name|FieldData
operator|.
name|singleton
argument_list|(
name|values
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|NumericDocValues
name|asLongs
init|=
name|DocValues
operator|.
name|unwrapSingleton
argument_list|(
name|asMultiLongs
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|asLongs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|valueBits
argument_list|,
name|asLongs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|SortedNumericDoubleValues
name|multiValues
init|=
operator|new
name|SortedNumericDoubleValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|valueAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|doc
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
decl_stmt|;
name|asMultiLongs
operator|=
name|FieldData
operator|.
name|toSortableLongBits
argument_list|(
name|multiValues
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|valueBits
argument_list|,
name|asMultiLongs
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|multiValues
argument_list|,
name|FieldData
operator|.
name|sortableLongBitsToDoubles
argument_list|(
name|asMultiLongs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

