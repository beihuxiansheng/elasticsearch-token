begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedSetDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomAccessOrds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilteredQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|QueryWrapperFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopFieldDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|BitDocIdSetCachingWrapperFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ScoreMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ToParentBlockJoinQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
operator|.
name|XFieldComparatorSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
operator|.
name|XFieldComparatorSource
operator|.
name|Nested
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|fieldcomparator
operator|.
name|BytesRefFieldComparatorSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
operator|.
name|GlobalOrdinalsIndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MultiValueMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|sameInstance
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|AbstractStringFieldDataTests
specifier|public
specifier|abstract
class|class
name|AbstractStringFieldDataTests
extends|extends
name|AbstractFieldDataImplTests
block|{
DECL|method|addField
specifier|private
name|void
name|addField
parameter_list|(
name|Document
name|d
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|d
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
name|name
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fillSingleValueAllSet
specifier|protected
name|void
name|fillSingleValueAllSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|add2SingleValuedDocumentsAndDeleteOneOfThem
specifier|protected
name|void
name|add2SingleValuedDocumentsAndDeleteOneOfThem
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fillSingleValueWithMissing
specifier|protected
name|void
name|fillSingleValueWithMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
comment|//d.add(new StringField("value", one(), Field.Store.NO)); // MISSING....
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fillMultiValueAllSet
specifier|protected
name|void
name|fillMultiValueAllSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// TODO: Have tests with more docs for sorting
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fillMultiValueWithMissing
specifier|protected
name|void
name|fillMultiValueWithMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
comment|//d.add(new StringField("value", one(), Field.Store.NO)); // MISSING
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fillAllMissing
specifier|protected
name|void
name|fillAllMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fillExtendedMvSet
specifier|protected
name|void
name|fillExtendedMvSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"02"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"04"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"03"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"04"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"05"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"06"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"06"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"07"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"08"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"_id"
argument_list|,
literal|"6"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"08"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"09"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"_id"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"!08"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"!09"
argument_list|)
expr_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
literal|"!10"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
DECL|method|testActualMissingValue
specifier|public
name|void
name|testActualMissingValue
parameter_list|()
throws|throws
name|IOException
block|{
name|testActualMissingValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testActualMissingValueReverse
specifier|public
name|void
name|testActualMissingValueReverse
parameter_list|()
throws|throws
name|IOException
block|{
name|testActualMissingValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testActualMissingValue
specifier|public
name|void
name|testActualMissingValue
parameter_list|(
name|boolean
name|reverse
parameter_list|)
throws|throws
name|IOException
block|{
comment|// missing value is set to an actual value
specifier|final
name|String
index|[]
name|values
init|=
operator|new
name|String
index|[
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|30
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|getRandom
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|String
name|value
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|IndexFieldData
name|indexFieldData
init|=
name|getForField
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|missingValue
init|=
name|values
index|[
literal|1
index|]
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|XFieldComparatorSource
name|comparator
init|=
name|indexFieldData
operator|.
name|comparatorSource
argument_list|(
name|missingValue
argument_list|,
name|MultiValueMode
operator|.
name|MIN
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TopFieldDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|numDocs
else|:
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|numDocs
argument_list|)
argument_list|,
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"value"
argument_list|,
name|comparator
argument_list|,
name|reverse
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|BytesRef
name|previousValue
init|=
name|reverse
condition|?
name|UnicodeUtil
operator|.
name|BIG_TERM
else|:
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|String
name|docValue
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|topDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
specifier|final
name|BytesRef
name|value
init|=
operator|new
name|BytesRef
argument_list|(
name|docValue
operator|==
literal|null
condition|?
name|missingValue
else|:
name|docValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|reverse
condition|)
block|{
name|assertTrue
argument_list|(
name|previousValue
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|previousValue
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
block|}
name|previousValue
operator|=
name|value
expr_stmt|;
block|}
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSortMissingFirst
specifier|public
name|void
name|testSortMissingFirst
parameter_list|()
throws|throws
name|IOException
block|{
name|testSortMissing
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testSortMissingFirstReverse
specifier|public
name|void
name|testSortMissingFirstReverse
parameter_list|()
throws|throws
name|IOException
block|{
name|testSortMissing
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testSortMissingLast
specifier|public
name|void
name|testSortMissingLast
parameter_list|()
throws|throws
name|IOException
block|{
name|testSortMissing
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testSortMissingLastReverse
specifier|public
name|void
name|testSortMissingLastReverse
parameter_list|()
throws|throws
name|IOException
block|{
name|testSortMissing
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testSortMissing
specifier|public
name|void
name|testSortMissing
parameter_list|(
name|boolean
name|first
parameter_list|,
name|boolean
name|reverse
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
index|[]
name|values
init|=
operator|new
name|String
index|[
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|getRandom
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|String
name|value
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|addField
argument_list|(
name|d
argument_list|,
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|IndexFieldData
name|indexFieldData
init|=
name|getForField
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|XFieldComparatorSource
name|comparator
init|=
name|indexFieldData
operator|.
name|comparatorSource
argument_list|(
name|first
condition|?
literal|"_first"
else|:
literal|"_last"
argument_list|,
name|MultiValueMode
operator|.
name|MIN
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TopFieldDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|numDocs
else|:
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|numDocs
argument_list|)
argument_list|,
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"value"
argument_list|,
name|comparator
argument_list|,
name|reverse
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|BytesRef
name|previousValue
init|=
name|first
condition|?
literal|null
else|:
name|reverse
condition|?
name|UnicodeUtil
operator|.
name|BIG_TERM
else|:
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|String
name|docValue
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|topDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|&&
name|docValue
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|previousValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|first
operator|&&
name|docValue
operator|!=
literal|null
condition|)
block|{
name|assertNotNull
argument_list|(
name|previousValue
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BytesRef
name|value
init|=
name|docValue
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|BytesRef
argument_list|(
name|docValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousValue
operator|!=
literal|null
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|reverse
condition|)
block|{
name|assertTrue
argument_list|(
name|previousValue
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|previousValue
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|previousValue
operator|=
name|value
expr_stmt|;
block|}
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testNestedSortingMin
specifier|public
name|void
name|testNestedSortingMin
parameter_list|()
throws|throws
name|IOException
block|{
name|testNestedSorting
argument_list|(
name|MultiValueMode
operator|.
name|MIN
argument_list|)
expr_stmt|;
block|}
DECL|method|testNestedSortingMax
specifier|public
name|void
name|testNestedSortingMax
parameter_list|()
throws|throws
name|IOException
block|{
name|testNestedSorting
argument_list|(
name|MultiValueMode
operator|.
name|MAX
argument_list|)
expr_stmt|;
block|}
DECL|method|testNestedSorting
specifier|public
name|void
name|testNestedSorting
parameter_list|(
name|MultiValueMode
name|sortMode
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
index|[]
name|values
init|=
operator|new
name|String
index|[
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|20
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|getRandom
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|numParents
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Document
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|FixedBitSet
name|parents
init|=
operator|new
name|FixedBitSet
argument_list|(
literal|64
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParents
condition|;
operator|++
name|i
control|)
block|{
name|docs
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|final
name|int
name|numChildren
init|=
name|randomInt
argument_list|(
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numChildren
condition|;
operator|++
name|j
control|)
block|{
specifier|final
name|Document
name|child
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numValues
init|=
name|randomInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|numValues
condition|;
operator|++
name|k
control|)
block|{
specifier|final
name|String
name|value
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|addField
argument_list|(
name|child
argument_list|,
literal|"text"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|docs
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Document
name|parent
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|parent
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"type"
argument_list|,
literal|"parent"
argument_list|,
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|value
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|addField
argument_list|(
name|parent
argument_list|,
literal|"text"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|docs
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|int
name|bit
init|=
name|parents
operator|.
name|prevSetBit
argument_list|(
name|parents
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
name|docs
operator|.
name|size
argument_list|()
decl_stmt|;
name|parents
operator|=
name|FixedBitSet
operator|.
name|ensureCapacity
argument_list|(
name|parents
argument_list|,
name|bit
argument_list|)
expr_stmt|;
name|parents
operator|.
name|set
argument_list|(
name|bit
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocuments
argument_list|(
name|docs
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|fieldData
init|=
name|getForField
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|missingValue
decl_stmt|;
switch|switch
condition|(
name|randomInt
argument_list|(
literal|4
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|missingValue
operator|=
literal|"_first"
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|missingValue
operator|=
literal|"_last"
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|missingValue
operator|=
operator|new
name|BytesRef
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|missingValue
operator|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|getRandom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|Filter
name|parentFilter
init|=
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"type"
argument_list|,
literal|"parent"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Filter
name|childFilter
init|=
operator|new
name|QueryWrapperFilter
argument_list|(
name|Queries
operator|.
name|not
argument_list|(
name|parentFilter
argument_list|)
argument_list|)
decl_stmt|;
name|Nested
name|nested
init|=
name|createNested
argument_list|(
name|parentFilter
argument_list|,
name|childFilter
argument_list|)
decl_stmt|;
name|BytesRefFieldComparatorSource
name|nestedComparatorSource
init|=
operator|new
name|BytesRefFieldComparatorSource
argument_list|(
name|fieldData
argument_list|,
name|missingValue
argument_list|,
name|sortMode
argument_list|,
name|nested
argument_list|)
decl_stmt|;
name|ToParentBlockJoinQuery
name|query
init|=
operator|new
name|ToParentBlockJoinQuery
argument_list|(
operator|new
name|FilteredQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|childFilter
argument_list|)
argument_list|,
operator|new
name|BitDocIdSetCachingWrapperFilter
argument_list|(
name|parentFilter
argument_list|)
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|)
decl_stmt|;
name|Sort
name|sort
init|=
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"text"
argument_list|,
name|nestedComparatorSource
argument_list|)
argument_list|)
decl_stmt|;
name|TopFieldDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|numParents
argument_list|)
argument_list|,
name|sort
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|BytesRef
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|docID
init|=
name|topDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected "
operator|+
name|docID
operator|+
literal|" to be a parent"
argument_list|,
name|parents
operator|.
name|get
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
name|BytesRef
name|cmpValue
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|child
init|=
name|parents
operator|.
name|prevSetBit
argument_list|(
name|docID
operator|-
literal|1
argument_list|)
operator|+
literal|1
init|;
name|child
operator|<
name|docID
condition|;
operator|++
name|child
control|)
block|{
name|String
index|[]
name|sVals
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|child
argument_list|)
operator|.
name|getValues
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
specifier|final
name|BytesRef
index|[]
name|vals
decl_stmt|;
if|if
condition|(
name|sVals
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|vals
operator|=
operator|new
name|BytesRef
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|vals
operator|=
operator|new
name|BytesRef
index|[
name|sVals
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|vals
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|vals
index|[
name|j
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
name|sVals
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|BytesRef
name|value
range|:
name|vals
control|)
block|{
if|if
condition|(
name|cmpValue
operator|==
literal|null
condition|)
block|{
name|cmpValue
operator|=
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sortMode
operator|==
name|MultiValueMode
operator|.
name|MIN
operator|&&
name|value
operator|.
name|compareTo
argument_list|(
name|cmpValue
argument_list|)
operator|<
literal|0
condition|)
block|{
name|cmpValue
operator|=
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sortMode
operator|==
name|MultiValueMode
operator|.
name|MAX
operator|&&
name|value
operator|.
name|compareTo
argument_list|(
name|cmpValue
argument_list|)
operator|>
literal|0
condition|)
block|{
name|cmpValue
operator|=
name|value
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|cmpValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
literal|"_first"
operator|.
name|equals
argument_list|(
name|missingValue
argument_list|)
condition|)
block|{
name|cmpValue
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_last"
operator|.
name|equals
argument_list|(
name|missingValue
argument_list|)
operator|==
literal|false
condition|)
block|{
name|cmpValue
operator|=
operator|(
name|BytesRef
operator|)
name|missingValue
expr_stmt|;
block|}
block|}
if|if
condition|(
name|previous
operator|!=
literal|null
operator|&&
name|cmpValue
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|previous
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|"   /   "
operator|+
name|cmpValue
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|previous
operator|.
name|compareTo
argument_list|(
name|cmpValue
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
block|}
name|previous
operator|=
name|cmpValue
expr_stmt|;
block|}
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|assertIteratorConsistentWithRandomAccess
specifier|private
name|void
name|assertIteratorConsistentWithRandomAccess
parameter_list|(
name|RandomAccessOrds
name|ords
parameter_list|,
name|int
name|maxDoc
parameter_list|)
block|{
for|for
control|(
name|int
name|doc
init|=
literal|0
init|;
name|doc
operator|<
name|maxDoc
condition|;
operator|++
name|doc
control|)
block|{
name|ords
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|cardinality
init|=
name|ords
operator|.
name|cardinality
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cardinality
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|ords
operator|.
name|nextOrd
argument_list|()
argument_list|,
name|ords
operator|.
name|ordAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|ords
operator|.
name|nextOrd
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testGlobalOrdinals
specifier|public
name|void
name|testGlobalOrdinals
parameter_list|()
throws|throws
name|Exception
block|{
name|fillExtendedMvSet
argument_list|()
expr_stmt|;
name|refreshReader
argument_list|()
expr_stmt|;
name|FieldDataType
name|fieldDataType
init|=
operator|new
name|FieldDataType
argument_list|(
literal|"string"
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"global_values"
argument_list|,
literal|"fixed"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexOrdinalsFieldData
name|ifd
init|=
name|getForField
argument_list|(
name|fieldDataType
argument_list|,
literal|"value"
argument_list|,
name|hasDocValues
argument_list|()
argument_list|)
decl_stmt|;
name|IndexOrdinalsFieldData
name|globalOrdinals
init|=
name|ifd
operator|.
name|loadGlobal
argument_list|(
name|topLevelReader
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topLevelReader
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// First segment
name|assertThat
argument_list|(
name|globalOrdinals
argument_list|,
name|instanceOf
argument_list|(
name|GlobalOrdinalsIndexFieldData
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|LeafReaderContext
name|leaf
init|=
name|topLevelReader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicOrdinalsFieldData
name|afd
init|=
name|globalOrdinals
operator|.
name|load
argument_list|(
name|leaf
argument_list|)
decl_stmt|;
name|RandomAccessOrds
name|values
init|=
name|afd
operator|.
name|getOrdinalsValues
argument_list|()
decl_stmt|;
name|assertIteratorConsistentWithRandomAccess
argument_list|(
name|values
argument_list|,
name|leaf
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|values
operator|.
name|setDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|cardinality
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|ord
init|=
name|values
operator|.
name|nextOrd
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ord
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"02"
argument_list|)
argument_list|)
expr_stmt|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ord
argument_list|,
name|equalTo
argument_list|(
literal|5l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"04"
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|.
name|setDocument
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|cardinality
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|.
name|setDocument
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|cardinality
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ord
argument_list|,
name|equalTo
argument_list|(
literal|4l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"03"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Second segment
name|leaf
operator|=
name|topLevelReader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|afd
operator|=
name|globalOrdinals
operator|.
name|load
argument_list|(
name|leaf
argument_list|)
expr_stmt|;
name|values
operator|=
name|afd
operator|.
name|getOrdinalsValues
argument_list|()
expr_stmt|;
name|assertIteratorConsistentWithRandomAccess
argument_list|(
name|values
argument_list|,
name|leaf
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|values
operator|.
name|setDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|cardinality
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ord
argument_list|,
name|equalTo
argument_list|(
literal|5l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"04"
argument_list|)
argument_list|)
expr_stmt|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ord
argument_list|,
name|equalTo
argument_list|(
literal|6l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"05"
argument_list|)
argument_list|)
expr_stmt|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ord
argument_list|,
name|equalTo
argument_list|(
literal|7l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"06"
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|.
name|setDocument
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|cardinality
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ord
argument_list|,
name|equalTo
argument_list|(
literal|7l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"06"
argument_list|)
argument_list|)
expr_stmt|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ord
argument_list|,
name|equalTo
argument_list|(
literal|8l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"07"
argument_list|)
argument_list|)
expr_stmt|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ord
argument_list|,
name|equalTo
argument_list|(
literal|9l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"08"
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|.
name|setDocument
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|cardinality
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|.
name|setDocument
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|cardinality
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ord
argument_list|,
name|equalTo
argument_list|(
literal|9l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"08"
argument_list|)
argument_list|)
expr_stmt|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ord
argument_list|,
name|equalTo
argument_list|(
literal|10l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"09"
argument_list|)
argument_list|)
expr_stmt|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ord
argument_list|,
name|equalTo
argument_list|(
literal|11l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Third segment
name|leaf
operator|=
name|topLevelReader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|afd
operator|=
name|globalOrdinals
operator|.
name|load
argument_list|(
name|leaf
argument_list|)
expr_stmt|;
name|values
operator|=
name|afd
operator|.
name|getOrdinalsValues
argument_list|()
expr_stmt|;
name|assertIteratorConsistentWithRandomAccess
argument_list|(
name|values
argument_list|,
name|leaf
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|values
operator|.
name|setDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|values
operator|.
name|setDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|cardinality
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ord
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"!08"
argument_list|)
argument_list|)
expr_stmt|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ord
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"!09"
argument_list|)
argument_list|)
expr_stmt|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ord
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"!10"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermsEnum
specifier|public
name|void
name|testTermsEnum
parameter_list|()
throws|throws
name|Exception
block|{
name|fillExtendedMvSet
argument_list|()
expr_stmt|;
name|LeafReaderContext
name|atomicReaderContext
init|=
name|refreshReader
argument_list|()
decl_stmt|;
name|IndexOrdinalsFieldData
name|ifd
init|=
name|getForField
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|AtomicOrdinalsFieldData
name|afd
init|=
name|ifd
operator|.
name|load
argument_list|(
name|atomicReaderContext
argument_list|)
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|afd
operator|.
name|getOrdinalsValues
argument_list|()
operator|.
name|termsEnum
argument_list|()
decl_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|termsEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|size
operator|++
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|size
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"10"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termsEnum
operator|.
name|next
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"08"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"08"
argument_list|)
argument_list|)
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|termsEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|size
operator|++
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|size
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|termsEnum
operator|.
name|seekExact
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"07"
argument_list|)
argument_list|)
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|termsEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|size
operator|++
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|size
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlobalOrdinalsGetRemovedOnceIndexReaderCloses
specifier|public
name|void
name|testGlobalOrdinalsGetRemovedOnceIndexReaderCloses
parameter_list|()
throws|throws
name|Exception
block|{
name|fillExtendedMvSet
argument_list|()
expr_stmt|;
name|refreshReader
argument_list|()
expr_stmt|;
name|FieldDataType
name|fieldDataType
init|=
operator|new
name|FieldDataType
argument_list|(
literal|"string"
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"global_values"
argument_list|,
literal|"fixed"
argument_list|)
operator|.
name|put
argument_list|(
literal|"cache"
argument_list|,
literal|"node"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexOrdinalsFieldData
name|ifd
init|=
name|getForField
argument_list|(
name|fieldDataType
argument_list|,
literal|"value"
argument_list|,
name|hasDocValues
argument_list|()
argument_list|)
decl_stmt|;
name|IndexOrdinalsFieldData
name|globalOrdinals
init|=
name|ifd
operator|.
name|loadGlobal
argument_list|(
name|topLevelReader
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ifd
operator|.
name|loadGlobal
argument_list|(
name|topLevelReader
argument_list|)
argument_list|,
name|sameInstance
argument_list|(
name|globalOrdinals
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3 b/c 1 segment level caches and 1 top level cache
comment|// in case of doc values, we don't cache atomic FD, so only the top-level cache is there
name|assertThat
argument_list|(
name|indicesFieldDataCache
operator|.
name|getCache
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|hasDocValues
argument_list|()
condition|?
literal|1L
else|:
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
name|IndexOrdinalsFieldData
name|cachedInstance
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Accountable
name|ramUsage
range|:
name|indicesFieldDataCache
operator|.
name|getCache
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|ramUsage
operator|instanceof
name|IndexOrdinalsFieldData
condition|)
block|{
name|cachedInstance
operator|=
operator|(
name|IndexOrdinalsFieldData
operator|)
name|ramUsage
expr_stmt|;
break|break;
block|}
block|}
name|assertThat
argument_list|(
name|cachedInstance
argument_list|,
name|sameInstance
argument_list|(
name|globalOrdinals
argument_list|)
argument_list|)
expr_stmt|;
name|topLevelReader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now only 3 segment level entries, only the toplevel reader has been closed, but the segment readers are still used by IW
name|assertThat
argument_list|(
name|indicesFieldDataCache
operator|.
name|getCache
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|hasDocValues
argument_list|()
condition|?
literal|0L
else|:
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|refreshReader
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ifd
operator|.
name|loadGlobal
argument_list|(
name|topLevelReader
argument_list|)
argument_list|,
name|not
argument_list|(
name|sameInstance
argument_list|(
name|globalOrdinals
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ifdService
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|indicesFieldDataCache
operator|.
name|getCache
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

