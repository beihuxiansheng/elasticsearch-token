begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LogByteSizeMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|index
operator|.
name|ElasticsearchDirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|bitset
operator|.
name|BitsetFilterCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
operator|.
name|XFieldComparatorSource
operator|.
name|Nested
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|BinaryFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ContentPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|GeoPointFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|KeywordFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapper
operator|.
name|BuilderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|NumberFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParentFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|TextFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|fielddata
operator|.
name|cache
operator|.
name|IndicesFieldDataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalSettingsPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|sameInstance
import|;
end_import

begin_class
DECL|class|AbstractFieldDataTestCase
specifier|public
specifier|abstract
class|class
name|AbstractFieldDataTestCase
extends|extends
name|ESSingleNodeTestCase
block|{
DECL|field|indexService
specifier|protected
name|IndexService
name|indexService
decl_stmt|;
DECL|field|ifdService
specifier|protected
name|IndexFieldDataService
name|ifdService
decl_stmt|;
DECL|field|mapperService
specifier|protected
name|MapperService
name|mapperService
decl_stmt|;
DECL|field|writer
specifier|protected
name|IndexWriter
name|writer
decl_stmt|;
DECL|field|readerContexts
specifier|protected
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|readerContexts
init|=
literal|null
decl_stmt|;
DECL|field|topLevelReader
specifier|protected
name|DirectoryReader
name|topLevelReader
init|=
literal|null
decl_stmt|;
DECL|field|indicesFieldDataCache
specifier|protected
name|IndicesFieldDataCache
name|indicesFieldDataCache
decl_stmt|;
DECL|method|getFieldDataType
specifier|protected
specifier|abstract
name|String
name|getFieldDataType
parameter_list|()
function_decl|;
DECL|method|hasDocValues
specifier|protected
name|boolean
name|hasDocValues
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getForField
specifier|public
parameter_list|<
name|IFD
extends|extends
name|IndexFieldData
argument_list|<
name|?
argument_list|>
parameter_list|>
name|IFD
name|getForField
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|getForField
argument_list|(
name|getFieldDataType
argument_list|()
argument_list|,
name|fieldName
argument_list|,
name|hasDocValues
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getForField
specifier|public
parameter_list|<
name|IFD
extends|extends
name|IndexFieldData
argument_list|<
name|?
argument_list|>
parameter_list|>
name|IFD
name|getForField
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|getForField
argument_list|(
name|type
argument_list|,
name|fieldName
argument_list|,
name|hasDocValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|getPlugins
parameter_list|()
block|{
return|return
name|pluginList
argument_list|(
name|InternalSettingsPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getForField
specifier|public
parameter_list|<
name|IFD
extends|extends
name|IndexFieldData
argument_list|<
name|?
argument_list|>
parameter_list|>
name|IFD
name|getForField
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|boolean
name|docValues
parameter_list|)
block|{
specifier|final
name|MappedFieldType
name|fieldType
decl_stmt|;
specifier|final
name|BuilderContext
name|context
init|=
operator|new
name|BuilderContext
argument_list|(
name|indexService
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getSettings
argument_list|()
argument_list|,
operator|new
name|ContentPath
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
if|if
condition|(
name|docValues
condition|)
block|{
name|fieldType
operator|=
operator|new
name|KeywordFieldMapper
operator|.
name|Builder
argument_list|(
name|fieldName
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
operator|.
name|fieldType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fieldType
operator|=
operator|new
name|TextFieldMapper
operator|.
name|Builder
argument_list|(
name|fieldName
argument_list|)
operator|.
name|fielddata
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
operator|.
name|fieldType
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"float"
argument_list|)
condition|)
block|{
name|fieldType
operator|=
operator|new
name|NumberFieldMapper
operator|.
name|Builder
argument_list|(
name|fieldName
argument_list|,
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|FLOAT
argument_list|)
operator|.
name|docValues
argument_list|(
name|docValues
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
operator|.
name|fieldType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
name|fieldType
operator|=
operator|new
name|NumberFieldMapper
operator|.
name|Builder
argument_list|(
name|fieldName
argument_list|,
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|DOUBLE
argument_list|)
operator|.
name|docValues
argument_list|(
name|docValues
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
operator|.
name|fieldType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
name|fieldType
operator|=
operator|new
name|NumberFieldMapper
operator|.
name|Builder
argument_list|(
name|fieldName
argument_list|,
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|LONG
argument_list|)
operator|.
name|docValues
argument_list|(
name|docValues
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
operator|.
name|fieldType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
condition|)
block|{
name|fieldType
operator|=
operator|new
name|NumberFieldMapper
operator|.
name|Builder
argument_list|(
name|fieldName
argument_list|,
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|INTEGER
argument_list|)
operator|.
name|docValues
argument_list|(
name|docValues
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
operator|.
name|fieldType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"short"
argument_list|)
condition|)
block|{
name|fieldType
operator|=
operator|new
name|NumberFieldMapper
operator|.
name|Builder
argument_list|(
name|fieldName
argument_list|,
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|SHORT
argument_list|)
operator|.
name|docValues
argument_list|(
name|docValues
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
operator|.
name|fieldType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"byte"
argument_list|)
condition|)
block|{
name|fieldType
operator|=
operator|new
name|NumberFieldMapper
operator|.
name|Builder
argument_list|(
name|fieldName
argument_list|,
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|BYTE
argument_list|)
operator|.
name|docValues
argument_list|(
name|docValues
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
operator|.
name|fieldType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"geo_point"
argument_list|)
condition|)
block|{
name|fieldType
operator|=
operator|new
name|GeoPointFieldMapper
operator|.
name|Builder
argument_list|(
name|fieldName
argument_list|)
operator|.
name|docValues
argument_list|(
name|docValues
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
operator|.
name|fieldType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"_parent"
argument_list|)
condition|)
block|{
name|fieldType
operator|=
operator|new
name|ParentFieldMapper
operator|.
name|Builder
argument_list|(
literal|"_type"
argument_list|)
operator|.
name|type
argument_list|(
name|fieldName
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
operator|.
name|fieldType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"binary"
argument_list|)
condition|)
block|{
name|fieldType
operator|=
operator|new
name|BinaryFieldMapper
operator|.
name|Builder
argument_list|(
name|fieldName
argument_list|)
operator|.
name|docValues
argument_list|(
name|docValues
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
operator|.
name|fieldType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|type
argument_list|)
throw|;
block|}
return|return
name|ifdService
operator|.
name|getForField
argument_list|(
name|fieldType
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|indexService
operator|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|mapperService
operator|=
name|indexService
operator|.
name|mapperService
argument_list|()
expr_stmt|;
name|indicesFieldDataCache
operator|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
operator|.
name|getIndicesFieldDataCache
argument_list|()
expr_stmt|;
name|ifdService
operator|=
name|indexService
operator|.
name|fieldData
argument_list|()
expr_stmt|;
comment|// LogByteSizeMP to preserve doc ID order
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
operator|new
name|RAMDirectory
argument_list|()
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
operator|new
name|LogByteSizeMergePolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|refreshReader
specifier|protected
specifier|final
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|refreshReader
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|readerContexts
operator|!=
literal|null
operator|&&
name|topLevelReader
operator|!=
literal|null
condition|)
block|{
name|topLevelReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|topLevelReader
operator|=
name|ElasticsearchDirectoryReader
operator|.
name|wrap
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|)
argument_list|,
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|readerContexts
operator|=
name|topLevelReader
operator|.
name|leaves
argument_list|()
expr_stmt|;
return|return
name|readerContexts
return|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|topLevelReader
operator|!=
literal|null
condition|)
block|{
name|topLevelReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createNested
specifier|protected
name|Nested
name|createNested
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|parentFilter
parameter_list|,
name|Query
name|childFilter
parameter_list|)
throws|throws
name|IOException
block|{
name|BitsetFilterCache
name|s
init|=
name|indexService
operator|.
name|cache
argument_list|()
operator|.
name|bitsetFilterCache
argument_list|()
decl_stmt|;
return|return
operator|new
name|Nested
argument_list|(
name|s
operator|.
name|getBitSetProducer
argument_list|(
name|parentFilter
argument_list|)
argument_list|,
name|childFilter
argument_list|)
return|;
block|}
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|refreshReader
argument_list|()
expr_stmt|;
name|IndexFieldData
name|fieldData
init|=
name|getForField
argument_list|(
literal|"non_existing_field"
argument_list|)
decl_stmt|;
name|int
name|max
init|=
name|randomInt
argument_list|(
literal|7
argument_list|)
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|readerContext
range|:
name|readerContexts
control|)
block|{
name|AtomicFieldData
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max
condition|;
name|i
operator|++
control|)
block|{
name|AtomicFieldData
name|current
init|=
name|fieldData
operator|.
name|load
argument_list|(
name|readerContext
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|current
operator|.
name|ramBytesUsed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|current
argument_list|,
name|not
argument_list|(
name|sameInstance
argument_list|(
name|previous
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|previous
operator|=
name|current
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

