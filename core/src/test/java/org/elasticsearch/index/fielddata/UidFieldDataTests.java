begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_class
DECL|class|UidFieldDataTests
specifier|public
class|class
name|UidFieldDataTests
extends|extends
name|ESTestCase
block|{
DECL|class|DummySortedDocValues
specifier|private
specifier|static
class|class
name|DummySortedDocValues
extends|extends
name|SortedDocValues
block|{
DECL|field|doc
specifier|private
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
DECL|method|ordValue
specifier|public
name|int
name|ordValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|BytesRef
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"%03d"
argument_list|,
name|ord
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
literal|100
return|;
block|}
annotation|@
name|Override
DECL|method|advanceExact
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|doc
operator|=
name|target
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|advance
argument_list|(
name|doc
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|target
operator|>=
name|getValueCount
argument_list|()
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
else|else
block|{
return|return
name|doc
operator|=
name|target
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|getValueCount
argument_list|()
return|;
block|}
block|}
DECL|class|DummyAtomicOrdinalsFieldData
specifier|private
specifier|static
class|class
name|DummyAtomicOrdinalsFieldData
implements|implements
name|AtomicOrdinalsFieldData
block|{
annotation|@
name|Override
DECL|method|getScriptValues
specifier|public
name|ScriptDocValues
argument_list|<
name|?
argument_list|>
name|getScriptValues
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getBytesValues
specifier|public
name|SortedBinaryDocValues
name|getBytesValues
parameter_list|()
block|{
return|return
name|FieldData
operator|.
name|toString
argument_list|(
name|getOrdinalsValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|getOrdinalsValues
specifier|public
name|SortedSetDocValues
name|getOrdinalsValues
parameter_list|()
block|{
return|return
name|DocValues
operator|.
name|singleton
argument_list|(
operator|new
name|DummySortedDocValues
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|testSortedSetValues
specifier|public
name|void
name|testSortedSetValues
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicOrdinalsFieldData
name|fd
init|=
operator|new
name|UidIndexFieldData
operator|.
name|UidAtomicFieldData
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"type#"
argument_list|)
argument_list|,
operator|new
name|DummyAtomicOrdinalsFieldData
argument_list|()
argument_list|)
decl_stmt|;
name|SortedSetDocValues
name|dv
init|=
name|fd
operator|.
name|getOrdinalsValues
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|dv
operator|.
name|advanceExact
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|dv
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
argument_list|,
name|dv
operator|.
name|nextOrd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"type#030"
argument_list|)
argument_list|,
name|dv
operator|.
name|lookupOrd
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|dv
operator|.
name|lookupTerm
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"type#030"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
operator|-
literal|31
argument_list|,
name|dv
operator|.
name|lookupTerm
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"type#0305"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testScriptValues
specifier|public
name|void
name|testScriptValues
parameter_list|()
throws|throws
name|IOException
block|{
name|AtomicOrdinalsFieldData
name|fd
init|=
operator|new
name|UidIndexFieldData
operator|.
name|UidAtomicFieldData
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"type#"
argument_list|)
argument_list|,
operator|new
name|DummyAtomicOrdinalsFieldData
argument_list|()
argument_list|)
decl_stmt|;
name|ScriptDocValues
argument_list|<
name|?
argument_list|>
name|values
init|=
name|fd
operator|.
name|getScriptValues
argument_list|()
decl_stmt|;
name|values
operator|.
name|setNextDocId
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"type#030"
argument_list|)
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

