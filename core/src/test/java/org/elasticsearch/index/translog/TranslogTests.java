begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|IndexSettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressFileSystems
argument_list|(
literal|"ExtrasFS"
argument_list|)
DECL|class|TranslogTests
specifier|public
class|class
name|TranslogTests
extends|extends
name|ESTestCase
block|{
DECL|field|shardId
specifier|protected
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|translog
specifier|protected
name|Translog
name|translog
decl_stmt|;
DECL|field|translogDir
specifier|protected
name|Path
name|translogDir
decl_stmt|;
annotation|@
name|Override
DECL|method|afterIfSuccessful
specifier|protected
name|void
name|afterIfSuccessful
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|afterIfSuccessful
argument_list|()
expr_stmt|;
if|if
condition|(
name|translog
operator|.
name|isOpen
argument_list|()
condition|)
block|{
if|if
condition|(
name|translog
operator|.
name|currentFileGeneration
argument_list|()
operator|>
literal|1
condition|)
block|{
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFileDeleted
argument_list|(
name|translog
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|rm
argument_list|(
name|translog
operator|.
name|location
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete all the locations
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// if a previous test failed we clean up things here
name|translogDir
operator|=
name|createTempDir
argument_list|()
expr_stmt|;
name|translog
operator|=
name|create
argument_list|(
name|translogDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|assertEquals
argument_list|(
literal|"there are still open views"
argument_list|,
literal|0
argument_list|,
name|translog
operator|.
name|getNumOpenViews
argument_list|()
argument_list|)
expr_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|create
specifier|protected
name|Translog
name|create
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Settings
name|build
init|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|TranslogConfig
operator|.
name|INDEX_TRANSLOG_FS_TYPE
argument_list|,
name|TranslogWriter
operator|.
name|Type
operator|.
name|SIMPLE
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TranslogConfig
name|translogConfig
init|=
operator|new
name|TranslogConfig
argument_list|(
name|shardId
argument_list|,
name|path
argument_list|,
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|,
name|build
argument_list|)
argument_list|,
name|Translog
operator|.
name|Durabilty
operator|.
name|REQUEST
argument_list|,
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
operator|new
name|Translog
argument_list|(
name|translogConfig
argument_list|)
return|;
block|}
DECL|method|addToTranslogAndList
specifier|protected
name|void
name|addToTranslogAndList
parameter_list|(
name|Translog
name|translog
parameter_list|,
name|ArrayList
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|list
parameter_list|,
name|Translog
operator|.
name|Operation
name|op
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
DECL|method|testIdParsingFromFile
specifier|public
name|void
name|testIdParsingFromFile
parameter_list|()
block|{
name|long
name|id
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
name|translogDir
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|TRANSLOG_FILE_PREFIX
operator|+
name|id
operator|+
literal|".tlog"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Translog
operator|.
name|parseIdFromFileName
argument_list|(
name|file
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|id
operator|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|file
operator|=
name|translogDir
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|TRANSLOG_FILE_PREFIX
operator|+
name|id
argument_list|)
expr_stmt|;
try|try
block|{
name|Translog
operator|.
name|parseIdFromFileName
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid pattern"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// all good
block|}
name|file
operator|=
name|translogDir
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|TRANSLOG_FILE_PREFIX
operator|+
name|id
operator|+
literal|".recovering"
argument_list|)
expr_stmt|;
try|try
block|{
name|Translog
operator|.
name|parseIdFromFileName
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid pattern"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// all good
block|}
name|file
operator|=
name|translogDir
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|TRANSLOG_FILE_PREFIX
operator|+
name|randomNonTranslogPatternString
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
operator|+
name|id
argument_list|)
expr_stmt|;
try|try
block|{
name|Translog
operator|.
name|parseIdFromFileName
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid pattern"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// all good
block|}
name|file
operator|=
name|translogDir
operator|.
name|resolve
argument_list|(
name|randomNonTranslogPatternString
argument_list|(
literal|1
argument_list|,
name|Translog
operator|.
name|TRANSLOG_FILE_PREFIX
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Translog
operator|.
name|parseIdFromFileName
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid pattern"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// all good
block|}
block|}
DECL|method|randomNonTranslogPatternString
specifier|private
name|String
name|randomNonTranslogPatternString
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|String
name|string
decl_stmt|;
name|boolean
name|validPathString
decl_stmt|;
do|do
block|{
name|validPathString
operator|=
literal|false
expr_stmt|;
name|string
operator|=
name|randomRealisticUnicodeOfCodepointLength
argument_list|(
name|randomIntBetween
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Path
name|resolved
init|=
name|translogDir
operator|.
name|resolve
argument_list|(
name|string
argument_list|)
decl_stmt|;
comment|// some strings (like '/' , '..') do not refer to a file, which we this method should return
name|validPathString
operator|=
name|resolved
operator|.
name|getFileName
argument_list|()
operator|!=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPathException
name|ex
parameter_list|)
block|{
comment|// some FS don't like our random file names -- let's just skip these random choices
block|}
block|}
do|while
condition|(
name|Translog
operator|.
name|PARSE_STRICT_ID_PATTERN
operator|.
name|matcher
argument_list|(
name|string
argument_list|)
operator|.
name|matches
argument_list|()
operator|||
name|validPathString
operator|==
literal|false
condition|)
do|;
return|return
name|string
return|;
block|}
DECL|method|testRead
specifier|public
name|void
name|testRead
parameter_list|()
throws|throws
name|IOException
block|{
name|Translog
operator|.
name|Location
name|loc1
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Location
name|loc2
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"2"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|read
argument_list|(
name|loc1
argument_list|)
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|read
argument_list|(
name|loc2
argument_list|)
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|read
argument_list|(
name|loc1
argument_list|)
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|read
argument_list|(
name|loc2
argument_list|)
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Location
name|loc3
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"2"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|read
argument_list|(
name|loc3
argument_list|)
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|3
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|read
argument_list|(
name|loc3
argument_list|)
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|3
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|read
argument_list|(
name|loc3
argument_list|)
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|3
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|translog
operator|.
name|read
argument_list|(
name|loc1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|translog
operator|.
name|read
argument_list|(
name|loc2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|translog
operator|.
name|read
argument_list|(
name|loc3
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|translog
operator|.
name|read
argument_list|(
operator|new
name|Translog
operator|.
name|Location
argument_list|(
name|translog
operator|.
name|currentFileGeneration
argument_list|()
operator|+
literal|1
argument_list|,
literal|17
argument_list|,
literal|35
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"generation is greater than the current"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testSimpleOperations
specifier|public
name|void
name|testSimpleOperations
parameter_list|()
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|size
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|addToTranslogAndList
argument_list|(
name|translog
argument_list|,
name|ops
argument_list|,
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|newSnapshot
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|equalsTo
argument_list|(
name|ops
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ops
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|addToTranslogAndList
argument_list|(
name|translog
argument_list|,
name|ops
argument_list|,
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|newSnapshot
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|equalsTo
argument_list|(
name|ops
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ops
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|newSnapshot
argument_list|()
expr_stmt|;
name|Translog
operator|.
name|Index
name|index
init|=
operator|(
name|Translog
operator|.
name|Index
operator|)
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|index
operator|!=
literal|null
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|source
argument_list|()
operator|.
name|toBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Delete
name|delete
init|=
operator|(
name|Translog
operator|.
name|Delete
operator|)
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|delete
operator|!=
literal|null
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|firstId
init|=
name|translog
operator|.
name|currentFileGeneration
argument_list|()
decl_stmt|;
name|translog
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|,
name|Matchers
operator|.
name|not
argument_list|(
name|equalTo
argument_list|(
name|firstId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|newSnapshot
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|equalsTo
argument_list|(
name|ops
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ops
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|newSnapshot
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|size
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|stats
specifier|protected
name|TranslogStats
name|stats
parameter_list|()
throws|throws
name|IOException
block|{
comment|// force flushing and updating of stats
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|TranslogStats
name|stats
init|=
name|translog
operator|.
name|stats
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|stats
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|StreamInput
name|in
init|=
name|StreamInput
operator|.
name|wrap
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|stats
operator|=
operator|new
name|TranslogStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|stats
return|;
block|}
DECL|method|testStats
specifier|public
name|void
name|testStats
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|long
name|firstOperationPosition
init|=
name|translog
operator|.
name|getFirstOperationPosition
argument_list|()
decl_stmt|;
name|TranslogStats
name|stats
init|=
name|stats
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|estimatedNumberOfOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|lastSize
init|=
name|stats
operator|.
name|getTranslogSizeInBytes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|int
operator|)
name|firstOperationPosition
argument_list|,
name|greaterThan
argument_list|(
name|CodecUtil
operator|.
name|headerLength
argument_list|(
name|TranslogWriter
operator|.
name|TRANSLOG_CODEC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lastSize
argument_list|,
name|equalTo
argument_list|(
name|firstOperationPosition
argument_list|)
argument_list|)
expr_stmt|;
name|TranslogStats
name|total
init|=
operator|new
name|TranslogStats
argument_list|()
decl_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|stats
argument_list|()
expr_stmt|;
name|total
operator|.
name|add
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|estimatedNumberOfOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTranslogSizeInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|lastSize
argument_list|)
argument_list|)
expr_stmt|;
name|lastSize
operator|=
name|stats
operator|.
name|getTranslogSizeInBytes
argument_list|()
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|stats
argument_list|()
expr_stmt|;
name|total
operator|.
name|add
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|estimatedNumberOfOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTranslogSizeInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|lastSize
argument_list|)
argument_list|)
expr_stmt|;
name|lastSize
operator|=
name|stats
operator|.
name|getTranslogSizeInBytes
argument_list|()
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
name|newUid
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|stats
operator|=
name|stats
argument_list|()
expr_stmt|;
name|total
operator|.
name|add
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|estimatedNumberOfOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTranslogSizeInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|lastSize
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|stats
operator|=
name|stats
argument_list|()
expr_stmt|;
name|total
operator|.
name|add
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|estimatedNumberOfOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTranslogSizeInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstOperationPosition
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|total
operator|.
name|estimatedNumberOfOperations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|431
argument_list|,
name|total
operator|.
name|getTranslogSizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|total
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|TranslogStats
name|copy
init|=
operator|new
name|TranslogStats
argument_list|()
decl_stmt|;
name|copy
operator|.
name|readFrom
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|copy
operator|.
name|estimatedNumberOfOperations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|431
argument_list|,
name|copy
operator|.
name|getTranslogSizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\"translog\"{\n"
operator|+
literal|"  \"operations\" : 6,\n"
operator|+
literal|"  \"size_in_bytes\" : 431\n"
operator|+
literal|"}"
argument_list|,
name|copy
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|TranslogStats
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must be positive"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|//all well
block|}
try|try
block|{
operator|new
name|TranslogStats
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must be positive"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|//all well
block|}
block|}
DECL|method|testSnapshot
specifier|public
name|void
name|testSnapshot
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|size
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|addToTranslogAndList
argument_list|(
name|translog
argument_list|,
name|ops
argument_list|,
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|newSnapshot
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|equalsTo
argument_list|(
name|ops
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|newSnapshot
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|equalsTo
argument_list|(
name|ops
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// snapshot while another is open
name|Translog
operator|.
name|Snapshot
name|snapshot1
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|snapshot1
argument_list|,
name|SnapshotMatchers
operator|.
name|size
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot1
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|snapshot1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSnapshotWithNewTranslog
specifier|public
name|void
name|testSnapshotWithNewTranslog
parameter_list|()
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|size
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|addToTranslogAndList
argument_list|(
name|translog
argument_list|,
name|ops
argument_list|,
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot1
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|addToTranslogAndList
argument_list|(
name|translog
argument_list|,
name|ops
argument_list|,
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"2"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|addToTranslogAndList
argument_list|(
name|translog
argument_list|,
name|ops
argument_list|,
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"3"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot2
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot2
argument_list|,
name|SnapshotMatchers
operator|.
name|equalsTo
argument_list|(
name|ops
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot2
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ops
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot1
argument_list|,
name|SnapshotMatchers
operator|.
name|equalsTo
argument_list|(
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot1
operator|.
name|close
argument_list|()
expr_stmt|;
name|snapshot2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSnapshotOnClosedTranslog
specifier|public
name|void
name|testSnapshotOnClosedTranslog
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|translogDir
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|getFilename
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"translog is closed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"translog-1.tlog is already closed can't increment"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDeleteOnSnapshotRelease
specifier|public
name|void
name|testDeleteOnSnapshotRelease
parameter_list|()
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|firstOps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|addToTranslogAndList
argument_list|(
name|translog
argument_list|,
name|firstOps
argument_list|,
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|firstSnapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|firstSnapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|secOps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|addToTranslogAndList
argument_list|(
name|translog
argument_list|,
name|secOps
argument_list|,
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"2"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|firstSnapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|secondSnapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"3"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|secondSnapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|equalsTo
argument_list|(
name|secOps
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|secondSnapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|firstSnapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFileDeleted
argument_list|(
name|translog
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|secondSnapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// it's the current nothing should be deleted
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// it's the current nothing should be deleted
name|assertFileDeleted
argument_list|(
name|translog
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFileIsPresent
specifier|public
name|void
name|assertFileIsPresent
parameter_list|(
name|Translog
name|translog
parameter_list|,
name|long
name|id
parameter_list|)
block|{
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|translogDir
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|getFilename
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
name|fail
argument_list|(
name|Translog
operator|.
name|getFilename
argument_list|(
name|id
argument_list|)
operator|+
literal|" is not present in any location: "
operator|+
name|translog
operator|.
name|location
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFileDeleted
specifier|public
name|void
name|assertFileDeleted
parameter_list|(
name|Translog
name|translog
parameter_list|,
name|long
name|id
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"translog ["
operator|+
name|id
operator|+
literal|"] still exists"
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|translog
operator|.
name|location
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|getFilename
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|LocationOperation
specifier|static
class|class
name|LocationOperation
block|{
DECL|field|operation
specifier|final
name|Translog
operator|.
name|Operation
name|operation
decl_stmt|;
DECL|field|location
specifier|final
name|Translog
operator|.
name|Location
name|location
decl_stmt|;
DECL|method|LocationOperation
specifier|public
name|LocationOperation
parameter_list|(
name|Translog
operator|.
name|Operation
name|operation
parameter_list|,
name|Translog
operator|.
name|Location
name|location
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
block|}
DECL|method|testConcurrentWritesWithVaryingSize
specifier|public
name|void
name|testConcurrentWritesWithVaryingSize
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|int
name|opsPerThread
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|int
name|threadCount
init|=
literal|2
operator|+
name|randomInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"testing with [{}] threads, each doing [{}] ops"
argument_list|,
name|threadCount
argument_list|,
name|opsPerThread
argument_list|)
expr_stmt|;
specifier|final
name|BlockingQueue
argument_list|<
name|LocationOperation
argument_list|>
name|writtenOperations
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
name|threadCount
operator|*
name|opsPerThread
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|threadCount
index|]
decl_stmt|;
specifier|final
name|Throwable
index|[]
name|threadExceptions
init|=
operator|new
name|Throwable
index|[
name|threadCount
index|]
decl_stmt|;
specifier|final
name|CountDownLatch
name|downLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|threadId
init|=
name|i
decl_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|downLatch
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|opCount
init|=
literal|0
init|;
name|opCount
operator|<
name|opsPerThread
condition|;
name|opCount
operator|++
control|)
block|{
name|Translog
operator|.
name|Operation
name|op
decl_stmt|;
switch|switch
condition|(
name|randomFrom
argument_list|(
name|Translog
operator|.
name|Operation
operator|.
name|Type
operator|.
name|values
argument_list|()
argument_list|)
condition|)
block|{
case|case
name|CREATE
case|:
case|case
name|INDEX
case|:
name|op
operator|=
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
name|threadId
operator|+
literal|"_"
operator|+
name|opCount
argument_list|,
name|randomUnicodeOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|20
operator|*
literal|1024
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|op
operator|=
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
name|threadId
operator|+
literal|"_"
operator|+
name|opCount
argument_list|)
argument_list|,
literal|1
operator|+
name|randomInt
argument_list|(
literal|100000
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|VersionType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"not supported op type"
argument_list|)
throw|;
block|}
name|Translog
operator|.
name|Location
name|loc
init|=
name|translog
operator|.
name|add
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|writtenOperations
operator|.
name|add
argument_list|(
operator|new
name|LocationOperation
argument_list|(
name|op
argument_list|,
name|loc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|threadExceptions
index|[
name|threadId
index|]
operator|=
name|t
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|downLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|threadExceptions
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
throw|throw
name|threadExceptions
index|[
name|i
index|]
throw|;
block|}
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|(
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|LocationOperation
name|locationOperation
range|:
name|writtenOperations
control|)
block|{
name|Translog
operator|.
name|Operation
name|op
init|=
name|translog
operator|.
name|read
argument_list|(
name|locationOperation
operator|.
name|location
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Operation
name|expectedOp
init|=
name|locationOperation
operator|.
name|operation
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedOp
operator|.
name|opType
argument_list|()
argument_list|,
name|op
operator|.
name|opType
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|op
operator|.
name|opType
argument_list|()
condition|)
block|{
case|case
name|INDEX
case|:
name|Translog
operator|.
name|Index
name|indexOp
init|=
operator|(
name|Translog
operator|.
name|Index
operator|)
name|op
decl_stmt|;
name|Translog
operator|.
name|Index
name|expIndexOp
init|=
operator|(
name|Translog
operator|.
name|Index
operator|)
name|expectedOp
decl_stmt|;
name|assertEquals
argument_list|(
name|expIndexOp
operator|.
name|id
argument_list|()
argument_list|,
name|indexOp
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expIndexOp
operator|.
name|routing
argument_list|()
argument_list|,
name|indexOp
operator|.
name|routing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expIndexOp
operator|.
name|type
argument_list|()
argument_list|,
name|indexOp
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expIndexOp
operator|.
name|source
argument_list|()
argument_list|,
name|indexOp
operator|.
name|source
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expIndexOp
operator|.
name|version
argument_list|()
argument_list|,
name|indexOp
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expIndexOp
operator|.
name|versionType
argument_list|()
argument_list|,
name|indexOp
operator|.
name|versionType
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|Translog
operator|.
name|Delete
name|delOp
init|=
operator|(
name|Translog
operator|.
name|Delete
operator|)
name|op
decl_stmt|;
name|Translog
operator|.
name|Delete
name|expDelOp
init|=
operator|(
name|Translog
operator|.
name|Delete
operator|)
name|expectedOp
decl_stmt|;
name|assertEquals
argument_list|(
name|expDelOp
operator|.
name|uid
argument_list|()
argument_list|,
name|delOp
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expDelOp
operator|.
name|version
argument_list|()
argument_list|,
name|delOp
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expDelOp
operator|.
name|versionType
argument_list|()
argument_list|,
name|delOp
operator|.
name|versionType
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"unsupported opType"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|testTranslogChecksums
specifier|public
name|void
name|testTranslogChecksums
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|String
name|ascii
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|ascii
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|corruptTranslogs
argument_list|(
name|translogDir
argument_list|)
expr_stmt|;
name|AtomicInteger
name|corruptionsCaught
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Translog
operator|.
name|Location
name|location
range|:
name|locations
control|)
block|{
try|try
block|{
name|translog
operator|.
name|read
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TranslogCorruptedException
name|e
parameter_list|)
block|{
name|corruptionsCaught
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
literal|"at least one corruption was caused and caught"
argument_list|,
name|corruptionsCaught
operator|.
name|get
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTruncatedTranslogs
specifier|public
name|void
name|testTruncatedTranslogs
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|String
name|ascii
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|ascii
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|truncateTranslogs
argument_list|(
name|translogDir
argument_list|)
expr_stmt|;
name|AtomicInteger
name|truncations
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Translog
operator|.
name|Location
name|location
range|:
name|locations
control|)
block|{
try|try
block|{
name|translog
operator|.
name|read
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|EOFException
condition|)
block|{
name|truncations
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
name|assertThat
argument_list|(
literal|"at least one truncation was caused and caught"
argument_list|,
name|truncations
operator|.
name|get
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Randomly truncate some bytes in the translog files      */
DECL|method|truncateTranslogs
specifier|private
name|void
name|truncateTranslogs
parameter_list|(
name|Path
name|directory
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
index|[]
name|files
init|=
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|directory
argument_list|,
literal|"translog-*"
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|file
range|:
name|files
control|)
block|{
try|try
init|(
name|FileChannel
name|f
init|=
name|FileChannel
operator|.
name|open
argument_list|(
name|file
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
init|)
block|{
name|long
name|prevSize
init|=
name|f
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|newSize
init|=
name|prevSize
operator|-
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|prevSize
operator|/
literal|2
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> truncating {}, prev: {}, now: {}"
argument_list|,
name|file
argument_list|,
name|prevSize
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
name|f
operator|.
name|truncate
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Randomly overwrite some bytes in the translog files      */
DECL|method|corruptTranslogs
specifier|private
name|void
name|corruptTranslogs
parameter_list|(
name|Path
name|directory
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
index|[]
name|files
init|=
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|directory
argument_list|,
literal|"translog-*"
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|file
range|:
name|files
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> corrupting {}..."
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|FileChannel
name|f
init|=
name|FileChannel
operator|.
name|open
argument_list|(
name|file
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|int
name|corruptions
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|50
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|corruptions
condition|;
name|i
operator|++
control|)
block|{
comment|// note: with the current logic, this will sometimes be a no-op
name|long
name|pos
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|f
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ByteBuffer
name|junk
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
name|randomByte
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|f
operator|.
name|write
argument_list|(
name|junk
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|newUid
specifier|private
name|Term
name|newUid
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|testVerifyTranslogIsNotDeleted
specifier|public
name|void
name|testVerifyTranslogIsNotDeleted
parameter_list|()
throws|throws
name|IOException
block|{
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|size
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/** Tests that concurrent readers and writes maintain view and snapshot semantics */
DECL|method|testConcurrentWriteViewsAndSnapshot
specifier|public
name|void
name|testConcurrentWriteViewsAndSnapshot
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|Thread
index|[]
name|writers
init|=
operator|new
name|Thread
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
index|]
decl_stmt|;
specifier|final
name|Thread
index|[]
name|readers
init|=
operator|new
name|Thread
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
index|]
decl_stmt|;
specifier|final
name|int
name|flushEveryOps
init|=
name|randomIntBetween
argument_list|(
literal|5
argument_list|,
literal|100
argument_list|)
decl_stmt|;
comment|// used to notify main thread that so many operations have been written so it can simulate a flush
specifier|final
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|writtenOpsLatch
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|idGenerator
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|writers
operator|.
name|length
operator|+
name|readers
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// a map of all written ops and their returned location.
specifier|final
name|Map
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|,
name|Translog
operator|.
name|Location
argument_list|>
name|writtenOps
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
comment|// a signal for all threads to stop
specifier|final
name|AtomicBoolean
name|run
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// any errors on threads
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|errors
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using [{}] readers. [{}] writers. flushing every ~[{}] ops."
argument_list|,
name|readers
operator|.
name|length
argument_list|,
name|writers
operator|.
name|length
argument_list|,
name|flushEveryOps
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|threadId
init|=
literal|"writer_"
operator|+
name|i
decl_stmt|;
name|writers
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doRun
parameter_list|()
throws|throws
name|BrokenBarrierException
throws|,
name|InterruptedException
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|run
operator|.
name|get
argument_list|()
condition|)
block|{
name|long
name|id
init|=
name|idGenerator
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
specifier|final
name|Translog
operator|.
name|Operation
name|op
decl_stmt|;
switch|switch
condition|(
name|Translog
operator|.
name|Operation
operator|.
name|Type
operator|.
name|values
argument_list|()
index|[
operator|(
call|(
name|int
call|)
argument_list|(
name|id
operator|%
name|Translog
operator|.
name|Operation
operator|.
name|Type
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
operator|)
index|]
condition|)
block|{
case|case
name|CREATE
case|:
case|case
name|INDEX
case|:
name|op
operator|=
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"type"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|id
block|}
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|op
operator|=
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
name|newUid
argument_list|(
literal|""
operator|+
name|id
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"unknown type"
argument_list|)
throw|;
block|}
name|Translog
operator|.
name|Location
name|location
init|=
name|translog
operator|.
name|add
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Location
name|existing
init|=
name|writtenOps
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"duplicate op ["
operator|+
name|op
operator|+
literal|"], old entry at "
operator|+
name|location
argument_list|)
expr_stmt|;
block|}
name|writtenOpsLatch
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"--> [{}] done. wrote [{}] ops."
argument_list|,
name|threadId
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"--> writer [{}] had an error"
argument_list|,
name|t
argument_list|,
name|threadId
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|threadId
argument_list|)
expr_stmt|;
name|writers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|threadId
init|=
literal|"reader_"
operator|+
name|i
decl_stmt|;
name|readers
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
name|Translog
operator|.
name|View
name|view
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|writtenOpsAtView
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"--> reader [{}] had an error"
argument_list|,
name|t
argument_list|,
name|threadId
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|closeView
argument_list|()
expr_stmt|;
block|}
name|void
name|closeView
parameter_list|()
block|{
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|newView
parameter_list|()
block|{
name|closeView
argument_list|()
expr_stmt|;
name|view
operator|=
name|translog
operator|.
name|newView
argument_list|()
expr_stmt|;
comment|// captures the currently written ops so we know what to expect from the view
name|writtenOpsAtView
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|writtenOps
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> [{}] opened view from [{}]"
argument_list|,
name|threadId
argument_list|,
name|view
operator|.
name|minTranslogGeneration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|int
name|iter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|run
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|iter
operator|++
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|newView
argument_list|()
expr_stmt|;
block|}
comment|// captures al views that are written since the view was created (with a small caveat see bellow)
comment|// these are what we expect the snapshot to return (and potentially some more).
name|Set
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|expectedOps
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|writtenOps
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|expectedOps
operator|.
name|removeAll
argument_list|(
name|writtenOpsAtView
argument_list|)
expr_stmt|;
try|try
init|(
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|view
operator|.
name|snapshot
argument_list|()
init|)
block|{
name|Translog
operator|.
name|Operation
name|op
decl_stmt|;
while|while
condition|(
operator|(
name|op
operator|=
name|snapshot
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|expectedOps
operator|.
name|remove
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expectedOps
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|StringBuilder
name|missed
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"missed "
argument_list|)
operator|.
name|append
argument_list|(
name|expectedOps
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" operations"
argument_list|)
decl_stmt|;
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Translog
operator|.
name|Operation
name|op
range|:
name|expectedOps
control|)
block|{
specifier|final
name|Translog
operator|.
name|Location
name|loc
init|=
name|writtenOps
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|.
name|generation
operator|<
name|view
operator|.
name|minTranslogGeneration
argument_list|()
condition|)
block|{
comment|// writtenOps is only updated after the op was written to the translog. This mean
comment|// that ops written to the translog before the view was taken (and will be missing from the view)
comment|// may yet be available in writtenOpsAtView, meaning we will erroneously expect them
continue|continue;
block|}
name|failed
operator|=
literal|true
expr_stmt|;
name|missed
operator|.
name|append
argument_list|(
literal|"\n --> ["
argument_list|)
operator|.
name|append
argument_list|(
name|op
argument_list|)
operator|.
name|append
argument_list|(
literal|"] written at "
argument_list|)
operator|.
name|append
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failed
condition|)
block|{
name|fail
argument_list|(
name|missed
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// slow down things a bit and spread out testing..
name|writtenOpsLatch
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|(
literal|200
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
name|closeView
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> [{}] done. tested [{}] snapshots"
argument_list|,
name|threadId
argument_list|,
name|iter
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|threadId
argument_list|)
expr_stmt|;
name|readers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|iterations
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|200
argument_list|)
init|;
name|iterations
operator|>
literal|0
operator|&&
name|errors
operator|.
name|isEmpty
argument_list|()
condition|;
name|iterations
operator|--
control|)
block|{
name|writtenOpsLatch
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
name|flushEveryOps
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|writtenOpsLatch
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|(
literal|200
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
break|break;
block|}
block|}
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|run
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> waiting for threads to stop"
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|writers
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|readers
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Throwable
name|e
init|=
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Throwable
name|suppress
range|:
name|errors
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
control|)
block|{
name|e
operator|.
name|addSuppressed
argument_list|(
name|suppress
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> test done. total ops written [{}]"
argument_list|,
name|writtenOps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSyncUpTo
specifier|public
name|void
name|testSyncUpTo
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
specifier|final
name|Translog
operator|.
name|Location
name|location
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
operator|++
name|count
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
literal|"at least one operation pending"
argument_list|,
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"this operation has not been synced"
argument_list|,
name|translog
operator|.
name|ensureSynced
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"the last call to ensureSycned synced all previous ops"
argument_list|,
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
comment|// we are the last location so everything should be synced
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
operator|++
name|count
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"one pending operation"
argument_list|,
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"this op has been synced before"
argument_list|,
name|translog
operator|.
name|ensureSynced
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
comment|// not syncing now
name|assertTrue
argument_list|(
literal|"we only synced a previous operation yet"
argument_list|,
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"location is from a previous translog - already synced"
argument_list|,
name|translog
operator|.
name|ensureSynced
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
comment|// not syncing now
name|assertFalse
argument_list|(
literal|"no sync needed since no operations in current translog"
argument_list|,
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"translog has been synced already"
argument_list|,
name|translog
operator|.
name|ensureSynced
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testLocationComparison
specifier|public
name|void
name|testLocationComparison
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
operator|++
name|count
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
operator|&&
name|translogOperations
operator|>
name|op
operator|+
literal|1
condition|)
block|{
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|locations
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Location
name|max
init|=
name|locations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Translog
operator|.
name|Location
name|location
range|:
name|locations
control|)
block|{
name|max
operator|=
name|max
argument_list|(
name|max
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|max
operator|.
name|generation
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Translog
operator|.
name|Operation
name|read
init|=
name|translog
operator|.
name|read
argument_list|(
name|max
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|read
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|toUtf8
argument_list|()
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|max
specifier|public
specifier|static
name|Translog
operator|.
name|Location
name|max
parameter_list|(
name|Translog
operator|.
name|Location
name|a
parameter_list|,
name|Translog
operator|.
name|Location
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
name|a
return|;
block|}
return|return
name|b
return|;
block|}
DECL|method|testBasicCheckpoint
specifier|public
name|void
name|testBasicCheckpoint
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|lastSynced
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|op
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|lastSynced
operator|=
name|op
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|translogOperations
argument_list|,
name|translog
operator|.
name|totalOperations
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Translog
operator|.
name|Location
name|lastLocation
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|translogOperations
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|translogOperations
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Checkpoint
name|checkpoint
init|=
name|Checkpoint
operator|.
name|read
argument_list|(
name|translog
operator|.
name|location
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|CHECKPOINT_FILE_NAME
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|ImmutableTranslogReader
name|reader
init|=
name|translog
operator|.
name|openReader
argument_list|(
name|translog
operator|.
name|location
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|getFilename
argument_list|(
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|checkpoint
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|lastSynced
operator|+
literal|1
argument_list|,
name|reader
operator|.
name|totalOperations
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|Translog
operator|.
name|Location
name|location
init|=
name|locations
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|<=
name|lastSynced
condition|)
block|{
specifier|final
name|Translog
operator|.
name|Operation
name|read
init|=
name|reader
operator|.
name|read
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|op
argument_list|)
argument_list|,
name|read
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|reader
operator|.
name|read
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"read past checkpoint"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|ex
parameter_list|)
block|{                      }
block|}
block|}
try|try
block|{
name|reader
operator|.
name|read
argument_list|(
name|lastLocation
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"read past checkpoint"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|ex
parameter_list|)
block|{             }
block|}
name|assertEquals
argument_list|(
name|translogOperations
operator|+
literal|1
argument_list|,
name|translog
operator|.
name|totalOperations
argument_list|()
argument_list|)
expr_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testTranslogWriter
specifier|public
name|void
name|testTranslogWriter
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TranslogWriter
name|writer
init|=
name|translog
operator|.
name|createWriter
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numOps
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|ByteArrayDataOutput
name|out
init|=
operator|new
name|ByteArrayDataOutput
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOps
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|reset
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|writer
operator|.
name|add
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|sync
argument_list|()
expr_stmt|;
specifier|final
name|TranslogReader
name|reader
init|=
name|randomBoolean
argument_list|()
condition|?
name|writer
else|:
name|translog
operator|.
name|openReader
argument_list|(
name|writer
operator|.
name|path
argument_list|()
argument_list|,
name|Checkpoint
operator|.
name|read
argument_list|(
name|translog
operator|.
name|location
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|CHECKPOINT_FILE_NAME
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOps
condition|;
name|i
operator|++
control|)
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|reader
operator|.
name|readBytes
argument_list|(
name|buffer
argument_list|,
name|reader
operator|.
name|getFirstOperationOffset
argument_list|()
operator|+
literal|4
operator|*
name|i
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
specifier|final
name|int
name|value
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|reset
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|2048
argument_list|)
expr_stmt|;
name|writer
operator|.
name|add
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|reader
operator|instanceof
name|ImmutableTranslogReader
condition|)
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
decl_stmt|;
try|try
block|{
name|reader
operator|.
name|readBytes
argument_list|(
name|buffer
argument_list|,
name|reader
operator|.
name|getFirstOperationOffset
argument_list|()
operator|+
literal|4
operator|*
name|numOps
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"read past EOF?"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
else|else
block|{
comment|// live reader!
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|long
name|pos
init|=
name|reader
operator|.
name|getFirstOperationOffset
argument_list|()
operator|+
literal|4
operator|*
name|numOps
decl_stmt|;
name|reader
operator|.
name|readBytes
argument_list|(
name|buffer
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
specifier|final
name|int
name|value
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|writer
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasicRecovery
specifier|public
name|void
name|testBasicRecovery
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|TranslogGeneration
name|translogGeneration
init|=
literal|null
decl_stmt|;
name|int
name|minUncommittedOp
init|=
operator|-
literal|1
decl_stmt|;
specifier|final
name|boolean
name|commitOften
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|op
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|commit
init|=
name|commitOften
condition|?
name|frequently
argument_list|()
else|:
name|rarely
argument_list|()
decl_stmt|;
if|if
condition|(
name|commit
operator|&&
name|op
operator|<
name|translogOperations
operator|-
literal|1
condition|)
block|{
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|minUncommittedOp
operator|=
name|op
operator|+
literal|1
expr_stmt|;
name|translogGeneration
operator|=
name|translog
operator|.
name|getGeneration
argument_list|()
expr_stmt|;
block|}
block|}
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|TranslogConfig
name|config
init|=
name|translog
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
name|config
operator|.
name|setTranslogGeneration
argument_list|(
name|translogGeneration
argument_list|)
expr_stmt|;
name|translog
operator|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
name|translogGeneration
operator|==
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|translog
operator|.
name|stats
argument_list|()
operator|.
name|estimatedNumberOfOperations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
init|)
block|{
name|assertNull
argument_list|(
name|snapshot
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"lastCommitted must be 1 less than current"
argument_list|,
name|translogGeneration
operator|.
name|translogFileGeneration
operator|+
literal|1
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|i
init|=
name|minUncommittedOp
init|;
name|i
operator|<
name|translogOperations
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"expected operation"
operator|+
name|i
operator|+
literal|" to be in the previous translog but wasn't"
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
operator|-
literal|1
argument_list|,
name|locations
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|generation
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"operation "
operator|+
name|i
operator|+
literal|" must be non-null"
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|next
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|toUtf8
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testRecoveryUncommitted
specifier|public
name|void
name|testRecoveryUncommitted
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|int
name|prepareOp
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|translogOperations
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|TranslogGeneration
name|translogGeneration
init|=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|sync
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|op
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|==
name|prepareOp
condition|)
block|{
name|translogGeneration
operator|=
name|translog
operator|.
name|getGeneration
argument_list|()
expr_stmt|;
name|translog
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected this to be the first commit"
argument_list|,
literal|1l
argument_list|,
name|translogGeneration
operator|.
name|translogFileGeneration
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|translogGeneration
operator|.
name|translogUUID
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sync
condition|)
block|{
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
comment|// we intentionally don't close the tlog that is in the prepareCommit stage since we try to recovery the uncommitted
comment|// translog here as well.
name|TranslogConfig
name|config
init|=
name|translog
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setTranslogGeneration
argument_list|(
name|translogGeneration
argument_list|)
expr_stmt|;
try|try
init|(
name|Translog
name|translog
init|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|translogGeneration
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lastCommitted must be 2 less than current - we never finished the commit"
argument_list|,
name|translogGeneration
operator|.
name|translogFileGeneration
operator|+
literal|2
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
init|)
block|{
name|int
name|upTo
init|=
name|sync
condition|?
name|translogOperations
else|:
name|prepareOp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|upTo
condition|;
name|i
operator|++
control|)
block|{
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"operation "
operator|+
name|i
operator|+
literal|" must be non-null synced: "
operator|+
name|sync
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"payload missmatch, synced: "
operator|+
name|sync
argument_list|,
name|i
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|next
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|toUtf8
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// recover twice
try|try
init|(
name|Translog
name|translog
init|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|translogGeneration
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lastCommitted must be 3 less than current - we never finished the commit and run recovery twice"
argument_list|,
name|translogGeneration
operator|.
name|translogFileGeneration
operator|+
literal|3
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
init|)
block|{
name|int
name|upTo
init|=
name|sync
condition|?
name|translogOperations
else|:
name|prepareOp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|upTo
condition|;
name|i
operator|++
control|)
block|{
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"operation "
operator|+
name|i
operator|+
literal|" must be non-null synced: "
operator|+
name|sync
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"payload missmatch, synced: "
operator|+
name|sync
argument_list|,
name|i
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|next
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|toUtf8
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|testSnapshotFromStreamInput
specifier|public
name|void
name|testSnapshotFromStreamInput
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|Translog
operator|.
name|Index
name|test
init|=
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|op
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
name|Translog
operator|.
name|writeOperations
argument_list|(
name|out
argument_list|,
name|ops
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|readOperations
init|=
name|Translog
operator|.
name|readOperations
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ops
operator|.
name|size
argument_list|()
argument_list|,
name|readOperations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ops
argument_list|,
name|readOperations
argument_list|)
expr_stmt|;
block|}
DECL|method|testLocationHashCodeEquals
specifier|public
name|void
name|testLocationHashCodeEquals
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
try|try
init|(
name|Translog
name|translog2
init|=
name|create
argument_list|(
name|createTempDir
argument_list|()
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|op
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|locations2
operator|.
name|add
argument_list|(
name|translog2
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|op
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|iters
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|Translog
operator|.
name|Location
name|location
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|locations
argument_list|)
decl_stmt|;
for|for
control|(
name|Translog
operator|.
name|Location
name|loc
range|:
name|locations
control|)
block|{
if|if
condition|(
name|loc
operator|==
name|location
condition|)
block|{
name|assertTrue
argument_list|(
name|loc
operator|.
name|equals
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|loc
operator|.
name|hashCode
argument_list|()
argument_list|,
name|location
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|loc
operator|.
name|equals
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|translogOperations
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|locations
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|equals
argument_list|(
name|locations2
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|locations
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|locations2
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testOpenForeignTranslog
specifier|public
name|void
name|testOpenForeignTranslog
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
name|firstUncommitted
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|op
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|firstUncommitted
operator|=
name|op
operator|+
literal|1
expr_stmt|;
block|}
block|}
name|TranslogConfig
name|config
init|=
name|translog
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|Translog
operator|.
name|TranslogGeneration
name|translogGeneration
init|=
name|translog
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
name|config
operator|.
name|setTranslogGeneration
argument_list|(
operator|new
name|Translog
operator|.
name|TranslogGeneration
argument_list|(
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
name|translogGeneration
operator|.
name|translogUUID
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|translogGeneration
operator|.
name|translogFileGeneration
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|Translog
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"translog doesn't belong to this UUID"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TranslogCorruptedException
name|ex
parameter_list|)
block|{          }
name|config
operator|.
name|setTranslogGeneration
argument_list|(
name|translogGeneration
argument_list|)
expr_stmt|;
name|this
operator|.
name|translog
operator|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|)
expr_stmt|;
try|try
init|(
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|this
operator|.
name|translog
operator|.
name|newSnapshot
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|i
init|=
name|firstUncommitted
init|;
name|i
operator|<
name|translogOperations
condition|;
name|i
operator|++
control|)
block|{
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|next
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|toUtf8
argument_list|()
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|snapshot
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

