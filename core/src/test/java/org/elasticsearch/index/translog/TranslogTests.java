begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|mockfile
operator|.
name|FilterFileChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockDirectoryWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LineFileDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ReleasableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
operator|.
name|Operation
operator|.
name|Origin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParsedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|SeqNoFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|seqno
operator|.
name|SequenceNumbersService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|IndexSettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasToString
import|;
end_import

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressFileSystems
argument_list|(
literal|"ExtrasFS"
argument_list|)
DECL|class|TranslogTests
specifier|public
class|class
name|TranslogTests
extends|extends
name|ESTestCase
block|{
DECL|field|shardId
specifier|protected
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|translog
specifier|protected
name|Translog
name|translog
decl_stmt|;
DECL|field|globalCheckpoint
specifier|private
name|AtomicLong
name|globalCheckpoint
decl_stmt|;
DECL|field|translogDir
specifier|protected
name|Path
name|translogDir
decl_stmt|;
annotation|@
name|Override
DECL|method|afterIfSuccessful
specifier|protected
name|void
name|afterIfSuccessful
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|afterIfSuccessful
argument_list|()
expr_stmt|;
if|if
condition|(
name|translog
operator|.
name|isOpen
argument_list|()
condition|)
block|{
if|if
condition|(
name|translog
operator|.
name|currentFileGeneration
argument_list|()
operator|>
literal|1
condition|)
block|{
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFileDeleted
argument_list|(
name|translog
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|rm
argument_list|(
name|translog
operator|.
name|location
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete all the locations
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// if a previous test failed we clean up things here
name|translogDir
operator|=
name|createTempDir
argument_list|()
expr_stmt|;
name|translog
operator|=
name|create
argument_list|(
name|translogDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|assertEquals
argument_list|(
literal|"there are still open views"
argument_list|,
literal|0
argument_list|,
name|translog
operator|.
name|getNumOpenViews
argument_list|()
argument_list|)
expr_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|create
specifier|private
name|Translog
name|create
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|globalCheckpoint
operator|=
operator|new
name|AtomicLong
argument_list|(
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
expr_stmt|;
return|return
operator|new
name|Translog
argument_list|(
name|getTranslogConfig
argument_list|(
name|path
argument_list|)
argument_list|,
literal|null
argument_list|,
parameter_list|()
lambda|->
name|globalCheckpoint
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getTranslogConfig
specifier|private
name|TranslogConfig
name|getTranslogConfig
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
block|{
specifier|final
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|getTranslogConfig
argument_list|(
name|path
argument_list|,
name|settings
argument_list|)
return|;
block|}
DECL|method|getTranslogConfig
specifier|private
name|TranslogConfig
name|getTranslogConfig
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|Settings
name|settings
parameter_list|)
block|{
specifier|final
name|ByteSizeValue
name|bufferSize
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|bufferSize
operator|=
name|TranslogConfig
operator|.
name|DEFAULT_BUFFER_SIZE
expr_stmt|;
block|}
else|else
block|{
name|bufferSize
operator|=
operator|new
name|ByteSizeValue
argument_list|(
literal|10
operator|+
name|randomInt
argument_list|(
literal|128
operator|*
literal|1024
argument_list|)
argument_list|,
name|ByteSizeUnit
operator|.
name|BYTES
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexSettings
name|indexSettings
init|=
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|,
name|settings
argument_list|)
decl_stmt|;
return|return
operator|new
name|TranslogConfig
argument_list|(
name|shardId
argument_list|,
name|path
argument_list|,
name|indexSettings
argument_list|,
name|NON_RECYCLING_INSTANCE
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
DECL|method|addToTranslogAndList
specifier|protected
name|void
name|addToTranslogAndList
parameter_list|(
name|Translog
name|translog
parameter_list|,
name|ArrayList
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|list
parameter_list|,
name|Translog
operator|.
name|Operation
name|op
parameter_list|)
throws|throws
name|IOException
block|{
name|list
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
DECL|method|testIdParsingFromFile
specifier|public
name|void
name|testIdParsingFromFile
parameter_list|()
block|{
name|long
name|id
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
name|translogDir
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|TRANSLOG_FILE_PREFIX
operator|+
name|id
operator|+
literal|".tlog"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Translog
operator|.
name|parseIdFromFileName
argument_list|(
name|file
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|id
operator|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|file
operator|=
name|translogDir
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|TRANSLOG_FILE_PREFIX
operator|+
name|id
argument_list|)
expr_stmt|;
try|try
block|{
name|Translog
operator|.
name|parseIdFromFileName
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid pattern"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// all good
block|}
name|file
operator|=
name|translogDir
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|TRANSLOG_FILE_PREFIX
operator|+
name|id
operator|+
literal|".recovering"
argument_list|)
expr_stmt|;
try|try
block|{
name|Translog
operator|.
name|parseIdFromFileName
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid pattern"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// all good
block|}
name|file
operator|=
name|translogDir
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|TRANSLOG_FILE_PREFIX
operator|+
name|randomNonTranslogPatternString
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
operator|+
name|id
argument_list|)
expr_stmt|;
try|try
block|{
name|Translog
operator|.
name|parseIdFromFileName
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid pattern"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// all good
block|}
name|file
operator|=
name|translogDir
operator|.
name|resolve
argument_list|(
name|randomNonTranslogPatternString
argument_list|(
literal|1
argument_list|,
name|Translog
operator|.
name|TRANSLOG_FILE_PREFIX
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Translog
operator|.
name|parseIdFromFileName
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid pattern"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// all good
block|}
block|}
DECL|method|randomNonTranslogPatternString
specifier|private
name|String
name|randomNonTranslogPatternString
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|String
name|string
decl_stmt|;
name|boolean
name|validPathString
decl_stmt|;
do|do
block|{
name|validPathString
operator|=
literal|false
expr_stmt|;
name|string
operator|=
name|randomRealisticUnicodeOfCodepointLength
argument_list|(
name|randomIntBetween
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Path
name|resolved
init|=
name|translogDir
operator|.
name|resolve
argument_list|(
name|string
argument_list|)
decl_stmt|;
comment|// some strings (like '/' , '..') do not refer to a file, which we this method should return
name|validPathString
operator|=
name|resolved
operator|.
name|getFileName
argument_list|()
operator|!=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPathException
name|ex
parameter_list|)
block|{
comment|// some FS don't like our random file names -- let's just skip these random choices
block|}
block|}
do|while
condition|(
name|Translog
operator|.
name|PARSE_STRICT_ID_PATTERN
operator|.
name|matcher
argument_list|(
name|string
argument_list|)
operator|.
name|matches
argument_list|()
operator|||
name|validPathString
operator|==
literal|false
condition|)
do|;
return|return
name|string
return|;
block|}
DECL|method|testSimpleOperations
specifier|public
name|void
name|testSimpleOperations
parameter_list|()
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|size
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|addToTranslogAndList
argument_list|(
name|translog
argument_list|,
name|ops
argument_list|,
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|newSnapshot
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|equalsTo
argument_list|(
name|ops
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ops
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addToTranslogAndList
argument_list|(
name|translog
argument_list|,
name|ops
argument_list|,
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|newSnapshot
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|equalsTo
argument_list|(
name|ops
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ops
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|seqNo
init|=
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
specifier|final
name|long
name|primaryTerm
init|=
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
specifier|final
name|String
name|reason
init|=
name|randomAlphaOfLength
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|addToTranslogAndList
argument_list|(
name|translog
argument_list|,
name|ops
argument_list|,
operator|new
name|Translog
operator|.
name|NoOp
argument_list|(
name|seqNo
argument_list|,
name|primaryTerm
argument_list|,
name|reason
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|newSnapshot
argument_list|()
expr_stmt|;
name|Translog
operator|.
name|Index
name|index
init|=
operator|(
name|Translog
operator|.
name|Index
operator|)
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|index
operator|.
name|source
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Delete
name|delete
init|=
operator|(
name|Translog
operator|.
name|Delete
operator|)
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|NoOp
name|noOp
init|=
operator|(
name|Translog
operator|.
name|NoOp
operator|)
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|noOp
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|noOp
operator|.
name|seqNo
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|seqNo
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|noOp
operator|.
name|primaryTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|primaryTerm
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|noOp
operator|.
name|reason
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|reason
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|snapshot
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|firstId
init|=
name|translog
operator|.
name|currentFileGeneration
argument_list|()
decl_stmt|;
name|translog
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|,
name|Matchers
operator|.
name|not
argument_list|(
name|equalTo
argument_list|(
name|firstId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|newSnapshot
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|equalsTo
argument_list|(
name|ops
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ops
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|newSnapshot
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|size
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|stats
specifier|protected
name|TranslogStats
name|stats
parameter_list|()
throws|throws
name|IOException
block|{
comment|// force flushing and updating of stats
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|TranslogStats
name|stats
init|=
name|translog
operator|.
name|stats
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|stats
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|stats
operator|=
operator|new
name|TranslogStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|stats
return|;
block|}
DECL|method|testStats
specifier|public
name|void
name|testStats
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|long
name|firstOperationPosition
init|=
name|translog
operator|.
name|getFirstOperationPosition
argument_list|()
decl_stmt|;
block|{
specifier|final
name|TranslogStats
name|stats
init|=
name|stats
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|estimatedNumberOfOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
operator|(
name|int
operator|)
name|firstOperationPosition
argument_list|,
name|greaterThan
argument_list|(
name|CodecUtil
operator|.
name|headerLength
argument_list|(
name|TranslogWriter
operator|.
name|TRANSLOG_CODEC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|{
specifier|final
name|TranslogStats
name|stats
init|=
name|stats
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|estimatedNumberOfOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTranslogSizeInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|97L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|{
specifier|final
name|TranslogStats
name|stats
init|=
name|stats
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|estimatedNumberOfOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTranslogSizeInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|139L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
name|newUid
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|{
specifier|final
name|TranslogStats
name|stats
init|=
name|stats
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|estimatedNumberOfOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTranslogSizeInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|181L
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|seqNo
init|=
literal|1
decl_stmt|;
specifier|final
name|long
name|primaryTerm
init|=
literal|1
decl_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|NoOp
argument_list|(
name|seqNo
argument_list|,
name|primaryTerm
argument_list|,
name|randomAlphaOfLength
argument_list|(
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|{
specifier|final
name|TranslogStats
name|stats
init|=
name|stats
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|estimatedNumberOfOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTranslogSizeInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|223L
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|expectedSizeInBytes
init|=
literal|266L
decl_stmt|;
name|translog
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
block|{
specifier|final
name|TranslogStats
name|stats
init|=
name|stats
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|estimatedNumberOfOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTranslogSizeInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedSizeInBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|TranslogStats
name|stats
init|=
name|stats
argument_list|()
decl_stmt|;
specifier|final
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|stats
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
specifier|final
name|TranslogStats
name|copy
init|=
operator|new
name|TranslogStats
argument_list|()
decl_stmt|;
name|copy
operator|.
name|readFrom
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copy
operator|.
name|estimatedNumberOfOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copy
operator|.
name|getTranslogSizeInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedSizeInBytes
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|copy
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"{\"translog\":{\"operations\":4,\"size_in_bytes\":"
operator|+
name|expectedSizeInBytes
operator|+
literal|"}}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
block|{
specifier|final
name|TranslogStats
name|stats
init|=
name|stats
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|estimatedNumberOfOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTranslogSizeInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstOperationPosition
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTotalTests
specifier|public
name|void
name|testTotalTests
parameter_list|()
block|{
specifier|final
name|TranslogStats
name|total
init|=
operator|new
name|TranslogStats
argument_list|()
decl_stmt|;
specifier|final
name|int
name|n
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TranslogStats
argument_list|>
name|statsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|TranslogStats
name|stats
init|=
operator|new
name|TranslogStats
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1
operator|<<
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|statsList
operator|.
name|add
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|total
operator|.
name|add
argument_list|(
name|stats
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|total
operator|.
name|estimatedNumberOfOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|statsList
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|TranslogStats
operator|::
name|estimatedNumberOfOperations
argument_list|)
operator|.
name|sum
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|total
operator|.
name|getTranslogSizeInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|statsList
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|TranslogStats
operator|::
name|getTranslogSizeInBytes
argument_list|)
operator|.
name|sum
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNegativeNumberOfOperations
specifier|public
name|void
name|testNegativeNumberOfOperations
parameter_list|()
block|{
specifier|final
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|TranslogStats
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"numberOfOperations must be>= 0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNegativeSizeInBytes
specifier|public
name|void
name|testNegativeSizeInBytes
parameter_list|()
block|{
specifier|final
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|TranslogStats
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"translogSizeInBytes must be>= 0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSnapshot
specifier|public
name|void
name|testSnapshot
parameter_list|()
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|size
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|addToTranslogAndList
argument_list|(
name|translog
argument_list|,
name|ops
argument_list|,
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|newSnapshot
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|equalsTo
argument_list|(
name|ops
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|newSnapshot
argument_list|()
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot1
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|equalsTo
argument_list|(
name|ops
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot1
argument_list|,
name|SnapshotMatchers
operator|.
name|size
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot1
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSnapshotWithNewTranslog
specifier|public
name|void
name|testSnapshotWithNewTranslog
parameter_list|()
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|size
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|addToTranslogAndList
argument_list|(
name|translog
argument_list|,
name|ops
argument_list|,
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot1
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|addToTranslogAndList
argument_list|(
name|translog
argument_list|,
name|ops
argument_list|,
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"2"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot1
argument_list|,
name|SnapshotMatchers
operator|.
name|equalsTo
argument_list|(
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|addToTranslogAndList
argument_list|(
name|translog
argument_list|,
name|ops
argument_list|,
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"3"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Translog
operator|.
name|View
name|view
init|=
name|translog
operator|.
name|newView
argument_list|()
init|)
block|{
name|Translog
operator|.
name|Snapshot
name|snapshot2
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot2
argument_list|,
name|SnapshotMatchers
operator|.
name|equalsTo
argument_list|(
name|ops
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot2
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ops
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSnapshotOnClosedTranslog
specifier|public
name|void
name|testSnapshotOnClosedTranslog
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|translogDir
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|getFilename
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"translog is closed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"translog is already closed"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertFileIsPresent
specifier|public
name|void
name|assertFileIsPresent
parameter_list|(
name|Translog
name|translog
parameter_list|,
name|long
name|id
parameter_list|)
block|{
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|translogDir
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|getFilename
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
name|fail
argument_list|(
name|Translog
operator|.
name|getFilename
argument_list|(
name|id
argument_list|)
operator|+
literal|" is not present in any location: "
operator|+
name|translog
operator|.
name|location
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFileDeleted
specifier|public
name|void
name|assertFileDeleted
parameter_list|(
name|Translog
name|translog
parameter_list|,
name|long
name|id
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"translog ["
operator|+
name|id
operator|+
literal|"] still exists"
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|translog
operator|.
name|location
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|getFilename
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|LocationOperation
specifier|static
class|class
name|LocationOperation
implements|implements
name|Comparable
argument_list|<
name|LocationOperation
argument_list|>
block|{
DECL|field|operation
specifier|final
name|Translog
operator|.
name|Operation
name|operation
decl_stmt|;
DECL|field|location
specifier|final
name|Translog
operator|.
name|Location
name|location
decl_stmt|;
DECL|method|LocationOperation
name|LocationOperation
parameter_list|(
name|Translog
operator|.
name|Operation
name|operation
parameter_list|,
name|Translog
operator|.
name|Location
name|location
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|LocationOperation
name|o
parameter_list|)
block|{
return|return
name|location
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|location
argument_list|)
return|;
block|}
block|}
DECL|method|testConcurrentWritesWithVaryingSize
specifier|public
name|void
name|testConcurrentWritesWithVaryingSize
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|int
name|opsPerThread
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|int
name|threadCount
init|=
literal|2
operator|+
name|randomInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"testing with [{}] threads, each doing [{}] ops"
argument_list|,
name|threadCount
argument_list|,
name|opsPerThread
argument_list|)
expr_stmt|;
specifier|final
name|BlockingQueue
argument_list|<
name|LocationOperation
argument_list|>
name|writtenOperations
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
name|threadCount
operator|*
name|opsPerThread
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|threadCount
index|]
decl_stmt|;
specifier|final
name|Exception
index|[]
name|threadExceptions
init|=
operator|new
name|Exception
index|[
name|threadCount
index|]
decl_stmt|;
specifier|final
name|CountDownLatch
name|downLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|threadId
init|=
name|i
decl_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|TranslogThread
argument_list|(
name|translog
argument_list|,
name|downLatch
argument_list|,
name|opsPerThread
argument_list|,
name|threadId
argument_list|,
name|writtenOperations
argument_list|,
name|threadExceptions
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|downLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|threadExceptions
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
throw|throw
name|threadExceptions
index|[
name|i
index|]
throw|;
block|}
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|(
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|LocationOperation
argument_list|>
name|collect
init|=
name|writtenOperations
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|collect
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
for|for
control|(
name|LocationOperation
name|locationOperation
range|:
name|collect
control|)
block|{
name|Translog
operator|.
name|Operation
name|op
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Operation
name|expectedOp
init|=
name|locationOperation
operator|.
name|operation
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedOp
operator|.
name|opType
argument_list|()
argument_list|,
name|op
operator|.
name|opType
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|op
operator|.
name|opType
argument_list|()
condition|)
block|{
case|case
name|INDEX
case|:
name|Translog
operator|.
name|Index
name|indexOp
init|=
operator|(
name|Translog
operator|.
name|Index
operator|)
name|op
decl_stmt|;
name|Translog
operator|.
name|Index
name|expIndexOp
init|=
operator|(
name|Translog
operator|.
name|Index
operator|)
name|expectedOp
decl_stmt|;
name|assertEquals
argument_list|(
name|expIndexOp
operator|.
name|id
argument_list|()
argument_list|,
name|indexOp
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expIndexOp
operator|.
name|routing
argument_list|()
argument_list|,
name|indexOp
operator|.
name|routing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expIndexOp
operator|.
name|type
argument_list|()
argument_list|,
name|indexOp
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expIndexOp
operator|.
name|source
argument_list|()
argument_list|,
name|indexOp
operator|.
name|source
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expIndexOp
operator|.
name|version
argument_list|()
argument_list|,
name|indexOp
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expIndexOp
operator|.
name|versionType
argument_list|()
argument_list|,
name|indexOp
operator|.
name|versionType
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|Translog
operator|.
name|Delete
name|delOp
init|=
operator|(
name|Translog
operator|.
name|Delete
operator|)
name|op
decl_stmt|;
name|Translog
operator|.
name|Delete
name|expDelOp
init|=
operator|(
name|Translog
operator|.
name|Delete
operator|)
name|expectedOp
decl_stmt|;
name|assertEquals
argument_list|(
name|expDelOp
operator|.
name|uid
argument_list|()
argument_list|,
name|delOp
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expDelOp
operator|.
name|version
argument_list|()
argument_list|,
name|delOp
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expDelOp
operator|.
name|versionType
argument_list|()
argument_list|,
name|delOp
operator|.
name|versionType
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|NO_OP
case|:
specifier|final
name|Translog
operator|.
name|NoOp
name|noOp
init|=
operator|(
name|Translog
operator|.
name|NoOp
operator|)
name|op
decl_stmt|;
specifier|final
name|Translog
operator|.
name|NoOp
name|expectedNoOp
init|=
operator|(
name|Translog
operator|.
name|NoOp
operator|)
name|expectedOp
decl_stmt|;
name|assertThat
argument_list|(
name|noOp
operator|.
name|seqNo
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedNoOp
operator|.
name|seqNo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|noOp
operator|.
name|primaryTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedNoOp
operator|.
name|primaryTerm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|noOp
operator|.
name|reason
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedNoOp
operator|.
name|reason
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unsupported operation type ["
operator|+
name|op
operator|.
name|opType
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
name|assertNull
argument_list|(
name|snapshot
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTranslogChecksums
specifier|public
name|void
name|testTranslogChecksums
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|String
name|ascii
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|ascii
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|corruptTranslogs
argument_list|(
name|translogDir
argument_list|)
expr_stmt|;
name|AtomicInteger
name|corruptionsCaught
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
for|for
control|(
name|Translog
operator|.
name|Location
name|location
range|:
name|locations
control|)
block|{
try|try
block|{
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TranslogCorruptedException
name|e
parameter_list|)
block|{
name|corruptionsCaught
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
name|expectThrows
argument_list|(
name|TranslogCorruptedException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|snapshot
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"at least one corruption was caused and caught"
argument_list|,
name|corruptionsCaught
operator|.
name|get
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTruncatedTranslogs
specifier|public
name|void
name|testTruncatedTranslogs
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|String
name|ascii
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|ascii
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|truncateTranslogs
argument_list|(
name|translogDir
argument_list|)
expr_stmt|;
name|AtomicInteger
name|truncations
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Snapshot
name|snap
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
for|for
control|(
name|Translog
operator|.
name|Location
name|location
range|:
name|locations
control|)
block|{
try|try
block|{
name|assertNotNull
argument_list|(
name|snap
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|truncations
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
literal|"at least one truncation was caused and caught"
argument_list|,
name|truncations
operator|.
name|get
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Randomly truncate some bytes in the translog files      */
DECL|method|truncateTranslogs
specifier|private
name|void
name|truncateTranslogs
parameter_list|(
name|Path
name|directory
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
index|[]
name|files
init|=
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|directory
argument_list|,
literal|"translog-*"
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|file
range|:
name|files
control|)
block|{
try|try
init|(
name|FileChannel
name|f
init|=
name|FileChannel
operator|.
name|open
argument_list|(
name|file
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
init|)
block|{
name|long
name|prevSize
init|=
name|f
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|newSize
init|=
name|prevSize
operator|-
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|prevSize
operator|/
literal|2
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> truncating {}, prev: {}, now: {}"
argument_list|,
name|file
argument_list|,
name|prevSize
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
name|f
operator|.
name|truncate
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Randomly overwrite some bytes in the translog files      */
DECL|method|corruptTranslogs
specifier|private
name|void
name|corruptTranslogs
parameter_list|(
name|Path
name|directory
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
index|[]
name|files
init|=
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|directory
argument_list|,
literal|"translog-*"
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|file
range|:
name|files
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> corrupting {}..."
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|FileChannel
name|f
init|=
name|FileChannel
operator|.
name|open
argument_list|(
name|file
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|int
name|corruptions
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|50
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|corruptions
condition|;
name|i
operator|++
control|)
block|{
comment|// note: with the current logic, this will sometimes be a no-op
name|long
name|pos
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|f
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ByteBuffer
name|junk
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
name|randomByte
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|f
operator|.
name|write
argument_list|(
name|junk
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|newUid
specifier|private
name|Term
name|newUid
parameter_list|(
name|ParsedDocument
name|doc
parameter_list|)
block|{
return|return
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
name|doc
operator|.
name|uid
argument_list|()
argument_list|)
return|;
block|}
DECL|method|newUid
specifier|private
name|Term
name|newUid
parameter_list|(
name|String
name|uid
parameter_list|)
block|{
return|return
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
name|uid
argument_list|)
return|;
block|}
DECL|method|testVerifyTranslogIsNotDeleted
specifier|public
name|void
name|testVerifyTranslogIsNotDeleted
parameter_list|()
throws|throws
name|IOException
block|{
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|SnapshotMatchers
operator|.
name|size
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that concurrent readers and writes maintain view and snapshot semantics      */
DECL|method|testConcurrentWriteViewsAndSnapshot
specifier|public
name|void
name|testConcurrentWriteViewsAndSnapshot
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|Thread
index|[]
name|writers
init|=
operator|new
name|Thread
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
index|]
decl_stmt|;
specifier|final
name|Thread
index|[]
name|readers
init|=
operator|new
name|Thread
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
index|]
decl_stmt|;
specifier|final
name|int
name|flushEveryOps
init|=
name|randomIntBetween
argument_list|(
literal|5
argument_list|,
literal|100
argument_list|)
decl_stmt|;
comment|// used to notify main thread that so many operations have been written so it can simulate a flush
specifier|final
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|writtenOpsLatch
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|idGenerator
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|writers
operator|.
name|length
operator|+
name|readers
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// a map of all written ops and their returned location.
specifier|final
name|Map
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|,
name|Translog
operator|.
name|Location
argument_list|>
name|writtenOps
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
comment|// a signal for all threads to stop
specifier|final
name|AtomicBoolean
name|run
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// any errors on threads
specifier|final
name|List
argument_list|<
name|Exception
argument_list|>
name|errors
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using [{}] readers. [{}] writers. flushing every ~[{}] ops."
argument_list|,
name|readers
operator|.
name|length
argument_list|,
name|writers
operator|.
name|length
argument_list|,
name|flushEveryOps
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|threadName
init|=
literal|"writer_"
operator|+
name|i
decl_stmt|;
specifier|final
name|int
name|threadId
init|=
name|i
decl_stmt|;
name|writers
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doRun
parameter_list|()
throws|throws
name|BrokenBarrierException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|run
operator|.
name|get
argument_list|()
condition|)
block|{
name|long
name|id
init|=
name|idGenerator
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
specifier|final
name|Translog
operator|.
name|Operation
name|op
decl_stmt|;
specifier|final
name|Translog
operator|.
name|Operation
operator|.
name|Type
name|type
init|=
name|Translog
operator|.
name|Operation
operator|.
name|Type
operator|.
name|values
argument_list|()
index|[
operator|(
call|(
name|int
call|)
argument_list|(
name|id
operator|%
name|Translog
operator|.
name|Operation
operator|.
name|Type
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
operator|)
index|]
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CREATE
case|:
case|case
name|INDEX
case|:
name|op
operator|=
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"type"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|id
block|}
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|op
operator|=
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
name|newUid
argument_list|(
literal|""
operator|+
name|id
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|NO_OP
case|:
name|op
operator|=
operator|new
name|Translog
operator|.
name|NoOp
argument_list|(
name|id
argument_list|,
name|id
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unsupported operation type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Translog
operator|.
name|Location
name|location
init|=
name|translog
operator|.
name|add
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Location
name|existing
init|=
name|writtenOps
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"duplicate op ["
operator|+
name|op
operator|+
literal|"], old entry at "
operator|+
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|%
name|writers
operator|.
name|length
operator|==
name|threadId
condition|)
block|{
name|translog
operator|.
name|ensureSynced
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|writtenOpsLatch
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"--> [{}] done. wrote [{}] ops."
argument_list|,
name|threadName
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"--> writer [{}] had an error"
argument_list|,
name|threadName
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|threadName
argument_list|)
expr_stmt|;
name|writers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|threadId
init|=
literal|"reader_"
operator|+
name|i
decl_stmt|;
name|readers
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
name|Translog
operator|.
name|View
name|view
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|writtenOpsAtView
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"--> reader [{}] had an error"
argument_list|,
name|threadId
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|closeView
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|inner
parameter_list|)
block|{
name|inner
operator|.
name|addSuppressed
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"unexpected error while closing view, after failure"
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|closeView
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|newView
parameter_list|()
throws|throws
name|IOException
block|{
name|closeView
argument_list|()
expr_stmt|;
name|view
operator|=
name|translog
operator|.
name|newView
argument_list|()
expr_stmt|;
comment|// captures the currently written ops so we know what to expect from the view
name|writtenOpsAtView
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|writtenOps
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> [{}] opened view from [{}]"
argument_list|,
name|threadId
argument_list|,
name|view
operator|.
name|minTranslogGeneration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|int
name|iter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|run
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|iter
operator|++
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|newView
argument_list|()
expr_stmt|;
block|}
comment|// captures al views that are written since the view was created (with a small caveat see bellow)
comment|// these are what we expect the snapshot to return (and potentially some more).
name|Set
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|expectedOps
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|writtenOps
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|expectedOps
operator|.
name|removeAll
argument_list|(
name|writtenOpsAtView
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|view
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|Translog
operator|.
name|Operation
name|op
decl_stmt|;
while|while
condition|(
operator|(
name|op
operator|=
name|snapshot
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|expectedOps
operator|.
name|remove
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedOps
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|StringBuilder
name|missed
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"missed "
argument_list|)
operator|.
name|append
argument_list|(
name|expectedOps
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" operations"
argument_list|)
decl_stmt|;
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Translog
operator|.
name|Operation
name|expectedOp
range|:
name|expectedOps
control|)
block|{
specifier|final
name|Translog
operator|.
name|Location
name|loc
init|=
name|writtenOps
operator|.
name|get
argument_list|(
name|expectedOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|.
name|generation
operator|<
name|view
operator|.
name|minTranslogGeneration
argument_list|()
condition|)
block|{
comment|// writtenOps is only updated after the op was written to the translog. This mean
comment|// that ops written to the translog before the view was taken (and will be missing from the view)
comment|// may yet be available in writtenOpsAtView, meaning we will erroneously expect them
continue|continue;
block|}
name|failed
operator|=
literal|true
expr_stmt|;
name|missed
operator|.
name|append
argument_list|(
literal|"\n --> ["
argument_list|)
operator|.
name|append
argument_list|(
name|expectedOp
argument_list|)
operator|.
name|append
argument_list|(
literal|"] written at "
argument_list|)
operator|.
name|append
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failed
condition|)
block|{
name|fail
argument_list|(
name|missed
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// slow down things a bit and spread out testing..
name|writtenOpsLatch
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|(
literal|200
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
name|closeView
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> [{}] done. tested [{}] snapshots"
argument_list|,
name|threadId
argument_list|,
name|iter
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|threadId
argument_list|)
expr_stmt|;
name|readers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|iterations
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|200
argument_list|)
init|;
name|iterations
operator|>
literal|0
operator|&&
name|errors
operator|.
name|isEmpty
argument_list|()
condition|;
name|iterations
operator|--
control|)
block|{
name|writtenOpsLatch
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
name|flushEveryOps
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|writtenOpsLatch
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|(
literal|200
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
break|break;
block|}
block|}
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|run
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> waiting for threads to stop"
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|writers
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|readers
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Throwable
name|e
init|=
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Throwable
name|suppress
range|:
name|errors
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
control|)
block|{
name|e
operator|.
name|addSuppressed
argument_list|(
name|suppress
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> test done. total ops written [{}]"
argument_list|,
name|writtenOps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSyncUpTo
specifier|public
name|void
name|testSyncUpTo
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
specifier|final
name|Translog
operator|.
name|Location
name|location
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
operator|++
name|count
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
literal|"at least one operation pending"
argument_list|,
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"this operation has not been synced"
argument_list|,
name|translog
operator|.
name|ensureSynced
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"the last call to ensureSycned synced all previous ops"
argument_list|,
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
comment|// we are the last location so everything should be synced
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
operator|++
name|count
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"one pending operation"
argument_list|,
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"this op has been synced before"
argument_list|,
name|translog
operator|.
name|ensureSynced
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
comment|// not syncing now
name|assertTrue
argument_list|(
literal|"we only synced a previous operation yet"
argument_list|,
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"location is from a previous translog - already synced"
argument_list|,
name|translog
operator|.
name|ensureSynced
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
comment|// not syncing now
name|assertFalse
argument_list|(
literal|"no sync needed since no operations in current translog"
argument_list|,
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"translog has been synced already"
argument_list|,
name|translog
operator|.
name|ensureSynced
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSyncUpToStream
specifier|public
name|void
name|testSyncUpToStream
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|iters
init|=
name|randomIntBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|ArrayList
argument_list|<
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// do this first so that there is at least one pending tlog entry
block|}
specifier|final
name|Translog
operator|.
name|Location
name|location
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
operator|++
name|count
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|locations
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
literal|"at least one operation pending"
argument_list|,
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"this operation has not been synced"
argument_list|,
name|translog
operator|.
name|ensureSynced
argument_list|(
name|locations
operator|.
name|stream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"the last call to ensureSycned synced all previous ops"
argument_list|,
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
comment|// we are the last location so everything should be synced
block|}
elseif|else
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"location is from a previous translog - already synced"
argument_list|,
name|translog
operator|.
name|ensureSynced
argument_list|(
name|locations
operator|.
name|stream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// not syncing now
name|assertFalse
argument_list|(
literal|"no sync needed since no operations in current translog"
argument_list|,
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"translog has been synced already"
argument_list|,
name|translog
operator|.
name|ensureSynced
argument_list|(
name|locations
operator|.
name|stream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Location
name|location
range|:
name|locations
control|)
block|{
name|assertFalse
argument_list|(
literal|"all of the locations should be synced: "
operator|+
name|location
argument_list|,
name|translog
operator|.
name|ensureSynced
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testLocationComparison
specifier|public
name|void
name|testLocationComparison
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
operator|++
name|count
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
operator|&&
name|translogOperations
operator|>
name|op
operator|+
literal|1
condition|)
block|{
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|locations
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Location
name|max
init|=
name|locations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Translog
operator|.
name|Location
name|location
range|:
name|locations
control|)
block|{
name|max
operator|=
name|max
argument_list|(
name|max
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|max
operator|.
name|generation
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|snap
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|Translog
operator|.
name|Operation
name|next
decl_stmt|;
name|Translog
operator|.
name|Operation
name|maxOp
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|next
operator|=
name|snap
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|maxOp
operator|=
name|next
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|maxOp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxOp
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|max
specifier|public
specifier|static
name|Translog
operator|.
name|Location
name|max
parameter_list|(
name|Translog
operator|.
name|Location
name|a
parameter_list|,
name|Translog
operator|.
name|Location
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
name|a
return|;
block|}
return|return
name|b
return|;
block|}
DECL|method|testBasicCheckpoint
specifier|public
name|void
name|testBasicCheckpoint
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|lastSynced
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|lastSyncedGlobalCheckpoint
init|=
name|globalCheckpoint
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|op
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|globalCheckpoint
operator|.
name|set
argument_list|(
name|globalCheckpoint
operator|.
name|get
argument_list|()
operator|+
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|lastSynced
operator|=
name|op
expr_stmt|;
name|lastSyncedGlobalCheckpoint
operator|=
name|globalCheckpoint
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|translogOperations
argument_list|,
name|translog
operator|.
name|totalOperations
argument_list|()
argument_list|)
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|translogOperations
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|translogOperations
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Checkpoint
name|checkpoint
init|=
name|Checkpoint
operator|.
name|read
argument_list|(
name|translog
operator|.
name|location
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|CHECKPOINT_FILE_NAME
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|TranslogReader
name|reader
init|=
name|translog
operator|.
name|openReader
argument_list|(
name|translog
operator|.
name|location
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|getFilename
argument_list|(
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|checkpoint
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|lastSynced
operator|+
literal|1
argument_list|,
name|reader
operator|.
name|totalOperations
argument_list|()
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|reader
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
if|if
condition|(
name|op
operator|<=
name|lastSynced
condition|)
block|{
specifier|final
name|Translog
operator|.
name|Operation
name|read
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|op
argument_list|)
argument_list|,
name|read
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|translogOperations
operator|+
literal|1
argument_list|,
name|translog
operator|.
name|totalOperations
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checkpoint
operator|.
name|globalCheckpoint
argument_list|,
name|equalTo
argument_list|(
name|lastSyncedGlobalCheckpoint
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testTranslogWriter
specifier|public
name|void
name|testTranslogWriter
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TranslogWriter
name|writer
init|=
name|translog
operator|.
name|createWriter
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numOps
init|=
name|randomIntBetween
argument_list|(
literal|8
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|ByteArrayDataOutput
name|out
init|=
operator|new
name|ByteArrayDataOutput
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Long
argument_list|>
name|seenSeqNos
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|opsHaveValidSequenceNumbers
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOps
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|reset
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|long
name|seqNo
decl_stmt|;
do|do
block|{
name|seqNo
operator|=
name|opsHaveValidSequenceNumbers
condition|?
name|randomNonNegativeLong
argument_list|()
else|:
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
expr_stmt|;
name|opsHaveValidSequenceNumbers
operator|=
name|opsHaveValidSequenceNumbers
operator|||
operator|!
name|rarely
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|seenSeqNos
operator|.
name|contains
argument_list|(
name|seqNo
argument_list|)
condition|)
do|;
if|if
condition|(
name|seqNo
operator|!=
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
condition|)
block|{
name|seenSeqNos
operator|.
name|add
argument_list|(
name|seqNo
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|add
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|bytes
argument_list|)
argument_list|,
name|seqNo
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|sync
argument_list|()
expr_stmt|;
specifier|final
name|BaseTranslogReader
name|reader
init|=
name|randomBoolean
argument_list|()
condition|?
name|writer
else|:
name|translog
operator|.
name|openReader
argument_list|(
name|writer
operator|.
name|path
argument_list|()
argument_list|,
name|Checkpoint
operator|.
name|read
argument_list|(
name|translog
operator|.
name|location
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|CHECKPOINT_FILE_NAME
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOps
condition|;
name|i
operator|++
control|)
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|reader
operator|.
name|readBytes
argument_list|(
name|buffer
argument_list|,
name|reader
operator|.
name|getFirstOperationOffset
argument_list|()
operator|+
literal|4
operator|*
name|i
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
specifier|final
name|int
name|value
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|minSeqNo
init|=
name|seenSeqNos
operator|.
name|stream
argument_list|()
operator|.
name|min
argument_list|(
name|Long
operator|::
name|compareTo
argument_list|)
operator|.
name|orElse
argument_list|(
name|SequenceNumbersService
operator|.
name|NO_OPS_PERFORMED
argument_list|)
decl_stmt|;
specifier|final
name|long
name|maxSeqNo
init|=
name|seenSeqNos
operator|.
name|stream
argument_list|()
operator|.
name|max
argument_list|(
name|Long
operator|::
name|compareTo
argument_list|)
operator|.
name|orElse
argument_list|(
name|SequenceNumbersService
operator|.
name|NO_OPS_PERFORMED
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reader
operator|.
name|getCheckpoint
argument_list|()
operator|.
name|minSeqNo
argument_list|,
name|equalTo
argument_list|(
name|minSeqNo
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reader
operator|.
name|getCheckpoint
argument_list|()
operator|.
name|maxSeqNo
argument_list|,
name|equalTo
argument_list|(
name|maxSeqNo
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|2048
argument_list|)
expr_stmt|;
name|writer
operator|.
name|add
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|bytes
argument_list|)
argument_list|,
name|randomNonNegativeLong
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reader
operator|instanceof
name|TranslogReader
condition|)
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
decl_stmt|;
try|try
block|{
name|reader
operator|.
name|readBytes
argument_list|(
name|buffer
argument_list|,
name|reader
operator|.
name|getFirstOperationOffset
argument_list|()
operator|+
literal|4
operator|*
name|numOps
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"read past EOF?"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
operator|(
operator|(
name|TranslogReader
operator|)
name|reader
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// live reader!
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|long
name|pos
init|=
name|reader
operator|.
name|getFirstOperationOffset
argument_list|()
operator|+
literal|4
operator|*
name|numOps
decl_stmt|;
name|reader
operator|.
name|readBytes
argument_list|(
name|buffer
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
specifier|final
name|int
name|value
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
DECL|method|testCloseIntoReader
specifier|public
name|void
name|testCloseIntoReader
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|TranslogWriter
name|writer
init|=
name|translog
operator|.
name|createWriter
argument_list|(
literal|0
argument_list|)
init|)
block|{
specifier|final
name|int
name|numOps
init|=
name|randomIntBetween
argument_list|(
literal|8
argument_list|,
literal|128
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
specifier|final
name|ByteArrayDataOutput
name|out
init|=
operator|new
name|ByteArrayDataOutput
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOps
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|reset
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|writer
operator|.
name|add
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|bytes
argument_list|)
argument_list|,
name|randomNonNegativeLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|sync
argument_list|()
expr_stmt|;
specifier|final
name|Checkpoint
name|writerCheckpoint
init|=
name|writer
operator|.
name|getCheckpoint
argument_list|()
decl_stmt|;
try|try
init|(
name|TranslogReader
name|reader
init|=
name|writer
operator|.
name|closeIntoReader
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOps
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|reader
operator|.
name|readBytes
argument_list|(
name|buffer
argument_list|,
name|reader
operator|.
name|getFirstOperationOffset
argument_list|()
operator|+
literal|4
operator|*
name|i
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
specifier|final
name|int
name|value
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Checkpoint
name|readerCheckpoint
init|=
name|reader
operator|.
name|getCheckpoint
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|readerCheckpoint
argument_list|,
name|equalTo
argument_list|(
name|writerCheckpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testBasicRecovery
specifier|public
name|void
name|testBasicRecovery
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|TranslogGeneration
name|translogGeneration
init|=
literal|null
decl_stmt|;
name|int
name|minUncommittedOp
init|=
operator|-
literal|1
decl_stmt|;
specifier|final
name|boolean
name|commitOften
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|op
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|commit
init|=
name|commitOften
condition|?
name|frequently
argument_list|()
else|:
name|rarely
argument_list|()
decl_stmt|;
if|if
condition|(
name|commit
operator|&&
name|op
operator|<
name|translogOperations
operator|-
literal|1
condition|)
block|{
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|minUncommittedOp
operator|=
name|op
operator|+
literal|1
expr_stmt|;
name|translogGeneration
operator|=
name|translog
operator|.
name|getGeneration
argument_list|()
expr_stmt|;
block|}
block|}
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|TranslogConfig
name|config
init|=
name|translog
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
name|translog
operator|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|translogGeneration
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
expr_stmt|;
if|if
condition|(
name|translogGeneration
operator|==
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|translog
operator|.
name|stats
argument_list|()
operator|.
name|estimatedNumberOfOperations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|snapshot
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"lastCommitted must be 1 less than current"
argument_list|,
name|translogGeneration
operator|.
name|translogFileGeneration
operator|+
literal|1
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|minUncommittedOp
init|;
name|i
operator|<
name|translogOperations
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"expected operation"
operator|+
name|i
operator|+
literal|" to be in the previous translog but wasn't"
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
operator|-
literal|1
argument_list|,
name|locations
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|generation
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"operation "
operator|+
name|i
operator|+
literal|" must be non-null"
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|next
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRecoveryUncommitted
specifier|public
name|void
name|testRecoveryUncommitted
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|int
name|prepareOp
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|translogOperations
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|TranslogGeneration
name|translogGeneration
init|=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|sync
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|op
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|==
name|prepareOp
condition|)
block|{
name|translogGeneration
operator|=
name|translog
operator|.
name|getGeneration
argument_list|()
expr_stmt|;
name|translog
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected this to be the first commit"
argument_list|,
literal|1L
argument_list|,
name|translogGeneration
operator|.
name|translogFileGeneration
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|translogGeneration
operator|.
name|translogUUID
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sync
condition|)
block|{
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
comment|// we intentionally don't close the tlog that is in the prepareCommit stage since we try to recovery the uncommitted
comment|// translog here as well.
name|TranslogConfig
name|config
init|=
name|translog
operator|.
name|getConfig
argument_list|()
decl_stmt|;
try|try
init|(
name|Translog
name|translog
init|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|translogGeneration
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|translogGeneration
argument_list|)
block|;
name|assertEquals
argument_list|(
literal|"lastCommitted must be 2 less than current - we never finished the commit"
argument_list|,
name|translogGeneration
operator|.
name|translogFileGeneration
operator|+
literal|2
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
block|;
name|assertFalse
argument_list|(
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
block|;
name|Translog
operator|.
name|Snapshot
name|snapshot
operator|=
name|translog
operator|.
name|newSnapshot
argument_list|()
block|;
name|int
name|upTo
operator|=
name|sync
condition|?
name|translogOperations
else|:
name|prepareOp
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|upTo
condition|;
name|i
operator|++
control|)
block|{
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"operation "
operator|+
name|i
operator|+
literal|" must be non-null synced: "
operator|+
name|sync
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"payload missmatch, synced: "
operator|+
name|sync
argument_list|,
name|i
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|next
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// recover twice
try|try
init|(
name|Translog
name|translog
init|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|translogGeneration
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|translogGeneration
argument_list|)
block|;
name|assertEquals
argument_list|(
literal|"lastCommitted must be 3 less than current - we never finished the commit and run recovery twice"
argument_list|,
name|translogGeneration
operator|.
name|translogFileGeneration
operator|+
literal|3
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
empty_stmt|;
name|assertFalse
argument_list|(
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|int
name|upTo
init|=
name|sync
condition|?
name|translogOperations
else|:
name|prepareOp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|upTo
condition|;
name|i
operator|++
control|)
block|{
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"operation "
operator|+
name|i
operator|+
literal|" must be non-null synced: "
operator|+
name|sync
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"payload missmatch, synced: "
operator|+
name|sync
argument_list|,
name|i
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|next
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_function
unit|}       public
DECL|method|testRecoveryUncommittedFileExists
name|void
name|testRecoveryUncommittedFileExists
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|int
name|prepareOp
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|translogOperations
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|TranslogGeneration
name|translogGeneration
init|=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|sync
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|op
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|==
name|prepareOp
condition|)
block|{
name|translogGeneration
operator|=
name|translog
operator|.
name|getGeneration
argument_list|()
expr_stmt|;
name|translog
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected this to be the first commit"
argument_list|,
literal|1L
argument_list|,
name|translogGeneration
operator|.
name|translogFileGeneration
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|translogGeneration
operator|.
name|translogUUID
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sync
condition|)
block|{
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
comment|// we intentionally don't close the tlog that is in the prepareCommit stage since we try to recovery the uncommitted
comment|// translog here as well.
name|TranslogConfig
name|config
init|=
name|translog
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|Path
name|ckp
init|=
name|config
operator|.
name|getTranslogPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|CHECKPOINT_FILE_NAME
argument_list|)
decl_stmt|;
name|Checkpoint
name|read
init|=
name|Checkpoint
operator|.
name|read
argument_list|(
name|ckp
argument_list|)
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|ckp
argument_list|,
name|config
operator|.
name|getTranslogPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|getCommitCheckpointFileName
argument_list|(
name|read
operator|.
name|generation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Translog
name|translog
init|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|translogGeneration
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|translogGeneration
argument_list|)
block|;
name|assertEquals
argument_list|(
literal|"lastCommitted must be 2 less than current - we never finished the commit"
argument_list|,
name|translogGeneration
operator|.
name|translogFileGeneration
operator|+
literal|2
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
block|;
name|assertFalse
argument_list|(
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
block|;
name|Translog
operator|.
name|Snapshot
name|snapshot
operator|=
name|translog
operator|.
name|newSnapshot
argument_list|()
block|;
name|int
name|upTo
operator|=
name|sync
condition|?
name|translogOperations
else|:
name|prepareOp
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|upTo
condition|;
name|i
operator|++
control|)
block|{
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"operation "
operator|+
name|i
operator|+
literal|" must be non-null synced: "
operator|+
name|sync
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"payload missmatch, synced: "
operator|+
name|sync
argument_list|,
name|i
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|next
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_if
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// recover twice
try|try
init|(
name|Translog
name|translog
init|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|translogGeneration
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|translogGeneration
argument_list|)
block|;
name|assertEquals
argument_list|(
literal|"lastCommitted must be 3 less than current - we never finished the commit and run recovery twice"
argument_list|,
name|translogGeneration
operator|.
name|translogFileGeneration
operator|+
literal|3
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
empty_stmt|;
name|assertFalse
argument_list|(
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|int
name|upTo
init|=
name|sync
condition|?
name|translogOperations
else|:
name|prepareOp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|upTo
condition|;
name|i
operator|++
control|)
block|{
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"operation "
operator|+
name|i
operator|+
literal|" must be non-null synced: "
operator|+
name|sync
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"payload missmatch, synced: "
operator|+
name|sync
argument_list|,
name|i
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|next
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_if

begin_function
unit|}     }
DECL|method|testRecoveryUncommittedCorruptedCheckpoint
specifier|public
name|void
name|testRecoveryUncommittedCorruptedCheckpoint
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|prepareOp
init|=
literal|44
decl_stmt|;
name|Translog
operator|.
name|TranslogGeneration
name|translogGeneration
init|=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|sync
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|op
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|==
name|prepareOp
condition|)
block|{
name|translogGeneration
operator|=
name|translog
operator|.
name|getGeneration
argument_list|()
expr_stmt|;
name|translog
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected this to be the first commit"
argument_list|,
literal|1L
argument_list|,
name|translogGeneration
operator|.
name|translogFileGeneration
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|translogGeneration
operator|.
name|translogUUID
argument_list|)
expr_stmt|;
block|}
block|}
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
comment|// we intentionally don't close the tlog that is in the prepareCommit stage since we try to recovery the uncommitted
comment|// translog here as well.
name|TranslogConfig
name|config
init|=
name|translog
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|Path
name|ckp
init|=
name|config
operator|.
name|getTranslogPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|CHECKPOINT_FILE_NAME
argument_list|)
decl_stmt|;
name|Checkpoint
name|read
init|=
name|Checkpoint
operator|.
name|read
argument_list|(
name|ckp
argument_list|)
decl_stmt|;
name|Checkpoint
name|corrupted
init|=
name|Checkpoint
operator|.
name|emptyTranslogCheckpoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
decl_stmt|;
name|Checkpoint
operator|.
name|write
argument_list|(
name|FileChannel
operator|::
name|open
argument_list|,
name|config
operator|.
name|getTranslogPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|getCommitCheckpointFileName
argument_list|(
name|read
operator|.
name|generation
argument_list|)
argument_list|)
argument_list|,
name|corrupted
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE_NEW
argument_list|)
expr_stmt|;
try|try
init|(
name|Translog
name|ignored
init|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|translogGeneration
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
init|)
block|{
name|fail
argument_list|(
literal|"corrupted"
argument_list|)
block|;         }
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Checkpoint file translog-2.ckp already exists but has corrupted content expected: Checkpoint{offset=3123, numOps=55, generation=2, minSeqNo=0, maxSeqNo=0, globalCheckpoint=-2} but got: Checkpoint{offset=0, numOps=0, generation=0, minSeqNo=-1, maxSeqNo=-1, globalCheckpoint=-2}"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Checkpoint
operator|.
name|write
argument_list|(
name|FileChannel
operator|::
name|open
argument_list|,
name|config
operator|.
name|getTranslogPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|getCommitCheckpointFileName
argument_list|(
name|read
operator|.
name|generation
argument_list|)
argument_list|)
argument_list|,
name|read
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|,
name|StandardOpenOption
operator|.
name|TRUNCATE_EXISTING
argument_list|)
expr_stmt|;
try|try
init|(
name|Translog
name|translog
init|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|translogGeneration
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|translogGeneration
argument_list|)
block|;
name|assertEquals
argument_list|(
literal|"lastCommitted must be 2 less than current - we never finished the commit"
argument_list|,
name|translogGeneration
operator|.
name|translogFileGeneration
operator|+
literal|2
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
block|;
name|assertFalse
argument_list|(
name|translog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
block|;
name|Translog
operator|.
name|Snapshot
name|snapshot
operator|=
name|translog
operator|.
name|newSnapshot
argument_list|()
block|;
name|int
name|upTo
operator|=
name|sync
condition|?
name|translogOperations
else|:
name|prepareOp
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|upTo
condition|;
name|i
operator|++
control|)
block|{
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"operation "
operator|+
name|i
operator|+
literal|" must be non-null synced: "
operator|+
name|sync
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"payload missmatch, synced: "
operator|+
name|sync
argument_list|,
name|i
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|next
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
unit|}      public
DECL|method|testSnapshotFromStreamInput
name|void
name|testSnapshotFromStreamInput
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|Translog
operator|.
name|Index
name|test
init|=
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|op
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
name|Translog
operator|.
name|writeOperations
argument_list|(
name|out
argument_list|,
name|ops
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|readOperations
init|=
name|Translog
operator|.
name|readOperations
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ops
operator|.
name|size
argument_list|()
argument_list|,
name|readOperations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ops
argument_list|,
name|readOperations
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testLocationHashCodeEquals
specifier|public
name|void
name|testLocationHashCodeEquals
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
try|try
init|(
name|Translog
name|translog2
init|=
name|create
argument_list|(
name|createTempDir
argument_list|()
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|op
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|locations2
operator|.
name|add
argument_list|(
name|translog2
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|op
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|iters
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|Translog
operator|.
name|Location
name|location
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|locations
argument_list|)
decl_stmt|;
for|for
control|(
name|Translog
operator|.
name|Location
name|loc
range|:
name|locations
control|)
block|{
if|if
condition|(
name|loc
operator|==
name|location
condition|)
block|{
name|assertTrue
argument_list|(
name|loc
operator|.
name|equals
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|loc
operator|.
name|hashCode
argument_list|()
argument_list|,
name|location
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|loc
operator|.
name|equals
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|translogOperations
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|locations
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|equals
argument_list|(
name|locations2
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|locations
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|locations2
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_function
DECL|method|testOpenForeignTranslog
specifier|public
name|void
name|testOpenForeignTranslog
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
name|firstUncommitted
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|op
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|firstUncommitted
operator|=
name|op
operator|+
literal|1
expr_stmt|;
block|}
block|}
name|TranslogConfig
name|config
init|=
name|translog
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|Translog
operator|.
name|TranslogGeneration
name|translogGeneration
init|=
name|translog
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
name|Translog
operator|.
name|TranslogGeneration
name|generation
init|=
operator|new
name|Translog
operator|.
name|TranslogGeneration
argument_list|(
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
name|translogGeneration
operator|.
name|translogUUID
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|translogGeneration
operator|.
name|translogFileGeneration
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|generation
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"translog doesn't belong to this UUID"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TranslogCorruptedException
name|ex
parameter_list|)
block|{          }
name|this
operator|.
name|translog
operator|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|translogGeneration
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|this
operator|.
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|firstUncommitted
init|;
name|i
operator|<
name|translogOperations
condition|;
name|i
operator|++
control|)
block|{
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|next
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|snapshot
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testFailOnClosedWrite
specifier|public
name|void
name|testFailOnClosedWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"closed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|ex
parameter_list|)
block|{
comment|// all is welll
block|}
block|}
end_function

begin_function
DECL|method|testCloseConcurrently
specifier|public
name|void
name|testCloseConcurrently
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|int
name|opsPerThread
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|int
name|threadCount
init|=
literal|2
operator|+
name|randomInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"testing with [{}] threads, each doing [{}] ops"
argument_list|,
name|threadCount
argument_list|,
name|opsPerThread
argument_list|)
expr_stmt|;
specifier|final
name|BlockingQueue
argument_list|<
name|LocationOperation
argument_list|>
name|writtenOperations
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
name|threadCount
operator|*
name|opsPerThread
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|threadCount
index|]
decl_stmt|;
specifier|final
name|Exception
index|[]
name|threadExceptions
init|=
operator|new
name|Exception
index|[
name|threadCount
index|]
decl_stmt|;
specifier|final
name|CountDownLatch
name|downLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|threadId
init|=
name|i
decl_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|TranslogThread
argument_list|(
name|translog
argument_list|,
name|downLatch
argument_list|,
name|opsPerThread
argument_list|,
name|threadId
argument_list|,
name|writtenOperations
argument_list|,
name|threadExceptions
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|downLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|threadExceptions
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|threadExceptions
index|[
name|i
index|]
operator|instanceof
name|AlreadyClosedException
operator|)
operator|==
literal|false
condition|)
block|{
throw|throw
name|threadExceptions
index|[
name|i
index|]
throw|;
block|}
block|}
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|(
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_class
DECL|class|TranslogThread
specifier|private
specifier|static
class|class
name|TranslogThread
extends|extends
name|Thread
block|{
DECL|field|downLatch
specifier|private
specifier|final
name|CountDownLatch
name|downLatch
decl_stmt|;
DECL|field|opsPerThread
specifier|private
specifier|final
name|int
name|opsPerThread
decl_stmt|;
DECL|field|threadId
specifier|private
specifier|final
name|int
name|threadId
decl_stmt|;
DECL|field|writtenOperations
specifier|private
specifier|final
name|Collection
argument_list|<
name|LocationOperation
argument_list|>
name|writtenOperations
decl_stmt|;
DECL|field|threadExceptions
specifier|private
specifier|final
name|Exception
index|[]
name|threadExceptions
decl_stmt|;
DECL|field|translog
specifier|private
specifier|final
name|Translog
name|translog
decl_stmt|;
DECL|method|TranslogThread
name|TranslogThread
parameter_list|(
name|Translog
name|translog
parameter_list|,
name|CountDownLatch
name|downLatch
parameter_list|,
name|int
name|opsPerThread
parameter_list|,
name|int
name|threadId
parameter_list|,
name|Collection
argument_list|<
name|LocationOperation
argument_list|>
name|writtenOperations
parameter_list|,
name|Exception
index|[]
name|threadExceptions
parameter_list|)
block|{
name|this
operator|.
name|translog
operator|=
name|translog
expr_stmt|;
name|this
operator|.
name|downLatch
operator|=
name|downLatch
expr_stmt|;
name|this
operator|.
name|opsPerThread
operator|=
name|opsPerThread
expr_stmt|;
name|this
operator|.
name|threadId
operator|=
name|threadId
expr_stmt|;
name|this
operator|.
name|writtenOperations
operator|=
name|writtenOperations
expr_stmt|;
name|this
operator|.
name|threadExceptions
operator|=
name|threadExceptions
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|downLatch
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|opCount
init|=
literal|0
init|;
name|opCount
operator|<
name|opsPerThread
condition|;
name|opCount
operator|++
control|)
block|{
name|Translog
operator|.
name|Operation
name|op
decl_stmt|;
specifier|final
name|Translog
operator|.
name|Operation
operator|.
name|Type
name|type
init|=
name|randomFrom
argument_list|(
name|Translog
operator|.
name|Operation
operator|.
name|Type
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CREATE
case|:
case|case
name|INDEX
case|:
name|op
operator|=
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
name|threadId
operator|+
literal|"_"
operator|+
name|opCount
argument_list|,
name|randomUnicodeOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|20
operator|*
literal|1024
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|op
operator|=
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
name|threadId
operator|+
literal|"_"
operator|+
name|opCount
argument_list|)
argument_list|,
name|opCount
argument_list|,
literal|0
argument_list|,
literal|1
operator|+
name|randomInt
argument_list|(
literal|100000
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|VersionType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|NO_OP
case|:
name|op
operator|=
operator|new
name|Translog
operator|.
name|NoOp
argument_list|(
name|randomNonNegativeLong
argument_list|()
argument_list|,
name|randomNonNegativeLong
argument_list|()
argument_list|,
name|randomAlphaOfLength
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unsupported operation type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Translog
operator|.
name|Location
name|loc
init|=
name|add
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|writtenOperations
operator|.
name|add
argument_list|(
operator|new
name|LocationOperation
argument_list|(
name|op
argument_list|,
name|loc
argument_list|)
argument_list|)
expr_stmt|;
name|afterAdd
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
name|threadExceptions
index|[
name|threadId
index|]
operator|=
name|t
expr_stmt|;
block|}
block|}
DECL|method|add
specifier|protected
name|Translog
operator|.
name|Location
name|add
parameter_list|(
name|Translog
operator|.
name|Operation
name|op
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|translog
operator|.
name|add
argument_list|(
name|op
argument_list|)
return|;
block|}
DECL|method|afterAdd
specifier|protected
name|void
name|afterAdd
parameter_list|()
throws|throws
name|IOException
block|{         }
block|}
end_class

begin_function
DECL|method|testFailFlush
specifier|public
name|void
name|testFailFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
specifier|final
name|FailSwitch
name|fail
init|=
operator|new
name|FailSwitch
argument_list|()
decl_stmt|;
name|TranslogConfig
name|config
init|=
name|getTranslogConfig
argument_list|(
name|tempDir
argument_list|)
decl_stmt|;
name|Translog
name|translog
init|=
name|getFailableTranslog
argument_list|(
name|fail
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|opsSynced
init|=
literal|0
decl_stmt|;
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|failed
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|opsSynced
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|opsSynced
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|opsSynced
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MockDirectoryWrapper
operator|.
name|FakeIOException
name|ex
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
name|assertFalse
argument_list|(
name|translog
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
name|assertFalse
argument_list|(
name|translog
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"__FAKE__ no space left on device"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|fail
operator|.
name|failAlways
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fail
operator|.
name|failNever
argument_list|()
expr_stmt|;
block|}
block|}
name|fail
operator|.
name|failNever
argument_list|()
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
try|try
block|{
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|opsSynced
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|opsSynced
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"we are already closed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|ex
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|MockDirectoryWrapper
operator|.
name|FakeIOException
condition|)
block|{
name|assertNull
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"__FAKE__ no space left on device"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Translog
operator|.
name|TranslogGeneration
name|translogGeneration
init|=
name|translog
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
try|try
block|{
name|translog
operator|.
name|newSnapshot
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"already closed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|ex
parameter_list|)
block|{
comment|// all is well
name|assertNotNull
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|translog
operator|.
name|getTragicException
argument_list|()
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"already closed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|ex
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|translog
operator|.
name|getTragicException
argument_list|()
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|translog
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// we are closed
try|try
init|(
name|Translog
name|tlog
init|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|translogGeneration
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|"lastCommitted must be 1 less than current"
argument_list|,
name|translogGeneration
operator|.
name|translogFileGeneration
operator|+
literal|1
argument_list|,
name|tlog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
block|;
name|assertFalse
argument_list|(
name|tlog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
block|;
name|Translog
operator|.
name|Snapshot
name|snapshot
operator|=
name|tlog
operator|.
name|newSnapshot
argument_list|()
block|;
name|assertEquals
argument_list|(
name|opsSynced
argument_list|,
name|snapshot
operator|.
name|totalOperations
argument_list|()
argument_list|)
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|opsSynced
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"expected operation"
operator|+
name|i
operator|+
literal|" to be in the previous translog but wasn't"
argument_list|,
name|tlog
operator|.
name|currentFileGeneration
argument_list|()
operator|-
literal|1
argument_list|,
name|locations
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|generation
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"operation "
operator|+
name|i
operator|+
literal|" must be non-null"
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|next
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
unit|}      public
DECL|method|testTranslogOpsCountIsCorrect
name|void
name|testTranslogOpsCountIsCorrect
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numOps
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|LineFileDocs
name|lineFileDocs
init|=
operator|new
name|LineFileDocs
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
comment|// writes pretty big docs so we cross buffer boarders regularly
for|for
control|(
name|int
name|opsAdded
init|=
literal|0
init|;
name|opsAdded
operator|<
name|numOps
condition|;
name|opsAdded
operator|++
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|opsAdded
argument_list|,
name|lineFileDocs
operator|.
name|nextDoc
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|this
operator|.
name|translog
operator|.
name|newSnapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|opsAdded
operator|+
literal|1
argument_list|,
name|snapshot
operator|.
name|totalOperations
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|opsAdded
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"expected operation"
operator|+
name|i
operator|+
literal|" to be in the current translog but wasn't"
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|,
name|locations
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|generation
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"operation "
operator|+
name|i
operator|+
literal|" must be non-null"
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|testTragicEventCanBeAnyException
specifier|public
name|void
name|testTragicEventCanBeAnyException
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
specifier|final
name|FailSwitch
name|fail
init|=
operator|new
name|FailSwitch
argument_list|()
decl_stmt|;
name|TranslogConfig
name|config
init|=
name|getTranslogConfig
argument_list|(
name|tempDir
argument_list|)
decl_stmt|;
name|Translog
name|translog
init|=
name|getFailableTranslog
argument_list|(
name|fail
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LineFileDocs
name|lineFileDocs
init|=
operator|new
name|LineFileDocs
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
comment|// writes pretty big docs so we cross buffer boarders regularly
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|lineFileDocs
operator|.
name|nextDoc
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
operator|.
name|failAlways
argument_list|()
expr_stmt|;
try|try
block|{
name|Translog
operator|.
name|Location
name|location
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"2"
argument_list|,
name|lineFileDocs
operator|.
name|nextDoc
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|translog
operator|.
name|ensureSynced
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
comment|//TODO once we have a mock FS that can simulate we can also fail on plain sync
name|fail
argument_list|(
literal|"WTF"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownException
name|ex
parameter_list|)
block|{
comment|// w00t
block|}
catch|catch
parameter_list|(
name|TranslogException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|UnknownException
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|translog
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|translog
operator|.
name|getTragicException
argument_list|()
operator|instanceof
name|UnknownException
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testFatalIOExceptionsWhileWritingConcurrently
specifier|public
name|void
name|testFatalIOExceptionsWhileWritingConcurrently
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
specifier|final
name|FailSwitch
name|fail
init|=
operator|new
name|FailSwitch
argument_list|()
decl_stmt|;
name|TranslogConfig
name|config
init|=
name|getTranslogConfig
argument_list|(
name|tempDir
argument_list|)
decl_stmt|;
name|Translog
name|translog
init|=
name|getFailableTranslog
argument_list|(
name|fail
argument_list|,
name|config
argument_list|)
decl_stmt|;
specifier|final
name|int
name|threadCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|threadCount
index|]
decl_stmt|;
specifier|final
name|Exception
index|[]
name|threadExceptions
init|=
operator|new
name|Exception
index|[
name|threadCount
index|]
decl_stmt|;
specifier|final
name|CountDownLatch
name|downLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|added
init|=
operator|new
name|CountDownLatch
argument_list|(
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LocationOperation
argument_list|>
name|writtenOperations
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|threadId
init|=
name|i
decl_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|TranslogThread
argument_list|(
name|translog
argument_list|,
name|downLatch
argument_list|,
literal|200
argument_list|,
name|threadId
argument_list|,
name|writtenOperations
argument_list|,
name|threadExceptions
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Translog
operator|.
name|Location
name|add
parameter_list|(
name|Translog
operator|.
name|Operation
name|op
parameter_list|)
throws|throws
name|IOException
block|{
name|Translog
operator|.
name|Location
name|add
init|=
name|super
operator|.
name|add
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|added
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return
name|add
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|afterAdd
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|downLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|added
operator|.
name|await
argument_list|()
expr_stmt|;
try|try
init|(
name|Translog
operator|.
name|View
name|view
init|=
name|translog
operator|.
name|newView
argument_list|()
init|)
block|{
comment|// this holds a reference to the current tlog channel such that it's not closed
comment|// if we hit a tragic event. this is important to ensure that asserts inside the Translog#add doesn't trip
comment|// otherwise our assertions here are off by one sometimes.
name|fail
operator|.
name|failAlways
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|boolean
name|atLeastOneFailed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Throwable
name|ex
range|:
name|threadExceptions
control|)
block|{
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
operator|instanceof
name|IOException
operator|||
name|ex
operator|instanceof
name|AlreadyClosedException
argument_list|)
expr_stmt|;
name|atLeastOneFailed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|atLeastOneFailed
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|boolean
name|syncNeeded
init|=
name|translog
operator|.
name|syncNeeded
argument_list|()
decl_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"should have failed if sync was needed"
argument_list|,
name|syncNeeded
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// boom now we failed
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|writtenOperations
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
name|a
operator|.
name|location
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|translog
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Checkpoint
name|checkpoint
init|=
name|Checkpoint
operator|.
name|read
argument_list|(
name|config
operator|.
name|getTranslogPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|CHECKPOINT_FILE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|LocationOperation
argument_list|>
name|iterator
init|=
name|writtenOperations
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LocationOperation
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkpoint
operator|.
name|offset
operator|<
operator|(
name|next
operator|.
name|location
operator|.
name|translogLocation
operator|+
name|next
operator|.
name|location
operator|.
name|size
operator|)
condition|)
block|{
comment|// drop all that haven't been synced
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
try|try
init|(
name|Translog
name|tlog
init|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|translog
operator|.
name|getGeneration
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
init|)
block|{
name|Translog
operator|.
name|Snapshot
name|snapshot
operator|=
name|tlog
operator|.
name|newSnapshot
argument_list|()
block|;
if|if
condition|(
name|writtenOperations
operator|.
name|size
argument_list|()
operator|!=
name|snapshot
operator|.
name|totalOperations
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|threadExceptions
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Translog exception"
argument_list|,
name|threadExceptions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_expr_stmt
name|assertEquals
argument_list|(
name|writtenOperations
operator|.
name|size
argument_list|()
argument_list|,
name|snapshot
operator|.
name|totalOperations
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writtenOperations
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"expected operation"
operator|+
name|i
operator|+
literal|" to be in the previous translog but wasn't"
argument_list|,
name|tlog
operator|.
name|currentFileGeneration
argument_list|()
operator|-
literal|1
argument_list|,
name|writtenOperations
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|location
operator|.
name|generation
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"operation "
operator|+
name|i
operator|+
literal|" must be non-null"
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|next
argument_list|,
name|writtenOperations
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|operation
argument_list|)
expr_stmt|;
block|}
end_for

begin_function
unit|}         }     }      private
DECL|method|getFailableTranslog
name|Translog
name|getFailableTranslog
parameter_list|(
name|FailSwitch
name|fail
parameter_list|,
specifier|final
name|TranslogConfig
name|config
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getFailableTranslog
argument_list|(
name|fail
argument_list|,
name|config
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_class
DECL|class|FailSwitch
specifier|private
specifier|static
class|class
name|FailSwitch
block|{
DECL|field|failRate
specifier|private
specifier|volatile
name|int
name|failRate
decl_stmt|;
DECL|field|onceFailedFailAlways
specifier|private
specifier|volatile
name|boolean
name|onceFailedFailAlways
init|=
literal|false
decl_stmt|;
DECL|method|fail
specifier|public
name|boolean
name|fail
parameter_list|()
block|{
name|boolean
name|fail
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
operator|<=
name|failRate
decl_stmt|;
if|if
condition|(
name|fail
operator|&&
name|onceFailedFailAlways
condition|)
block|{
name|failAlways
argument_list|()
expr_stmt|;
block|}
return|return
name|fail
return|;
block|}
DECL|method|failNever
specifier|public
name|void
name|failNever
parameter_list|()
block|{
name|failRate
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|failAlways
specifier|public
name|void
name|failAlways
parameter_list|()
block|{
name|failRate
operator|=
literal|100
expr_stmt|;
block|}
DECL|method|failRandomly
specifier|public
name|void
name|failRandomly
parameter_list|()
block|{
name|failRate
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
DECL|method|onceFailedFailAlways
specifier|public
name|void
name|onceFailedFailAlways
parameter_list|()
block|{
name|onceFailedFailAlways
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

begin_function
DECL|method|getFailableTranslog
specifier|private
name|Translog
name|getFailableTranslog
parameter_list|(
specifier|final
name|FailSwitch
name|fail
parameter_list|,
specifier|final
name|TranslogConfig
name|config
parameter_list|,
specifier|final
name|boolean
name|paritalWrites
parameter_list|,
specifier|final
name|boolean
name|throwUnknownException
parameter_list|,
name|Translog
operator|.
name|TranslogGeneration
name|generation
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|generation
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
block|{             @
name|Override
name|ChannelFactory
name|getChannelFactory
argument_list|()
block|{
name|final
name|ChannelFactory
name|factory
operator|=
name|super
operator|.
name|getChannelFactory
argument_list|()
block|;
return|return
parameter_list|(
name|file
parameter_list|,
name|openOption
parameter_list|)
lambda|->
block|{
name|FileChannel
name|channel
init|=
name|factory
operator|.
name|open
argument_list|(
name|file
argument_list|,
name|openOption
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
specifier|final
name|boolean
name|isCkpFile
init|=
name|file
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".ckp"
argument_list|)
decl_stmt|;
comment|// don't do partial writes for checkpoints we rely on the fact that the bytes are written as an atomic operation
name|ThrowingFileChannel
name|throwingFileChannel
init|=
operator|new
name|ThrowingFileChannel
argument_list|(
name|fail
argument_list|,
name|isCkpFile
condition|?
literal|false
else|:
name|paritalWrites
argument_list|,
name|throwUnknownException
argument_list|,
name|channel
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|throwingFileChannel
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_empty_stmt
unit|};             }         }
empty_stmt|;
end_empty_stmt

begin_class
unit|}      public
DECL|class|ThrowingFileChannel
specifier|static
class|class
name|ThrowingFileChannel
extends|extends
name|FilterFileChannel
block|{
DECL|field|fail
specifier|private
specifier|final
name|FailSwitch
name|fail
decl_stmt|;
DECL|field|partialWrite
specifier|private
specifier|final
name|boolean
name|partialWrite
decl_stmt|;
DECL|field|throwUnknownException
specifier|private
specifier|final
name|boolean
name|throwUnknownException
decl_stmt|;
DECL|method|ThrowingFileChannel
specifier|public
name|ThrowingFileChannel
parameter_list|(
name|FailSwitch
name|fail
parameter_list|,
name|boolean
name|partialWrite
parameter_list|,
name|boolean
name|throwUnknownException
parameter_list|,
name|FileChannel
name|delegate
parameter_list|)
throws|throws
name|MockDirectoryWrapper
operator|.
name|FakeIOException
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|fail
operator|=
name|fail
expr_stmt|;
name|this
operator|.
name|partialWrite
operator|=
name|partialWrite
expr_stmt|;
name|this
operator|.
name|throwUnknownException
operator|=
name|throwUnknownException
expr_stmt|;
if|if
condition|(
name|fail
operator|.
name|fail
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MockDirectoryWrapper
operator|.
name|FakeIOException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
name|ByteBuffer
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fail
operator|.
name|fail
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MockDirectoryWrapper
operator|.
name|FakeIOException
argument_list|()
throw|;
block|}
return|return
name|super
operator|.
name|read
argument_list|(
name|dst
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|long
name|read
parameter_list|(
name|ByteBuffer
index|[]
name|dsts
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fail
operator|.
name|fail
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MockDirectoryWrapper
operator|.
name|FakeIOException
argument_list|()
throw|;
block|}
return|return
name|super
operator|.
name|read
argument_list|(
name|dsts
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|long
name|write
parameter_list|(
name|ByteBuffer
index|[]
name|srcs
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|int
name|write
parameter_list|(
name|ByteBuffer
name|src
parameter_list|,
name|long
name|position
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|write
specifier|public
name|int
name|write
parameter_list|(
name|ByteBuffer
name|src
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fail
operator|.
name|fail
argument_list|()
condition|)
block|{
if|if
condition|(
name|partialWrite
condition|)
block|{
if|if
condition|(
name|src
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
specifier|final
name|int
name|pos
init|=
name|src
operator|.
name|position
argument_list|()
decl_stmt|;
specifier|final
name|int
name|limit
init|=
name|src
operator|.
name|limit
argument_list|()
decl_stmt|;
name|src
operator|.
name|limit
argument_list|(
name|randomIntBetween
argument_list|(
name|pos
argument_list|,
name|limit
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|write
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|src
operator|.
name|limit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|src
operator|.
name|position
argument_list|(
name|pos
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"__FAKE__ no space left on device"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|throwUnknownException
condition|)
block|{
throw|throw
operator|new
name|UnknownException
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|MockDirectoryWrapper
operator|.
name|FakeIOException
argument_list|()
throw|;
block|}
block|}
return|return
name|super
operator|.
name|write
argument_list|(
name|src
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|force
specifier|public
name|void
name|force
parameter_list|(
name|boolean
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fail
operator|.
name|fail
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MockDirectoryWrapper
operator|.
name|FakeIOException
argument_list|()
throw|;
block|}
name|super
operator|.
name|force
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|position
specifier|public
name|long
name|position
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fail
operator|.
name|fail
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MockDirectoryWrapper
operator|.
name|FakeIOException
argument_list|()
throw|;
block|}
return|return
name|super
operator|.
name|position
argument_list|()
return|;
block|}
block|}
end_class

begin_class
DECL|class|UnknownException
specifier|private
specifier|static
specifier|final
class|class
name|UnknownException
extends|extends
name|RuntimeException
block|{      }
end_class

begin_comment
comment|// see https://github.com/elastic/elasticsearch/issues/15754
end_comment

begin_function
DECL|method|testFailWhileCreateWriteWithRecoveredTLogs
specifier|public
name|void
name|testFailWhileCreateWriteWithRecoveredTLogs
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|TranslogConfig
name|config
init|=
name|getTranslogConfig
argument_list|(
name|tempDir
argument_list|)
decl_stmt|;
name|Translog
name|translog
init|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
literal|null
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
decl_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"boom"
argument_list|,
literal|"boom"
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|TranslogGeneration
name|generation
init|=
name|translog
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|generation
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
block|{                 @
name|Override
specifier|protected
name|TranslogWriter
name|createWriter
argument_list|(
name|long
name|fileGeneration
argument_list|)
throws|throws
name|IOException
block|{
throw|throw
argument_list|new
name|MockDirectoryWrapper
operator|.
name|FakeIOException
argument_list|()
block|;                 }
block|}
empty_stmt|;
comment|// if we have a LeakFS here we fail if not all resources are closed
name|fail
argument_list|(
literal|"should have been failed"
argument_list|)
expr_stmt|;
block|}
end_function

begin_catch
catch|catch
parameter_list|(
name|MockDirectoryWrapper
operator|.
name|FakeIOException
name|ex
parameter_list|)
block|{
comment|// all is well
block|}
end_catch

begin_function
unit|}      public
DECL|method|testRecoverWithUnbackedNextGen
name|void
name|testRecoverWithUnbackedNextGen
parameter_list|()
throws|throws
name|IOException
block|{
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
literal|0
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|TranslogGeneration
name|translogGeneration
init|=
name|translog
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
name|TranslogConfig
name|config
init|=
name|translog
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|Path
name|ckp
init|=
name|config
operator|.
name|getTranslogPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|CHECKPOINT_FILE_NAME
argument_list|)
decl_stmt|;
name|Checkpoint
name|read
init|=
name|Checkpoint
operator|.
name|read
argument_list|(
name|ckp
argument_list|)
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|ckp
argument_list|,
name|config
operator|.
name|getTranslogPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|getCommitCheckpointFileName
argument_list|(
name|read
operator|.
name|generation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|config
operator|.
name|getTranslogPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"translog-"
operator|+
operator|(
name|read
operator|.
name|generation
operator|+
literal|1
operator|)
operator|+
literal|".tlog"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Translog
name|tlog
init|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|translogGeneration
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|translogGeneration
argument_list|)
block|;
name|assertFalse
argument_list|(
name|tlog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
block|;
name|Translog
operator|.
name|Snapshot
name|snapshot
operator|=
name|tlog
operator|.
name|newSnapshot
argument_list|()
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"operation "
operator|+
name|i
operator|+
literal|" must be non-null"
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"payload missmatch"
argument_list|,
name|i
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|next
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tlog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
literal|1
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_try
try|try
init|(
name|Translog
name|tlog
init|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|translogGeneration
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|translogGeneration
argument_list|)
block|;
name|assertFalse
argument_list|(
name|tlog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
block|;
name|Translog
operator|.
name|Snapshot
name|snapshot
operator|=
name|tlog
operator|.
name|newSnapshot
argument_list|()
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"operation "
operator|+
name|i
operator|+
literal|" must be non-null"
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"payload missmatch"
argument_list|,
name|i
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|next
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_try

begin_function
unit|}     }
DECL|method|testRecoverWithUnbackedNextGenInIllegalState
specifier|public
name|void
name|testRecoverWithUnbackedNextGenInIllegalState
parameter_list|()
throws|throws
name|IOException
block|{
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
literal|0
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|TranslogGeneration
name|translogGeneration
init|=
name|translog
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
name|TranslogConfig
name|config
init|=
name|translog
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|Path
name|ckp
init|=
name|config
operator|.
name|getTranslogPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|CHECKPOINT_FILE_NAME
argument_list|)
decl_stmt|;
name|Checkpoint
name|read
init|=
name|Checkpoint
operator|.
name|read
argument_list|(
name|ckp
argument_list|)
decl_stmt|;
comment|// don't copy the new file
name|Files
operator|.
name|createFile
argument_list|(
name|config
operator|.
name|getTranslogPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"translog-"
operator|+
operator|(
name|read
operator|.
name|generation
operator|+
literal|1
operator|)
operator|+
literal|".tlog"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Translog
name|tlog
init|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|translogGeneration
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"file already exists?"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TranslogException
name|ex
parameter_list|)
block|{
comment|// all is well
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"failed to create new translog file"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|FileAlreadyExistsException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|testRecoverWithUnbackedNextGenAndFutureFile
specifier|public
name|void
name|testRecoverWithUnbackedNextGenAndFutureFile
parameter_list|()
throws|throws
name|IOException
block|{
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
literal|0
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|TranslogGeneration
name|translogGeneration
init|=
name|translog
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
name|TranslogConfig
name|config
init|=
name|translog
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|Path
name|ckp
init|=
name|config
operator|.
name|getTranslogPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|CHECKPOINT_FILE_NAME
argument_list|)
decl_stmt|;
name|Checkpoint
name|read
init|=
name|Checkpoint
operator|.
name|read
argument_list|(
name|ckp
argument_list|)
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|ckp
argument_list|,
name|config
operator|.
name|getTranslogPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|Translog
operator|.
name|getCommitCheckpointFileName
argument_list|(
name|read
operator|.
name|generation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|config
operator|.
name|getTranslogPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"translog-"
operator|+
operator|(
name|read
operator|.
name|generation
operator|+
literal|1
operator|)
operator|+
literal|".tlog"
argument_list|)
argument_list|)
expr_stmt|;
comment|// we add N+1 and N+2 to ensure we only delete the N+1 file and never jump ahead and wipe without the right condition
name|Files
operator|.
name|createFile
argument_list|(
name|config
operator|.
name|getTranslogPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"translog-"
operator|+
operator|(
name|read
operator|.
name|generation
operator|+
literal|2
operator|)
operator|+
literal|".tlog"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Translog
name|tlog
init|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|translogGeneration
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|translogGeneration
argument_list|)
block|;
name|assertFalse
argument_list|(
name|tlog
operator|.
name|syncNeeded
argument_list|()
argument_list|)
block|;
name|Translog
operator|.
name|Snapshot
name|snapshot
operator|=
name|tlog
operator|.
name|newSnapshot
argument_list|()
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"operation "
operator|+
name|i
operator|+
literal|" must be non-null"
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"payload missmatch"
argument_list|,
name|i
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|next
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tlog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
literal|1
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_try
try|try
block|{
name|Translog
name|tlog
init|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|translogGeneration
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"file already exists?"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TranslogException
name|ex
parameter_list|)
block|{
comment|// all is well
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"failed to create new translog file"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|FileAlreadyExistsException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
end_try

begin_comment
unit|}
comment|/**      * This test adds operations to the translog which might randomly throw an IOException. The only thing this test verifies is      * that we can, after we hit an exception, open and recover the translog successfully and retrieve all successfully synced operations      * from the transaction log.      */
end_comment

begin_function
DECL|method|testWithRandomException
unit|public
name|void
name|testWithRandomException
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|runs
init|=
name|randomIntBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|run
init|=
literal|0
init|;
name|run
operator|<
name|runs
condition|;
name|run
operator|++
control|)
block|{
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
specifier|final
name|FailSwitch
name|fail
init|=
operator|new
name|FailSwitch
argument_list|()
decl_stmt|;
name|fail
operator|.
name|failRandomly
argument_list|()
expr_stmt|;
name|TranslogConfig
name|config
init|=
name|getTranslogConfig
argument_list|(
name|tempDir
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numOps
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|syncedDocs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|unsynced
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|fail
operator|.
name|onceFailedFailAlways
argument_list|()
expr_stmt|;
block|}
name|Translog
operator|.
name|TranslogGeneration
name|generation
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|Translog
name|failableTLog
init|=
name|getFailableTranslog
argument_list|(
name|fail
argument_list|,
name|config
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|false
argument_list|,
name|generation
argument_list|)
decl_stmt|;
try|try
block|{
name|LineFileDocs
name|lineFileDocs
init|=
operator|new
name|LineFileDocs
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
comment|//writes pretty big docs so we cross buffer boarders regularly
for|for
control|(
name|int
name|opsAdded
init|=
literal|0
init|;
name|opsAdded
operator|<
name|numOps
condition|;
name|opsAdded
operator|++
control|)
block|{
name|String
name|doc
init|=
name|lineFileDocs
operator|.
name|nextDoc
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|failableTLog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|opsAdded
argument_list|,
name|doc
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|unsynced
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|failableTLog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|syncedDocs
operator|.
name|addAll
argument_list|(
name|unsynced
argument_list|)
expr_stmt|;
name|unsynced
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|randomFloat
argument_list|()
operator|<
literal|0.1
condition|)
block|{
name|failableTLog
operator|.
name|sync
argument_list|()
expr_stmt|;
comment|// we have to sync here first otherwise we don't know if the sync succeeded if the commit fails
name|syncedDocs
operator|.
name|addAll
argument_list|(
name|unsynced
argument_list|)
expr_stmt|;
name|unsynced
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|failableTLog
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
block|}
name|failableTLog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|syncedDocs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|// we survived all the randomness!!!
comment|// lets close the translog and if it succeeds we are all synced again. If we don't do this we will close
comment|// it in the finally block but miss to copy over unsynced docs to syncedDocs and fail the assertion down the road...
name|failableTLog
operator|.
name|close
argument_list|()
expr_stmt|;
name|syncedDocs
operator|.
name|addAll
argument_list|(
name|unsynced
argument_list|)
expr_stmt|;
name|unsynced
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TranslogException
decl||
name|MockDirectoryWrapper
operator|.
name|FakeIOException
name|ex
parameter_list|)
block|{
comment|// fair enough
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"__FAKE__ no space left on device"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Checkpoint
name|checkpoint
init|=
name|Translog
operator|.
name|readCheckpoint
argument_list|(
name|config
operator|.
name|getTranslogPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkpoint
operator|.
name|numOps
operator|==
name|unsynced
operator|.
name|size
argument_list|()
operator|+
name|syncedDocs
operator|.
name|size
argument_list|()
condition|)
block|{
name|syncedDocs
operator|.
name|addAll
argument_list|(
name|unsynced
argument_list|)
expr_stmt|;
comment|// failed in fsync but got fully written
name|unsynced
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|generation
operator|=
name|failableTLog
operator|.
name|getGeneration
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|failableTLog
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TranslogException
decl||
name|MockDirectoryWrapper
operator|.
name|FakeIOException
name|ex
parameter_list|)
block|{
comment|// failed - that's ok, we didn't even create it
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"__FAKE__ no space left on device"
argument_list|)
expr_stmt|;
block|}
comment|// now randomly open this failing tlog again just to make sure we can also recover from failing during recovery
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
try|try
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|getFailableTranslog
argument_list|(
name|fail
argument_list|,
name|config
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|false
argument_list|,
name|generation
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TranslogException
decl||
name|MockDirectoryWrapper
operator|.
name|FakeIOException
name|ex
parameter_list|)
block|{
comment|// failed - that's ok, we didn't even create it
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"__FAKE__ no space left on device"
argument_list|)
expr_stmt|;
block|}
block|}
name|fail
operator|.
name|failNever
argument_list|()
expr_stmt|;
comment|// we don't wanna fail here but we might since we write a new checkpoint and create a new tlog file
try|try
init|(
name|Translog
name|translog
init|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|generation
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
init|)
block|{
name|Translog
operator|.
name|Snapshot
name|snapshot
operator|=
name|translog
operator|.
name|newSnapshot
argument_list|()
block|;
name|assertEquals
argument_list|(
name|syncedDocs
operator|.
name|size
argument_list|()
argument_list|,
name|snapshot
operator|.
name|totalOperations
argument_list|()
argument_list|)
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|syncedDocs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Translog
operator|.
name|Operation
name|next
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|syncedDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|next
operator|.
name|getSource
argument_list|()
operator|.
name|source
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"operation "
operator|+
name|i
operator|+
literal|" must be non-null"
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
unit|}      private
DECL|method|randomCheckpoint
name|Checkpoint
name|randomCheckpoint
parameter_list|()
block|{
specifier|final
name|long
name|a
init|=
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
specifier|final
name|long
name|b
init|=
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
specifier|final
name|long
name|minSeqNo
decl_stmt|;
specifier|final
name|long
name|maxSeqNo
decl_stmt|;
if|if
condition|(
name|a
operator|<=
name|b
condition|)
block|{
name|minSeqNo
operator|=
name|a
expr_stmt|;
name|maxSeqNo
operator|=
name|b
expr_stmt|;
block|}
else|else
block|{
name|minSeqNo
operator|=
name|b
expr_stmt|;
name|maxSeqNo
operator|=
name|a
expr_stmt|;
block|}
return|return
operator|new
name|Checkpoint
argument_list|(
name|randomLong
argument_list|()
argument_list|,
name|randomInt
argument_list|()
argument_list|,
name|randomLong
argument_list|()
argument_list|,
name|minSeqNo
argument_list|,
name|maxSeqNo
argument_list|,
name|randomNonNegativeLong
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|testCheckpointOnDiskFull
specifier|public
name|void
name|testCheckpointOnDiskFull
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Checkpoint
name|checkpoint
init|=
name|randomCheckpoint
argument_list|()
decl_stmt|;
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Checkpoint
operator|.
name|write
argument_list|(
name|FileChannel
operator|::
name|open
argument_list|,
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"foo.cpk"
argument_list|)
argument_list|,
name|checkpoint
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE_NEW
argument_list|)
expr_stmt|;
specifier|final
name|Checkpoint
name|checkpoint2
init|=
name|randomCheckpoint
argument_list|()
decl_stmt|;
try|try
block|{
name|Checkpoint
operator|.
name|write
argument_list|(
parameter_list|(
name|p
parameter_list|,
name|o
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MockDirectoryWrapper
operator|.
name|FakeIOException
argument_list|()
throw|;
block|}
name|FileChannel
name|open
init|=
name|FileChannel
operator|.
name|open
argument_list|(
name|p
argument_list|,
name|o
argument_list|)
decl_stmt|;
name|FailSwitch
name|failSwitch
init|=
operator|new
name|FailSwitch
argument_list|()
decl_stmt|;
name|failSwitch
operator|.
name|failNever
argument_list|()
expr_stmt|;
comment|// don't fail in the ctor
name|ThrowingFileChannel
name|channel
init|=
operator|new
name|ThrowingFileChannel
argument_list|(
name|failSwitch
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|open
argument_list|)
decl_stmt|;
name|failSwitch
operator|.
name|failAlways
argument_list|()
expr_stmt|;
return|return
name|channel
return|;
block|}
argument_list|,
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"foo.cpk"
argument_list|)
argument_list|,
name|checkpoint2
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed earlier"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MockDirectoryWrapper
operator|.
name|FakeIOException
name|ex
parameter_list|)
block|{
comment|//fine
block|}
name|Checkpoint
name|read
init|=
name|Checkpoint
operator|.
name|read
argument_list|(
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"foo.cpk"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|read
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Tests that closing views after the translog is fine and we can reopen the translog      */
end_comment

begin_function
DECL|method|testPendingDelete
specifier|public
name|void
name|testPendingDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|Translog
operator|.
name|TranslogGeneration
name|generation
init|=
name|translog
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
name|TranslogConfig
name|config
init|=
name|translog
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
name|translog
operator|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|generation
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"2"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|Translog
operator|.
name|View
name|view
init|=
name|translog
operator|.
name|newView
argument_list|()
decl_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"3"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|translog
operator|=
operator|new
name|Translog
argument_list|(
name|config
argument_list|,
name|generation
argument_list|,
parameter_list|()
lambda|->
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|randomTranslogLocation
specifier|public
specifier|static
name|Translog
operator|.
name|Location
name|randomTranslogLocation
parameter_list|()
block|{
return|return
operator|new
name|Translog
operator|.
name|Location
argument_list|(
name|randomLong
argument_list|()
argument_list|,
name|randomLong
argument_list|()
argument_list|,
name|randomInt
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|testTranslogOpSerialization
specifier|public
name|void
name|testTranslogOpSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesReference
name|B_1
init|=
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
name|SeqNoFieldMapper
operator|.
name|SequenceIDFields
name|seqID
init|=
name|SeqNoFieldMapper
operator|.
name|SequenceIDFields
operator|.
name|emptySeqID
argument_list|()
decl_stmt|;
assert|assert
name|Version
operator|.
name|CURRENT
operator|.
name|major
operator|<=
literal|6
operator|:
literal|"Using UNASSIGNED_SEQ_NO can be removed in 7.0, because 6.0+ nodes have actual sequence numbers"
assert|;
name|long
name|randomSeqNum
init|=
name|randomBoolean
argument_list|()
condition|?
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
else|:
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
name|long
name|randomPrimaryTerm
init|=
name|randomBoolean
argument_list|()
condition|?
literal|0
else|:
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
name|seqID
operator|.
name|seqNo
operator|.
name|setLongValue
argument_list|(
name|randomSeqNum
argument_list|)
expr_stmt|;
name|seqID
operator|.
name|seqNoDocValue
operator|.
name|setLongValue
argument_list|(
name|randomSeqNum
argument_list|)
expr_stmt|;
name|seqID
operator|.
name|primaryTerm
operator|.
name|setLongValue
argument_list|(
name|randomPrimaryTerm
argument_list|)
expr_stmt|;
name|Field
name|uidField
init|=
operator|new
name|Field
argument_list|(
literal|"_uid"
argument_list|,
name|Uid
operator|.
name|createUid
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|UidFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
decl_stmt|;
name|Field
name|versionField
init|=
operator|new
name|NumericDocValuesField
argument_list|(
literal|"_version"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|uidField
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|versionField
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|seqID
operator|.
name|seqNo
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|seqID
operator|.
name|seqNoDocValue
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|seqID
operator|.
name|primaryTerm
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
operator|new
name|ParsedDocument
argument_list|(
name|versionField
argument_list|,
name|seqID
argument_list|,
literal|"1"
argument_list|,
literal|"type"
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|document
argument_list|)
argument_list|,
name|B_1
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|eIndex
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
name|newUid
argument_list|(
name|doc
argument_list|)
argument_list|,
name|doc
argument_list|,
name|randomSeqNum
argument_list|,
name|randomPrimaryTerm
argument_list|,
literal|1
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|Origin
operator|.
name|PRIMARY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexResult
name|eIndexResult
init|=
operator|new
name|Engine
operator|.
name|IndexResult
argument_list|(
literal|1
argument_list|,
name|randomSeqNum
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Index
name|index
init|=
operator|new
name|Translog
operator|.
name|Index
argument_list|(
name|eIndex
argument_list|,
name|eIndexResult
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|index
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|Translog
operator|.
name|Index
name|serializedIndex
init|=
operator|new
name|Translog
operator|.
name|Index
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|index
argument_list|,
name|serializedIndex
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Delete
name|eDelete
init|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
name|doc
operator|.
name|type
argument_list|()
argument_list|,
name|doc
operator|.
name|id
argument_list|()
argument_list|,
name|newUid
argument_list|(
name|doc
argument_list|)
argument_list|,
name|randomSeqNum
argument_list|,
name|randomPrimaryTerm
argument_list|,
literal|2
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|Origin
operator|.
name|PRIMARY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|DeleteResult
name|eDeleteResult
init|=
operator|new
name|Engine
operator|.
name|DeleteResult
argument_list|(
literal|2
argument_list|,
name|randomSeqNum
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Delete
name|delete
init|=
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
name|eDelete
argument_list|,
name|eDeleteResult
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|BytesStreamOutput
argument_list|()
expr_stmt|;
name|delete
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|in
operator|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
expr_stmt|;
name|Translog
operator|.
name|Delete
name|serializedDelete
init|=
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|delete
argument_list|,
name|serializedDelete
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testRollGeneration
specifier|public
name|void
name|testRollGeneration
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|long
name|generation
init|=
name|translog
operator|.
name|currentFileGeneration
argument_list|()
decl_stmt|;
specifier|final
name|int
name|rolls
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|int
name|totalOperations
init|=
literal|0
decl_stmt|;
name|int
name|seqNo
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rolls
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|operations
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|128
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|operations
condition|;
name|j
operator|++
control|)
block|{
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|NoOp
argument_list|(
name|seqNo
operator|++
argument_list|,
literal|0
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|totalOperations
operator|++
expr_stmt|;
block|}
try|try
init|(
name|ReleasableLock
name|ignored
init|=
name|translog
operator|.
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|translog
operator|.
name|rollGeneration
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|generation
operator|+
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalOperations
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|rolls
condition|;
name|i
operator|++
control|)
block|{
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
name|generation
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|generation
operator|+
name|rolls
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|totalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|rolls
condition|;
name|i
operator|++
control|)
block|{
name|assertFileDeleted
argument_list|(
name|translog
argument_list|,
name|generation
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
name|generation
operator|+
name|rolls
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testRollGenerationBetweenPrepareCommitAndCommit
specifier|public
name|void
name|testRollGenerationBetweenPrepareCommitAndCommit
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|long
name|generation
init|=
name|translog
operator|.
name|currentFileGeneration
argument_list|()
decl_stmt|;
name|int
name|seqNo
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|rollsBefore
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<=
name|rollsBefore
condition|;
name|r
operator|++
control|)
block|{
specifier|final
name|int
name|operationsBefore
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operationsBefore
condition|;
name|i
operator|++
control|)
block|{
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|NoOp
argument_list|(
name|seqNo
operator|++
argument_list|,
literal|0
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Releasable
name|ignored
init|=
name|translog
operator|.
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|translog
operator|.
name|rollGeneration
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|generation
operator|+
name|r
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|r
condition|;
name|i
operator|++
control|)
block|{
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
name|generation
operator|+
name|r
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|generation
operator|+
name|rollsBefore
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|generation
operator|+
name|rollsBefore
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|rollsBefore
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
name|generation
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|rollsBetween
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<=
name|rollsBetween
condition|;
name|r
operator|++
control|)
block|{
specifier|final
name|int
name|operationsBetween
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operationsBetween
condition|;
name|i
operator|++
control|)
block|{
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|NoOp
argument_list|(
name|seqNo
operator|++
argument_list|,
literal|0
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Releasable
name|ignored
init|=
name|translog
operator|.
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|translog
operator|.
name|rollGeneration
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|generation
operator|+
name|rollsBefore
operator|+
literal|1
operator|+
name|r
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|rollsBefore
operator|+
literal|1
operator|+
name|r
condition|;
name|i
operator|++
control|)
block|{
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
name|generation
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|rollsBefore
condition|;
name|i
operator|++
control|)
block|{
name|assertFileDeleted
argument_list|(
name|translog
argument_list|,
name|generation
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|rollsBefore
operator|+
literal|1
init|;
name|i
operator|<=
name|rollsBefore
operator|+
literal|1
operator|+
name|rollsBetween
condition|;
name|i
operator|++
control|)
block|{
name|assertFileIsPresent
argument_list|(
name|translog
argument_list|,
name|generation
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
end_function

unit|}
end_unit

