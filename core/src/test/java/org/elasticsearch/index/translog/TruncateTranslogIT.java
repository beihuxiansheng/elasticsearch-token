begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|NativeFSLockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|stats
operator|.
name|NodesStatsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|MockTerminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|GroupShardsIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|MockEngineFactoryPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|fs
operator|.
name|FsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|engine
operator|.
name|MockEngineSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|CollectionUtils
operator|.
name|iterableAsArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ESIntegTestCase
operator|.
name|Scope
operator|.
name|SUITE
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|)
DECL|class|TruncateTranslogIT
specifier|public
class|class
name|TruncateTranslogIT
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|MockTransportService
operator|.
name|TestPlugin
operator|.
name|class
argument_list|,
name|MockEngineFactoryPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|testCorruptTranslogTruncation
specifier|public
name|void
name|testCorruptTranslogTruncation
parameter_list|()
throws|throws
name|Exception
block|{
name|internalCluster
argument_list|()
operator|.
name|startNodes
argument_list|(
literal|1
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.refresh_interval"
argument_list|,
literal|"-1"
argument_list|)
operator|.
name|put
argument_list|(
name|MockEngineSupport
operator|.
name|DISABLE_FLUSH_ON_CLOSE
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
comment|// never flush - always recover from translog
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
comment|// Index some documents
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|100
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|builders
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|builders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|builders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
name|disableTranslogFlush
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|builders
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|translogDirs
init|=
name|getTranslogDirs
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|TruncateTranslogCommand
name|ttc
init|=
operator|new
name|TruncateTranslogCommand
argument_list|()
decl_stmt|;
name|MockTerminal
name|t
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
name|OptionParser
name|parser
init|=
name|ttc
operator|.
name|getParser
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|translogDir
range|:
name|translogDirs
control|)
block|{
name|OptionSet
name|options
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"-d"
argument_list|,
name|translogDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"-b"
argument_list|)
decl_stmt|;
comment|// Try running it before the shard is closed, it should flip out because it can't acquire the lock
try|try
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> running truncate while index is open on [{}]"
argument_list|,
name|translogDir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|ttc
operator|.
name|execute
argument_list|(
name|t
argument_list|,
name|options
argument_list|,
literal|null
comment|/* TODO: env should be real here, and ttc should actually use it... */
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected the truncate command to fail not being able to acquire the lock"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Failed to lock shard's directory"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Corrupt the translog file(s)
name|logger
operator|.
name|info
argument_list|(
literal|"--> corrupting translog"
argument_list|)
expr_stmt|;
name|corruptRandomTranslogFiles
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// Restart the single node
name|logger
operator|.
name|info
argument_list|(
literal|"--> restarting node"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|fullRestart
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForYellowStatus
argument_list|()
operator|.
name|setTimeout
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"all shards should be failed due to a corrupted translog"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{
comment|// Good, all shards should be failed because there is only a
comment|// single shard and its translog is corrupt
block|}
comment|// Close the index so we can actually truncate the translog
name|logger
operator|.
name|info
argument_list|(
literal|"--> closing 'test' index"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClose
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|Path
name|translogDir
range|:
name|translogDirs
control|)
block|{
specifier|final
name|Path
name|idxLocation
init|=
name|translogDir
operator|.
name|getParent
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> checking that lock has been released for {}"
argument_list|,
name|idxLocation
argument_list|)
expr_stmt|;
try|try
init|(
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
name|idxLocation
argument_list|,
name|NativeFSLockFactory
operator|.
name|INSTANCE
argument_list|)
init|;
name|Lock
name|writeLock
operator|=
name|dir
operator|.
name|obtainLock
argument_list|(
name|IndexWriter
operator|.
name|WRITE_LOCK_NAME
argument_list|)
init|)
block|{
comment|// Great, do nothing, we just wanted to obtain the lock
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|lofe
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> failed acquiring lock for {}"
argument_list|,
name|idxLocation
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"still waiting for lock release at ["
operator|+
name|idxLocation
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Got an IOException: "
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|OptionSet
name|options
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"-d"
argument_list|,
name|translogDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"-b"
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> running truncate translog command for [{}]"
argument_list|,
name|translogDir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|ttc
operator|.
name|execute
argument_list|(
name|t
argument_list|,
name|options
argument_list|,
literal|null
comment|/* TODO: env should be real here, and ttc should actually use it... */
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> output:\n{}"
argument_list|,
name|t
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Re-open index
name|logger
operator|.
name|info
argument_list|(
literal|"--> opening 'test' index"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOpen
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureYellow
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// Run a search and make sure it succeeds
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
argument_list|(
name|resp
argument_list|)
expr_stmt|;
block|}
DECL|method|getTranslogDirs
specifier|private
name|Set
argument_list|<
name|Path
argument_list|>
name|getTranslogDirs
parameter_list|(
name|String
name|indexName
parameter_list|)
throws|throws
name|IOException
block|{
name|ClusterState
name|state
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|GroupShardsIterator
name|shardIterators
init|=
name|state
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|indexName
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Index
name|idx
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ShardIterator
argument_list|>
name|iterators
init|=
name|iterableAsArrayList
argument_list|(
name|shardIterators
argument_list|)
decl_stmt|;
name|ShardIterator
name|shardIterator
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|iterators
argument_list|)
decl_stmt|;
name|ShardRouting
name|shardRouting
init|=
name|shardIterator
operator|.
name|nextOrNull
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|shardRouting
operator|.
name|primary
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|shardRouting
operator|.
name|assignedToNode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|nodeId
init|=
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
decl_stmt|;
name|NodesStatsResponse
name|nodeStatses
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesStats
argument_list|(
name|nodeId
argument_list|)
operator|.
name|setFs
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|translogDirs
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// treeset makes sure iteration order is deterministic
for|for
control|(
name|FsInfo
operator|.
name|Path
name|fsPath
range|:
name|nodeStatses
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFs
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|fsPath
operator|.
name|getPath
argument_list|()
decl_stmt|;
specifier|final
name|String
name|relativeDataLocationPath
init|=
literal|"indices/"
operator|+
name|idx
operator|.
name|getUUID
argument_list|()
operator|+
literal|"/"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|shardRouting
operator|.
name|getId
argument_list|()
argument_list|)
operator|+
literal|"/translog"
decl_stmt|;
name|Path
name|translogPath
init|=
name|PathUtils
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|.
name|resolve
argument_list|(
name|relativeDataLocationPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|translogPath
argument_list|)
condition|)
block|{
name|translogDirs
operator|.
name|add
argument_list|(
name|translogPath
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|translogDirs
return|;
block|}
DECL|method|corruptRandomTranslogFiles
specifier|private
name|void
name|corruptRandomTranslogFiles
parameter_list|(
name|String
name|indexName
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|Path
argument_list|>
name|translogDirs
init|=
name|getTranslogDirs
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|files
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// treeset makes sure iteration order is deterministic
for|for
control|(
name|Path
name|translogDir
range|:
name|translogDirs
control|)
block|{
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|translogDir
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> path: {}"
argument_list|,
name|translogDir
argument_list|)
expr_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|translogDir
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|item
range|:
name|stream
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> File: {}"
argument_list|,
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|Files
operator|.
name|isRegularFile
argument_list|(
name|item
argument_list|)
operator|&&
name|item
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"translog-"
argument_list|)
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|Path
name|fileToCorrupt
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|corruptions
init|=
name|randomIntBetween
argument_list|(
literal|5
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|corruptions
condition|;
name|i
operator|++
control|)
block|{
name|fileToCorrupt
operator|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|files
argument_list|)
expr_stmt|;
try|try
init|(
name|FileChannel
name|raf
init|=
name|FileChannel
operator|.
name|open
argument_list|(
name|fileToCorrupt
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
init|)
block|{
comment|// read
name|raf
operator|.
name|position
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|raf
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|filePointer
init|=
name|raf
operator|.
name|position
argument_list|()
decl_stmt|;
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|raf
operator|.
name|read
argument_list|(
name|bb
argument_list|)
expr_stmt|;
name|bb
operator|.
name|flip
argument_list|()
expr_stmt|;
comment|// corrupt
name|byte
name|oldValue
init|=
name|bb
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
name|newValue
init|=
call|(
name|byte
call|)
argument_list|(
name|oldValue
operator|+
literal|1
argument_list|)
decl_stmt|;
name|bb
operator|.
name|put
argument_list|(
literal|0
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
comment|// rewrite
name|raf
operator|.
name|position
argument_list|(
name|filePointer
argument_list|)
expr_stmt|;
name|raf
operator|.
name|write
argument_list|(
name|bb
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> corrupting file {} --  flipping at position {} from {} to {} file: {}"
argument_list|,
name|fileToCorrupt
argument_list|,
name|filePointer
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|oldValue
argument_list|)
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|newValue
argument_list|)
argument_list|,
name|fileToCorrupt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertThat
argument_list|(
literal|"no file corrupted"
argument_list|,
name|fileToCorrupt
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Disables translog flushing for the specified index */
DECL|method|disableTranslogFlush
specifier|private
specifier|static
name|void
name|disableTranslogFlush
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|1
argument_list|,
name|ByteSizeUnit
operator|.
name|PB
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|index
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

