begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|snapshots
operator|.
name|create
operator|.
name|CreateSnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|snapshots
operator|.
name|restore
operator|.
name|RestoreSnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShadowIndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalTestCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests for indices that use shadow replicas and a shared filesystem  */
end_comment

begin_class
annotation|@
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ElasticsearchIntegrationTest
operator|.
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|)
DECL|class|IndexWithShadowReplicasTests
specifier|public
class|class
name|IndexWithShadowReplicasTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|method|nodeSettings
specifier|private
name|Settings
name|nodeSettings
parameter_list|()
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.add_id_to_custom_path"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.enable_custom_paths"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.store.fs.fs_lock"
argument_list|,
name|randomFrom
argument_list|(
literal|"native"
argument_list|,
literal|"simple"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Tests the case where we create an index without shadow replicas, snapshot it and then restore into      * an index with shadow replicas enabled.      */
DECL|method|testRestoreToShadow
specifier|public
name|void
name|testRestoreToShadow
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|Settings
name|nodeSettings
init|=
name|nodeSettings
argument_list|()
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
literal|3
argument_list|,
name|nodeSettings
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|dataPath
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Settings
name|idxSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|idxSettings
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"foo"
argument_list|,
literal|"doc"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|assertNoFailures
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|()
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
operator|.
name|setWaitIfOngoing
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutRepository
argument_list|(
literal|"test-repo"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"fs"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
name|randomRepoPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CreateSnapshotResponse
name|createSnapshotResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareCreateSnapshot
argument_list|(
literal|"test-repo"
argument_list|,
literal|"test-snap"
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|setIndices
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|createSnapshotResponse
operator|.
name|getSnapshotInfo
argument_list|()
operator|.
name|successfulShards
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|createSnapshotResponse
operator|.
name|getSnapshotInfo
argument_list|()
operator|.
name|successfulShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|createSnapshotResponse
operator|.
name|getSnapshotInfo
argument_list|()
operator|.
name|totalShards
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetSnapshots
argument_list|(
literal|"test-repo"
argument_list|)
operator|.
name|setSnapshots
argument_list|(
literal|"test-snap"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getSnapshots
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|SnapshotState
operator|.
name|SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
name|Settings
name|shadowSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|dataPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHADOW_REPLICAS
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHARED_FILESYSTEM
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> restore the index into shadow replica index"
argument_list|)
expr_stmt|;
name|RestoreSnapshotResponse
name|restoreSnapshotResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareRestoreSnapshot
argument_list|(
literal|"test-repo"
argument_list|,
literal|"test-snap"
argument_list|)
operator|.
name|setIndexSettings
argument_list|(
name|shadowSettings
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|setRenamePattern
argument_list|(
literal|"(.+)"
argument_list|)
operator|.
name|setRenameReplacement
argument_list|(
literal|"$1-copy"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|restoreSnapshotResponse
operator|.
name|getRestoreInfo
argument_list|()
operator|.
name|totalShards
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|IndicesService
name|service
range|:
name|internalCluster
argument_list|()
operator|.
name|getDataNodeInstances
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|service
operator|.
name|hasIndex
argument_list|(
literal|"foo-copy"
argument_list|)
condition|)
block|{
name|IndexShard
name|shard
init|=
name|service
operator|.
name|indexServiceSafe
argument_list|(
literal|"foo-copy"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|shard
operator|.
name|routingEntry
argument_list|()
operator|.
name|primary
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
name|shard
operator|instanceof
name|ShadowIndexShard
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|shard
operator|instanceof
name|ShadowIndexShard
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> performing query"
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"foo-copy"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndexWithFewDocuments
specifier|public
name|void
name|testIndexWithFewDocuments
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|nodeSettings
init|=
name|nodeSettings
argument_list|()
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
literal|3
argument_list|,
name|nodeSettings
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
specifier|final
name|String
name|IDX
init|=
literal|"test"
decl_stmt|;
specifier|final
name|Path
name|dataPath
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Settings
name|idxSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|dataPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHADOW_REPLICAS
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHARED_FILESYSTEM
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|prepareCreate
argument_list|(
name|IDX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|idxSettings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"doc"
argument_list|,
literal|"foo"
argument_list|,
literal|"type=string"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
comment|// So basically, the primary should fail and the replica will need to
comment|// replay the translog, this is what this tests
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Check that we can get doc 1 and 2, because we are doing realtime
comment|// gets and getting from the primary
name|GetResponse
name|gResp1
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setRealtime
argument_list|(
literal|true
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|GetResponse
name|gResp2
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setRealtime
argument_list|(
literal|true
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|gResp1
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gResp2
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|flushAndRefresh
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// Check that we can get doc 1 and 2 without realtime
name|gResp1
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setRealtime
argument_list|(
literal|false
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|gResp2
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setRealtime
argument_list|(
literal|false
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gResp1
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gResp2
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> restarting all nodes"
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> rolling restart"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|rollingRestart
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> full restart"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|fullRestart
argument_list|()
expr_stmt|;
block|}
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|"3"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|flushAndRefresh
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> performing query"
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|IDX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> deleting index"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|IDX
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplicaToPrimaryPromotion
specifier|public
name|void
name|testReplicaToPrimaryPromotion
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|nodeSettings
init|=
name|nodeSettings
argument_list|()
decl_stmt|;
name|String
name|node1
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|nodeSettings
argument_list|)
decl_stmt|;
name|Path
name|dataPath
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|String
name|IDX
init|=
literal|"test"
decl_stmt|;
name|Settings
name|idxSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|dataPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHADOW_REPLICAS
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHARED_FILESYSTEM
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|prepareCreate
argument_list|(
name|IDX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|idxSettings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"doc"
argument_list|,
literal|"foo"
argument_list|,
literal|"type=string"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureYellow
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|GetResponse
name|gResp1
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|GetResponse
name|gResp2
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|gResp1
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|gResp2
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gResp1
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gResp2
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Node1 has the primary, now node2 has the replica
name|String
name|node2
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|nodeSettings
argument_list|)
decl_stmt|;
name|ensureGreen
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|"2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|flushAndRefresh
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> stopping node1 [{}]"
argument_list|,
name|node1
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|InternalTestCluster
operator|.
name|nameFilter
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> performing query"
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|IDX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|gResp1
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|gResp2
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|gResp1
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|gResp2
operator|.
name|toString
argument_list|()
argument_list|,
name|gResp2
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gResp1
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gResp2
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"foobar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"foobar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|gResp1
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|gResp2
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|gResp1
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|gResp2
operator|.
name|toString
argument_list|()
argument_list|,
name|gResp2
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gResp1
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gResp2
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrimaryRelocation
specifier|public
name|void
name|testPrimaryRelocation
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|nodeSettings
init|=
name|nodeSettings
argument_list|()
decl_stmt|;
name|String
name|node1
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|nodeSettings
argument_list|)
decl_stmt|;
name|Path
name|dataPath
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|String
name|IDX
init|=
literal|"test"
decl_stmt|;
name|Settings
name|idxSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|dataPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHADOW_REPLICAS
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHARED_FILESYSTEM
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|prepareCreate
argument_list|(
name|IDX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|idxSettings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"doc"
argument_list|,
literal|"foo"
argument_list|,
literal|"type=string"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureYellow
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|GetResponse
name|gResp1
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|GetResponse
name|gResp2
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|gResp1
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|gResp2
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gResp1
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gResp2
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Node1 has the primary, now node2 has the replica
name|String
name|node2
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|nodeSettings
argument_list|)
decl_stmt|;
name|ensureGreen
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|"2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|flushAndRefresh
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
comment|// now prevent primary from being allocated on node 1 move to node_3
name|String
name|node3
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|nodeSettings
argument_list|)
decl_stmt|;
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.exclude._name"
argument_list|,
name|node1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|IDX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|build
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> performing query"
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|IDX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|gResp1
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|gResp2
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|gResp1
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|gResp2
operator|.
name|toString
argument_list|()
argument_list|,
name|gResp2
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gResp1
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gResp2
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|gResp1
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"_primary"
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|gResp2
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"_primary"
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|gResp1
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|gResp2
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gResp1
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gResp2
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrimaryRelocationWithConcurrentIndexing
specifier|public
name|void
name|testPrimaryRelocationWithConcurrentIndexing
parameter_list|()
throws|throws
name|Throwable
block|{
name|Settings
name|nodeSettings
init|=
name|nodeSettings
argument_list|()
decl_stmt|;
name|String
name|node1
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|nodeSettings
argument_list|)
decl_stmt|;
name|Path
name|dataPath
init|=
name|createTempDir
argument_list|()
decl_stmt|;
specifier|final
name|String
name|IDX
init|=
literal|"test"
decl_stmt|;
name|Settings
name|idxSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|dataPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHADOW_REPLICAS
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHARED_FILESYSTEM
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|prepareCreate
argument_list|(
name|IDX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|idxSettings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"doc"
argument_list|,
literal|"foo"
argument_list|,
literal|"type=string"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureYellow
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
comment|// Node1 has the primary, now node2 has the replica
name|String
name|node2
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|nodeSettings
argument_list|)
decl_stmt|;
name|ensureGreen
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|flushAndRefresh
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|String
name|node3
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|nodeSettings
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|started
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numPhase1Docs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|25
argument_list|,
literal|200
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numPhase2Docs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|25
argument_list|,
literal|200
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|phase1finished
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|phase2finished
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
name|exceptions
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|started
operator|.
name|countDown
argument_list|()
expr_stmt|;
while|while
condition|(
name|counter
operator|.
name|get
argument_list|()
operator|<
operator|(
name|numPhase1Docs
operator|+
name|numPhase2Docs
operator|)
condition|)
block|{
try|try
block|{
specifier|final
name|IndexResponse
name|indexResponse
init|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|counter
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|indexResponse
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|docCount
init|=
name|counter
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|docCount
operator|==
name|numPhase1Docs
condition|)
block|{
name|phase1finished
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> stopping indexing thread"
argument_list|)
expr_stmt|;
name|phase2finished
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|started
operator|.
name|await
argument_list|()
expr_stmt|;
name|phase1finished
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// wait for a certain number of documents to be indexed
name|logger
operator|.
name|info
argument_list|(
literal|"--> excluding {} from allocation"
argument_list|,
name|node1
argument_list|)
expr_stmt|;
comment|// now prevent primary from being allocated on node 1 move to node_3
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.exclude._name"
argument_list|,
name|node1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|IDX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|build
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// wait for more documents to be indexed post-recovery, also waits for
comment|// indexing thread to stop
name|phase2finished
operator|.
name|await
argument_list|()
expr_stmt|;
name|ExceptionsHelper
operator|.
name|rethrowAndSuppress
argument_list|(
name|exceptions
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> performing query"
argument_list|)
expr_stmt|;
name|flushAndRefresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|IDX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
name|numPhase1Docs
operator|+
name|numPhase2Docs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrimaryRelocationWhereRecoveryFails
specifier|public
name|void
name|testPrimaryRelocationWhereRecoveryFails
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.add_id_to_custom_path"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.enable_custom_paths"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|TransportModule
operator|.
name|TRANSPORT_SERVICE_TYPE_KEY
argument_list|,
name|MockTransportService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|node1
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|nodeSettings
argument_list|)
decl_stmt|;
name|Path
name|dataPath
init|=
name|createTempDir
argument_list|()
decl_stmt|;
specifier|final
name|String
name|IDX
init|=
literal|"test"
decl_stmt|;
name|Settings
name|idxSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|dataPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHADOW_REPLICAS
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHARED_FILESYSTEM
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|prepareCreate
argument_list|(
name|IDX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|idxSettings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"doc"
argument_list|,
literal|"foo"
argument_list|,
literal|"type=string"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureYellow
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
comment|// Node1 has the primary, now node2 has the replica
name|String
name|node2
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|nodeSettings
argument_list|)
decl_stmt|;
name|ensureGreen
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|flushAndRefresh
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|String
name|node3
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|nodeSettings
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|started
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numPhase1Docs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|25
argument_list|,
literal|200
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numPhase2Docs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|25
argument_list|,
literal|200
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numPhase3Docs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|25
argument_list|,
literal|200
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|phase1finished
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|phase2finished
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|phase3finished
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|keepFailing
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|MockTransportService
name|mockTransportService
init|=
operator|(
operator|(
name|MockTransportService
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|,
name|node1
argument_list|)
operator|)
decl_stmt|;
name|mockTransportService
operator|.
name|addDelegate
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Discovery
operator|.
name|class
argument_list|,
name|node3
argument_list|)
operator|.
name|localNode
argument_list|()
argument_list|,
operator|new
name|MockTransportService
operator|.
name|DelegateTransport
argument_list|(
name|mockTransportService
operator|.
name|original
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|sendRequest
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|,
name|TransportRequest
name|request
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransportException
block|{
if|if
condition|(
name|keepFailing
operator|.
name|get
argument_list|()
operator|&&
name|action
operator|.
name|equals
argument_list|(
name|RecoveryTarget
operator|.
name|Actions
operator|.
name|TRANSLOG_OPS
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> failing translog ops"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failing on purpose"
argument_list|)
throw|;
block|}
name|super
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|requestId
argument_list|,
name|action
argument_list|,
name|request
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|started
operator|.
name|countDown
argument_list|()
expr_stmt|;
while|while
condition|(
name|counter
operator|.
name|get
argument_list|()
operator|<
operator|(
name|numPhase1Docs
operator|+
name|numPhase2Docs
operator|+
name|numPhase3Docs
operator|)
condition|)
block|{
specifier|final
name|IndexResponse
name|indexResponse
init|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|counter
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|indexResponse
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|docCount
init|=
name|counter
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|docCount
operator|==
name|numPhase1Docs
condition|)
block|{
name|phase1finished
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|docCount
operator|==
operator|(
name|numPhase1Docs
operator|+
name|numPhase2Docs
operator|)
condition|)
block|{
name|phase2finished
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> stopping indexing thread"
argument_list|)
expr_stmt|;
name|phase3finished
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|started
operator|.
name|await
argument_list|()
expr_stmt|;
name|phase1finished
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// wait for a certain number of documents to be indexed
name|logger
operator|.
name|info
argument_list|(
literal|"--> excluding {} from allocation"
argument_list|,
name|node1
argument_list|)
expr_stmt|;
comment|// now prevent primary from being allocated on node 1 move to node_3
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.exclude._name"
argument_list|,
name|node1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|IDX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|build
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// wait for more documents to be indexed post-recovery, also waits for
comment|// indexing thread to stop
name|phase2finished
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// stop failing
name|keepFailing
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// wait for more docs to be indexed
name|phase3finished
operator|.
name|await
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> performing query"
argument_list|)
expr_stmt|;
name|flushAndRefresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|IDX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndexWithShadowReplicasCleansUp
specifier|public
name|void
name|testIndexWithShadowReplicasCleansUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|nodeSettings
init|=
name|nodeSettings
argument_list|()
decl_stmt|;
name|int
name|nodeCount
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
name|nodeCount
argument_list|,
name|nodeSettings
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Path
name|dataPath
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|String
name|IDX
init|=
literal|"test"
decl_stmt|;
name|Settings
name|idxSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|nodeCount
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|dataPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHADOW_REPLICAS
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHARED_FILESYSTEM
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|prepareCreate
argument_list|(
name|IDX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|idxSettings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"doc"
argument_list|,
literal|"foo"
argument_list|,
literal|"type=string"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|flushAndRefresh
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|GetResponse
name|gResp1
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|GetResponse
name|gResp2
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|gResp1
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gResp2
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> performing query"
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|IDX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|IDX
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathHasBeenCleared
argument_list|(
name|dataPath
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that shadow replicas can be "naturally" rebalanced and relocated      * around the cluster. By "naturally" I mean without using the reroute API      * @throws Exception      */
annotation|@
name|Test
DECL|method|testShadowReplicaNaturalRelocation
specifier|public
name|void
name|testShadowReplicaNaturalRelocation
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|nodeSettings
init|=
name|nodeSettings
argument_list|()
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
literal|2
argument_list|,
name|nodeSettings
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Path
name|dataPath
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|String
name|IDX
init|=
literal|"test"
decl_stmt|;
name|Settings
name|idxSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|5
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|dataPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHADOW_REPLICAS
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHARED_FILESYSTEM
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|prepareCreate
argument_list|(
name|IDX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|idxSettings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"doc"
argument_list|,
literal|"foo"
argument_list|,
literal|"type=string"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|int
name|docCount
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docCount
condition|;
name|i
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
name|i
operator|+
literal|""
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|flushAndRefresh
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
comment|// start a third node, with 5 shards each on the other nodes, they
comment|// should relocate some to the third node
specifier|final
name|String
name|node3
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|nodeSettings
argument_list|)
decl_stmt|;
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|"3"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ClusterStateResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|RoutingNodes
name|nodes
init|=
name|resp
operator|.
name|getState
argument_list|()
operator|.
name|getRoutingNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|RoutingNode
name|node
range|:
name|nodes
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> node has {} shards (needs at least 2)"
argument_list|,
name|node
operator|.
name|numberOfOwningShards
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"at least 2 shards on node"
argument_list|,
name|node
operator|.
name|numberOfOwningShards
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> performing query"
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|IDX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
name|docCount
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|IDX
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathHasBeenCleared
argument_list|(
name|dataPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShadowReplicasUsingFieldData
specifier|public
name|void
name|testShadowReplicasUsingFieldData
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|nodeSettings
init|=
name|nodeSettings
argument_list|()
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
literal|3
argument_list|,
name|nodeSettings
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Path
name|dataPath
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|String
name|IDX
init|=
literal|"test"
decl_stmt|;
name|Settings
name|idxSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|dataPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHADOW_REPLICAS
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHARED_FILESYSTEM
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|prepareCreate
argument_list|(
name|IDX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|idxSettings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"doc"
argument_list|,
literal|"foo"
argument_list|,
literal|"type=string,index=not_analyzed"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"eggplant"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|flushAndRefresh
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|IDX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addFieldDataField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"foo"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertOrderedSearchHits
argument_list|(
name|resp
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|SearchHit
index|[]
name|hits
init|=
name|resp
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hits
index|[
literal|2
index|]
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"eggplant"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hits
index|[
literal|3
index|]
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** wait until none of the nodes have shards allocated on them */
DECL|method|assertNoShardsOn
specifier|private
name|void
name|assertNoShardsOn
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nodeList
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ClusterStateResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|RoutingNodes
name|nodes
init|=
name|resp
operator|.
name|getState
argument_list|()
operator|.
name|getRoutingNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|RoutingNode
name|node
range|:
name|nodes
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> node {} has {} shards"
argument_list|,
name|node
operator|.
name|node
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|node
operator|.
name|numberOfOwningShards
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeList
operator|.
name|contains
argument_list|(
name|node
operator|.
name|node
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
literal|"no shards on node"
argument_list|,
name|node
operator|.
name|numberOfOwningShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** wait until the node has the specified number of shards allocated on it */
DECL|method|assertShardCountOn
specifier|private
name|void
name|assertShardCountOn
parameter_list|(
specifier|final
name|String
name|nodeName
parameter_list|,
specifier|final
name|int
name|shardCount
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ClusterStateResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|RoutingNodes
name|nodes
init|=
name|resp
operator|.
name|getState
argument_list|()
operator|.
name|getRoutingNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|RoutingNode
name|node
range|:
name|nodes
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> node {} has {} shards"
argument_list|,
name|node
operator|.
name|node
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|node
operator|.
name|numberOfOwningShards
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeName
operator|.
name|equals
argument_list|(
name|node
operator|.
name|node
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|node
operator|.
name|numberOfOwningShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shardCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndexOnSharedFSRecoversToAnyNode
specifier|public
name|void
name|testIndexOnSharedFSRecoversToAnyNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|nodeSettings
init|=
name|nodeSettings
argument_list|()
decl_stmt|;
name|Settings
name|fooSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|nodeSettings
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.affinity"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Settings
name|barSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|nodeSettings
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.affinity"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Future
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|fooNodes
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
literal|2
argument_list|,
name|fooSettings
argument_list|)
decl_stmt|;
specifier|final
name|Future
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|barNodes
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
literal|2
argument_list|,
name|barSettings
argument_list|)
decl_stmt|;
name|fooNodes
operator|.
name|get
argument_list|()
expr_stmt|;
name|barNodes
operator|.
name|get
argument_list|()
expr_stmt|;
name|Path
name|dataPath
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|String
name|IDX
init|=
literal|"test"
decl_stmt|;
name|Settings
name|includeFoo
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.include.affinity"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Settings
name|includeBar
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.include.affinity"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Settings
name|idxSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|5
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|dataPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHARED_FILESYSTEM
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|includeFoo
argument_list|)
comment|// start with requiring the shards on "foo"
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// only one node, so all primaries will end up on node1
name|prepareCreate
argument_list|(
name|IDX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|idxSettings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"doc"
argument_list|,
literal|"foo"
argument_list|,
literal|"type=string,index=not_analyzed"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
comment|// Index some documents
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|IDX
argument_list|,
literal|"doc"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"eggplant"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|flushAndRefresh
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
comment|// put shards on "bar"
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|IDX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|includeBar
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// wait for the shards to move from "foo" nodes to "bar" nodes
name|assertNoShardsOn
argument_list|(
name|fooNodes
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// put shards back on "foo"
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|IDX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|includeFoo
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// wait for the shards to move from "bar" nodes to "foo" nodes
name|assertNoShardsOn
argument_list|(
name|barNodes
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Stop a foo node
name|logger
operator|.
name|info
argument_list|(
literal|"--> stopping first 'foo' node"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|InternalTestCluster
operator|.
name|nameFilter
argument_list|(
name|fooNodes
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure that the other foo node has all the shards now
name|assertShardCountOn
argument_list|(
name|fooNodes
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Assert no shards on the "bar" nodes
name|assertNoShardsOn
argument_list|(
name|barNodes
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Stop the second "foo" node
name|logger
operator|.
name|info
argument_list|(
literal|"--> stopping second 'foo' node"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|InternalTestCluster
operator|.
name|nameFilter
argument_list|(
name|fooNodes
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// The index should still be able to be allocated (on the "bar" nodes),
comment|// all the "foo" nodes are gone
name|ensureGreen
argument_list|(
name|IDX
argument_list|)
expr_stmt|;
comment|// Start another "foo" node and make sure the index moves back
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting additional 'foo' node"
argument_list|)
expr_stmt|;
name|String
name|newFooNode
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|fooSettings
argument_list|)
decl_stmt|;
name|assertShardCountOn
argument_list|(
name|newFooNode
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertNoShardsOn
argument_list|(
name|barNodes
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

