begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|get
operator|.
name|GetMappingsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|BooleanFieldMapper
operator|.
name|BooleanFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DateFieldMapper
operator|.
name|DateFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|NumberFieldMapper
operator|.
name|NumberFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|DynamicMappingTests
specifier|public
class|class
name|DynamicMappingTests
extends|extends
name|ESSingleNodeTestCase
block|{
DECL|method|testDynamicTrue
specifier|public
name|void
name|testDynamicTrue
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|defaultMapper
operator|.
name|parse
argument_list|(
name|SourceToParse
operator|.
name|source
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDynamicFalse
specifier|public
name|void
name|testDynamicFalse
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|"false"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|defaultMapper
operator|.
name|parse
argument_list|(
name|SourceToParse
operator|.
name|source
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDynamicStrict
specifier|public
name|void
name|testDynamicStrict
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|"strict"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|StrictDynamicMappingException
name|e
init|=
name|expectThrows
argument_list|(
name|StrictDynamicMappingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|defaultMapper
operator|.
name|parse
argument_list|(
name|SourceToParse
operator|.
name|source
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"mapping set to strict, dynamic introduction of [field2] within [type] is not allowed"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|StrictDynamicMappingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|defaultMapper
operator|.
name|parse
argument_list|(
name|SourceToParse
operator|.
name|source
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"mapping set to strict, dynamic introduction of [field2] within [type] is not allowed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDynamicFalseWithInnerObjectButDynamicSetOnRoot
specifier|public
name|void
name|testDynamicFalseWithInnerObjectButDynamicSetOnRoot
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|"false"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"obj1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|defaultMapper
operator|.
name|parse
argument_list|(
name|SourceToParse
operator|.
name|source
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"obj1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|get
argument_list|(
literal|"obj1.field1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|get
argument_list|(
literal|"obj1.field2"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDynamicStrictWithInnerObjectButDynamicSetOnRoot
specifier|public
name|void
name|testDynamicStrictWithInnerObjectButDynamicSetOnRoot
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|"strict"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"obj1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|StrictDynamicMappingException
name|e
init|=
name|expectThrows
argument_list|(
name|StrictDynamicMappingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|defaultMapper
operator|.
name|parse
argument_list|(
name|SourceToParse
operator|.
name|source
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"obj1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"mapping set to strict, dynamic introduction of [field2] within [obj1] is not allowed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDynamicMappingOnEmptyString
specifier|public
name|void
name|testDynamicMappingOnEmptyString
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexService
name|service
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"empty_field"
argument_list|,
literal|""
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|MappedFieldType
name|fieldType
init|=
name|service
operator|.
name|mapperService
argument_list|()
operator|.
name|fullName
argument_list|(
literal|"empty_field"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldType
argument_list|)
expr_stmt|;
block|}
DECL|method|testTypeNotCreatedOnIndexFailure
specifier|public
name|void
name|testTypeNotCreatedOnIndexFailure
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"_default_"
argument_list|)
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|"strict"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"_default_"
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|()
operator|.
name|setIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StrictDynamicMappingException
name|e
parameter_list|)
block|{          }
name|GetMappingsResponse
name|getMappingsResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetMappings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|getMappingsResponse
operator|.
name|getMappings
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|serialize
specifier|private
name|String
name|serialize
parameter_list|(
name|ToXContent
name|mapper
parameter_list|)
throws|throws
name|Exception
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
operator|new
name|ToXContent
operator|.
name|MapParams
argument_list|(
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
return|;
block|}
DECL|method|parse
specifier|private
name|Mapper
name|parse
parameter_list|(
name|DocumentMapper
name|mapper
parameter_list|,
name|DocumentMapperParser
name|parser
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|Exception
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SourceToParse
name|source
init|=
name|SourceToParse
operator|.
name|source
argument_list|(
literal|"test"
argument_list|,
name|mapper
operator|.
name|type
argument_list|()
argument_list|,
literal|"some_id"
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
name|builder
operator|.
name|contentType
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|XContentParser
name|xContentParser
init|=
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
name|source
operator|.
name|source
argument_list|()
argument_list|)
init|)
block|{
name|ParseContext
operator|.
name|InternalParseContext
name|ctx
init|=
operator|new
name|ParseContext
operator|.
name|InternalParseContext
argument_list|(
name|settings
argument_list|,
name|parser
argument_list|,
name|mapper
argument_list|,
name|source
argument_list|,
name|xContentParser
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|ctx
operator|.
name|parser
argument_list|()
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|parser
argument_list|()
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|DocumentParser
operator|.
name|parseObjectOrNested
argument_list|(
name|ctx
argument_list|,
name|mapper
operator|.
name|root
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Mapping
name|mapping
init|=
name|DocumentParser
operator|.
name|createDynamicUpdate
argument_list|(
name|mapper
operator|.
name|mapping
argument_list|()
argument_list|,
name|mapper
argument_list|,
name|ctx
operator|.
name|getDynamicMappers
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|mapping
operator|==
literal|null
condition|?
literal|null
else|:
name|mapping
operator|.
name|root
argument_list|()
return|;
block|}
block|}
DECL|method|testDynamicMappingsNotNeeded
specifier|public
name|void
name|testDynamicMappingsNotNeeded
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|DocumentMapperParser
name|parser
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
decl_stmt|;
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|Mapper
name|update
init|=
name|parse
argument_list|(
name|mapper
argument_list|,
name|parser
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
decl_stmt|;
comment|// foo is already defined in the mappings
name|assertNull
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
DECL|method|testField
specifier|public
name|void
name|testField
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|DocumentMapperParser
name|parser
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
decl_stmt|;
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|serialize
argument_list|(
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
name|Mapper
name|update
init|=
name|parse
argument_list|(
name|mapper
argument_list|,
name|parser
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|update
argument_list|)
expr_stmt|;
comment|// original mapping not modified
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|serialize
argument_list|(
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
comment|// but we have an update
name|assertEquals
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_above"
argument_list|,
literal|256
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|serialize
argument_list|(
name|update
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIncremental
specifier|public
name|void
name|testIncremental
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|DocumentMapperParser
name|parser
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
decl_stmt|;
comment|// Make sure that mapping updates are incremental, this is important for performance otherwise
comment|// every new field introduction runs in linear time with the total number of fields
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|serialize
argument_list|(
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
name|Mapper
name|update
init|=
name|parse
argument_list|(
name|mapper
argument_list|,
name|parser
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|update
argument_list|)
expr_stmt|;
comment|// original mapping not modified
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|serialize
argument_list|(
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
comment|// but we have an update
name|assertEquals
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
comment|// foo is NOT in the update
operator|.
name|startObject
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_above"
argument_list|,
literal|256
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|serialize
argument_list|(
name|update
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntroduceTwoFields
specifier|public
name|void
name|testIntroduceTwoFields
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|DocumentMapperParser
name|parser
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
decl_stmt|;
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|serialize
argument_list|(
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
name|Mapper
name|update
init|=
name|parse
argument_list|(
name|mapper
argument_list|,
name|parser
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|update
argument_list|)
expr_stmt|;
comment|// original mapping not modified
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|serialize
argument_list|(
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
comment|// but we have an update
name|assertEquals
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_above"
argument_list|,
literal|256
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_above"
argument_list|,
literal|256
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|serialize
argument_list|(
name|update
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testObject
specifier|public
name|void
name|testObject
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|DocumentMapperParser
name|parser
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
decl_stmt|;
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|serialize
argument_list|(
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
name|Mapper
name|update
init|=
name|parse
argument_list|(
name|mapper
argument_list|,
name|parser
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"baz"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|update
argument_list|)
expr_stmt|;
comment|// original mapping not modified
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|serialize
argument_list|(
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
comment|// but we have an update
name|assertEquals
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_above"
argument_list|,
literal|256
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|serialize
argument_list|(
name|update
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testArray
specifier|public
name|void
name|testArray
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|DocumentMapperParser
name|parser
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
decl_stmt|;
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|serialize
argument_list|(
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
name|Mapper
name|update
init|=
name|parse
argument_list|(
name|mapper
argument_list|,
name|parser
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|value
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|value
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|update
argument_list|)
expr_stmt|;
comment|// original mapping not modified
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|serialize
argument_list|(
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
comment|// but we have an update
name|assertEquals
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_above"
argument_list|,
literal|256
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|serialize
argument_list|(
name|update
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInnerDynamicMapping
specifier|public
name|void
name|testInnerDynamicMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|DocumentMapperParser
name|parser
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
decl_stmt|;
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"object"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|serialize
argument_list|(
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
name|Mapper
name|update
init|=
name|parse
argument_list|(
name|mapper
argument_list|,
name|parser
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"baz"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|update
argument_list|)
expr_stmt|;
comment|// original mapping not modified
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|serialize
argument_list|(
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
comment|// but we have an update
name|assertEquals
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_above"
argument_list|,
literal|256
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|serialize
argument_list|(
name|update
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testComplexArray
specifier|public
name|void
name|testComplexArray
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|DocumentMapperParser
name|parser
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
decl_stmt|;
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|serialize
argument_list|(
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
name|Mapper
name|update
init|=
name|parse
argument_list|(
name|mapper
argument_list|,
name|parser
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"baz"
argument_list|,
literal|3
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|serialize
argument_list|(
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_above"
argument_list|,
literal|256
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"long"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|serialize
argument_list|(
name|update
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testReuseExistingMappings
specifier|public
name|void
name|testReuseExistingMappings
parameter_list|()
throws|throws
name|IOException
throws|,
name|Exception
block|{
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"type"
argument_list|,
literal|"my_field1"
argument_list|,
literal|"type=text,store=true"
argument_list|,
literal|"my_field2"
argument_list|,
literal|"type=integer,store=false"
argument_list|,
literal|"my_field3"
argument_list|,
literal|"type=long,doc_values=false"
argument_list|,
literal|"my_field4"
argument_list|,
literal|"type=float,index=false"
argument_list|,
literal|"my_field5"
argument_list|,
literal|"type=double,store=true"
argument_list|,
literal|"my_field6"
argument_list|,
literal|"type=date,doc_values=false"
argument_list|,
literal|"my_field7"
argument_list|,
literal|"type=boolean,doc_values=false"
argument_list|)
decl_stmt|;
comment|// Even if the dynamic type of our new field is long, we already have a mapping for the same field
comment|// of type string so it should be mapped as a string
name|DocumentMapper
name|newMapper
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperWithAutoCreate
argument_list|(
literal|"type2"
argument_list|)
operator|.
name|getDocumentMapper
argument_list|()
decl_stmt|;
name|Mapper
name|update
init|=
name|parse
argument_list|(
name|newMapper
argument_list|,
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"my_field1"
argument_list|,
literal|42
argument_list|)
operator|.
name|field
argument_list|(
literal|"my_field2"
argument_list|,
literal|43
argument_list|)
operator|.
name|field
argument_list|(
literal|"my_field3"
argument_list|,
literal|44
argument_list|)
operator|.
name|field
argument_list|(
literal|"my_field4"
argument_list|,
literal|45
argument_list|)
operator|.
name|field
argument_list|(
literal|"my_field5"
argument_list|,
literal|46
argument_list|)
operator|.
name|field
argument_list|(
literal|"my_field6"
argument_list|,
literal|47
argument_list|)
operator|.
name|field
argument_list|(
literal|"my_field7"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
decl_stmt|;
name|Mapper
name|myField1Mapper
init|=
literal|null
decl_stmt|;
name|Mapper
name|myField2Mapper
init|=
literal|null
decl_stmt|;
name|Mapper
name|myField3Mapper
init|=
literal|null
decl_stmt|;
name|Mapper
name|myField4Mapper
init|=
literal|null
decl_stmt|;
name|Mapper
name|myField5Mapper
init|=
literal|null
decl_stmt|;
name|Mapper
name|myField6Mapper
init|=
literal|null
decl_stmt|;
name|Mapper
name|myField7Mapper
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Mapper
name|m
range|:
name|update
control|)
block|{
switch|switch
condition|(
name|m
operator|.
name|name
argument_list|()
condition|)
block|{
case|case
literal|"my_field1"
case|:
name|myField1Mapper
operator|=
name|m
expr_stmt|;
break|break;
case|case
literal|"my_field2"
case|:
name|myField2Mapper
operator|=
name|m
expr_stmt|;
break|break;
case|case
literal|"my_field3"
case|:
name|myField3Mapper
operator|=
name|m
expr_stmt|;
break|break;
case|case
literal|"my_field4"
case|:
name|myField4Mapper
operator|=
name|m
expr_stmt|;
break|break;
case|case
literal|"my_field5"
case|:
name|myField5Mapper
operator|=
name|m
expr_stmt|;
break|break;
case|case
literal|"my_field6"
case|:
name|myField6Mapper
operator|=
name|m
expr_stmt|;
break|break;
case|case
literal|"my_field7"
case|:
name|myField7Mapper
operator|=
name|m
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|myField1Mapper
argument_list|)
expr_stmt|;
comment|// same type
name|assertTrue
argument_list|(
name|myField1Mapper
operator|instanceof
name|TextFieldMapper
argument_list|)
expr_stmt|;
comment|// and same option
name|assertTrue
argument_list|(
operator|(
operator|(
name|TextFieldMapper
operator|)
name|myField1Mapper
operator|)
operator|.
name|fieldType
argument_list|()
operator|.
name|stored
argument_list|()
argument_list|)
expr_stmt|;
comment|// Even if dynamic mappings would map a numeric field as a long, here it should map it as a integer
comment|// since we already have a mapping of type integer
name|assertNotNull
argument_list|(
name|myField2Mapper
argument_list|)
expr_stmt|;
comment|// same type
name|assertEquals
argument_list|(
literal|"integer"
argument_list|,
operator|(
operator|(
name|FieldMapper
operator|)
name|myField2Mapper
operator|)
operator|.
name|fieldType
argument_list|()
operator|.
name|typeName
argument_list|()
argument_list|)
expr_stmt|;
comment|// and same option
name|assertFalse
argument_list|(
operator|(
operator|(
name|FieldMapper
operator|)
name|myField2Mapper
operator|)
operator|.
name|fieldType
argument_list|()
operator|.
name|stored
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|myField3Mapper
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|myField3Mapper
operator|instanceof
name|NumberFieldMapper
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
call|(
name|NumberFieldType
call|)
argument_list|(
operator|(
name|NumberFieldMapper
operator|)
name|myField3Mapper
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|myField4Mapper
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|myField4Mapper
operator|instanceof
name|NumberFieldMapper
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IndexOptions
operator|.
name|NONE
argument_list|,
operator|(
operator|(
name|FieldMapper
operator|)
name|myField4Mapper
operator|)
operator|.
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|myField5Mapper
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|myField5Mapper
operator|instanceof
name|NumberFieldMapper
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|NumberFieldMapper
operator|)
name|myField5Mapper
operator|)
operator|.
name|fieldType
argument_list|()
operator|.
name|stored
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|myField6Mapper
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|myField6Mapper
operator|instanceof
name|DateFieldMapper
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
call|(
name|DateFieldType
call|)
argument_list|(
operator|(
name|DateFieldMapper
operator|)
name|myField6Mapper
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|myField7Mapper
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|myField7Mapper
operator|instanceof
name|BooleanFieldMapper
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
call|(
name|BooleanFieldType
call|)
argument_list|(
operator|(
name|BooleanFieldMapper
operator|)
name|myField7Mapper
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
comment|// This can't work
try|try
block|{
name|parse
argument_list|(
name|newMapper
argument_list|,
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"my_field2"
argument_list|,
literal|"foobar"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Cannot succeed, incompatible types"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testMixTemplateMultiFieldAndMappingReuse
specifier|public
name|void
name|testMixTemplateMultiFieldAndMappingReuse
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mappings1
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"dynamic_templates"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"template1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"match_mapping_type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"mapping"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"raw"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|merge
argument_list|(
literal|"type1"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mappings1
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|,
name|MapperService
operator|.
name|MergeReason
operator|.
name|MAPPING_UPDATE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|XContentBuilder
name|mappings2
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type2"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|merge
argument_list|(
literal|"type2"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mappings2
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|,
name|MapperService
operator|.
name|MergeReason
operator|.
name|MAPPING_UPDATE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|XContentBuilder
name|json
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|SourceToParse
name|source
init|=
name|SourceToParse
operator|.
name|source
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
name|json
operator|.
name|bytes
argument_list|()
argument_list|,
name|json
operator|.
name|contentType
argument_list|()
argument_list|)
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapper
argument_list|(
literal|"type1"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|mapper
operator|.
name|mappers
argument_list|()
operator|.
name|getMapper
argument_list|(
literal|"field.raw"
argument_list|)
argument_list|)
expr_stmt|;
name|ParsedDocument
name|parsed
init|=
name|mapper
operator|.
name|parse
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parsed
operator|.
name|dynamicMappingsUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|merge
argument_list|(
literal|"type1"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|parsed
operator|.
name|dynamicMappingsUpdate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|MapperService
operator|.
name|MergeReason
operator|.
name|MAPPING_UPDATE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mapper
operator|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapper
argument_list|(
literal|"type1"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|mapper
operator|.
name|mappers
argument_list|()
operator|.
name|getMapper
argument_list|(
literal|"field.raw"
argument_list|)
argument_list|)
expr_stmt|;
name|parsed
operator|=
name|mapper
operator|.
name|parse
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parsed
operator|.
name|dynamicMappingsUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultFloatingPointMappings
specifier|public
name|void
name|testDefaultFloatingPointMappings
parameter_list|()
throws|throws
name|IOException
block|{
name|MapperService
name|mapperService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
decl_stmt|;
name|String
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|field
argument_list|(
literal|"numeric_detection"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|mapperService
operator|.
name|merge
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|,
name|MapperService
operator|.
name|MergeReason
operator|.
name|MAPPING_UPDATE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DocumentMapper
name|mapper
init|=
name|mapperService
operator|.
name|documentMapper
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|doTestDefaultFloatingPointMappings
argument_list|(
name|mapper
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|doTestDefaultFloatingPointMappings
argument_list|(
name|mapper
argument_list|,
name|XContentFactory
operator|.
name|yamlBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|doTestDefaultFloatingPointMappings
argument_list|(
name|mapper
argument_list|,
name|XContentFactory
operator|.
name|smileBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|doTestDefaultFloatingPointMappings
argument_list|(
name|mapper
argument_list|,
name|XContentFactory
operator|.
name|cborBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestDefaultFloatingPointMappings
specifier|private
name|void
name|doTestDefaultFloatingPointMappings
parameter_list|(
name|DocumentMapper
name|mapper
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesReference
name|source
init|=
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|3.2f
argument_list|)
comment|// float
operator|.
name|field
argument_list|(
literal|"bar"
argument_list|,
literal|3.2d
argument_list|)
comment|// double
operator|.
name|field
argument_list|(
literal|"baz"
argument_list|,
operator|(
name|double
operator|)
literal|3.2f
argument_list|)
comment|// double that can be accurately represented as a float
operator|.
name|field
argument_list|(
literal|"quux"
argument_list|,
literal|"3.2"
argument_list|)
comment|// float detected through numeric detection
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|ParsedDocument
name|parsedDocument
init|=
name|mapper
operator|.
name|parse
argument_list|(
name|SourceToParse
operator|.
name|source
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
name|source
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
decl_stmt|;
name|Mapping
name|update
init|=
name|parsedDocument
operator|.
name|dynamicMappingsUpdate
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|FieldMapper
operator|)
name|update
operator|.
name|root
argument_list|()
operator|.
name|getMapper
argument_list|(
literal|"foo"
argument_list|)
operator|)
operator|.
name|fieldType
argument_list|()
operator|.
name|typeName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"float"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|FieldMapper
operator|)
name|update
operator|.
name|root
argument_list|()
operator|.
name|getMapper
argument_list|(
literal|"bar"
argument_list|)
operator|)
operator|.
name|fieldType
argument_list|()
operator|.
name|typeName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"float"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|FieldMapper
operator|)
name|update
operator|.
name|root
argument_list|()
operator|.
name|getMapper
argument_list|(
literal|"baz"
argument_list|)
operator|)
operator|.
name|fieldType
argument_list|()
operator|.
name|typeName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"float"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|FieldMapper
operator|)
name|update
operator|.
name|root
argument_list|()
operator|.
name|getMapper
argument_list|(
literal|"quux"
argument_list|)
operator|)
operator|.
name|fieldType
argument_list|()
operator|.
name|typeName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"float"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNumericDetectionEnabled
specifier|public
name|void
name|testNumericDetectionEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|field
argument_list|(
literal|"numeric_detection"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|IndexService
name|index
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|mapping
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|index
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapper
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|defaultMapper
operator|.
name|parse
argument_list|(
name|SourceToParse
operator|.
name|source
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"s_long"
argument_list|,
literal|"100"
argument_list|)
operator|.
name|field
argument_list|(
literal|"s_double"
argument_list|,
literal|"100.0"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
operator|.
name|dynamicMappingsUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|doc
operator|.
name|dynamicMappingsUpdate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|defaultMapper
operator|=
name|index
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapper
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|FieldMapper
name|mapper
init|=
name|defaultMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartNameFieldMapper
argument_list|(
literal|"s_long"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|mapper
operator|.
name|fieldType
argument_list|()
operator|.
name|typeName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"long"
argument_list|)
argument_list|)
expr_stmt|;
name|mapper
operator|=
name|defaultMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartNameFieldMapper
argument_list|(
literal|"s_double"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapper
operator|.
name|fieldType
argument_list|()
operator|.
name|typeName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"float"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNumericDetectionDefault
specifier|public
name|void
name|testNumericDetectionDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|IndexService
name|index
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|mapping
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|index
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapper
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|defaultMapper
operator|.
name|parse
argument_list|(
name|SourceToParse
operator|.
name|source
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"s_long"
argument_list|,
literal|"100"
argument_list|)
operator|.
name|field
argument_list|(
literal|"s_double"
argument_list|,
literal|"100.0"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
operator|.
name|dynamicMappingsUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|doc
operator|.
name|dynamicMappingsUpdate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|defaultMapper
operator|=
name|index
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapper
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|FieldMapper
name|mapper
init|=
name|defaultMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartNameFieldMapper
argument_list|(
literal|"s_long"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|mapper
argument_list|,
name|instanceOf
argument_list|(
name|TextFieldMapper
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|mapper
operator|=
name|defaultMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartNameFieldMapper
argument_list|(
literal|"s_double"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mapper
argument_list|,
name|instanceOf
argument_list|(
name|TextFieldMapper
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDateDetectionInheritsFormat
specifier|public
name|void
name|testDateDetectionInheritsFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"dynamic_date_formats"
argument_list|)
operator|.
name|value
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"dynamic_templates"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"dates"
argument_list|)
operator|.
name|field
argument_list|(
literal|"match_mapping_type"
argument_list|,
literal|"date"
argument_list|)
operator|.
name|field
argument_list|(
literal|"match"
argument_list|,
literal|"*2"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"mapping"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"dates"
argument_list|)
operator|.
name|field
argument_list|(
literal|"match_mapping_type"
argument_list|,
literal|"date"
argument_list|)
operator|.
name|field
argument_list|(
literal|"match"
argument_list|,
literal|"*3"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"mapping"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"yyyy-MM-dd||epoch_millis"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|IndexService
name|index
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|mapping
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|index
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapper
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|defaultMapper
operator|.
name|parse
argument_list|(
name|SourceToParse
operator|.
name|source
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"date1"
argument_list|,
literal|"2016-11-20"
argument_list|)
operator|.
name|field
argument_list|(
literal|"date2"
argument_list|,
literal|"2016-11-20"
argument_list|)
operator|.
name|field
argument_list|(
literal|"date3"
argument_list|,
literal|"2016-11-20"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
operator|.
name|dynamicMappingsUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|doc
operator|.
name|dynamicMappingsUpdate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|defaultMapper
operator|=
name|index
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapper
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|DateFieldMapper
name|dateMapper1
init|=
operator|(
name|DateFieldMapper
operator|)
name|defaultMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartNameFieldMapper
argument_list|(
literal|"date1"
argument_list|)
decl_stmt|;
name|DateFieldMapper
name|dateMapper2
init|=
operator|(
name|DateFieldMapper
operator|)
name|defaultMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartNameFieldMapper
argument_list|(
literal|"date2"
argument_list|)
decl_stmt|;
name|DateFieldMapper
name|dateMapper3
init|=
operator|(
name|DateFieldMapper
operator|)
name|defaultMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartNameFieldMapper
argument_list|(
literal|"date3"
argument_list|)
decl_stmt|;
comment|// inherited from dynamic date format
name|assertEquals
argument_list|(
literal|"yyyy-MM-dd"
argument_list|,
name|dateMapper1
operator|.
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
comment|// inherited from dynamic date format since the mapping in the template did not specify a format
name|assertEquals
argument_list|(
literal|"yyyy-MM-dd"
argument_list|,
name|dateMapper2
operator|.
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
comment|// not inherited from the dynamic date format since the template defined an explicit format
name|assertEquals
argument_list|(
literal|"yyyy-MM-dd||epoch_millis"
argument_list|,
name|dateMapper3
operator|.
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDynamicTemplateOrder
specifier|public
name|void
name|testDynamicTemplateOrder
parameter_list|()
throws|throws
name|IOException
block|{
comment|// https://github.com/elastic/elasticsearch/issues/18625
comment|// elasticsearch used to apply templates that do not have a match_mapping_type first
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"dynamic_templates"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type-based"
argument_list|)
operator|.
name|field
argument_list|(
literal|"match_mapping_type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"mapping"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"path-based"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path_match"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"mapping"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"long"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|IndexService
name|index
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"type"
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|mapperService
argument_list|()
operator|.
name|fullName
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|KeywordFieldMapper
operator|.
name|KeywordFieldType
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

