begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValuesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|get
operator|.
name|GetMappingsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapper
operator|.
name|BuilderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|StringFieldMapper
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|StringFieldMapper
operator|.
name|StringFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalSettingsPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|LegacyStringMappingTests
specifier|public
class|class
name|LegacyStringMappingTests
extends|extends
name|ESSingleNodeTestCase
block|{
annotation|@
name|Override
DECL|method|getPlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|getPlugins
parameter_list|()
block|{
return|return
name|pluginList
argument_list|(
name|InternalSettingsPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|field|indexService
name|IndexService
name|indexService
decl_stmt|;
DECL|field|parser
name|DocumentMapperParser
name|parser
decl_stmt|;
annotation|@
name|Before
DECL|method|before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|indexService
operator|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
comment|// we need 2.x since string is deprecated in 5.0
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_2_3_0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
expr_stmt|;
block|}
DECL|method|testLimit
specifier|public
name|void
name|testLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_above"
argument_list|,
literal|5
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"12345"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"123456"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDefaultAnalyzedFieldType
specifier|private
name|void
name|assertDefaultAnalyzedFieldType
parameter_list|(
name|IndexableFieldType
name|fieldType
parameter_list|)
block|{
name|assertThat
argument_list|(
name|fieldType
operator|.
name|omitNorms
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|indexOptions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|storeTermVectors
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|storeTermVectorOffsets
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|storeTermVectorPositions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|storeTermVectorPayloads
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEquals
specifier|private
name|void
name|assertEquals
parameter_list|(
name|IndexableFieldType
name|ft1
parameter_list|,
name|IndexableFieldType
name|ft2
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ft1
operator|.
name|tokenized
argument_list|()
argument_list|,
name|ft2
operator|.
name|tokenized
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ft1
operator|.
name|omitNorms
argument_list|()
argument_list|,
name|ft2
operator|.
name|omitNorms
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ft1
operator|.
name|indexOptions
argument_list|()
argument_list|,
name|ft2
operator|.
name|indexOptions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ft1
operator|.
name|storeTermVectors
argument_list|()
argument_list|,
name|ft2
operator|.
name|storeTermVectors
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ft1
operator|.
name|docValuesType
argument_list|()
argument_list|,
name|ft2
operator|.
name|docValuesType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertParseIdemPotent
specifier|private
name|void
name|assertParseIdemPotent
parameter_list|(
name|IndexableFieldType
name|expected
parameter_list|,
name|DocumentMapper
name|mapper
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|mapper
operator|.
name|toXContent
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
argument_list|,
operator|new
name|ToXContent
operator|.
name|MapParams
argument_list|(
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|mapper
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|mapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"2345"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field"
argument_list|)
operator|.
name|fieldType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultsForAnalyzed
specifier|public
name|void
name|testDefaultsForAnalyzed
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|IndexableFieldType
name|fieldType
init|=
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field"
argument_list|)
operator|.
name|fieldType
argument_list|()
decl_stmt|;
name|assertDefaultAnalyzedFieldType
argument_list|(
name|fieldType
argument_list|)
expr_stmt|;
name|assertParseIdemPotent
argument_list|(
name|fieldType
argument_list|,
name|defaultMapper
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultsForNotAnalyzed
specifier|public
name|void
name|testDefaultsForNotAnalyzed
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|IndexableFieldType
name|fieldType
init|=
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field"
argument_list|)
operator|.
name|fieldType
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|omitNorms
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|indexOptions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|storeTermVectors
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|storeTermVectorOffsets
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|storeTermVectorPositions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|storeTermVectorPayloads
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertParseIdemPotent
argument_list|(
name|fieldType
argument_list|,
name|defaultMapper
argument_list|)
expr_stmt|;
comment|// now test it explicitly set
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"norms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"freqs"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|defaultMapper
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|fieldType
operator|=
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field"
argument_list|)
operator|.
name|fieldType
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|omitNorms
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|indexOptions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|storeTermVectors
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|storeTermVectorOffsets
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|storeTermVectorPositions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|storeTermVectorPayloads
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertParseIdemPotent
argument_list|(
name|fieldType
argument_list|,
name|defaultMapper
argument_list|)
expr_stmt|;
comment|// also test the deprecated omit_norms
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|field
argument_list|(
literal|"omit_norms"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|defaultMapper
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|fieldType
operator|=
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field"
argument_list|)
operator|.
name|fieldType
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|omitNorms
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertParseIdemPotent
argument_list|(
name|fieldType
argument_list|,
name|defaultMapper
argument_list|)
expr_stmt|;
block|}
DECL|method|testSearchQuoteAnalyzerSerialization
specifier|public
name|void
name|testSearchQuoteAnalyzerSerialization
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Cases where search_quote_analyzer should not be added to the mapping.
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"position_increment_gap"
argument_list|,
literal|1000
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"position_increment_gap"
argument_list|,
literal|1000
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field3"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"position_increment_gap"
argument_list|,
literal|1000
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"simple"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field4"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"position_increment_gap"
argument_list|,
literal|1000
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"simple"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_quote_analyzer"
argument_list|,
literal|"simple"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"field1"
argument_list|,
literal|"field2"
argument_list|,
literal|"field3"
argument_list|,
literal|"field4"
argument_list|)
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|serializedMap
init|=
name|getSerializedMap
argument_list|(
name|fieldName
argument_list|,
name|mapper
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|fieldName
argument_list|,
name|serializedMap
operator|.
name|containsKey
argument_list|(
literal|"search_quote_analyzer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Cases where search_quote_analyzer should be present.
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"position_increment_gap"
argument_list|,
literal|1000
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_quote_analyzer"
argument_list|,
literal|"simple"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|mapper
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|serializedMap
init|=
name|getSerializedMap
argument_list|(
literal|"field"
argument_list|,
name|mapper
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|serializedMap
operator|.
name|get
argument_list|(
literal|"search_quote_analyzer"
argument_list|)
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSearchAnalyzerSerialization
specifier|public
name|void
name|testSearchAnalyzerSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|mapper
operator|.
name|mappingSource
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// special case: default index analyzer
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"default"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|mapper
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|mapper
operator|.
name|mappingSource
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// special case: default search analyzer
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|mapper
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|mapper
operator|.
name|mappingSource
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// special case: default search analyzer
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"default"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|mapper
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|mapper
operator|.
name|mappingSource
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|mapper
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|mapper
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
operator|new
name|ToXContent
operator|.
name|MapParams
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"include_defaults"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|String
name|mappingString
init|=
name|builder
operator|.
name|string
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|mappingString
operator|.
name|contains
argument_list|(
literal|"analyzer"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mappingString
operator|.
name|contains
argument_list|(
literal|"search_analyzer"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mappingString
operator|.
name|contains
argument_list|(
literal|"search_quote_analyzer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getSerializedMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSerializedMap
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|DocumentMapper
name|mapper
parameter_list|)
throws|throws
name|Exception
block|{
name|FieldMapper
name|fieldMapper
init|=
name|mapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartNameFieldMapper
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
decl_stmt|;
name|fieldMapper
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|close
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fieldMap
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|JsonXContent
operator|.
name|jsonXContent
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
init|)
block|{
name|fieldMap
operator|=
name|parser
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|fieldMap
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
DECL|method|testTermVectors
specifier|public
name|void
name|testTermVectors
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field3"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field4"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field5"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field6"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets_payloads"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field3"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field4"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field5"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field6"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectors
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorOffsets
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorPositions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorPayloads
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectors
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorOffsets
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorPositions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorPayloads
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field3"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectors
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field3"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorOffsets
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field3"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorPositions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field3"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorPayloads
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field4"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectors
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field4"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorOffsets
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field4"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorPositions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field4"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorPayloads
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field5"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectors
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field5"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorOffsets
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field5"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorPositions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field5"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorPayloads
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field6"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectors
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field6"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorOffsets
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field6"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorPositions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field6"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorPayloads
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocValues
specifier|public
name|void
name|testDocValues
parameter_list|()
throws|throws
name|Exception
block|{
comment|// doc values only work on non-analyzed content
specifier|final
name|BuilderContext
name|ctx
init|=
operator|new
name|BuilderContext
argument_list|(
name|indexService
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getSettings
argument_list|()
argument_list|,
operator|new
name|ContentPath
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|StringFieldMapper
operator|.
name|Builder
argument_list|(
literal|"anything"
argument_list|)
operator|.
name|docValues
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|/* OK */
block|}
name|assertFalse
argument_list|(
operator|new
name|Builder
argument_list|(
literal|"anything"
argument_list|)
operator|.
name|index
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|(
name|ctx
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|Builder
argument_list|(
literal|"anything"
argument_list|)
operator|.
name|index
argument_list|(
literal|true
argument_list|)
operator|.
name|tokenized
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|(
name|ctx
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|Builder
argument_list|(
literal|"anything"
argument_list|)
operator|.
name|index
argument_list|(
literal|true
argument_list|)
operator|.
name|tokenized
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|(
name|ctx
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|Builder
argument_list|(
literal|"anything"
argument_list|)
operator|.
name|index
argument_list|(
literal|false
argument_list|)
operator|.
name|tokenized
argument_list|(
literal|false
argument_list|)
operator|.
name|docValues
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|(
name|ctx
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|Builder
argument_list|(
literal|"anything"
argument_list|)
operator|.
name|index
argument_list|(
literal|false
argument_list|)
operator|.
name|docValues
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|(
name|ctx
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"str1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"str2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"str3"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"analyzed"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"str4"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_values"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"str5"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_values"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|ParsedDocument
name|parsedDoc
init|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"str1"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|field
argument_list|(
literal|"str2"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|field
argument_list|(
literal|"str3"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|field
argument_list|(
literal|"str4"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|field
argument_list|(
literal|"str5"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Document
name|doc
init|=
name|parsedDoc
operator|.
name|rootDoc
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NONE
argument_list|,
name|docValuesType
argument_list|(
name|doc
argument_list|,
literal|"str1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|SORTED_SET
argument_list|,
name|docValuesType
argument_list|(
name|doc
argument_list|,
literal|"str2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NONE
argument_list|,
name|docValuesType
argument_list|(
name|doc
argument_list|,
literal|"str3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NONE
argument_list|,
name|docValuesType
argument_list|(
name|doc
argument_list|,
literal|"str4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NONE
argument_list|,
name|docValuesType
argument_list|(
name|doc
argument_list|,
literal|"str5"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBwCompatDocValues
specifier|public
name|void
name|testBwCompatDocValues
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|oldIndexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_2_2_0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|indexService
operator|=
name|createIndex
argument_list|(
literal|"test_old"
argument_list|,
name|oldIndexSettings
argument_list|)
expr_stmt|;
name|parser
operator|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
expr_stmt|;
comment|// doc values only work on non-analyzed content
specifier|final
name|BuilderContext
name|ctx
init|=
operator|new
name|BuilderContext
argument_list|(
name|indexService
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getSettings
argument_list|()
argument_list|,
operator|new
name|ContentPath
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|StringFieldMapper
operator|.
name|Builder
argument_list|(
literal|"anything"
argument_list|)
operator|.
name|docValues
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|/* OK */
block|}
name|assertFalse
argument_list|(
operator|new
name|Builder
argument_list|(
literal|"anything"
argument_list|)
operator|.
name|index
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|(
name|ctx
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|Builder
argument_list|(
literal|"anything"
argument_list|)
operator|.
name|index
argument_list|(
literal|true
argument_list|)
operator|.
name|tokenized
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|(
name|ctx
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|Builder
argument_list|(
literal|"anything"
argument_list|)
operator|.
name|index
argument_list|(
literal|true
argument_list|)
operator|.
name|tokenized
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|(
name|ctx
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|Builder
argument_list|(
literal|"anything"
argument_list|)
operator|.
name|index
argument_list|(
literal|false
argument_list|)
operator|.
name|tokenized
argument_list|(
literal|false
argument_list|)
operator|.
name|docValues
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|(
name|ctx
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|Builder
argument_list|(
literal|"anything"
argument_list|)
operator|.
name|index
argument_list|(
literal|false
argument_list|)
operator|.
name|docValues
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|(
name|ctx
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"str1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"str2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"str3"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"analyzed"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"str4"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_values"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"str5"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_values"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|ParsedDocument
name|parsedDoc
init|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"str1"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|field
argument_list|(
literal|"str2"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|field
argument_list|(
literal|"str3"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|field
argument_list|(
literal|"str4"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|field
argument_list|(
literal|"str5"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Document
name|doc
init|=
name|parsedDoc
operator|.
name|rootDoc
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NONE
argument_list|,
name|docValuesType
argument_list|(
name|doc
argument_list|,
literal|"str1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|SORTED_SET
argument_list|,
name|docValuesType
argument_list|(
name|doc
argument_list|,
literal|"str2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NONE
argument_list|,
name|docValuesType
argument_list|(
name|doc
argument_list|,
literal|"str3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NONE
argument_list|,
name|docValuesType
argument_list|(
name|doc
argument_list|,
literal|"str4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|SORTED_SET
argument_list|,
name|docValuesType
argument_list|(
name|doc
argument_list|,
literal|"str5"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: this function shouldn't be necessary.  parsing should just add a single field that is indexed and dv
DECL|method|docValuesType
specifier|public
specifier|static
name|DocValuesType
name|docValuesType
parameter_list|(
name|Document
name|document
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
for|for
control|(
name|IndexableField
name|field
range|:
name|document
operator|.
name|getFields
argument_list|(
name|fieldName
argument_list|)
control|)
block|{
if|if
condition|(
name|field
operator|.
name|fieldType
argument_list|()
operator|.
name|docValuesType
argument_list|()
operator|!=
name|DocValuesType
operator|.
name|NONE
condition|)
block|{
return|return
name|field
operator|.
name|fieldType
argument_list|()
operator|.
name|docValuesType
argument_list|()
return|;
block|}
block|}
return|return
name|DocValuesType
operator|.
name|NONE
return|;
block|}
DECL|method|testDisableNorms
specifier|public
name|void
name|testDisableNorms
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|MapperService
name|mapperService
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
decl_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|mapperService
operator|.
name|merge
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|,
name|MapperService
operator|.
name|MergeReason
operator|.
name|MAPPING_UPDATE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|IndexableFieldType
name|fieldType
init|=
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field"
argument_list|)
operator|.
name|fieldType
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|fieldType
operator|.
name|omitNorms
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|updatedMapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"norms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|defaultMapper
operator|=
name|mapperService
operator|.
name|merge
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|updatedMapping
argument_list|)
argument_list|,
name|MapperService
operator|.
name|MergeReason
operator|.
name|MAPPING_UPDATE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doc
operator|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|fieldType
operator|=
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field"
argument_list|)
operator|.
name|fieldType
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|fieldType
operator|.
name|omitNorms
argument_list|()
argument_list|)
expr_stmt|;
name|updatedMapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"norms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
try|try
block|{
name|mapperService
operator|.
name|merge
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|updatedMapping
argument_list|)
argument_list|,
name|MapperService
operator|.
name|MergeReason
operator|.
name|MAPPING_UPDATE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"different [norms]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test that expected exceptions are thrown when creating a new index with position_offset_gap      */
DECL|method|testPositionOffsetGapDeprecation
specifier|public
name|void
name|testPositionOffsetGapDeprecation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test deprecation exceptions on newly created indexes
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"position_increment_gap"
argument_list|,
literal|10
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"position_offset_gap"
argument_list|,
literal|50
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Mapping definition should fail with the position_offset_gap setting"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Mapping definition for [field2] has unsupported parameters:  [position_offset_gap : 50]"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFielddataLoading
specifier|public
name|void
name|testFielddataLoading
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fielddata"
argument_list|)
operator|.
name|field
argument_list|(
literal|"loading"
argument_list|,
literal|"eager_global_ordinals"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|expectedMapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"eager_global_ordinals"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedMapping
argument_list|,
name|mapper
operator|.
name|mappingSource
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mapper
operator|.
name|mappers
argument_list|()
operator|.
name|getMapper
argument_list|(
literal|"field"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|eagerGlobalOrdinals
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFielddataFilter
specifier|public
name|void
name|testFielddataFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fielddata"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"filter"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"frequency"
argument_list|)
operator|.
name|field
argument_list|(
literal|"min"
argument_list|,
literal|2d
argument_list|)
operator|.
name|field
argument_list|(
literal|"min_segment_size"
argument_list|,
literal|1000
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"regex"
argument_list|)
operator|.
name|field
argument_list|(
literal|"pattern"
argument_list|,
literal|"^#.*"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|expectedMapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fielddata_frequency_filter"
argument_list|)
operator|.
name|field
argument_list|(
literal|"min"
argument_list|,
literal|2d
argument_list|)
operator|.
name|field
argument_list|(
literal|"min_segment_size"
argument_list|,
literal|1000
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedMapping
argument_list|,
name|mapper
operator|.
name|mappingSource
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|StringFieldType
name|fieldType
init|=
operator|(
name|StringFieldType
operator|)
name|mapper
operator|.
name|mappers
argument_list|()
operator|.
name|getMapper
argument_list|(
literal|"field"
argument_list|)
operator|.
name|fieldType
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|fielddataMinFrequency
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2d
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|fielddataMaxFrequency
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldType
operator|.
name|fielddataMinSegmentSize
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisabledFielddata
specifier|public
name|void
name|testDisabledFielddata
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fielddata"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"disabled"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|expectedMapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedMapping
argument_list|,
name|mapper
operator|.
name|mappingSource
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mapper
operator|.
name|mappers
argument_list|()
operator|.
name|getMapper
argument_list|(
literal|"field"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|fielddataBuilder
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Fielddata is disabled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonAnalyzedFieldPositionIncrement
specifier|public
name|void
name|testNonAnalyzedFieldPositionIncrement
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|index
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"no"
argument_list|,
literal|"not_analyzed"
argument_list|)
control|)
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|index
argument_list|)
operator|.
name|field
argument_list|(
literal|"position_increment_gap"
argument_list|,
literal|10
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot set position_increment_gap on field [field] without positions enabled"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAnalyzedFieldPositionIncrementWithoutPositions
specifier|public
name|void
name|testAnalyzedFieldPositionIncrementWithoutPositions
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|indexOptions
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"docs"
argument_list|,
literal|"freqs"
argument_list|)
control|)
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
name|indexOptions
argument_list|)
operator|.
name|field
argument_list|(
literal|"position_increment_gap"
argument_list|,
literal|10
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot set position_increment_gap on field [field] without positions enabled"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testKeywordFieldAsStringWithUnsupportedField
specifier|public
name|void
name|testKeywordFieldAsStringWithUnsupportedField
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|mapping
init|=
name|mappingForTestField
argument_list|(
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|string
argument_list|()
decl_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parser
operator|.
name|parse
argument_list|(
literal|"test_type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Automatic downgrade from [keyword] to [string] failed because parameters [fielddata] are not supported for "
operator|+
literal|"automatic downgrades."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeKeywordIntoString
specifier|public
name|void
name|testMergeKeywordIntoString
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"fielddata"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeKeywordIntoStringWithIndexFalse
specifier|public
name|void
name|testMergeKeywordIntoStringWithIndexFalse
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"no"
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeKeywordIntoStringWithStore
specifier|public
name|void
name|testMergeKeywordIntoStringWithStore
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"fielddata"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeKeywordIntoStringWithDocValues
specifier|public
name|void
name|testMergeKeywordIntoStringWithDocValues
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"doc_values"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_values"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_values"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeKeywordIntoStringWithNorms
specifier|public
name|void
name|testMergeKeywordIntoStringWithNorms
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"fielddata"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"norms"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|field
argument_list|(
literal|"norms"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"norms"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// norms can be an array but it'll just get squashed into true/false
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"norms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"loading"
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
comment|// Totally ignored even though it used to be eager/lazy
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"norms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"loading"
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeKeywordIntoStringWithBoost
specifier|public
name|void
name|testMergeKeywordIntoStringWithBoost
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"fielddata"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"boost"
argument_list|,
literal|1.5
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"norms"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Implied by having a boost
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|field
argument_list|(
literal|"boost"
argument_list|,
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"boost"
argument_list|,
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"boost"
argument_list|,
literal|1.4
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"boost"
argument_list|,
literal|1.4
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeKeywordIntoStringWithFields
specifier|public
name|void
name|testMergeKeywordIntoStringWithFields
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"fielddata"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedFields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"fields"
argument_list|,
name|expectedFields
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedFoo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedFields
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
name|expectedFoo
argument_list|)
expr_stmt|;
name|expectedFoo
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedFoo
operator|.
name|put
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedBar
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedFields
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
name|expectedBar
argument_list|)
expr_stmt|;
name|expectedBar
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedBar
operator|.
name|put
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeKeywordIntoStringWithCopyTo
specifier|public
name|void
name|testMergeKeywordIntoStringWithCopyTo
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"fielddata"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"copy_to"
argument_list|,
name|singletonList
argument_list|(
literal|"another_field"
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|field
argument_list|(
literal|"copy_to"
argument_list|,
literal|"another_field"
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"copy_to"
argument_list|,
literal|"another_field"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeKeywordIntoStringWithIncludeInAll
specifier|public
name|void
name|testMergeKeywordIntoStringWithIncludeInAll
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"fielddata"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"include_in_all"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|field
argument_list|(
literal|"include_in_all"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"include_in_all"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeKeywordIntoStringWithIgnoreAbove
specifier|public
name|void
name|testMergeKeywordIntoStringWithIgnoreAbove
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"fielddata"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"ignore_above"
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_above"
argument_list|,
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_above"
argument_list|,
literal|128
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeKeywordIntoStringWithIndexOptions
specifier|public
name|void
name|testMergeKeywordIntoStringWithIndexOptions
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"fielddata"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"index_options"
argument_list|,
literal|"freqs"
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"freqs"
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"freqs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeKeywordIntoStringWithSimilarity
specifier|public
name|void
name|testMergeKeywordIntoStringWithSimilarity
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"fielddata"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"similarity"
argument_list|,
literal|"BM25"
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|field
argument_list|(
literal|"similarity"
argument_list|,
literal|"BM25"
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"similarity"
argument_list|,
literal|"BM25"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTextFieldAsStringWithUnsupportedField
specifier|public
name|void
name|testTextFieldAsStringWithUnsupportedField
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|mapping
init|=
name|mappingForTestField
argument_list|(
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"null_value"
argument_list|,
literal|"kitten"
argument_list|)
argument_list|)
operator|.
name|string
argument_list|()
decl_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parser
operator|.
name|parse
argument_list|(
literal|"test_type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Automatic downgrade from [text] to [string] failed because parameters [null_value] are not supported for "
operator|+
literal|"automatic downgrades."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeTextIntoString
specifier|public
name|void
name|testMergeTextIntoString
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeTextIntoStringWithStore
specifier|public
name|void
name|testMergeTextIntoStringWithStore
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeTextIntoStringWithDocValues
specifier|public
name|void
name|testMergeTextIntoStringWithDocValues
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_values"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_values"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeTextIntoStringWithNorms
specifier|public
name|void
name|testMergeTextIntoStringWithNorms
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"norms"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"norms"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"norms"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeTextIntoStringWithBoost
specifier|public
name|void
name|testMergeTextIntoStringWithBoost
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"boost"
argument_list|,
literal|1.5
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"boost"
argument_list|,
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"boost"
argument_list|,
literal|1.5
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"boost"
argument_list|,
literal|1.4
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"boost"
argument_list|,
literal|1.4
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeTextIntoStringWithFields
specifier|public
name|void
name|testMergeTextIntoStringWithFields
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedFields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"fields"
argument_list|,
name|expectedFields
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedFoo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedFields
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
name|expectedFoo
argument_list|)
expr_stmt|;
name|expectedFoo
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedFoo
operator|.
name|put
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedBar
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedFields
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
name|expectedBar
argument_list|)
expr_stmt|;
name|expectedBar
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedBar
operator|.
name|put
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeTextIntoStringWithCopyTo
specifier|public
name|void
name|testMergeTextIntoStringWithCopyTo
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"copy_to"
argument_list|,
name|singletonList
argument_list|(
literal|"another_field"
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"copy_to"
argument_list|,
literal|"another_field"
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"copy_to"
argument_list|,
literal|"another_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeTextIntoStringWithFileddataDisabled
specifier|public
name|void
name|testMergeTextIntoStringWithFileddataDisabled
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"fielddata"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeTextIntoStringWithEagerGlobalOrdinals
specifier|public
name|void
name|testMergeTextIntoStringWithEagerGlobalOrdinals
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"eager_global_ordinals"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fielddata"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"pagedbytes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"loading"
argument_list|,
literal|"eager_global_ordinals"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"eager_global_ordinals"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeTextIntoStringWithFielddataFrequencyFilter
specifier|public
name|void
name|testMergeTextIntoStringWithFielddataFrequencyFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fielddataFrequencyFilter
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"fielddata_frequency_filter"
argument_list|,
name|fielddataFrequencyFilter
argument_list|)
expr_stmt|;
name|fielddataFrequencyFilter
operator|.
name|put
argument_list|(
literal|"min"
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|fielddataFrequencyFilter
operator|.
name|put
argument_list|(
literal|"max"
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|fielddataFrequencyFilter
operator|.
name|put
argument_list|(
literal|"min_segment_size"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fielddata"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"pagedbytes"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"filter"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"frequency"
argument_list|)
operator|.
name|field
argument_list|(
literal|"min"
argument_list|,
literal|0.001
argument_list|)
operator|.
name|field
argument_list|(
literal|"max"
argument_list|,
literal|0.1
argument_list|)
operator|.
name|field
argument_list|(
literal|"min_segment_size"
argument_list|,
literal|100
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fielddata_frequency_filter"
argument_list|)
operator|.
name|field
argument_list|(
literal|"min"
argument_list|,
literal|0.001
argument_list|)
operator|.
name|field
argument_list|(
literal|"max"
argument_list|,
literal|0.1
argument_list|)
operator|.
name|field
argument_list|(
literal|"min_segment_size"
argument_list|,
literal|100
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeTextIntoStringWithIncludeInAll
specifier|public
name|void
name|testMergeTextIntoStringWithIncludeInAll
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"include_in_all"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"include_in_all"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"include_in_all"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeTextIntoStringWithSearchQuoteAnayzer
specifier|public
name|void
name|testMergeTextIntoStringWithSearchQuoteAnayzer
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"search_quote_analyzer"
argument_list|,
literal|"keyword"
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_quote_analyzer"
argument_list|,
literal|"keyword"
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_quote_analyzer"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeTextIntoStringWithIndexOptions
specifier|public
name|void
name|testMergeTextIntoStringWithIndexOptions
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|indexOptions
init|=
name|randomIndexOptions
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
operator|==
literal|"positions"
operator|.
name|equals
argument_list|(
name|indexOptions
argument_list|)
condition|)
block|{
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"index_options"
argument_list|,
name|indexOptions
argument_list|)
expr_stmt|;
block|}
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
name|indexOptions
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
name|indexOptions
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeTextIntoStringWithPositionIncrementGap
specifier|public
name|void
name|testMergeTextIntoStringWithPositionIncrementGap
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|positionIncrementGap
init|=
name|between
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"position_increment_gap"
argument_list|,
name|positionIncrementGap
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"position_increment_gap"
argument_list|,
name|positionIncrementGap
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"position_increment_gap"
argument_list|,
name|positionIncrementGap
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeStringIntoStringWithSimilarity
specifier|public
name|void
name|testMergeStringIntoStringWithSimilarity
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|expectedMapping
operator|.
name|put
argument_list|(
literal|"similarity"
argument_list|,
literal|"BM25"
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"similarity"
argument_list|,
literal|"BM25"
argument_list|)
argument_list|)
expr_stmt|;
name|mergeMappingStep
argument_list|(
name|expectedMapping
argument_list|,
name|b
lambda|->
name|b
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"similarity"
argument_list|,
literal|"BM25"
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|interface|FieldBuilder
specifier|private
interface|interface
name|FieldBuilder
block|{
DECL|method|populateMappingForField
name|void
name|populateMappingForField
parameter_list|(
name|XContentBuilder
name|b
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|method|mergeMappingStep
specifier|private
name|void
name|mergeMappingStep
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMapping
parameter_list|,
name|FieldBuilder
name|fieldBuilder
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|b
init|=
name|mappingForTestField
argument_list|(
name|fieldBuilder
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> Updating mapping to {}"
argument_list|,
name|b
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"test_type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|GetMappingsResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetMappings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|index
init|=
name|response
operator|.
name|getMappings
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"mapping for index not found"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|MappingMetaData
name|type
init|=
name|index
operator|.
name|get
argument_list|(
literal|"test_type"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"mapping for type not found"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|type
operator|.
name|sourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"properties"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedMapping
argument_list|,
name|properties
operator|.
name|get
argument_list|(
literal|"test_field"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|mappingForTestField
specifier|private
name|XContentBuilder
name|mappingForTestField
parameter_list|(
name|FieldBuilder
name|fieldBuilder
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|b
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|b
operator|.
name|startObject
argument_list|(
literal|"test_type"
argument_list|)
expr_stmt|;
block|{
name|b
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
expr_stmt|;
block|{
name|b
operator|.
name|startObject
argument_list|(
literal|"test_field"
argument_list|)
expr_stmt|;
block|{
name|fieldBuilder
operator|.
name|populateMappingForField
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|b
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|b
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|b
operator|.
name|endObject
argument_list|()
return|;
block|}
DECL|method|randomIndexOptions
specifier|private
name|String
name|randomIndexOptions
parameter_list|()
block|{
name|IndexOptions
name|options
init|=
name|randomValueOtherThan
argument_list|(
name|IndexOptions
operator|.
name|NONE
argument_list|,
parameter_list|()
lambda|->
name|randomFrom
argument_list|(
name|IndexOptions
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|options
condition|)
block|{
case|case
name|DOCS
case|:
return|return
literal|"docs"
return|;
case|case
name|DOCS_AND_FREQS
case|:
return|return
literal|"freqs"
return|;
case|case
name|DOCS_AND_FREQS_AND_POSITIONS
case|:
return|return
literal|"positions"
return|;
case|case
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
case|:
return|return
literal|"offsets"
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown options ["
operator|+
name|options
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

