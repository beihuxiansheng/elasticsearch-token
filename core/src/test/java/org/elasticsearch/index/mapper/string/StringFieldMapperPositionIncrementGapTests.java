begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper.string
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|string
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchPhraseQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_comment
comment|/**  * Tests that position_increment_gap is read from the mapper and applies as  * expected in queries.  */
end_comment

begin_class
DECL|class|StringFieldMapperPositionIncrementGapTests
specifier|public
class|class
name|StringFieldMapperPositionIncrementGapTests
extends|extends
name|ESSingleNodeTestCase
block|{
comment|/**      * The default position_increment_gap should be large enough that most      * "sensible" queries phrase slops won't match across values.      */
DECL|method|testDefault
specifier|public
name|void
name|testDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|assertGapIsOneHundred
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Asserts that the post-2.0 default is being applied.      */
DECL|method|assertGapIsOneHundred
specifier|public
specifier|static
name|void
name|assertGapIsOneHundred
parameter_list|(
name|Client
name|client
parameter_list|,
name|String
name|indexName
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|testGap
argument_list|(
name|client
argument_list|,
name|indexName
argument_list|,
name|type
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// No match across gap using default slop with default positionIncrementGap
name|assertHitCount
argument_list|(
name|client
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"string"
argument_list|,
literal|"one two"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Nor with small-ish values
name|assertHitCount
argument_list|(
name|client
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"string"
argument_list|,
literal|"one two"
argument_list|)
operator|.
name|slop
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"string"
argument_list|,
literal|"one two"
argument_list|)
operator|.
name|slop
argument_list|(
literal|50
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// But huge-ish values still match
name|assertHitCount
argument_list|(
name|client
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"string"
argument_list|,
literal|"one two"
argument_list|)
operator|.
name|slop
argument_list|(
literal|500
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testZero
specifier|public
name|void
name|testZero
parameter_list|()
throws|throws
name|IOException
block|{
name|setupGapInMapping
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertGapIsZero
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Asserts that the pre-2.0 default has been applied or explicitly      * configured.      */
DECL|method|assertGapIsZero
specifier|public
specifier|static
name|void
name|assertGapIsZero
parameter_list|(
name|Client
name|client
parameter_list|,
name|String
name|indexName
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|testGap
argument_list|(
name|client
argument_list|,
name|indexName
argument_list|,
name|type
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|/*          * Phrases match across different values using default slop with pre-2.0 default          * position_increment_gap.          */
name|assertHitCount
argument_list|(
name|client
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"string"
argument_list|,
literal|"one two"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testLargerThanDefault
specifier|public
name|void
name|testLargerThanDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|setupGapInMapping
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|testGap
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
DECL|method|testSmallerThanDefault
specifier|public
name|void
name|testSmallerThanDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|setupGapInMapping
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|testGap
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testNegativeIsError
specifier|public
name|void
name|testNegativeIsError
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|setupGapInMapping
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"positions_increment_gap less than 0 aren't allowed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Tests that the default actually defaults to the position_increment_gap      * configured in the analyzer. This behavior is very old and a little      * strange but not worth breaking some thought.      */
DECL|method|testDefaultDefaultsToAnalyzer
specifier|public
name|void
name|testDefaultDefaultsToAnalyzer
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|settings
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"analysis"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"analyzer"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"gappy"
argument_list|)
decl_stmt|;
name|settings
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"custom"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|field
argument_list|(
literal|"tokenizer"
argument_list|,
literal|"standard"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|field
argument_list|(
literal|"position_increment_gap"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|setupAnalyzer
argument_list|(
name|settings
argument_list|,
literal|"gappy"
argument_list|)
expr_stmt|;
name|testGap
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Build an index named "test" with a field named "string" with the provided      * positionIncrementGap that uses the standard analyzer.      */
DECL|method|setupGapInMapping
specifier|private
name|void
name|setupGapInMapping
parameter_list|(
name|int
name|positionIncrementGap
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"string"
argument_list|)
decl_stmt|;
name|mapping
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|field
argument_list|(
literal|"position_increment_gap"
argument_list|,
name|positionIncrementGap
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
name|mapping
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|/**      * Build an index named "test" with the provided settings and and a field      * named "string" that uses the specified analyzer and default      * position_increment_gap.      */
DECL|method|setupAnalyzer
specifier|private
name|void
name|setupAnalyzer
parameter_list|(
name|XContentBuilder
name|settings
parameter_list|,
name|String
name|analyzer
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"string"
argument_list|)
decl_stmt|;
name|mapping
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
name|mapping
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|testGap
specifier|private
specifier|static
name|void
name|testGap
parameter_list|(
name|Client
name|client
parameter_list|,
name|String
name|indexName
parameter_list|,
name|String
name|type
parameter_list|,
name|int
name|positionIncrementGap
parameter_list|)
throws|throws
name|IOException
block|{
name|client
operator|.
name|prepareIndex
argument_list|(
name|indexName
argument_list|,
name|type
argument_list|,
literal|"position_gap_test"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"string"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"one"
argument_list|,
literal|"two three"
argument_list|)
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Baseline - phrase query finds matches in the same field value
name|assertHitCount
argument_list|(
name|client
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"string"
argument_list|,
literal|"two three"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|positionIncrementGap
operator|>
literal|0
condition|)
block|{
comment|// No match across gaps when slop< position gap
name|assertHitCount
argument_list|(
name|client
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"string"
argument_list|,
literal|"one two"
argument_list|)
operator|.
name|slop
argument_list|(
name|positionIncrementGap
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Match across gaps when slop>= position gap
name|assertHitCount
argument_list|(
name|client
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"string"
argument_list|,
literal|"one two"
argument_list|)
operator|.
name|slop
argument_list|(
name|positionIncrementGap
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"string"
argument_list|,
literal|"one two"
argument_list|)
operator|.
name|slop
argument_list|(
name|positionIncrementGap
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

