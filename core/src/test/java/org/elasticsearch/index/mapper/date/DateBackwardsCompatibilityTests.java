begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper.date
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|date
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
operator|.
name|randomVersionBetween
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoSearchHits
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_comment
comment|/**  * Test class to check for all the conditions defined in  * https://github.com/elastic/elasticsearch/issues/10971  */
end_comment

begin_class
DECL|class|DateBackwardsCompatibilityTests
specifier|public
class|class
name|DateBackwardsCompatibilityTests
extends|extends
name|ESSingleNodeTestCase
block|{
DECL|field|index
specifier|private
name|String
name|index
init|=
literal|"testindex"
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
init|=
literal|"testtype"
decl_stmt|;
DECL|field|randomVersionBelow2x
specifier|private
name|Version
name|randomVersionBelow2x
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|randomVersionBelow2x
operator|=
name|randomVersionBetween
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|Version
operator|.
name|V_0_90_0
argument_list|,
name|Version
operator|.
name|V_1_6_1
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatPre2xIndicesNumbersAreTreatedAsEpochs
specifier|public
name|void
name|testThatPre2xIndicesNumbersAreTreatedAsEpochs
parameter_list|()
throws|throws
name|Exception
block|{
name|index
operator|=
name|createPre2xIndexAndMapping
argument_list|()
expr_stmt|;
name|long
name|dateInMillis
init|=
literal|1435073872l
operator|*
literal|1000
decl_stmt|;
comment|// Tue Jun 23 17:37:52 CEST 2015
name|XContentBuilder
name|document
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"date_field"
argument_list|,
name|dateInMillis
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|index
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|// search for date in time range
name|QueryBuilder
name|query
init|=
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date_field"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2015-06-23"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2015-06-24"
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|index
argument_list|)
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatPre2xFailedStringParsingLeadsToEpochParsing
specifier|public
name|void
name|testThatPre2xFailedStringParsingLeadsToEpochParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|index
operator|=
name|createPre2xIndexAndMapping
argument_list|()
expr_stmt|;
name|long
name|dateInMillis
init|=
literal|1435073872l
operator|*
literal|1000
decl_stmt|;
comment|// Tue Jun 23 17:37:52 CEST 2015
name|String
name|date
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|dateInMillis
argument_list|)
decl_stmt|;
name|XContentBuilder
name|document
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"date_field"
argument_list|,
name|date
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|index
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|// search for date in time range
name|QueryBuilder
name|query
init|=
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date_field"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2015-06-23"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2015-06-24"
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|index
argument_list|)
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatPre2xSupportsUnixTimestampsInAnyDateFormat
specifier|public
name|void
name|testThatPre2xSupportsUnixTimestampsInAnyDateFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|dateInMillis
init|=
literal|1435073872l
operator|*
literal|1000
decl_stmt|;
comment|// Tue Jun 23 17:37:52 CEST 2015
name|List
argument_list|<
name|String
argument_list|>
name|dateFormats
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"dateOptionalTime"
argument_list|,
literal|"weekDate"
argument_list|,
literal|"tTime"
argument_list|,
literal|"ordinalDate"
argument_list|,
literal|"hourMinuteSecond"
argument_list|,
literal|"hourMinute"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|format
range|:
name|dateFormats
control|)
block|{
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"date_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"date"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
name|format
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|randomVersionBelow2x
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|XContentBuilder
name|document
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"date_field"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|dateInMillis
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|index
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|// indexing as regular timestamp should work as well
name|document
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"date_field"
argument_list|,
name|dateInMillis
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|index
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|index
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testThatPre2xIndicesNumbersAreTreatedAsTimestamps
specifier|public
name|void
name|testThatPre2xIndicesNumbersAreTreatedAsTimestamps
parameter_list|()
throws|throws
name|Exception
block|{
comment|// looks like a unix time stamp but is meant as 2016-06-23T01:00:00.000 - see the specified date format
name|long
name|date
init|=
literal|2015062301000l
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"date_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"date"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"yyyyMMddHHSSS"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|randomVersionBelow2x
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|XContentBuilder
name|document
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"date_field"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|date
argument_list|)
else|:
name|date
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|index
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|// no results in expected time range
name|QueryBuilder
name|query
init|=
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date_field"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2015-06-23"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2015-06-24"
argument_list|)
operator|.
name|format
argument_list|(
literal|"dateOptionalTime"
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|index
argument_list|)
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoSearchHits
argument_list|(
name|response
argument_list|)
expr_stmt|;
comment|// result in unix timestamp range
name|QueryBuilder
name|timestampQuery
init|=
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date_field"
argument_list|)
operator|.
name|from
argument_list|(
literal|2015062300000L
argument_list|)
operator|.
name|to
argument_list|(
literal|2015062302000L
argument_list|)
decl_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|index
argument_list|)
operator|.
name|setQuery
argument_list|(
name|timestampQuery
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// result should also work with regular specified dates
name|QueryBuilder
name|regularTimeQuery
init|=
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date_field"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2033-11-08"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2033-11-09"
argument_list|)
operator|.
name|format
argument_list|(
literal|"dateOptionalTime"
argument_list|)
decl_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|index
argument_list|)
operator|.
name|setQuery
argument_list|(
name|regularTimeQuery
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatPost2xIndicesNumbersAreTreatedAsStrings
specifier|public
name|void
name|testThatPost2xIndicesNumbersAreTreatedAsStrings
parameter_list|()
throws|throws
name|Exception
block|{
comment|// looks like a unix time stamp but is meant as 2016-06-23T01:00:00.000 - see the specified date format
name|long
name|date
init|=
literal|2015062301000l
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"date_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"date"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"yyyyMMddHHSSS"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|index
operator|=
name|createIndex
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|XContentBuilder
name|document
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"date_field"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|date
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|index
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|document
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"date_field"
argument_list|,
name|date
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|index
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|// search for date in time range
name|QueryBuilder
name|query
init|=
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date_field"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2015-06-23"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2015-06-24"
argument_list|)
operator|.
name|format
argument_list|(
literal|"dateOptionalTime"
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|index
argument_list|)
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testDynamicDateDetectionIn2xDoesNotSupportEpochs
specifier|public
name|void
name|testDynamicDateDetectionIn2xDoesNotSupportEpochs
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"dynamic_date_formats"
argument_list|)
operator|.
name|value
argument_list|(
literal|"dateOptionalTime"
argument_list|)
operator|.
name|value
argument_list|(
literal|"epoch_seconds"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a MapperParsingException, but did not happen"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Failed to parse mapping ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Epoch [epoch_seconds] is not supported as dynamic date format"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createPre2xIndexAndMapping
specifier|private
name|String
name|createPre2xIndexAndMapping
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|createIndexAndMapping
argument_list|(
name|randomVersionBelow2x
argument_list|)
return|;
block|}
DECL|method|createIndexAndMapping
specifier|private
name|String
name|createIndexAndMapping
parameter_list|(
name|Version
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"date_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"date"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"dateOptionalTime"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
return|return
name|createIndex
argument_list|(
name|version
argument_list|,
name|mapping
argument_list|)
return|;
block|}
DECL|method|createIndex
specifier|private
name|String
name|createIndex
parameter_list|(
name|Version
name|version
parameter_list|,
name|XContentBuilder
name|mapping
parameter_list|)
block|{
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|version
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|index
argument_list|,
name|settings
argument_list|,
name|type
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|index
return|;
block|}
DECL|method|index
specifier|private
name|void
name|index
parameter_list|(
name|XContentBuilder
name|document
parameter_list|)
block|{
name|IndexResponse
name|indexResponse
init|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|)
operator|.
name|setSource
argument_list|(
name|document
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|indexResponse
operator|.
name|isCreated
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

