begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|DateMathParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|Joda
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DateFieldMapper
operator|.
name|DateFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
operator|.
name|Relation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryRewriteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_class
DECL|class|DateFieldTypeTests
specifier|public
class|class
name|DateFieldTypeTests
extends|extends
name|FieldTypeTestCase
block|{
annotation|@
name|Override
DECL|method|createDefaultFieldType
specifier|protected
name|MappedFieldType
name|createDefaultFieldType
parameter_list|()
block|{
return|return
operator|new
name|DateFieldMapper
operator|.
name|DateFieldType
argument_list|()
return|;
block|}
DECL|field|nowInMillis
specifier|private
specifier|static
name|long
name|nowInMillis
decl_stmt|;
annotation|@
name|Before
DECL|method|setupProperties
specifier|public
name|void
name|setupProperties
parameter_list|()
block|{
name|setDummyNullValue
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|addModifier
argument_list|(
operator|new
name|Modifier
argument_list|(
literal|"format"
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|MappedFieldType
name|ft
parameter_list|)
block|{
operator|(
operator|(
name|DateFieldType
operator|)
name|ft
operator|)
operator|.
name|setDateTimeFormatter
argument_list|(
name|Joda
operator|.
name|forPattern
argument_list|(
literal|"basic_week_date"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addModifier
argument_list|(
operator|new
name|Modifier
argument_list|(
literal|"locale"
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|MappedFieldType
name|ft
parameter_list|)
block|{
operator|(
operator|(
name|DateFieldType
operator|)
name|ft
operator|)
operator|.
name|setDateTimeFormatter
argument_list|(
name|Joda
operator|.
name|forPattern
argument_list|(
literal|"date_optional_time"
argument_list|,
name|Locale
operator|.
name|CANADA
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|nowInMillis
operator|=
name|randomPositiveLong
argument_list|()
expr_stmt|;
block|}
DECL|method|testIsFieldWithinQueryEmptyReader
specifier|public
name|void
name|testIsFieldWithinQueryEmptyReader
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexReader
name|reader
init|=
operator|new
name|MultiReader
argument_list|()
decl_stmt|;
name|DateFieldType
name|ft
init|=
operator|new
name|DateFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"my_date"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Relation
operator|.
name|DISJOINT
argument_list|,
name|ft
operator|.
name|isFieldWithinQuery
argument_list|(
name|reader
argument_list|,
literal|"2015-10-12"
argument_list|,
literal|"2016-04-03"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestIsFieldWithinQuery
specifier|private
name|void
name|doTestIsFieldWithinQuery
parameter_list|(
name|DateFieldType
name|ft
parameter_list|,
name|DirectoryReader
name|reader
parameter_list|,
name|DateTimeZone
name|zone
parameter_list|,
name|DateMathParser
name|alternateFormat
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryRewriteContext
name|context
init|=
operator|new
name|QueryRewriteContext
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
parameter_list|()
lambda|->
name|nowInMillis
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Relation
operator|.
name|INTERSECTS
argument_list|,
name|ft
operator|.
name|isFieldWithinQuery
argument_list|(
name|reader
argument_list|,
literal|"2015-10-09"
argument_list|,
literal|"2016-01-02"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Relation
operator|.
name|INTERSECTS
argument_list|,
name|ft
operator|.
name|isFieldWithinQuery
argument_list|(
name|reader
argument_list|,
literal|"2016-01-02"
argument_list|,
literal|"2016-06-20"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Relation
operator|.
name|INTERSECTS
argument_list|,
name|ft
operator|.
name|isFieldWithinQuery
argument_list|(
name|reader
argument_list|,
literal|"2016-01-02"
argument_list|,
literal|"2016-02-12"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Relation
operator|.
name|DISJOINT
argument_list|,
name|ft
operator|.
name|isFieldWithinQuery
argument_list|(
name|reader
argument_list|,
literal|"2014-01-02"
argument_list|,
literal|"2015-02-12"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Relation
operator|.
name|DISJOINT
argument_list|,
name|ft
operator|.
name|isFieldWithinQuery
argument_list|(
name|reader
argument_list|,
literal|"2016-05-11"
argument_list|,
literal|"2016-08-30"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Relation
operator|.
name|WITHIN
argument_list|,
name|ft
operator|.
name|isFieldWithinQuery
argument_list|(
name|reader
argument_list|,
literal|"2015-09-25"
argument_list|,
literal|"2016-05-29"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Relation
operator|.
name|WITHIN
argument_list|,
name|ft
operator|.
name|isFieldWithinQuery
argument_list|(
name|reader
argument_list|,
literal|"2015-10-12"
argument_list|,
literal|"2016-04-03"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Relation
operator|.
name|INTERSECTS
argument_list|,
name|ft
operator|.
name|isFieldWithinQuery
argument_list|(
name|reader
argument_list|,
literal|"2015-10-12"
argument_list|,
literal|"2016-04-03"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Relation
operator|.
name|INTERSECTS
argument_list|,
name|ft
operator|.
name|isFieldWithinQuery
argument_list|(
name|reader
argument_list|,
literal|"2015-10-12"
argument_list|,
literal|"2016-04-03"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Relation
operator|.
name|INTERSECTS
argument_list|,
name|ft
operator|.
name|isFieldWithinQuery
argument_list|(
name|reader
argument_list|,
literal|"2015-10-12"
argument_list|,
literal|"2016-04-03"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsFieldWithinQuery
specifier|public
name|void
name|testIsFieldWithinQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|instant1
init|=
name|LegacyDateFieldMapper
operator|.
name|Defaults
operator|.
name|DATE_TIME_FORMATTER
operator|.
name|parser
argument_list|()
operator|.
name|parseDateTime
argument_list|(
literal|"2015-10-12"
argument_list|)
operator|.
name|getMillis
argument_list|()
decl_stmt|;
name|long
name|instant2
init|=
name|LegacyDateFieldMapper
operator|.
name|Defaults
operator|.
name|DATE_TIME_FORMATTER
operator|.
name|parser
argument_list|()
operator|.
name|parseDateTime
argument_list|(
literal|"2016-04-03"
argument_list|)
operator|.
name|getMillis
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|LongPoint
name|field
init|=
operator|new
name|LongPoint
argument_list|(
literal|"my_date"
argument_list|,
name|instant1
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|field
operator|.
name|setLongValue
argument_list|(
name|instant2
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|DateFieldType
name|ft
init|=
operator|new
name|DateFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"my_date"
argument_list|)
expr_stmt|;
name|DateMathParser
name|alternateFormat
init|=
operator|new
name|DateMathParser
argument_list|(
name|LegacyDateFieldMapper
operator|.
name|Defaults
operator|.
name|DATE_TIME_FORMATTER
argument_list|)
decl_stmt|;
name|doTestIsFieldWithinQuery
argument_list|(
name|ft
argument_list|,
name|reader
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|doTestIsFieldWithinQuery
argument_list|(
name|ft
argument_list|,
name|reader
argument_list|,
literal|null
argument_list|,
name|alternateFormat
argument_list|)
expr_stmt|;
name|doTestIsFieldWithinQuery
argument_list|(
name|ft
argument_list|,
name|reader
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|doTestIsFieldWithinQuery
argument_list|(
name|ft
argument_list|,
name|reader
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|,
name|alternateFormat
argument_list|)
expr_stmt|;
comment|// Fields with no value indexed.
name|DateFieldType
name|ft2
init|=
operator|new
name|DateFieldType
argument_list|()
decl_stmt|;
name|ft2
operator|.
name|setName
argument_list|(
literal|"my_date2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Relation
operator|.
name|DISJOINT
argument_list|,
name|ft2
operator|.
name|isFieldWithinQuery
argument_list|(
name|reader
argument_list|,
literal|"2015-10-09"
argument_list|,
literal|"2016-01-02"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|reader
argument_list|,
name|w
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testValueFormat
specifier|public
name|void
name|testValueFormat
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
name|createDefaultFieldType
argument_list|()
decl_stmt|;
name|long
name|instant
init|=
name|LegacyDateFieldMapper
operator|.
name|Defaults
operator|.
name|DATE_TIME_FORMATTER
operator|.
name|parser
argument_list|()
operator|.
name|parseDateTime
argument_list|(
literal|"2015-10-12T14:10:55"
argument_list|)
operator|.
name|getMillis
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2015-10-12T14:10:55.000Z"
argument_list|,
name|ft
operator|.
name|docValueFormat
argument_list|(
literal|null
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|format
argument_list|(
name|instant
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2015-10-12T15:10:55.000+01:00"
argument_list|,
name|ft
operator|.
name|docValueFormat
argument_list|(
literal|null
argument_list|,
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|format
argument_list|(
name|instant
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2015"
argument_list|,
name|createDefaultFieldType
argument_list|()
operator|.
name|docValueFormat
argument_list|(
literal|"YYYY"
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|format
argument_list|(
name|instant
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|instant
argument_list|,
name|ft
operator|.
name|docValueFormat
argument_list|(
literal|null
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|parseLong
argument_list|(
literal|"2015-10-12T14:10:55"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|instant
argument_list|,
name|ft
operator|.
name|docValueFormat
argument_list|(
literal|null
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|parseLong
argument_list|(
literal|"2015-10-12T14:10:55"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LegacyDateFieldMapper
operator|.
name|Defaults
operator|.
name|DATE_TIME_FORMATTER
operator|.
name|parser
argument_list|()
operator|.
name|parseDateTime
argument_list|(
literal|"2015-10-13"
argument_list|)
operator|.
name|getMillis
argument_list|()
operator|-
literal|1
argument_list|,
name|ft
operator|.
name|docValueFormat
argument_list|(
literal|null
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|parseLong
argument_list|(
literal|"2015-10-12||/d"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testValueForSearch
specifier|public
name|void
name|testValueForSearch
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
name|createDefaultFieldType
argument_list|()
decl_stmt|;
name|String
name|date
init|=
literal|"2015-10-12T12:09:55.000Z"
decl_stmt|;
name|long
name|instant
init|=
name|LegacyDateFieldMapper
operator|.
name|Defaults
operator|.
name|DATE_TIME_FORMATTER
operator|.
name|parser
argument_list|()
operator|.
name|parseDateTime
argument_list|(
name|date
argument_list|)
operator|.
name|getMillis
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|date
argument_list|,
name|ft
operator|.
name|valueForDisplay
argument_list|(
name|instant
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermQuery
specifier|public
name|void
name|testTermQuery
parameter_list|()
block|{
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|QueryShardContext
name|context
init|=
operator|new
name|QueryShardContext
argument_list|(
literal|0
argument_list|,
operator|new
name|IndexSettings
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|settings
argument_list|(
name|indexSettings
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|indexSettings
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
parameter_list|()
lambda|->
name|nowInMillis
argument_list|)
decl_stmt|;
name|MappedFieldType
name|ft
init|=
name|createDefaultFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|String
name|date
init|=
literal|"2015-10-12T14:10:55"
decl_stmt|;
name|long
name|instant
init|=
name|LegacyDateFieldMapper
operator|.
name|Defaults
operator|.
name|DATE_TIME_FORMATTER
operator|.
name|parser
argument_list|()
operator|.
name|parseDateTime
argument_list|(
name|date
argument_list|)
operator|.
name|getMillis
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newExactQuery
argument_list|(
literal|"field"
argument_list|,
name|instant
argument_list|)
argument_list|,
name|ft
operator|.
name|termQuery
argument_list|(
name|date
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ft
operator|.
name|termQuery
argument_list|(
name|date
argument_list|,
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot search on field [field] since it is not indexed."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeQuery
specifier|public
name|void
name|testRangeQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|QueryShardContext
name|context
init|=
operator|new
name|QueryShardContext
argument_list|(
literal|0
argument_list|,
operator|new
name|IndexSettings
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|settings
argument_list|(
name|indexSettings
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|indexSettings
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
parameter_list|()
lambda|->
name|nowInMillis
argument_list|)
decl_stmt|;
name|MappedFieldType
name|ft
init|=
name|createDefaultFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|String
name|date1
init|=
literal|"2015-10-12T14:10:55"
decl_stmt|;
name|String
name|date2
init|=
literal|"2016-04-28T11:33:52"
decl_stmt|;
name|long
name|instant1
init|=
name|LegacyDateFieldMapper
operator|.
name|Defaults
operator|.
name|DATE_TIME_FORMATTER
operator|.
name|parser
argument_list|()
operator|.
name|parseDateTime
argument_list|(
name|date1
argument_list|)
operator|.
name|getMillis
argument_list|()
decl_stmt|;
name|long
name|instant2
init|=
name|LegacyDateFieldMapper
operator|.
name|Defaults
operator|.
name|DATE_TIME_FORMATTER
operator|.
name|parser
argument_list|()
operator|.
name|parseDateTime
argument_list|(
name|date2
argument_list|)
operator|.
name|getMillis
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
name|instant1
argument_list|,
name|instant2
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
name|date1
argument_list|,
name|date2
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|context
argument_list|)
operator|.
name|rewrite
argument_list|(
operator|new
name|MultiReader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ft
operator|.
name|rangeQuery
argument_list|(
name|date1
argument_list|,
name|date2
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot search on field [field] since it is not indexed."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

