begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|builders
operator|.
name|ShapeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldTypeTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_class
DECL|class|GeoShapeFieldTypeTests
specifier|public
class|class
name|GeoShapeFieldTypeTests
extends|extends
name|FieldTypeTestCase
block|{
annotation|@
name|Override
DECL|method|createDefaultFieldType
specifier|protected
name|MappedFieldType
name|createDefaultFieldType
parameter_list|()
block|{
name|GeoShapeFieldMapper
operator|.
name|GeoShapeFieldType
name|gft
init|=
operator|new
name|GeoShapeFieldMapper
operator|.
name|GeoShapeFieldType
argument_list|()
decl_stmt|;
name|gft
operator|.
name|setNames
argument_list|(
operator|new
name|MappedFieldType
operator|.
name|Names
argument_list|(
literal|"testgeoshape"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|gft
return|;
block|}
annotation|@
name|Override
DECL|method|numProperties
specifier|protected
name|int
name|numProperties
parameter_list|()
block|{
return|return
literal|6
operator|+
name|super
operator|.
name|numProperties
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|modifyProperty
specifier|protected
name|void
name|modifyProperty
parameter_list|(
name|MappedFieldType
name|ft
parameter_list|,
name|int
name|propNum
parameter_list|)
block|{
name|GeoShapeFieldMapper
operator|.
name|GeoShapeFieldType
name|gft
init|=
operator|(
name|GeoShapeFieldMapper
operator|.
name|GeoShapeFieldType
operator|)
name|ft
decl_stmt|;
switch|switch
condition|(
name|propNum
condition|)
block|{
case|case
literal|0
case|:
name|gft
operator|.
name|setTree
argument_list|(
literal|"quadtree"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|gft
operator|.
name|setStrategyName
argument_list|(
literal|"term"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|gft
operator|.
name|setTreeLevels
argument_list|(
literal|10
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|gft
operator|.
name|setPrecisionInMeters
argument_list|(
literal|20
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|gft
operator|.
name|setDefaultDistanceErrorPct
argument_list|(
literal|0.5
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|gft
operator|.
name|setOrientation
argument_list|(
name|ShapeBuilder
operator|.
name|Orientation
operator|.
name|LEFT
argument_list|)
expr_stmt|;
break|break;
default|default:
name|super
operator|.
name|modifyProperty
argument_list|(
name|ft
argument_list|,
name|numProperties
argument_list|()
operator|-
name|propNum
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

