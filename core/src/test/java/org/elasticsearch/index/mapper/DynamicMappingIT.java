begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|get
operator|.
name|GetIndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|get
operator|.
name|GetMappingsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|TypeMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_class
DECL|class|DynamicMappingIT
specifier|public
class|class
name|DynamicMappingIT
extends|extends
name|ESIntegTestCase
block|{
DECL|method|testConflictingDynamicMappings
specifier|public
name|void
name|testConflictingDynamicMappings
parameter_list|()
block|{
comment|// we don't use indexRandom because the order of requests is important here
name|createIndex
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Indexing request should have failed!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testConflictingDynamicMappingsBulk
specifier|public
name|void
name|testConflictingDynamicMappingsBulk
parameter_list|()
block|{
comment|// we don't use indexRandom because the order of requests is important here
name|createIndex
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|BulkResponse
name|bulkResponse
init|=
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|bulkResponse
operator|.
name|hasFailures
argument_list|()
argument_list|)
expr_stmt|;
name|bulkResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|bulkResponse
operator|.
name|hasFailures
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMappingsHaveField
specifier|private
specifier|static
name|void
name|assertMappingsHaveField
parameter_list|(
name|GetMappingsResponse
name|mappings
parameter_list|,
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|indexMappings
init|=
name|mappings
operator|.
name|getMappings
argument_list|()
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|indexMappings
argument_list|)
expr_stmt|;
name|MappingMetaData
name|typeMappings
init|=
name|indexMappings
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typeMappings
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|typeMappingsMap
init|=
name|typeMappings
operator|.
name|getSourceAsMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|typeMappingsMap
operator|.
name|get
argument_list|(
literal|"properties"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Could not find ["
operator|+
name|field
operator|+
literal|"] in "
operator|+
name|typeMappingsMap
operator|.
name|toString
argument_list|()
argument_list|,
name|properties
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMappingsPropagatedToMasterNodeImmediately
specifier|public
name|void
name|testMappingsPropagatedToMasterNodeImmediately
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
comment|// works when the type has been dynamically created
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|GetMappingsResponse
name|mappings
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetMappings
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertMappingsHaveField
argument_list|(
name|mappings
argument_list|,
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
comment|// works if the type already existed
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|mappings
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetMappings
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertMappingsHaveField
argument_list|(
name|mappings
argument_list|,
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
comment|// works if we indexed an empty document
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index"
argument_list|,
literal|"type2"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|mappings
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetMappings
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|mappings
operator|.
name|getMappings
argument_list|()
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|mappings
operator|.
name|getMappings
argument_list|()
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"type2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcurrentDynamicUpdates
specifier|public
name|void
name|testConcurrentDynamicUpdates
parameter_list|()
throws|throws
name|Throwable
block|{
name|createIndex
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
specifier|final
name|Thread
index|[]
name|indexThreads
init|=
operator|new
name|Thread
index|[
literal|32
index|]
decl_stmt|;
specifier|final
name|CountDownLatch
name|startLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexThreads
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|String
name|id
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|indexThreads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|startLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|DocWriteResponse
operator|.
name|Operation
operator|.
name|CREATE
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
name|id
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
operator|+
name|id
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|error
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|indexThreads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|startLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|indexThreads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error
operator|.
name|get
argument_list|()
throw|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|GetMappingsResponse
name|mappings
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetMappings
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexThreads
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertMappingsHaveField
argument_list|(
name|mappings
argument_list|,
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"field"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexThreads
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAutoCreateWithDisabledDynamicMappings
specifier|public
name|void
name|testAutoCreateWithDisabledDynamicMappings
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutTemplate
argument_list|(
literal|"my_template"
argument_list|)
operator|.
name|setCreate
argument_list|(
literal|true
argument_list|)
operator|.
name|setTemplate
argument_list|(
literal|"index_*"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"foo"
argument_list|,
literal|"field"
argument_list|,
literal|"type=keyword"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.mapper.dynamic"
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// succeeds since 'foo' has an explicit mapping in the template
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index_1"
argument_list|,
literal|"foo"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
comment|// fails since 'bar' does not have an explicit mapping in the template and dynamic template creation is disabled
name|TypeMissingException
name|e1
init|=
name|expectThrows
argument_list|(
name|TypeMissingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index_2"
argument_list|,
literal|"bar"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"abc"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"type[bar] missing"
argument_list|,
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"trying to auto create mapping, but dynamic mapping is disabled"
argument_list|,
name|e1
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure no mappings were created for bar
name|GetIndexResponse
name|getIndexResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetIndex
argument_list|()
operator|.
name|addIndices
argument_list|(
literal|"index_2"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|getIndexResponse
operator|.
name|mappings
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

