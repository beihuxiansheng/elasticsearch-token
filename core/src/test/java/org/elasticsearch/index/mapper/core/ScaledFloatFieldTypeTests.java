begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper.core
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoublePoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedNumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|fieldstats
operator|.
name|FieldStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AtomicNumericFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexNumericFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedNumericDoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldTypeTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
DECL|class|ScaledFloatFieldTypeTests
specifier|public
class|class
name|ScaledFloatFieldTypeTests
extends|extends
name|FieldTypeTestCase
block|{
annotation|@
name|Override
DECL|method|createDefaultFieldType
specifier|protected
name|MappedFieldType
name|createDefaultFieldType
parameter_list|()
block|{
name|ScaledFloatFieldMapper
operator|.
name|ScaledFloatFieldType
name|ft
init|=
operator|new
name|ScaledFloatFieldMapper
operator|.
name|ScaledFloatFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setScalingFactor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
return|return
name|ft
return|;
block|}
annotation|@
name|Before
DECL|method|setupProperties
specifier|public
name|void
name|setupProperties
parameter_list|()
block|{
name|addModifier
argument_list|(
operator|new
name|Modifier
argument_list|(
literal|"scaling_factor"
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|MappedFieldType
name|ft
parameter_list|)
block|{
name|ScaledFloatFieldMapper
operator|.
name|ScaledFloatFieldType
name|tft
init|=
operator|(
name|ScaledFloatFieldMapper
operator|.
name|ScaledFloatFieldType
operator|)
name|ft
decl_stmt|;
name|tft
operator|.
name|setScalingFactor
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|normalizeOther
parameter_list|(
name|MappedFieldType
name|other
parameter_list|)
block|{
name|super
operator|.
name|normalizeOther
argument_list|(
name|other
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ScaledFloatFieldMapper
operator|.
name|ScaledFloatFieldType
operator|)
name|other
operator|)
operator|.
name|setScalingFactor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermQuery
specifier|public
name|void
name|testTermQuery
parameter_list|()
block|{
name|ScaledFloatFieldMapper
operator|.
name|ScaledFloatFieldType
name|ft
init|=
operator|new
name|ScaledFloatFieldMapper
operator|.
name|ScaledFloatFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"scaled_float"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setScalingFactor
argument_list|(
literal|0.1
operator|+
name|randomDouble
argument_list|()
operator|*
literal|100
argument_list|)
expr_stmt|;
name|double
name|value
init|=
operator|(
name|randomDouble
argument_list|()
operator|*
literal|2
operator|-
literal|1
operator|)
operator|*
literal|10000
decl_stmt|;
name|long
name|scaledValue
init|=
name|Math
operator|.
name|round
argument_list|(
name|value
operator|*
name|ft
operator|.
name|getScalingFactor
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newExactQuery
argument_list|(
literal|"scaled_float"
argument_list|,
name|scaledValue
argument_list|)
argument_list|,
name|ft
operator|.
name|termQuery
argument_list|(
name|value
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermsQuery
specifier|public
name|void
name|testTermsQuery
parameter_list|()
block|{
name|ScaledFloatFieldMapper
operator|.
name|ScaledFloatFieldType
name|ft
init|=
operator|new
name|ScaledFloatFieldMapper
operator|.
name|ScaledFloatFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"scaled_float"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setScalingFactor
argument_list|(
literal|0.1
operator|+
name|randomDouble
argument_list|()
operator|*
literal|100
argument_list|)
expr_stmt|;
name|double
name|value1
init|=
operator|(
name|randomDouble
argument_list|()
operator|*
literal|2
operator|-
literal|1
operator|)
operator|*
literal|10000
decl_stmt|;
name|long
name|scaledValue1
init|=
name|Math
operator|.
name|round
argument_list|(
name|value1
operator|*
name|ft
operator|.
name|getScalingFactor
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|value2
init|=
operator|(
name|randomDouble
argument_list|()
operator|*
literal|2
operator|-
literal|1
operator|)
operator|*
literal|10000
decl_stmt|;
name|long
name|scaledValue2
init|=
name|Math
operator|.
name|round
argument_list|(
name|value2
operator|*
name|ft
operator|.
name|getScalingFactor
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"scaled_float"
argument_list|,
name|scaledValue1
argument_list|,
name|scaledValue2
argument_list|)
argument_list|,
name|ft
operator|.
name|termsQuery
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|value1
argument_list|,
name|value2
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeQuery
specifier|public
name|void
name|testRangeQuery
parameter_list|()
throws|throws
name|IOException
block|{
comment|// make sure the accuracy loss of scaled floats only occurs at index time
comment|// this test checks that searching scaled floats yields the same results as
comment|// searching doubles that are rounded to the closest half float
name|ScaledFloatFieldMapper
operator|.
name|ScaledFloatFieldType
name|ft
init|=
operator|new
name|ScaledFloatFieldMapper
operator|.
name|ScaledFloatFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"scaled_float"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setScalingFactor
argument_list|(
literal|0.1
operator|+
name|randomDouble
argument_list|()
operator|*
literal|100
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
literal|1000
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|double
name|value
init|=
operator|(
name|randomDouble
argument_list|()
operator|*
literal|2
operator|-
literal|1
operator|)
operator|*
literal|10000
decl_stmt|;
name|long
name|scaledValue
init|=
name|Math
operator|.
name|round
argument_list|(
name|value
operator|*
name|ft
operator|.
name|getScalingFactor
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|rounded
init|=
name|scaledValue
operator|/
name|ft
operator|.
name|getScalingFactor
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"scaled_float"
argument_list|,
name|scaledValue
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoublePoint
argument_list|(
literal|"double"
argument_list|,
name|rounded
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numQueries
init|=
literal|1000
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueries
condition|;
operator|++
name|i
control|)
block|{
name|double
name|l
init|=
operator|(
name|randomDouble
argument_list|()
operator|*
literal|2
operator|-
literal|1
operator|)
operator|*
literal|10000
decl_stmt|;
name|double
name|u
init|=
operator|(
name|randomDouble
argument_list|()
operator|*
literal|2
operator|-
literal|1
operator|)
operator|*
literal|10000
decl_stmt|;
name|boolean
name|includeLower
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|includeUpper
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|Query
name|doubleQ
init|=
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|DOUBLE
operator|.
name|rangeQuery
argument_list|(
literal|"double"
argument_list|,
name|l
argument_list|,
name|u
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
decl_stmt|;
name|Query
name|scaledFloatQ
init|=
name|ft
operator|.
name|rangeQuery
argument_list|(
name|l
argument_list|,
name|u
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|count
argument_list|(
name|doubleQ
argument_list|)
argument_list|,
name|searcher
operator|.
name|count
argument_list|(
name|scaledFloatQ
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|reader
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testValueForSearch
specifier|public
name|void
name|testValueForSearch
parameter_list|()
block|{
name|ScaledFloatFieldMapper
operator|.
name|ScaledFloatFieldType
name|ft
init|=
operator|new
name|ScaledFloatFieldMapper
operator|.
name|ScaledFloatFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"scaled_float"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setScalingFactor
argument_list|(
literal|0.1
operator|+
name|randomDouble
argument_list|()
operator|*
literal|100
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ft
operator|.
name|valueForSearch
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
operator|/
name|ft
operator|.
name|getScalingFactor
argument_list|()
argument_list|,
name|ft
operator|.
name|valueForSearch
argument_list|(
literal|10L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStats
specifier|public
name|void
name|testStats
parameter_list|()
throws|throws
name|IOException
block|{
name|ScaledFloatFieldMapper
operator|.
name|ScaledFloatFieldType
name|ft
init|=
operator|new
name|ScaledFloatFieldMapper
operator|.
name|ScaledFloatFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"scaled_float"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setScalingFactor
argument_list|(
literal|0.1
operator|+
name|randomDouble
argument_list|()
operator|*
literal|100
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
init|)
block|{
name|assertNull
argument_list|(
name|ft
operator|.
name|stats
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|LongPoint
name|point
init|=
operator|new
name|LongPoint
argument_list|(
literal|"scaled_float"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|point
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|point
operator|.
name|setLongValue
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
try|try
init|(
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
init|)
block|{
name|FieldStats
argument_list|<
name|?
argument_list|>
name|stats
init|=
name|ft
operator|.
name|stats
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
operator|/
name|ft
operator|.
name|getScalingFactor
argument_list|()
argument_list|,
name|stats
operator|.
name|getMinValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
operator|/
name|ft
operator|.
name|getScalingFactor
argument_list|()
argument_list|,
name|stats
operator|.
name|getMaxValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|getMaxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
try|try
init|(
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
init|)
block|{
name|assertNull
argument_list|(
name|ft
operator|.
name|stats
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|w
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldData
specifier|public
name|void
name|testFieldData
parameter_list|()
throws|throws
name|IOException
block|{
name|ScaledFloatFieldMapper
operator|.
name|ScaledFloatFieldType
name|ft
init|=
operator|new
name|ScaledFloatFieldMapper
operator|.
name|ScaledFloatFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setScalingFactor
argument_list|(
literal|0.1
operator|+
name|randomDouble
argument_list|()
operator|*
literal|100
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"scaled_float1"
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"scaled_float2"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"scaled_float2"
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
try|try
init|(
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
init|)
block|{
name|IndexMetaData
name|indexMetadata
init|=
operator|new
name|IndexMetaData
operator|.
name|Builder
argument_list|(
literal|"index"
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.version.created"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexSettings
name|indexSettings
init|=
operator|new
name|IndexSettings
argument_list|(
name|indexMetadata
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
comment|// single-valued
name|ft
operator|.
name|setName
argument_list|(
literal|"scaled_float1"
argument_list|)
expr_stmt|;
name|IndexNumericFieldData
name|fielddata
init|=
operator|(
name|IndexNumericFieldData
operator|)
name|ft
operator|.
name|fielddataBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|indexSettings
argument_list|,
name|ft
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AtomicNumericFieldData
name|leafFieldData
init|=
name|fielddata
operator|.
name|load
argument_list|(
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|SortedNumericDoubleValues
name|values
init|=
name|leafFieldData
operator|.
name|getDoubleValues
argument_list|()
decl_stmt|;
name|values
operator|.
name|setDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|values
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
operator|/
name|ft
operator|.
name|getScalingFactor
argument_list|()
argument_list|,
name|values
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|10e-5
argument_list|)
expr_stmt|;
comment|// multi-valued
name|ft
operator|.
name|setName
argument_list|(
literal|"scaled_float2"
argument_list|)
expr_stmt|;
name|fielddata
operator|=
operator|(
name|IndexNumericFieldData
operator|)
name|ft
operator|.
name|fielddataBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|indexSettings
argument_list|,
name|ft
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|leafFieldData
operator|=
name|fielddata
operator|.
name|load
argument_list|(
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|=
name|leafFieldData
operator|.
name|getDoubleValues
argument_list|()
expr_stmt|;
name|values
operator|.
name|setDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|values
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
operator|/
name|ft
operator|.
name|getScalingFactor
argument_list|()
argument_list|,
name|values
operator|.
name|valueAt
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|10e-5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
operator|/
name|ft
operator|.
name|getScalingFactor
argument_list|()
argument_list|,
name|values
operator|.
name|valueAt
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|10e-5
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|w
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

