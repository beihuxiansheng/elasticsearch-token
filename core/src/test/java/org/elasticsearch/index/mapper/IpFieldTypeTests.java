begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|InetAddressPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchNoDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|InetAddresses
import|;
end_import

begin_class
DECL|class|IpFieldTypeTests
specifier|public
class|class
name|IpFieldTypeTests
extends|extends
name|FieldTypeTestCase
block|{
annotation|@
name|Override
DECL|method|createDefaultFieldType
specifier|protected
name|MappedFieldType
name|createDefaultFieldType
parameter_list|()
block|{
return|return
operator|new
name|IpFieldMapper
operator|.
name|IpFieldType
argument_list|()
return|;
block|}
DECL|method|testValueFormat
specifier|public
name|void
name|testValueFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|MappedFieldType
name|ft
init|=
name|createDefaultFieldType
argument_list|()
decl_stmt|;
name|String
name|ip
init|=
literal|"2001:db8::2:1"
decl_stmt|;
name|BytesRef
name|asBytes
init|=
operator|new
name|BytesRef
argument_list|(
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ip
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ip
argument_list|,
name|ft
operator|.
name|docValueFormat
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|format
argument_list|(
name|asBytes
argument_list|)
argument_list|)
expr_stmt|;
name|ip
operator|=
literal|"192.168.1.7"
expr_stmt|;
name|asBytes
operator|=
operator|new
name|BytesRef
argument_list|(
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ip
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ip
argument_list|,
name|ft
operator|.
name|docValueFormat
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|format
argument_list|(
name|asBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testValueForSearch
specifier|public
name|void
name|testValueForSearch
parameter_list|()
throws|throws
name|Exception
block|{
name|MappedFieldType
name|ft
init|=
name|createDefaultFieldType
argument_list|()
decl_stmt|;
name|String
name|ip
init|=
literal|"2001:db8::2:1"
decl_stmt|;
name|BytesRef
name|asBytes
init|=
operator|new
name|BytesRef
argument_list|(
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ip
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ip
argument_list|,
name|ft
operator|.
name|valueForDisplay
argument_list|(
name|asBytes
argument_list|)
argument_list|)
expr_stmt|;
name|ip
operator|=
literal|"192.168.1.7"
expr_stmt|;
name|asBytes
operator|=
operator|new
name|BytesRef
argument_list|(
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ip
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ip
argument_list|,
name|ft
operator|.
name|valueForDisplay
argument_list|(
name|asBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermQuery
specifier|public
name|void
name|testTermQuery
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
name|createDefaultFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|String
name|ip
init|=
literal|"2001:db8::2:1"
decl_stmt|;
name|assertEquals
argument_list|(
name|InetAddressPoint
operator|.
name|newExactQuery
argument_list|(
literal|"field"
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ip
argument_list|)
argument_list|)
argument_list|,
name|ft
operator|.
name|termQuery
argument_list|(
name|ip
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ip
operator|=
literal|"192.168.1.7"
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddressPoint
operator|.
name|newExactQuery
argument_list|(
literal|"field"
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ip
argument_list|)
argument_list|)
argument_list|,
name|ft
operator|.
name|termQuery
argument_list|(
name|ip
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ip
operator|=
literal|"2001:db8::2:1"
expr_stmt|;
name|String
name|prefix
init|=
name|ip
operator|+
literal|"/64"
decl_stmt|;
name|assertEquals
argument_list|(
name|InetAddressPoint
operator|.
name|newPrefixQuery
argument_list|(
literal|"field"
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ip
argument_list|)
argument_list|,
literal|64
argument_list|)
argument_list|,
name|ft
operator|.
name|termQuery
argument_list|(
name|prefix
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ip
operator|=
literal|"192.168.1.7"
expr_stmt|;
name|prefix
operator|=
name|ip
operator|+
literal|"/16"
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddressPoint
operator|.
name|newPrefixQuery
argument_list|(
literal|"field"
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ip
argument_list|)
argument_list|,
literal|16
argument_list|)
argument_list|,
name|ft
operator|.
name|termQuery
argument_list|(
name|prefix
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ft
operator|.
name|termQuery
argument_list|(
literal|"::1"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot search on field [field] since it is not indexed."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeQuery
specifier|public
name|void
name|testRangeQuery
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
name|createDefaultFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddressPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"::"
argument_list|)
argument_list|,
name|InetAddressPoint
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddressPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"::"
argument_list|)
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"192.168.2.0"
argument_list|)
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|null
argument_list|,
literal|"192.168.2.0"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddressPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"::"
argument_list|)
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"192.168.1.255"
argument_list|)
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|null
argument_list|,
literal|"192.168.2.0"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddressPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:db8::"
argument_list|)
argument_list|,
name|InetAddressPoint
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|"2001:db8::"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddressPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:db8::1"
argument_list|)
argument_list|,
name|InetAddressPoint
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|"2001:db8::"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddressPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:db8::"
argument_list|)
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:db8::ffff"
argument_list|)
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|"2001:db8::"
argument_list|,
literal|"2001:db8::ffff"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddressPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:db8::1"
argument_list|)
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:db8::fffe"
argument_list|)
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|"2001:db8::"
argument_list|,
literal|"2001:db8::ffff"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddressPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:db8::2"
argument_list|)
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:db8::"
argument_list|)
argument_list|)
argument_list|,
comment|// same lo/hi values but inclusive=false so this won't match anything
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|"2001:db8::1"
argument_list|,
literal|"2001:db8::1"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Upper bound is the min IP and is not inclusive
name|assertEquals
argument_list|(
operator|new
name|MatchNoDocsQuery
argument_list|()
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|"::"
argument_list|,
literal|"::"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Lower bound is the max IP and is not inclusive
name|assertEquals
argument_list|(
operator|new
name|MatchNoDocsQuery
argument_list|()
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
argument_list|,
literal|"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddressPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"::"
argument_list|)
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"::fffe:ffff:ffff"
argument_list|)
argument_list|)
argument_list|,
comment|// same lo/hi values but inclusive=false so this won't match anything
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|"::"
argument_list|,
literal|"0.0.0.0"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|InetAddressPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"::1:0:0:0"
argument_list|)
argument_list|,
name|InetAddressPoint
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
comment|// same lo/hi values but inclusive=false so this won't match anything
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|"255.255.255.255"
argument_list|,
literal|"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
comment|// lower bound is ipv4, upper bound is ipv6
name|InetAddressPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"192.168.1.7"
argument_list|)
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:db8::"
argument_list|)
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|"::ffff:c0a8:107"
argument_list|,
literal|"2001:db8::"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|"::1"
argument_list|,
literal|"2001::"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot search on field [field] since it is not indexed."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

