begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|TypeFieldTypeTests
specifier|public
class|class
name|TypeFieldTypeTests
extends|extends
name|FieldTypeTestCase
block|{
annotation|@
name|Override
DECL|method|createDefaultFieldType
specifier|protected
name|MappedFieldType
name|createDefaultFieldType
parameter_list|()
block|{
return|return
operator|new
name|TypeFieldMapper
operator|.
name|TypeFieldType
argument_list|()
return|;
block|}
annotation|@
name|Before
DECL|method|setupProperties
specifier|public
name|void
name|setupProperties
parameter_list|()
block|{
name|addModifier
argument_list|(
operator|new
name|Modifier
argument_list|(
literal|"fielddata"
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|MappedFieldType
name|ft
parameter_list|)
block|{
name|TypeFieldMapper
operator|.
name|TypeFieldType
name|tft
init|=
operator|(
name|TypeFieldMapper
operator|.
name|TypeFieldType
operator|)
name|ft
decl_stmt|;
name|tft
operator|.
name|setFielddata
argument_list|(
name|tft
operator|.
name|fielddata
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermsQuery
specifier|public
name|void
name|testTermsQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|()
argument_list|)
decl_stmt|;
name|IndexReader
name|reader
init|=
name|openReaderWithNewType
argument_list|(
literal|"my_type"
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|TypeFieldMapper
operator|.
name|TypeFieldType
name|ft
init|=
operator|new
name|TypeFieldMapper
operator|.
name|TypeFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|ft
operator|.
name|termQuery
argument_list|(
literal|"my_type"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|query
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that Lucene actually simplifies the query when there is a single type
name|Query
name|userQuery
init|=
operator|new
name|PhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"quick"
argument_list|,
literal|"fox"
argument_list|)
decl_stmt|;
name|Query
name|filteredQuery
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
name|userQuery
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|Occur
operator|.
name|FILTER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Query
name|rewritten
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
operator|.
name|rewrite
argument_list|(
name|filteredQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|userQuery
argument_list|,
name|rewritten
argument_list|)
expr_stmt|;
comment|// ... and does not rewrite it if there is more than one type
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|openReaderWithNewType
argument_list|(
literal|"my_type2"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|,
literal|"my_type"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|query
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
name|BytesRef
index|[]
name|types
init|=
operator|new
name|BytesRef
index|[]
block|{
operator|new
name|BytesRef
argument_list|(
literal|"my_type"
argument_list|)
block|,
operator|new
name|BytesRef
argument_list|(
literal|"my_type2"
argument_list|)
block|,
operator|new
name|BytesRef
argument_list|(
literal|"my_type3"
argument_list|)
block|}
decl_stmt|;
comment|// the query should match all documents
name|query
operator|=
operator|new
name|TypeFieldMapper
operator|.
name|TypesQuery
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|query
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|openReaderWithNewType
argument_list|(
literal|"unknown_type"
argument_list|,
name|w
argument_list|)
expr_stmt|;
comment|// the query cannot rewrite to a match all docs sinc unknown_type is not queried.
name|query
operator|=
operator|new
name|TypeFieldMapper
operator|.
name|TypesQuery
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|TypeFieldMapper
operator|.
name|CONTENT_TYPE
argument_list|,
name|types
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|TypeFieldMapper
operator|.
name|CONTENT_TYPE
argument_list|,
name|types
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|rewritten
operator|=
name|query
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|rewritten
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|reader
argument_list|,
name|w
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|openReaderWithNewType
specifier|static
name|DirectoryReader
name|openReaderWithNewType
parameter_list|(
name|String
name|type
parameter_list|,
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|StringField
name|typeField
init|=
operator|new
name|StringField
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|,
name|type
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|typeField
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
return|return
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|)
return|;
block|}
block|}
end_class

end_unit

