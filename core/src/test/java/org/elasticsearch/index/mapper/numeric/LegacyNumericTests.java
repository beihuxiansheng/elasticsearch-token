begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper.numeric
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|numeric
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|LegacyNumericTokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValuesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapperParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParsedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|LegacyFloatFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|LegacyLongFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|LegacyNumberFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|TextFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|string
operator|.
name|SimpleStringMappingTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalSettingsPlugin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|LegacyNumericTests
specifier|public
class|class
name|LegacyNumericTests
extends|extends
name|ESSingleNodeTestCase
block|{
DECL|field|BW_SETTINGS
specifier|private
specifier|static
specifier|final
name|Settings
name|BW_SETTINGS
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_2_3_0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getPlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|getPlugins
parameter_list|()
block|{
return|return
name|pluginList
argument_list|(
name|InternalSettingsPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|testIgnoreMalformedOption
specifier|public
name|void
name|testIgnoreMalformedOption
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"integer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_malformed"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"integer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_malformed"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field3"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"integer"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field1"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field2"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|NumberFormatException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Verify that the default is false
try|try
block|{
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field3"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|NumberFormatException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Unless the global ignore_malformed option is set to true
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_2_3_0
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.mapping.ignore_malformed"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|defaultMapper
operator|=
name|createIndex
argument_list|(
literal|"test2"
argument_list|,
name|indexSettings
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field3"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field3"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// This should still throw an exception, since field2 is specifically set to ignore_malformed=false
try|try
block|{
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|NumberFormatException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCoerceOption
specifier|public
name|void
name|testCoerceOption
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|nonFractionNumericFieldTypes
init|=
block|{
literal|"integer"
block|,
literal|"long"
block|,
literal|"short"
block|}
decl_stmt|;
comment|//Test co-ercion policies on all non-fraction numerics
name|DocumentMapperParser
name|parser
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|BW_SETTINGS
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nonFractionNumericFieldType
range|:
name|nonFractionNumericFieldTypes
control|)
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"noErrorNoCoerceField"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|nonFractionNumericFieldType
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_malformed"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"coerce"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"noErrorCoerceField"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|nonFractionNumericFieldType
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_malformed"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"coerce"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"errorDefaultCoerce"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|nonFractionNumericFieldType
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_malformed"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"errorNoCoerce"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|nonFractionNumericFieldType
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_malformed"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"coerce"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
comment|//Test numbers passed as strings
name|String
name|invalidJsonNumberAsString
init|=
literal|"1"
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"noErrorNoCoerceField"
argument_list|,
name|invalidJsonNumberAsString
argument_list|)
operator|.
name|field
argument_list|(
literal|"noErrorCoerceField"
argument_list|,
name|invalidJsonNumberAsString
argument_list|)
operator|.
name|field
argument_list|(
literal|"errorDefaultCoerce"
argument_list|,
name|invalidJsonNumberAsString
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"noErrorNoCoerceField"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"noErrorCoerceField"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//Default is ignore_malformed=true and coerce=true
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"errorDefaultCoerce"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//Test valid case of numbers passed as numbers
name|int
name|validNumber
init|=
literal|1
decl_stmt|;
name|doc
operator|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"noErrorNoCoerceField"
argument_list|,
name|validNumber
argument_list|)
operator|.
name|field
argument_list|(
literal|"noErrorCoerceField"
argument_list|,
name|validNumber
argument_list|)
operator|.
name|field
argument_list|(
literal|"errorDefaultCoerce"
argument_list|,
name|validNumber
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|validNumber
argument_list|,
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"noErrorNoCoerceField"
argument_list|)
operator|.
name|numericValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|validNumber
argument_list|,
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"noErrorCoerceField"
argument_list|)
operator|.
name|numericValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|validNumber
argument_list|,
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"errorDefaultCoerce"
argument_list|)
operator|.
name|numericValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//Test valid case of negative numbers passed as numbers
name|int
name|validNegativeNumber
init|=
operator|-
literal|1
decl_stmt|;
name|doc
operator|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"noErrorNoCoerceField"
argument_list|,
name|validNegativeNumber
argument_list|)
operator|.
name|field
argument_list|(
literal|"noErrorCoerceField"
argument_list|,
name|validNegativeNumber
argument_list|)
operator|.
name|field
argument_list|(
literal|"errorDefaultCoerce"
argument_list|,
name|validNegativeNumber
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|validNegativeNumber
argument_list|,
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"noErrorNoCoerceField"
argument_list|)
operator|.
name|numericValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|validNegativeNumber
argument_list|,
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"noErrorCoerceField"
argument_list|)
operator|.
name|numericValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|validNegativeNumber
argument_list|,
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"errorDefaultCoerce"
argument_list|)
operator|.
name|numericValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"errorNoCoerce"
argument_list|,
name|invalidJsonNumberAsString
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Test questionable case of floats passed to ints
name|float
name|invalidJsonForInteger
init|=
literal|1.9f
decl_stmt|;
name|int
name|coercedFloatValue
init|=
literal|1
decl_stmt|;
comment|//This is what the JSON parser will do to a float - truncate not round
name|doc
operator|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"noErrorNoCoerceField"
argument_list|,
name|invalidJsonForInteger
argument_list|)
operator|.
name|field
argument_list|(
literal|"noErrorCoerceField"
argument_list|,
name|invalidJsonForInteger
argument_list|)
operator|.
name|field
argument_list|(
literal|"errorDefaultCoerce"
argument_list|,
name|invalidJsonForInteger
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"noErrorNoCoerceField"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|coercedFloatValue
argument_list|,
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"noErrorCoerceField"
argument_list|)
operator|.
name|numericValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//Default is ignore_malformed=true and coerce=true
name|assertEquals
argument_list|(
name|coercedFloatValue
argument_list|,
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"errorDefaultCoerce"
argument_list|)
operator|.
name|numericValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"errorNoCoerce"
argument_list|,
name|invalidJsonForInteger
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDocValues
specifier|public
name|void
name|testDocValues
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"int1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"integer"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"int2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"integer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"double1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"double"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"double2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"integer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|BW_SETTINGS
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|ParsedDocument
name|parsedDoc
init|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"int1"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|field
argument_list|(
literal|"double1"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|field
argument_list|(
literal|"int2"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|field
argument_list|(
literal|"double2"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|parsedDoc
operator|.
name|rootDoc
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|SORTED_NUMERIC
argument_list|,
name|SimpleStringMappingTests
operator|.
name|docValuesType
argument_list|(
name|doc
argument_list|,
literal|"int1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|SORTED_NUMERIC
argument_list|,
name|SimpleStringMappingTests
operator|.
name|docValuesType
argument_list|(
name|doc
argument_list|,
literal|"double1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NONE
argument_list|,
name|SimpleStringMappingTests
operator|.
name|docValuesType
argument_list|(
name|doc
argument_list|,
literal|"int2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NONE
argument_list|,
name|SimpleStringMappingTests
operator|.
name|docValuesType
argument_list|(
name|doc
argument_list|,
literal|"double2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnIndex
specifier|public
name|void
name|testUnIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"int"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"integer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"double"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"double"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|BW_SETTINGS
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"type\":{\"properties\":{\"double\":{\"type\":\"double\",\"index\":false},\"int\":{\"type\":\"integer\",\"index\":false}}}}"
argument_list|,
name|defaultMapper
operator|.
name|mapping
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ParsedDocument
name|parsedDoc
init|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"int"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|field
argument_list|(
literal|"double"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Document
name|doc
init|=
name|parsedDoc
operator|.
name|rootDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexableField
name|field
range|:
name|doc
operator|.
name|getFields
argument_list|(
literal|"int"
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|IndexOptions
operator|.
name|NONE
argument_list|,
name|field
operator|.
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|IndexableField
name|field
range|:
name|doc
operator|.
name|getFields
argument_list|(
literal|"double"
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|IndexOptions
operator|.
name|NONE
argument_list|,
name|field
operator|.
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBwCompatIndex
specifier|public
name|void
name|testBwCompatIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"int"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"integer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"double"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"double"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|Settings
name|oldSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_2_2_0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|oldSettings
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"type\":{\"properties\":{\"double\":{\"type\":\"double\"},\"int\":{\"type\":\"integer\",\"index\":false}}}}"
argument_list|,
name|defaultMapper
operator|.
name|mapping
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocValuesOnNested
specifier|public
name|void
name|testDocValuesOnNested
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"nested"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"nested"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"int"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"integer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_values"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"double"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"double"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_values"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|defaultMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|BW_SETTINGS
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|ParsedDocument
name|parsedDoc
init|=
name|defaultMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"nested"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"int"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|field
argument_list|(
literal|"double"
argument_list|,
literal|"1234"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"int"
argument_list|,
literal|"-1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"double"
argument_list|,
literal|"-2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Document
name|doc
range|:
name|parsedDoc
operator|.
name|docs
argument_list|()
control|)
block|{
if|if
condition|(
name|doc
operator|==
name|parsedDoc
operator|.
name|rootDoc
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|SORTED_NUMERIC
argument_list|,
name|SimpleStringMappingTests
operator|.
name|docValuesType
argument_list|(
name|doc
argument_list|,
literal|"nested.int"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|SORTED_NUMERIC
argument_list|,
name|SimpleStringMappingTests
operator|.
name|docValuesType
argument_list|(
name|doc
argument_list|,
literal|"nested.double"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Test default precision step for autodetected numeric types */
DECL|method|testPrecisionStepDefaultsDetected
specifier|public
name|void
name|testPrecisionStepDefaultsDetected
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|field
argument_list|(
literal|"numeric_detection"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"date_detection"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|BW_SETTINGS
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|mapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"long"
argument_list|,
literal|"100"
argument_list|)
operator|.
name|field
argument_list|(
literal|"double"
argument_list|,
literal|"100.0"
argument_list|)
operator|.
name|field
argument_list|(
literal|"date"
argument_list|,
literal|"2010-01-01"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|docs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Document
name|luceneDoc
init|=
name|doc
operator|.
name|docs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertPrecisionStepEquals
argument_list|(
name|LegacyNumberFieldMapper
operator|.
name|Defaults
operator|.
name|PRECISION_STEP_64_BIT
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"long"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"double"
argument_list|)
operator|.
name|numericValue
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|Float
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrecisionStepEquals
argument_list|(
name|LegacyNumberFieldMapper
operator|.
name|Defaults
operator|.
name|PRECISION_STEP_32_BIT
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"double"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrecisionStepEquals
argument_list|(
name|LegacyNumberFieldMapper
operator|.
name|Defaults
operator|.
name|PRECISION_STEP_64_BIT
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"date"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test default precision step for numeric types */
DECL|method|testPrecisionStepDefaultsMapped
specifier|public
name|void
name|testPrecisionStepDefaultsMapped
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"int"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"integer"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"float"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"float"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"long"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"long"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"double"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"double"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"short"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"short"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"byte"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"byte"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"date"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"date"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"ip"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"ip"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|BW_SETTINGS
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|mapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"int"
argument_list|,
literal|"100"
argument_list|)
operator|.
name|field
argument_list|(
literal|"float"
argument_list|,
literal|"100.0"
argument_list|)
operator|.
name|field
argument_list|(
literal|"long"
argument_list|,
literal|"5000"
argument_list|)
operator|.
name|field
argument_list|(
literal|"double"
argument_list|,
literal|"34.545"
argument_list|)
operator|.
name|field
argument_list|(
literal|"short"
argument_list|,
literal|"1645"
argument_list|)
operator|.
name|field
argument_list|(
literal|"byte"
argument_list|,
literal|"50"
argument_list|)
operator|.
name|field
argument_list|(
literal|"date"
argument_list|,
literal|"2010-01-01"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ip"
argument_list|,
literal|"255.255.255.255"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|docs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Document
name|luceneDoc
init|=
name|doc
operator|.
name|docs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertPrecisionStepEquals
argument_list|(
name|LegacyNumberFieldMapper
operator|.
name|Defaults
operator|.
name|PRECISION_STEP_64_BIT
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"long"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrecisionStepEquals
argument_list|(
name|LegacyNumberFieldMapper
operator|.
name|Defaults
operator|.
name|PRECISION_STEP_64_BIT
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"double"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrecisionStepEquals
argument_list|(
name|LegacyNumberFieldMapper
operator|.
name|Defaults
operator|.
name|PRECISION_STEP_64_BIT
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"date"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrecisionStepEquals
argument_list|(
name|LegacyNumberFieldMapper
operator|.
name|Defaults
operator|.
name|PRECISION_STEP_64_BIT
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"ip"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrecisionStepEquals
argument_list|(
name|LegacyNumberFieldMapper
operator|.
name|Defaults
operator|.
name|PRECISION_STEP_32_BIT
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrecisionStepEquals
argument_list|(
name|LegacyNumberFieldMapper
operator|.
name|Defaults
operator|.
name|PRECISION_STEP_32_BIT
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"float"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrecisionStepEquals
argument_list|(
name|LegacyNumberFieldMapper
operator|.
name|Defaults
operator|.
name|PRECISION_STEP_16_BIT
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"short"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrecisionStepEquals
argument_list|(
name|LegacyNumberFieldMapper
operator|.
name|Defaults
operator|.
name|PRECISION_STEP_8_BIT
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"byte"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test precision step set to silly explicit values */
DECL|method|testPrecisionStepExplicit
specifier|public
name|void
name|testPrecisionStepExplicit
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"int"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"integer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"precision_step"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"float"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"float"
argument_list|)
operator|.
name|field
argument_list|(
literal|"precision_step"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"long"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"long"
argument_list|)
operator|.
name|field
argument_list|(
literal|"precision_step"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"double"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"double"
argument_list|)
operator|.
name|field
argument_list|(
literal|"precision_step"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"short"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"short"
argument_list|)
operator|.
name|field
argument_list|(
literal|"precision_step"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"byte"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"byte"
argument_list|)
operator|.
name|field
argument_list|(
literal|"precision_step"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"date"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"date"
argument_list|)
operator|.
name|field
argument_list|(
literal|"precision_step"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"ip"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"ip"
argument_list|)
operator|.
name|field
argument_list|(
literal|"precision_step"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|BW_SETTINGS
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|mapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"int"
argument_list|,
literal|"100"
argument_list|)
operator|.
name|field
argument_list|(
literal|"float"
argument_list|,
literal|"100.0"
argument_list|)
operator|.
name|field
argument_list|(
literal|"long"
argument_list|,
literal|"5000"
argument_list|)
operator|.
name|field
argument_list|(
literal|"double"
argument_list|,
literal|"34.545"
argument_list|)
operator|.
name|field
argument_list|(
literal|"short"
argument_list|,
literal|"1645"
argument_list|)
operator|.
name|field
argument_list|(
literal|"byte"
argument_list|,
literal|"50"
argument_list|)
operator|.
name|field
argument_list|(
literal|"date"
argument_list|,
literal|"2010-01-01"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ip"
argument_list|,
literal|"255.255.255.255"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|docs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Document
name|luceneDoc
init|=
name|doc
operator|.
name|docs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertPrecisionStepEquals
argument_list|(
literal|1
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrecisionStepEquals
argument_list|(
literal|2
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"float"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrecisionStepEquals
argument_list|(
literal|1
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"long"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrecisionStepEquals
argument_list|(
literal|2
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"double"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrecisionStepEquals
argument_list|(
literal|1
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"short"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrecisionStepEquals
argument_list|(
literal|2
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"byte"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrecisionStepEquals
argument_list|(
literal|1
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"date"
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrecisionStepEquals
argument_list|(
literal|2
argument_list|,
name|luceneDoc
operator|.
name|getField
argument_list|(
literal|"ip"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** checks precisionstep on both the fieldtype and the tokenstream */
DECL|method|assertPrecisionStepEquals
specifier|private
specifier|static
name|void
name|assertPrecisionStepEquals
parameter_list|(
name|int
name|expected
parameter_list|,
name|IndexableField
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|assertNotNull
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|field
argument_list|,
name|instanceOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// check fieldtype's precisionstep
name|assertEquals
argument_list|(
name|expected
argument_list|,
operator|(
operator|(
name|Field
operator|)
name|field
operator|)
operator|.
name|fieldType
argument_list|()
operator|.
name|numericPrecisionStep
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the tokenstream actually used by the indexer
name|TokenStream
name|ts
init|=
name|field
operator|.
name|tokenStream
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ts
argument_list|,
name|instanceOf
argument_list|(
name|LegacyNumericTokenStream
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
operator|(
operator|(
name|LegacyNumericTokenStream
operator|)
name|ts
operator|)
operator|.
name|getPrecisionStep
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermVectorsBackCompat
specifier|public
name|void
name|testTermVectorsBackCompat
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|type
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"byte"
argument_list|,
literal|"short"
argument_list|,
literal|"integer"
argument_list|,
literal|"long"
argument_list|,
literal|"float"
argument_list|,
literal|"double"
argument_list|)
control|)
block|{
name|doTestTermVectorsBackCompat
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestTermVectorsBackCompat
specifier|private
name|void
name|doTestTermVectorsBackCompat
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|DocumentMapperParser
name|parser
init|=
name|createIndex
argument_list|(
literal|"index-"
operator|+
name|type
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
decl_stmt|;
name|String
name|mappingWithTV
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mappingWithTV
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Mapping definition for [foo] has unsupported parameters:  [term_vector : yes]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Settings
name|oldIndexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_2_1_0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|parser
operator|=
name|createIndex
argument_list|(
literal|"index2-"
operator|+
name|type
argument_list|,
name|oldIndexSettings
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mappingWithTV
argument_list|)
argument_list|)
expr_stmt|;
comment|// no exception
block|}
DECL|method|testAnalyzerBackCompat
specifier|public
name|void
name|testAnalyzerBackCompat
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|type
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"byte"
argument_list|,
literal|"short"
argument_list|,
literal|"integer"
argument_list|,
literal|"long"
argument_list|,
literal|"float"
argument_list|,
literal|"double"
argument_list|)
control|)
block|{
name|doTestAnalyzerBackCompat
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestAnalyzerBackCompat
specifier|private
name|void
name|doTestAnalyzerBackCompat
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|DocumentMapperParser
name|parser
init|=
name|createIndex
argument_list|(
literal|"index-"
operator|+
name|type
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
decl_stmt|;
name|String
name|mappingWithTV
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mappingWithTV
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Mapping definition for [foo] has unsupported parameters:  [analyzer : keyword]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Settings
name|oldIndexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_2_1_0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|parser
operator|=
name|createIndex
argument_list|(
literal|"index2-"
operator|+
name|type
argument_list|,
name|oldIndexSettings
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mappingWithTV
argument_list|)
argument_list|)
expr_stmt|;
comment|// no exception
block|}
DECL|method|testIgnoreFielddata
specifier|public
name|void
name|testIgnoreFielddata
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|type
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"byte"
argument_list|,
literal|"short"
argument_list|,
literal|"integer"
argument_list|,
literal|"long"
argument_list|,
literal|"float"
argument_list|,
literal|"double"
argument_list|)
control|)
block|{
name|Settings
name|oldIndexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_2_1_0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DocumentMapperParser
name|parser
init|=
name|createIndex
argument_list|(
literal|"index-"
operator|+
name|type
argument_list|,
name|oldIndexSettings
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
decl_stmt|;
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fielddata"
argument_list|)
operator|.
name|field
argument_list|(
literal|"loading"
argument_list|,
literal|"eager"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|mapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|expectedMapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedMapping
argument_list|,
name|mapper
operator|.
name|mappingSource
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

