begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
operator|.
name|getFirstVersion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
operator|.
name|getPreviousVersion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
operator|.
name|randomVersionBetween
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasToString
import|;
end_import

begin_class
DECL|class|MapperServiceTests
specifier|public
class|class
name|MapperServiceTests
extends|extends
name|ESSingleNodeTestCase
block|{
annotation|@
name|Rule
DECL|field|expectedException
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testTypeNameStartsWithIllegalDot
specifier|public
name|void
name|testTypeNameStartsWithIllegalDot
parameter_list|()
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|MapperParsingException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"mapping type name [.test-type] must not start with a '.'"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|index
init|=
literal|"test-index"
decl_stmt|;
name|String
name|type
init|=
literal|".test-type"
decl_stmt|;
name|String
name|field
init|=
literal|"field"
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|addMapping
argument_list|(
name|type
argument_list|,
name|field
argument_list|,
literal|"type=string"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatLongTypeNameIsNotRejectedOnPreElasticsearchVersionTwo
specifier|public
name|void
name|testThatLongTypeNameIsNotRejectedOnPreElasticsearchVersionTwo
parameter_list|()
block|{
name|String
name|index
init|=
literal|"text-index"
decl_stmt|;
name|String
name|field
init|=
literal|"field"
decl_stmt|;
name|String
name|type
init|=
operator|new
name|String
argument_list|(
operator|new
name|char
index|[
literal|256
index|]
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\0"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|CreateIndexResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|(
name|randomVersionBetween
argument_list|(
name|random
argument_list|()
argument_list|,
name|getFirstVersion
argument_list|()
argument_list|,
name|getPreviousVersion
argument_list|(
name|Version
operator|.
name|V_2_0_0_beta1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
name|type
argument_list|,
name|field
argument_list|,
literal|"type=string"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTypeNameTooLong
specifier|public
name|void
name|testTypeNameTooLong
parameter_list|()
block|{
name|String
name|index
init|=
literal|"text-index"
decl_stmt|;
name|String
name|field
init|=
literal|"field"
decl_stmt|;
name|String
name|type
init|=
operator|new
name|String
argument_list|(
operator|new
name|char
index|[
literal|256
index|]
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\0"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|MapperParsingException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"mapping type name ["
operator|+
name|type
operator|+
literal|"] is too long; limit is length 255 but was [256]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|addMapping
argument_list|(
name|type
argument_list|,
name|field
argument_list|,
literal|"type=string"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

