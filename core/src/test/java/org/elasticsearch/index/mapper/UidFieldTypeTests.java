begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchNoDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermInSetQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_class
DECL|class|UidFieldTypeTests
specifier|public
class|class
name|UidFieldTypeTests
extends|extends
name|FieldTypeTestCase
block|{
annotation|@
name|Override
DECL|method|createDefaultFieldType
specifier|protected
name|MappedFieldType
name|createDefaultFieldType
parameter_list|()
block|{
return|return
operator|new
name|UidFieldMapper
operator|.
name|UidFieldType
argument_list|()
return|;
block|}
DECL|method|testRangeQuery
specifier|public
name|void
name|testRangeQuery
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
name|createDefaultFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"_uid"
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Field [_uid] of type [_uid] does not support range queries"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermsQueryWhenTypesAreEnabled
specifier|public
name|void
name|testTermsQueryWhenTypesAreEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryShardContext
name|context
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|QueryShardContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_INDEX_UUID
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.mapping.single_type"
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
name|indexMetaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|IndexMetaData
operator|.
name|INDEX_UUID_NA_VALUE
argument_list|)
operator|.
name|settings
argument_list|(
name|indexSettings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexSettings
name|mockSettings
init|=
operator|new
name|IndexSettings
argument_list|(
name|indexMetaData
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|context
operator|.
name|getIndexSettings
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockSettings
argument_list|)
expr_stmt|;
name|MapperService
name|mapperService
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MapperService
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|types
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|context
operator|.
name|queryTypes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|context
operator|.
name|getMapperService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mapperService
argument_list|)
expr_stmt|;
name|MappedFieldType
name|ft
init|=
name|UidFieldMapper
operator|.
name|defaultFieldType
argument_list|(
name|mockSettings
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|ft
operator|.
name|termQuery
argument_list|(
literal|"type#id"
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TermInSetQuery
argument_list|(
literal|"_uid"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"type#id"
argument_list|)
argument_list|)
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermsQueryWhenTypesAreDisabled
specifier|public
name|void
name|testTermsQueryWhenTypesAreDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryShardContext
name|context
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|QueryShardContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_INDEX_UUID
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.mapping.single_type"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
name|indexMetaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|IndexMetaData
operator|.
name|INDEX_UUID_NA_VALUE
argument_list|)
operator|.
name|settings
argument_list|(
name|indexSettings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexSettings
name|mockSettings
init|=
operator|new
name|IndexSettings
argument_list|(
name|indexMetaData
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|context
operator|.
name|getIndexSettings
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockSettings
argument_list|)
expr_stmt|;
name|MapperService
name|mapperService
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MapperService
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|types
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mapperService
operator|.
name|types
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|context
operator|.
name|getMapperService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mapperService
argument_list|)
expr_stmt|;
name|MappedFieldType
name|ft
init|=
name|UidFieldMapper
operator|.
name|defaultFieldType
argument_list|(
name|mockSettings
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|ft
operator|.
name|termQuery
argument_list|(
literal|"type#id"
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|MatchNoDocsQuery
argument_list|()
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|types
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mapperService
operator|.
name|types
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|query
operator|=
name|ft
operator|.
name|termQuery
argument_list|(
literal|"type#id"
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TermInSetQuery
argument_list|(
literal|"_id"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"id"
argument_list|)
argument_list|)
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|query
operator|=
name|ft
operator|.
name|termQuery
argument_list|(
literal|"type2#id"
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TermInSetQuery
argument_list|(
literal|"_id"
argument_list|)
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

