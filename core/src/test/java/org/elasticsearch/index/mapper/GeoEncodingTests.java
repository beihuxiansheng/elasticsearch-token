begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoDistance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|DistanceUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|DistanceUnit
operator|.
name|Distance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|GeoPointFieldMapperLegacy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_class
DECL|class|GeoEncodingTests
specifier|public
class|class
name|GeoEncodingTests
extends|extends
name|ESTestCase
block|{
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|double
name|lat
init|=
name|randomDouble
argument_list|()
operator|*
literal|180
operator|-
literal|90
decl_stmt|;
specifier|final
name|double
name|lon
init|=
name|randomDouble
argument_list|()
operator|*
literal|360
operator|-
literal|180
decl_stmt|;
specifier|final
name|Distance
name|precision
init|=
operator|new
name|Distance
argument_list|(
literal|1
operator|+
operator|(
name|randomDouble
argument_list|()
operator|*
literal|9
operator|)
argument_list|,
name|randomFrom
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DistanceUnit
operator|.
name|MILLIMETERS
argument_list|,
name|DistanceUnit
operator|.
name|METERS
argument_list|,
name|DistanceUnit
operator|.
name|KILOMETERS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|GeoPointFieldMapperLegacy
operator|.
name|Encoding
name|encoding
init|=
name|GeoPointFieldMapperLegacy
operator|.
name|Encoding
operator|.
name|of
argument_list|(
name|precision
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|encoding
operator|.
name|precision
argument_list|()
operator|.
name|convert
argument_list|(
name|DistanceUnit
operator|.
name|METERS
argument_list|)
operator|.
name|value
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|precision
operator|.
name|convert
argument_list|(
name|DistanceUnit
operator|.
name|METERS
argument_list|)
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|GeoPoint
name|geoPoint
init|=
name|encoding
operator|.
name|decode
argument_list|(
name|encoding
operator|.
name|encodeCoordinate
argument_list|(
name|lat
argument_list|)
argument_list|,
name|encoding
operator|.
name|encodeCoordinate
argument_list|(
name|lon
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|double
name|error
init|=
name|GeoDistance
operator|.
name|PLANE
operator|.
name|calculate
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|,
name|geoPoint
operator|.
name|lat
argument_list|()
argument_list|,
name|geoPoint
operator|.
name|lon
argument_list|()
argument_list|,
name|DistanceUnit
operator|.
name|METERS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|error
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|precision
operator|.
name|convert
argument_list|(
name|DistanceUnit
operator|.
name|METERS
argument_list|)
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

