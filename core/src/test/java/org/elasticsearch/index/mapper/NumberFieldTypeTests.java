begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|HalfFloatPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchNoDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
operator|.
name|Relation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|NumberFieldMapper
operator|.
name|NumberType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
DECL|class|NumberFieldTypeTests
specifier|public
class|class
name|NumberFieldTypeTests
extends|extends
name|FieldTypeTestCase
block|{
DECL|field|type
name|NumberType
name|type
decl_stmt|;
annotation|@
name|Before
DECL|method|pickType
specifier|public
name|void
name|pickType
parameter_list|()
block|{
name|type
operator|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createDefaultFieldType
specifier|protected
name|MappedFieldType
name|createDefaultFieldType
parameter_list|()
block|{
return|return
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|testIsFieldWithinQuery
specifier|public
name|void
name|testIsFieldWithinQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|MappedFieldType
name|ft
init|=
name|createDefaultFieldType
argument_list|()
decl_stmt|;
comment|// current impl ignores args and should always return INTERSECTS
name|assertEquals
argument_list|(
name|Relation
operator|.
name|INTERSECTS
argument_list|,
name|ft
operator|.
name|isFieldWithinQuery
argument_list|(
literal|null
argument_list|,
name|randomDouble
argument_list|()
argument_list|,
name|randomDouble
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntegerTermsQueryWithDecimalPart
specifier|public
name|void
name|testIntegerTermsQueryWithDecimalPart
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|NumberType
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ft
operator|.
name|termsQuery
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2.1
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newSetQuery
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ft
operator|.
name|termsQuery
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1.0
argument_list|,
literal|2.1
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ft
operator|.
name|termsQuery
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1.1
argument_list|,
literal|2.1
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|MatchNoDocsQuery
argument_list|)
expr_stmt|;
block|}
DECL|method|testLongTermsQueryWithDecimalPart
specifier|public
name|void
name|testLongTermsQueryWithDecimalPart
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|NumberType
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ft
operator|.
name|termsQuery
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2.1
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newSetQuery
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ft
operator|.
name|termsQuery
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1.0
argument_list|,
literal|2.1
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ft
operator|.
name|termsQuery
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1.1
argument_list|,
literal|2.1
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|MatchNoDocsQuery
argument_list|)
expr_stmt|;
block|}
DECL|method|testByteTermQueryWithDecimalPart
specifier|public
name|void
name|testByteTermQueryWithDecimalPart
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|NumberType
operator|.
name|BYTE
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ft
operator|.
name|termQuery
argument_list|(
literal|42.1
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|MatchNoDocsQuery
argument_list|)
expr_stmt|;
block|}
DECL|method|testShortTermQueryWithDecimalPart
specifier|public
name|void
name|testShortTermQueryWithDecimalPart
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|NumberType
operator|.
name|SHORT
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ft
operator|.
name|termQuery
argument_list|(
literal|42.1
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|MatchNoDocsQuery
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntegerTermQueryWithDecimalPart
specifier|public
name|void
name|testIntegerTermQueryWithDecimalPart
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|NumberType
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ft
operator|.
name|termQuery
argument_list|(
literal|42.1
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|MatchNoDocsQuery
argument_list|)
expr_stmt|;
block|}
DECL|method|testLongTermQueryWithDecimalPart
specifier|public
name|void
name|testLongTermQueryWithDecimalPart
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ft
operator|.
name|termQuery
argument_list|(
literal|42.1
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|MatchNoDocsQuery
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermQuery
specifier|public
name|void
name|testTermQuery
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newExactQuery
argument_list|(
literal|"field"
argument_list|,
literal|42
argument_list|)
argument_list|,
name|ft
operator|.
name|termQuery
argument_list|(
literal|"42"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ft
operator|.
name|termQuery
argument_list|(
literal|"42"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot search on field [field] since it is not indexed."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeQueryWithNegativeBounds
specifier|public
name|void
name|testRangeQueryWithNegativeBounds
parameter_list|()
block|{
name|MappedFieldType
name|ftInt
init|=
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|NumberType
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
name|ftInt
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ftInt
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|ftInt
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|3.5
argument_list|,
operator|-
literal|2.5
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|ftInt
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|3.5
argument_list|,
operator|-
literal|2.5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ftInt
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|0.5
argument_list|,
literal|0.5
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ftInt
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|0.5
argument_list|,
literal|0.5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ftInt
operator|.
name|rangeQuery
argument_list|(
literal|0.5
argument_list|,
literal|2.5
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ftInt
operator|.
name|rangeQuery
argument_list|(
literal|0.5
argument_list|,
literal|2.5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ftInt
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|0.5
argument_list|,
literal|2.5
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ftInt
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|0.5
argument_list|,
literal|2.5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ftInt
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|2.5
argument_list|,
literal|0.5
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ftInt
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|2.5
argument_list|,
literal|0.5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|ftInt
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|2.5
argument_list|,
operator|-
literal|0.5
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|ftInt
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|2.5
argument_list|,
operator|-
literal|0.5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|MappedFieldType
name|ftLong
init|=
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|NumberType
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|ftLong
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ftLong
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|ftLong
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|3.5
argument_list|,
operator|-
literal|2.5
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|ftLong
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|3.5
argument_list|,
operator|-
literal|2.5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ftLong
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|0.5
argument_list|,
literal|0.5
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ftLong
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|0.5
argument_list|,
literal|0.5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ftLong
operator|.
name|rangeQuery
argument_list|(
literal|0.5
argument_list|,
literal|2.5
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ftLong
operator|.
name|rangeQuery
argument_list|(
literal|0.5
argument_list|,
literal|2.5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ftLong
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|0.5
argument_list|,
literal|2.5
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ftLong
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|0.5
argument_list|,
literal|2.5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ftLong
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|2.5
argument_list|,
literal|0.5
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ftLong
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|2.5
argument_list|,
literal|0.5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|ftLong
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|2.5
argument_list|,
operator|-
literal|0.5
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|ftLong
operator|.
name|rangeQuery
argument_list|(
operator|-
literal|2.5
argument_list|,
operator|-
literal|0.5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testByteRangeQueryWithDecimalParts
specifier|public
name|void
name|testByteRangeQueryWithDecimalParts
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|NumberType
operator|.
name|BYTE
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|1.1
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|1.1
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|1
argument_list|,
literal|10.1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|1
argument_list|,
literal|10.1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testShortRangeQueryWithDecimalParts
specifier|public
name|void
name|testShortRangeQueryWithDecimalParts
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|NumberType
operator|.
name|SHORT
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|1.1
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|1.1
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|1
argument_list|,
literal|10.1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|1
argument_list|,
literal|10.1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntegerRangeQueryWithDecimalParts
specifier|public
name|void
name|testIntegerRangeQueryWithDecimalParts
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|NumberType
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|1.1
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|1.1
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|1
argument_list|,
literal|10.1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|1
argument_list|,
literal|10.1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLongRangeQueryWithDecimalParts
specifier|public
name|void
name|testLongRangeQueryWithDecimalParts
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|NumberType
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|1.1
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|1.1
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|1
argument_list|,
literal|10.1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|1
argument_list|,
literal|10.1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeQuery
specifier|public
name|void
name|testRangeQuery
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|"1"
argument_list|,
literal|"3"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|"1"
argument_list|,
literal|"3"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot search on field [field] since it is not indexed."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConversions
specifier|public
name|void
name|testConversions
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|,
name|NumberType
operator|.
name|BYTE
operator|.
name|parse
argument_list|(
literal|3d
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
name|NumberType
operator|.
name|SHORT
operator|.
name|parse
argument_list|(
literal|3d
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|NumberType
operator|.
name|INTEGER
operator|.
name|parse
argument_list|(
literal|3d
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|NumberType
operator|.
name|LONG
operator|.
name|parse
argument_list|(
literal|3d
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3f
argument_list|,
name|NumberType
operator|.
name|HALF_FLOAT
operator|.
name|parse
argument_list|(
literal|3d
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3f
argument_list|,
name|NumberType
operator|.
name|FLOAT
operator|.
name|parse
argument_list|(
literal|3d
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3d
argument_list|,
name|NumberType
operator|.
name|DOUBLE
operator|.
name|parse
argument_list|(
literal|3d
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|,
name|NumberType
operator|.
name|BYTE
operator|.
name|parse
argument_list|(
literal|3.5
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
name|NumberType
operator|.
name|SHORT
operator|.
name|parse
argument_list|(
literal|3.5
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|NumberType
operator|.
name|INTEGER
operator|.
name|parse
argument_list|(
literal|3.5
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|NumberType
operator|.
name|LONG
operator|.
name|parse
argument_list|(
literal|3.5
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.5f
argument_list|,
name|NumberType
operator|.
name|FLOAT
operator|.
name|parse
argument_list|(
literal|3.5
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.5d
argument_list|,
name|NumberType
operator|.
name|DOUBLE
operator|.
name|parse
argument_list|(
literal|3.5
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|NumberType
operator|.
name|BYTE
operator|.
name|parse
argument_list|(
literal|128
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Value [128] is out of range for a byte"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|NumberType
operator|.
name|SHORT
operator|.
name|parse
argument_list|(
literal|65536
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Value [65536] is out of range for a short"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|NumberType
operator|.
name|INTEGER
operator|.
name|parse
argument_list|(
literal|2147483648L
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Value [2147483648] is out of range for an integer"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|NumberType
operator|.
name|LONG
operator|.
name|parse
argument_list|(
literal|10000000000000000000d
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Value [1.0E19] is out of range for a long"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.1f
argument_list|,
name|NumberType
operator|.
name|HALF_FLOAT
operator|.
name|parse
argument_list|(
literal|1.1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.1f
argument_list|,
name|NumberType
operator|.
name|FLOAT
operator|.
name|parse
argument_list|(
literal|1.1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.1d
argument_list|,
name|NumberType
operator|.
name|DOUBLE
operator|.
name|parse
argument_list|(
literal|1.1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHalfFloatRange
specifier|public
name|void
name|testHalfFloatRange
parameter_list|()
throws|throws
name|IOException
block|{
comment|// make sure the accuracy loss of half floats only occurs at index time
comment|// this test checks that searching half floats yields the same results as
comment|// searching floats that are rounded to the closest half float
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
literal|10000
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|float
name|value
init|=
operator|(
name|randomFloat
argument_list|()
operator|*
literal|2
operator|-
literal|1
operator|)
operator|*
literal|70000
decl_stmt|;
name|float
name|rounded
init|=
name|HalfFloatPoint
operator|.
name|sortableShortToHalfFloat
argument_list|(
name|HalfFloatPoint
operator|.
name|halfFloatToSortableShort
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|HalfFloatPoint
argument_list|(
literal|"half_float"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatPoint
argument_list|(
literal|"float"
argument_list|,
name|rounded
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numQueries
init|=
literal|1000
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueries
condition|;
operator|++
name|i
control|)
block|{
name|float
name|l
init|=
operator|(
name|randomFloat
argument_list|()
operator|*
literal|2
operator|-
literal|1
operator|)
operator|*
literal|70000
decl_stmt|;
name|float
name|u
init|=
operator|(
name|randomFloat
argument_list|()
operator|*
literal|2
operator|-
literal|1
operator|)
operator|*
literal|70000
decl_stmt|;
name|boolean
name|includeLower
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|includeUpper
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|Query
name|floatQ
init|=
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|FLOAT
operator|.
name|rangeQuery
argument_list|(
literal|"float"
argument_list|,
name|l
argument_list|,
name|u
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
decl_stmt|;
name|Query
name|halfFloatQ
init|=
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|HALF_FLOAT
operator|.
name|rangeQuery
argument_list|(
literal|"half_float"
argument_list|,
name|l
argument_list|,
name|u
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|count
argument_list|(
name|floatQ
argument_list|)
argument_list|,
name|searcher
operator|.
name|count
argument_list|(
name|halfFloatQ
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|reader
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|testNegativeZero
specifier|public
name|void
name|testNegativeZero
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|NumberType
operator|.
name|DOUBLE
operator|.
name|rangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|null
argument_list|,
operator|-
literal|0d
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|NumberType
operator|.
name|DOUBLE
operator|.
name|rangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|null
argument_list|,
operator|+
literal|0d
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NumberType
operator|.
name|FLOAT
operator|.
name|rangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|null
argument_list|,
operator|-
literal|0f
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|NumberType
operator|.
name|FLOAT
operator|.
name|rangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|null
argument_list|,
operator|+
literal|0f
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NumberType
operator|.
name|HALF_FLOAT
operator|.
name|rangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|null
argument_list|,
operator|-
literal|0f
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|NumberType
operator|.
name|HALF_FLOAT
operator|.
name|rangeQuery
argument_list|(
literal|"field"
argument_list|,
literal|null
argument_list|,
operator|+
literal|0f
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|NumberType
operator|.
name|DOUBLE
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|0d
argument_list|)
operator|.
name|equals
argument_list|(
name|NumberType
operator|.
name|DOUBLE
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
operator|+
literal|0d
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|NumberType
operator|.
name|FLOAT
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|0f
argument_list|)
operator|.
name|equals
argument_list|(
name|NumberType
operator|.
name|FLOAT
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
operator|+
literal|0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|NumberType
operator|.
name|HALF_FLOAT
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|0f
argument_list|)
operator|.
name|equals
argument_list|(
name|NumberType
operator|.
name|HALF_FLOAT
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
operator|+
literal|0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

