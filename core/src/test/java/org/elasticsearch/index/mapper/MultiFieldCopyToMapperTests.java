begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|MapperTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsEqual
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|MultiFieldCopyToMapperTests
specifier|public
class|class
name|MultiFieldCopyToMapperTests
extends|extends
name|ESTestCase
block|{
DECL|method|testExceptionForCopyToInMultiFields
specifier|public
name|void
name|testExceptionForCopyToInMultiFields
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|mapping
init|=
name|createMappinmgWithCopyToInMultiField
argument_list|()
decl_stmt|;
name|Tuple
argument_list|<
name|List
argument_list|<
name|Version
argument_list|>
argument_list|,
name|List
argument_list|<
name|Version
argument_list|>
argument_list|>
name|versionsWithAndWithoutExpectedExceptions
init|=
name|versionsWithAndWithoutExpectedExceptions
argument_list|()
decl_stmt|;
comment|// first check that for newer versions we throw exception if copy_to is found withing multi field
name|Version
name|indexVersion
init|=
name|randomFrom
argument_list|(
name|versionsWithAndWithoutExpectedExceptions
operator|.
name|v1
argument_list|()
argument_list|)
decl_stmt|;
name|MapperService
name|mapperService
init|=
name|MapperTestUtils
operator|.
name|newMapperService
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|indexVersion
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|mapperService
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
operator|.
name|string
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Parsing should throw an exception because the mapping contains a copy_to in a multi field"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"copy_to in multi fields is not allowed. Found the copy_to in field [c] which is within a multi field."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// now test that with an older version the parsing just works
name|indexVersion
operator|=
name|randomFrom
argument_list|(
name|versionsWithAndWithoutExpectedExceptions
operator|.
name|v2
argument_list|()
argument_list|)
expr_stmt|;
name|mapperService
operator|=
name|MapperTestUtils
operator|.
name|newMapperService
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|indexVersion
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|DocumentMapper
name|documentMapper
init|=
name|mapperService
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
operator|.
name|string
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|documentMapper
operator|.
name|mapping
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"copy_to"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createMappinmgWithCopyToInMultiField
specifier|private
specifier|static
name|XContentBuilder
name|createMappinmgWithCopyToInMultiField
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"a"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"b"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"c"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"copy_to"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|mapping
return|;
block|}
comment|// returns a tuple where
comment|// v1 is a list of versions for which we expect an exception when a copy_to in multi fields is found and
comment|// v2 is older versions where we throw no exception and we just log a warning
DECL|method|versionsWithAndWithoutExpectedExceptions
specifier|private
specifier|static
name|Tuple
argument_list|<
name|List
argument_list|<
name|Version
argument_list|>
argument_list|,
name|List
argument_list|<
name|Version
argument_list|>
argument_list|>
name|versionsWithAndWithoutExpectedExceptions
parameter_list|()
block|{
name|List
argument_list|<
name|Version
argument_list|>
name|versionsWithException
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Version
argument_list|>
name|versionsWithoutException
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Version
name|version
range|:
name|VersionUtils
operator|.
name|allVersions
argument_list|()
control|)
block|{
if|if
condition|(
name|version
operator|.
name|after
argument_list|(
name|Version
operator|.
name|V_2_1_0
argument_list|)
operator|||
operator|(
name|version
operator|.
name|after
argument_list|(
name|Version
operator|.
name|V_2_0_1
argument_list|)
operator|&&
name|version
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_2_1_0
argument_list|)
operator|)
condition|)
block|{
name|versionsWithException
operator|.
name|add
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|versionsWithoutException
operator|.
name|add
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|versionsWithException
argument_list|,
name|versionsWithoutException
argument_list|)
return|;
block|}
block|}
end_class

end_unit

