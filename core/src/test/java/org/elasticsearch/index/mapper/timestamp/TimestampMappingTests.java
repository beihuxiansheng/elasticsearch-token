begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper.timestamp
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|timestamp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|TimestampParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|Joda
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapperParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParsedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|SourceToParse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TimestampFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|Version
operator|.
name|V_1_5_0
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|Version
operator|.
name|V_2_0_0_beta1
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
operator|.
name|randomVersion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
operator|.
name|randomVersionBetween
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasKey
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|TimestampMappingTests
specifier|public
class|class
name|TimestampMappingTests
extends|extends
name|ESSingleNodeTestCase
block|{
DECL|field|BWC_SETTINGS
name|Settings
name|BWC_SETTINGS
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_1_4_2
operator|.
name|id
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|method|testSimpleDisabled
specifier|public
name|void
name|testSimpleDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|source
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|docMapper
operator|.
name|parse
argument_list|(
name|SourceToParse
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"1"
argument_list|)
operator|.
name|timestamp
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"_timestamp"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnabled
specifier|public
name|void
name|testEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|source
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|docMapper
operator|.
name|parse
argument_list|(
name|SourceToParse
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"1"
argument_list|)
operator|.
name|timestamp
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|stored
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|IndexOptions
operator|.
name|NONE
argument_list|,
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getField
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|tokenStream
argument_list|(
name|docMapper
operator|.
name|mappers
argument_list|()
operator|.
name|indexAnalyzer
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultValues
specifier|public
name|void
name|testDefaultValues
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Version
name|version
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|V_1_5_0
argument_list|,
name|V_2_0_0_beta1
argument_list|,
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|mapping
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
control|)
block|{
name|DocumentMapper
name|docMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|version
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|enabled
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|TimestampFieldMapper
operator|.
name|Defaults
operator|.
name|ENABLED
operator|.
name|enabled
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|stored
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|version
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_2_0_0_beta1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|TimestampFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
operator|.
name|indexOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|path
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|TimestampFieldMapper
operator|.
name|Defaults
operator|.
name|PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|version
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_2_0_0_beta1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|expectedFormat
init|=
name|version
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_2_0_0_beta1
argument_list|)
condition|?
name|TimestampFieldMapper
operator|.
name|DEFAULT_DATE_TIME_FORMAT
else|:
name|TimestampFieldMapper
operator|.
name|Defaults
operator|.
name|DATE_TIME_FORMATTER_BEFORE_2_0
operator|.
name|format
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|format
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedFormat
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testBackcompatSetValues
specifier|public
name|void
name|testBackcompatSetValues
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"year"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_values"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|BWC_SETTINGS
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|enabled
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|stored
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IndexOptions
operator|.
name|NONE
argument_list|,
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|path
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"timestamp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
operator|.
name|format
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatDisablingDuringMergeIsWorking
specifier|public
name|void
name|testThatDisablingDuringMergeIsWorking
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|enabledMapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapperParser
name|parser
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
decl_stmt|;
name|DocumentMapper
name|enabledMapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|enabledMapping
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|disabledMapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|disabledMapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|disabledMapping
argument_list|)
argument_list|)
decl_stmt|;
name|enabledMapper
operator|.
name|merge
argument_list|(
name|disabledMapper
operator|.
name|mapping
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|enabledMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|enabled
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// issue 3174
DECL|method|testThatSerializationWorksCorrectlyForIndexField
specifier|public
name|void
name|testThatSerializationWorksCorrectlyForIndexField
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|enabledMapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|enabledMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|BWC_SETTINGS
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|enabledMapping
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
decl_stmt|;
name|enabledMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|close
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|serializedMap
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|JsonXContent
operator|.
name|jsonXContent
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
init|)
block|{
name|serializedMap
operator|=
name|parser
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|serializedMap
argument_list|,
name|hasKey
argument_list|(
literal|"_timestamp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|serializedMap
operator|.
name|get
argument_list|(
literal|"_timestamp"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|timestampConfiguration
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|serializedMap
operator|.
name|get
argument_list|(
literal|"_timestamp"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|timestampConfiguration
argument_list|,
name|hasKey
argument_list|(
literal|"index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timestampConfiguration
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"no"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
DECL|method|testBackcompatPathMissingDefaultValue
specifier|public
name|void
name|testBackcompatPathMissingDefaultValue
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_missing"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentBuilder
name|doc
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|BWC_SETTINGS
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|MappingMetaData
name|mappingMetaData
init|=
operator|new
name|MappingMetaData
argument_list|(
name|docMapper
argument_list|)
decl_stmt|;
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|doc
argument_list|)
decl_stmt|;
try|try
block|{
name|request
operator|.
name|process
argument_list|(
name|metaData
argument_list|,
name|mappingMetaData
argument_list|,
literal|true
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimestampParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"timestamp is required by mapping"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
DECL|method|testTimestampDefaultValue
specifier|public
name|void
name|testTimestampDefaultValue
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentBuilder
name|doc
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|MappingMetaData
name|mappingMetaData
init|=
operator|new
name|MappingMetaData
argument_list|(
name|docMapper
argument_list|)
decl_stmt|;
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|request
operator|.
name|process
argument_list|(
name|metaData
argument_list|,
name|mappingMetaData
argument_list|,
literal|true
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|timestamp
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// We should have less than one minute (probably some ms)
name|long
name|delay
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|Long
operator|.
name|parseLong
argument_list|(
name|request
operator|.
name|timestamp
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|delay
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|60000L
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
DECL|method|testBackcompatPathMissingDefaultToEpochValue
specifier|public
name|void
name|testBackcompatPathMissingDefaultToEpochValue
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"default"
argument_list|,
literal|"1970-01-01"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"YYYY-MM-dd"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentBuilder
name|doc
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|BWC_SETTINGS
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|MappingMetaData
name|mappingMetaData
init|=
operator|new
name|MappingMetaData
argument_list|(
name|docMapper
argument_list|)
decl_stmt|;
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|request
operator|.
name|process
argument_list|(
name|metaData
argument_list|,
name|mappingMetaData
argument_list|,
literal|true
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|timestamp
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|timestamp
argument_list|()
argument_list|,
name|is
argument_list|(
name|MappingMetaData
operator|.
name|Timestamp
operator|.
name|parseStringTimestamp
argument_list|(
literal|"1970-01-01"
argument_list|,
name|Joda
operator|.
name|forPattern
argument_list|(
literal|"YYYY-MM-dd"
argument_list|)
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
DECL|method|testTimestampMissingDefaultToEpochValue
specifier|public
name|void
name|testTimestampMissingDefaultToEpochValue
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"default"
argument_list|,
literal|"1970-01-01"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"YYYY-MM-dd"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentBuilder
name|doc
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|MappingMetaData
name|mappingMetaData
init|=
operator|new
name|MappingMetaData
argument_list|(
name|docMapper
argument_list|)
decl_stmt|;
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|request
operator|.
name|process
argument_list|(
name|metaData
argument_list|,
name|mappingMetaData
argument_list|,
literal|true
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|timestamp
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|timestamp
argument_list|()
argument_list|,
name|is
argument_list|(
name|MappingMetaData
operator|.
name|Timestamp
operator|.
name|parseStringTimestamp
argument_list|(
literal|"1970-01-01"
argument_list|,
name|Joda
operator|.
name|forPattern
argument_list|(
literal|"YYYY-MM-dd"
argument_list|)
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
DECL|method|testBackcompatPathMissingNowDefaultValue
specifier|public
name|void
name|testBackcompatPathMissingNowDefaultValue
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"default"
argument_list|,
literal|"now"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"YYYY-MM-dd"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentBuilder
name|doc
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|BWC_SETTINGS
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|MappingMetaData
name|mappingMetaData
init|=
operator|new
name|MappingMetaData
argument_list|(
name|docMapper
argument_list|)
decl_stmt|;
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|request
operator|.
name|process
argument_list|(
name|metaData
argument_list|,
name|mappingMetaData
argument_list|,
literal|true
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|timestamp
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// We should have less than one minute (probably some ms)
name|long
name|delay
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|Long
operator|.
name|parseLong
argument_list|(
name|request
operator|.
name|timestamp
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|delay
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|60000L
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
DECL|method|testTimestampMissingNowDefaultValue
specifier|public
name|void
name|testTimestampMissingNowDefaultValue
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"default"
argument_list|,
literal|"now"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"YYYY-MM-dd"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentBuilder
name|doc
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|MappingMetaData
name|mappingMetaData
init|=
operator|new
name|MappingMetaData
argument_list|(
name|docMapper
argument_list|)
decl_stmt|;
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|request
operator|.
name|process
argument_list|(
name|metaData
argument_list|,
name|mappingMetaData
argument_list|,
literal|true
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|timestamp
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// We should have less than one minute (probably some ms)
name|long
name|delay
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|Long
operator|.
name|parseLong
argument_list|(
name|request
operator|.
name|timestamp
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|delay
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|60000L
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
DECL|method|testPathMissingWithForcedNullDefaultShouldFail
specifier|public
name|void
name|testPathMissingWithForcedNullDefaultShouldFail
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"default"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
try|try
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"we should reject the mapping with a TimestampParsingException: default timestamp can not be set to null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimestampParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"default timestamp can not be set to null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
DECL|method|testBackcompatPathMissingShouldFail
specifier|public
name|void
name|testBackcompatPathMissingShouldFail
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_missing"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentBuilder
name|doc
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|BWC_SETTINGS
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|MappingMetaData
name|mappingMetaData
init|=
operator|new
name|MappingMetaData
argument_list|(
name|docMapper
argument_list|)
decl_stmt|;
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|doc
argument_list|)
decl_stmt|;
try|try
block|{
name|request
operator|.
name|process
argument_list|(
name|metaData
argument_list|,
name|mappingMetaData
argument_list|,
literal|true
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"we should reject the mapping with a TimestampParsingException: timestamp is required by mapping"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimestampParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"timestamp is required by mapping"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
DECL|method|testTimestampMissingWithForcedNullDefaultShouldFail
specifier|public
name|void
name|testTimestampMissingWithForcedNullDefaultShouldFail
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"default"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
try|try
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"we should reject the mapping with a TimestampParsingException: default timestamp can not be set to null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimestampParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"default timestamp can not be set to null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
DECL|method|testTimestampDefaultAndIgnore
specifier|public
name|void
name|testTimestampDefaultAndIgnore
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"default"
argument_list|,
literal|"1971-12-26"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_missing"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
try|try
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"we should reject the mapping with a TimestampParsingException: default timestamp can not be set with ignore_missing set to false"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimestampParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"default timestamp can not be set with ignore_missing set to false"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Issue 4718: was throwing a TimestampParsingException: failed to parse timestamp [null]
DECL|method|testTimestampMissingShouldNotFail
specifier|public
name|void
name|testTimestampMissingShouldNotFail
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentBuilder
name|doc
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|MappingMetaData
name|mappingMetaData
init|=
operator|new
name|MappingMetaData
argument_list|(
name|docMapper
argument_list|)
decl_stmt|;
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|request
operator|.
name|process
argument_list|(
name|metaData
argument_list|,
name|mappingMetaData
argument_list|,
literal|true
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|timestamp
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// We should have less than one minute (probably some ms)
name|long
name|delay
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|Long
operator|.
name|parseLong
argument_list|(
name|request
operator|.
name|timestamp
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|delay
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|60000L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultTimestampStream
specifier|public
name|void
name|testDefaultTimestampStream
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Testing null value for default timestamp
block|{
name|MappingMetaData
operator|.
name|Timestamp
name|timestamp
init|=
operator|new
name|MappingMetaData
operator|.
name|Timestamp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|,
name|TimestampFieldMapper
operator|.
name|DEFAULT_DATE_TIME_FORMAT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MappingMetaData
name|expected
init|=
operator|new
name|MappingMetaData
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
literal|"{}"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MappingMetaData
operator|.
name|Id
argument_list|(
literal|null
argument_list|)
argument_list|,
operator|new
name|MappingMetaData
operator|.
name|Routing
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|,
name|timestamp
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|expected
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|BytesReference
name|bytes
init|=
name|out
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|MappingMetaData
name|metaData
init|=
name|MappingMetaData
operator|.
name|PROTO
operator|.
name|readFrom
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|metaData
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Testing "now" value for default timestamp
block|{
name|MappingMetaData
operator|.
name|Timestamp
name|timestamp
init|=
operator|new
name|MappingMetaData
operator|.
name|Timestamp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|,
name|TimestampFieldMapper
operator|.
name|DEFAULT_DATE_TIME_FORMAT
argument_list|,
literal|"now"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MappingMetaData
name|expected
init|=
operator|new
name|MappingMetaData
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
literal|"{}"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MappingMetaData
operator|.
name|Id
argument_list|(
literal|null
argument_list|)
argument_list|,
operator|new
name|MappingMetaData
operator|.
name|Routing
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|,
name|timestamp
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|expected
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|BytesReference
name|bytes
init|=
name|out
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|MappingMetaData
name|metaData
init|=
name|MappingMetaData
operator|.
name|PROTO
operator|.
name|readFrom
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|metaData
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Testing "ignore_missing" value for default timestamp
block|{
name|MappingMetaData
operator|.
name|Timestamp
name|timestamp
init|=
operator|new
name|MappingMetaData
operator|.
name|Timestamp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|,
name|TimestampFieldMapper
operator|.
name|DEFAULT_DATE_TIME_FORMAT
argument_list|,
literal|"now"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MappingMetaData
name|expected
init|=
operator|new
name|MappingMetaData
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
literal|"{}"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
operator|new
name|MappingMetaData
operator|.
name|Id
argument_list|(
literal|null
argument_list|)
argument_list|,
operator|new
name|MappingMetaData
operator|.
name|Routing
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|,
name|timestamp
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|expected
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|BytesReference
name|bytes
init|=
name|out
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|MappingMetaData
name|metaData
init|=
name|MappingMetaData
operator|.
name|PROTO
operator|.
name|readFrom
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|metaData
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMergingFielddataLoadingWorks
specifier|public
name|void
name|testMergingFielddataLoadingWorks
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fielddata"
argument_list|)
operator|.
name|field
argument_list|(
literal|"loading"
argument_list|,
literal|"lazy"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_1_4_2
operator|.
name|id
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DocumentMapperParser
name|parser
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|indexSettings
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|fieldDataType
argument_list|()
operator|.
name|getLoading
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|MappedFieldType
operator|.
name|Loading
operator|.
name|LAZY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|fieldDataType
argument_list|()
operator|.
name|getFormat
argument_list|(
name|indexSettings
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"doc_values"
argument_list|)
argument_list|)
expr_stmt|;
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fielddata"
argument_list|)
operator|.
name|field
argument_list|(
literal|"loading"
argument_list|,
literal|"eager"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"array"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|docMapper
operator|.
name|merge
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
operator|.
name|mapping
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|fieldDataType
argument_list|()
operator|.
name|getLoading
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|MappedFieldType
operator|.
name|Loading
operator|.
name|EAGER
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|fieldDataType
argument_list|()
operator|.
name|getFormat
argument_list|(
name|indexSettings
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"array"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParsingNotDefaultTwiceDoesNotChangeMapping
specifier|public
name|void
name|testParsingNotDefaultTwiceDoesNotChangeMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"default"
argument_list|,
literal|"1970-01-01"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapperParser
name|parser
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|docMapper
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
name|docMapper
operator|.
name|mappingSource
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docMapper
operator|.
name|mappingSource
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBackcompatParsingTwiceDoesNotChangeTokenizeValue
specifier|public
name|void
name|testBackcompatParsingTwiceDoesNotChangeTokenizeValue
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|index_options
init|=
block|{
literal|"no"
block|,
literal|"analyzed"
block|,
literal|"not_analyzed"
block|}
decl_stmt|;
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|index_options
index|[
name|randomInt
argument_list|(
literal|2
argument_list|)
index|]
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"default"
argument_list|,
literal|"1970-01-01"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fielddata"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapperParser
name|parser
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|BWC_SETTINGS
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|tokenized
init|=
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|tokenized
argument_list|()
decl_stmt|;
name|docMapper
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
name|docMapper
operator|.
name|mappingSource
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tokenized
argument_list|,
name|equalTo
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|tokenized
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergingConflicts
specifier|public
name|void
name|testMergingConflicts
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"analyzed"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"default"
argument_list|,
literal|"1970-01-01"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_1_4_2
operator|.
name|id
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MapperService
name|mapperService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|indexSettings
argument_list|)
operator|.
name|mapperService
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|mapperService
operator|.
name|merge
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|fieldDataType
argument_list|()
operator|.
name|getLoading
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|MappedFieldType
operator|.
name|Loading
operator|.
name|LAZY
argument_list|)
argument_list|)
expr_stmt|;
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fielddata"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"array"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"default"
argument_list|,
literal|"1970-01-02"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
try|try
block|{
name|mapperService
operator|.
name|merge
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"mapper [_timestamp] has different [index] values"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"mapper [_timestamp] has different [store] values"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|fieldDataType
argument_list|()
operator|.
name|getLoading
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|MappedFieldType
operator|.
name|Loading
operator|.
name|LAZY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|enabled
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"analyzed"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"default"
argument_list|,
literal|"1970-01-02"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
try|try
block|{
name|mapperService
operator|.
name|merge
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Cannot update default in _timestamp value. Value is 1970-01-01 now encountering 1970-01-02"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Cannot update path in _timestamp value. Value is foo path in merged mapping is bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBackcompatMergingConflictsForIndexValues
specifier|public
name|void
name|testBackcompatMergingConflictsForIndexValues
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|indexValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|indexValues
operator|.
name|add
argument_list|(
literal|"analyzed"
argument_list|)
expr_stmt|;
name|indexValues
operator|.
name|add
argument_list|(
literal|"no"
argument_list|)
expr_stmt|;
name|indexValues
operator|.
name|add
argument_list|(
literal|"not_analyzed"
argument_list|)
expr_stmt|;
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|indexValues
operator|.
name|remove
argument_list|(
name|randomInt
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|MapperService
name|mapperService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|BWC_SETTINGS
argument_list|)
operator|.
name|mapperService
argument_list|()
decl_stmt|;
name|mapperService
operator|.
name|merge
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|indexValues
operator|.
name|remove
argument_list|(
name|randomInt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
try|try
block|{
name|mapperService
operator|.
name|merge
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"mapper [_timestamp] has different [index] values"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test for issue #9223      */
DECL|method|testInitMappers
specifier|public
name|void
name|testInitMappers
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"default"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
comment|// This was causing a NPE
operator|new
name|MappingMetaData
argument_list|(
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBackcompatMergePaths
specifier|public
name|void
name|testBackcompatMergePaths
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|possiblePathValues
init|=
block|{
literal|"some_path"
block|,
literal|"anotherPath"
block|,
literal|null
block|}
decl_stmt|;
name|DocumentMapperParser
name|parser
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|BWC_SETTINGS
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
decl_stmt|;
name|XContentBuilder
name|mapping1
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
decl_stmt|;
name|String
name|path1
init|=
name|possiblePathValues
index|[
name|randomInt
argument_list|(
literal|2
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|path1
operator|!=
literal|null
condition|)
block|{
name|mapping1
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
name|path1
argument_list|)
expr_stmt|;
block|}
name|mapping1
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|XContentBuilder
name|mapping2
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
decl_stmt|;
name|String
name|path2
init|=
name|possiblePathValues
index|[
name|randomInt
argument_list|(
literal|2
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|path2
operator|!=
literal|null
condition|)
block|{
name|mapping2
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
name|path2
argument_list|)
expr_stmt|;
block|}
name|mapping2
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertConflict
argument_list|(
name|mapping1
operator|.
name|string
argument_list|()
argument_list|,
name|mapping2
operator|.
name|string
argument_list|()
argument_list|,
name|parser
argument_list|,
operator|(
name|path1
operator|==
name|path2
condition|?
literal|null
else|:
literal|"Cannot update path in _timestamp value"
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertConflict
name|void
name|assertConflict
parameter_list|(
name|String
name|mapping1
parameter_list|,
name|String
name|mapping2
parameter_list|,
name|DocumentMapperParser
name|parser
parameter_list|,
name|String
name|conflict
parameter_list|)
throws|throws
name|IOException
block|{
name|DocumentMapper
name|docMapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping1
argument_list|)
argument_list|)
decl_stmt|;
name|docMapper
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
name|docMapper
operator|.
name|mappingSource
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflict
operator|==
literal|null
condition|)
block|{
name|docMapper
operator|.
name|merge
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping2
argument_list|)
argument_list|)
operator|.
name|mapping
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|docMapper
operator|.
name|merge
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping2
argument_list|)
argument_list|)
operator|.
name|mapping
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|conflict
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testBackcompatDocValuesSerialization
specifier|public
name|void
name|testBackcompatDocValuesSerialization
parameter_list|()
throws|throws
name|Exception
block|{
comment|// default
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|assertDocValuesSerialization
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
comment|// just format specified
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fielddata"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|assertDocValuesSerialization
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
comment|// explicitly enabled
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_values"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|assertDocValuesSerialization
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
comment|// explicitly disabled
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_values"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|assertDocValuesSerialization
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
comment|// explicitly enabled, with format
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_values"
argument_list|,
literal|true
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fielddata"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|assertDocValuesSerialization
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
comment|// explicitly disabled, with format
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_values"
argument_list|,
literal|false
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fielddata"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|assertDocValuesSerialization
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDocValuesSerialization
name|void
name|assertDocValuesSerialization
parameter_list|(
name|String
name|mapping
parameter_list|)
throws|throws
name|Exception
block|{
name|DocumentMapperParser
name|parser
init|=
name|createIndex
argument_list|(
literal|"test_doc_values"
argument_list|,
name|BWC_SETTINGS
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|docValues
init|=
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
decl_stmt|;
name|docMapper
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
name|docMapper
operator|.
name|mappingSource
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docMapper
operator|.
name|timestampFieldMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|docValues
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test_doc_values"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBackcompatPath
specifier|public
name|void
name|testBackcompatPath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"custom_timestamp"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|BWC_SETTINGS
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|XContentBuilder
name|doc
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"custom_timestamp"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|MappingMetaData
name|mappingMetaData
init|=
operator|new
name|MappingMetaData
argument_list|(
name|docMapper
argument_list|)
decl_stmt|;
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|request
operator|.
name|process
argument_list|(
name|metaData
argument_list|,
name|mappingMetaData
argument_list|,
literal|true
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|timestamp
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIncludeInObjectBackcompat
specifier|public
name|void
name|testIncludeInObjectBackcompat
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"default"
argument_list|,
literal|"1970"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"YYYY"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_1_4_2
operator|.
name|id
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|settings
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|XContentBuilder
name|doc
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"_timestamp"
argument_list|,
literal|2000000
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|MappingMetaData
name|mappingMetaData
init|=
operator|new
name|MappingMetaData
argument_list|(
name|docMapper
argument_list|)
decl_stmt|;
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|request
operator|.
name|process
argument_list|(
name|metaData
argument_list|,
name|mappingMetaData
argument_list|,
literal|true
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
comment|// _timestamp in a document never worked, so backcompat is ignoring the field
name|assertEquals
argument_list|(
name|MappingMetaData
operator|.
name|Timestamp
operator|.
name|parseStringTimestamp
argument_list|(
literal|"1970"
argument_list|,
name|Joda
operator|.
name|forPattern
argument_list|(
literal|"YYYY"
argument_list|)
argument_list|,
name|Version
operator|.
name|V_1_4_2
argument_list|)
argument_list|,
name|request
operator|.
name|timestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|docMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|doc
operator|.
name|bytes
argument_list|()
argument_list|)
operator|.
name|rootDoc
argument_list|()
operator|.
name|get
argument_list|(
literal|"_timestamp"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIncludeInObjectNotAllowed
specifier|public
name|void
name|testIncludeInObjectNotAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"default"
argument_list|,
literal|"1970"
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"YYYY"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|docMapper
operator|.
name|parse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"_timestamp"
argument_list|,
literal|2000000
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected failure to parse metadata field"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Field [_timestamp] is a metadata field and cannot be added inside a document"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testThatEpochCanBeIgnoredWithCustomFormat
specifier|public
name|void
name|testThatEpochCanBeIgnoredWithCustomFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"yyyyMMddHH"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|XContentBuilder
name|doc
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|doc
argument_list|)
operator|.
name|timestamp
argument_list|(
literal|"2015060210"
argument_list|)
decl_stmt|;
name|MappingMetaData
name|mappingMetaData
init|=
operator|new
name|MappingMetaData
argument_list|(
name|docMapper
argument_list|)
decl_stmt|;
name|request
operator|.
name|process
argument_list|(
name|metaData
argument_list|,
name|mappingMetaData
argument_list|,
literal|true
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|timestamp
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1433239200000"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatIndicesBefore2xMustSupportUnixTimestampsInAnyDateFormat
specifier|public
name|void
name|testThatIndicesBefore2xMustSupportUnixTimestampsInAnyDateFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"dateOptionalTime"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|BytesReference
name|source
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
comment|//
comment|// test with older versions
name|Settings
name|oldSettings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|randomVersionBetween
argument_list|(
name|random
argument_list|()
argument_list|,
name|Version
operator|.
name|V_0_90_0
argument_list|,
name|Version
operator|.
name|V_1_6_0
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|createIndex
argument_list|(
literal|"old-index"
argument_list|,
name|oldSettings
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
comment|// both index request are successfully processed
name|IndexRequest
name|oldIndexDateIndexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"old-index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|timestamp
argument_list|(
literal|"1970-01-01"
argument_list|)
decl_stmt|;
name|oldIndexDateIndexRequest
operator|.
name|process
argument_list|(
name|metaData
argument_list|,
operator|new
name|MappingMetaData
argument_list|(
name|docMapper
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|"old-index"
argument_list|)
expr_stmt|;
name|IndexRequest
name|oldIndexTimestampIndexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"old-index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|timestamp
argument_list|(
literal|"1234567890"
argument_list|)
decl_stmt|;
name|oldIndexTimestampIndexRequest
operator|.
name|process
argument_list|(
name|metaData
argument_list|,
operator|new
name|MappingMetaData
argument_list|(
name|docMapper
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|"old-index"
argument_list|)
expr_stmt|;
comment|//
comment|// test with 2.x
name|DocumentMapper
name|currentMapper
init|=
name|createIndex
argument_list|(
literal|"new-index"
argument_list|)
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapperParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"type"
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|mapping
argument_list|)
argument_list|)
decl_stmt|;
name|MetaData
name|newMetaData
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
comment|// this works with 2.x
name|IndexRequest
name|request
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"new-index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|timestamp
argument_list|(
literal|"1970-01-01"
argument_list|)
decl_stmt|;
name|request
operator|.
name|process
argument_list|(
name|newMetaData
argument_list|,
operator|new
name|MappingMetaData
argument_list|(
name|currentMapper
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|"new-index"
argument_list|)
expr_stmt|;
comment|// this fails with 2.x
name|request
operator|=
operator|new
name|IndexRequest
argument_list|(
literal|"new-index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|timestamp
argument_list|(
literal|"1234567890"
argument_list|)
expr_stmt|;
try|try
block|{
name|request
operator|.
name|process
argument_list|(
name|newMetaData
argument_list|,
operator|new
name|MappingMetaData
argument_list|(
name|currentMapper
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|"new-index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"failed to parse timestamp [1234567890]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

