begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoubleRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|ShapeRelation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|Joda
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|RangeFieldMapper
operator|.
name|RangeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|IndexSettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_class
DECL|class|RangeFieldTypeTests
specifier|public
class|class
name|RangeFieldTypeTests
extends|extends
name|FieldTypeTestCase
block|{
DECL|field|type
name|RangeType
name|type
decl_stmt|;
DECL|field|FIELDNAME
specifier|protected
specifier|static
name|String
name|FIELDNAME
init|=
literal|"field"
decl_stmt|;
DECL|field|DISTANCE
specifier|protected
specifier|static
name|int
name|DISTANCE
init|=
literal|10
decl_stmt|;
DECL|field|nowInMillis
specifier|private
specifier|static
name|long
name|nowInMillis
decl_stmt|;
annotation|@
name|Before
DECL|method|setupProperties
specifier|public
name|void
name|setupProperties
parameter_list|()
block|{
name|type
operator|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|RangeType
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|nowInMillis
operator|=
name|randomNonNegativeLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|RangeType
operator|.
name|DATE
condition|)
block|{
name|addModifier
argument_list|(
operator|new
name|Modifier
argument_list|(
literal|"format"
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|MappedFieldType
name|ft
parameter_list|)
block|{
operator|(
operator|(
name|RangeFieldMapper
operator|.
name|RangeFieldType
operator|)
name|ft
operator|)
operator|.
name|setDateTimeFormatter
argument_list|(
name|Joda
operator|.
name|forPattern
argument_list|(
literal|"basic_week_date"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addModifier
argument_list|(
operator|new
name|Modifier
argument_list|(
literal|"locale"
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|MappedFieldType
name|ft
parameter_list|)
block|{
operator|(
operator|(
name|RangeFieldMapper
operator|.
name|RangeFieldType
operator|)
name|ft
operator|)
operator|.
name|setDateTimeFormatter
argument_list|(
name|Joda
operator|.
name|forPattern
argument_list|(
literal|"date_optional_time"
argument_list|,
name|Locale
operator|.
name|CANADA
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createDefaultFieldType
specifier|protected
name|RangeFieldMapper
operator|.
name|RangeFieldType
name|createDefaultFieldType
parameter_list|()
block|{
return|return
operator|new
name|RangeFieldMapper
operator|.
name|RangeFieldType
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|testRangeQuery
specifier|public
name|void
name|testRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexSettings
name|idxSettings
init|=
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|indexSettings
argument_list|)
decl_stmt|;
name|QueryShardContext
name|context
init|=
operator|new
name|QueryShardContext
argument_list|(
literal|0
argument_list|,
name|idxSettings
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|xContentRegistry
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
parameter_list|()
lambda|->
name|nowInMillis
argument_list|)
decl_stmt|;
name|RangeFieldMapper
operator|.
name|RangeFieldType
name|ft
init|=
operator|new
name|RangeFieldMapper
operator|.
name|RangeFieldType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
name|FIELDNAME
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|ShapeRelation
name|relation
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|ShapeRelation
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|includeLower
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|boolean
name|includeUpper
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|Object
name|from
init|=
name|nextFrom
argument_list|()
decl_stmt|;
name|Object
name|to
init|=
name|nextTo
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getExpectedRangeQuery
argument_list|(
name|relation
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|,
name|relation
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getExpectedRangeQuery
specifier|private
name|Query
name|getExpectedRangeQuery
parameter_list|(
name|ShapeRelation
name|relation
parameter_list|,
name|Object
name|from
parameter_list|,
name|Object
name|to
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DATE
case|:
return|return
name|getDateRangeQuery
argument_list|(
name|relation
argument_list|,
operator|(
name|DateTime
operator|)
name|from
argument_list|,
operator|(
name|DateTime
operator|)
name|to
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
case|case
name|INTEGER
case|:
return|return
name|getIntRangeQuery
argument_list|(
name|relation
argument_list|,
operator|(
name|int
operator|)
name|from
argument_list|,
operator|(
name|int
operator|)
name|to
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|getLongRangeQuery
argument_list|(
name|relation
argument_list|,
operator|(
name|long
operator|)
name|from
argument_list|,
operator|(
name|long
operator|)
name|to
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|getDoubleRangeQuery
argument_list|(
name|relation
argument_list|,
operator|(
name|double
operator|)
name|from
argument_list|,
operator|(
name|double
operator|)
name|to
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
default|default:
return|return
name|getFloatRangeQuery
argument_list|(
name|relation
argument_list|,
operator|(
name|float
operator|)
name|from
argument_list|,
operator|(
name|float
operator|)
name|to
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
block|}
DECL|method|getDateRangeQuery
specifier|private
name|Query
name|getDateRangeQuery
parameter_list|(
name|ShapeRelation
name|relation
parameter_list|,
name|DateTime
name|from
parameter_list|,
name|DateTime
name|to
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
name|getLongRangeQuery
argument_list|(
name|relation
argument_list|,
name|from
operator|.
name|getMillis
argument_list|()
argument_list|,
name|to
operator|.
name|getMillis
argument_list|()
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
DECL|method|getIntRangeQuery
specifier|private
name|Query
name|getIntRangeQuery
parameter_list|(
name|ShapeRelation
name|relation
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
name|int
index|[]
name|lower
init|=
operator|new
name|int
index|[]
block|{
name|from
operator|+
operator|(
name|includeLower
condition|?
literal|0
else|:
literal|1
operator|)
block|}
decl_stmt|;
name|int
index|[]
name|upper
init|=
operator|new
name|int
index|[]
block|{
name|to
operator|-
operator|(
name|includeUpper
condition|?
literal|0
else|:
literal|1
operator|)
block|}
decl_stmt|;
if|if
condition|(
name|relation
operator|==
name|ShapeRelation
operator|.
name|WITHIN
condition|)
block|{
return|return
name|IntRange
operator|.
name|newWithinQuery
argument_list|(
name|FIELDNAME
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|relation
operator|==
name|ShapeRelation
operator|.
name|CONTAINS
condition|)
block|{
return|return
name|IntRange
operator|.
name|newContainsQuery
argument_list|(
name|FIELDNAME
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
return|return
name|IntRange
operator|.
name|newIntersectsQuery
argument_list|(
name|FIELDNAME
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
DECL|method|getLongRangeQuery
specifier|private
name|Query
name|getLongRangeQuery
parameter_list|(
name|ShapeRelation
name|relation
parameter_list|,
name|long
name|from
parameter_list|,
name|long
name|to
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
name|long
index|[]
name|lower
init|=
operator|new
name|long
index|[]
block|{
name|from
operator|+
operator|(
name|includeLower
condition|?
literal|0
else|:
literal|1
operator|)
block|}
decl_stmt|;
name|long
index|[]
name|upper
init|=
operator|new
name|long
index|[]
block|{
name|to
operator|-
operator|(
name|includeUpper
condition|?
literal|0
else|:
literal|1
operator|)
block|}
decl_stmt|;
if|if
condition|(
name|relation
operator|==
name|ShapeRelation
operator|.
name|WITHIN
condition|)
block|{
return|return
name|LongRange
operator|.
name|newWithinQuery
argument_list|(
name|FIELDNAME
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|relation
operator|==
name|ShapeRelation
operator|.
name|CONTAINS
condition|)
block|{
return|return
name|LongRange
operator|.
name|newContainsQuery
argument_list|(
name|FIELDNAME
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
return|return
name|LongRange
operator|.
name|newIntersectsQuery
argument_list|(
name|FIELDNAME
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
DECL|method|getFloatRangeQuery
specifier|private
name|Query
name|getFloatRangeQuery
parameter_list|(
name|ShapeRelation
name|relation
parameter_list|,
name|float
name|from
parameter_list|,
name|float
name|to
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
name|float
index|[]
name|lower
init|=
operator|new
name|float
index|[]
block|{
name|includeLower
condition|?
name|from
else|:
name|Math
operator|.
name|nextUp
argument_list|(
name|from
argument_list|)
block|}
decl_stmt|;
name|float
index|[]
name|upper
init|=
operator|new
name|float
index|[]
block|{
name|includeUpper
condition|?
name|to
else|:
name|Math
operator|.
name|nextDown
argument_list|(
name|to
argument_list|)
block|}
decl_stmt|;
if|if
condition|(
name|relation
operator|==
name|ShapeRelation
operator|.
name|WITHIN
condition|)
block|{
return|return
name|FloatRange
operator|.
name|newWithinQuery
argument_list|(
name|FIELDNAME
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|relation
operator|==
name|ShapeRelation
operator|.
name|CONTAINS
condition|)
block|{
return|return
name|FloatRange
operator|.
name|newContainsQuery
argument_list|(
name|FIELDNAME
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
return|return
name|FloatRange
operator|.
name|newIntersectsQuery
argument_list|(
name|FIELDNAME
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
DECL|method|getDoubleRangeQuery
specifier|private
name|Query
name|getDoubleRangeQuery
parameter_list|(
name|ShapeRelation
name|relation
parameter_list|,
name|double
name|from
parameter_list|,
name|double
name|to
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
name|double
index|[]
name|lower
init|=
operator|new
name|double
index|[]
block|{
name|includeLower
condition|?
name|from
else|:
name|Math
operator|.
name|nextUp
argument_list|(
name|from
argument_list|)
block|}
decl_stmt|;
name|double
index|[]
name|upper
init|=
operator|new
name|double
index|[]
block|{
name|includeUpper
condition|?
name|to
else|:
name|Math
operator|.
name|nextDown
argument_list|(
name|to
argument_list|)
block|}
decl_stmt|;
if|if
condition|(
name|relation
operator|==
name|ShapeRelation
operator|.
name|WITHIN
condition|)
block|{
return|return
name|DoubleRange
operator|.
name|newWithinQuery
argument_list|(
name|FIELDNAME
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|relation
operator|==
name|ShapeRelation
operator|.
name|CONTAINS
condition|)
block|{
return|return
name|DoubleRange
operator|.
name|newContainsQuery
argument_list|(
name|FIELDNAME
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
return|return
name|DoubleRange
operator|.
name|newIntersectsQuery
argument_list|(
name|FIELDNAME
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
DECL|method|nextFrom
specifier|private
name|Object
name|nextFrom
parameter_list|()
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INTEGER
case|:
return|return
call|(
name|int
call|)
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|*
literal|0.5
operator|-
name|DISTANCE
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
name|DateTime
operator|.
name|now
argument_list|()
return|;
case|case
name|LONG
case|:
return|return
call|(
name|long
call|)
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
operator|*
literal|0.5
operator|-
name|DISTANCE
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
call|(
name|float
call|)
argument_list|(
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
literal|0.5
operator|-
name|DISTANCE
argument_list|)
return|;
default|default:
return|return
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
literal|0.5
operator|-
name|DISTANCE
return|;
block|}
block|}
DECL|method|nextTo
specifier|private
name|Object
name|nextTo
parameter_list|(
name|Object
name|from
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INTEGER
case|:
return|return
operator|(
name|Integer
operator|)
name|from
operator|+
name|DISTANCE
return|;
case|case
name|DATE
case|:
return|return
name|DateTime
operator|.
name|now
argument_list|()
operator|.
name|plusDays
argument_list|(
name|DISTANCE
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
operator|(
name|Long
operator|)
name|from
operator|+
name|DISTANCE
return|;
case|case
name|DOUBLE
case|:
return|return
operator|(
name|Double
operator|)
name|from
operator|+
name|DISTANCE
return|;
default|default:
return|return
operator|(
name|Float
operator|)
name|from
operator|+
name|DISTANCE
return|;
block|}
block|}
block|}
end_class

end_unit

