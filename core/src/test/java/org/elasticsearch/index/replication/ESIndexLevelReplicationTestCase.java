begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.replication
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|flush
operator|.
name|FlushRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|TransportIndexAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|TransportWriteAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
operator|.
name|PeerRecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
operator|.
name|StoreRecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|TestShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|LocalTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|MapperTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|IndexCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|query
operator|.
name|DisabledQueryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|DirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoverySourceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|PeerRecoveryTargetService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|StartRecoveryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|DummyShardLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|empty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|ESIndexLevelReplicationTestCase
specifier|public
specifier|abstract
class|class
name|ESIndexLevelReplicationTestCase
extends|extends
name|ESTestCase
block|{
DECL|field|threadPool
specifier|protected
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|index
specifier|private
specifier|final
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"uuid"
argument_list|)
decl_stmt|;
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|indexMapping
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|indexMapping
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"type"
argument_list|,
literal|"{ \"type\": {} }"
argument_list|)
decl_stmt|;
DECL|field|recoveryListener
specifier|protected
specifier|static
specifier|final
name|PeerRecoveryTargetService
operator|.
name|RecoveryListener
name|recoveryListener
init|=
operator|new
name|PeerRecoveryTargetService
operator|.
name|RecoveryListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onRecoveryDone
parameter_list|(
name|RecoveryState
name|state
parameter_list|)
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|onRecoveryFailure
parameter_list|(
name|RecoveryState
name|state
parameter_list|,
name|RecoveryFailedException
name|e
parameter_list|,
name|boolean
name|sendShardFailure
parameter_list|)
block|{
name|fail
argument_list|(
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
annotation|@
name|TestLogging
argument_list|(
literal|"index.shard:TRACE,index.replication:TRACE,indices.recovery:TRACE"
argument_list|)
DECL|method|testIndexingDuringFileRecovery
specifier|public
name|void
name|testIndexingDuringFileRecovery
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ReplicationGroup
name|shards
init|=
name|createGroup
argument_list|(
name|randomInt
argument_list|(
literal|1
argument_list|)
argument_list|)
init|)
block|{
name|shards
operator|.
name|startAll
argument_list|()
expr_stmt|;
name|int
name|docs
init|=
name|shards
operator|.
name|indexDocs
argument_list|(
name|randomInt
argument_list|(
literal|50
argument_list|)
argument_list|)
decl_stmt|;
name|shards
operator|.
name|flush
argument_list|()
expr_stmt|;
name|IndexShard
name|replica
init|=
name|shards
operator|.
name|addReplica
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|recoveryBlocked
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|releaseRecovery
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Future
argument_list|<
name|Void
argument_list|>
name|recoveryFuture
init|=
name|shards
operator|.
name|asyncRecoverReplica
argument_list|(
name|replica
argument_list|,
operator|new
name|BiFunction
argument_list|<
name|IndexShard
argument_list|,
name|DiscoveryNode
argument_list|,
name|RecoveryTarget
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecoveryTarget
name|apply
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|)
block|{
return|return
operator|new
name|RecoveryTarget
argument_list|(
name|indexShard
argument_list|,
name|node
argument_list|,
name|recoveryListener
argument_list|,
name|version
lambda|->
block|{}
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|renameAllTempFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|renameAllTempFiles
argument_list|()
expr_stmt|;
name|recoveryBlocked
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|releaseRecovery
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"terminated by interrupt"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|recoveryBlocked
operator|.
name|await
argument_list|()
expr_stmt|;
name|docs
operator|+=
name|shards
operator|.
name|indexDocs
argument_list|(
name|randomInt
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|releaseRecovery
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|recoveryFuture
operator|.
name|get
argument_list|()
expr_stmt|;
name|shards
operator|.
name|assertAllEqual
argument_list|(
name|docs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|threadPool
operator|=
operator|new
name|TestThreadPool
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|threadPool
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|createStore
specifier|private
name|Store
name|createStore
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|ShardPath
name|shardPath
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
name|shardPath
operator|.
name|getShardId
argument_list|()
decl_stmt|;
specifier|final
name|DirectoryService
name|directoryService
init|=
operator|new
name|DirectoryService
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Directory
name|newDirectory
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|newFSDirectory
argument_list|(
name|shardPath
operator|.
name|resolveIndex
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|throttleTimeInNanos
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|,
name|directoryService
argument_list|,
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createGroup
specifier|protected
name|ReplicationGroup
name|createGroup
parameter_list|(
name|int
name|replicas
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|homePath
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|replicas
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
name|metaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|build
argument_list|)
operator|.
name|primaryTerm
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|ReplicationGroup
argument_list|(
name|metaData
argument_list|,
name|homePath
argument_list|)
return|;
block|}
DECL|method|getDiscoveryNode
specifier|protected
name|DiscoveryNode
name|getDiscoveryNode
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|DiscoveryNode
argument_list|(
name|id
argument_list|,
name|id
argument_list|,
operator|new
name|LocalTransportAddress
argument_list|(
name|id
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|DATA
argument_list|)
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
return|;
block|}
DECL|method|newShard
specifier|private
name|IndexShard
name|newShard
parameter_list|(
name|boolean
name|primary
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|Path
name|homePath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// add node name to settings for propper logging
specifier|final
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
name|node
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|IndexSettings
name|indexSettings
init|=
operator|new
name|IndexSettings
argument_list|(
name|indexMetaData
argument_list|,
name|nodeSettings
argument_list|)
decl_stmt|;
name|ShardRouting
name|shardRouting
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|shardId
argument_list|,
name|node
operator|.
name|getId
argument_list|()
argument_list|,
name|primary
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|primary
condition|?
name|StoreRecoverySource
operator|.
name|EMPTY_STORE_INSTANCE
else|:
name|PeerRecoverySource
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path
init|=
name|Files
operator|.
name|createDirectories
argument_list|(
name|homePath
operator|.
name|resolve
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|NodeEnvironment
operator|.
name|NodePath
name|nodePath
init|=
operator|new
name|NodeEnvironment
operator|.
name|NodePath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|ShardPath
name|shardPath
init|=
operator|new
name|ShardPath
argument_list|(
literal|false
argument_list|,
name|nodePath
operator|.
name|resolve
argument_list|(
name|shardId
argument_list|)
argument_list|,
name|nodePath
operator|.
name|resolve
argument_list|(
name|shardId
argument_list|)
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|createStore
argument_list|(
name|indexSettings
argument_list|,
name|shardPath
argument_list|)
decl_stmt|;
name|IndexCache
name|indexCache
init|=
operator|new
name|IndexCache
argument_list|(
name|indexSettings
argument_list|,
operator|new
name|DisabledQueryCache
argument_list|(
name|indexSettings
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MapperService
name|mapperService
init|=
name|MapperTestUtils
operator|.
name|newMapperService
argument_list|(
name|homePath
argument_list|,
name|indexSettings
operator|.
name|getSettings
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|type
range|:
name|indexMapping
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mapperService
operator|.
name|merge
argument_list|(
name|type
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|type
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|MapperService
operator|.
name|MergeReason
operator|.
name|MAPPING_RECOVERY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|SimilarityService
name|similarityService
init|=
operator|new
name|SimilarityService
argument_list|(
name|indexSettings
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|IndexEventListener
name|indexEventListener
init|=
operator|new
name|IndexEventListener
argument_list|()
block|{         }
decl_stmt|;
specifier|final
name|Engine
operator|.
name|Warmer
name|warmer
init|=
name|searcher
lambda|->
block|{         }
decl_stmt|;
return|return
operator|new
name|IndexShard
argument_list|(
name|shardRouting
argument_list|,
name|indexSettings
argument_list|,
name|shardPath
argument_list|,
name|store
argument_list|,
name|indexCache
argument_list|,
name|mapperService
argument_list|,
name|similarityService
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|indexEventListener
argument_list|,
literal|null
argument_list|,
name|threadPool
argument_list|,
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|,
name|warmer
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
DECL|class|ReplicationGroup
specifier|protected
class|class
name|ReplicationGroup
implements|implements
name|AutoCloseable
implements|,
name|Iterable
argument_list|<
name|IndexShard
argument_list|>
block|{
DECL|field|primary
specifier|private
specifier|final
name|IndexShard
name|primary
decl_stmt|;
DECL|field|replicas
specifier|private
specifier|final
name|List
argument_list|<
name|IndexShard
argument_list|>
name|replicas
decl_stmt|;
DECL|field|indexMetaData
specifier|private
specifier|final
name|IndexMetaData
name|indexMetaData
decl_stmt|;
DECL|field|homePath
specifier|private
specifier|final
name|Path
name|homePath
decl_stmt|;
DECL|field|replicaId
specifier|private
specifier|final
name|AtomicInteger
name|replicaId
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|docId
specifier|private
specifier|final
name|AtomicInteger
name|docId
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|closed
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|method|ReplicationGroup
name|ReplicationGroup
parameter_list|(
specifier|final
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|Path
name|homePath
parameter_list|)
throws|throws
name|IOException
block|{
name|primary
operator|=
name|newShard
argument_list|(
literal|true
argument_list|,
name|getDiscoveryNode
argument_list|(
literal|"s0"
argument_list|)
argument_list|,
name|indexMetaData
argument_list|,
name|homePath
argument_list|)
expr_stmt|;
name|replicas
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexMetaData
operator|=
name|indexMetaData
expr_stmt|;
name|this
operator|.
name|homePath
operator|=
name|homePath
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|addReplica
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|indexDocs
specifier|public
name|int
name|indexDocs
parameter_list|(
specifier|final
name|int
name|numOfDoc
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|doc
init|=
literal|0
init|;
name|doc
operator|<
name|numOfDoc
condition|;
name|doc
operator|++
control|)
block|{
specifier|final
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|,
literal|"type"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|docId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|source
argument_list|(
literal|"{}"
argument_list|)
decl_stmt|;
specifier|final
name|IndexResponse
name|response
init|=
name|index
argument_list|(
name|indexRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DocWriteResponse
operator|.
name|Result
operator|.
name|CREATED
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|numOfDoc
return|;
block|}
DECL|method|index
specifier|public
name|IndexResponse
name|index
parameter_list|(
name|IndexRequest
name|indexRequest
parameter_list|)
throws|throws
name|Exception
block|{
name|PlainActionFuture
argument_list|<
name|IndexingResult
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|IndexingOp
name|op
init|=
operator|new
name|IndexingOp
argument_list|(
name|indexRequest
argument_list|,
name|listener
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|listener
operator|.
name|get
argument_list|()
operator|.
name|finalResponse
return|;
block|}
DECL|method|startAll
specifier|public
specifier|synchronized
name|void
name|startAll
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DiscoveryNode
name|pNode
init|=
name|getDiscoveryNode
argument_list|(
name|primary
operator|.
name|routingEntry
argument_list|()
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|primary
operator|.
name|markAsRecovering
argument_list|(
literal|"store"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|primary
operator|.
name|routingEntry
argument_list|()
argument_list|,
name|pNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|primary
operator|.
name|recoverFromStore
argument_list|()
expr_stmt|;
name|primary
operator|.
name|updateRoutingEntry
argument_list|(
name|ShardRoutingHelper
operator|.
name|moveToStarted
argument_list|(
name|primary
operator|.
name|routingEntry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexShard
name|replicaShard
range|:
name|replicas
control|)
block|{
name|recoverReplica
argument_list|(
name|replicaShard
argument_list|,
parameter_list|(
name|replica
parameter_list|,
name|sourceNode
parameter_list|)
lambda|->
operator|new
name|RecoveryTarget
argument_list|(
name|replica
argument_list|,
name|sourceNode
argument_list|,
name|recoveryListener
argument_list|,
name|version
lambda|->
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addReplica
specifier|public
specifier|synchronized
name|IndexShard
name|addReplica
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|IndexShard
name|replica
init|=
name|newShard
argument_list|(
literal|false
argument_list|,
name|getDiscoveryNode
argument_list|(
literal|"s"
operator|+
name|replicaId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|,
name|indexMetaData
argument_list|,
name|homePath
argument_list|)
decl_stmt|;
name|replicas
operator|.
name|add
argument_list|(
name|replica
argument_list|)
expr_stmt|;
return|return
name|replica
return|;
block|}
DECL|method|recoverReplica
specifier|public
name|void
name|recoverReplica
parameter_list|(
name|IndexShard
name|replica
parameter_list|,
name|BiFunction
argument_list|<
name|IndexShard
argument_list|,
name|DiscoveryNode
argument_list|,
name|RecoveryTarget
argument_list|>
name|targetSupplier
parameter_list|)
throws|throws
name|IOException
block|{
name|recoverReplica
argument_list|(
name|replica
argument_list|,
name|targetSupplier
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|recoverReplica
specifier|public
name|void
name|recoverReplica
parameter_list|(
name|IndexShard
name|replica
parameter_list|,
name|BiFunction
argument_list|<
name|IndexShard
argument_list|,
name|DiscoveryNode
argument_list|,
name|RecoveryTarget
argument_list|>
name|targetSupplier
parameter_list|,
name|boolean
name|markAsRecovering
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DiscoveryNode
name|pNode
init|=
name|getPrimaryNode
argument_list|()
decl_stmt|;
specifier|final
name|DiscoveryNode
name|rNode
init|=
name|getDiscoveryNode
argument_list|(
name|replica
operator|.
name|routingEntry
argument_list|()
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|markAsRecovering
condition|)
block|{
name|replica
operator|.
name|markAsRecovering
argument_list|(
literal|"remote"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|replica
operator|.
name|routingEntry
argument_list|()
argument_list|,
name|pNode
argument_list|,
name|rNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|replica
operator|.
name|state
argument_list|()
argument_list|,
name|IndexShardState
operator|.
name|RECOVERING
argument_list|)
expr_stmt|;
block|}
name|replica
operator|.
name|prepareForIndexRecovery
argument_list|()
expr_stmt|;
name|RecoveryTarget
name|recoveryTarget
init|=
name|targetSupplier
operator|.
name|apply
argument_list|(
name|replica
argument_list|,
name|pNode
argument_list|)
decl_stmt|;
name|StartRecoveryRequest
name|request
init|=
operator|new
name|StartRecoveryRequest
argument_list|(
name|replica
operator|.
name|shardId
argument_list|()
argument_list|,
name|pNode
argument_list|,
name|rNode
argument_list|,
name|getMetadataSnapshotOrEmpty
argument_list|(
name|replica
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|RecoverySourceHandler
name|recovery
init|=
operator|new
name|RecoverySourceHandler
argument_list|(
name|primary
argument_list|,
name|recoveryTarget
argument_list|,
name|request
argument_list|,
parameter_list|()
lambda|->
literal|0L
argument_list|,
name|e
lambda|->
parameter_list|()
lambda|->
block|{}
argument_list|,
operator|(
name|int
operator|)
name|ByteSizeUnit
operator|.
name|MB
operator|.
name|toKB
argument_list|(
literal|1
argument_list|)
argument_list|,
name|logger
argument_list|)
decl_stmt|;
name|recovery
operator|.
name|recoverToTarget
argument_list|()
expr_stmt|;
name|recoveryTarget
operator|.
name|markAsDone
argument_list|()
expr_stmt|;
name|replica
operator|.
name|updateRoutingEntry
argument_list|(
name|ShardRoutingHelper
operator|.
name|moveToStarted
argument_list|(
name|replica
operator|.
name|routingEntry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getMetadataSnapshotOrEmpty
specifier|private
name|Store
operator|.
name|MetadataSnapshot
name|getMetadataSnapshotOrEmpty
parameter_list|(
name|IndexShard
name|replica
parameter_list|)
throws|throws
name|IOException
block|{
name|Store
operator|.
name|MetadataSnapshot
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|replica
operator|.
name|snapshotStoreMetadata
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
comment|// OK!
name|result
operator|=
name|Store
operator|.
name|MetadataSnapshot
operator|.
name|EMPTY
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed read store, treating as empty"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|Store
operator|.
name|MetadataSnapshot
operator|.
name|EMPTY
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getPrimaryNode
specifier|public
specifier|synchronized
name|DiscoveryNode
name|getPrimaryNode
parameter_list|()
block|{
return|return
name|getDiscoveryNode
argument_list|(
name|primary
operator|.
name|routingEntry
argument_list|()
operator|.
name|currentNodeId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|asyncRecoverReplica
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|asyncRecoverReplica
parameter_list|(
name|IndexShard
name|replica
parameter_list|,
name|BiFunction
argument_list|<
name|IndexShard
argument_list|,
name|DiscoveryNode
argument_list|,
name|RecoveryTarget
argument_list|>
name|targetSupplier
parameter_list|)
throws|throws
name|IOException
block|{
name|FutureTask
argument_list|<
name|Void
argument_list|>
name|task
init|=
operator|new
name|FutureTask
argument_list|<>
argument_list|(
parameter_list|()
lambda|->
block|{
name|recoverReplica
argument_list|(
name|replica
argument_list|,
name|targetSupplier
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
name|task
argument_list|)
expr_stmt|;
return|return
name|task
return|;
block|}
DECL|method|assertAllEqual
specifier|public
specifier|synchronized
name|void
name|assertAllEqual
parameter_list|(
name|int
name|expectedCount
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|Uid
argument_list|>
name|primaryIds
init|=
name|getShardDocUIDs
argument_list|(
name|primary
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|primaryIds
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedCount
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexShard
name|replica
range|:
name|replicas
control|)
block|{
name|Set
argument_list|<
name|Uid
argument_list|>
name|replicaIds
init|=
name|getShardDocUIDs
argument_list|(
name|replica
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Uid
argument_list|>
name|temp
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|primaryIds
argument_list|)
decl_stmt|;
name|temp
operator|.
name|removeAll
argument_list|(
name|replicaIds
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|replica
operator|.
name|routingEntry
argument_list|()
operator|+
literal|" is missing docs"
argument_list|,
name|temp
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|temp
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|replicaIds
argument_list|)
expr_stmt|;
name|temp
operator|.
name|removeAll
argument_list|(
name|primaryIds
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|replica
operator|.
name|routingEntry
argument_list|()
operator|+
literal|" has extra docs"
argument_list|,
name|temp
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getShardDocUIDs
specifier|private
name|Set
argument_list|<
name|Uid
argument_list|>
name|getShardDocUIDs
parameter_list|(
specifier|final
name|IndexShard
name|shard
parameter_list|)
throws|throws
name|IOException
block|{
name|shard
operator|.
name|refresh
argument_list|(
literal|"get_uids"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|shard
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|Set
argument_list|<
name|Uid
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|leafContext
range|:
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|reader
init|=
name|leafContext
operator|.
name|reader
argument_list|()
decl_stmt|;
name|Bits
name|liveDocs
init|=
name|reader
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|Document
name|uuid
init|=
name|reader
operator|.
name|document
argument_list|(
name|i
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
decl_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|Uid
operator|.
name|createUid
argument_list|(
name|uuid
operator|.
name|get
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ids
return|;
block|}
block|}
DECL|method|refresh
specifier|public
specifier|synchronized
name|void
name|refresh
parameter_list|(
name|String
name|source
parameter_list|)
block|{
for|for
control|(
name|IndexShard
name|shard
range|:
name|this
control|)
block|{
name|shard
operator|.
name|refresh
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|flush
specifier|public
specifier|synchronized
name|void
name|flush
parameter_list|()
block|{
specifier|final
name|FlushRequest
name|request
init|=
operator|new
name|FlushRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexShard
name|shard
range|:
name|this
control|)
block|{
name|shard
operator|.
name|flush
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|shardRoutings
specifier|public
specifier|synchronized
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shardRoutings
parameter_list|()
block|{
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|this
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|IndexShard
operator|::
name|routingEntry
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|closed
operator|==
literal|false
condition|)
block|{
name|closed
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|IndexShard
name|shard
range|:
name|this
control|)
block|{
name|shard
operator|.
name|close
argument_list|(
literal|"eol"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|shard
operator|.
name|store
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"too bad"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|IndexShard
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
expr|<
name|IndexShard
operator|>
name|concat
argument_list|(
name|replicas
operator|.
name|iterator
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|primary
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getPrimary
specifier|public
name|IndexShard
name|getPrimary
parameter_list|()
block|{
return|return
name|primary
return|;
block|}
block|}
DECL|class|IndexingOp
class|class
name|IndexingOp
extends|extends
name|ReplicationOperation
argument_list|<
name|IndexRequest
argument_list|,
name|IndexRequest
argument_list|,
name|IndexingResult
argument_list|>
block|{
DECL|field|replicationGroup
specifier|private
specifier|final
name|ReplicationGroup
name|replicationGroup
decl_stmt|;
DECL|method|IndexingOp
specifier|public
name|IndexingOp
parameter_list|(
name|IndexRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|IndexingResult
argument_list|>
name|listener
parameter_list|,
name|ReplicationGroup
name|replicationGroup
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|,
operator|new
name|PrimaryRef
argument_list|(
name|replicationGroup
argument_list|)
argument_list|,
name|listener
argument_list|,
literal|true
argument_list|,
operator|new
name|ReplicasRef
argument_list|(
name|replicationGroup
argument_list|)
argument_list|,
parameter_list|()
lambda|->
literal|null
argument_list|,
name|logger
argument_list|,
literal|"indexing"
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationGroup
operator|=
name|replicationGroup
expr_stmt|;
name|request
operator|.
name|process
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getShards
specifier|protected
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|getShards
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
return|return
name|replicationGroup
operator|.
name|shardRoutings
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getInSyncAllocationIds
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getInSyncAllocationIds
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|ClusterState
name|clusterState
parameter_list|)
block|{
return|return
name|replicationGroup
operator|.
name|shardRoutings
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|ShardRouting
operator|::
name|active
argument_list|)
operator|.
name|map
argument_list|(
name|shr
lambda|->
name|shr
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|checkActiveShardCount
specifier|protected
name|String
name|checkActiveShardCount
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|PrimaryRef
specifier|private
specifier|static
class|class
name|PrimaryRef
implements|implements
name|ReplicationOperation
operator|.
name|Primary
argument_list|<
name|IndexRequest
argument_list|,
name|IndexRequest
argument_list|,
name|IndexingResult
argument_list|>
block|{
DECL|field|primary
specifier|final
name|IndexShard
name|primary
decl_stmt|;
DECL|method|PrimaryRef
specifier|private
name|PrimaryRef
parameter_list|(
name|ReplicationGroup
name|replicationGroup
parameter_list|)
block|{
name|this
operator|.
name|primary
operator|=
name|replicationGroup
operator|.
name|primary
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|routingEntry
specifier|public
name|ShardRouting
name|routingEntry
parameter_list|()
block|{
return|return
name|primary
operator|.
name|routingEntry
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|failShard
specifier|public
name|void
name|failShard
parameter_list|(
name|String
name|message
parameter_list|,
name|Exception
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|perform
specifier|public
name|IndexingResult
name|perform
parameter_list|(
name|IndexRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|TransportWriteAction
operator|.
name|WriteResult
argument_list|<
name|IndexResponse
argument_list|>
name|result
init|=
name|TransportIndexAction
operator|.
name|executeIndexRequestOnPrimary
argument_list|(
name|request
argument_list|,
name|primary
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|request
operator|.
name|primaryTerm
argument_list|(
name|primary
operator|.
name|getPrimaryTerm
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|IndexingResult
argument_list|(
name|request
argument_list|,
name|result
operator|.
name|getResponse
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|ReplicasRef
specifier|private
specifier|static
class|class
name|ReplicasRef
implements|implements
name|ReplicationOperation
operator|.
name|Replicas
argument_list|<
name|IndexRequest
argument_list|>
block|{
DECL|field|replicationGroup
specifier|private
specifier|final
name|ReplicationGroup
name|replicationGroup
decl_stmt|;
DECL|method|ReplicasRef
specifier|private
name|ReplicasRef
parameter_list|(
name|ReplicationGroup
name|replicationGroup
parameter_list|)
block|{
name|this
operator|.
name|replicationGroup
operator|=
name|replicationGroup
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|performOn
specifier|public
name|void
name|performOn
parameter_list|(
name|ShardRouting
name|replicaRouting
parameter_list|,
name|IndexRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|TransportResponse
operator|.
name|Empty
argument_list|>
name|listener
parameter_list|)
block|{
try|try
block|{
name|IndexShard
name|replica
init|=
name|replicationGroup
operator|.
name|replicas
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|s
lambda|->
name|replicaRouting
operator|.
name|isSameAllocation
argument_list|(
name|s
operator|.
name|routingEntry
argument_list|()
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|TransportIndexAction
operator|.
name|executeIndexRequestOnReplica
argument_list|(
name|request
argument_list|,
name|replica
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|failShard
specifier|public
name|void
name|failShard
parameter_list|(
name|ShardRouting
name|replica
parameter_list|,
name|long
name|primaryTerm
parameter_list|,
name|String
name|message
parameter_list|,
name|Exception
name|exception
parameter_list|,
name|Runnable
name|onSuccess
parameter_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onPrimaryDemoted
parameter_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onIgnoredFailure
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|markShardCopyAsStale
specifier|public
name|void
name|markShardCopyAsStale
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|allocationId
parameter_list|,
name|long
name|primaryTerm
parameter_list|,
name|Runnable
name|onSuccess
parameter_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onPrimaryDemoted
parameter_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onIgnoredFailure
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|class|IndexingResult
specifier|private
specifier|static
class|class
name|IndexingResult
implements|implements
name|ReplicationOperation
operator|.
name|PrimaryResult
argument_list|<
name|IndexRequest
argument_list|>
block|{
DECL|field|replicaRequest
specifier|final
name|IndexRequest
name|replicaRequest
decl_stmt|;
DECL|field|finalResponse
specifier|final
name|IndexResponse
name|finalResponse
decl_stmt|;
DECL|method|IndexingResult
specifier|public
name|IndexingResult
parameter_list|(
name|IndexRequest
name|replicaRequest
parameter_list|,
name|IndexResponse
name|finalResponse
parameter_list|)
block|{
name|this
operator|.
name|replicaRequest
operator|=
name|replicaRequest
expr_stmt|;
name|this
operator|.
name|finalResponse
operator|=
name|finalResponse
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|replicaRequest
specifier|public
name|IndexRequest
name|replicaRequest
parameter_list|()
block|{
return|return
name|replicaRequest
return|;
block|}
annotation|@
name|Override
DECL|method|setShardInfo
specifier|public
name|void
name|setShardInfo
parameter_list|(
name|ReplicationResponse
operator|.
name|ShardInfo
name|shardInfo
parameter_list|)
block|{
name|finalResponse
operator|.
name|setShardInfo
argument_list|(
name|shardInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|respond
specifier|public
name|void
name|respond
parameter_list|(
name|ActionListener
argument_list|<
name|IndexResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|finalResponse
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

