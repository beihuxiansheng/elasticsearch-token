begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.get
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|get
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|RandomObjects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
operator|.
name|toXContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|get
operator|.
name|GetFieldTests
operator|.
name|randomGetField
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|EqualsHashCodeTestUtils
operator|.
name|checkEqualsAndHashCode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertToXContentEquivalent
import|;
end_import

begin_class
DECL|class|GetResultTests
specifier|public
class|class
name|GetResultTests
extends|extends
name|ESTestCase
block|{
DECL|method|testToAndFromXContent
specifier|public
name|void
name|testToAndFromXContent
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Tuple
argument_list|<
name|GetResult
argument_list|,
name|GetResult
argument_list|>
name|tuple
init|=
name|randomGetResult
argument_list|(
name|xContentType
argument_list|)
decl_stmt|;
name|GetResult
name|getResult
init|=
name|tuple
operator|.
name|v1
argument_list|()
decl_stmt|;
name|GetResult
name|expectedGetResult
init|=
name|tuple
operator|.
name|v2
argument_list|()
decl_stmt|;
name|BytesReference
name|originalBytes
init|=
name|toXContent
argument_list|(
name|getResult
argument_list|,
name|xContentType
argument_list|)
decl_stmt|;
comment|//test that we can parse what we print out
name|GetResult
name|parsedGetResult
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|originalBytes
argument_list|)
init|)
block|{
name|parsedGetResult
operator|=
name|GetResult
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedGetResult
argument_list|,
name|parsedGetResult
argument_list|)
expr_stmt|;
comment|//print the parsed object out and test that the output is the same as the original output
name|BytesReference
name|finalBytes
init|=
name|toXContent
argument_list|(
name|parsedGetResult
argument_list|,
name|xContentType
argument_list|)
decl_stmt|;
name|assertToXContentEquivalent
argument_list|(
name|originalBytes
argument_list|,
name|finalBytes
argument_list|,
name|xContentType
argument_list|)
expr_stmt|;
comment|//check that the source stays unchanged, no shuffling of keys nor anything like that
name|assertEquals
argument_list|(
name|expectedGetResult
operator|.
name|sourceAsString
argument_list|()
argument_list|,
name|parsedGetResult
operator|.
name|sourceAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToXContent
specifier|public
name|void
name|testToXContent
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|GetResult
name|getResult
init|=
operator|new
name|GetResult
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{ \"field1\" : "
operator|+
literal|"\"value1\", \"field2\":\"value2\"}"
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"field1"
argument_list|,
operator|new
name|GetField
argument_list|(
literal|"field1"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|output
init|=
name|Strings
operator|.
name|toString
argument_list|(
name|getResult
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"_index\":\"index\",\"_type\":\"type\",\"_id\":\"id\",\"_version\":1,\"found\":true,\"_source\":{ \"field1\" "
operator|+
literal|": \"value1\", \"field2\":\"value2\"},\"fields\":{\"field1\":[\"value1\"]}}"
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|{
name|GetResult
name|getResult
init|=
operator|new
name|GetResult
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|output
init|=
name|Strings
operator|.
name|toString
argument_list|(
name|getResult
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"_index\":\"index\",\"_type\":\"type\",\"_id\":\"id\",\"found\":false}"
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetSourceAsBytes
specifier|public
name|void
name|testGetSourceAsBytes
parameter_list|()
block|{
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Tuple
argument_list|<
name|GetResult
argument_list|,
name|GetResult
argument_list|>
name|tuple
init|=
name|randomGetResult
argument_list|(
name|xContentType
argument_list|)
decl_stmt|;
name|GetResult
name|getResult
init|=
name|tuple
operator|.
name|v1
argument_list|()
decl_stmt|;
if|if
condition|(
name|getResult
operator|.
name|isExists
argument_list|()
condition|)
block|{
name|assertNotNull
argument_list|(
name|getResult
operator|.
name|sourceRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|getResult
operator|.
name|sourceRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEqualsAndHashcode
specifier|public
name|void
name|testEqualsAndHashcode
parameter_list|()
block|{
name|checkEqualsAndHashCode
argument_list|(
name|randomGetResult
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|v1
argument_list|()
argument_list|,
name|GetResultTests
operator|::
name|copyGetResult
argument_list|,
name|GetResultTests
operator|::
name|mutateGetResult
argument_list|)
expr_stmt|;
block|}
DECL|method|copyGetResult
specifier|public
specifier|static
name|GetResult
name|copyGetResult
parameter_list|(
name|GetResult
name|getResult
parameter_list|)
block|{
return|return
operator|new
name|GetResult
argument_list|(
name|getResult
operator|.
name|getIndex
argument_list|()
argument_list|,
name|getResult
operator|.
name|getType
argument_list|()
argument_list|,
name|getResult
operator|.
name|getId
argument_list|()
argument_list|,
name|getResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|getResult
operator|.
name|isExists
argument_list|()
argument_list|,
name|getResult
operator|.
name|internalSourceRef
argument_list|()
argument_list|,
name|getResult
operator|.
name|getFields
argument_list|()
argument_list|)
return|;
block|}
DECL|method|mutateGetResult
specifier|public
specifier|static
name|GetResult
name|mutateGetResult
parameter_list|(
name|GetResult
name|getResult
parameter_list|)
block|{
name|List
argument_list|<
name|Supplier
argument_list|<
name|GetResult
argument_list|>
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|GetResult
argument_list|(
name|randomUnicodeOfLength
argument_list|(
literal|15
argument_list|)
argument_list|,
name|getResult
operator|.
name|getType
argument_list|()
argument_list|,
name|getResult
operator|.
name|getId
argument_list|()
argument_list|,
name|getResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|getResult
operator|.
name|isExists
argument_list|()
argument_list|,
name|getResult
operator|.
name|internalSourceRef
argument_list|()
argument_list|,
name|getResult
operator|.
name|getFields
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|GetResult
argument_list|(
name|getResult
operator|.
name|getIndex
argument_list|()
argument_list|,
name|randomUnicodeOfLength
argument_list|(
literal|15
argument_list|)
argument_list|,
name|getResult
operator|.
name|getId
argument_list|()
argument_list|,
name|getResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|getResult
operator|.
name|isExists
argument_list|()
argument_list|,
name|getResult
operator|.
name|internalSourceRef
argument_list|()
argument_list|,
name|getResult
operator|.
name|getFields
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|GetResult
argument_list|(
name|getResult
operator|.
name|getIndex
argument_list|()
argument_list|,
name|getResult
operator|.
name|getType
argument_list|()
argument_list|,
name|randomUnicodeOfLength
argument_list|(
literal|15
argument_list|)
argument_list|,
name|getResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|getResult
operator|.
name|isExists
argument_list|()
argument_list|,
name|getResult
operator|.
name|internalSourceRef
argument_list|()
argument_list|,
name|getResult
operator|.
name|getFields
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|GetResult
argument_list|(
name|getResult
operator|.
name|getIndex
argument_list|()
argument_list|,
name|getResult
operator|.
name|getType
argument_list|()
argument_list|,
name|getResult
operator|.
name|getId
argument_list|()
argument_list|,
name|randomNonNegativeLong
argument_list|()
argument_list|,
name|getResult
operator|.
name|isExists
argument_list|()
argument_list|,
name|getResult
operator|.
name|internalSourceRef
argument_list|()
argument_list|,
name|getResult
operator|.
name|getFields
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|GetResult
argument_list|(
name|getResult
operator|.
name|getIndex
argument_list|()
argument_list|,
name|getResult
operator|.
name|getType
argument_list|()
argument_list|,
name|getResult
operator|.
name|getId
argument_list|()
argument_list|,
name|getResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|getResult
operator|.
name|isExists
argument_list|()
operator|==
literal|false
argument_list|,
name|getResult
operator|.
name|internalSourceRef
argument_list|()
argument_list|,
name|getResult
operator|.
name|getFields
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|GetResult
argument_list|(
name|getResult
operator|.
name|getIndex
argument_list|()
argument_list|,
name|getResult
operator|.
name|getType
argument_list|()
argument_list|,
name|getResult
operator|.
name|getId
argument_list|()
argument_list|,
name|getResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|getResult
operator|.
name|isExists
argument_list|()
argument_list|,
name|RandomObjects
operator|.
name|randomSource
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|getResult
operator|.
name|getFields
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|GetResult
argument_list|(
name|getResult
operator|.
name|getIndex
argument_list|()
argument_list|,
name|getResult
operator|.
name|getType
argument_list|()
argument_list|,
name|getResult
operator|.
name|getId
argument_list|()
argument_list|,
name|getResult
operator|.
name|getVersion
argument_list|()
argument_list|,
name|getResult
operator|.
name|isExists
argument_list|()
argument_list|,
name|getResult
operator|.
name|internalSourceRef
argument_list|()
argument_list|,
name|randomGetFields
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|v1
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|randomFrom
argument_list|(
name|mutations
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|randomGetResult
specifier|public
specifier|static
name|Tuple
argument_list|<
name|GetResult
argument_list|,
name|GetResult
argument_list|>
name|randomGetResult
parameter_list|(
name|XContentType
name|xContentType
parameter_list|)
block|{
specifier|final
name|String
name|index
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|String
name|type
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|long
name|version
decl_stmt|;
specifier|final
name|boolean
name|exists
decl_stmt|;
name|BytesReference
name|source
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GetField
argument_list|>
name|fields
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GetField
argument_list|>
name|expectedFields
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
name|version
operator|=
name|randomNonNegativeLong
argument_list|()
expr_stmt|;
name|exists
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
name|source
operator|=
name|RandomObjects
operator|.
name|randomSource
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|Tuple
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|GetField
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|GetField
argument_list|>
argument_list|>
name|tuple
init|=
name|randomGetFields
argument_list|(
name|xContentType
argument_list|)
decl_stmt|;
name|fields
operator|=
name|tuple
operator|.
name|v1
argument_list|()
expr_stmt|;
name|expectedFields
operator|=
name|tuple
operator|.
name|v2
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|version
operator|=
operator|-
literal|1
expr_stmt|;
name|exists
operator|=
literal|false
expr_stmt|;
block|}
name|GetResult
name|getResult
init|=
operator|new
name|GetResult
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|version
argument_list|,
name|exists
argument_list|,
name|source
argument_list|,
name|fields
argument_list|)
decl_stmt|;
name|GetResult
name|expectedGetResult
init|=
operator|new
name|GetResult
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|version
argument_list|,
name|exists
argument_list|,
name|source
argument_list|,
name|expectedFields
argument_list|)
decl_stmt|;
return|return
name|Tuple
operator|.
name|tuple
argument_list|(
name|getResult
argument_list|,
name|expectedGetResult
argument_list|)
return|;
block|}
DECL|method|randomGetFields
specifier|private
specifier|static
name|Tuple
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|GetField
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|GetField
argument_list|>
argument_list|>
name|randomGetFields
parameter_list|(
name|XContentType
name|xContentType
parameter_list|)
block|{
name|int
name|numFields
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GetField
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|numFields
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GetField
argument_list|>
name|expectedFields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|numFields
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|Tuple
argument_list|<
name|GetField
argument_list|,
name|GetField
argument_list|>
name|tuple
init|=
name|randomGetField
argument_list|(
name|xContentType
argument_list|)
decl_stmt|;
name|GetField
name|getField
init|=
name|tuple
operator|.
name|v1
argument_list|()
decl_stmt|;
name|GetField
name|expectedGetField
init|=
name|tuple
operator|.
name|v2
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|getField
operator|.
name|getName
argument_list|()
argument_list|,
name|getField
argument_list|)
expr_stmt|;
name|expectedFields
operator|.
name|put
argument_list|(
name|expectedGetField
operator|.
name|getName
argument_list|()
argument_list|,
name|expectedGetField
argument_list|)
expr_stmt|;
block|}
return|return
name|Tuple
operator|.
name|tuple
argument_list|(
name|fields
argument_list|,
name|expectedFields
argument_list|)
return|;
block|}
block|}
end_class

end_unit

