begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|UnaryOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|node
operator|.
name|NodeClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|DeprecationLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|FakeRestRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doCallRealMethod
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
DECL|class|RestControllerTests
specifier|public
class|class
name|RestControllerTests
extends|extends
name|ESTestCase
block|{
DECL|method|testApplyRelevantHeaders
specifier|public
name|void
name|testApplyRelevantHeaders
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ThreadContext
name|threadContext
init|=
operator|new
name|ThreadContext
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"header.1"
argument_list|,
literal|"header.2"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RestController
name|restController
init|=
operator|new
name|RestController
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|headers
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|restController
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/"
argument_list|,
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|,
name|NodeClient
name|client
parameter_list|)
lambda|->
block|{
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"header.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"header.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"header.3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|threadContext
operator|.
name|putHeader
argument_list|(
literal|"header.3"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|restHeaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|restHeaders
operator|.
name|put
argument_list|(
literal|"header.1"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|restHeaders
operator|.
name|put
argument_list|(
literal|"header.2"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|restHeaders
operator|.
name|put
argument_list|(
literal|"header.3"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|restController
operator|.
name|dispatchRequest
argument_list|(
operator|new
name|FakeRestRequest
operator|.
name|Builder
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|)
operator|.
name|withHeaders
argument_list|(
name|restHeaders
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|threadContext
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"header.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"header.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"header.3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCanTripCircuitBreaker
specifier|public
name|void
name|testCanTripCircuitBreaker
parameter_list|()
throws|throws
name|Exception
block|{
name|RestController
name|controller
init|=
operator|new
name|RestController
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// trip circuit breaker by default
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/trip"
argument_list|,
operator|new
name|FakeRestHandler
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/do-not-trip"
argument_list|,
operator|new
name|FakeRestHandler
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|controller
operator|.
name|canTripCircuitBreaker
argument_list|(
operator|new
name|FakeRestRequest
operator|.
name|Builder
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|)
operator|.
name|withPath
argument_list|(
literal|"/trip"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// assume trip even on unknown paths
name|assertTrue
argument_list|(
name|controller
operator|.
name|canTripCircuitBreaker
argument_list|(
operator|new
name|FakeRestRequest
operator|.
name|Builder
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|)
operator|.
name|withPath
argument_list|(
literal|"/unknown-path"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|controller
operator|.
name|canTripCircuitBreaker
argument_list|(
operator|new
name|FakeRestRequest
operator|.
name|Builder
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|)
operator|.
name|withPath
argument_list|(
literal|"/do-not-trip"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRegisterAsDeprecatedHandler
specifier|public
name|void
name|testRegisterAsDeprecatedHandler
parameter_list|()
block|{
name|RestController
name|controller
init|=
name|mock
argument_list|(
name|RestController
operator|.
name|class
argument_list|)
decl_stmt|;
name|RestRequest
operator|.
name|Method
name|method
init|=
name|randomFrom
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|"/_"
operator|+
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|RestHandler
name|handler
init|=
name|mock
argument_list|(
name|RestHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|deprecationMessage
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|DeprecationLogger
name|logger
init|=
name|mock
argument_list|(
name|DeprecationLogger
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// don't want to test everything -- just that it actually wraps the handler
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|controller
argument_list|)
operator|.
name|registerAsDeprecatedHandler
argument_list|(
name|method
argument_list|,
name|path
argument_list|,
name|handler
argument_list|,
name|deprecationMessage
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerAsDeprecatedHandler
argument_list|(
name|method
argument_list|,
name|path
argument_list|,
name|handler
argument_list|,
name|deprecationMessage
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|controller
argument_list|)
operator|.
name|registerHandler
argument_list|(
name|eq
argument_list|(
name|method
argument_list|)
argument_list|,
name|eq
argument_list|(
name|path
argument_list|)
argument_list|,
name|any
argument_list|(
name|DeprecationRestHandler
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRegisterWithDeprecatedHandler
specifier|public
name|void
name|testRegisterWithDeprecatedHandler
parameter_list|()
block|{
specifier|final
name|RestController
name|controller
init|=
name|mock
argument_list|(
name|RestController
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|RestRequest
operator|.
name|Method
name|method
init|=
name|randomFrom
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|path
init|=
literal|"/_"
operator|+
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
decl_stmt|;
specifier|final
name|RestHandler
name|handler
init|=
name|mock
argument_list|(
name|RestHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|RestRequest
operator|.
name|Method
name|deprecatedMethod
init|=
name|randomFrom
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|deprecatedPath
init|=
literal|"/_"
operator|+
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
decl_stmt|;
specifier|final
name|DeprecationLogger
name|logger
init|=
name|mock
argument_list|(
name|DeprecationLogger
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|deprecationMessage
init|=
literal|"["
operator|+
name|deprecatedMethod
operator|.
name|name
argument_list|()
operator|+
literal|" "
operator|+
name|deprecatedPath
operator|+
literal|"] is deprecated! Use ["
operator|+
name|method
operator|.
name|name
argument_list|()
operator|+
literal|" "
operator|+
name|path
operator|+
literal|"] instead."
decl_stmt|;
comment|// don't want to test everything -- just that it actually wraps the handlers
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|controller
argument_list|)
operator|.
name|registerWithDeprecatedHandler
argument_list|(
name|method
argument_list|,
name|path
argument_list|,
name|handler
argument_list|,
name|deprecatedMethod
argument_list|,
name|deprecatedPath
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerWithDeprecatedHandler
argument_list|(
name|method
argument_list|,
name|path
argument_list|,
name|handler
argument_list|,
name|deprecatedMethod
argument_list|,
name|deprecatedPath
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|controller
argument_list|)
operator|.
name|registerHandler
argument_list|(
name|method
argument_list|,
name|path
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|controller
argument_list|)
operator|.
name|registerAsDeprecatedHandler
argument_list|(
name|deprecatedMethod
argument_list|,
name|deprecatedPath
argument_list|,
name|handler
argument_list|,
name|deprecationMessage
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
DECL|method|testRestHandlerWrapper
specifier|public
name|void
name|testRestHandlerWrapper
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|handlerCalled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|wrapperCalled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|RestHandler
name|handler
init|=
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|,
name|NodeClient
name|client
parameter_list|)
lambda|->
block|{
name|handlerCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|UnaryOperator
argument_list|<
name|RestHandler
argument_list|>
name|wrapper
init|=
name|h
lambda|->
block|{
name|assertSame
argument_list|(
name|handler
argument_list|,
name|h
argument_list|)
expr_stmt|;
return|return
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|,
name|NodeClient
name|client
parameter_list|)
lambda|->
name|wrapperCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
return|;
block|}
decl_stmt|;
specifier|final
name|RestController
name|restController
init|=
operator|new
name|RestController
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
name|wrapper
argument_list|)
decl_stmt|;
name|restController
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/"
argument_list|,
name|handler
argument_list|)
expr_stmt|;
specifier|final
name|ThreadContext
name|threadContext
init|=
operator|new
name|ThreadContext
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|restController
operator|.
name|dispatchRequest
argument_list|(
operator|new
name|FakeRestRequest
operator|.
name|Builder
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|threadContext
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wrapperCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|handlerCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Useful for testing with deprecation handler.      */
DECL|class|FakeRestHandler
specifier|private
specifier|static
class|class
name|FakeRestHandler
implements|implements
name|RestHandler
block|{
DECL|field|canTripCircuitBreaker
specifier|private
specifier|final
name|boolean
name|canTripCircuitBreaker
decl_stmt|;
DECL|method|FakeRestHandler
specifier|private
name|FakeRestHandler
parameter_list|(
name|boolean
name|canTripCircuitBreaker
parameter_list|)
block|{
name|this
operator|.
name|canTripCircuitBreaker
operator|=
name|canTripCircuitBreaker
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleRequest
specifier|public
name|void
name|handleRequest
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|,
name|NodeClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
comment|//no op
block|}
annotation|@
name|Override
DECL|method|canTripCircuitBreaker
specifier|public
name|boolean
name|canTripCircuitBreaker
parameter_list|()
block|{
return|return
name|canTripCircuitBreaker
return|;
block|}
block|}
block|}
end_class

end_unit

