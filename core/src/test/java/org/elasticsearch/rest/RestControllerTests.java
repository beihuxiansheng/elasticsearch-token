begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|FakeRestRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|RestControllerTests
specifier|public
class|class
name|RestControllerTests
extends|extends
name|ESTestCase
block|{
DECL|method|testRegisterRelevantHeaders
specifier|public
name|void
name|testRegisterRelevantHeaders
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|RestController
name|restController
init|=
operator|new
name|RestController
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|int
name|iterations
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|iterations
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|int
name|headersCount
init|=
name|randomInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|newHeaders
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|headersCount
condition|;
name|j
operator|++
control|)
block|{
name|String
name|usefulHeader
init|=
name|randomRealisticUnicodeOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|newHeaders
operator|.
name|add
argument_list|(
name|usefulHeader
argument_list|)
expr_stmt|;
block|}
name|headers
operator|.
name|addAll
argument_list|(
name|newHeaders
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|submit
argument_list|(
call|(
name|Runnable
call|)
argument_list|()
operator|->
name|restController
operator|.
name|registerRelevantHeaders
argument_list|(
name|newHeaders
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|newHeaders
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|relevantHeaders
init|=
name|restController
operator|.
name|relevantHeaders
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|restController
operator|.
name|relevantHeaders
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|relevantHeaders
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|headers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|relevantHeaders
argument_list|)
expr_stmt|;
name|String
index|[]
name|headersArray
init|=
operator|new
name|String
index|[
name|headers
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|headersArray
operator|=
name|headers
operator|.
name|toArray
argument_list|(
name|headersArray
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|headersArray
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|relevantHeaders
argument_list|,
name|equalTo
argument_list|(
name|headersArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testApplyRelevantHeaders
specifier|public
name|void
name|testApplyRelevantHeaders
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ThreadContext
name|threadContext
init|=
operator|new
name|ThreadContext
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
specifier|final
name|RestController
name|restController
init|=
operator|new
name|RestController
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|checkRequestParameters
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
name|void
name|executeHandler
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"header.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"header.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"header.3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|threadContext
operator|.
name|putHeader
argument_list|(
literal|"header.3"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|restController
operator|.
name|registerRelevantHeaders
argument_list|(
literal|"header.1"
argument_list|,
literal|"header.2"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|restHeaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|restHeaders
operator|.
name|put
argument_list|(
literal|"header.1"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|restHeaders
operator|.
name|put
argument_list|(
literal|"header.2"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|restHeaders
operator|.
name|put
argument_list|(
literal|"header.3"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|restController
operator|.
name|dispatchRequest
argument_list|(
operator|new
name|FakeRestRequest
argument_list|(
name|restHeaders
argument_list|)
argument_list|,
literal|null
argument_list|,
name|threadContext
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"header.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"header.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"header.3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

