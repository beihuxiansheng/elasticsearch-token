begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|UnaryOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|node
operator|.
name|NodeClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|breaker
operator|.
name|CircuitBreaker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|DeprecationLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|BoundTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpTransportSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|HierarchyCircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|FakeRestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doCallRealMethod
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
DECL|class|RestControllerTests
specifier|public
class|class
name|RestControllerTests
extends|extends
name|ESTestCase
block|{
DECL|field|BREAKER_LIMIT
specifier|private
specifier|static
specifier|final
name|ByteSizeValue
name|BREAKER_LIMIT
init|=
operator|new
name|ByteSizeValue
argument_list|(
literal|20
argument_list|)
decl_stmt|;
DECL|field|inFlightRequestsBreaker
specifier|private
name|CircuitBreaker
name|inFlightRequestsBreaker
decl_stmt|;
DECL|field|restController
specifier|private
name|RestController
name|restController
decl_stmt|;
DECL|field|circuitBreakerService
specifier|private
name|HierarchyCircuitBreakerService
name|circuitBreakerService
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|EMPTY
decl_stmt|;
name|circuitBreakerService
operator|=
operator|new
name|HierarchyCircuitBreakerService
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|HierarchyCircuitBreakerService
operator|.
name|IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_LIMIT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|BREAKER_LIMIT
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
argument_list|)
expr_stmt|;
comment|// we can do this here only because we know that we don't adjust breaker settings dynamically in the test
name|inFlightRequestsBreaker
operator|=
name|circuitBreakerService
operator|.
name|getBreaker
argument_list|(
name|CircuitBreaker
operator|.
name|IN_FLIGHT_REQUESTS
argument_list|)
expr_stmt|;
name|HttpServerTransport
name|httpServerTransport
init|=
operator|new
name|TestHttpServerTransport
argument_list|()
decl_stmt|;
name|restController
operator|=
operator|new
name|RestController
argument_list|(
name|settings
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|circuitBreakerService
argument_list|)
expr_stmt|;
name|restController
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/"
argument_list|,
parameter_list|(
name|request
parameter_list|,
name|channel
parameter_list|,
name|client
parameter_list|)
lambda|->
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|BytesRestResponse
argument_list|(
name|RestStatus
operator|.
name|OK
argument_list|,
name|BytesRestResponse
operator|.
name|TEXT_CONTENT_TYPE
argument_list|,
name|BytesArray
operator|.
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|restController
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/error"
argument_list|,
parameter_list|(
name|request
parameter_list|,
name|channel
parameter_list|,
name|client
parameter_list|)
lambda|->
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"test error"
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
name|httpServerTransport
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testApplyRelevantHeaders
specifier|public
name|void
name|testApplyRelevantHeaders
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ThreadContext
name|threadContext
init|=
operator|new
name|ThreadContext
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"header.1"
argument_list|,
literal|"header.2"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RestController
name|restController
init|=
operator|new
name|RestController
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|headers
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|circuitBreakerService
argument_list|)
decl_stmt|;
name|threadContext
operator|.
name|putHeader
argument_list|(
literal|"header.3"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|restHeaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|restHeaders
operator|.
name|put
argument_list|(
literal|"header.1"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|restHeaders
operator|.
name|put
argument_list|(
literal|"header.2"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|restHeaders
operator|.
name|put
argument_list|(
literal|"header.3"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|restController
operator|.
name|dispatchRequest
argument_list|(
operator|new
name|FakeRestRequest
operator|.
name|Builder
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|)
operator|.
name|withHeaders
argument_list|(
name|restHeaders
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|threadContext
argument_list|,
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|,
name|NodeClient
name|client
parameter_list|)
lambda|->
block|{
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"header.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"header.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"header.3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"header.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"header.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"header.3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCanTripCircuitBreaker
specifier|public
name|void
name|testCanTripCircuitBreaker
parameter_list|()
throws|throws
name|Exception
block|{
name|RestController
name|controller
init|=
operator|new
name|RestController
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|circuitBreakerService
argument_list|)
decl_stmt|;
comment|// trip circuit breaker by default
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/trip"
argument_list|,
operator|new
name|FakeRestHandler
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/do-not-trip"
argument_list|,
operator|new
name|FakeRestHandler
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|controller
operator|.
name|canTripCircuitBreaker
argument_list|(
operator|new
name|FakeRestRequest
operator|.
name|Builder
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|)
operator|.
name|withPath
argument_list|(
literal|"/trip"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// assume trip even on unknown paths
name|assertTrue
argument_list|(
name|controller
operator|.
name|canTripCircuitBreaker
argument_list|(
operator|new
name|FakeRestRequest
operator|.
name|Builder
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|)
operator|.
name|withPath
argument_list|(
literal|"/unknown-path"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|controller
operator|.
name|canTripCircuitBreaker
argument_list|(
operator|new
name|FakeRestRequest
operator|.
name|Builder
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|)
operator|.
name|withPath
argument_list|(
literal|"/do-not-trip"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRegisterAsDeprecatedHandler
specifier|public
name|void
name|testRegisterAsDeprecatedHandler
parameter_list|()
block|{
name|RestController
name|controller
init|=
name|mock
argument_list|(
name|RestController
operator|.
name|class
argument_list|)
decl_stmt|;
name|RestRequest
operator|.
name|Method
name|method
init|=
name|randomFrom
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|"/_"
operator|+
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|RestHandler
name|handler
init|=
name|mock
argument_list|(
name|RestHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|deprecationMessage
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|DeprecationLogger
name|logger
init|=
name|mock
argument_list|(
name|DeprecationLogger
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// don't want to test everything -- just that it actually wraps the handler
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|controller
argument_list|)
operator|.
name|registerAsDeprecatedHandler
argument_list|(
name|method
argument_list|,
name|path
argument_list|,
name|handler
argument_list|,
name|deprecationMessage
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerAsDeprecatedHandler
argument_list|(
name|method
argument_list|,
name|path
argument_list|,
name|handler
argument_list|,
name|deprecationMessage
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|controller
argument_list|)
operator|.
name|registerHandler
argument_list|(
name|eq
argument_list|(
name|method
argument_list|)
argument_list|,
name|eq
argument_list|(
name|path
argument_list|)
argument_list|,
name|any
argument_list|(
name|DeprecationRestHandler
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRegisterWithDeprecatedHandler
specifier|public
name|void
name|testRegisterWithDeprecatedHandler
parameter_list|()
block|{
specifier|final
name|RestController
name|controller
init|=
name|mock
argument_list|(
name|RestController
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|RestRequest
operator|.
name|Method
name|method
init|=
name|randomFrom
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|path
init|=
literal|"/_"
operator|+
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
decl_stmt|;
specifier|final
name|RestHandler
name|handler
init|=
name|mock
argument_list|(
name|RestHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|RestRequest
operator|.
name|Method
name|deprecatedMethod
init|=
name|randomFrom
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|deprecatedPath
init|=
literal|"/_"
operator|+
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
decl_stmt|;
specifier|final
name|DeprecationLogger
name|logger
init|=
name|mock
argument_list|(
name|DeprecationLogger
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|deprecationMessage
init|=
literal|"["
operator|+
name|deprecatedMethod
operator|.
name|name
argument_list|()
operator|+
literal|" "
operator|+
name|deprecatedPath
operator|+
literal|"] is deprecated! Use ["
operator|+
name|method
operator|.
name|name
argument_list|()
operator|+
literal|" "
operator|+
name|path
operator|+
literal|"] instead."
decl_stmt|;
comment|// don't want to test everything -- just that it actually wraps the handlers
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|controller
argument_list|)
operator|.
name|registerWithDeprecatedHandler
argument_list|(
name|method
argument_list|,
name|path
argument_list|,
name|handler
argument_list|,
name|deprecatedMethod
argument_list|,
name|deprecatedPath
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerWithDeprecatedHandler
argument_list|(
name|method
argument_list|,
name|path
argument_list|,
name|handler
argument_list|,
name|deprecatedMethod
argument_list|,
name|deprecatedPath
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|controller
argument_list|)
operator|.
name|registerHandler
argument_list|(
name|method
argument_list|,
name|path
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|controller
argument_list|)
operator|.
name|registerAsDeprecatedHandler
argument_list|(
name|deprecatedMethod
argument_list|,
name|deprecatedPath
argument_list|,
name|handler
argument_list|,
name|deprecationMessage
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
DECL|method|testRestHandlerWrapper
specifier|public
name|void
name|testRestHandlerWrapper
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicBoolean
name|handlerCalled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|wrapperCalled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|RestHandler
name|handler
init|=
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|,
name|NodeClient
name|client
parameter_list|)
lambda|->
block|{
name|handlerCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|UnaryOperator
argument_list|<
name|RestHandler
argument_list|>
name|wrapper
init|=
name|h
lambda|->
block|{
name|assertSame
argument_list|(
name|handler
argument_list|,
name|h
argument_list|)
expr_stmt|;
return|return
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|,
name|NodeClient
name|client
parameter_list|)
lambda|->
name|wrapperCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
return|;
block|}
decl_stmt|;
specifier|final
name|RestController
name|restController
init|=
operator|new
name|RestController
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
name|wrapper
argument_list|,
literal|null
argument_list|,
name|circuitBreakerService
argument_list|)
decl_stmt|;
specifier|final
name|ThreadContext
name|threadContext
init|=
operator|new
name|ThreadContext
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|restController
operator|.
name|dispatchRequest
argument_list|(
operator|new
name|FakeRestRequest
operator|.
name|Builder
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|threadContext
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wrapperCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|handlerCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Useful for testing with deprecation handler.      */
DECL|class|FakeRestHandler
specifier|private
specifier|static
class|class
name|FakeRestHandler
implements|implements
name|RestHandler
block|{
DECL|field|canTripCircuitBreaker
specifier|private
specifier|final
name|boolean
name|canTripCircuitBreaker
decl_stmt|;
DECL|method|FakeRestHandler
specifier|private
name|FakeRestHandler
parameter_list|(
name|boolean
name|canTripCircuitBreaker
parameter_list|)
block|{
name|this
operator|.
name|canTripCircuitBreaker
operator|=
name|canTripCircuitBreaker
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleRequest
specifier|public
name|void
name|handleRequest
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|,
name|NodeClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
comment|//no op
block|}
annotation|@
name|Override
DECL|method|canTripCircuitBreaker
specifier|public
name|boolean
name|canTripCircuitBreaker
parameter_list|()
block|{
return|return
name|canTripCircuitBreaker
return|;
block|}
block|}
DECL|method|testDispatchRequestAddsAndFreesBytesOnSuccess
specifier|public
name|void
name|testDispatchRequestAddsAndFreesBytesOnSuccess
parameter_list|()
block|{
name|int
name|contentLength
init|=
name|BREAKER_LIMIT
operator|.
name|bytesAsInt
argument_list|()
decl_stmt|;
name|String
name|content
init|=
name|randomAsciiOfLength
argument_list|(
name|contentLength
argument_list|)
decl_stmt|;
name|TestRestRequest
name|request
init|=
operator|new
name|TestRestRequest
argument_list|(
literal|"/"
argument_list|,
name|content
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|AssertingChannel
name|channel
init|=
operator|new
name|AssertingChannel
argument_list|(
name|request
argument_list|,
literal|true
argument_list|,
name|RestStatus
operator|.
name|OK
argument_list|)
decl_stmt|;
name|restController
operator|.
name|dispatchRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
operator|new
name|ThreadContext
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inFlightRequestsBreaker
operator|.
name|getTrippedCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inFlightRequestsBreaker
operator|.
name|getUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDispatchRequestAddsAndFreesBytesOnError
specifier|public
name|void
name|testDispatchRequestAddsAndFreesBytesOnError
parameter_list|()
block|{
name|int
name|contentLength
init|=
name|BREAKER_LIMIT
operator|.
name|bytesAsInt
argument_list|()
decl_stmt|;
name|String
name|content
init|=
name|randomAsciiOfLength
argument_list|(
name|contentLength
argument_list|)
decl_stmt|;
name|TestRestRequest
name|request
init|=
operator|new
name|TestRestRequest
argument_list|(
literal|"/error"
argument_list|,
name|content
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|AssertingChannel
name|channel
init|=
operator|new
name|AssertingChannel
argument_list|(
name|request
argument_list|,
literal|true
argument_list|,
name|RestStatus
operator|.
name|BAD_REQUEST
argument_list|)
decl_stmt|;
name|restController
operator|.
name|dispatchRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
operator|new
name|ThreadContext
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inFlightRequestsBreaker
operator|.
name|getTrippedCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inFlightRequestsBreaker
operator|.
name|getUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDispatchRequestAddsAndFreesBytesOnlyOnceOnError
specifier|public
name|void
name|testDispatchRequestAddsAndFreesBytesOnlyOnceOnError
parameter_list|()
block|{
name|int
name|contentLength
init|=
name|BREAKER_LIMIT
operator|.
name|bytesAsInt
argument_list|()
decl_stmt|;
name|String
name|content
init|=
name|randomAsciiOfLength
argument_list|(
name|contentLength
argument_list|)
decl_stmt|;
comment|// we will produce an error in the rest handler and one more when sending the error response
name|TestRestRequest
name|request
init|=
operator|new
name|TestRestRequest
argument_list|(
literal|"/error"
argument_list|,
name|content
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|ExceptionThrowingChannel
name|channel
init|=
operator|new
name|ExceptionThrowingChannel
argument_list|(
name|request
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|restController
operator|.
name|dispatchRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
operator|new
name|ThreadContext
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inFlightRequestsBreaker
operator|.
name|getTrippedCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inFlightRequestsBreaker
operator|.
name|getUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDispatchRequestLimitsBytes
specifier|public
name|void
name|testDispatchRequestLimitsBytes
parameter_list|()
block|{
name|int
name|contentLength
init|=
name|BREAKER_LIMIT
operator|.
name|bytesAsInt
argument_list|()
operator|+
literal|1
decl_stmt|;
name|String
name|content
init|=
name|randomAsciiOfLength
argument_list|(
name|contentLength
argument_list|)
decl_stmt|;
name|TestRestRequest
name|request
init|=
operator|new
name|TestRestRequest
argument_list|(
literal|"/"
argument_list|,
name|content
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|AssertingChannel
name|channel
init|=
operator|new
name|AssertingChannel
argument_list|(
name|request
argument_list|,
literal|true
argument_list|,
name|RestStatus
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
decl_stmt|;
name|restController
operator|.
name|dispatchRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
operator|new
name|ThreadContext
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|inFlightRequestsBreaker
operator|.
name|getTrippedCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inFlightRequestsBreaker
operator|.
name|getUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDispatchRequiresContentTypeForRequestsWithContent
specifier|public
name|void
name|testDispatchRequiresContentTypeForRequestsWithContent
parameter_list|()
block|{
name|String
name|content
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
name|BREAKER_LIMIT
operator|.
name|bytesAsInt
argument_list|()
argument_list|)
decl_stmt|;
name|TestRestRequest
name|request
init|=
operator|new
name|TestRestRequest
argument_list|(
literal|"/"
argument_list|,
name|content
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AssertingChannel
name|channel
init|=
operator|new
name|AssertingChannel
argument_list|(
name|request
argument_list|,
literal|true
argument_list|,
name|RestStatus
operator|.
name|NOT_ACCEPTABLE
argument_list|)
decl_stmt|;
name|restController
operator|=
operator|new
name|RestController
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|HttpTransportSettings
operator|.
name|SETTING_HTTP_CONTENT_TYPE_REQUIRED
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|circuitBreakerService
argument_list|)
expr_stmt|;
name|restController
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/"
argument_list|,
parameter_list|(
name|r
parameter_list|,
name|c
parameter_list|,
name|client
parameter_list|)
lambda|->
name|c
operator|.
name|sendResponse
argument_list|(
operator|new
name|BytesRestResponse
argument_list|(
name|RestStatus
operator|.
name|OK
argument_list|,
name|BytesRestResponse
operator|.
name|TEXT_CONTENT_TYPE
argument_list|,
name|BytesArray
operator|.
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|channel
operator|.
name|sendResponseCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|restController
operator|.
name|dispatchRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
operator|new
name|ThreadContext
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|channel
operator|.
name|sendResponseCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDispatchDoesNotRequireContentTypeForRequestsWithoutContent
specifier|public
name|void
name|testDispatchDoesNotRequireContentTypeForRequestsWithoutContent
parameter_list|()
block|{
name|FakeRestRequest
name|fakeRestRequest
init|=
operator|new
name|FakeRestRequest
operator|.
name|Builder
argument_list|(
name|NamedXContentRegistry
operator|.
name|EMPTY
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AssertingChannel
name|channel
init|=
operator|new
name|AssertingChannel
argument_list|(
name|fakeRestRequest
argument_list|,
literal|true
argument_list|,
name|RestStatus
operator|.
name|OK
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|channel
operator|.
name|sendResponseCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|restController
operator|.
name|dispatchRequest
argument_list|(
name|fakeRestRequest
argument_list|,
name|channel
argument_list|,
operator|new
name|ThreadContext
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|channel
operator|.
name|sendResponseCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDispatchWorksWithPlainText
specifier|public
name|void
name|testDispatchWorksWithPlainText
parameter_list|()
block|{
name|String
name|content
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
name|BREAKER_LIMIT
operator|.
name|bytesAsInt
argument_list|()
argument_list|)
decl_stmt|;
name|FakeRestRequest
name|fakeRestRequest
init|=
operator|new
name|FakeRestRequest
operator|.
name|Builder
argument_list|(
name|NamedXContentRegistry
operator|.
name|EMPTY
argument_list|)
operator|.
name|withContent
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|content
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|withPath
argument_list|(
literal|"/foo"
argument_list|)
operator|.
name|withHeaders
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"Content-Type"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AssertingChannel
name|channel
init|=
operator|new
name|AssertingChannel
argument_list|(
name|fakeRestRequest
argument_list|,
literal|true
argument_list|,
name|RestStatus
operator|.
name|OK
argument_list|)
decl_stmt|;
name|restController
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/foo"
argument_list|,
operator|new
name|RestHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handleRequest
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|,
name|NodeClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|BytesRestResponse
argument_list|(
name|RestStatus
operator|.
name|OK
argument_list|,
name|BytesRestResponse
operator|.
name|TEXT_CONTENT_TYPE
argument_list|,
name|BytesArray
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsPlainText
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|channel
operator|.
name|sendResponseCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|restController
operator|.
name|dispatchRequest
argument_list|(
name|fakeRestRequest
argument_list|,
name|channel
argument_list|,
operator|new
name|ThreadContext
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|channel
operator|.
name|sendResponseCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertWarnings
argument_list|(
literal|"Plain text request bodies are deprecated. Use request parameters or body in a supported format."
argument_list|)
expr_stmt|;
block|}
DECL|method|testDispatchWorksWithAutoDetection
specifier|public
name|void
name|testDispatchWorksWithAutoDetection
parameter_list|()
block|{
name|FakeRestRequest
name|fakeRestRequest
init|=
operator|new
name|FakeRestRequest
operator|.
name|Builder
argument_list|(
name|NamedXContentRegistry
operator|.
name|EMPTY
argument_list|)
operator|.
name|withContent
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|withPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|withHeaders
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"Content-Type"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"application/x-www-form-urlencoded"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AssertingChannel
name|channel
init|=
operator|new
name|AssertingChannel
argument_list|(
name|fakeRestRequest
argument_list|,
literal|true
argument_list|,
name|RestStatus
operator|.
name|OK
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|channel
operator|.
name|sendResponseCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|restController
operator|.
name|dispatchRequest
argument_list|(
name|fakeRestRequest
argument_list|,
name|channel
argument_list|,
operator|new
name|ThreadContext
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|channel
operator|.
name|sendResponseCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertWarnings
argument_list|(
literal|"Content type detection for rest requests is deprecated. Specify the content type using the [Content-Type] header."
argument_list|)
expr_stmt|;
block|}
DECL|class|TestHttpServerTransport
specifier|private
specifier|static
specifier|final
class|class
name|TestHttpServerTransport
extends|extends
name|AbstractLifecycleComponent
implements|implements
name|HttpServerTransport
block|{
DECL|method|TestHttpServerTransport
name|TestHttpServerTransport
parameter_list|()
block|{
name|super
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|boundAddress
specifier|public
name|BoundTransportAddress
name|boundAddress
parameter_list|()
block|{
name|TransportAddress
name|transportAddress
init|=
name|buildNewFakeTransportAddress
argument_list|()
decl_stmt|;
return|return
operator|new
name|BoundTransportAddress
argument_list|(
operator|new
name|TransportAddress
index|[]
block|{
name|transportAddress
block|}
argument_list|,
name|transportAddress
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|info
specifier|public
name|HttpInfo
name|info
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|stats
specifier|public
name|HttpStats
name|stats
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|AssertingChannel
specifier|private
specifier|static
specifier|final
class|class
name|AssertingChannel
extends|extends
name|AbstractRestChannel
block|{
DECL|field|expectedStatus
specifier|private
specifier|final
name|RestStatus
name|expectedStatus
decl_stmt|;
DECL|field|sendResponseCalled
specifier|private
specifier|final
name|AtomicBoolean
name|sendResponseCalled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|AssertingChannel
specifier|protected
name|AssertingChannel
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|boolean
name|detailedErrorsEnabled
parameter_list|,
name|RestStatus
name|expectedStatus
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|,
name|detailedErrorsEnabled
argument_list|)
expr_stmt|;
name|this
operator|.
name|expectedStatus
operator|=
name|expectedStatus
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendResponse
specifier|public
name|void
name|sendResponse
parameter_list|(
name|RestResponse
name|response
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedStatus
argument_list|,
name|response
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|sendResponseCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ExceptionThrowingChannel
specifier|private
specifier|static
specifier|final
class|class
name|ExceptionThrowingChannel
extends|extends
name|AbstractRestChannel
block|{
DECL|method|ExceptionThrowingChannel
specifier|protected
name|ExceptionThrowingChannel
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|boolean
name|detailedErrorsEnabled
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|,
name|detailedErrorsEnabled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendResponse
specifier|public
name|void
name|sendResponse
parameter_list|(
name|RestResponse
name|response
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"always throwing an exception for testing"
argument_list|)
throw|;
block|}
block|}
DECL|class|TestRestRequest
specifier|private
specifier|static
specifier|final
class|class
name|TestRestRequest
extends|extends
name|RestRequest
block|{
DECL|field|content
specifier|private
specifier|final
name|BytesReference
name|content
decl_stmt|;
DECL|method|TestRestRequest
specifier|private
name|TestRestRequest
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|content
parameter_list|,
name|XContentType
name|xContentType
parameter_list|)
block|{
name|super
argument_list|(
name|NamedXContentRegistry
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|path
argument_list|,
name|xContentType
operator|==
literal|null
condition|?
name|Collections
operator|.
name|emptyMap
argument_list|()
else|:
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"Content-Type"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|xContentType
operator|.
name|mediaType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|content
operator|=
operator|new
name|BytesArray
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|method
specifier|public
name|Method
name|method
parameter_list|()
block|{
return|return
name|Method
operator|.
name|GET
return|;
block|}
annotation|@
name|Override
DECL|method|uri
specifier|public
name|String
name|uri
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hasContent
specifier|public
name|boolean
name|hasContent
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|content
specifier|public
name|BytesReference
name|content
parameter_list|()
block|{
return|return
name|content
return|;
block|}
block|}
block|}
end_class

end_unit

