begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchStatusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ResourceAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ShardSearchFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|FakeRestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|RemoteTransportException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchExceptionTests
operator|.
name|assertDeepEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|BytesRestResponseTests
specifier|public
class|class
name|BytesRestResponseTests
extends|extends
name|ESTestCase
block|{
DECL|class|UnknownException
class|class
name|UnknownException
extends|extends
name|Exception
block|{
DECL|method|UnknownException
name|UnknownException
parameter_list|(
specifier|final
name|String
name|message
parameter_list|,
specifier|final
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testWithHeaders
specifier|public
name|void
name|testWithHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|RestRequest
name|request
init|=
operator|new
name|FakeRestRequest
argument_list|()
decl_stmt|;
name|RestChannel
name|channel
init|=
name|randomBoolean
argument_list|()
condition|?
operator|new
name|DetailedExceptionRestChannel
argument_list|(
name|request
argument_list|)
else|:
operator|new
name|SimpleExceptionRestChannel
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|BytesRestResponse
name|response
init|=
operator|new
name|BytesRestResponse
argument_list|(
name|channel
argument_list|,
operator|new
name|WithHeadersException
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|response
operator|.
name|getHeaders
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|contains
argument_list|(
literal|"v11"
argument_list|,
literal|"v12"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|contains
argument_list|(
literal|"v21"
argument_list|,
literal|"v22"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleExceptionMessage
specifier|public
name|void
name|testSimpleExceptionMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|RestRequest
name|request
init|=
operator|new
name|FakeRestRequest
argument_list|()
decl_stmt|;
name|RestChannel
name|channel
init|=
operator|new
name|SimpleExceptionRestChannel
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Exception
name|t
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"an error occurred reading data"
argument_list|,
operator|new
name|FileNotFoundException
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
decl_stmt|;
name|BytesRestResponse
name|response
init|=
operator|new
name|BytesRestResponse
argument_list|(
name|channel
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|response
operator|.
name|content
argument_list|()
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|,
name|containsString
argument_list|(
literal|"ElasticsearchException[an error occurred reading data]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|,
name|not
argument_list|(
name|containsString
argument_list|(
literal|"FileNotFoundException"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|,
name|not
argument_list|(
name|containsString
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|,
name|not
argument_list|(
name|containsString
argument_list|(
literal|"error_trace"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDetailedExceptionMessage
specifier|public
name|void
name|testDetailedExceptionMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|RestRequest
name|request
init|=
operator|new
name|FakeRestRequest
argument_list|()
decl_stmt|;
name|RestChannel
name|channel
init|=
operator|new
name|DetailedExceptionRestChannel
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Exception
name|t
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"an error occurred reading data"
argument_list|,
operator|new
name|FileNotFoundException
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
decl_stmt|;
name|BytesRestResponse
name|response
init|=
operator|new
name|BytesRestResponse
argument_list|(
name|channel
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|response
operator|.
name|content
argument_list|()
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|,
name|containsString
argument_list|(
literal|"{\"type\":\"exception\",\"reason\":\"an error occurred reading data\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|,
name|containsString
argument_list|(
literal|"{\"type\":\"file_not_found_exception\",\"reason\":\"/foo/bar\"}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonElasticsearchExceptionIsNotShownAsSimpleMessage
specifier|public
name|void
name|testNonElasticsearchExceptionIsNotShownAsSimpleMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|RestRequest
name|request
init|=
operator|new
name|FakeRestRequest
argument_list|()
decl_stmt|;
name|RestChannel
name|channel
init|=
operator|new
name|SimpleExceptionRestChannel
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Exception
name|t
init|=
operator|new
name|UnknownException
argument_list|(
literal|"an error occurred reading data"
argument_list|,
operator|new
name|FileNotFoundException
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
decl_stmt|;
name|BytesRestResponse
name|response
init|=
operator|new
name|BytesRestResponse
argument_list|(
name|channel
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|response
operator|.
name|content
argument_list|()
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|,
name|not
argument_list|(
name|containsString
argument_list|(
literal|"UnknownException[an error occurred reading data]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|,
name|not
argument_list|(
name|containsString
argument_list|(
literal|"FileNotFoundException[/foo/bar]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|,
name|not
argument_list|(
name|containsString
argument_list|(
literal|"error_trace"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|,
name|containsString
argument_list|(
literal|"\"error\":\"No ElasticsearchException found\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testErrorTrace
specifier|public
name|void
name|testErrorTrace
parameter_list|()
throws|throws
name|Exception
block|{
name|RestRequest
name|request
init|=
operator|new
name|FakeRestRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|params
argument_list|()
operator|.
name|put
argument_list|(
literal|"error_trace"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|RestChannel
name|channel
init|=
operator|new
name|DetailedExceptionRestChannel
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Exception
name|t
init|=
operator|new
name|UnknownException
argument_list|(
literal|"an error occurred reading data"
argument_list|,
operator|new
name|FileNotFoundException
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
decl_stmt|;
name|BytesRestResponse
name|response
init|=
operator|new
name|BytesRestResponse
argument_list|(
name|channel
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|response
operator|.
name|content
argument_list|()
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|,
name|containsString
argument_list|(
literal|"\"type\":\"unknown_exception\",\"reason\":\"an error occurred reading data\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|,
name|containsString
argument_list|(
literal|"{\"type\":\"file_not_found_exception\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|,
name|containsString
argument_list|(
literal|"\"stack_trace\":\"[an error occurred reading data]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGuessRootCause
specifier|public
name|void
name|testGuessRootCause
parameter_list|()
throws|throws
name|IOException
block|{
name|RestRequest
name|request
init|=
operator|new
name|FakeRestRequest
argument_list|()
decl_stmt|;
name|RestChannel
name|channel
init|=
operator|new
name|DetailedExceptionRestChannel
argument_list|(
name|request
argument_list|)
decl_stmt|;
block|{
name|Exception
name|e
init|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"an error occurred reading data"
argument_list|,
operator|new
name|FileNotFoundException
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
decl_stmt|;
name|BytesRestResponse
name|response
init|=
operator|new
name|BytesRestResponse
argument_list|(
name|channel
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|response
operator|.
name|content
argument_list|()
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|,
name|containsString
argument_list|(
literal|"{\"root_cause\":[{\"type\":\"exception\",\"reason\":\"an error occurred reading data\"}]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|Exception
name|e
init|=
operator|new
name|FileNotFoundException
argument_list|(
literal|"/foo/bar"
argument_list|)
decl_stmt|;
name|BytesRestResponse
name|response
init|=
operator|new
name|BytesRestResponse
argument_list|(
name|channel
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|response
operator|.
name|content
argument_list|()
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|,
name|containsString
argument_list|(
literal|"{\"root_cause\":[{\"type\":\"file_not_found_exception\",\"reason\":\"/foo/bar\"}]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNullThrowable
specifier|public
name|void
name|testNullThrowable
parameter_list|()
throws|throws
name|Exception
block|{
name|RestRequest
name|request
init|=
operator|new
name|FakeRestRequest
argument_list|()
decl_stmt|;
name|RestChannel
name|channel
init|=
operator|new
name|SimpleExceptionRestChannel
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|BytesRestResponse
name|response
init|=
operator|new
name|BytesRestResponse
argument_list|(
name|channel
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|response
operator|.
name|content
argument_list|()
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|,
name|containsString
argument_list|(
literal|"\"error\":\"unknown\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|,
name|not
argument_list|(
name|containsString
argument_list|(
literal|"error_trace"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConvert
specifier|public
name|void
name|testConvert
parameter_list|()
throws|throws
name|IOException
block|{
name|RestRequest
name|request
init|=
operator|new
name|FakeRestRequest
argument_list|()
decl_stmt|;
name|RestChannel
name|channel
init|=
operator|new
name|DetailedExceptionRestChannel
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|ShardSearchFailure
name|failure
init|=
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|ParsingException
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"foobar"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node_1"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ShardSearchFailure
name|failure1
init|=
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|ParsingException
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"foobar"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|SearchShardTarget
argument_list|(
literal|"node_1"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|SearchPhaseExecutionException
name|ex
init|=
operator|new
name|SearchPhaseExecutionException
argument_list|(
literal|"search"
argument_list|,
literal|"all shards failed"
argument_list|,
operator|new
name|ShardSearchFailure
index|[]
block|{
name|failure
block|,
name|failure1
block|}
argument_list|)
decl_stmt|;
name|BytesRestResponse
name|response
init|=
operator|new
name|BytesRestResponse
argument_list|(
name|channel
argument_list|,
operator|new
name|RemoteTransportException
argument_list|(
literal|"foo"
argument_list|,
name|ex
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|response
operator|.
name|content
argument_list|()
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"{\"error\":{\"root_cause\":[{\"type\":\"parsing_exception\",\"reason\":\"foobar\",\"line\":1,\"col\":2}],\"type\":\"search_phase_execution_exception\",\"reason\":\"all shards failed\",\"phase\":\"search\",\"grouped\":true,\"failed_shards\":[{\"shard\":1,\"index\":\"foo\",\"node\":\"node_1\",\"reason\":{\"type\":\"parsing_exception\",\"reason\":\"foobar\",\"line\":1,\"col\":2}}]},\"status\":400}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|trim
argument_list|()
argument_list|,
name|text
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|stackTrace
init|=
name|ExceptionsHelper
operator|.
name|stackTrace
argument_list|(
name|ex
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|stackTrace
operator|.
name|contains
argument_list|(
literal|"Caused by: ParsingException[foobar]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testResponseWhenPathContainsEncodingError
specifier|public
name|void
name|testResponseWhenPathContainsEncodingError
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|path
init|=
literal|"%a"
decl_stmt|;
specifier|final
name|RestRequest
name|request
init|=
operator|new
name|RestRequest
argument_list|(
name|NamedXContentRegistry
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|path
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Method
name|method
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|uri
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasContent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesReference
name|content
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|header
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|RestUtils
operator|.
name|decodeComponent
argument_list|(
name|request
operator|.
name|rawPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RestChannel
name|channel
init|=
operator|new
name|DetailedExceptionRestChannel
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|// if we try to decode the path, this will throw an IllegalArgumentException again
specifier|final
name|BytesRestResponse
name|response
init|=
operator|new
name|BytesRestResponse
argument_list|(
name|channel
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
operator|.
name|content
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|content
init|=
name|response
operator|.
name|content
argument_list|()
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|,
name|containsString
argument_list|(
literal|"\"type\":\"illegal_argument_exception\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|,
name|containsString
argument_list|(
literal|"\"reason\":\"partial escape sequence at end of string: %a\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|,
name|containsString
argument_list|(
literal|"\"status\":"
operator|+
literal|400
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testResponseWhenInternalServerError
specifier|public
name|void
name|testResponseWhenInternalServerError
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|RestRequest
name|request
init|=
operator|new
name|FakeRestRequest
argument_list|()
decl_stmt|;
specifier|final
name|RestChannel
name|channel
init|=
operator|new
name|DetailedExceptionRestChannel
argument_list|(
name|request
argument_list|)
decl_stmt|;
specifier|final
name|BytesRestResponse
name|response
init|=
operator|new
name|BytesRestResponse
argument_list|(
name|channel
argument_list|,
operator|new
name|ElasticsearchException
argument_list|(
literal|"simulated"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
operator|.
name|content
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|content
init|=
name|response
operator|.
name|content
argument_list|()
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|,
name|containsString
argument_list|(
literal|"\"type\":\"exception\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|,
name|containsString
argument_list|(
literal|"\"reason\":\"simulated\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|,
name|containsString
argument_list|(
literal|"\"status\":"
operator|+
literal|500
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testErrorToAndFromXContent
specifier|public
name|void
name|testErrorToAndFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|detailed
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|Exception
name|original
decl_stmt|;
name|ElasticsearchException
name|cause
init|=
literal|null
decl_stmt|;
name|String
name|reason
decl_stmt|;
name|String
name|type
init|=
literal|"exception"
decl_stmt|;
name|RestStatus
name|status
init|=
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
decl_stmt|;
name|boolean
name|addHeadersOrMetadata
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|original
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"ElasticsearchException without cause"
argument_list|)
expr_stmt|;
if|if
condition|(
name|detailed
condition|)
block|{
name|addHeadersOrMetadata
operator|=
name|randomBoolean
argument_list|()
expr_stmt|;
name|reason
operator|=
literal|"ElasticsearchException without cause"
expr_stmt|;
block|}
else|else
block|{
name|reason
operator|=
literal|"ElasticsearchException[ElasticsearchException without cause]"
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
name|original
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"ElasticsearchException with a cause"
argument_list|,
operator|new
name|FileNotFoundException
argument_list|(
literal|"missing"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|detailed
condition|)
block|{
name|addHeadersOrMetadata
operator|=
name|randomBoolean
argument_list|()
expr_stmt|;
name|type
operator|=
literal|"exception"
expr_stmt|;
name|reason
operator|=
literal|"ElasticsearchException with a cause"
expr_stmt|;
name|cause
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=file_not_found_exception, reason=missing]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reason
operator|=
literal|"ElasticsearchException[ElasticsearchException with a cause]"
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|original
operator|=
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"ElasticsearchException with custom status"
argument_list|)
expr_stmt|;
name|status
operator|=
name|RestStatus
operator|.
name|NOT_FOUND
expr_stmt|;
if|if
condition|(
name|detailed
condition|)
block|{
name|addHeadersOrMetadata
operator|=
name|randomBoolean
argument_list|()
expr_stmt|;
name|type
operator|=
literal|"resource_not_found_exception"
expr_stmt|;
name|reason
operator|=
literal|"ElasticsearchException with custom status"
expr_stmt|;
block|}
else|else
block|{
name|reason
operator|=
literal|"ResourceNotFoundException[ElasticsearchException with custom status]"
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
name|TransportAddress
name|address
init|=
name|buildNewFakeTransportAddress
argument_list|()
decl_stmt|;
name|original
operator|=
operator|new
name|RemoteTransportException
argument_list|(
literal|"remote"
argument_list|,
name|address
argument_list|,
literal|"action"
argument_list|,
operator|new
name|ResourceAlreadyExistsException
argument_list|(
literal|"ElasticsearchWrapperException with a cause that has a custom status"
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|RestStatus
operator|.
name|BAD_REQUEST
expr_stmt|;
if|if
condition|(
name|detailed
condition|)
block|{
name|type
operator|=
literal|"resource_already_exists_exception"
expr_stmt|;
name|reason
operator|=
literal|"ElasticsearchWrapperException with a cause that has a custom status"
expr_stmt|;
block|}
else|else
block|{
name|reason
operator|=
literal|"RemoteTransportException[[remote]["
operator|+
name|address
operator|.
name|toString
argument_list|()
operator|+
literal|"][action]]"
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
name|original
operator|=
operator|new
name|RemoteTransportException
argument_list|(
literal|"ElasticsearchWrapperException with a cause that has a special treatment"
argument_list|,
operator|new
name|IllegalArgumentException
argument_list|(
literal|"wrong"
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|RestStatus
operator|.
name|BAD_REQUEST
expr_stmt|;
if|if
condition|(
name|detailed
condition|)
block|{
name|type
operator|=
literal|"illegal_argument_exception"
expr_stmt|;
name|reason
operator|=
literal|"wrong"
expr_stmt|;
block|}
else|else
block|{
name|reason
operator|=
literal|"RemoteTransportException[[ElasticsearchWrapperException with a cause that has a special treatment]]"
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
name|status
operator|=
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|original
operator|=
operator|new
name|ElasticsearchStatusException
argument_list|(
literal|"ElasticsearchStatusException with random status"
argument_list|,
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|detailed
condition|)
block|{
name|addHeadersOrMetadata
operator|=
name|randomBoolean
argument_list|()
expr_stmt|;
name|type
operator|=
literal|"status_exception"
expr_stmt|;
name|reason
operator|=
literal|"ElasticsearchStatusException with random status"
expr_stmt|;
block|}
else|else
block|{
name|reason
operator|=
literal|"ElasticsearchStatusException[ElasticsearchStatusException with random status]"
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Failed to generate random exception"
argument_list|)
throw|;
block|}
name|String
name|message
init|=
literal|"Elasticsearch exception [type="
operator|+
name|type
operator|+
literal|", reason="
operator|+
name|reason
operator|+
literal|"]"
decl_stmt|;
name|ElasticsearchStatusException
name|expected
init|=
operator|new
name|ElasticsearchStatusException
argument_list|(
name|message
argument_list|,
name|status
argument_list|,
name|cause
argument_list|)
decl_stmt|;
if|if
condition|(
name|addHeadersOrMetadata
condition|)
block|{
name|ElasticsearchException
name|originalException
init|=
operator|(
operator|(
name|ElasticsearchException
operator|)
name|original
operator|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|originalException
operator|.
name|addHeader
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addHeader
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|originalException
operator|.
name|addMetadata
argument_list|(
literal|"es.metadata_0"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addMetadata
argument_list|(
literal|"es.metadata_0"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|String
name|resourceType
init|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|resourceId
init|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|originalException
operator|.
name|setResources
argument_list|(
name|resourceType
argument_list|,
name|resourceId
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setResources
argument_list|(
name|resourceType
argument_list|,
name|resourceId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|originalException
operator|.
name|setIndex
argument_list|(
literal|"_index"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setIndex
argument_list|(
literal|"_index"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"format"
argument_list|,
name|xContentType
operator|.
name|mediaType
argument_list|()
argument_list|)
decl_stmt|;
name|RestRequest
name|request
init|=
operator|new
name|FakeRestRequest
operator|.
name|Builder
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|)
operator|.
name|withParams
argument_list|(
name|params
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RestChannel
name|channel
init|=
name|detailed
condition|?
operator|new
name|DetailedExceptionRestChannel
argument_list|(
name|request
argument_list|)
else|:
operator|new
name|SimpleExceptionRestChannel
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|BytesRestResponse
name|response
init|=
operator|new
name|BytesRestResponse
argument_list|(
name|channel
argument_list|,
name|original
argument_list|)
decl_stmt|;
name|ElasticsearchException
name|parsedError
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|response
operator|.
name|content
argument_list|()
argument_list|)
init|)
block|{
name|parsedError
operator|=
name|BytesRestResponse
operator|.
name|errorFromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
operator|.
name|status
argument_list|()
argument_list|,
name|parsedError
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertDeepEquals
argument_list|(
name|expected
argument_list|,
name|parsedError
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoErrorFromXContent
specifier|public
name|void
name|testNoErrorFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|xContent
argument_list|()
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"status"
argument_list|,
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|builder
operator|.
name|contentType
argument_list|()
operator|.
name|xContent
argument_list|()
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
init|)
block|{
name|BytesRestResponse
operator|.
name|errorFromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unable to parse elasticsearch status exception"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|WithHeadersException
specifier|public
specifier|static
class|class
name|WithHeadersException
extends|extends
name|ElasticsearchException
block|{
DECL|method|WithHeadersException
name|WithHeadersException
parameter_list|()
block|{
name|super
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|this
operator|.
name|addHeader
argument_list|(
literal|"n1"
argument_list|,
literal|"v11"
argument_list|,
literal|"v12"
argument_list|)
expr_stmt|;
name|this
operator|.
name|addHeader
argument_list|(
literal|"n2"
argument_list|,
literal|"v21"
argument_list|,
literal|"v22"
argument_list|)
expr_stmt|;
name|this
operator|.
name|addMetadata
argument_list|(
literal|"es.test"
argument_list|,
literal|"value1"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SimpleExceptionRestChannel
specifier|private
specifier|static
class|class
name|SimpleExceptionRestChannel
extends|extends
name|AbstractRestChannel
block|{
DECL|method|SimpleExceptionRestChannel
name|SimpleExceptionRestChannel
parameter_list|(
name|RestRequest
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendResponse
specifier|public
name|void
name|sendResponse
parameter_list|(
name|RestResponse
name|response
parameter_list|)
block|{         }
block|}
DECL|class|DetailedExceptionRestChannel
specifier|private
specifier|static
class|class
name|DetailedExceptionRestChannel
extends|extends
name|AbstractRestChannel
block|{
DECL|method|DetailedExceptionRestChannel
name|DetailedExceptionRestChannel
parameter_list|(
name|RestRequest
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendResponse
specifier|public
name|void
name|sendResponse
parameter_list|(
name|RestResponse
name|response
parameter_list|)
block|{         }
block|}
block|}
end_class

end_unit

