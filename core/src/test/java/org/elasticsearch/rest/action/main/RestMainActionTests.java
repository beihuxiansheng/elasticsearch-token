begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest.action.main
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|main
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Build
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|main
operator|.
name|MainResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|BytesRestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|FakeRestRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_class
DECL|class|RestMainActionTests
specifier|public
class|class
name|RestMainActionTests
extends|extends
name|ESTestCase
block|{
DECL|method|testHeadResponse
specifier|public
name|void
name|testHeadResponse
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|nodeName
init|=
literal|"node1"
decl_stmt|;
specifier|final
name|ClusterName
name|clusterName
init|=
operator|new
name|ClusterName
argument_list|(
literal|"cluster1"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|available
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|RestStatus
name|expectedStatus
init|=
name|available
condition|?
name|RestStatus
operator|.
name|OK
else|:
name|RestStatus
operator|.
name|SERVICE_UNAVAILABLE
decl_stmt|;
specifier|final
name|Version
name|version
init|=
name|Version
operator|.
name|CURRENT
decl_stmt|;
specifier|final
name|Build
name|build
init|=
name|Build
operator|.
name|CURRENT
decl_stmt|;
specifier|final
name|MainResponse
name|mainResponse
init|=
operator|new
name|MainResponse
argument_list|(
name|nodeName
argument_list|,
name|version
argument_list|,
name|clusterName
argument_list|,
name|build
argument_list|,
name|available
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|RestRequest
name|restRequest
init|=
operator|new
name|FakeRestRequest
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Method
name|method
parameter_list|()
block|{
return|return
name|Method
operator|.
name|HEAD
return|;
block|}
block|}
decl_stmt|;
name|BytesRestResponse
name|response
init|=
name|RestMainAction
operator|.
name|convertMainResponse
argument_list|(
name|mainResponse
argument_list|,
name|restRequest
argument_list|,
name|builder
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedStatus
argument_list|,
name|response
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|content
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetResponse
specifier|public
name|void
name|testGetResponse
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|nodeName
init|=
literal|"node1"
decl_stmt|;
specifier|final
name|ClusterName
name|clusterName
init|=
operator|new
name|ClusterName
argument_list|(
literal|"cluster1"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|available
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|RestStatus
name|expectedStatus
init|=
name|available
condition|?
name|RestStatus
operator|.
name|OK
else|:
name|RestStatus
operator|.
name|SERVICE_UNAVAILABLE
decl_stmt|;
specifier|final
name|Version
name|version
init|=
name|Version
operator|.
name|CURRENT
decl_stmt|;
specifier|final
name|Build
name|build
init|=
name|Build
operator|.
name|CURRENT
decl_stmt|;
specifier|final
name|boolean
name|prettyPrint
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|MainResponse
name|mainResponse
init|=
operator|new
name|MainResponse
argument_list|(
name|nodeName
argument_list|,
name|version
argument_list|,
name|clusterName
argument_list|,
name|build
argument_list|,
name|available
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|prettyPrint
operator|==
literal|false
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
literal|"pretty"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|prettyPrint
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RestRequest
name|restRequest
init|=
operator|new
name|FakeRestRequest
operator|.
name|Builder
argument_list|()
operator|.
name|withParams
argument_list|(
name|params
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|BytesRestResponse
name|response
init|=
name|RestMainAction
operator|.
name|convertMainResponse
argument_list|(
name|mainResponse
argument_list|,
name|restRequest
argument_list|,
name|builder
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedStatus
argument_list|,
name|response
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|content
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|XContentBuilder
name|responseBuilder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|prettyPrint
condition|)
block|{
comment|// do this to mimic what the rest layer does
name|responseBuilder
operator|.
name|prettyPrint
argument_list|()
operator|.
name|lfAtEnd
argument_list|()
expr_stmt|;
block|}
name|mainResponse
operator|.
name|toXContent
argument_list|(
name|responseBuilder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|BytesReference
name|xcontentBytes
init|=
name|responseBuilder
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|BytesReference
operator|.
name|Helper
operator|.
name|bytesEqual
argument_list|(
name|xcontentBytes
argument_list|,
name|response
operator|.
name|content
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

