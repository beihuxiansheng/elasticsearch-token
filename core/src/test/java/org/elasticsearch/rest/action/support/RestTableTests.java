begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest.action.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|AbstractRestChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|FakeRestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|support
operator|.
name|RestTable
operator|.
name|buildDisplayHeaders
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|support
operator|.
name|RestTable
operator|.
name|buildResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasItem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_class
DECL|class|RestTableTests
specifier|public
class|class
name|RestTableTests
extends|extends
name|ESTestCase
block|{
DECL|field|APPLICATION_JSON
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_JSON
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|mediaType
argument_list|()
decl_stmt|;
DECL|field|APPLICATION_YAML
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_YAML
init|=
name|XContentType
operator|.
name|YAML
operator|.
name|mediaType
argument_list|()
decl_stmt|;
DECL|field|APPLICATION_SMILE
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_SMILE
init|=
name|XContentType
operator|.
name|SMILE
operator|.
name|mediaType
argument_list|()
decl_stmt|;
DECL|field|APPLICATION_CBOR
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_CBOR
init|=
name|XContentType
operator|.
name|CBOR
operator|.
name|mediaType
argument_list|()
decl_stmt|;
DECL|field|CONTENT_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT_TYPE
init|=
literal|"Content-Type"
decl_stmt|;
DECL|field|ACCEPT
specifier|private
specifier|static
specifier|final
name|String
name|ACCEPT
init|=
literal|"Accept"
decl_stmt|;
DECL|field|TEXT_PLAIN
specifier|private
specifier|static
specifier|final
name|String
name|TEXT_PLAIN
init|=
literal|"text/plain; charset=UTF-8"
decl_stmt|;
DECL|field|TEXT_TABLE_BODY
specifier|private
specifier|static
specifier|final
name|String
name|TEXT_TABLE_BODY
init|=
literal|"foo foo foo foo foo foo\n"
decl_stmt|;
DECL|field|JSON_TABLE_BODY
specifier|private
specifier|static
specifier|final
name|String
name|JSON_TABLE_BODY
init|=
literal|"[{\"bulk.foo\":\"foo\",\"bulk.bar\":\"foo\",\"aliasedBulk\":\"foo\","
operator|+
literal|"\"aliasedSecondBulk\":\"foo\",\"unmatched\":\"foo\","
operator|+
literal|"\"invalidAliasesBulk\":\"foo\"}]"
decl_stmt|;
DECL|field|YAML_TABLE_BODY
specifier|private
specifier|static
specifier|final
name|String
name|YAML_TABLE_BODY
init|=
literal|"---\n"
operator|+
literal|"- bulk.foo: \"foo\"\n"
operator|+
literal|"  bulk.bar: \"foo\"\n"
operator|+
literal|"  aliasedBulk: \"foo\"\n"
operator|+
literal|"  aliasedSecondBulk: \"foo\"\n"
operator|+
literal|"  unmatched: \"foo\"\n"
operator|+
literal|"  invalidAliasesBulk: \"foo\"\n"
decl_stmt|;
DECL|field|table
specifier|private
name|Table
name|table
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
DECL|field|restRequest
specifier|private
name|FakeRestRequest
name|restRequest
init|=
operator|new
name|FakeRestRequest
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|table
operator|.
name|startHeaders
argument_list|()
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"bulk.foo"
argument_list|,
literal|"alias:f;desc:foo"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"bulk.bar"
argument_list|,
literal|"alias:b;desc:bar"
argument_list|)
expr_stmt|;
comment|// should be matched as well due to the aliases
name|table
operator|.
name|addCell
argument_list|(
literal|"aliasedBulk"
argument_list|,
literal|"alias:bulkWhatever;desc:bar"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"aliasedSecondBulk"
argument_list|,
literal|"alias:foobar,bulkolicious,bulkotastic;desc:bar"
argument_list|)
expr_stmt|;
comment|// no match
name|table
operator|.
name|addCell
argument_list|(
literal|"unmatched"
argument_list|,
literal|"alias:un.matched;desc:bar"
argument_list|)
expr_stmt|;
comment|// invalid alias
name|table
operator|.
name|addCell
argument_list|(
literal|"invalidAliasesBulk"
argument_list|,
literal|"alias:,,,;desc:bar"
argument_list|)
expr_stmt|;
name|table
operator|.
name|endHeaders
argument_list|()
expr_stmt|;
block|}
DECL|method|testThatDisplayHeadersSupportWildcards
specifier|public
name|void
name|testThatDisplayHeadersSupportWildcards
parameter_list|()
throws|throws
name|Exception
block|{
name|restRequest
operator|.
name|params
argument_list|()
operator|.
name|put
argument_list|(
literal|"h"
argument_list|,
literal|"bulk*"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RestTable
operator|.
name|DisplayHeader
argument_list|>
name|headers
init|=
name|buildDisplayHeaders
argument_list|(
name|table
argument_list|,
name|restRequest
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|headerNames
init|=
name|getHeaderNames
argument_list|(
name|headers
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|headerNames
argument_list|,
name|contains
argument_list|(
literal|"bulk.foo"
argument_list|,
literal|"bulk.bar"
argument_list|,
literal|"aliasedBulk"
argument_list|,
literal|"aliasedSecondBulk"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|headerNames
argument_list|,
name|not
argument_list|(
name|hasItem
argument_list|(
literal|"unmatched"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatDisplayHeadersAreNotAddedTwice
specifier|public
name|void
name|testThatDisplayHeadersAreNotAddedTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|restRequest
operator|.
name|params
argument_list|()
operator|.
name|put
argument_list|(
literal|"h"
argument_list|,
literal|"nonexistent,bulk*,bul*"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RestTable
operator|.
name|DisplayHeader
argument_list|>
name|headers
init|=
name|buildDisplayHeaders
argument_list|(
name|table
argument_list|,
name|restRequest
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|headerNames
init|=
name|getHeaderNames
argument_list|(
name|headers
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|headerNames
argument_list|,
name|contains
argument_list|(
literal|"bulk.foo"
argument_list|,
literal|"bulk.bar"
argument_list|,
literal|"aliasedBulk"
argument_list|,
literal|"aliasedSecondBulk"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|headerNames
argument_list|,
name|not
argument_list|(
name|hasItem
argument_list|(
literal|"unmatched"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatWeUseTheAcceptHeaderJson
specifier|public
name|void
name|testThatWeUseTheAcceptHeaderJson
parameter_list|()
throws|throws
name|Exception
block|{
name|assertResponse
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ACCEPT
argument_list|,
name|APPLICATION_JSON
argument_list|)
argument_list|,
name|APPLICATION_JSON
argument_list|,
name|JSON_TABLE_BODY
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatWeUseTheAcceptHeaderYaml
specifier|public
name|void
name|testThatWeUseTheAcceptHeaderYaml
parameter_list|()
throws|throws
name|Exception
block|{
name|assertResponse
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ACCEPT
argument_list|,
name|APPLICATION_YAML
argument_list|)
argument_list|,
name|APPLICATION_YAML
argument_list|,
name|YAML_TABLE_BODY
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatWeUseTheAcceptHeaderSmile
specifier|public
name|void
name|testThatWeUseTheAcceptHeaderSmile
parameter_list|()
throws|throws
name|Exception
block|{
name|assertResponseContentType
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ACCEPT
argument_list|,
name|APPLICATION_SMILE
argument_list|)
argument_list|,
name|APPLICATION_SMILE
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatWeUseTheAcceptHeaderCbor
specifier|public
name|void
name|testThatWeUseTheAcceptHeaderCbor
parameter_list|()
throws|throws
name|Exception
block|{
name|assertResponseContentType
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ACCEPT
argument_list|,
name|APPLICATION_CBOR
argument_list|)
argument_list|,
name|APPLICATION_CBOR
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatWeUseTheAcceptHeaderText
specifier|public
name|void
name|testThatWeUseTheAcceptHeaderText
parameter_list|()
throws|throws
name|Exception
block|{
name|assertResponse
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ACCEPT
argument_list|,
name|TEXT_PLAIN
argument_list|)
argument_list|,
name|TEXT_PLAIN
argument_list|,
name|TEXT_TABLE_BODY
argument_list|)
expr_stmt|;
block|}
DECL|method|testIgnoreContentType
specifier|public
name|void
name|testIgnoreContentType
parameter_list|()
throws|throws
name|Exception
block|{
name|assertResponse
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|CONTENT_TYPE
argument_list|,
name|APPLICATION_JSON
argument_list|)
argument_list|,
name|TEXT_PLAIN
argument_list|,
name|TEXT_TABLE_BODY
argument_list|)
expr_stmt|;
block|}
DECL|method|assertResponseContentType
specifier|private
name|RestResponse
name|assertResponseContentType
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|String
name|mediaType
parameter_list|)
throws|throws
name|Exception
block|{
name|FakeRestRequest
name|requestWithAcceptHeader
init|=
operator|new
name|FakeRestRequest
argument_list|(
name|headers
argument_list|)
decl_stmt|;
name|table
operator|.
name|startRow
argument_list|()
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|table
operator|.
name|endRow
argument_list|()
expr_stmt|;
name|RestResponse
name|response
init|=
name|buildResponse
argument_list|(
name|table
argument_list|,
operator|new
name|AbstractRestChannel
argument_list|(
name|requestWithAcceptHeader
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|sendResponse
parameter_list|(
name|RestResponse
name|response
parameter_list|)
block|{             }
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|contentType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|mediaType
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|method|assertResponse
specifier|private
name|void
name|assertResponse
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|String
name|mediaType
parameter_list|,
name|String
name|body
parameter_list|)
throws|throws
name|Exception
block|{
name|RestResponse
name|response
init|=
name|assertResponseContentType
argument_list|(
name|headers
argument_list|,
name|mediaType
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|content
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|body
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getHeaderNames
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getHeaderNames
parameter_list|(
name|List
argument_list|<
name|RestTable
operator|.
name|DisplayHeader
argument_list|>
name|headers
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|headerNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RestTable
operator|.
name|DisplayHeader
name|header
range|:
name|headers
control|)
block|{
name|headerNames
operator|.
name|add
argument_list|(
name|header
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|headerNames
return|;
block|}
block|}
end_class

end_unit

