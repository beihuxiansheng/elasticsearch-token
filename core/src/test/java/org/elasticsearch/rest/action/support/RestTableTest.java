begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest.action.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|FakeRestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|support
operator|.
name|RestTable
operator|.
name|buildDisplayHeaders
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
DECL|class|RestTableTest
specifier|public
class|class
name|RestTableTest
extends|extends
name|ElasticsearchTestCase
block|{
DECL|field|table
specifier|private
name|Table
name|table
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
DECL|field|restRequest
specifier|private
name|FakeRestRequest
name|restRequest
init|=
operator|new
name|FakeRestRequest
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|table
operator|.
name|startHeaders
argument_list|()
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"bulk.foo"
argument_list|,
literal|"alias:f;desc:foo"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"bulk.bar"
argument_list|,
literal|"alias:b;desc:bar"
argument_list|)
expr_stmt|;
comment|// should be matched as well due to the aliases
name|table
operator|.
name|addCell
argument_list|(
literal|"aliasedBulk"
argument_list|,
literal|"alias:bulkWhatever;desc:bar"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
literal|"aliasedSecondBulk"
argument_list|,
literal|"alias:foobar,bulkolicious,bulkotastic;desc:bar"
argument_list|)
expr_stmt|;
comment|// no match
name|table
operator|.
name|addCell
argument_list|(
literal|"unmatched"
argument_list|,
literal|"alias:un.matched;desc:bar"
argument_list|)
expr_stmt|;
comment|// invalid alias
name|table
operator|.
name|addCell
argument_list|(
literal|"invalidAliasesBulk"
argument_list|,
literal|"alias:,,,;desc:bar"
argument_list|)
expr_stmt|;
name|table
operator|.
name|endHeaders
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatDisplayHeadersSupportWildcards
specifier|public
name|void
name|testThatDisplayHeadersSupportWildcards
parameter_list|()
throws|throws
name|Exception
block|{
name|restRequest
operator|.
name|params
argument_list|()
operator|.
name|put
argument_list|(
literal|"h"
argument_list|,
literal|"bulk*"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RestTable
operator|.
name|DisplayHeader
argument_list|>
name|headers
init|=
name|buildDisplayHeaders
argument_list|(
name|table
argument_list|,
name|restRequest
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|headerNames
init|=
name|getHeaderNames
argument_list|(
name|headers
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|headerNames
argument_list|,
name|contains
argument_list|(
literal|"bulk.foo"
argument_list|,
literal|"bulk.bar"
argument_list|,
literal|"aliasedBulk"
argument_list|,
literal|"aliasedSecondBulk"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|headerNames
argument_list|,
name|not
argument_list|(
name|hasItem
argument_list|(
literal|"unmatched"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatDisplayHeadersAreNotAddedTwice
specifier|public
name|void
name|testThatDisplayHeadersAreNotAddedTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|restRequest
operator|.
name|params
argument_list|()
operator|.
name|put
argument_list|(
literal|"h"
argument_list|,
literal|"nonexistent,bulk*,bul*"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RestTable
operator|.
name|DisplayHeader
argument_list|>
name|headers
init|=
name|buildDisplayHeaders
argument_list|(
name|table
argument_list|,
name|restRequest
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|headerNames
init|=
name|getHeaderNames
argument_list|(
name|headers
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|headerNames
argument_list|,
name|contains
argument_list|(
literal|"bulk.foo"
argument_list|,
literal|"bulk.bar"
argument_list|,
literal|"aliasedBulk"
argument_list|,
literal|"aliasedSecondBulk"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|headerNames
argument_list|,
name|not
argument_list|(
name|hasItem
argument_list|(
literal|"unmatched"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getHeaderNames
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getHeaderNames
parameter_list|(
name|List
argument_list|<
name|RestTable
operator|.
name|DisplayHeader
argument_list|>
name|headers
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|headerNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RestTable
operator|.
name|DisplayHeader
name|header
range|:
name|headers
control|)
block|{
name|headerNames
operator|.
name|add
argument_list|(
name|header
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|headerNames
return|;
block|}
block|}
end_class

end_unit

