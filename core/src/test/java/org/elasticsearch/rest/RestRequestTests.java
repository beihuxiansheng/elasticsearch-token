begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_class
DECL|class|RestRequestTests
specifier|public
class|class
name|RestRequestTests
extends|extends
name|ESTestCase
block|{
DECL|method|testContentParser
specifier|public
name|void
name|testContentParser
parameter_list|()
throws|throws
name|IOException
block|{
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|ContentRestRequest
argument_list|(
literal|""
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|contentParser
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Body required"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|ContentRestRequest
argument_list|(
literal|""
argument_list|,
name|singletonMap
argument_list|(
literal|"source"
argument_list|,
literal|"{}"
argument_list|)
argument_list|)
operator|.
name|contentParser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Body required"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|ContentRestRequest
argument_list|(
literal|"{}"
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|contentParser
argument_list|()
operator|.
name|map
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testApplyContentParser
specifier|public
name|void
name|testApplyContentParser
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|ContentRestRequest
argument_list|(
literal|""
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|applyContentParser
argument_list|(
name|p
lambda|->
name|fail
argument_list|(
literal|"Shouldn't have been called"
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|ContentRestRequest
argument_list|(
literal|""
argument_list|,
name|singletonMap
argument_list|(
literal|"source"
argument_list|,
literal|"{}"
argument_list|)
argument_list|)
operator|.
name|applyContentParser
argument_list|(
name|p
lambda|->
name|fail
argument_list|(
literal|"Shouldn't have been called"
argument_list|)
argument_list|)
expr_stmt|;
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|source
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
operator|new
name|ContentRestRequest
argument_list|(
literal|"{}"
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|applyContentParser
argument_list|(
name|p
lambda|->
name|source
operator|.
name|set
argument_list|(
name|p
operator|.
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|emptyMap
argument_list|()
argument_list|,
name|source
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testContentOrSourceParam
specifier|public
name|void
name|testContentOrSourceParam
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|BytesArray
operator|.
name|EMPTY
argument_list|,
operator|new
name|ContentRestRequest
argument_list|(
literal|""
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|contentOrSourceParam
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"stuff"
argument_list|)
argument_list|,
operator|new
name|ContentRestRequest
argument_list|(
literal|"stuff"
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|contentOrSourceParam
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"stuff"
argument_list|)
argument_list|,
operator|new
name|ContentRestRequest
argument_list|(
literal|"stuff"
argument_list|,
name|singletonMap
argument_list|(
literal|"source"
argument_list|,
literal|"stuff2"
argument_list|)
argument_list|)
operator|.
name|contentOrSourceParam
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"stuff"
argument_list|)
argument_list|,
operator|new
name|ContentRestRequest
argument_list|(
literal|""
argument_list|,
name|singletonMap
argument_list|(
literal|"source"
argument_list|,
literal|"stuff"
argument_list|)
argument_list|)
operator|.
name|contentOrSourceParam
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasContentOrSourceParam
specifier|public
name|void
name|testHasContentOrSourceParam
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
operator|new
name|ContentRestRequest
argument_list|(
literal|""
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|hasContentOrSourceParam
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|new
name|ContentRestRequest
argument_list|(
literal|"stuff"
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|hasContentOrSourceParam
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|new
name|ContentRestRequest
argument_list|(
literal|"stuff"
argument_list|,
name|singletonMap
argument_list|(
literal|"source"
argument_list|,
literal|"stuff2"
argument_list|)
argument_list|)
operator|.
name|hasContentOrSourceParam
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|new
name|ContentRestRequest
argument_list|(
literal|""
argument_list|,
name|singletonMap
argument_list|(
literal|"source"
argument_list|,
literal|"stuff"
argument_list|)
argument_list|)
operator|.
name|hasContentOrSourceParam
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testContentOrSourceParamParser
specifier|public
name|void
name|testContentOrSourceParamParser
parameter_list|()
throws|throws
name|IOException
block|{
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|ContentRestRequest
argument_list|(
literal|""
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|contentOrSourceParamParser
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Body required"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|ContentRestRequest
argument_list|(
literal|"{}"
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|contentOrSourceParamParser
argument_list|()
operator|.
name|map
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|ContentRestRequest
argument_list|(
literal|"{}"
argument_list|,
name|singletonMap
argument_list|(
literal|"source"
argument_list|,
literal|"stuff2"
argument_list|)
argument_list|)
operator|.
name|contentOrSourceParamParser
argument_list|()
operator|.
name|map
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|ContentRestRequest
argument_list|(
literal|""
argument_list|,
name|singletonMap
argument_list|(
literal|"source"
argument_list|,
literal|"{}"
argument_list|)
argument_list|)
operator|.
name|contentOrSourceParamParser
argument_list|()
operator|.
name|map
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testWithContentOrSourceParamParserOrNull
specifier|public
name|void
name|testWithContentOrSourceParamParserOrNull
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|ContentRestRequest
argument_list|(
literal|""
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|withContentOrSourceParamParserOrNull
argument_list|(
name|parser
lambda|->
name|assertNull
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|ContentRestRequest
argument_list|(
literal|"{}"
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|withContentOrSourceParamParserOrNull
argument_list|(
name|parser
lambda|->
name|assertEquals
argument_list|(
name|emptyMap
argument_list|()
argument_list|,
name|parser
operator|.
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|ContentRestRequest
argument_list|(
literal|"{}"
argument_list|,
name|singletonMap
argument_list|(
literal|"source"
argument_list|,
literal|"stuff2"
argument_list|)
argument_list|)
operator|.
name|withContentOrSourceParamParserOrNull
argument_list|(
name|parser
lambda|->
name|assertEquals
argument_list|(
name|emptyMap
argument_list|()
argument_list|,
name|parser
operator|.
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|ContentRestRequest
argument_list|(
literal|""
argument_list|,
name|singletonMap
argument_list|(
literal|"source"
argument_list|,
literal|"{}"
argument_list|)
argument_list|)
operator|.
name|withContentOrSourceParamParserOrNull
argument_list|(
name|parser
lambda|->
name|assertEquals
argument_list|(
name|emptyMap
argument_list|()
argument_list|,
name|parser
operator|.
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|ContentRestRequest
specifier|private
specifier|static
specifier|final
class|class
name|ContentRestRequest
extends|extends
name|RestRequest
block|{
DECL|field|content
specifier|private
specifier|final
name|BytesArray
name|content
decl_stmt|;
DECL|method|ContentRestRequest
specifier|public
name|ContentRestRequest
parameter_list|(
name|String
name|content
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
name|super
argument_list|(
name|params
argument_list|,
literal|"not used by this test"
argument_list|)
expr_stmt|;
name|this
operator|.
name|content
operator|=
operator|new
name|BytesArray
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasContent
specifier|public
name|boolean
name|hasContent
parameter_list|()
block|{
return|return
name|Strings
operator|.
name|hasLength
argument_list|(
name|content
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|content
specifier|public
name|BytesReference
name|content
parameter_list|()
block|{
return|return
name|content
return|;
block|}
annotation|@
name|Override
DECL|method|uri
specifier|public
name|String
name|uri
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not used by this test"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|method
specifier|public
name|Method
name|method
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not used by this test"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|headers
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not used by this test"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|header
specifier|public
name|String
name|header
parameter_list|(
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not used by this test"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

