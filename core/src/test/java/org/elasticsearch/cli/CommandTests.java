begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cli
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_class
DECL|class|CommandTests
specifier|public
class|class
name|CommandTests
extends|extends
name|ESTestCase
block|{
DECL|class|UserErrorCommand
specifier|static
class|class
name|UserErrorCommand
extends|extends
name|Command
block|{
DECL|method|UserErrorCommand
name|UserErrorCommand
parameter_list|()
block|{
name|super
argument_list|(
literal|"Throws a user error"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|protected
name|void
name|execute
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|OptionSet
name|options
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UserError
argument_list|(
name|ExitCodes
operator|.
name|DATA_ERROR
argument_list|,
literal|"Bad input"
argument_list|)
throw|;
block|}
block|}
DECL|class|UsageErrorCommand
specifier|static
class|class
name|UsageErrorCommand
extends|extends
name|Command
block|{
DECL|method|UsageErrorCommand
name|UsageErrorCommand
parameter_list|()
block|{
name|super
argument_list|(
literal|"Throws a usage error"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|protected
name|void
name|execute
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|OptionSet
name|options
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UserError
argument_list|(
name|ExitCodes
operator|.
name|USAGE
argument_list|,
literal|"something was no good"
argument_list|)
throw|;
block|}
block|}
DECL|class|NoopCommand
specifier|static
class|class
name|NoopCommand
extends|extends
name|Command
block|{
DECL|field|executed
name|boolean
name|executed
init|=
literal|false
decl_stmt|;
DECL|method|NoopCommand
name|NoopCommand
parameter_list|()
block|{
name|super
argument_list|(
literal|"Does nothing"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|protected
name|void
name|execute
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|OptionSet
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|terminal
operator|.
name|println
argument_list|(
literal|"Normal output"
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|println
argument_list|(
name|Terminal
operator|.
name|Verbosity
operator|.
name|SILENT
argument_list|,
literal|"Silent output"
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|println
argument_list|(
name|Terminal
operator|.
name|Verbosity
operator|.
name|VERBOSE
argument_list|,
literal|"Verbose output"
argument_list|)
expr_stmt|;
name|executed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|printAdditionalHelp
specifier|protected
name|void
name|printAdditionalHelp
parameter_list|(
name|Terminal
name|terminal
parameter_list|)
block|{
name|terminal
operator|.
name|println
argument_list|(
literal|"Some extra help"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testHelp
specifier|public
name|void
name|testHelp
parameter_list|()
throws|throws
name|Exception
block|{
name|NoopCommand
name|command
init|=
operator|new
name|NoopCommand
argument_list|()
decl_stmt|;
name|MockTerminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-h"
block|}
decl_stmt|;
name|int
name|status
init|=
name|command
operator|.
name|main
argument_list|(
name|args
argument_list|,
name|terminal
argument_list|)
decl_stmt|;
name|String
name|output
init|=
name|terminal
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|output
argument_list|,
name|ExitCodes
operator|.
name|OK
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
literal|"Does nothing"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
literal|"Some extra help"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|command
operator|.
name|executed
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|NoopCommand
argument_list|()
expr_stmt|;
name|String
index|[]
name|args2
init|=
block|{
literal|"--help"
block|}
decl_stmt|;
name|status
operator|=
name|command
operator|.
name|main
argument_list|(
name|args2
argument_list|,
name|terminal
argument_list|)
expr_stmt|;
name|output
operator|=
name|terminal
operator|.
name|getOutput
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|output
argument_list|,
name|ExitCodes
operator|.
name|OK
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
literal|"Does nothing"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
literal|"Some extra help"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|command
operator|.
name|executed
argument_list|)
expr_stmt|;
block|}
DECL|method|testVerbositySilentAndVerbose
specifier|public
name|void
name|testVerbositySilentAndVerbose
parameter_list|()
throws|throws
name|Exception
block|{
name|MockTerminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
name|NoopCommand
name|command
init|=
operator|new
name|NoopCommand
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-v"
block|,
literal|"-s"
block|}
decl_stmt|;
name|UserError
name|e
init|=
name|expectThrows
argument_list|(
name|UserError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|command
operator|.
name|mainWithoutErrorHandling
argument_list|(
name|args
argument_list|,
name|terminal
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Cannot specify -s and -v together"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSilentVerbosity
specifier|public
name|void
name|testSilentVerbosity
parameter_list|()
throws|throws
name|Exception
block|{
name|MockTerminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
name|NoopCommand
name|command
init|=
operator|new
name|NoopCommand
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-s"
block|}
decl_stmt|;
name|command
operator|.
name|main
argument_list|(
name|args
argument_list|,
name|terminal
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|terminal
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
literal|"Silent output"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNormalVerbosity
specifier|public
name|void
name|testNormalVerbosity
parameter_list|()
throws|throws
name|Exception
block|{
name|MockTerminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
name|terminal
operator|.
name|setVerbosity
argument_list|(
name|Terminal
operator|.
name|Verbosity
operator|.
name|SILENT
argument_list|)
expr_stmt|;
name|NoopCommand
name|command
init|=
operator|new
name|NoopCommand
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{}
decl_stmt|;
name|command
operator|.
name|main
argument_list|(
name|args
argument_list|,
name|terminal
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|terminal
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
literal|"Normal output"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testVerboseVerbosity
specifier|public
name|void
name|testVerboseVerbosity
parameter_list|()
throws|throws
name|Exception
block|{
name|MockTerminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
name|NoopCommand
name|command
init|=
operator|new
name|NoopCommand
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-v"
block|}
decl_stmt|;
name|command
operator|.
name|main
argument_list|(
name|args
argument_list|,
name|terminal
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|terminal
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
literal|"Verbose output"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUserError
specifier|public
name|void
name|testUserError
parameter_list|()
throws|throws
name|Exception
block|{
name|MockTerminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
name|UserErrorCommand
name|command
init|=
operator|new
name|UserErrorCommand
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{}
decl_stmt|;
name|int
name|status
init|=
name|command
operator|.
name|main
argument_list|(
name|args
argument_list|,
name|terminal
argument_list|)
decl_stmt|;
name|String
name|output
init|=
name|terminal
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|output
argument_list|,
name|ExitCodes
operator|.
name|DATA_ERROR
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
literal|"ERROR: Bad input"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUsageError
specifier|public
name|void
name|testUsageError
parameter_list|()
throws|throws
name|Exception
block|{
name|MockTerminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
name|UsageErrorCommand
name|command
init|=
operator|new
name|UsageErrorCommand
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{}
decl_stmt|;
name|int
name|status
init|=
name|command
operator|.
name|main
argument_list|(
name|args
argument_list|,
name|terminal
argument_list|)
decl_stmt|;
name|String
name|output
init|=
name|terminal
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|output
argument_list|,
name|ExitCodes
operator|.
name|USAGE
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
literal|"Throws a usage error"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
literal|"ERROR: something was no good"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

