begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
operator|.
name|MapParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
operator|.
name|ScriptParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptParameterParser
operator|.
name|ScriptParameterValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|ScriptParameterParserTests
specifier|public
class|class
name|ScriptParameterParserTests
extends|extends
name|ESTestCase
block|{
annotation|@
name|Test
DECL|method|testTokenDefaultInline
specifier|public
name|void
name|testTokenDefaultInline
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"script\" : \"scriptValue\" }"
argument_list|)
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|=
operator|new
name|ScriptParameterParser
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|=
operator|new
name|ScriptParameterParser
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenDefaultFile
specifier|public
name|void
name|testTokenDefaultFile
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"script_file\" : \"scriptValue\" }"
argument_list|)
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"scriptFile\" : \"scriptValue\" }"
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|paramParser
operator|=
operator|new
name|ScriptParameterParser
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenDefaultIndexed
specifier|public
name|void
name|testTokenDefaultIndexed
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"script_id\" : \"scriptValue\" }"
argument_list|)
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"scriptId\" : \"scriptValue\" }"
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|paramParser
operator|=
operator|new
name|ScriptParameterParser
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenDefaultNotFound
specifier|public
name|void
name|testTokenDefaultNotFound
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"foo\" : \"bar\" }"
argument_list|)
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getDefaultScriptParameterValue
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"script"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenSingleParameter
specifier|public
name|void
name|testTokenSingleParameter
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"foo\" : \"scriptValue\" }"
argument_list|)
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenSingleParameterFile
specifier|public
name|void
name|testTokenSingleParameterFile
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"foo_file\" : \"scriptValue\" }"
argument_list|)
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenSingleParameterIndexed
specifier|public
name|void
name|testTokenSingleParameterIndexed
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"foo_id\" : \"scriptValue\" }"
argument_list|)
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testTokenSingleParameterDelcaredTwiceInlineFile
specifier|public
name|void
name|testTokenSingleParameterDelcaredTwiceInlineFile
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"foo\" : \"scriptValue\", \"foo_file\" : \"scriptValue\" }"
argument_list|)
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testTokenSingleParameterDelcaredTwiceInlineIndexed
specifier|public
name|void
name|testTokenSingleParameterDelcaredTwiceInlineIndexed
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"foo\" : \"scriptValue\", \"foo_id\" : \"scriptValue\" }"
argument_list|)
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testTokenSingleParameterDelcaredTwiceFileInline
specifier|public
name|void
name|testTokenSingleParameterDelcaredTwiceFileInline
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"foo_file\" : \"scriptValue\", \"foo\" : \"scriptValue\" }"
argument_list|)
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testTokenSingleParameterDelcaredTwiceFileIndexed
specifier|public
name|void
name|testTokenSingleParameterDelcaredTwiceFileIndexed
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"foo_file\" : \"scriptValue\", \"foo_id\" : \"scriptValue\" }"
argument_list|)
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testTokenSingleParameterDelcaredTwiceIndexedInline
specifier|public
name|void
name|testTokenSingleParameterDelcaredTwiceIndexedInline
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"foo_id\" : \"scriptValue\", \"foo\" : \"scriptValue\" }"
argument_list|)
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testTokenSingleParameterDelcaredTwiceIndexedFile
specifier|public
name|void
name|testTokenSingleParameterDelcaredTwiceIndexedFile
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"foo_id\" : \"scriptValue\", \"foo_file\" : \"scriptValue\" }"
argument_list|)
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenMultipleParameters
specifier|public
name|void
name|testTokenMultipleParameters
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"foo\" : \"fooScriptValue\", \"bar_file\" : \"barScriptValue\", \"baz_id\" : \"bazScriptValue\" }"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"bar"
argument_list|,
literal|"barScriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"bar"
argument_list|,
literal|"barScriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"baz"
argument_list|,
literal|"bazScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenMultipleParametersWithLang
specifier|public
name|void
name|testTokenMultipleParametersWithLang
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"foo\" : \"fooScriptValue\", \"bar_file\" : \"barScriptValue\", \"lang\" : \"myLang\", \"baz_id\" : \"bazScriptValue\" }"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"bar"
argument_list|,
literal|"barScriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"bar"
argument_list|,
literal|"barScriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"myLang"
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"bar"
argument_list|,
literal|"barScriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"baz"
argument_list|,
literal|"bazScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"myLang"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenMultipleParametersNotFound
specifier|public
name|void
name|testTokenMultipleParametersNotFound
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"other\" : \"scriptValue\" }"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenMultipleParametersSomeNotFound
specifier|public
name|void
name|testTokenMultipleParametersSomeNotFound
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"foo\" : \"fooScriptValue\", \"other_file\" : \"barScriptValue\", \"baz_id\" : \"bazScriptValue\" }"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"baz"
argument_list|,
literal|"bazScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenMultipleParametersWrongType
specifier|public
name|void
name|testTokenMultipleParametersWrongType
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"foo\" : \"fooScriptValue\", \"bar_file\" : \"barScriptValue\", \"baz_id\" : \"bazScriptValue\" }"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|token
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testReservedParameters
specifier|public
name|void
name|testReservedParameters
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|parameterNames
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"lang"
argument_list|)
decl_stmt|;
operator|new
name|ScriptParameterParser
argument_list|(
name|parameterNames
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigDefaultInline
specifier|public
name|void
name|testConfigDefaultInline
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"script"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|()
decl_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"script"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|paramParser
operator|=
operator|new
name|ScriptParameterParser
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"script"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|paramParser
operator|=
operator|new
name|ScriptParameterParser
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigDefaultFile
specifier|public
name|void
name|testConfigDefaultFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"script_file"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|()
decl_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"scriptFile"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|paramParser
operator|=
operator|new
name|ScriptParameterParser
argument_list|()
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigDefaultIndexed
specifier|public
name|void
name|testConfigDefaultIndexed
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"script_id"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|()
decl_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"scriptId"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|paramParser
operator|=
operator|new
name|ScriptParameterParser
argument_list|()
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigDefaultIndexedNoRemove
specifier|public
name|void
name|testConfigDefaultIndexedNoRemove
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"script_id"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|()
decl_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|false
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"script_id"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"scriptValue"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"scriptId"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|paramParser
operator|=
operator|new
name|ScriptParameterParser
argument_list|()
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|false
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"scriptId"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"scriptValue"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigDefaultNotFound
specifier|public
name|void
name|testConfigDefaultNotFound
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|()
decl_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getDefaultScriptParameterValue
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"script"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigSingleParameter
specifier|public
name|void
name|testConfigSingleParameter
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigSingleParameterFile
specifier|public
name|void
name|testConfigSingleParameterFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_file"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigSingleParameterIndexed
specifier|public
name|void
name|testConfigSingleParameterIndexed
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_id"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testConfigSingleParameterDelcaredTwiceInlineFile
specifier|public
name|void
name|testConfigSingleParameterDelcaredTwiceInlineFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_file"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testConfigSingleParameterDelcaredTwiceInlineIndexed
specifier|public
name|void
name|testConfigSingleParameterDelcaredTwiceInlineIndexed
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_id"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testConfigSingleParameterDelcaredTwiceFileInline
specifier|public
name|void
name|testConfigSingleParameterDelcaredTwiceFileInline
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_file"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testConfigSingleParameterDelcaredTwiceFileIndexed
specifier|public
name|void
name|testConfigSingleParameterDelcaredTwiceFileIndexed
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_file"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_id"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testConfigSingleParameterDelcaredTwiceIndexedInline
specifier|public
name|void
name|testConfigSingleParameterDelcaredTwiceIndexedInline
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_id"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testConfigSingleParameterDelcaredTwiceIndexedFile
specifier|public
name|void
name|testConfigSingleParameterDelcaredTwiceIndexedFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_id"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_file"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigMultipleParameters
specifier|public
name|void
name|testConfigMultipleParameters
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"bar_file"
argument_list|,
literal|"barScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"baz_id"
argument_list|,
literal|"bazScriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"bar"
argument_list|,
literal|"barScriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"baz"
argument_list|,
literal|"bazScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigMultipleParametersWithLang
specifier|public
name|void
name|testConfigMultipleParametersWithLang
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"bar_file"
argument_list|,
literal|"barScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"lang"
argument_list|,
literal|"myLang"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"baz_id"
argument_list|,
literal|"bazScriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"bar"
argument_list|,
literal|"barScriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"baz"
argument_list|,
literal|"bazScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"myLang"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigMultipleParametersWithLangNoRemove
specifier|public
name|void
name|testConfigMultipleParametersWithLangNoRemove
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"bar_file"
argument_list|,
literal|"barScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"lang"
argument_list|,
literal|"myLang"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"baz_id"
argument_list|,
literal|"bazScriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|false
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"bar"
argument_list|,
literal|"barScriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"baz"
argument_list|,
literal|"bazScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"myLang"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"fooScriptValue"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"barScriptValue"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"bazScriptValue"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"lang"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"myLang"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigMultipleParametersNotFound
specifier|public
name|void
name|testConfigMultipleParametersNotFound
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"other"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"other"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"scriptValue"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigMultipleParametersSomeNotFound
specifier|public
name|void
name|testConfigMultipleParametersSomeNotFound
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"other_file"
argument_list|,
literal|"barScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"baz_id"
argument_list|,
literal|"bazScriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"baz"
argument_list|,
literal|"bazScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"other_file"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"barScriptValue"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testConfigMultipleParametersInlineWrongType
specifier|public
name|void
name|testConfigMultipleParametersInlineWrongType
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"bar_file"
argument_list|,
literal|"barScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"baz_id"
argument_list|,
literal|"bazScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"lang"
argument_list|,
literal|"myLang"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testConfigMultipleParametersFileWrongType
specifier|public
name|void
name|testConfigMultipleParametersFileWrongType
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"bar_file"
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"baz_id"
argument_list|,
literal|"bazScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"lang"
argument_list|,
literal|"myLang"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testConfigMultipleParametersIndexedWrongType
specifier|public
name|void
name|testConfigMultipleParametersIndexedWrongType
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"bar_file"
argument_list|,
literal|"barScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"baz_id"
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"lang"
argument_list|,
literal|"myLang"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testConfigMultipleParametersLangWrongType
specifier|public
name|void
name|testConfigMultipleParametersLangWrongType
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"bar_file"
argument_list|,
literal|"barScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"baz_id"
argument_list|,
literal|"bazScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"lang"
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseConfig
argument_list|(
name|config
argument_list|,
literal|true
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParamsDefaultInline
specifier|public
name|void
name|testParamsDefaultInline
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"script"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|MapParams
name|params
init|=
operator|new
name|MapParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|()
decl_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|=
operator|new
name|ScriptParameterParser
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|=
operator|new
name|ScriptParameterParser
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParamsDefaultFile
specifier|public
name|void
name|testParamsDefaultFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"script_file"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|MapParams
name|params
init|=
operator|new
name|MapParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|()
decl_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParamsDefaultIndexed
specifier|public
name|void
name|testParamsDefaultIndexed
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"script_id"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|MapParams
name|params
init|=
operator|new
name|MapParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|()
decl_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertDefaultParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParamsDefaultNotFound
specifier|public
name|void
name|testParamsDefaultNotFound
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|MapParams
name|params
init|=
operator|new
name|MapParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|()
decl_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getDefaultScriptParameterValue
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"script"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParamsSingleParameter
specifier|public
name|void
name|testParamsSingleParameter
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|MapParams
name|params
init|=
operator|new
name|MapParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParamsSingleParameterFile
specifier|public
name|void
name|testParamsSingleParameterFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_file"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|MapParams
name|params
init|=
operator|new
name|MapParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParamsSingleParameterIndexed
specifier|public
name|void
name|testParamsSingleParameterIndexed
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_id"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|MapParams
name|params
init|=
operator|new
name|MapParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testParamsSingleParameterDelcaredTwiceInlineFile
specifier|public
name|void
name|testParamsSingleParameterDelcaredTwiceInlineFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_file"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|MapParams
name|params
init|=
operator|new
name|MapParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testParamsSingleParameterDelcaredTwiceInlineIndexed
specifier|public
name|void
name|testParamsSingleParameterDelcaredTwiceInlineIndexed
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_id"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|MapParams
name|params
init|=
operator|new
name|MapParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testParamsSingleParameterDelcaredTwiceFileInline
specifier|public
name|void
name|testParamsSingleParameterDelcaredTwiceFileInline
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_file"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|MapParams
name|params
init|=
operator|new
name|MapParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testParamsSingleParameterDelcaredTwiceFileIndexed
specifier|public
name|void
name|testParamsSingleParameterDelcaredTwiceFileIndexed
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_file"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_id"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|MapParams
name|params
init|=
operator|new
name|MapParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testParamsSingleParameterDelcaredTwiceIndexedInline
specifier|public
name|void
name|testParamsSingleParameterDelcaredTwiceIndexedInline
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_id"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|MapParams
name|params
init|=
operator|new
name|MapParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ScriptParseException
operator|.
name|class
argument_list|)
DECL|method|testParamsSingleParameterDelcaredTwiceIndexedFile
specifier|public
name|void
name|testParamsSingleParameterDelcaredTwiceIndexedFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_id"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo_file"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|MapParams
name|params
init|=
operator|new
name|MapParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParamsMultipleParameters
specifier|public
name|void
name|testParamsMultipleParameters
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"bar_file"
argument_list|,
literal|"barScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"baz_id"
argument_list|,
literal|"bazScriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|MapParams
name|params
init|=
operator|new
name|MapParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"bar"
argument_list|,
literal|"barScriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"baz"
argument_list|,
literal|"bazScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParamsMultipleParametersWithLang
specifier|public
name|void
name|testParamsMultipleParametersWithLang
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"bar_file"
argument_list|,
literal|"barScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"lang"
argument_list|,
literal|"myLang"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"baz_id"
argument_list|,
literal|"bazScriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|MapParams
name|params
init|=
operator|new
name|MapParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"bar"
argument_list|,
literal|"barScriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"baz"
argument_list|,
literal|"bazScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"myLang"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParamsMultipleParametersWithLangNoRemove
specifier|public
name|void
name|testParamsMultipleParametersWithLangNoRemove
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"bar_file"
argument_list|,
literal|"barScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"lang"
argument_list|,
literal|"myLang"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"baz_id"
argument_list|,
literal|"bazScriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|MapParams
name|params
init|=
operator|new
name|MapParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"bar"
argument_list|,
literal|"barScriptValue"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"baz"
argument_list|,
literal|"bazScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"myLang"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParamsMultipleParametersNotFound
specifier|public
name|void
name|testParamsMultipleParametersNotFound
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"other"
argument_list|,
literal|"scriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|MapParams
name|params
init|=
operator|new
name|MapParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParamsMultipleParametersSomeNotFound
specifier|public
name|void
name|testParamsMultipleParametersSomeNotFound
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"other_file"
argument_list|,
literal|"barScriptValue"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"baz_id"
argument_list|,
literal|"bazScriptValue"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ScriptParameterParser
name|paramParser
init|=
operator|new
name|ScriptParameterParser
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|MapParams
name|params
init|=
operator|new
name|MapParams
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|paramParser
operator|.
name|parseParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"foo"
argument_list|,
literal|"fooScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertParameterValue
argument_list|(
name|paramParser
argument_list|,
literal|"baz"
argument_list|,
literal|"bazScriptValue"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"bar_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"baz_id"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"other_file"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramParser
operator|.
name|lang
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDefaultParameterValue
specifier|private
name|void
name|assertDefaultParameterValue
parameter_list|(
name|ScriptParameterParser
name|paramParser
parameter_list|,
name|String
name|expectedScript
parameter_list|,
name|ScriptType
name|expectedScriptType
parameter_list|)
throws|throws
name|IOException
block|{
name|ScriptParameterValue
name|defaultValue
init|=
name|paramParser
operator|.
name|getDefaultScriptParameterValue
argument_list|()
decl_stmt|;
name|ScriptParameterValue
name|defaultValueByName
init|=
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
literal|"script"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|defaultValue
operator|.
name|scriptType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedScriptType
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|defaultValue
operator|.
name|script
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedScript
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|defaultValueByName
operator|.
name|scriptType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedScriptType
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|defaultValueByName
operator|.
name|script
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedScript
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertParameterValue
specifier|private
name|void
name|assertParameterValue
parameter_list|(
name|ScriptParameterParser
name|paramParser
parameter_list|,
name|String
name|parameterName
parameter_list|,
name|String
name|expectedScript
parameter_list|,
name|ScriptType
name|expectedScriptType
parameter_list|)
throws|throws
name|IOException
block|{
name|ScriptParameterValue
name|value
init|=
name|paramParser
operator|.
name|getScriptParameterValue
argument_list|(
name|parameterName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|value
operator|.
name|scriptType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedScriptType
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|value
operator|.
name|script
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedScript
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

