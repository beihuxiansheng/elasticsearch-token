begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_class
DECL|class|ScriptContextTests
specifier|public
class|class
name|ScriptContextTests
extends|extends
name|ESTestCase
block|{
DECL|interface|TwoNewInstance
specifier|public
interface|interface
name|TwoNewInstance
block|{
DECL|method|newInstance
name|String
name|newInstance
parameter_list|(
name|int
name|foo
parameter_list|,
name|int
name|bar
parameter_list|)
function_decl|;
DECL|method|newInstance
name|String
name|newInstance
parameter_list|(
name|int
name|foo
parameter_list|)
function_decl|;
block|}
DECL|interface|MissingNewInstance
specifier|public
interface|interface
name|MissingNewInstance
block|{
DECL|method|typoNewInstanceMethod
name|String
name|typoNewInstanceMethod
parameter_list|(
name|int
name|foo
parameter_list|)
function_decl|;
block|}
DECL|interface|DummyScript
specifier|public
interface|interface
name|DummyScript
block|{
DECL|method|execute
name|int
name|execute
parameter_list|(
name|int
name|foo
parameter_list|)
function_decl|;
DECL|interface|Factory
interface|interface
name|Factory
block|{
DECL|method|newInstance
name|DummyScript
name|newInstance
parameter_list|()
function_decl|;
block|}
block|}
DECL|method|testTwoNewInstanceMethods
specifier|public
name|void
name|testTwoNewInstanceMethods
parameter_list|()
block|{
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|ScriptContext
argument_list|<>
argument_list|(
literal|"test"
argument_list|,
name|TwoNewInstance
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot have multiple newInstance methods on FactoryType class ["
operator|+
name|TwoNewInstance
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"] for script context [test]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingNewInstanceMethod
specifier|public
name|void
name|testMissingNewInstanceMethod
parameter_list|()
block|{
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|ScriptContext
argument_list|<>
argument_list|(
literal|"test"
argument_list|,
name|MissingNewInstance
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Could not find method newInstance on FactoryType class ["
operator|+
name|MissingNewInstance
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"] for script context [test]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstanceTypeReflection
specifier|public
name|void
name|testInstanceTypeReflection
parameter_list|()
block|{
name|ScriptContext
argument_list|<
name|?
argument_list|>
name|context
init|=
operator|new
name|ScriptContext
argument_list|<>
argument_list|(
literal|"test"
argument_list|,
name|DummyScript
operator|.
name|Factory
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|context
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DummyScript
operator|.
name|class
argument_list|,
name|context
operator|.
name|instanceClazz
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DummyScript
operator|.
name|Factory
operator|.
name|class
argument_list|,
name|context
operator|.
name|factoryClazz
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

