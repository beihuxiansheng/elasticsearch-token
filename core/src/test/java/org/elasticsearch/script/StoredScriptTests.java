begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|AbstractSerializingTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|StoredScriptTests
specifier|public
class|class
name|StoredScriptTests
extends|extends
name|AbstractSerializingTestCase
argument_list|<
name|StoredScriptSource
argument_list|>
block|{
DECL|method|testBasicAddDelete
specifier|public
name|void
name|testBasicAddDelete
parameter_list|()
block|{
name|StoredScriptSource
name|source
init|=
operator|new
name|StoredScriptSource
argument_list|(
literal|"lang"
argument_list|,
literal|"code"
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|ScriptMetaData
name|smd
init|=
name|ScriptMetaData
operator|.
name|putStoredScript
argument_list|(
literal|null
argument_list|,
literal|"test"
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test"
argument_list|,
literal|"lang"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
name|smd
operator|=
name|ScriptMetaData
operator|.
name|deleteStoredScript
argument_list|(
name|smd
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test"
argument_list|,
literal|"lang"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDifferentMultiAddDelete
specifier|public
name|void
name|testDifferentMultiAddDelete
parameter_list|()
block|{
name|StoredScriptSource
name|source0
init|=
operator|new
name|StoredScriptSource
argument_list|(
literal|"lang0"
argument_list|,
literal|"code0"
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|StoredScriptSource
name|source1
init|=
operator|new
name|StoredScriptSource
argument_list|(
literal|"lang0"
argument_list|,
literal|"code1"
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|StoredScriptSource
name|source2
init|=
operator|new
name|StoredScriptSource
argument_list|(
literal|"lang1"
argument_list|,
literal|"code2"
argument_list|,
name|singletonMap
argument_list|(
name|Script
operator|.
name|CONTENT_TYPE_OPTION
argument_list|,
name|XContentType
operator|.
name|JSON
operator|.
name|mediaType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ScriptMetaData
name|smd
init|=
name|ScriptMetaData
operator|.
name|putStoredScript
argument_list|(
literal|null
argument_list|,
literal|"test0"
argument_list|,
name|source0
argument_list|)
decl_stmt|;
name|smd
operator|=
name|ScriptMetaData
operator|.
name|putStoredScript
argument_list|(
name|smd
argument_list|,
literal|"test1"
argument_list|,
name|source1
argument_list|)
expr_stmt|;
name|smd
operator|=
name|ScriptMetaData
operator|.
name|putStoredScript
argument_list|(
name|smd
argument_list|,
literal|"test2"
argument_list|,
name|source2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang0"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test1"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test1"
argument_list|,
literal|"lang0"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test2"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test2"
argument_list|,
literal|"lang1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test3"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang1"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test2"
argument_list|,
literal|"lang0"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|smd
operator|=
name|ScriptMetaData
operator|.
name|deleteStoredScript
argument_list|(
name|smd
argument_list|,
literal|"test0"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang0"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test1"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test1"
argument_list|,
literal|"lang0"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test2"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test2"
argument_list|,
literal|"lang1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test3"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang1"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test2"
argument_list|,
literal|"lang0"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|smd
operator|=
name|ScriptMetaData
operator|.
name|deleteStoredScript
argument_list|(
name|smd
argument_list|,
literal|"test2"
argument_list|,
literal|"lang1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang0"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test1"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test1"
argument_list|,
literal|"lang0"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test2"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test2"
argument_list|,
literal|"lang1"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test3"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang1"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test2"
argument_list|,
literal|"lang0"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|smd
operator|=
name|ScriptMetaData
operator|.
name|deleteStoredScript
argument_list|(
name|smd
argument_list|,
literal|"test1"
argument_list|,
literal|"lang0"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang0"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test1"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test1"
argument_list|,
literal|"lang0"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test2"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test2"
argument_list|,
literal|"lang1"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test3"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang1"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test2"
argument_list|,
literal|"lang0"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSameMultiAddDelete
specifier|public
name|void
name|testSameMultiAddDelete
parameter_list|()
block|{
name|StoredScriptSource
name|source0
init|=
operator|new
name|StoredScriptSource
argument_list|(
literal|"lang0"
argument_list|,
literal|"code0"
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|StoredScriptSource
name|source1
init|=
operator|new
name|StoredScriptSource
argument_list|(
literal|"lang1"
argument_list|,
literal|"code1"
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|StoredScriptSource
name|source2
init|=
operator|new
name|StoredScriptSource
argument_list|(
literal|"lang2"
argument_list|,
literal|"code1"
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|StoredScriptSource
name|source3
init|=
operator|new
name|StoredScriptSource
argument_list|(
literal|"lang1"
argument_list|,
literal|"code2"
argument_list|,
name|singletonMap
argument_list|(
name|Script
operator|.
name|CONTENT_TYPE_OPTION
argument_list|,
name|XContentType
operator|.
name|JSON
operator|.
name|mediaType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ScriptMetaData
name|smd
init|=
name|ScriptMetaData
operator|.
name|putStoredScript
argument_list|(
literal|null
argument_list|,
literal|"test0"
argument_list|,
name|source0
argument_list|)
decl_stmt|;
name|smd
operator|=
name|ScriptMetaData
operator|.
name|putStoredScript
argument_list|(
name|smd
argument_list|,
literal|"test0"
argument_list|,
name|source1
argument_list|)
expr_stmt|;
name|assertWarnings
argument_list|(
literal|"stored script [test0] already exists using a different lang [lang0],"
operator|+
literal|" the new namespace for stored scripts will only use (id) instead of (lang, id)"
argument_list|)
expr_stmt|;
name|smd
operator|=
name|ScriptMetaData
operator|.
name|putStoredScript
argument_list|(
name|smd
argument_list|,
literal|"test3"
argument_list|,
name|source3
argument_list|)
expr_stmt|;
name|smd
operator|=
name|ScriptMetaData
operator|.
name|putStoredScript
argument_list|(
name|smd
argument_list|,
literal|"test0"
argument_list|,
name|source2
argument_list|)
expr_stmt|;
name|assertWarnings
argument_list|(
literal|"stored script [test0] already exists using a different lang [lang1],"
operator|+
literal|" the new namespace for stored scripts will only use (id) instead of (lang, id)"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang0"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang2"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test3"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test3"
argument_list|,
literal|"lang1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source3
argument_list|)
argument_list|)
expr_stmt|;
name|smd
operator|=
name|ScriptMetaData
operator|.
name|deleteStoredScript
argument_list|(
name|smd
argument_list|,
literal|"test0"
argument_list|,
literal|"lang1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang0"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang1"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang2"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test3"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test3"
argument_list|,
literal|"lang1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source3
argument_list|)
argument_list|)
expr_stmt|;
name|smd
operator|=
name|ScriptMetaData
operator|.
name|deleteStoredScript
argument_list|(
name|smd
argument_list|,
literal|"test0"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang0"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang1"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang2"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test3"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test3"
argument_list|,
literal|"lang1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source3
argument_list|)
argument_list|)
expr_stmt|;
name|smd
operator|=
name|ScriptMetaData
operator|.
name|deleteStoredScript
argument_list|(
name|smd
argument_list|,
literal|"test3"
argument_list|,
literal|"lang1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang0"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang1"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang2"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test3"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test3"
argument_list|,
literal|"lang1"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|smd
operator|=
name|ScriptMetaData
operator|.
name|deleteStoredScript
argument_list|(
name|smd
argument_list|,
literal|"test0"
argument_list|,
literal|"lang0"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang0"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang1"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test0"
argument_list|,
literal|"lang2"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test3"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smd
operator|.
name|getStoredScript
argument_list|(
literal|"test3"
argument_list|,
literal|"lang1"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidDelete
specifier|public
name|void
name|testInvalidDelete
parameter_list|()
block|{
name|ResourceNotFoundException
name|rnfe
init|=
name|expectThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ScriptMetaData
operator|.
name|deleteStoredScript
argument_list|(
literal|null
argument_list|,
literal|"test"
argument_list|,
literal|"lang"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rnfe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"stored script [test] using lang [lang] does not exist and cannot be deleted"
argument_list|)
argument_list|)
expr_stmt|;
name|rnfe
operator|=
name|expectThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ScriptMetaData
operator|.
name|deleteStoredScript
argument_list|(
literal|null
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rnfe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"stored script [test] does not exist and cannot be deleted"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSourceParsing
specifier|public
name|void
name|testSourceParsing
parameter_list|()
throws|throws
name|Exception
block|{
comment|// simple script value string
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"script"
argument_list|,
literal|"code"
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|StoredScriptSource
name|parsed
init|=
name|StoredScriptSource
operator|.
name|parse
argument_list|(
literal|"lang"
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|StoredScriptSource
name|source
init|=
operator|new
name|StoredScriptSource
argument_list|(
literal|"lang"
argument_list|,
literal|"code"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsed
argument_list|,
name|equalTo
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// simple template value string
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"template"
argument_list|,
literal|"code"
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|StoredScriptSource
name|parsed
init|=
name|StoredScriptSource
operator|.
name|parse
argument_list|(
literal|"lang"
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|StoredScriptSource
name|source
init|=
operator|new
name|StoredScriptSource
argument_list|(
literal|"lang"
argument_list|,
literal|"code"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsed
argument_list|,
name|equalTo
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// complex template with wrapper template object
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"template"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
literal|"code"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|String
name|code
decl_stmt|;
try|try
init|(
name|XContentBuilder
name|cb
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|builder
operator|.
name|contentType
argument_list|()
argument_list|)
init|)
block|{
name|code
operator|=
name|cb
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
literal|"code"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
block|}
name|StoredScriptSource
name|parsed
init|=
name|StoredScriptSource
operator|.
name|parse
argument_list|(
literal|"lang"
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|StoredScriptSource
name|source
init|=
operator|new
name|StoredScriptSource
argument_list|(
literal|"lang"
argument_list|,
name|code
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsed
argument_list|,
name|equalTo
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// complex template with no wrapper object
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
literal|"code"
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|String
name|code
decl_stmt|;
try|try
init|(
name|XContentBuilder
name|cb
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|builder
operator|.
name|contentType
argument_list|()
argument_list|)
init|)
block|{
name|code
operator|=
name|cb
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
literal|"code"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
block|}
name|StoredScriptSource
name|parsed
init|=
name|StoredScriptSource
operator|.
name|parse
argument_list|(
literal|"lang"
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|StoredScriptSource
name|source
init|=
operator|new
name|StoredScriptSource
argument_list|(
literal|"lang"
argument_list|,
name|code
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsed
argument_list|,
name|equalTo
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// complex template using script as the field name
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"script"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
literal|"code"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|String
name|code
decl_stmt|;
try|try
init|(
name|XContentBuilder
name|cb
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|builder
operator|.
name|contentType
argument_list|()
argument_list|)
init|)
block|{
name|code
operator|=
name|cb
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
literal|"code"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
block|}
name|StoredScriptSource
name|parsed
init|=
name|StoredScriptSource
operator|.
name|parse
argument_list|(
literal|"lang"
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|StoredScriptSource
name|source
init|=
operator|new
name|StoredScriptSource
argument_list|(
literal|"lang"
argument_list|,
name|code
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsed
argument_list|,
name|equalTo
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// complex script with script object
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"script"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lang"
argument_list|,
literal|"lang"
argument_list|)
operator|.
name|field
argument_list|(
literal|"code"
argument_list|,
literal|"code"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|StoredScriptSource
name|parsed
init|=
name|StoredScriptSource
operator|.
name|parse
argument_list|(
literal|null
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|StoredScriptSource
name|source
init|=
operator|new
name|StoredScriptSource
argument_list|(
literal|"lang"
argument_list|,
literal|"code"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsed
argument_list|,
name|equalTo
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// complex script with script object and empty options
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"script"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lang"
argument_list|,
literal|"lang"
argument_list|)
operator|.
name|field
argument_list|(
literal|"code"
argument_list|,
literal|"code"
argument_list|)
operator|.
name|field
argument_list|(
literal|"options"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|StoredScriptSource
name|parsed
init|=
name|StoredScriptSource
operator|.
name|parse
argument_list|(
literal|null
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|StoredScriptSource
name|source
init|=
operator|new
name|StoredScriptSource
argument_list|(
literal|"lang"
argument_list|,
literal|"code"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsed
argument_list|,
name|equalTo
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// complex script with embedded template
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"script"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lang"
argument_list|,
literal|"lang"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"code"
argument_list|)
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
literal|"code"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"options"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|String
name|code
decl_stmt|;
try|try
init|(
name|XContentBuilder
name|cb
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|builder
operator|.
name|contentType
argument_list|()
argument_list|)
init|)
block|{
name|code
operator|=
name|cb
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
literal|"code"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
block|}
name|StoredScriptSource
name|parsed
init|=
name|StoredScriptSource
operator|.
name|parse
argument_list|(
literal|null
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|StoredScriptSource
name|source
init|=
operator|new
name|StoredScriptSource
argument_list|(
literal|"lang"
argument_list|,
name|code
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|Script
operator|.
name|CONTENT_TYPE_OPTION
argument_list|,
name|builder
operator|.
name|contentType
argument_list|()
operator|.
name|mediaType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsed
argument_list|,
name|equalTo
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSourceParsingErrors
specifier|public
name|void
name|testSourceParsingErrors
parameter_list|()
throws|throws
name|Exception
block|{
comment|// check for missing lang parameter when parsing a template
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"template"
argument_list|,
literal|"code"
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|IllegalArgumentException
name|iae
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|StoredScriptSource
operator|.
name|parse
argument_list|(
literal|null
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"unexpected stored script format"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check for missing lang parameter when parsing a script
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"script"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"code"
argument_list|,
literal|"code"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|IllegalArgumentException
name|iae
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|StoredScriptSource
operator|.
name|parse
argument_list|(
literal|null
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"must specify lang for stored script"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check for missing code parameter when parsing a script
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"script"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lang"
argument_list|,
literal|"lang"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|IllegalArgumentException
name|iae
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|StoredScriptSource
operator|.
name|parse
argument_list|(
literal|null
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"must specify code for stored script"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check for illegal options parameter when parsing a script
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"script"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lang"
argument_list|,
literal|"lang"
argument_list|)
operator|.
name|field
argument_list|(
literal|"code"
argument_list|,
literal|"code"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"options"
argument_list|)
operator|.
name|field
argument_list|(
literal|"option"
argument_list|,
literal|"option"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|IllegalArgumentException
name|iae
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|StoredScriptSource
operator|.
name|parse
argument_list|(
literal|null
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"illegal compiler options [{option=option}] specified"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createTestInstance
specifier|protected
name|StoredScriptSource
name|createTestInstance
parameter_list|()
block|{
return|return
operator|new
name|StoredScriptSource
argument_list|(
name|randomAlphaOfLength
argument_list|(
name|randomIntBetween
argument_list|(
literal|4
argument_list|,
literal|32
argument_list|)
argument_list|)
argument_list|,
name|randomAlphaOfLength
argument_list|(
name|randomIntBetween
argument_list|(
literal|4
argument_list|,
literal|16383
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|instanceReader
specifier|protected
name|Writeable
operator|.
name|Reader
argument_list|<
name|StoredScriptSource
argument_list|>
name|instanceReader
parameter_list|()
block|{
return|return
name|StoredScriptSource
operator|::
operator|new
return|;
block|}
annotation|@
name|Override
DECL|method|doParseInstance
specifier|protected
name|StoredScriptSource
name|doParseInstance
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
block|{
try|try
block|{
return|return
name|StoredScriptSource
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

