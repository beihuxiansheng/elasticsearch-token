begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|AbstractSerializingTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|StoredScriptSourceTests
specifier|public
class|class
name|StoredScriptSourceTests
extends|extends
name|AbstractSerializingTestCase
argument_list|<
name|StoredScriptSource
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createTestInstance
specifier|protected
name|StoredScriptSource
name|createTestInstance
parameter_list|()
block|{
name|String
name|lang
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
name|XContentType
operator|.
name|YAML
argument_list|)
decl_stmt|;
try|try
block|{
name|XContentBuilder
name|template
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|)
decl_stmt|;
name|template
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|template
operator|.
name|startObject
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
name|template
operator|.
name|startObject
argument_list|(
literal|"match"
argument_list|)
expr_stmt|;
name|template
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|"{{query_string}}"
argument_list|)
expr_stmt|;
name|template
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|template
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|template
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
name|Script
operator|.
name|CONTENT_TYPE_OPTION
argument_list|,
name|xContentType
operator|.
name|mediaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|StoredScriptSource
operator|.
name|parse
argument_list|(
name|lang
argument_list|,
name|template
operator|.
name|bytes
argument_list|()
argument_list|,
name|xContentType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Failed to create test instance"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|doParseInstance
specifier|protected
name|StoredScriptSource
name|doParseInstance
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|StoredScriptSource
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|instanceReader
specifier|protected
name|Reader
argument_list|<
name|StoredScriptSource
argument_list|>
name|instanceReader
parameter_list|()
block|{
return|return
name|StoredScriptSource
operator|::
operator|new
return|;
block|}
block|}
end_class

end_unit

