begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|DataOutputStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|InputStreamStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Simple tests for {@link ScriptException} */
end_comment

begin_class
DECL|class|ScriptExceptionTests
specifier|public
class|class
name|ScriptExceptionTests
extends|extends
name|ESTestCase
block|{
comment|/** ensure we can round trip in serialization */
DECL|method|testRoundTrip
specifier|public
name|void
name|testRoundTrip
parameter_list|()
throws|throws
name|IOException
block|{
name|ScriptException
name|e
init|=
operator|new
name|ScriptException
argument_list|(
literal|"messageData"
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"causeData"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"stack1"
argument_list|,
literal|"stack2"
argument_list|)
argument_list|,
literal|"sourceData"
argument_list|,
literal|"langData"
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|StreamOutput
name|output
init|=
operator|new
name|DataOutputStreamOutput
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
name|e
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|StreamInput
name|input
init|=
operator|new
name|InputStreamStreamInput
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ScriptException
name|e2
init|=
operator|new
name|ScriptException
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e2
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getScriptStack
argument_list|()
argument_list|,
name|e2
operator|.
name|getScriptStack
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getScript
argument_list|()
argument_list|,
name|e2
operator|.
name|getScript
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getLang
argument_list|()
argument_list|,
name|e2
operator|.
name|getLang
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Test that our elements are present in the json output */
DECL|method|testJsonOutput
specifier|public
name|void
name|testJsonOutput
parameter_list|()
block|{
name|ScriptException
name|e
init|=
operator|new
name|ScriptException
argument_list|(
literal|"messageData"
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"causeData"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"stack1"
argument_list|,
literal|"stack2"
argument_list|)
argument_list|,
literal|"sourceData"
argument_list|,
literal|"langData"
argument_list|)
decl_stmt|;
name|String
name|json
init|=
name|e
operator|.
name|toJsonString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"stack1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"stack2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getScript
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getLang
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** ensure the script stack is immutable */
DECL|method|testImmutableStack
specifier|public
name|void
name|testImmutableStack
parameter_list|()
block|{
name|ScriptException
name|e
init|=
operator|new
name|ScriptException
argument_list|(
literal|"a"
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"element1"
argument_list|,
literal|"element2"
argument_list|)
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|stack
init|=
name|e
operator|.
name|getScriptStack
argument_list|()
decl_stmt|;
name|expectThrows
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|stack
operator|.
name|add
argument_list|(
literal|"no"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** ensure no parameters can be null */
DECL|method|testNoLeniency
specifier|public
name|void
name|testNoLeniency
parameter_list|()
block|{
name|expectThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|ScriptException
argument_list|(
literal|null
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|ScriptException
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|ScriptException
argument_list|(
literal|"test"
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|ScriptException
argument_list|(
literal|"test"
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|ScriptException
argument_list|(
literal|"test"
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|"a"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

