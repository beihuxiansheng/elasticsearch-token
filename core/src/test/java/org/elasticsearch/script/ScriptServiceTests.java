begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|expression
operator|.
name|ExpressionScriptEngineService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|groovy
operator|.
name|GroovyScriptEngineService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|mustache
operator|.
name|MustacheScriptEngineService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|SearchLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|watcher
operator|.
name|ResourceWatcherService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|sameInstance
import|;
end_import

begin_class
DECL|class|ScriptServiceTests
specifier|public
class|class
name|ScriptServiceTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|field|resourceWatcherService
specifier|private
name|ResourceWatcherService
name|resourceWatcherService
decl_stmt|;
DECL|field|scriptEngineServices
specifier|private
name|Set
argument_list|<
name|ScriptEngineService
argument_list|>
name|scriptEngineServices
decl_stmt|;
DECL|field|scriptEnginesByLangMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptEngineService
argument_list|>
name|scriptEnginesByLangMap
decl_stmt|;
DECL|field|scriptContextRegistry
specifier|private
name|ScriptContextRegistry
name|scriptContextRegistry
decl_stmt|;
DECL|field|scriptContexts
specifier|private
name|ScriptContext
index|[]
name|scriptContexts
decl_stmt|;
DECL|field|scriptService
specifier|private
name|ScriptService
name|scriptService
decl_stmt|;
DECL|field|scriptsFilePath
specifier|private
name|Path
name|scriptsFilePath
decl_stmt|;
DECL|field|baseSettings
specifier|private
name|Settings
name|baseSettings
decl_stmt|;
DECL|field|DEFAULT_SCRIPT_MODES
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|ScriptType
argument_list|,
name|ScriptMode
argument_list|>
name|DEFAULT_SCRIPT_MODES
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|DEFAULT_SCRIPT_MODES
operator|.
name|put
argument_list|(
name|ScriptType
operator|.
name|FILE
argument_list|,
name|ScriptMode
operator|.
name|ON
argument_list|)
expr_stmt|;
name|DEFAULT_SCRIPT_MODES
operator|.
name|put
argument_list|(
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|ScriptMode
operator|.
name|SANDBOX
argument_list|)
expr_stmt|;
name|DEFAULT_SCRIPT_MODES
operator|.
name|put
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|ScriptMode
operator|.
name|SANDBOX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|genericConfigFolder
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|baseSettings
operator|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"path.conf"
argument_list|,
name|genericConfigFolder
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|resourceWatcherService
operator|=
operator|new
name|ResourceWatcherService
argument_list|(
name|baseSettings
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|scriptEngineServices
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|TestEngineService
argument_list|()
argument_list|,
operator|new
name|GroovyScriptEngineService
argument_list|(
name|baseSettings
argument_list|)
argument_list|,
operator|new
name|ExpressionScriptEngineService
argument_list|(
name|baseSettings
argument_list|)
argument_list|,
operator|new
name|MustacheScriptEngineService
argument_list|(
name|baseSettings
argument_list|)
argument_list|)
expr_stmt|;
name|scriptEnginesByLangMap
operator|=
name|ScriptModesTests
operator|.
name|buildScriptEnginesByLangMap
argument_list|(
name|scriptEngineServices
argument_list|)
expr_stmt|;
comment|//randomly register custom script contexts
name|int
name|randomInt
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|//prevent duplicates using map
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptContext
operator|.
name|Plugin
argument_list|>
name|contexts
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomInt
condition|;
name|i
operator|++
control|)
block|{
name|String
name|plugin
decl_stmt|;
do|do
block|{
name|plugin
operator|=
name|randomAsciiOfLength
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|ScriptContextRegistry
operator|.
name|RESERVED_SCRIPT_CONTEXTS
operator|.
name|contains
argument_list|(
name|plugin
argument_list|)
condition|)
do|;
name|String
name|operation
decl_stmt|;
do|do
block|{
name|operation
operator|=
name|randomAsciiOfLength
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|30
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|ScriptContextRegistry
operator|.
name|RESERVED_SCRIPT_CONTEXTS
operator|.
name|contains
argument_list|(
name|operation
argument_list|)
condition|)
do|;
name|String
name|context
init|=
name|plugin
operator|+
literal|"_"
operator|+
name|operation
decl_stmt|;
name|contexts
operator|.
name|put
argument_list|(
name|context
argument_list|,
operator|new
name|ScriptContext
operator|.
name|Plugin
argument_list|(
name|plugin
argument_list|,
name|operation
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|scriptContextRegistry
operator|=
operator|new
name|ScriptContextRegistry
argument_list|(
name|contexts
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|scriptContexts
operator|=
name|scriptContextRegistry
operator|.
name|scriptContexts
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ScriptContext
index|[
name|scriptContextRegistry
operator|.
name|scriptContexts
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> setup script service"
argument_list|)
expr_stmt|;
name|scriptsFilePath
operator|=
name|genericConfigFolder
operator|.
name|resolve
argument_list|(
literal|"scripts"
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|scriptsFilePath
argument_list|)
expr_stmt|;
block|}
DECL|method|buildScriptService
specifier|private
name|void
name|buildScriptService
parameter_list|(
name|Settings
name|additionalSettings
parameter_list|)
throws|throws
name|IOException
block|{
name|Settings
name|finalSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|baseSettings
argument_list|)
operator|.
name|put
argument_list|(
name|additionalSettings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Environment
name|environment
init|=
operator|new
name|Environment
argument_list|(
name|finalSettings
argument_list|)
decl_stmt|;
name|scriptService
operator|=
operator|new
name|ScriptService
argument_list|(
name|finalSettings
argument_list|,
name|environment
argument_list|,
name|scriptEngineServices
argument_list|,
name|resourceWatcherService
argument_list|,
name|scriptContextRegistry
argument_list|)
block|{
annotation|@
name|Override
name|String
name|getScriptFromIndex
parameter_list|(
name|String
name|scriptLang
parameter_list|,
name|String
name|id
parameter_list|)
block|{
comment|//mock the script that gets retrieved from an index
return|return
literal|"100"
return|;
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNotSupportedDisableDynamicSetting
specifier|public
name|void
name|testNotSupportedDisableDynamicSetting
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|buildScriptService
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|ScriptService
operator|.
name|DISABLE_DYNAMIC_SCRIPTING_SETTING
argument_list|,
name|randomUnicodeOfLength
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"script service should have thrown exception due to non supported script.disable_dynamic setting"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|ScriptService
operator|.
name|DISABLE_DYNAMIC_SCRIPTING_SETTING
operator|+
literal|" is not a supported setting, replace with fine-grained script settings"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testScriptsWithoutExtensions
specifier|public
name|void
name|testScriptsWithoutExtensions
parameter_list|()
throws|throws
name|IOException
block|{
name|buildScriptService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> setup two test files one with extension and another without"
argument_list|)
expr_stmt|;
name|Path
name|testFileNoExt
init|=
name|scriptsFilePath
operator|.
name|resolve
argument_list|(
literal|"test_no_ext"
argument_list|)
decl_stmt|;
name|Path
name|testFileWithExt
init|=
name|scriptsFilePath
operator|.
name|resolve
argument_list|(
literal|"test_script.tst"
argument_list|)
decl_stmt|;
name|Streams
operator|.
name|copy
argument_list|(
literal|"test_file_no_ext"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
name|Files
operator|.
name|newOutputStream
argument_list|(
name|testFileNoExt
argument_list|)
argument_list|)
expr_stmt|;
name|Streams
operator|.
name|copy
argument_list|(
literal|"test_file"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
name|Files
operator|.
name|newOutputStream
argument_list|(
name|testFileWithExt
argument_list|)
argument_list|)
expr_stmt|;
name|resourceWatcherService
operator|.
name|notifyNow
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> verify that file with extension was correctly processed"
argument_list|)
expr_stmt|;
name|CompiledScript
name|compiledScript
init|=
name|scriptService
operator|.
name|compile
argument_list|(
operator|new
name|Script
argument_list|(
literal|"test_script"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ScriptContext
operator|.
name|Standard
operator|.
name|SEARCH
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|compiledScript
operator|.
name|compiled
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Object
operator|)
literal|"compiled_test_file"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> delete both files"
argument_list|)
expr_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|testFileNoExt
argument_list|)
expr_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|testFileWithExt
argument_list|)
expr_stmt|;
name|resourceWatcherService
operator|.
name|notifyNow
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> verify that file with extension was correctly removed"
argument_list|)
expr_stmt|;
try|try
block|{
name|scriptService
operator|.
name|compile
argument_list|(
operator|new
name|Script
argument_list|(
literal|"test_script"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ScriptContext
operator|.
name|Standard
operator|.
name|SEARCH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"the script test_script should no longer exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Unable to find on disk script test_script"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testScriptsSameNameDifferentLanguage
specifier|public
name|void
name|testScriptsSameNameDifferentLanguage
parameter_list|()
throws|throws
name|IOException
block|{
name|buildScriptService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|createFileScripts
argument_list|(
literal|"groovy"
argument_list|,
literal|"expression"
argument_list|)
expr_stmt|;
name|CompiledScript
name|groovyScript
init|=
name|scriptService
operator|.
name|compile
argument_list|(
operator|new
name|Script
argument_list|(
literal|"file_script"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|,
name|GroovyScriptEngineService
operator|.
name|NAME
argument_list|,
literal|null
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|scriptContexts
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groovyScript
operator|.
name|lang
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|GroovyScriptEngineService
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|CompiledScript
name|expressionScript
init|=
name|scriptService
operator|.
name|compile
argument_list|(
operator|new
name|Script
argument_list|(
literal|"file_script"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|,
name|ExpressionScriptEngineService
operator|.
name|NAME
argument_list|,
literal|null
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
operator|new
name|ScriptContext
index|[]
block|{
name|ScriptContext
operator|.
name|Standard
operator|.
name|AGGS
block|,
name|ScriptContext
operator|.
name|Standard
operator|.
name|SEARCH
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|expressionScript
operator|.
name|lang
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ExpressionScriptEngineService
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInlineScriptCompiledOnceCache
specifier|public
name|void
name|testInlineScriptCompiledOnceCache
parameter_list|()
throws|throws
name|IOException
block|{
name|buildScriptService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|CompiledScript
name|compiledScript1
init|=
name|scriptService
operator|.
name|compile
argument_list|(
operator|new
name|Script
argument_list|(
literal|"1+1"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|scriptContexts
argument_list|)
argument_list|)
decl_stmt|;
name|CompiledScript
name|compiledScript2
init|=
name|scriptService
operator|.
name|compile
argument_list|(
operator|new
name|Script
argument_list|(
literal|"1+1"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|scriptContexts
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|compiledScript1
argument_list|,
name|sameInstance
argument_list|(
name|compiledScript2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInlineScriptCompiledOnceMultipleLangAcronyms
specifier|public
name|void
name|testInlineScriptCompiledOnceMultipleLangAcronyms
parameter_list|()
throws|throws
name|IOException
block|{
name|buildScriptService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|CompiledScript
name|compiledScript1
init|=
name|scriptService
operator|.
name|compile
argument_list|(
operator|new
name|Script
argument_list|(
literal|"script"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|scriptContexts
argument_list|)
argument_list|)
decl_stmt|;
name|CompiledScript
name|compiledScript2
init|=
name|scriptService
operator|.
name|compile
argument_list|(
operator|new
name|Script
argument_list|(
literal|"script"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
literal|"test2"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|scriptContexts
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|compiledScript1
argument_list|,
name|sameInstance
argument_list|(
name|compiledScript2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileScriptCompiledOnceMultipleLangAcronyms
specifier|public
name|void
name|testFileScriptCompiledOnceMultipleLangAcronyms
parameter_list|()
throws|throws
name|IOException
block|{
name|buildScriptService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|createFileScripts
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|CompiledScript
name|compiledScript1
init|=
name|scriptService
operator|.
name|compile
argument_list|(
operator|new
name|Script
argument_list|(
literal|"file_script"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|scriptContexts
argument_list|)
argument_list|)
decl_stmt|;
name|CompiledScript
name|compiledScript2
init|=
name|scriptService
operator|.
name|compile
argument_list|(
operator|new
name|Script
argument_list|(
literal|"file_script"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|,
literal|"test2"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|scriptContexts
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|compiledScript1
argument_list|,
name|sameInstance
argument_list|(
name|compiledScript2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultBehaviourFineGrainedSettings
specifier|public
name|void
name|testDefaultBehaviourFineGrainedSettings
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|//rarely inject the default settings, which have no effect
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
literal|"script.file"
argument_list|,
name|randomFrom
argument_list|(
name|ScriptModesTests
operator|.
name|ENABLE_VALUES
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
literal|"script.indexed"
argument_list|,
name|ScriptMode
operator|.
name|SANDBOX
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
literal|"script.inline"
argument_list|,
name|ScriptMode
operator|.
name|SANDBOX
argument_list|)
expr_stmt|;
block|}
name|buildScriptService
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|createFileScripts
argument_list|(
literal|"groovy"
argument_list|,
literal|"expression"
argument_list|,
literal|"mustache"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
for|for
control|(
name|ScriptContext
name|scriptContext
range|:
name|scriptContexts
control|)
block|{
comment|//groovy is not sandboxed, only file scripts are enabled by default
name|assertCompileRejected
argument_list|(
name|GroovyScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"script"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|scriptContext
argument_list|)
expr_stmt|;
name|assertCompileRejected
argument_list|(
name|GroovyScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"script"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|scriptContext
argument_list|)
expr_stmt|;
name|assertCompileAccepted
argument_list|(
name|GroovyScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"file_script"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|,
name|scriptContext
argument_list|)
expr_stmt|;
comment|//expression engine is sandboxed, all scripts are enabled by default
if|if
condition|(
operator|!
name|scriptContext
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|ScriptContext
operator|.
name|Standard
operator|.
name|MAPPING
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
operator|!
name|scriptContext
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|ScriptContext
operator|.
name|Standard
operator|.
name|UPDATE
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|assertCompileAccepted
argument_list|(
name|ExpressionScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"script"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|scriptContext
argument_list|)
expr_stmt|;
name|assertCompileAccepted
argument_list|(
name|ExpressionScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"script"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|scriptContext
argument_list|)
expr_stmt|;
name|assertCompileAccepted
argument_list|(
name|ExpressionScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"file_script"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|,
name|scriptContext
argument_list|)
expr_stmt|;
block|}
comment|//mustache engine is sandboxed, all scripts are enabled by default
name|assertCompileAccepted
argument_list|(
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"script"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|scriptContext
argument_list|)
expr_stmt|;
name|assertCompileAccepted
argument_list|(
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"script"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|scriptContext
argument_list|)
expr_stmt|;
name|assertCompileAccepted
argument_list|(
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"file_script"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|,
name|scriptContext
argument_list|)
expr_stmt|;
comment|//custom engine is sandboxed, all scripts are enabled by default
name|assertCompileAccepted
argument_list|(
literal|"test"
argument_list|,
literal|"script"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|scriptContext
argument_list|)
expr_stmt|;
name|assertCompileAccepted
argument_list|(
literal|"test"
argument_list|,
literal|"script"
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|scriptContext
argument_list|)
expr_stmt|;
name|assertCompileAccepted
argument_list|(
literal|"test"
argument_list|,
literal|"file_script"
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|,
name|scriptContext
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFineGrainedSettings
specifier|public
name|void
name|testFineGrainedSettings
parameter_list|()
throws|throws
name|IOException
block|{
comment|//collect the fine-grained settings to set for this run
name|int
name|numScriptSettings
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|ScriptType
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ScriptType
argument_list|,
name|ScriptMode
argument_list|>
name|scriptSourceSettings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numScriptSettings
condition|;
name|i
operator|++
control|)
block|{
name|ScriptType
name|scriptType
decl_stmt|;
do|do
block|{
name|scriptType
operator|=
name|randomFrom
argument_list|(
name|ScriptType
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|scriptSourceSettings
operator|.
name|containsKey
argument_list|(
name|scriptType
argument_list|)
condition|)
do|;
name|scriptSourceSettings
operator|.
name|put
argument_list|(
name|scriptType
argument_list|,
name|randomFrom
argument_list|(
name|ScriptMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|numScriptContextSettings
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|scriptContextRegistry
operator|.
name|scriptContexts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptMode
argument_list|>
name|scriptContextSettings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numScriptContextSettings
condition|;
name|i
operator|++
control|)
block|{
name|String
name|scriptContext
decl_stmt|;
do|do
block|{
name|scriptContext
operator|=
name|randomFrom
argument_list|(
name|this
operator|.
name|scriptContexts
argument_list|)
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scriptContextSettings
operator|.
name|containsKey
argument_list|(
name|scriptContext
argument_list|)
condition|)
do|;
name|scriptContextSettings
operator|.
name|put
argument_list|(
name|scriptContext
argument_list|,
name|randomFrom
argument_list|(
name|ScriptMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|numEngineSettings
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptMode
argument_list|>
name|engineSettings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEngineSettings
condition|;
name|i
operator|++
control|)
block|{
name|String
name|settingKey
decl_stmt|;
do|do
block|{
name|ScriptEngineService
index|[]
name|scriptEngineServices
init|=
name|this
operator|.
name|scriptEngineServices
operator|.
name|toArray
argument_list|(
operator|new
name|ScriptEngineService
index|[
name|this
operator|.
name|scriptEngineServices
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|ScriptEngineService
name|scriptEngineService
init|=
name|randomFrom
argument_list|(
name|scriptEngineServices
argument_list|)
decl_stmt|;
name|ScriptType
name|scriptType
init|=
name|randomFrom
argument_list|(
name|ScriptType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|ScriptContext
name|scriptContext
init|=
name|randomFrom
argument_list|(
name|this
operator|.
name|scriptContexts
argument_list|)
decl_stmt|;
name|settingKey
operator|=
name|scriptEngineService
operator|.
name|types
argument_list|()
index|[
literal|0
index|]
operator|+
literal|"."
operator|+
name|scriptType
operator|+
literal|"."
operator|+
name|scriptContext
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|engineSettings
operator|.
name|containsKey
argument_list|(
name|settingKey
argument_list|)
condition|)
do|;
name|engineSettings
operator|.
name|put
argument_list|(
name|settingKey
argument_list|,
name|randomFrom
argument_list|(
name|ScriptMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//set the selected fine-grained settings
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ScriptType
argument_list|,
name|ScriptMode
argument_list|>
name|entry
range|:
name|scriptSourceSettings
operator|.
name|entrySet
argument_list|()
control|)
block|{
switch|switch
condition|(
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|ON
case|:
name|builder
operator|.
name|put
argument_list|(
name|ScriptModes
operator|.
name|SCRIPT_SETTINGS_PREFIX
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|randomFrom
argument_list|(
name|ScriptModesTests
operator|.
name|ENABLE_VALUES
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|OFF
case|:
name|builder
operator|.
name|put
argument_list|(
name|ScriptModes
operator|.
name|SCRIPT_SETTINGS_PREFIX
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|randomFrom
argument_list|(
name|ScriptModesTests
operator|.
name|DISABLE_VALUES
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SANDBOX
case|:
name|builder
operator|.
name|put
argument_list|(
name|ScriptModes
operator|.
name|SCRIPT_SETTINGS_PREFIX
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|ScriptMode
operator|.
name|SANDBOX
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ScriptMode
argument_list|>
name|entry
range|:
name|scriptContextSettings
operator|.
name|entrySet
argument_list|()
control|)
block|{
switch|switch
condition|(
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|ON
case|:
name|builder
operator|.
name|put
argument_list|(
name|ScriptModes
operator|.
name|SCRIPT_SETTINGS_PREFIX
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|randomFrom
argument_list|(
name|ScriptModesTests
operator|.
name|ENABLE_VALUES
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|OFF
case|:
name|builder
operator|.
name|put
argument_list|(
name|ScriptModes
operator|.
name|SCRIPT_SETTINGS_PREFIX
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|randomFrom
argument_list|(
name|ScriptModesTests
operator|.
name|DISABLE_VALUES
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SANDBOX
case|:
name|builder
operator|.
name|put
argument_list|(
name|ScriptModes
operator|.
name|SCRIPT_SETTINGS_PREFIX
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|ScriptMode
operator|.
name|SANDBOX
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ScriptMode
argument_list|>
name|entry
range|:
name|engineSettings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|delimiter
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|String
name|part1
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|delimiter
argument_list|)
decl_stmt|;
name|String
name|part2
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|delimiter
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|lang
init|=
name|randomFrom
argument_list|(
name|scriptEnginesByLangMap
operator|.
name|get
argument_list|(
name|part1
argument_list|)
operator|.
name|types
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|ON
case|:
name|builder
operator|.
name|put
argument_list|(
name|ScriptModes
operator|.
name|ENGINE_SETTINGS_PREFIX
operator|+
literal|"."
operator|+
name|lang
operator|+
literal|"."
operator|+
name|part2
argument_list|,
name|randomFrom
argument_list|(
name|ScriptModesTests
operator|.
name|ENABLE_VALUES
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|OFF
case|:
name|builder
operator|.
name|put
argument_list|(
name|ScriptModes
operator|.
name|ENGINE_SETTINGS_PREFIX
operator|+
literal|"."
operator|+
name|lang
operator|+
literal|"."
operator|+
name|part2
argument_list|,
name|randomFrom
argument_list|(
name|ScriptModesTests
operator|.
name|DISABLE_VALUES
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SANDBOX
case|:
name|builder
operator|.
name|put
argument_list|(
name|ScriptModes
operator|.
name|ENGINE_SETTINGS_PREFIX
operator|+
literal|"."
operator|+
name|lang
operator|+
literal|"."
operator|+
name|part2
argument_list|,
name|ScriptMode
operator|.
name|SANDBOX
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|buildScriptService
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|createFileScripts
argument_list|(
literal|"groovy"
argument_list|,
literal|"expression"
argument_list|,
literal|"mustache"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
for|for
control|(
name|ScriptEngineService
name|scriptEngineService
range|:
name|scriptEngineServices
control|)
block|{
for|for
control|(
name|ScriptType
name|scriptType
range|:
name|ScriptType
operator|.
name|values
argument_list|()
control|)
block|{
comment|//make sure file scripts have a different name than inline ones.
comment|//Otherwise they are always considered file ones as they can be found in the static cache.
name|String
name|script
init|=
name|scriptType
operator|==
name|ScriptType
operator|.
name|FILE
condition|?
literal|"file_script"
else|:
literal|"script"
decl_stmt|;
for|for
control|(
name|ScriptContext
name|scriptContext
range|:
name|this
operator|.
name|scriptContexts
control|)
block|{
comment|// skip script contexts that aren't allowed for expressions
if|if
condition|(
name|scriptEngineService
operator|instanceof
name|ExpressionScriptEngineService
operator|&&
operator|(
name|scriptContext
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|ScriptContext
operator|.
name|Standard
operator|.
name|MAPPING
operator|.
name|getKey
argument_list|()
argument_list|)
operator|||
name|scriptContext
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|ScriptContext
operator|.
name|Standard
operator|.
name|UPDATE
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
condition|)
block|{
continue|continue;
block|}
comment|//fallback mechanism: 1) engine specific settings 2) op based settings 3) source based settings
name|ScriptMode
name|scriptMode
init|=
name|engineSettings
operator|.
name|get
argument_list|(
name|scriptEngineService
operator|.
name|types
argument_list|()
index|[
literal|0
index|]
operator|+
literal|"."
operator|+
name|scriptType
operator|+
literal|"."
operator|+
name|scriptContext
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptMode
operator|==
literal|null
condition|)
block|{
name|scriptMode
operator|=
name|scriptContextSettings
operator|.
name|get
argument_list|(
name|scriptContext
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scriptMode
operator|==
literal|null
condition|)
block|{
name|scriptMode
operator|=
name|scriptSourceSettings
operator|.
name|get
argument_list|(
name|scriptType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scriptMode
operator|==
literal|null
condition|)
block|{
name|scriptMode
operator|=
name|DEFAULT_SCRIPT_MODES
operator|.
name|get
argument_list|(
name|scriptType
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|lang
range|:
name|scriptEngineService
operator|.
name|types
argument_list|()
control|)
block|{
switch|switch
condition|(
name|scriptMode
condition|)
block|{
case|case
name|ON
case|:
name|assertCompileAccepted
argument_list|(
name|lang
argument_list|,
name|script
argument_list|,
name|scriptType
argument_list|,
name|scriptContext
argument_list|)
expr_stmt|;
break|break;
case|case
name|OFF
case|:
name|assertCompileRejected
argument_list|(
name|lang
argument_list|,
name|script
argument_list|,
name|scriptType
argument_list|,
name|scriptContext
argument_list|)
expr_stmt|;
break|break;
case|case
name|SANDBOX
case|:
if|if
condition|(
name|scriptEngineService
operator|.
name|sandboxed
argument_list|()
condition|)
block|{
name|assertCompileAccepted
argument_list|(
name|lang
argument_list|,
name|script
argument_list|,
name|scriptType
argument_list|,
name|scriptContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertCompileRejected
argument_list|(
name|lang
argument_list|,
name|script
argument_list|,
name|scriptType
argument_list|,
name|scriptContext
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCompileNonRegisteredContext
specifier|public
name|void
name|testCompileNonRegisteredContext
parameter_list|()
throws|throws
name|IOException
block|{
name|buildScriptService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|String
name|pluginName
decl_stmt|;
name|String
name|unknownContext
decl_stmt|;
do|do
block|{
name|pluginName
operator|=
name|randomAsciiOfLength
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|unknownContext
operator|=
name|randomAsciiOfLength
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|30
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|scriptContextRegistry
operator|.
name|isSupportedContext
argument_list|(
operator|new
name|ScriptContext
operator|.
name|Plugin
argument_list|(
name|pluginName
argument_list|,
name|unknownContext
argument_list|)
argument_list|)
condition|)
do|;
for|for
control|(
name|ScriptEngineService
name|scriptEngineService
range|:
name|scriptEngineServices
control|)
block|{
for|for
control|(
name|String
name|type
range|:
name|scriptEngineService
operator|.
name|types
argument_list|()
control|)
block|{
try|try
block|{
name|scriptService
operator|.
name|compile
argument_list|(
operator|new
name|Script
argument_list|(
literal|"test"
argument_list|,
name|randomFrom
argument_list|(
name|ScriptType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|type
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|ScriptContext
operator|.
name|Plugin
argument_list|(
name|pluginName
argument_list|,
name|unknownContext
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"script compilation should have been rejected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"script context ["
operator|+
name|pluginName
operator|+
literal|"_"
operator|+
name|unknownContext
operator|+
literal|"] not supported"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|createFileScripts
specifier|private
name|void
name|createFileScripts
parameter_list|(
name|String
modifier|...
name|langs
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|lang
range|:
name|langs
control|)
block|{
name|Path
name|scriptPath
init|=
name|scriptsFilePath
operator|.
name|resolve
argument_list|(
literal|"file_script."
operator|+
name|lang
argument_list|)
decl_stmt|;
name|Streams
operator|.
name|copy
argument_list|(
literal|"10"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
name|Files
operator|.
name|newOutputStream
argument_list|(
name|scriptPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|resourceWatcherService
operator|.
name|notifyNow
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCompileRejected
specifier|private
name|void
name|assertCompileRejected
parameter_list|(
name|String
name|lang
parameter_list|,
name|String
name|script
parameter_list|,
name|ScriptType
name|scriptType
parameter_list|,
name|ScriptContext
name|scriptContext
parameter_list|)
block|{
try|try
block|{
name|scriptService
operator|.
name|compile
argument_list|(
operator|new
name|Script
argument_list|(
name|script
argument_list|,
name|scriptType
argument_list|,
name|lang
argument_list|,
literal|null
argument_list|)
argument_list|,
name|scriptContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"compile should have been rejected for lang ["
operator|+
name|lang
operator|+
literal|"], script_type ["
operator|+
name|scriptType
operator|+
literal|"], scripted_op ["
operator|+
name|scriptContext
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ScriptException
name|e
parameter_list|)
block|{
comment|//all good
block|}
block|}
DECL|method|assertCompileAccepted
specifier|private
name|void
name|assertCompileAccepted
parameter_list|(
name|String
name|lang
parameter_list|,
name|String
name|script
parameter_list|,
name|ScriptType
name|scriptType
parameter_list|,
name|ScriptContext
name|scriptContext
parameter_list|)
block|{
name|assertThat
argument_list|(
name|scriptService
operator|.
name|compile
argument_list|(
operator|new
name|Script
argument_list|(
name|script
argument_list|,
name|scriptType
argument_list|,
name|lang
argument_list|,
literal|null
argument_list|)
argument_list|,
name|scriptContext
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|TestEngineService
specifier|public
specifier|static
class|class
name|TestEngineService
implements|implements
name|ScriptEngineService
block|{
annotation|@
name|Override
DECL|method|types
specifier|public
name|String
index|[]
name|types
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"test"
block|,
literal|"test2"
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|extensions
specifier|public
name|String
index|[]
name|extensions
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"test"
block|,
literal|"tst"
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|sandboxed
specifier|public
name|boolean
name|sandboxed
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|compile
specifier|public
name|Object
name|compile
parameter_list|(
name|String
name|script
parameter_list|)
block|{
return|return
literal|"compiled_"
operator|+
name|script
return|;
block|}
annotation|@
name|Override
DECL|method|executable
specifier|public
name|ExecutableScript
name|executable
parameter_list|(
specifier|final
name|Object
name|compiledScript
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|search
specifier|public
name|SearchScript
name|search
parameter_list|(
name|Object
name|compiledScript
parameter_list|,
name|SearchLookup
name|lookup
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|Object
name|execute
parameter_list|(
name|Object
name|compiledScript
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|unwrap
specifier|public
name|Object
name|unwrap
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{          }
annotation|@
name|Override
DECL|method|scriptRemoved
specifier|public
name|void
name|scriptRemoved
parameter_list|(
name|CompiledScript
name|script
parameter_list|)
block|{
comment|// Nothing to do here
block|}
block|}
block|}
end_class

end_unit

