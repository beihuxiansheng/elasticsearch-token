begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|InputStreamStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|OutputStreamStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|ScriptTests
specifier|public
class|class
name|ScriptTests
extends|extends
name|ESTestCase
block|{
DECL|method|testScriptParsing
specifier|public
name|void
name|testScriptParsing
parameter_list|()
throws|throws
name|IOException
block|{
name|Script
name|expectedScript
init|=
name|createScript
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|expectedScript
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|builder
argument_list|)
init|)
block|{
name|Script
name|actualScript
init|=
name|Script
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actualScript
argument_list|,
name|equalTo
argument_list|(
name|expectedScript
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testScriptSerialization
specifier|public
name|void
name|testScriptSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|Script
name|expectedScript
init|=
name|createScript
argument_list|()
decl_stmt|;
try|try
init|(
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|)
block|{
name|expectedScript
operator|.
name|writeTo
argument_list|(
operator|new
name|OutputStreamStreamOutput
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
init|)
block|{
name|Script
name|actualScript
init|=
operator|new
name|Script
argument_list|(
operator|new
name|InputStreamStreamInput
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actualScript
argument_list|,
name|equalTo
argument_list|(
name|expectedScript
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createScript
specifier|private
name|Script
name|createScript
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|randomBoolean
argument_list|()
condition|?
name|Collections
operator|.
name|emptyMap
argument_list|()
else|:
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
name|ScriptType
name|scriptType
init|=
name|randomFrom
argument_list|(
name|ScriptType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|script
decl_stmt|;
if|if
condition|(
name|scriptType
operator|==
name|ScriptType
operator|.
name|INLINE
condition|)
block|{
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|script
operator|=
name|builder
operator|.
name|string
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|script
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Script
argument_list|(
name|scriptType
argument_list|,
name|scriptType
operator|==
name|ScriptType
operator|.
name|STORED
condition|?
literal|null
else|:
name|randomFrom
argument_list|(
literal|"_lang1"
argument_list|,
literal|"_lang2"
argument_list|,
literal|"_lang3"
argument_list|)
argument_list|,
name|script
argument_list|,
name|scriptType
operator|==
name|ScriptType
operator|.
name|INLINE
condition|?
name|Collections
operator|.
name|singletonMap
argument_list|(
name|Script
operator|.
name|CONTENT_TYPE_OPTION
argument_list|,
name|XContentType
operator|.
name|JSON
operator|.
name|mediaType
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
name|params
argument_list|)
return|;
block|}
block|}
end_class

end_unit

