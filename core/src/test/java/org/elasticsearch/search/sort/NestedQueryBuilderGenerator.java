begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.sort
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|IdsQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MatchAllQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|TermQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|NestedQueryBuilderGenerator
specifier|public
class|class
name|NestedQueryBuilderGenerator
block|{
DECL|method|NestedQueryBuilderGenerator
specifier|private
name|NestedQueryBuilderGenerator
parameter_list|()
block|{
comment|// this is a helper class only, doesn't need a constructor
block|}
DECL|field|builders
specifier|private
specifier|static
name|List
argument_list|<
name|QueryBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|builders
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|,
operator|new
name|IdsQueryBuilder
argument_list|()
argument_list|,
operator|new
name|TermQueryBuilder
argument_list|(
name|ESTestCase
operator|.
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ESTestCase
operator|.
name|randomDouble
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|nestedFilter
specifier|public
specifier|static
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|nestedFilter
parameter_list|(
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|original
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|QueryBuilder
name|nested
init|=
name|ESTestCase
operator|.
name|randomValueOtherThan
argument_list|(
name|original
argument_list|,
parameter_list|()
lambda|->
name|ESTestCase
operator|.
name|randomFrom
argument_list|(
name|builders
argument_list|)
argument_list|)
decl_stmt|;
name|nested
operator|.
name|boost
argument_list|(
operator|(
name|float
operator|)
name|ESTestCase
operator|.
name|randomDoubleBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|nested
return|;
block|}
block|}
end_class

end_unit

