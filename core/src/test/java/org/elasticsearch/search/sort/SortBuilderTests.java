begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* x * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.sort
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_class
DECL|class|SortBuilderTests
specifier|public
class|class
name|SortBuilderTests
extends|extends
name|ESTestCase
block|{
DECL|field|NUMBER_OF_RUNS
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER_OF_RUNS
init|=
literal|20
decl_stmt|;
DECL|field|xContentRegistry
specifier|private
specifier|static
name|NamedXContentRegistry
name|xContentRegistry
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
name|SearchModule
name|searchModule
init|=
operator|new
name|SearchModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|xContentRegistry
operator|=
operator|new
name|NamedXContentRegistry
argument_list|(
name|searchModule
operator|.
name|getNamedXContents
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|xContentRegistry
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * test two syntax variations:      * - "sort" : "fieldname"      * - "sort" : { "fieldname" : "asc" }      */
DECL|method|testSingleFieldSort
specifier|public
name|void
name|testSingleFieldSort
parameter_list|()
throws|throws
name|IOException
block|{
name|SortOrder
name|order
init|=
name|randomBoolean
argument_list|()
condition|?
name|SortOrder
operator|.
name|ASC
else|:
name|SortOrder
operator|.
name|DESC
decl_stmt|;
name|String
name|json
init|=
literal|"{ \"sort\" : { \"field1\" : \""
operator|+
name|order
operator|+
literal|"\" }}"
decl_stmt|;
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
name|parseSort
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SortBuilder
argument_list|<
name|?
argument_list|>
name|sortBuilder
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|FieldSortBuilder
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|order
argument_list|(
name|order
argument_list|)
argument_list|,
name|sortBuilder
argument_list|)
expr_stmt|;
name|json
operator|=
literal|"{ \"sort\" : \"field1\" }"
expr_stmt|;
name|result
operator|=
name|parseSort
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sortBuilder
operator|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|FieldSortBuilder
argument_list|(
literal|"field1"
argument_list|)
argument_list|,
name|sortBuilder
argument_list|)
expr_stmt|;
comment|// one element array, see https://github.com/elastic/elasticsearch/issues/17257
name|json
operator|=
literal|"{ \"sort\" : [\"field1\"] }"
expr_stmt|;
name|result
operator|=
name|parseSort
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sortBuilder
operator|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|FieldSortBuilder
argument_list|(
literal|"field1"
argument_list|)
argument_list|,
name|sortBuilder
argument_list|)
expr_stmt|;
name|json
operator|=
literal|"{ \"sort\" : { \"_doc\" : \""
operator|+
name|order
operator|+
literal|"\" }}"
expr_stmt|;
name|result
operator|=
name|parseSort
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sortBuilder
operator|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|FieldSortBuilder
argument_list|(
literal|"_doc"
argument_list|)
operator|.
name|order
argument_list|(
name|order
argument_list|)
argument_list|,
name|sortBuilder
argument_list|)
expr_stmt|;
name|json
operator|=
literal|"{ \"sort\" : \"_doc\" }"
expr_stmt|;
name|result
operator|=
name|parseSort
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sortBuilder
operator|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|FieldSortBuilder
argument_list|(
literal|"_doc"
argument_list|)
argument_list|,
name|sortBuilder
argument_list|)
expr_stmt|;
name|json
operator|=
literal|"{ \"sort\" : { \"_score\" : \""
operator|+
name|order
operator|+
literal|"\" }}"
expr_stmt|;
name|result
operator|=
name|parseSort
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sortBuilder
operator|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ScoreSortBuilder
argument_list|()
operator|.
name|order
argument_list|(
name|order
argument_list|)
argument_list|,
name|sortBuilder
argument_list|)
expr_stmt|;
name|json
operator|=
literal|"{ \"sort\" : \"_score\" }"
expr_stmt|;
name|result
operator|=
name|parseSort
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sortBuilder
operator|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ScoreSortBuilder
argument_list|()
argument_list|,
name|sortBuilder
argument_list|)
expr_stmt|;
comment|// test two spellings for _geo_disctance
name|json
operator|=
literal|"{ \"sort\" : ["
operator|+
literal|"{\"_geoDistance\" : {"
operator|+
literal|"\"pin.location\" : \"40,-70\" } }"
operator|+
literal|"] }"
expr_stmt|;
name|result
operator|=
name|parseSort
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sortBuilder
operator|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|GeoDistanceSortBuilder
argument_list|(
literal|"pin.location"
argument_list|,
literal|40
argument_list|,
operator|-
literal|70
argument_list|)
argument_list|,
name|sortBuilder
argument_list|)
expr_stmt|;
name|json
operator|=
literal|"{ \"sort\" : ["
operator|+
literal|"{\"_geo_distance\" : {"
operator|+
literal|"\"pin.location\" : \"40,-70\" } }"
operator|+
literal|"] }"
expr_stmt|;
name|result
operator|=
name|parseSort
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sortBuilder
operator|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|GeoDistanceSortBuilder
argument_list|(
literal|"pin.location"
argument_list|,
literal|40
argument_list|,
operator|-
literal|70
argument_list|)
argument_list|,
name|sortBuilder
argument_list|)
expr_stmt|;
block|}
comment|/**      * test random syntax variations      */
DECL|method|testRandomSortBuilders
specifier|public
name|void
name|testRandomSortBuilders
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_RUNS
condition|;
name|runs
operator|++
control|)
block|{
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|testBuilders
init|=
name|randomSortBuilderList
argument_list|()
decl_stmt|;
name|XContentBuilder
name|xContentBuilder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|xContentBuilder
operator|.
name|startObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|testBuilders
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|xContentBuilder
operator|.
name|startArray
argument_list|(
literal|"sort"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xContentBuilder
operator|.
name|field
argument_list|(
literal|"sort"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SortBuilder
argument_list|<
name|?
argument_list|>
name|builder
range|:
name|testBuilders
control|)
block|{
if|if
condition|(
name|builder
operator|instanceof
name|ScoreSortBuilder
operator|||
name|builder
operator|instanceof
name|FieldSortBuilder
condition|)
block|{
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|builder
operator|instanceof
name|ScoreSortBuilder
condition|)
block|{
name|xContentBuilder
operator|.
name|value
argument_list|(
literal|"_score"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xContentBuilder
operator|.
name|value
argument_list|(
operator|(
operator|(
name|FieldSortBuilder
operator|)
name|builder
operator|)
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
name|xContentBuilder
operator|.
name|startObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|builder
operator|instanceof
name|ScoreSortBuilder
condition|)
block|{
name|xContentBuilder
operator|.
name|field
argument_list|(
literal|"_score"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xContentBuilder
operator|.
name|field
argument_list|(
operator|(
operator|(
name|FieldSortBuilder
operator|)
name|builder
operator|)
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|xContentBuilder
operator|.
name|value
argument_list|(
name|builder
operator|.
name|order
argument_list|()
argument_list|)
expr_stmt|;
name|xContentBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|builder
operator|.
name|toXContent
argument_list|(
name|xContentBuilder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|builder
operator|.
name|toXContent
argument_list|(
name|xContentBuilder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|testBuilders
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|xContentBuilder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|xContentBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|parsedSort
init|=
name|parseSort
argument_list|(
name|xContentBuilder
operator|.
name|string
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testBuilders
operator|.
name|size
argument_list|()
argument_list|,
name|parsedSort
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|iterator
init|=
name|testBuilders
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|SortBuilder
argument_list|<
name|?
argument_list|>
name|parsedBuilder
range|:
name|parsedSort
control|)
block|{
name|assertEquals
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|,
name|parsedBuilder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|randomSortBuilderList
specifier|public
specifier|static
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|randomSortBuilderList
parameter_list|()
block|{
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|list
operator|.
name|add
argument_list|(
operator|new
name|ScoreSortBuilder
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|String
name|fieldName
init|=
name|rarely
argument_list|()
condition|?
name|FieldSortBuilder
operator|.
name|DOC_FIELD_NAME
else|:
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|FieldSortBuilder
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|list
operator|.
name|add
argument_list|(
name|GeoDistanceSortBuilderTests
operator|.
name|randomGeoDistanceSortBuilder
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|list
operator|.
name|add
argument_list|(
name|ScriptSortBuilderTests
operator|.
name|randomScriptSortBuilder
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unexpected randomization in tests"
argument_list|)
throw|;
block|}
block|}
return|return
name|list
return|;
block|}
comment|/**      * test array syntax variations:      * - "sort" : [ "fieldname", { "fieldname2" : "asc" }, ...]      */
DECL|method|testMultiFieldSort
specifier|public
name|void
name|testMultiFieldSort
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|json
init|=
literal|"{ \"sort\" : ["
operator|+
literal|"{ \"post_date\" : {\"order\" : \"asc\"}},"
operator|+
literal|"\"user\","
operator|+
literal|"{ \"name\" : \"desc\" },"
operator|+
literal|"{ \"age\" : \"desc\" },"
operator|+
literal|"{"
operator|+
literal|"\"_geo_distance\" : {"
operator|+
literal|"\"pin.location\" : \"40,-70\" } },"
operator|+
literal|"\"_score\""
operator|+
literal|"] }"
decl_stmt|;
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
name|parseSort
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|FieldSortBuilder
argument_list|(
literal|"post_date"
argument_list|)
operator|.
name|order
argument_list|(
name|SortOrder
operator|.
name|ASC
argument_list|)
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|FieldSortBuilder
argument_list|(
literal|"user"
argument_list|)
operator|.
name|order
argument_list|(
name|SortOrder
operator|.
name|ASC
argument_list|)
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|FieldSortBuilder
argument_list|(
literal|"name"
argument_list|)
operator|.
name|order
argument_list|(
name|SortOrder
operator|.
name|DESC
argument_list|)
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|FieldSortBuilder
argument_list|(
literal|"age"
argument_list|)
operator|.
name|order
argument_list|(
name|SortOrder
operator|.
name|DESC
argument_list|)
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|GeoDistanceSortBuilder
argument_list|(
literal|"pin.location"
argument_list|,
operator|new
name|GeoPoint
argument_list|(
literal|40
argument_list|,
operator|-
literal|70
argument_list|)
argument_list|)
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ScoreSortBuilder
argument_list|()
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|xContentRegistry
specifier|protected
name|NamedXContentRegistry
name|xContentRegistry
parameter_list|()
block|{
return|return
name|xContentRegistry
return|;
block|}
DECL|method|parseSort
specifier|private
name|List
argument_list|<
name|SortBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|parseSort
parameter_list|(
name|String
name|jsonString
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|itemParser
init|=
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
name|jsonString
argument_list|)
decl_stmt|;
name|QueryParseContext
name|context
init|=
operator|new
name|QueryParseContext
argument_list|(
name|itemParser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|itemParser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|itemParser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sort"
argument_list|,
name|itemParser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|itemParser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
return|return
name|SortBuilder
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
end_class

end_unit

