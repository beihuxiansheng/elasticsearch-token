begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.sort
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_class
DECL|class|SortModeTest
specifier|public
class|class
name|SortModeTest
extends|extends
name|ESTestCase
block|{
annotation|@
name|Rule
DECL|field|exceptionRule
specifier|public
name|ExpectedException
name|exceptionRule
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|method|testSortMode
specifier|public
name|void
name|testSortMode
parameter_list|()
block|{
comment|// we rely on these ordinals in serialization, so changing them breaks bwc.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|SortMode
operator|.
name|MIN
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|SortMode
operator|.
name|MAX
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|SortMode
operator|.
name|SUM
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|SortMode
operator|.
name|AVG
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|SortMode
operator|.
name|MEDIAN
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"min"
argument_list|,
name|SortMode
operator|.
name|MIN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max"
argument_list|,
name|SortMode
operator|.
name|MAX
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sum"
argument_list|,
name|SortMode
operator|.
name|SUM
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"avg"
argument_list|,
name|SortMode
operator|.
name|AVG
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"median"
argument_list|,
name|SortMode
operator|.
name|MEDIAN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SortMode
name|mode
range|:
name|SortMode
operator|.
name|values
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|mode
argument_list|,
name|SortMode
operator|.
name|fromString
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mode
argument_list|,
name|SortMode
operator|.
name|fromString
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|exceptionRule
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exceptionRule
operator|.
name|expectMessage
argument_list|(
literal|"Unknown SortMode [xyz]"
argument_list|)
expr_stmt|;
name|SortMode
operator|.
name|fromString
argument_list|(
literal|"xyz"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

