begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.sort
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|IdsQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MatchAllQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|TermQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_class
DECL|class|RandomSortDataGenerator
specifier|public
class|class
name|RandomSortDataGenerator
block|{
DECL|method|RandomSortDataGenerator
specifier|private
name|RandomSortDataGenerator
parameter_list|()
block|{
comment|// this is a helper class only, doesn't need a constructor
block|}
DECL|method|nestedFilter
specifier|public
specifier|static
name|QueryBuilder
name|nestedFilter
parameter_list|(
name|QueryBuilder
name|original
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|QueryBuilder
name|nested
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|nested
operator|==
literal|null
operator|||
name|nested
operator|.
name|equals
argument_list|(
name|original
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|ESTestCase
operator|.
name|randomInt
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|nested
operator|=
operator|new
name|MatchAllQueryBuilder
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|nested
operator|=
operator|new
name|IdsQueryBuilder
argument_list|()
expr_stmt|;
break|break;
default|default:
case|case
literal|2
case|:
name|nested
operator|=
operator|new
name|TermQueryBuilder
argument_list|(
name|ESTestCase
operator|.
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ESTestCase
operator|.
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|nested
operator|.
name|boost
argument_list|(
operator|(
name|float
operator|)
name|ESTestCase
operator|.
name|randomDoubleBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|nested
return|;
block|}
DECL|method|randomAscii
specifier|public
specifier|static
name|String
name|randomAscii
parameter_list|(
name|String
name|original
parameter_list|)
block|{
name|String
name|nestedPath
init|=
name|ESTestCase
operator|.
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
while|while
condition|(
name|nestedPath
operator|.
name|equals
argument_list|(
name|original
argument_list|)
condition|)
block|{
name|nestedPath
operator|=
name|ESTestCase
operator|.
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
return|return
name|nestedPath
return|;
block|}
DECL|method|mode
specifier|public
specifier|static
name|String
name|mode
parameter_list|(
name|String
name|original
parameter_list|)
block|{
name|String
index|[]
name|modes
init|=
block|{
literal|"min"
block|,
literal|"max"
block|,
literal|"avg"
block|,
literal|"sum"
block|}
decl_stmt|;
name|String
name|mode
init|=
name|ESTestCase
operator|.
name|randomFrom
argument_list|(
name|modes
argument_list|)
decl_stmt|;
while|while
condition|(
name|mode
operator|.
name|equals
argument_list|(
name|original
argument_list|)
condition|)
block|{
name|mode
operator|=
name|ESTestCase
operator|.
name|randomFrom
argument_list|(
name|modes
argument_list|)
expr_stmt|;
block|}
return|return
name|mode
return|;
block|}
DECL|method|missing
specifier|public
specifier|static
name|Object
name|missing
parameter_list|(
name|Object
name|original
parameter_list|)
block|{
name|Object
name|missing
init|=
literal|null
decl_stmt|;
name|Object
name|otherMissing
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|original
operator|instanceof
name|BytesRef
condition|)
block|{
name|otherMissing
operator|=
operator|(
operator|(
name|BytesRef
operator|)
name|original
operator|)
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|otherMissing
operator|=
name|original
expr_stmt|;
block|}
while|while
condition|(
name|missing
operator|==
literal|null
operator|||
name|missing
operator|.
name|equals
argument_list|(
name|otherMissing
argument_list|)
condition|)
block|{
name|int
name|missingId
init|=
name|ESTestCase
operator|.
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|missingId
condition|)
block|{
case|case
literal|0
case|:
name|missing
operator|=
operator|(
literal|"_last"
operator|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|missing
operator|=
operator|(
literal|"_first"
operator|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|missing
operator|=
name|ESTestCase
operator|.
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|missing
operator|=
name|ESTestCase
operator|.
name|randomInt
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown missing type."
argument_list|)
throw|;
block|}
block|}
return|return
name|missing
return|;
block|}
DECL|method|order
specifier|public
specifier|static
name|SortOrder
name|order
parameter_list|(
name|SortOrder
name|original
parameter_list|)
block|{
name|SortOrder
name|order
init|=
name|SortOrder
operator|.
name|ASC
decl_stmt|;
if|if
condition|(
name|order
operator|.
name|equals
argument_list|(
name|original
argument_list|)
condition|)
block|{
return|return
name|SortOrder
operator|.
name|DESC
return|;
block|}
else|else
block|{
return|return
name|SortOrder
operator|.
name|ASC
return|;
block|}
block|}
block|}
end_class

end_unit

