begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|InetAddressPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableAwareStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|Joda
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|InetAddresses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_class
DECL|class|DocValueFormatTests
specifier|public
class|class
name|DocValueFormatTests
extends|extends
name|ESTestCase
block|{
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|Entry
argument_list|(
name|DocValueFormat
operator|.
name|class
argument_list|,
name|DocValueFormat
operator|.
name|BOOLEAN
operator|.
name|getWriteableName
argument_list|()
argument_list|,
name|in
lambda|->
name|DocValueFormat
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|Entry
argument_list|(
name|DocValueFormat
operator|.
name|class
argument_list|,
name|DocValueFormat
operator|.
name|DateTime
operator|.
name|NAME
argument_list|,
name|DocValueFormat
operator|.
name|DateTime
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|Entry
argument_list|(
name|DocValueFormat
operator|.
name|class
argument_list|,
name|DocValueFormat
operator|.
name|Decimal
operator|.
name|NAME
argument_list|,
name|DocValueFormat
operator|.
name|Decimal
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|Entry
argument_list|(
name|DocValueFormat
operator|.
name|class
argument_list|,
name|DocValueFormat
operator|.
name|GEOHASH
operator|.
name|getWriteableName
argument_list|()
argument_list|,
name|in
lambda|->
name|DocValueFormat
operator|.
name|GEOHASH
argument_list|)
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|Entry
argument_list|(
name|DocValueFormat
operator|.
name|class
argument_list|,
name|DocValueFormat
operator|.
name|IP
operator|.
name|getWriteableName
argument_list|()
argument_list|,
name|in
lambda|->
name|DocValueFormat
operator|.
name|IP
argument_list|)
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|Entry
argument_list|(
name|DocValueFormat
operator|.
name|class
argument_list|,
name|DocValueFormat
operator|.
name|RAW
operator|.
name|getWriteableName
argument_list|()
argument_list|,
name|in
lambda|->
name|DocValueFormat
operator|.
name|RAW
argument_list|)
argument_list|)
expr_stmt|;
name|NamedWriteableRegistry
name|registry
init|=
operator|new
name|NamedWriteableRegistry
argument_list|(
name|entries
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|DocValueFormat
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|StreamInput
name|in
init|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|,
name|registry
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|DocValueFormat
operator|.
name|BOOLEAN
argument_list|,
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|DocValueFormat
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DocValueFormat
operator|.
name|Decimal
name|decimalFormat
init|=
operator|new
name|DocValueFormat
operator|.
name|Decimal
argument_list|(
literal|"###.##"
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|BytesStreamOutput
argument_list|()
expr_stmt|;
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|decimalFormat
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|,
name|registry
argument_list|)
expr_stmt|;
name|DocValueFormat
name|vf
init|=
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|DocValueFormat
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DocValueFormat
operator|.
name|Decimal
operator|.
name|class
argument_list|,
name|vf
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"###.##"
argument_list|,
operator|(
operator|(
name|DocValueFormat
operator|.
name|Decimal
operator|)
name|vf
operator|)
operator|.
name|pattern
argument_list|)
expr_stmt|;
name|DocValueFormat
operator|.
name|DateTime
name|dateFormat
init|=
operator|new
name|DocValueFormat
operator|.
name|DateTime
argument_list|(
name|Joda
operator|.
name|forPattern
argument_list|(
literal|"epoch_second"
argument_list|)
argument_list|,
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|BytesStreamOutput
argument_list|()
expr_stmt|;
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|dateFormat
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|,
name|registry
argument_list|)
expr_stmt|;
name|vf
operator|=
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|DocValueFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValueFormat
operator|.
name|DateTime
operator|.
name|class
argument_list|,
name|vf
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"epoch_second"
argument_list|,
operator|(
operator|(
name|DocValueFormat
operator|.
name|DateTime
operator|)
name|vf
operator|)
operator|.
name|formatter
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|(
operator|(
name|DocValueFormat
operator|.
name|DateTime
operator|)
name|vf
operator|)
operator|.
name|timeZone
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BytesStreamOutput
argument_list|()
expr_stmt|;
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|DocValueFormat
operator|.
name|GEOHASH
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|,
name|registry
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|DocValueFormat
operator|.
name|GEOHASH
argument_list|,
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|DocValueFormat
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BytesStreamOutput
argument_list|()
expr_stmt|;
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|DocValueFormat
operator|.
name|IP
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|,
name|registry
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|DocValueFormat
operator|.
name|IP
argument_list|,
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|DocValueFormat
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BytesStreamOutput
argument_list|()
expr_stmt|;
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|DocValueFormat
operator|.
name|RAW
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|,
name|registry
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|DocValueFormat
operator|.
name|RAW
argument_list|,
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|DocValueFormat
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRawFormat
specifier|public
name|void
name|testRawFormat
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|DocValueFormat
operator|.
name|RAW
operator|.
name|format
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-1"
argument_list|,
name|DocValueFormat
operator|.
name|RAW
operator|.
name|format
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|DocValueFormat
operator|.
name|RAW
operator|.
name|format
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0.0"
argument_list|,
name|DocValueFormat
operator|.
name|RAW
operator|.
name|format
argument_list|(
literal|0d
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0.5"
argument_list|,
name|DocValueFormat
operator|.
name|RAW
operator|.
name|format
argument_list|(
literal|.5d
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-1.0"
argument_list|,
name|DocValueFormat
operator|.
name|RAW
operator|.
name|format
argument_list|(
operator|-
literal|1d
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|DocValueFormat
operator|.
name|RAW
operator|.
name|format
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBooleanFormat
specifier|public
name|void
name|testBooleanFormat
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|DocValueFormat
operator|.
name|BOOLEAN
operator|.
name|format
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|DocValueFormat
operator|.
name|BOOLEAN
operator|.
name|format
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIpFormat
specifier|public
name|void
name|testIpFormat
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"192.168.1.7"
argument_list|,
name|DocValueFormat
operator|.
name|IP
operator|.
name|format
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"192.168.1.7"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"::1"
argument_list|,
name|DocValueFormat
operator|.
name|IP
operator|.
name|format
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"::1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRawParse
specifier|public
name|void
name|testRawParse
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|-
literal|1L
argument_list|,
name|DocValueFormat
operator|.
name|RAW
operator|.
name|parseLong
argument_list|(
literal|"-1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|DocValueFormat
operator|.
name|RAW
operator|.
name|parseLong
argument_list|(
literal|"1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// not checking exception messages as they could depend on the JVM
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|DocValueFormat
operator|.
name|RAW
operator|.
name|parseLong
argument_list|(
literal|""
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|DocValueFormat
operator|.
name|RAW
operator|.
name|parseLong
argument_list|(
literal|"abc"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1d
argument_list|,
name|DocValueFormat
operator|.
name|RAW
operator|.
name|parseDouble
argument_list|(
literal|"-1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|0d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1d
argument_list|,
name|DocValueFormat
operator|.
name|RAW
operator|.
name|parseDouble
argument_list|(
literal|"1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|0d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|.5
argument_list|,
name|DocValueFormat
operator|.
name|RAW
operator|.
name|parseDouble
argument_list|(
literal|"0.5"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|0d
argument_list|)
expr_stmt|;
comment|// not checking exception messages as they could depend on the JVM
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|DocValueFormat
operator|.
name|RAW
operator|.
name|parseLong
argument_list|(
literal|""
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|DocValueFormat
operator|.
name|RAW
operator|.
name|parseLong
argument_list|(
literal|"abc"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
name|DocValueFormat
operator|.
name|RAW
operator|.
name|parseBytesRef
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBooleanParse
specifier|public
name|void
name|testBooleanParse
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|DocValueFormat
operator|.
name|BOOLEAN
operator|.
name|parseLong
argument_list|(
literal|"false"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|DocValueFormat
operator|.
name|BOOLEAN
operator|.
name|parseLong
argument_list|(
literal|"true"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|DocValueFormat
operator|.
name|BOOLEAN
operator|.
name|parseLong
argument_list|(
literal|""
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot parse boolean [], expected either [true] or [false]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|DocValueFormat
operator|.
name|BOOLEAN
operator|.
name|parseLong
argument_list|(
literal|"0"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot parse boolean [0], expected either [true] or [false]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|DocValueFormat
operator|.
name|BOOLEAN
operator|.
name|parseLong
argument_list|(
literal|"False"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot parse boolean [False], expected either [true] or [false]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIPParse
specifier|public
name|void
name|testIPParse
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"192.168.1.7"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|DocValueFormat
operator|.
name|IP
operator|.
name|parseBytesRef
argument_list|(
literal|"192.168.1.7"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"::1"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|DocValueFormat
operator|.
name|IP
operator|.
name|parseBytesRef
argument_list|(
literal|"::1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

