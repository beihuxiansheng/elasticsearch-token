begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.profile
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|English
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|MultiSearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ShardSearchFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|RandomQueryGenerator
operator|.
name|randomQueryBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|DoubleMatcher
operator|.
name|nearlyEqual
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|isEmptyOrNullString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_class
DECL|class|QueryProfilerIT
specifier|public
class|class
name|QueryProfilerIT
extends|extends
name|ESIntegTestCase
block|{
comment|/**      * This test simply checks to make sure nothing crashes.  Test indexes 100-150 documents,      * constructs 20-100 random queries and tries to profile them      */
DECL|method|testProfileQuery
specifier|public
name|void
name|testProfileQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|docs
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"field2"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|stringFields
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"field1"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|numericFields
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"field2"
argument_list|)
decl_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|int
name|iters
init|=
name|between
argument_list|(
literal|20
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|QueryBuilder
name|q
init|=
name|randomQueryBuilder
argument_list|(
name|stringFields
argument_list|,
name|numericFields
argument_list|,
name|numDocs
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Query: {}"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|q
argument_list|)
operator|.
name|setProfile
argument_list|(
literal|true
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Profile response element should not be null"
argument_list|,
name|resp
operator|.
name|getProfileResults
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Profile response should not be an empty array"
argument_list|,
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|not
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProfileShardResult
argument_list|>
argument_list|>
name|shard
range|:
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|ProfileShardResult
name|searchProfiles
range|:
name|shard
operator|.
name|getValue
argument_list|()
control|)
block|{
for|for
control|(
name|ProfileResult
name|result
range|:
name|searchProfiles
operator|.
name|getQueryResults
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|result
operator|.
name|getQueryName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getLuceneDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CollectorResult
name|result
init|=
name|searchProfiles
operator|.
name|getCollectorResult
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getName
argument_list|()
argument_list|,
name|not
argument_list|(
name|isEmptyOrNullString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * This test generates 1-10 random queries and executes a profiled and non-profiled      * search for each query.  It then does some basic sanity checking of score and hits      * to make sure the profiling doesn't interfere with the hits being returned      */
DECL|method|testProfileMatchesRegular
specifier|public
name|void
name|testProfileMatchesRegular
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|docs
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"field2"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|stringFields
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"field1"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|numericFields
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"field2"
argument_list|)
decl_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|int
name|iters
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|QueryBuilder
name|q
init|=
name|randomQueryBuilder
argument_list|(
name|stringFields
argument_list|,
name|numericFields
argument_list|,
name|numDocs
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Query: {}"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|SearchRequestBuilder
name|vanilla
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|q
argument_list|)
operator|.
name|setProfile
argument_list|(
literal|false
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"_score"
argument_list|,
name|SortOrder
operator|.
name|DESC
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"_uid"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"_primary"
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
decl_stmt|;
name|SearchRequestBuilder
name|profile
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|q
argument_list|)
operator|.
name|setProfile
argument_list|(
literal|true
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"_score"
argument_list|,
name|SortOrder
operator|.
name|DESC
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"_uid"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"_primary"
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
decl_stmt|;
name|MultiSearchResponse
operator|.
name|Item
index|[]
name|responses
init|=
name|client
argument_list|()
operator|.
name|prepareMultiSearch
argument_list|()
operator|.
name|add
argument_list|(
name|vanilla
argument_list|)
operator|.
name|add
argument_list|(
name|profile
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getResponses
argument_list|()
decl_stmt|;
name|SearchResponse
name|vanillaResponse
init|=
name|responses
index|[
literal|0
index|]
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|SearchResponse
name|profileResponse
init|=
name|responses
index|[
literal|1
index|]
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|float
name|vanillaMaxScore
init|=
name|vanillaResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getMaxScore
argument_list|()
decl_stmt|;
name|float
name|profileMaxScore
init|=
name|profileResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getMaxScore
argument_list|()
decl_stmt|;
if|if
condition|(
name|Float
operator|.
name|isNaN
argument_list|(
name|vanillaMaxScore
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Vanilla maxScore is NaN but Profile is not ["
operator|+
name|profileMaxScore
operator|+
literal|"]"
argument_list|,
name|Float
operator|.
name|isNaN
argument_list|(
name|profileMaxScore
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Profile maxScore of ["
operator|+
name|profileMaxScore
operator|+
literal|"] is not close to Vanilla maxScore ["
operator|+
name|vanillaMaxScore
operator|+
literal|"]"
argument_list|,
name|nearlyEqual
argument_list|(
name|vanillaMaxScore
argument_list|,
name|profileMaxScore
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
literal|"Profile totalHits of ["
operator|+
name|profileResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
operator|+
literal|"] is not close to Vanilla totalHits ["
operator|+
name|vanillaResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
operator|+
literal|"]"
argument_list|,
name|vanillaResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|profileResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SearchHit
index|[]
name|vanillaHits
init|=
name|vanillaResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|SearchHit
index|[]
name|profileHits
init|=
name|profileResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|vanillaHits
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertThat
argument_list|(
literal|"Profile hit #"
operator|+
name|j
operator|+
literal|" has a different ID from Vanilla"
argument_list|,
name|vanillaHits
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|profileHits
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This test verifies that the output is reasonable for a simple, non-nested query      */
DECL|method|testSimpleMatch
specifier|public
name|void
name|testSimpleMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|docs
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"field2"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|QueryBuilder
name|q
init|=
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"one"
argument_list|)
decl_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|q
argument_list|)
operator|.
name|setProfile
argument_list|(
literal|true
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProfileShardResult
argument_list|>
argument_list|>
name|p
init|=
name|resp
operator|.
name|getProfileResults
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Profile response should not be an empty array"
argument_list|,
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|not
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProfileShardResult
argument_list|>
argument_list|>
name|shardResult
range|:
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|ProfileShardResult
name|searchProfiles
range|:
name|shardResult
operator|.
name|getValue
argument_list|()
control|)
block|{
for|for
control|(
name|ProfileResult
name|result
range|:
name|searchProfiles
operator|.
name|getQueryResults
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|result
operator|.
name|getQueryName
argument_list|()
argument_list|,
literal|"TermQuery"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getLuceneDescription
argument_list|()
argument_list|,
literal|"field1:one"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getTimeBreakdown
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CollectorResult
name|result
init|=
name|searchProfiles
operator|.
name|getCollectorResult
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getName
argument_list|()
argument_list|,
name|not
argument_list|(
name|isEmptyOrNullString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This test verifies that the output is reasonable for a nested query      */
DECL|method|testBool
specifier|public
name|void
name|testBool
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|docs
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"field2"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|QueryBuilder
name|q
init|=
name|QueryBuilders
operator|.
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"two"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|q
argument_list|)
operator|.
name|setProfile
argument_list|(
literal|true
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProfileShardResult
argument_list|>
argument_list|>
name|p
init|=
name|resp
operator|.
name|getProfileResults
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Profile response should not be an empty array"
argument_list|,
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|not
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProfileShardResult
argument_list|>
argument_list|>
name|shardResult
range|:
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|ProfileShardResult
name|searchProfiles
range|:
name|shardResult
operator|.
name|getValue
argument_list|()
control|)
block|{
for|for
control|(
name|ProfileResult
name|result
range|:
name|searchProfiles
operator|.
name|getQueryResults
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|result
operator|.
name|getQueryName
argument_list|()
argument_list|,
literal|"BooleanQuery"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getLuceneDescription
argument_list|()
argument_list|,
literal|"+field1:one +field1:two"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getTimeBreakdown
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getProfiledChildren
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Check the children
name|List
argument_list|<
name|ProfileResult
argument_list|>
name|children
init|=
name|result
operator|.
name|getProfiledChildren
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ProfileResult
name|childProfile
init|=
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|childProfile
operator|.
name|getQueryName
argument_list|()
argument_list|,
literal|"TermQuery"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|childProfile
operator|.
name|getLuceneDescription
argument_list|()
argument_list|,
literal|"field1:one"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|childProfile
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|childProfile
operator|.
name|getTimeBreakdown
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|childProfile
operator|.
name|getProfiledChildren
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|childProfile
operator|=
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|childProfile
operator|.
name|getQueryName
argument_list|()
argument_list|,
literal|"TermQuery"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|childProfile
operator|.
name|getLuceneDescription
argument_list|()
argument_list|,
literal|"field1:two"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|childProfile
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|childProfile
operator|.
name|getTimeBreakdown
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CollectorResult
name|result
init|=
name|searchProfiles
operator|.
name|getCollectorResult
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getName
argument_list|()
argument_list|,
name|not
argument_list|(
name|isEmptyOrNullString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Tests a boolean query with no children clauses      */
DECL|method|testEmptyBool
specifier|public
name|void
name|testEmptyBool
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|docs
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"field2"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|QueryBuilder
name|q
init|=
name|QueryBuilders
operator|.
name|boolQuery
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Query: {}"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|q
argument_list|)
operator|.
name|setProfile
argument_list|(
literal|true
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Profile response element should not be null"
argument_list|,
name|resp
operator|.
name|getProfileResults
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Profile response should not be an empty array"
argument_list|,
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|not
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProfileShardResult
argument_list|>
argument_list|>
name|shardResult
range|:
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|ProfileShardResult
name|searchProfiles
range|:
name|shardResult
operator|.
name|getValue
argument_list|()
control|)
block|{
for|for
control|(
name|ProfileResult
name|result
range|:
name|searchProfiles
operator|.
name|getQueryResults
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|result
operator|.
name|getQueryName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getLuceneDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getTimeBreakdown
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CollectorResult
name|result
init|=
name|searchProfiles
operator|.
name|getCollectorResult
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getName
argument_list|()
argument_list|,
name|not
argument_list|(
name|isEmptyOrNullString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Tests a series of three nested boolean queries with a single "leaf" match query.      * The rewrite process will "collapse" this down to a single bool, so this tests to make sure      * nothing catastrophic happens during that fairly substantial rewrite      */
DECL|method|testCollapsingBool
specifier|public
name|void
name|testCollapsingBool
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|docs
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"field2"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|QueryBuilder
name|q
init|=
name|QueryBuilders
operator|.
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|QueryBuilders
operator|.
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|QueryBuilders
operator|.
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Query: {}"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|q
argument_list|)
operator|.
name|setProfile
argument_list|(
literal|true
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Profile response element should not be null"
argument_list|,
name|resp
operator|.
name|getProfileResults
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Profile response should not be an empty array"
argument_list|,
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|not
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProfileShardResult
argument_list|>
argument_list|>
name|shardResult
range|:
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|ProfileShardResult
name|searchProfiles
range|:
name|shardResult
operator|.
name|getValue
argument_list|()
control|)
block|{
for|for
control|(
name|ProfileResult
name|result
range|:
name|searchProfiles
operator|.
name|getQueryResults
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|result
operator|.
name|getQueryName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getLuceneDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getTimeBreakdown
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CollectorResult
name|result
init|=
name|searchProfiles
operator|.
name|getCollectorResult
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getName
argument_list|()
argument_list|,
name|not
argument_list|(
name|isEmptyOrNullString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testBoosting
specifier|public
name|void
name|testBoosting
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|docs
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"field2"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|QueryBuilder
name|q
init|=
name|QueryBuilders
operator|.
name|boostingQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"one"
argument_list|)
argument_list|,
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"two"
argument_list|)
argument_list|)
operator|.
name|boost
argument_list|(
name|randomFloat
argument_list|()
argument_list|)
operator|.
name|negativeBoost
argument_list|(
name|randomFloat
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Query: {}"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|q
argument_list|)
operator|.
name|setProfile
argument_list|(
literal|true
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Profile response element should not be null"
argument_list|,
name|resp
operator|.
name|getProfileResults
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Profile response should not be an empty array"
argument_list|,
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|not
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProfileShardResult
argument_list|>
argument_list|>
name|shardResult
range|:
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|ProfileShardResult
name|searchProfiles
range|:
name|shardResult
operator|.
name|getValue
argument_list|()
control|)
block|{
for|for
control|(
name|ProfileResult
name|result
range|:
name|searchProfiles
operator|.
name|getQueryResults
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|result
operator|.
name|getQueryName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getLuceneDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getTimeBreakdown
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CollectorResult
name|result
init|=
name|searchProfiles
operator|.
name|getCollectorResult
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getName
argument_list|()
argument_list|,
name|not
argument_list|(
name|isEmptyOrNullString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDisMaxRange
specifier|public
name|void
name|testDisMaxRange
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|docs
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"field2"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|QueryBuilder
name|q
init|=
name|QueryBuilders
operator|.
name|disMaxQuery
argument_list|()
operator|.
name|boost
argument_list|(
literal|0.33703882f
argument_list|)
operator|.
name|add
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|from
argument_list|(
literal|null
argument_list|)
operator|.
name|to
argument_list|(
literal|73
argument_list|)
operator|.
name|includeLower
argument_list|(
literal|true
argument_list|)
operator|.
name|includeUpper
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Query: {}"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|q
argument_list|)
operator|.
name|setProfile
argument_list|(
literal|true
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Profile response element should not be null"
argument_list|,
name|resp
operator|.
name|getProfileResults
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Profile response should not be an empty array"
argument_list|,
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|not
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProfileShardResult
argument_list|>
argument_list|>
name|shardResult
range|:
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|ProfileShardResult
name|searchProfiles
range|:
name|shardResult
operator|.
name|getValue
argument_list|()
control|)
block|{
for|for
control|(
name|ProfileResult
name|result
range|:
name|searchProfiles
operator|.
name|getQueryResults
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|result
operator|.
name|getQueryName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getLuceneDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getTimeBreakdown
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CollectorResult
name|result
init|=
name|searchProfiles
operator|.
name|getCollectorResult
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getName
argument_list|()
argument_list|,
name|not
argument_list|(
name|isEmptyOrNullString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRange
specifier|public
name|void
name|testRange
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|docs
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"field2"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|QueryBuilder
name|q
init|=
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|to
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Query: {}"
argument_list|,
name|q
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|q
argument_list|)
operator|.
name|setProfile
argument_list|(
literal|true
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Profile response element should not be null"
argument_list|,
name|resp
operator|.
name|getProfileResults
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Profile response should not be an empty array"
argument_list|,
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|not
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProfileShardResult
argument_list|>
argument_list|>
name|shardResult
range|:
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|ProfileShardResult
name|searchProfiles
range|:
name|shardResult
operator|.
name|getValue
argument_list|()
control|)
block|{
for|for
control|(
name|ProfileResult
name|result
range|:
name|searchProfiles
operator|.
name|getQueryResults
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|result
operator|.
name|getQueryName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getLuceneDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getTimeBreakdown
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CollectorResult
name|result
init|=
name|searchProfiles
operator|.
name|getCollectorResult
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getName
argument_list|()
argument_list|,
name|not
argument_list|(
name|isEmptyOrNullString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testPhrase
specifier|public
name|void
name|testPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|docs
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
operator|+
literal|" "
operator|+
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
literal|"field2"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|QueryBuilder
name|q
init|=
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"one two"
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Query: {}"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|q
argument_list|)
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setProfile
argument_list|(
literal|true
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|getShardFailures
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ShardSearchFailure
name|f
range|:
name|resp
operator|.
name|getShardFailures
argument_list|()
control|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Shard search failure: {}"
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Profile response element should not be null"
argument_list|,
name|resp
operator|.
name|getProfileResults
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Profile response should not be an empty array"
argument_list|,
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|not
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ProfileShardResult
argument_list|>
argument_list|>
name|shardResult
range|:
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|ProfileShardResult
name|searchProfiles
range|:
name|shardResult
operator|.
name|getValue
argument_list|()
control|)
block|{
for|for
control|(
name|ProfileResult
name|result
range|:
name|searchProfiles
operator|.
name|getQueryResults
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|result
operator|.
name|getQueryName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getLuceneDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getTimeBreakdown
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CollectorResult
name|result
init|=
name|searchProfiles
operator|.
name|getCollectorResult
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getName
argument_list|()
argument_list|,
name|not
argument_list|(
name|isEmptyOrNullString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This test makes sure no profile results are returned when profiling is disabled      */
DECL|method|testNoProfile
specifier|public
name|void
name|testNoProfile
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|docs
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"field2"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|QueryBuilder
name|q
init|=
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|to
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Query: {}"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|q
argument_list|)
operator|.
name|setProfile
argument_list|(
literal|false
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Profile response element should be an empty map"
argument_list|,
name|resp
operator|.
name|getProfileResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

