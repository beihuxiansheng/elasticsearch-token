begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.rescore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Test fixing the ordinals and names in {@link QueryRescoreMode}. These should not be changed since we  * use the names in the parser and the ordinals in serialization.  */
end_comment

begin_class
DECL|class|QueryRescoreModeTests
specifier|public
class|class
name|QueryRescoreModeTests
extends|extends
name|ESTestCase
block|{
comment|/**      * Test @link {@link QueryRescoreMode} enum ordinals and names, since serilaization relies on it      */
DECL|method|testQueryRescoreMode
specifier|public
name|void
name|testQueryRescoreMode
parameter_list|()
throws|throws
name|IOException
block|{
name|float
name|primary
init|=
name|randomFloat
argument_list|()
decl_stmt|;
name|float
name|secondary
init|=
name|randomFloat
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|QueryRescoreMode
operator|.
name|Avg
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"avg"
argument_list|,
name|QueryRescoreMode
operator|.
name|Avg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|primary
operator|+
name|secondary
operator|)
operator|/
literal|2.0f
argument_list|,
name|QueryRescoreMode
operator|.
name|Avg
operator|.
name|combine
argument_list|(
name|primary
argument_list|,
name|secondary
argument_list|)
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|QueryRescoreMode
operator|.
name|Max
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max"
argument_list|,
name|QueryRescoreMode
operator|.
name|Max
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|primary
argument_list|,
name|secondary
argument_list|)
argument_list|,
name|QueryRescoreMode
operator|.
name|Max
operator|.
name|combine
argument_list|(
name|primary
argument_list|,
name|secondary
argument_list|)
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|QueryRescoreMode
operator|.
name|Min
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"min"
argument_list|,
name|QueryRescoreMode
operator|.
name|Min
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|primary
argument_list|,
name|secondary
argument_list|)
argument_list|,
name|QueryRescoreMode
operator|.
name|Min
operator|.
name|combine
argument_list|(
name|primary
argument_list|,
name|secondary
argument_list|)
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|QueryRescoreMode
operator|.
name|Total
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sum"
argument_list|,
name|QueryRescoreMode
operator|.
name|Total
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|primary
operator|+
name|secondary
argument_list|,
name|QueryRescoreMode
operator|.
name|Total
operator|.
name|combine
argument_list|(
name|primary
argument_list|,
name|secondary
argument_list|)
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|QueryRescoreMode
operator|.
name|Multiply
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"product"
argument_list|,
name|QueryRescoreMode
operator|.
name|Multiply
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|primary
operator|*
name|secondary
argument_list|,
name|QueryRescoreMode
operator|.
name|Multiply
operator|.
name|combine
argument_list|(
name|primary
argument_list|,
name|secondary
argument_list|)
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

