begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.rescore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|English
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|CombineFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescoreBuilder
operator|.
name|QueryRescorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertFirstHit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertFourthHit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSecondHit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertThirdHit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|hasId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|hasScore
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|QueryRescorerIT
specifier|public
class|class
name|QueryRescorerIT
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Test
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"Need to fix default window size for rescorers so that they are applied"
argument_list|)
comment|// NORELEASE
DECL|method|testEnforceWindowSize
specifier|public
name|void
name|testEnforceWindowSize
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// this
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|ensureYellow
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|int
name|numShards
init|=
name|getNumShards
argument_list|(
literal|"test"
argument_list|)
operator|.
name|numPrimaries
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|iters
condition|;
name|j
operator|++
control|)
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|boostMode
argument_list|(
literal|"replace"
argument_list|)
operator|.
name|add
argument_list|(
name|ScoreFunctionBuilders
operator|.
name|weightFactorFunction
argument_list|(
literal|100
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|0.0f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|1
argument_list|)
operator|.
name|setSize
argument_list|(
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasScore
argument_list|(
literal|100.f
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numDocsWith100AsAScore
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|float
name|score
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
name|i
index|]
operator|.
name|getScore
argument_list|()
decl_stmt|;
if|if
condition|(
name|score
operator|==
literal|100f
condition|)
block|{
name|numDocsWith100AsAScore
operator|+=
literal|1
expr_stmt|;
block|}
block|}
comment|// we cannot assert that they are equal since some shards might not have docs at all
name|assertThat
argument_list|(
name|numDocsWith100AsAScore
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|numShards
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRescorePhrase
specifier|public
name|void
name|testRescorePhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown fox"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick lazy huge brown fox jumps over the tree "
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"quick huge brown"
argument_list|,
literal|"field2"
argument_list|,
literal|"the quick lazy huge brown fox jumps over the tree"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick brown"
argument_list|)
operator|.
name|slop
argument_list|(
literal|2
argument_list|)
operator|.
name|boost
argument_list|(
literal|4.0f
argument_list|)
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|5
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|1
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|2
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|5
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
operator|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|)
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|5
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoreDocs
specifier|public
name|void
name|testMoreDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.synonym.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.synonym.filter"
argument_list|,
literal|"synonym"
argument_list|,
literal|"lowercase"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.synonym.type"
argument_list|,
literal|"synonym"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putArray
argument_list|(
literal|"index.analysis.filter.synonym.synonyms"
argument_list|,
literal|"ave => ave, avenue"
argument_list|,
literal|"street => str, street"
argument_list|)
expr_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"synonym"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
operator|.
name|setSettings
argument_list|(
name|builder
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"massachusetts avenue boston massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington avenue boston massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"boston avenue lexington massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"boston road lexington massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington street lexington massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"massachusetts avenue lexington massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"bosten street san franciso california"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"hollywood boulevard los angeles california"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"1st street boston massachussetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"1st street boston massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"11"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"2st street boston massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"12"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"3st street boston massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington avenue massachusetts"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington avenue massachusetts"
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|0.6f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|20
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington avenue massachusetts"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|DFS_QUERY_THEN_FETCH
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington avenue massachusetts"
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|0.6f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|20
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure non-zero from works:
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington avenue massachusetts"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|2
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|DFS_QUERY_THEN_FETCH
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington avenue massachusetts"
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|0.6f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|20
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Tests a rescore window smaller than number of hits:
annotation|@
name|Test
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"Need to fix default window size for rescorers so that they are applied"
argument_list|)
comment|// NORELEASE
DECL|method|testSmallRescoreWindow
specifier|public
name|void
name|testSmallRescoreWindow
parameter_list|()
throws|throws
name|Exception
block|{
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.synonym.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.synonym.filter"
argument_list|,
literal|"synonym"
argument_list|,
literal|"lowercase"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.synonym.type"
argument_list|,
literal|"synonym"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putArray
argument_list|(
literal|"index.analysis.filter.synonym.synonyms"
argument_list|,
literal|"ave => ave, avenue"
argument_list|,
literal|"street => str, street"
argument_list|)
expr_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"synonym"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
operator|.
name|setSettings
argument_list|(
name|builder
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"massachusetts avenue lexington massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington massachusetts avenue"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington avenue boston massachusetts road"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"massachusetts"
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFourthHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now, rescore only top 2 hits w/ proximity:
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"massachusetts"
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington avenue massachusetts"
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|0.6f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|2
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// Only top 2 hits were re-ordered:
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFourthHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now, rescore only top 3 hits w/ proximity:
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"massachusetts"
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington avenue massachusetts"
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|0.6f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|3
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// Only top 3 hits were re-ordered:
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFourthHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Tests a rescorer that penalizes the scores:
annotation|@
name|Test
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"Need to fix default window size for rescorers so that they are applied"
argument_list|)
comment|// NORELEASE
DECL|method|testRescorerMadeScoresWorse
specifier|public
name|void
name|testRescorerMadeScoresWorse
parameter_list|()
throws|throws
name|Exception
block|{
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.synonym.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.synonym.filter"
argument_list|,
literal|"synonym"
argument_list|,
literal|"lowercase"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.synonym.type"
argument_list|,
literal|"synonym"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putArray
argument_list|(
literal|"index.analysis.filter.synonym.synonyms"
argument_list|,
literal|"ave => ave, avenue"
argument_list|,
literal|"street => str, street"
argument_list|)
expr_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"synonym"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
operator|.
name|setSettings
argument_list|(
name|builder
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"massachusetts avenue lexington massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington massachusetts avenue"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington avenue boston massachusetts road"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"massachusetts"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFourthHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now, penalizing rescore (nothing matches the rescore query):
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"massachusetts"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington avenue massachusetts"
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|1.0f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
operator|-
literal|1f
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|3
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// 6 and 1 got worse, and then the hit (2) outside the rescore window were sorted ahead:
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFourthHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Comparator that sorts hits and rescored hits in the same way.
comment|// The rescore uses the docId as tie, while regular search uses the slot the hit is in as a tie if score
comment|// and shard id are equal during merging shard results.
comment|// This comparator uses a custom tie in case the scores are equal, so that both regular hits and rescored hits
comment|// are sorted equally. This is fine since tests only care about the fact the scores should be equal, not ordering.
DECL|field|searchHitsComparator
specifier|private
specifier|final
specifier|static
name|Comparator
argument_list|<
name|SearchHit
argument_list|>
name|searchHitsComparator
init|=
operator|new
name|Comparator
argument_list|<
name|SearchHit
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|SearchHit
name|hit1
parameter_list|,
name|SearchHit
name|hit2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|Float
operator|.
name|compare
argument_list|(
name|hit2
operator|.
name|getScore
argument_list|()
argument_list|,
name|hit1
operator|.
name|getScore
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
return|return
name|hit1
operator|.
name|id
argument_list|()
operator|.
name|compareTo
argument_list|(
name|hit2
operator|.
name|id
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|cmp
return|;
block|}
block|}
block|}
decl_stmt|;
DECL|method|assertEquivalent
specifier|private
specifier|static
name|void
name|assertEquivalent
parameter_list|(
name|String
name|query
parameter_list|,
name|SearchResponse
name|plain
parameter_list|,
name|SearchResponse
name|rescored
parameter_list|)
block|{
name|assertNoFailures
argument_list|(
name|plain
argument_list|)
expr_stmt|;
name|assertNoFailures
argument_list|(
name|rescored
argument_list|)
expr_stmt|;
name|SearchHits
name|leftHits
init|=
name|plain
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|SearchHits
name|rightHits
init|=
name|rescored
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|leftHits
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|rightHits
operator|.
name|getTotalHits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|leftHits
operator|.
name|getHits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|rightHits
operator|.
name|getHits
argument_list|()
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|SearchHit
index|[]
name|hits
init|=
name|leftHits
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|SearchHit
index|[]
name|rHits
init|=
name|rightHits
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|hits
argument_list|,
name|searchHitsComparator
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|rHits
argument_list|,
name|searchHitsComparator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
literal|"query: "
operator|+
name|query
argument_list|,
name|hits
index|[
name|i
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|rHits
index|[
name|i
index|]
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hits
index|[
name|i
index|]
operator|.
name|getScore
argument_list|()
operator|==
name|hits
index|[
name|hits
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getScore
argument_list|()
condition|)
block|{
return|return;
comment|// we need to cut off here since this is the tail of the queue and we might not have fetched enough docs
block|}
name|assertThat
argument_list|(
literal|"query: "
operator|+
name|query
argument_list|,
name|hits
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|rHits
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertEquivalentOrSubstringMatch
specifier|private
specifier|static
name|void
name|assertEquivalentOrSubstringMatch
parameter_list|(
name|String
name|query
parameter_list|,
name|SearchResponse
name|plain
parameter_list|,
name|SearchResponse
name|rescored
parameter_list|)
block|{
name|assertNoFailures
argument_list|(
name|plain
argument_list|)
expr_stmt|;
name|assertNoFailures
argument_list|(
name|rescored
argument_list|)
expr_stmt|;
name|SearchHits
name|leftHits
init|=
name|plain
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|SearchHits
name|rightHits
init|=
name|rescored
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|leftHits
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|rightHits
operator|.
name|getTotalHits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|leftHits
operator|.
name|getHits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|rightHits
operator|.
name|getHits
argument_list|()
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|SearchHit
index|[]
name|hits
init|=
name|leftHits
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|SearchHit
index|[]
name|otherHits
init|=
name|rightHits
operator|.
name|getHits
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hits
index|[
literal|0
index|]
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|otherHits
index|[
literal|0
index|]
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
operator|(
operator|(
name|String
operator|)
name|otherHits
index|[
literal|0
index|]
operator|.
name|sourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|)
operator|.
name|contains
argument_list|(
name|query
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|hits
argument_list|,
name|searchHitsComparator
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|otherHits
argument_list|,
name|searchHitsComparator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hits
index|[
name|i
index|]
operator|.
name|getScore
argument_list|()
operator|==
name|hits
index|[
name|hits
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getScore
argument_list|()
condition|)
block|{
return|return;
comment|// we need to cut off here since this is the tail of the queue and we might not have fetched enough docs
block|}
name|assertThat
argument_list|(
name|query
argument_list|,
name|hits
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|rightHits
operator|.
name|getHits
argument_list|()
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
comment|// forces QUERY_THEN_FETCH because of https://github.com/elasticsearch/elasticsearch/issues/4829
DECL|method|testEquivalence
specifier|public
name|void
name|testEquivalence
parameter_list|()
throws|throws
name|Exception
block|{
comment|// no dummy docs since merges can change scores while we run queries.
name|int
name|numDocs
init|=
name|indexRandomNumbers
argument_list|(
literal|"whitespace"
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|50
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|int
name|resultSize
init|=
name|numDocs
decl_stmt|;
name|int
name|rescoreWindow
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
operator|*
name|resultSize
decl_stmt|;
name|String
name|intToEnglish
init|=
name|English
operator|.
name|intToEnglish
argument_list|(
name|between
argument_list|(
literal|0
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|query
init|=
name|intToEnglish
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|SearchResponse
name|rescored
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"test"
argument_list|)
comment|// ensure we hit the same shards for tie-breaking
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
name|query
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
name|resultSize
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|constantScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
name|intToEnglish
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|1.0f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
comment|// no weight - so we basically use the same score as the actual query
operator|.
name|setRescoreWindow
argument_list|(
name|rescoreWindow
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|SearchResponse
name|plain
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"test"
argument_list|)
comment|// ensure we hit the same shards for tie-breaking
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
name|query
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
name|resultSize
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
comment|// check equivalence
name|assertEquivalent
argument_list|(
name|query
argument_list|,
name|plain
argument_list|,
name|rescored
argument_list|)
expr_stmt|;
name|rescored
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"test"
argument_list|)
comment|// ensure we hit the same shards for tie-breaking
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
name|query
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
name|resultSize
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|constantScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"not in the index"
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|1.0f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
name|rescoreWindow
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// check equivalence
name|assertEquivalent
argument_list|(
name|query
argument_list|,
name|plain
argument_list|,
name|rescored
argument_list|)
expr_stmt|;
name|rescored
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"test"
argument_list|)
comment|// ensure we hit the same shards for tie-breaking
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
name|query
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
name|resultSize
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
name|intToEnglish
argument_list|)
operator|.
name|slop
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|1.0f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|2
operator|*
name|rescoreWindow
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// check equivalence or if the first match differs we check if the phrase is a substring of the top doc
name|assertEquivalentOrSubstringMatch
argument_list|(
name|intToEnglish
argument_list|,
name|plain
argument_list|,
name|rescored
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExplain
specifier|public
name|void
name|testExplain
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown fox"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick lazy huge brown fox jumps over the tree"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"quick huge brown"
argument_list|,
literal|"field2"
argument_list|,
literal|"the quick lazy huge brown fox jumps over the tree"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|DFS_QUERY_THEN_FETCH
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|slop
argument_list|(
literal|2
argument_list|)
operator|.
name|boost
argument_list|(
literal|4.0f
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|0.5f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|0.4f
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|5
argument_list|)
operator|.
name|setExplain
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
operator|.
name|explanation
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
operator|.
name|explanation
argument_list|()
operator|.
name|isMatch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
operator|.
name|explanation
argument_list|()
operator|.
name|getDetails
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
operator|.
name|explanation
argument_list|()
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|isMatch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|2
condition|)
block|{
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
operator|.
name|explanation
argument_list|()
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0.5f
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
operator|.
name|explanation
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"sum of:"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
operator|.
name|explanation
argument_list|()
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
operator|.
name|explanation
argument_list|()
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0.4f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
index|[]
name|scoreModes
init|=
operator|new
name|String
index|[]
block|{
literal|"max"
block|,
literal|"min"
block|,
literal|"avg"
block|,
literal|"total"
block|,
literal|"multiply"
block|,
literal|""
block|}
decl_stmt|;
name|String
index|[]
name|descriptionModes
init|=
operator|new
name|String
index|[]
block|{
literal|"max of:"
block|,
literal|"min of:"
block|,
literal|"avg of:"
block|,
literal|"sum of:"
block|,
literal|"product of:"
block|,
literal|"sum of:"
block|}
decl_stmt|;
for|for
control|(
name|int
name|innerMode
init|=
literal|0
init|;
name|innerMode
operator|<
name|scoreModes
operator|.
name|length
condition|;
name|innerMode
operator|++
control|)
block|{
name|QueryRescorer
name|innerRescoreQuery
init|=
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|boost
argument_list|(
literal|4.0f
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|0.5f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|0.4f
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|scoreModes
index|[
name|innerMode
index|]
argument_list|)
condition|)
block|{
name|innerRescoreQuery
operator|.
name|setScoreMode
argument_list|(
name|scoreModes
index|[
name|innerMode
index|]
argument_list|)
expr_stmt|;
block|}
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|DFS_QUERY_THEN_FETCH
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|innerRescoreQuery
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|5
argument_list|)
operator|.
name|setExplain
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|j
argument_list|)
operator|.
name|explanation
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|descriptionModes
index|[
name|innerMode
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|outerMode
init|=
literal|0
init|;
name|outerMode
operator|<
name|scoreModes
operator|.
name|length
condition|;
name|outerMode
operator|++
control|)
block|{
name|QueryRescorer
name|outerRescoreQuery
init|=
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|boost
argument_list|(
literal|4.0f
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|0.5f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|0.4f
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|scoreModes
index|[
name|outerMode
index|]
argument_list|)
condition|)
block|{
name|outerRescoreQuery
operator|.
name|setScoreMode
argument_list|(
name|scoreModes
index|[
name|outerMode
index|]
argument_list|)
expr_stmt|;
block|}
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|DFS_QUERY_THEN_FETCH
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|addRescorer
argument_list|(
name|innerRescoreQuery
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|5
argument_list|)
operator|.
name|addRescorer
argument_list|(
name|outerRescoreQuery
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|10
argument_list|)
operator|.
name|setExplain
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|Explanation
name|explanation
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|j
argument_list|)
operator|.
name|explanation
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|explanation
operator|.
name|getDescription
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|descriptionModes
index|[
name|outerMode
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|explanation
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDescription
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|descriptionModes
index|[
name|innerMode
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testScoring
specifier|public
name|void
name|testScoring
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numDocs
init|=
name|indexRandomNumbers
argument_list|(
literal|"keyword"
argument_list|)
decl_stmt|;
name|String
index|[]
name|scoreModes
init|=
operator|new
name|String
index|[]
block|{
literal|"max"
block|,
literal|"min"
block|,
literal|"avg"
block|,
literal|"total"
block|,
literal|"multiply"
block|,
literal|""
block|}
decl_stmt|;
name|float
name|primaryWeight
init|=
literal|1.1f
decl_stmt|;
name|float
name|secondaryWeight
init|=
literal|1.6f
decl_stmt|;
for|for
control|(
name|String
name|scoreMode
range|:
name|scoreModes
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
operator|-
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|intToEnglish
init|=
operator|new
name|String
index|[]
block|{
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
block|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
operator|+
literal|1
argument_list|)
block|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
operator|+
literal|2
argument_list|)
block|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
operator|+
literal|3
argument_list|)
block|}
decl_stmt|;
name|QueryRescorer
name|rescoreQuery
init|=
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|boolQuery
argument_list|()
operator|.
name|disableCoord
argument_list|(
literal|true
argument_list|)
operator|.
name|should
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
name|intToEnglish
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|boostMode
argument_list|(
name|CombineFunction
operator|.
name|REPLACE
argument_list|)
operator|.
name|add
argument_list|(
name|ScoreFunctionBuilders
operator|.
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"5.0f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
name|intToEnglish
index|[
literal|1
index|]
argument_list|)
argument_list|)
operator|.
name|boostMode
argument_list|(
name|CombineFunction
operator|.
name|REPLACE
argument_list|)
operator|.
name|add
argument_list|(
name|ScoreFunctionBuilders
operator|.
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"7.0f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
name|intToEnglish
index|[
literal|3
index|]
argument_list|)
argument_list|)
operator|.
name|boostMode
argument_list|(
name|CombineFunction
operator|.
name|REPLACE
argument_list|)
operator|.
name|add
argument_list|(
name|ScoreFunctionBuilders
operator|.
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"0.0f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
name|primaryWeight
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
name|secondaryWeight
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|scoreMode
argument_list|)
condition|)
block|{
name|rescoreQuery
operator|.
name|setScoreMode
argument_list|(
name|scoreMode
argument_list|)
expr_stmt|;
block|}
name|SearchResponse
name|rescored
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setPreference
argument_list|(
literal|"test"
argument_list|)
comment|// ensure we hit the same shards for tie-breaking
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|boolQuery
argument_list|()
operator|.
name|disableCoord
argument_list|(
literal|true
argument_list|)
operator|.
name|should
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
name|intToEnglish
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|boostMode
argument_list|(
name|CombineFunction
operator|.
name|REPLACE
argument_list|)
operator|.
name|add
argument_list|(
name|ScoreFunctionBuilders
operator|.
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"2.0f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
name|intToEnglish
index|[
literal|1
index|]
argument_list|)
argument_list|)
operator|.
name|boostMode
argument_list|(
name|CombineFunction
operator|.
name|REPLACE
argument_list|)
operator|.
name|add
argument_list|(
name|ScoreFunctionBuilders
operator|.
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"3.0f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
name|intToEnglish
index|[
literal|2
index|]
argument_list|)
argument_list|)
operator|.
name|boostMode
argument_list|(
name|CombineFunction
operator|.
name|REPLACE
argument_list|)
operator|.
name|add
argument_list|(
name|ScoreFunctionBuilders
operator|.
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"5.0f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
name|intToEnglish
index|[
literal|3
index|]
argument_list|)
argument_list|)
operator|.
name|boostMode
argument_list|(
name|CombineFunction
operator|.
name|REPLACE
argument_list|)
operator|.
name|add
argument_list|(
name|ScoreFunctionBuilders
operator|.
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"0.2f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|10
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|rescoreQuery
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|50
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|rescored
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"total"
operator|.
name|equals
argument_list|(
name|scoreMode
argument_list|)
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|scoreMode
argument_list|)
condition|)
block|{
name|assertFirstHit
argument_list|(
name|rescored
argument_list|,
name|hasId
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|rescored
argument_list|,
name|hasId
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|rescored
argument_list|,
name|hasId
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3.0f
operator|*
name|primaryWeight
operator|+
literal|7.0f
operator|*
name|secondaryWeight
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
operator|*
name|primaryWeight
operator|+
literal|5.0f
operator|*
name|secondaryWeight
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|2
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.0f
operator|*
name|primaryWeight
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|3
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0.2f
operator|*
name|primaryWeight
operator|+
literal|0.0f
operator|*
name|secondaryWeight
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"max"
operator|.
name|equals
argument_list|(
name|scoreMode
argument_list|)
condition|)
block|{
name|assertFirstHit
argument_list|(
name|rescored
argument_list|,
name|hasId
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|rescored
argument_list|,
name|hasId
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|rescored
argument_list|,
name|hasId
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|7.0f
operator|*
name|secondaryWeight
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.0f
operator|*
name|secondaryWeight
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|2
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.0f
operator|*
name|primaryWeight
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|3
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0.2f
operator|*
name|primaryWeight
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"min"
operator|.
name|equals
argument_list|(
name|scoreMode
argument_list|)
condition|)
block|{
name|assertFirstHit
argument_list|(
name|rescored
argument_list|,
name|hasId
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|rescored
argument_list|,
name|hasId
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|rescored
argument_list|,
name|hasId
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.0f
operator|*
name|primaryWeight
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3.0f
operator|*
name|primaryWeight
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|2
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
operator|*
name|primaryWeight
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|3
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0.0f
operator|*
name|secondaryWeight
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"avg"
operator|.
name|equals
argument_list|(
name|scoreMode
argument_list|)
condition|)
block|{
name|assertFirstHit
argument_list|(
name|rescored
argument_list|,
name|hasId
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|rescored
argument_list|,
name|hasId
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|rescored
argument_list|,
name|hasId
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
literal|3.0f
operator|*
name|primaryWeight
operator|+
literal|7.0f
operator|*
name|secondaryWeight
operator|)
operator|/
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.0f
operator|*
name|primaryWeight
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|2
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
literal|2.0f
operator|*
name|primaryWeight
operator|+
literal|5.0f
operator|*
name|secondaryWeight
operator|)
operator|/
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|3
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
literal|0.2f
operator|*
name|primaryWeight
operator|)
operator|/
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"multiply"
operator|.
name|equals
argument_list|(
name|scoreMode
argument_list|)
condition|)
block|{
name|assertFirstHit
argument_list|(
name|rescored
argument_list|,
name|hasId
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|rescored
argument_list|,
name|hasId
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|rescored
argument_list|,
name|hasId
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3.0f
operator|*
name|primaryWeight
operator|*
literal|7.0f
operator|*
name|secondaryWeight
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
operator|*
name|primaryWeight
operator|*
literal|5.0f
operator|*
name|secondaryWeight
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|2
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.0f
operator|*
name|primaryWeight
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rescored
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|3
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0.2f
operator|*
name|primaryWeight
operator|*
literal|0.0f
operator|*
name|secondaryWeight
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"Need to fix default window size for rescorers so that they are applied"
argument_list|)
comment|// NORELEASE
DECL|method|testMultipleRescores
specifier|public
name|void
name|testMultipleRescores
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numDocs
init|=
name|indexRandomNumbers
argument_list|(
literal|"keyword"
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QueryRescorer
name|eightIsGreat
init|=
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
literal|8
argument_list|)
argument_list|)
argument_list|)
operator|.
name|boostMode
argument_list|(
name|CombineFunction
operator|.
name|REPLACE
argument_list|)
operator|.
name|add
argument_list|(
name|ScoreFunctionBuilders
operator|.
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"1000.0f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setScoreMode
argument_list|(
literal|"total"
argument_list|)
decl_stmt|;
name|QueryRescorer
name|sevenIsBetter
init|=
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
literal|7
argument_list|)
argument_list|)
argument_list|)
operator|.
name|boostMode
argument_list|(
name|CombineFunction
operator|.
name|REPLACE
argument_list|)
operator|.
name|add
argument_list|(
name|ScoreFunctionBuilders
operator|.
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"10000.0f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setScoreMode
argument_list|(
literal|"total"
argument_list|)
decl_stmt|;
comment|// First set the rescore window large enough that both rescores take effect
name|SearchRequestBuilder
name|request
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setRescoreWindow
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
name|request
operator|.
name|addRescorer
argument_list|(
name|eightIsGreat
argument_list|)
operator|.
name|addRescorer
argument_list|(
name|sevenIsBetter
argument_list|)
expr_stmt|;
name|SearchResponse
name|response
init|=
name|request
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertFirstHit
argument_list|(
name|response
argument_list|,
name|hasId
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|response
argument_list|,
name|hasId
argument_list|(
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now squash the second rescore window so it never gets to see a seven
name|response
operator|=
name|request
operator|.
name|setSize
argument_list|(
literal|1
argument_list|)
operator|.
name|clearRescorers
argument_list|()
operator|.
name|addRescorer
argument_list|(
name|eightIsGreat
argument_list|)
operator|.
name|addRescorer
argument_list|(
name|sevenIsBetter
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|response
argument_list|,
name|hasId
argument_list|(
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
comment|// We have no idea what the second hit will be because we didn't get a chance to look for seven
comment|// Now use one rescore to drag the number we're looking for into the window of another
name|QueryRescorer
name|ninetyIsGood
init|=
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|queryStringQuery
argument_list|(
literal|"*ninety*"
argument_list|)
argument_list|)
operator|.
name|boostMode
argument_list|(
name|CombineFunction
operator|.
name|REPLACE
argument_list|)
operator|.
name|add
argument_list|(
name|ScoreFunctionBuilders
operator|.
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"1000.0f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setScoreMode
argument_list|(
literal|"total"
argument_list|)
decl_stmt|;
name|QueryRescorer
name|oneToo
init|=
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|queryStringQuery
argument_list|(
literal|"*one*"
argument_list|)
argument_list|)
operator|.
name|boostMode
argument_list|(
name|CombineFunction
operator|.
name|REPLACE
argument_list|)
operator|.
name|add
argument_list|(
name|ScoreFunctionBuilders
operator|.
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"1000.0f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setScoreMode
argument_list|(
literal|"total"
argument_list|)
decl_stmt|;
name|request
operator|.
name|clearRescorers
argument_list|()
operator|.
name|addRescorer
argument_list|(
name|ninetyIsGood
argument_list|)
operator|.
name|addRescorer
argument_list|(
name|oneToo
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|response
operator|=
name|request
operator|.
name|setSize
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|response
argument_list|,
name|hasId
argument_list|(
literal|"91"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|response
argument_list|,
name|hasScore
argument_list|(
literal|2001.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|response
argument_list|,
name|hasScore
argument_list|(
literal|1001.0f
argument_list|)
argument_list|)
expr_stmt|;
comment|// Not sure which one it is but it is ninety something
block|}
DECL|method|indexRandomNumbers
specifier|private
name|int
name|indexRandomNumbers
parameter_list|(
name|String
name|analyzer
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|indexRandomNumbers
argument_list|(
name|analyzer
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|indexRandomNumbers
specifier|private
name|int
name|indexRandomNumbers
parameter_list|(
name|String
name|analyzer
parameter_list|,
name|int
name|shards
parameter_list|,
name|boolean
name|dummyDocs
parameter_list|)
throws|throws
name|Exception
block|{
name|Builder
name|builder
init|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|shards
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|shards
argument_list|)
expr_stmt|;
block|}
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
name|analyzer
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setSettings
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|docs
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|dummyDocs
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
return|return
name|numDocs
return|;
block|}
comment|// #11277
DECL|method|testFromSize
specifier|public
name|void
name|testFromSize
parameter_list|()
throws|throws
name|Exception
block|{
name|Builder
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"hello world"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|SearchRequestBuilder
name|request
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
decl_stmt|;
name|request
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"text"
argument_list|,
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setFrom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|request
operator|.
name|setSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|request
operator|.
name|addRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRescoreWindow
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|request
operator|.
name|get
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

