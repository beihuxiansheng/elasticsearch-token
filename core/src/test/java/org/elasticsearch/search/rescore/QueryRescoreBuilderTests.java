begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.rescore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableAwareStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MatchAllQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescoreBuilder
operator|.
name|QueryRescorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescoreBuilder
operator|.
name|Rescorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_class
DECL|class|QueryRescoreBuilderTests
specifier|public
class|class
name|QueryRescoreBuilderTests
extends|extends
name|ESTestCase
block|{
DECL|field|NUMBER_OF_TESTBUILDERS
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER_OF_TESTBUILDERS
init|=
literal|20
decl_stmt|;
DECL|field|namedWriteableRegistry
specifier|private
specifier|static
name|NamedWriteableRegistry
name|namedWriteableRegistry
decl_stmt|;
comment|/**      * setup for the whole base test class      */
annotation|@
name|BeforeClass
DECL|method|init
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
name|namedWriteableRegistry
operator|=
operator|new
name|NamedWriteableRegistry
argument_list|()
expr_stmt|;
name|namedWriteableRegistry
operator|.
name|registerPrototype
argument_list|(
name|Rescorer
operator|.
name|class
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescoreBuilder
operator|.
name|QueryRescorer
operator|.
name|PROTOTYPE
argument_list|)
expr_stmt|;
name|namedWriteableRegistry
operator|.
name|registerPrototype
argument_list|(
name|QueryBuilder
operator|.
name|class
argument_list|,
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|namedWriteableRegistry
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Test serialization and deserialization of the rescore builder      */
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_TESTBUILDERS
condition|;
name|runs
operator|++
control|)
block|{
name|RescoreBuilder
name|original
init|=
name|randomRescoreBuilder
argument_list|()
decl_stmt|;
name|RescoreBuilder
name|deserialized
init|=
name|serializedCopy
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|deserialized
argument_list|,
name|original
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deserialized
operator|.
name|hashCode
argument_list|()
argument_list|,
name|original
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|deserialized
argument_list|,
name|original
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test equality and hashCode properties      */
DECL|method|testEqualsAndHashcode
specifier|public
name|void
name|testEqualsAndHashcode
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_TESTBUILDERS
condition|;
name|runs
operator|++
control|)
block|{
name|RescoreBuilder
name|firstBuilder
init|=
name|randomRescoreBuilder
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"rescore builder is equal to null"
argument_list|,
name|firstBuilder
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"rescore builder is equal to incompatible type"
argument_list|,
name|firstBuilder
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"rescore builder is not equal to self"
argument_list|,
name|firstBuilder
operator|.
name|equals
argument_list|(
name|firstBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"same rescore builder's hashcode returns different values if called multiple times"
argument_list|,
name|firstBuilder
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstBuilder
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"different rescore builder should not be equal"
argument_list|,
name|mutate
argument_list|(
name|firstBuilder
argument_list|)
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|firstBuilder
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RescoreBuilder
name|secondBuilder
init|=
name|serializedCopy
argument_list|(
name|firstBuilder
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"rescore builder is not equal to self"
argument_list|,
name|secondBuilder
operator|.
name|equals
argument_list|(
name|secondBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"rescore builder is not equal to its copy"
argument_list|,
name|firstBuilder
operator|.
name|equals
argument_list|(
name|secondBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not symmetric"
argument_list|,
name|secondBuilder
operator|.
name|equals
argument_list|(
name|firstBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"rescore builder copy's hashcode is different from original hashcode"
argument_list|,
name|secondBuilder
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstBuilder
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RescoreBuilder
name|thirdBuilder
init|=
name|serializedCopy
argument_list|(
name|secondBuilder
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"rescore builder is not equal to self"
argument_list|,
name|thirdBuilder
operator|.
name|equals
argument_list|(
name|thirdBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"rescore builder is not equal to its copy"
argument_list|,
name|secondBuilder
operator|.
name|equals
argument_list|(
name|thirdBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"rescore builder copy's hashcode is different from original hashcode"
argument_list|,
name|secondBuilder
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|thirdBuilder
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not transitive"
argument_list|,
name|firstBuilder
operator|.
name|equals
argument_list|(
name|thirdBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"rescore builder copy's hashcode is different from original hashcode"
argument_list|,
name|firstBuilder
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|thirdBuilder
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not symmetric"
argument_list|,
name|thirdBuilder
operator|.
name|equals
argument_list|(
name|secondBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not symmetric"
argument_list|,
name|thirdBuilder
operator|.
name|equals
argument_list|(
name|firstBuilder
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mutate
specifier|private
name|RescoreBuilder
name|mutate
parameter_list|(
name|RescoreBuilder
name|original
parameter_list|)
throws|throws
name|IOException
block|{
name|RescoreBuilder
name|mutation
init|=
name|serializedCopy
argument_list|(
name|original
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|Integer
name|windowSize
init|=
name|original
operator|.
name|windowSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|windowSize
operator|!=
literal|null
condition|)
block|{
name|mutation
operator|.
name|windowSize
argument_list|(
name|windowSize
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mutation
operator|.
name|windowSize
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QueryRescorer
name|queryRescorer
init|=
operator|(
name|QueryRescorer
operator|)
name|mutation
operator|.
name|rescorer
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|queryRescorer
operator|.
name|setQueryWeight
argument_list|(
name|queryRescorer
operator|.
name|getQueryWeight
argument_list|()
operator|+
literal|0.1f
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|queryRescorer
operator|.
name|setRescoreQueryWeight
argument_list|(
name|queryRescorer
operator|.
name|getRescoreQueryWeight
argument_list|()
operator|+
literal|0.1f
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|QueryRescoreMode
name|other
decl_stmt|;
do|do
block|{
name|other
operator|=
name|randomFrom
argument_list|(
name|QueryRescoreMode
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|other
operator|==
name|queryRescorer
operator|.
name|getScoreMode
argument_list|()
condition|)
do|;
name|queryRescorer
operator|.
name|setScoreMode
argument_list|(
name|other
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// only increase the boost to make it a slightly different query
name|queryRescorer
operator|.
name|getRescoreQuery
argument_list|()
operator|.
name|boost
argument_list|(
name|queryRescorer
operator|.
name|getRescoreQuery
argument_list|()
operator|.
name|boost
argument_list|()
operator|+
literal|0.1f
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unexpected random mutation in test"
argument_list|)
throw|;
block|}
block|}
return|return
name|mutation
return|;
block|}
comment|/**      * create random shape that is put under test      */
DECL|method|randomRescoreBuilder
specifier|private
specifier|static
name|RescoreBuilder
name|randomRescoreBuilder
parameter_list|()
block|{
name|QueryBuilder
argument_list|<
name|MatchAllQueryBuilder
argument_list|>
name|queryBuilder
init|=
operator|new
name|MatchAllQueryBuilder
argument_list|()
operator|.
name|boost
argument_list|(
name|randomFloat
argument_list|()
argument_list|)
operator|.
name|queryName
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescoreBuilder
operator|.
name|QueryRescorer
name|rescorer
init|=
operator|new
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescoreBuilder
operator|.
name|QueryRescorer
argument_list|(
name|queryBuilder
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|rescorer
operator|.
name|setQueryWeight
argument_list|(
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|rescorer
operator|.
name|setRescoreQueryWeight
argument_list|(
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|rescorer
operator|.
name|setScoreMode
argument_list|(
name|randomFrom
argument_list|(
name|QueryRescoreMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RescoreBuilder
name|builder
init|=
operator|new
name|RescoreBuilder
argument_list|(
name|rescorer
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|windowSize
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|serializedCopy
specifier|private
specifier|static
name|RescoreBuilder
name|serializedCopy
parameter_list|(
name|RescoreBuilder
name|original
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|original
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|,
name|namedWriteableRegistry
argument_list|)
init|)
block|{
return|return
name|RescoreBuilder
operator|.
name|PROTOYPE
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

