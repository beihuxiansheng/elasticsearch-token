begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|AbstractQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryRewriteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|IMMEDIATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|SearchServiceTests
specifier|public
class|class
name|SearchServiceTests
extends|extends
name|ESSingleNodeTestCase
block|{
annotation|@
name|Override
DECL|method|resetNodeAfterTest
specifier|protected
name|boolean
name|resetNodeAfterTest
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getPlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|getPlugins
parameter_list|()
block|{
return|return
name|pluginList
argument_list|(
name|FailOnRewriteQueryPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|testClearOnClose
specifier|public
name|void
name|testClearOnClose
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|createIndex
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|IMMEDIATE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|1
argument_list|)
operator|.
name|setScroll
argument_list|(
literal|"1m"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getScrollId
argument_list|()
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SearchService
name|service
init|=
name|getInstanceFromNode
argument_list|(
name|SearchService
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|service
operator|.
name|getActiveContexts
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|doClose
argument_list|()
expr_stmt|;
comment|// this kills the keep-alive reaper we have to reset the node after this test
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|service
operator|.
name|getActiveContexts
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testClearOnStop
specifier|public
name|void
name|testClearOnStop
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|createIndex
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|IMMEDIATE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|1
argument_list|)
operator|.
name|setScroll
argument_list|(
literal|"1m"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getScrollId
argument_list|()
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SearchService
name|service
init|=
name|getInstanceFromNode
argument_list|(
name|SearchService
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|service
operator|.
name|getActiveContexts
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|service
operator|.
name|getActiveContexts
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testClearIndexDelete
specifier|public
name|void
name|testClearIndexDelete
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|createIndex
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|IMMEDIATE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|1
argument_list|)
operator|.
name|setScroll
argument_list|(
literal|"1m"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getScrollId
argument_list|()
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SearchService
name|service
init|=
name|getInstanceFromNode
argument_list|(
name|SearchService
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|service
operator|.
name|getActiveContexts
argument_list|()
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|service
operator|.
name|getActiveContexts
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCloseSearchContextOnRewriteException
specifier|public
name|void
name|testCloseSearchContextOnRewriteException
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|IMMEDIATE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|SearchService
name|service
init|=
name|getInstanceFromNode
argument_list|(
name|SearchService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndicesService
name|indicesService
init|=
name|getInstanceFromNode
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|resolveIndex
argument_list|(
literal|"index"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|getShard
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|activeContexts
init|=
name|service
operator|.
name|getActiveContexts
argument_list|()
decl_stmt|;
specifier|final
name|int
name|activeRefs
init|=
name|indexShard
operator|.
name|store
argument_list|()
operator|.
name|refCount
argument_list|()
decl_stmt|;
name|expectThrows
argument_list|(
name|SearchPhaseExecutionException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|FailOnRewriteQueryBuilder
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|activeContexts
argument_list|,
name|service
operator|.
name|getActiveContexts
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|activeRefs
argument_list|,
name|indexShard
operator|.
name|store
argument_list|()
operator|.
name|refCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|FailOnRewriteQueryPlugin
specifier|public
specifier|static
class|class
name|FailOnRewriteQueryPlugin
extends|extends
name|Plugin
block|{
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|FailOnRewriteQueryPlugin
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"This plugin registers a query that always fails at rewrite phase"
return|;
block|}
DECL|method|onModule
specifier|public
name|void
name|onModule
parameter_list|(
name|SearchModule
name|module
parameter_list|)
block|{
name|module
operator|.
name|registerQuery
argument_list|(
name|FailOnRewriteQueryBuilder
operator|::
operator|new
argument_list|,
name|parseContext
lambda|->
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"No query parser for this plugin"
argument_list|)
throw|;
block|}
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"fail_on_rewrite_query"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FailOnRewriteQueryBuilder
specifier|public
specifier|static
class|class
name|FailOnRewriteQueryBuilder
extends|extends
name|AbstractQueryBuilder
argument_list|<
name|FailOnRewriteQueryBuilder
argument_list|>
block|{
DECL|method|FailOnRewriteQueryBuilder
specifier|public
name|FailOnRewriteQueryBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|FailOnRewriteQueryBuilder
specifier|public
name|FailOnRewriteQueryBuilder
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|doRewrite
specifier|protected
name|QueryBuilder
name|doRewrite
parameter_list|(
name|QueryRewriteContext
name|queryShardContext
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Fail on rewrite phase"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|protected
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{         }
annotation|@
name|Override
DECL|method|doXContent
specifier|protected
name|void
name|doXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{         }
annotation|@
name|Override
DECL|method|doToQuery
specifier|protected
name|Query
name|doToQuery
parameter_list|(
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|FailOnRewriteQueryBuilder
name|other
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

