begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.internal
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|TermsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|TypeFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
operator|.
name|FILTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|DefaultSearchContextTests
specifier|public
class|class
name|DefaultSearchContextTests
extends|extends
name|ESTestCase
block|{
DECL|method|testCreateSearchFilter
specifier|public
name|void
name|testCreateSearchFilter
parameter_list|()
block|{
name|Query
name|searchFilter
init|=
name|DefaultSearchContext
operator|.
name|createSearchFilter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"type1"
block|,
literal|"type2"
block|}
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|Query
name|expectedQuery
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TermsQuery
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"type1"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"type2"
argument_list|)
argument_list|)
argument_list|,
name|FILTER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchFilter
argument_list|,
name|equalTo
argument_list|(
name|expectedQuery
argument_list|)
argument_list|)
expr_stmt|;
name|searchFilter
operator|=
name|DefaultSearchContext
operator|.
name|createSearchFilter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"type1"
block|,
literal|"type2"
block|}
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|expectedQuery
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TermsQuery
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"type1"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"type2"
argument_list|)
argument_list|)
argument_list|,
name|FILTER
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|FILTER
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchFilter
argument_list|,
name|equalTo
argument_list|(
name|expectedQuery
argument_list|)
argument_list|)
expr_stmt|;
name|searchFilter
operator|=
name|DefaultSearchContext
operator|.
name|createSearchFilter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchFilter
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|searchFilter
operator|=
name|DefaultSearchContext
operator|.
name|createSearchFilter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expectedQuery
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
name|Queries
operator|.
name|newNonNestedFilter
argument_list|()
argument_list|,
name|FILTER
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchFilter
argument_list|,
name|equalTo
argument_list|(
name|expectedQuery
argument_list|)
argument_list|)
expr_stmt|;
name|searchFilter
operator|=
name|DefaultSearchContext
operator|.
name|createSearchFilter
argument_list|(
literal|null
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expectedQuery
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|FILTER
argument_list|)
operator|.
name|add
argument_list|(
name|Queries
operator|.
name|newNonNestedFilter
argument_list|()
argument_list|,
name|FILTER
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchFilter
argument_list|,
name|equalTo
argument_list|(
name|expectedQuery
argument_list|)
argument_list|)
expr_stmt|;
name|searchFilter
operator|=
name|DefaultSearchContext
operator|.
name|createSearchFilter
argument_list|(
literal|null
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectedQuery
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|FILTER
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchFilter
argument_list|,
name|equalTo
argument_list|(
name|expectedQuery
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

