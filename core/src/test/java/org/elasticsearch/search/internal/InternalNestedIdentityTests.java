begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.internal
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchHit
operator|.
name|InternalNestedIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|EqualsHashCodeTestUtils
operator|.
name|checkEqualsAndHashCode
import|;
end_import

begin_class
DECL|class|InternalNestedIdentityTests
specifier|public
class|class
name|InternalNestedIdentityTests
extends|extends
name|ESTestCase
block|{
DECL|method|createTestItem
specifier|public
specifier|static
name|InternalNestedIdentity
name|createTestItem
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
name|String
name|field
init|=
name|frequently
argument_list|()
condition|?
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
else|:
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
name|randomInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|InternalNestedIdentity
name|child
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|depth
operator|>
literal|0
condition|)
block|{
name|child
operator|=
name|createTestItem
argument_list|(
name|depth
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|InternalNestedIdentity
argument_list|(
name|field
argument_list|,
name|offset
argument_list|,
name|child
argument_list|)
return|;
block|}
DECL|method|testFromXContent
specifier|public
name|void
name|testFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
name|InternalNestedIdentity
name|nestedIdentity
init|=
name|createTestItem
argument_list|(
name|randomInt
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|XContentType
name|xcontentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|xcontentType
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
block|}
name|builder
operator|=
name|nestedIdentity
operator|.
name|innerToXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|InternalNestedIdentity
name|parsedNestedIdentity
init|=
name|InternalNestedIdentity
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nestedIdentity
argument_list|,
name|parsedNestedIdentity
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToXContent
specifier|public
name|void
name|testToXContent
parameter_list|()
throws|throws
name|IOException
block|{
name|InternalNestedIdentity
name|nestedIdentity
init|=
operator|new
name|InternalNestedIdentity
argument_list|(
literal|"foo"
argument_list|,
literal|5
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|nestedIdentity
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  \"_nested\" : {\n"
operator|+
literal|"    \"field\" : \"foo\",\n"
operator|+
literal|"    \"offset\" : 5\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
argument_list|,
name|builder
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
name|nestedIdentity
operator|=
operator|new
name|InternalNestedIdentity
argument_list|(
literal|"foo"
argument_list|,
literal|5
argument_list|,
operator|new
name|InternalNestedIdentity
argument_list|(
literal|"bar"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|nestedIdentity
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\n"
operator|+
literal|"  \"_nested\" : {\n"
operator|+
literal|"    \"field\" : \"foo\",\n"
operator|+
literal|"    \"offset\" : 5,\n"
operator|+
literal|"    \"_nested\" : {\n"
operator|+
literal|"      \"field\" : \"bar\",\n"
operator|+
literal|"      \"offset\" : 3\n"
operator|+
literal|"    }\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
argument_list|,
name|builder
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test equality and hashCode properties      */
DECL|method|testEqualsAndHashcode
specifier|public
name|void
name|testEqualsAndHashcode
parameter_list|()
block|{
name|checkEqualsAndHashCode
argument_list|(
name|createTestItem
argument_list|(
name|randomInt
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|InternalNestedIdentityTests
operator|::
name|copy
argument_list|,
name|InternalNestedIdentityTests
operator|::
name|mutate
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|InternalNestedIdentity
name|nestedIdentity
init|=
name|createTestItem
argument_list|(
name|randomInt
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|nestedIdentity
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|InternalNestedIdentity
name|deserializedCopy
init|=
operator|new
name|InternalNestedIdentity
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nestedIdentity
argument_list|,
name|deserializedCopy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nestedIdentity
operator|.
name|hashCode
argument_list|()
argument_list|,
name|deserializedCopy
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|nestedIdentity
argument_list|,
name|deserializedCopy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|mutate
specifier|private
specifier|static
name|InternalNestedIdentity
name|mutate
parameter_list|(
name|InternalNestedIdentity
name|original
parameter_list|)
block|{
if|if
condition|(
name|original
operator|==
literal|null
condition|)
block|{
return|return
name|createTestItem
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|List
argument_list|<
name|Supplier
argument_list|<
name|InternalNestedIdentity
argument_list|>
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|original
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|InternalNestedIdentity
name|child
init|=
operator|(
name|InternalNestedIdentity
operator|)
name|original
operator|.
name|getChild
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
name|original
operator|.
name|getField
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|InternalNestedIdentity
argument_list|(
name|original
operator|.
name|getField
argument_list|()
operator|.
name|string
argument_list|()
operator|+
literal|"_prefix"
argument_list|,
name|offset
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|InternalNestedIdentity
argument_list|(
name|fieldName
argument_list|,
name|offset
operator|+
literal|1
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
operator|new
name|InternalNestedIdentity
argument_list|(
name|fieldName
argument_list|,
name|offset
argument_list|,
name|mutate
argument_list|(
name|child
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|randomFrom
argument_list|(
name|mutations
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|copy
specifier|private
specifier|static
name|InternalNestedIdentity
name|copy
parameter_list|(
name|InternalNestedIdentity
name|original
parameter_list|)
block|{
name|InternalNestedIdentity
name|child
init|=
operator|(
name|InternalNestedIdentity
operator|)
name|original
operator|.
name|getChild
argument_list|()
decl_stmt|;
return|return
operator|new
name|InternalNestedIdentity
argument_list|(
name|original
operator|.
name|getField
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|original
operator|.
name|getOffset
argument_list|()
argument_list|,
name|child
operator|!=
literal|null
condition|?
name|copy
argument_list|(
name|child
argument_list|)
else|:
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

