begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.highlight
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableAwareStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|IdsQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MatchAllQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|TermQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|HighlightBuilder
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_class
DECL|class|HighlightBuilderTests
specifier|public
class|class
name|HighlightBuilderTests
extends|extends
name|ESTestCase
block|{
DECL|field|NUMBER_OF_TESTBUILDERS
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER_OF_TESTBUILDERS
init|=
literal|20
decl_stmt|;
DECL|field|namedWriteableRegistry
specifier|private
specifier|static
name|NamedWriteableRegistry
name|namedWriteableRegistry
decl_stmt|;
comment|/**      * setup for the whole base test class      */
annotation|@
name|BeforeClass
DECL|method|init
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|namedWriteableRegistry
operator|==
literal|null
condition|)
block|{
name|namedWriteableRegistry
operator|=
operator|new
name|NamedWriteableRegistry
argument_list|()
expr_stmt|;
name|namedWriteableRegistry
operator|.
name|registerPrototype
argument_list|(
name|QueryBuilder
operator|.
name|class
argument_list|,
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|namedWriteableRegistry
operator|.
name|registerPrototype
argument_list|(
name|QueryBuilder
operator|.
name|class
argument_list|,
operator|new
name|IdsQueryBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|namedWriteableRegistry
operator|.
name|registerPrototype
argument_list|(
name|QueryBuilder
operator|.
name|class
argument_list|,
operator|new
name|TermQueryBuilder
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|namedWriteableRegistry
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Test serialization and deserialization of the highlighter builder      */
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_TESTBUILDERS
condition|;
name|runs
operator|++
control|)
block|{
name|HighlightBuilder
name|original
init|=
name|randomHighlighterBuilder
argument_list|()
decl_stmt|;
name|HighlightBuilder
name|deserialized
init|=
name|serializedCopy
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|deserialized
argument_list|,
name|original
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deserialized
operator|.
name|hashCode
argument_list|()
argument_list|,
name|original
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|deserialized
argument_list|,
name|original
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test equality and hashCode properties      */
DECL|method|testEqualsAndHashcode
specifier|public
name|void
name|testEqualsAndHashcode
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_TESTBUILDERS
condition|;
name|runs
operator|++
control|)
block|{
name|HighlightBuilder
name|firstBuilder
init|=
name|randomHighlighterBuilder
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"highlighter is equal to null"
argument_list|,
name|firstBuilder
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"highlighter is equal to incompatible type"
argument_list|,
name|firstBuilder
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"highlighter is not equal to self"
argument_list|,
name|firstBuilder
operator|.
name|equals
argument_list|(
name|firstBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"same highlighter's hashcode returns different values if called multiple times"
argument_list|,
name|firstBuilder
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstBuilder
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"different highlighters should not be equal"
argument_list|,
name|mutate
argument_list|(
name|firstBuilder
argument_list|)
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|firstBuilder
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|HighlightBuilder
name|secondBuilder
init|=
name|serializedCopy
argument_list|(
name|firstBuilder
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"highlighter is not equal to self"
argument_list|,
name|secondBuilder
operator|.
name|equals
argument_list|(
name|secondBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"highlighter is not equal to its copy"
argument_list|,
name|firstBuilder
operator|.
name|equals
argument_list|(
name|secondBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not symmetric"
argument_list|,
name|secondBuilder
operator|.
name|equals
argument_list|(
name|firstBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"highlighter copy's hashcode is different from original hashcode"
argument_list|,
name|secondBuilder
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstBuilder
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|HighlightBuilder
name|thirdBuilder
init|=
name|serializedCopy
argument_list|(
name|secondBuilder
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"highlighter is not equal to self"
argument_list|,
name|thirdBuilder
operator|.
name|equals
argument_list|(
name|thirdBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"highlighter is not equal to its copy"
argument_list|,
name|secondBuilder
operator|.
name|equals
argument_list|(
name|thirdBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"highlighter copy's hashcode is different from original hashcode"
argument_list|,
name|secondBuilder
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|thirdBuilder
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not transitive"
argument_list|,
name|firstBuilder
operator|.
name|equals
argument_list|(
name|thirdBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"highlighter copy's hashcode is different from original hashcode"
argument_list|,
name|firstBuilder
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|thirdBuilder
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not symmetric"
argument_list|,
name|thirdBuilder
operator|.
name|equals
argument_list|(
name|secondBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not symmetric"
argument_list|,
name|thirdBuilder
operator|.
name|equals
argument_list|(
name|firstBuilder
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * create random shape that is put under test      */
DECL|method|randomHighlighterBuilder
specifier|private
specifier|static
name|HighlightBuilder
name|randomHighlighterBuilder
parameter_list|()
block|{
name|HighlightBuilder
name|testHighlighter
init|=
operator|new
name|HighlightBuilder
argument_list|()
decl_stmt|;
name|setRandomCommonOptions
argument_list|(
name|testHighlighter
argument_list|)
expr_stmt|;
name|testHighlighter
operator|.
name|useExplicitFieldOrder
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|testHighlighter
operator|.
name|encoder
argument_list|(
name|randomFrom
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"default"
block|,
literal|"html"
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|numberOfFields
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfFields
condition|;
name|i
operator|++
control|)
block|{
name|Field
name|field
init|=
operator|new
name|Field
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|setRandomCommonOptions
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|field
operator|.
name|fragmentOffset
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|field
operator|.
name|matchedFields
argument_list|(
name|randomStringArray
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|testHighlighter
operator|.
name|field
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
return|return
name|testHighlighter
return|;
block|}
DECL|method|setRandomCommonOptions
specifier|private
specifier|static
name|void
name|setRandomCommonOptions
parameter_list|(
name|AbstractHighlighterBuilder
name|highlightBuilder
parameter_list|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|preTags
argument_list|(
name|randomStringArray
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|postTags
argument_list|(
name|randomStringArray
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|fragmentSize
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|numOfFragments
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|highlighterType
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|fragmenter
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|QueryBuilder
name|highlightQuery
decl_stmt|;
switch|switch
condition|(
name|randomInt
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|highlightQuery
operator|=
operator|new
name|MatchAllQueryBuilder
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|highlightQuery
operator|=
operator|new
name|IdsQueryBuilder
argument_list|()
expr_stmt|;
break|break;
default|default:
case|case
literal|2
case|:
name|highlightQuery
operator|=
operator|new
name|TermQueryBuilder
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|highlightQuery
operator|.
name|boost
argument_list|(
operator|(
name|float
operator|)
name|randomDoubleBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|highlightBuilder
operator|.
name|highlightQuery
argument_list|(
name|highlightQuery
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|order
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|highlightFilter
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|forceSource
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|boundaryMaxScan
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|boundaryChars
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|noMatchSize
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|phraseLimit
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|items
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|items
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|value
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|randomInt
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|value
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|value
operator|=
operator|new
name|Integer
argument_list|(
name|randomInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|value
operator|=
operator|new
name|Boolean
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|options
operator|.
name|put
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|requireFieldMatch
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|mutateCommonOptions
specifier|private
specifier|static
name|void
name|mutateCommonOptions
parameter_list|(
name|AbstractHighlighterBuilder
name|highlightBuilder
parameter_list|)
block|{
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|16
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|highlightBuilder
operator|.
name|preTags
argument_list|(
name|randomStringArray
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|highlightBuilder
operator|.
name|postTags
argument_list|(
name|randomStringArray
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|highlightBuilder
operator|.
name|fragmentSize
argument_list|(
name|randomIntBetween
argument_list|(
literal|101
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|highlightBuilder
operator|.
name|numOfFragments
argument_list|(
name|randomIntBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|highlightBuilder
operator|.
name|highlighterType
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|highlightBuilder
operator|.
name|fragmenter
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|highlightBuilder
operator|.
name|highlightQuery
argument_list|(
operator|new
name|TermQueryBuilder
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|highlightBuilder
operator|.
name|order
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
name|highlightBuilder
operator|.
name|highlightFilter
argument_list|(
name|toggleOrSet
argument_list|(
name|highlightBuilder
operator|.
name|highlightFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
case|case
literal|10
case|:
name|highlightBuilder
operator|.
name|forceSource
argument_list|(
name|toggleOrSet
argument_list|(
name|highlightBuilder
operator|.
name|forceSource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
name|highlightBuilder
operator|.
name|boundaryMaxScan
argument_list|(
name|randomIntBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|12
case|:
name|highlightBuilder
operator|.
name|boundaryChars
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|13
case|:
name|highlightBuilder
operator|.
name|noMatchSize
argument_list|(
name|randomIntBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|14
case|:
name|highlightBuilder
operator|.
name|phraseLimit
argument_list|(
name|randomIntBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|15
case|:
name|int
name|items
init|=
literal|6
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|items
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
name|i
operator|++
control|)
block|{
name|options
operator|.
name|put
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|highlightBuilder
operator|.
name|options
argument_list|(
name|options
argument_list|)
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|highlightBuilder
operator|.
name|requireFieldMatch
argument_list|(
name|toggleOrSet
argument_list|(
name|highlightBuilder
operator|.
name|requireFieldMatch
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
DECL|method|toggleOrSet
specifier|private
specifier|static
name|Boolean
name|toggleOrSet
parameter_list|(
name|Boolean
name|flag
parameter_list|)
block|{
if|if
condition|(
name|flag
operator|==
literal|null
condition|)
block|{
return|return
name|randomBoolean
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|!
name|flag
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
DECL|method|randomStringArray
specifier|private
specifier|static
name|String
index|[]
name|randomStringArray
parameter_list|(
name|int
name|minSize
parameter_list|,
name|int
name|maxSize
parameter_list|)
block|{
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
name|minSize
argument_list|,
name|maxSize
argument_list|)
decl_stmt|;
name|String
index|[]
name|randomStrings
init|=
operator|new
name|String
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|size
condition|;
name|f
operator|++
control|)
block|{
name|randomStrings
index|[
name|f
index|]
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
return|return
name|randomStrings
return|;
block|}
comment|/**      * mutate the given highlighter builder so the returned one is different in one aspect      */
DECL|method|mutate
specifier|private
specifier|static
name|HighlightBuilder
name|mutate
parameter_list|(
name|HighlightBuilder
name|original
parameter_list|)
throws|throws
name|IOException
block|{
name|HighlightBuilder
name|mutation
init|=
name|serializedCopy
argument_list|(
name|original
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|mutateCommonOptions
argument_list|(
name|mutation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
condition|)
block|{
comment|// change settings that only exists on top level
case|case
literal|0
case|:
name|mutation
operator|.
name|useExplicitFieldOrder
argument_list|(
operator|!
name|original
operator|.
name|useExplicitFieldOrder
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|mutation
operator|.
name|encoder
argument_list|(
name|original
operator|.
name|encoder
argument_list|()
operator|+
name|randomAsciiOfLength
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// add another field
name|mutation
operator|.
name|field
argument_list|(
operator|new
name|Field
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// change existing fields
name|List
argument_list|<
name|Field
argument_list|>
name|originalFields
init|=
name|original
operator|.
name|fields
argument_list|()
decl_stmt|;
name|Field
name|fieldToChange
init|=
name|originalFields
operator|.
name|get
argument_list|(
name|randomInt
argument_list|(
name|originalFields
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|fieldToChange
operator|.
name|fragmentOffset
argument_list|(
name|randomIntBetween
argument_list|(
literal|101
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fieldToChange
operator|.
name|matchedFields
argument_list|(
name|randomStringArray
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|mutation
return|;
block|}
DECL|method|serializedCopy
specifier|private
specifier|static
name|HighlightBuilder
name|serializedCopy
parameter_list|(
name|HighlightBuilder
name|original
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|original
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|,
name|namedWriteableRegistry
argument_list|)
init|)
block|{
return|return
name|HighlightBuilder
operator|.
name|PROTOTYPE
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

