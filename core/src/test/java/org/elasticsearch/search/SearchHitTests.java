begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|OriginalIndices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|InputStreamStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
operator|.
name|NestedIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|HighlightField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|HighlightFieldTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|RandomObjects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
operator|.
name|toXContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|XContentTestUtils
operator|.
name|insertRandomFields
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertToXContentEquivalent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|SearchHitTests
specifier|public
class|class
name|SearchHitTests
extends|extends
name|ESTestCase
block|{
DECL|field|META_FIELDS
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|META_FIELDS
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"_uid"
argument_list|,
literal|"_all"
argument_list|,
literal|"_parent"
argument_list|,
literal|"_routing"
argument_list|,
literal|"_size"
argument_list|,
literal|"_timestamp"
argument_list|,
literal|"_ttl"
argument_list|)
decl_stmt|;
DECL|method|createTestItem
specifier|public
specifier|static
name|SearchHit
name|createTestItem
parameter_list|(
name|boolean
name|withOptionalInnerHits
parameter_list|)
block|{
name|int
name|internalId
init|=
name|randomInt
argument_list|()
decl_stmt|;
name|String
name|uid
init|=
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Text
name|type
init|=
operator|new
name|Text
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|NestedIdentity
name|nestedIdentity
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|nestedIdentity
operator|=
name|NestedIdentityTests
operator|.
name|createTestItem
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHitField
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Tuple
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|values
init|=
name|RandomObjects
operator|.
name|randomStoredFieldValues
argument_list|(
name|random
argument_list|()
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|String
name|metaField
init|=
name|randomFrom
argument_list|(
name|META_FIELDS
argument_list|)
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|metaField
argument_list|,
operator|new
name|SearchHitField
argument_list|(
name|metaField
argument_list|,
name|values
operator|.
name|v1
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|fieldName
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
operator|new
name|SearchHitField
argument_list|(
name|fieldName
argument_list|,
name|values
operator|.
name|v1
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|SearchHit
name|hit
init|=
operator|new
name|SearchHit
argument_list|(
name|internalId
argument_list|,
name|uid
argument_list|,
name|type
argument_list|,
name|nestedIdentity
argument_list|,
name|fields
argument_list|)
decl_stmt|;
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|hit
operator|.
name|score
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hit
operator|.
name|score
argument_list|(
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
name|hit
operator|.
name|sourceRef
argument_list|(
name|RandomObjects
operator|.
name|randomSource
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|hit
operator|.
name|version
argument_list|(
name|randomLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|hit
operator|.
name|sortValues
argument_list|(
name|SearchSortValuesTests
operator|.
name|createTestItem
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
name|highlightFields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|highlightFields
operator|.
name|put
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|HighlightFieldTests
operator|.
name|createTestItem
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hit
operator|.
name|highlightFields
argument_list|(
name|highlightFields
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|String
index|[]
name|matchedQueries
init|=
operator|new
name|String
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|matchedQueries
index|[
name|i
index|]
operator|=
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
name|hit
operator|.
name|matchedQueries
argument_list|(
name|matchedQueries
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|hit
operator|.
name|explanation
argument_list|(
name|createExplanation
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|withOptionalInnerHits
condition|)
block|{
name|int
name|innerHitsSize
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHits
argument_list|>
name|innerHits
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|innerHitsSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|innerHitsSize
condition|;
name|i
operator|++
control|)
block|{
name|innerHits
operator|.
name|put
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|SearchHitsTests
operator|.
name|createTestItem
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hit
operator|.
name|setInnerHits
argument_list|(
name|innerHits
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|hit
operator|.
name|shard
argument_list|(
operator|new
name|SearchShardTarget
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|,
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomAlphaOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|randomInt
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|OriginalIndices
operator|.
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|hit
return|;
block|}
DECL|method|testFromXContent
specifier|public
name|void
name|testFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
name|SearchHit
name|searchHit
init|=
name|createTestItem
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|humanReadable
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|BytesReference
name|originalBytes
init|=
name|toShuffledXContent
argument_list|(
name|searchHit
argument_list|,
name|xContentType
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|,
name|humanReadable
argument_list|)
decl_stmt|;
name|SearchHit
name|parsed
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|originalBytes
argument_list|)
init|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// jump to first START_OBJECT
name|parsed
operator|=
name|SearchHit
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertToXContentEquivalent
argument_list|(
name|originalBytes
argument_list|,
name|toXContent
argument_list|(
name|parsed
argument_list|,
name|xContentType
argument_list|,
name|humanReadable
argument_list|)
argument_list|,
name|xContentType
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test adds randomized fields on all json objects and checks that we can parse it to      * ensure the parsing is lenient for forward compatibility.      * We need to exclude json objects with the "highlight" and "fields" field name since these      * objects allow arbitrary keys (the field names that are queries). Also we want to exclude      * to add anything under "_source" since it is not parsed, and avoid complexity by excluding      * everything under "inner_hits". They are also keyed by arbitrary names and contain SearchHits,      * which are already tested elsewhere.      */
DECL|method|testFromXContentLenientParsing
specifier|public
name|void
name|testFromXContentLenientParsing
parameter_list|()
throws|throws
name|IOException
block|{
name|SearchHit
name|searchHit
init|=
name|createTestItem
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|BytesReference
name|originalBytes
init|=
name|toXContent
argument_list|(
name|searchHit
argument_list|,
name|xContentType
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|pathsToExclude
init|=
name|path
lambda|->
operator|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"highlight"
argument_list|)
operator|||
name|path
operator|.
name|endsWith
argument_list|(
literal|"fields"
argument_list|)
operator|||
name|path
operator|.
name|contains
argument_list|(
literal|"_source"
argument_list|)
operator|||
name|path
operator|.
name|contains
argument_list|(
literal|"inner_hits"
argument_list|)
operator|)
decl_stmt|;
name|BytesReference
name|withRandomFields
init|=
name|insertRandomFields
argument_list|(
name|xContentType
argument_list|,
name|originalBytes
argument_list|,
name|pathsToExclude
argument_list|,
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|SearchHit
name|parsed
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|withRandomFields
argument_list|)
init|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// jump to first START_OBJECT
name|parsed
operator|=
name|SearchHit
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertToXContentEquivalent
argument_list|(
name|originalBytes
argument_list|,
name|toXContent
argument_list|(
name|parsed
argument_list|,
name|xContentType
argument_list|,
literal|true
argument_list|)
argument_list|,
name|xContentType
argument_list|)
expr_stmt|;
block|}
comment|/**      * When e.g. with "stored_fields": "_none_", only "_index" and "_score" are returned.      */
DECL|method|testFromXContentWithoutTypeAndId
specifier|public
name|void
name|testFromXContentWithoutTypeAndId
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|hit
init|=
literal|"{\"_index\": \"my_index\", \"_score\": 1}"
decl_stmt|;
name|SearchHit
name|parsed
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
name|hit
argument_list|)
init|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// jump to first START_OBJECT
name|parsed
operator|=
name|SearchHit
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"my_index"
argument_list|,
name|parsed
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parsed
operator|.
name|getScore
argument_list|()
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parsed
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parsed
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToXContent
specifier|public
name|void
name|testToXContent
parameter_list|()
throws|throws
name|IOException
block|{
name|SearchHit
name|searchHit
init|=
operator|new
name|SearchHit
argument_list|(
literal|1
argument_list|,
literal|"id1"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|searchHit
operator|.
name|score
argument_list|(
literal|1.5f
argument_list|)
expr_stmt|;
name|XContentBuilder
name|builder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|searchHit
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"_type\":\"type\",\"_id\":\"id1\",\"_score\":1.5}"
argument_list|,
name|builder
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerializeShardTarget
specifier|public
name|void
name|testSerializeShardTarget
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchShardTarget
name|target
init|=
operator|new
name|SearchShardTarget
argument_list|(
literal|"_node_id"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"_index"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHits
argument_list|>
name|innerHits
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|SearchHit
name|innerHit1
init|=
operator|new
name|SearchHit
argument_list|(
literal|0
argument_list|,
literal|"_id"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"_type"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|innerHit1
operator|.
name|shard
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|SearchHit
name|innerInnerHit2
init|=
operator|new
name|SearchHit
argument_list|(
literal|0
argument_list|,
literal|"_id"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"_type"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|innerInnerHit2
operator|.
name|shard
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|innerHits
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
operator|new
name|SearchHits
argument_list|(
operator|new
name|SearchHit
index|[]
block|{
name|innerInnerHit2
block|}
argument_list|,
literal|1
argument_list|,
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
name|innerHit1
operator|.
name|setInnerHits
argument_list|(
name|innerHits
argument_list|)
expr_stmt|;
name|SearchHit
name|innerHit2
init|=
operator|new
name|SearchHit
argument_list|(
literal|0
argument_list|,
literal|"_id"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"_type"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|innerHit2
operator|.
name|shard
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|SearchHit
name|innerHit3
init|=
operator|new
name|SearchHit
argument_list|(
literal|0
argument_list|,
literal|"_id"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"_type"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|innerHit3
operator|.
name|shard
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|innerHits
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|SearchHit
name|hit1
init|=
operator|new
name|SearchHit
argument_list|(
literal|0
argument_list|,
literal|"_id"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"_type"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|innerHits
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
operator|new
name|SearchHits
argument_list|(
operator|new
name|SearchHit
index|[]
block|{
name|innerHit1
block|,
name|innerHit2
block|}
argument_list|,
literal|1
argument_list|,
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
name|innerHits
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
operator|new
name|SearchHits
argument_list|(
operator|new
name|SearchHit
index|[]
block|{
name|innerHit3
block|}
argument_list|,
literal|1
argument_list|,
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
name|hit1
operator|.
name|shard
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|hit1
operator|.
name|setInnerHits
argument_list|(
name|innerHits
argument_list|)
expr_stmt|;
name|SearchHit
name|hit2
init|=
operator|new
name|SearchHit
argument_list|(
literal|0
argument_list|,
literal|"_id"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"_type"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|hit2
operator|.
name|shard
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|SearchHits
name|hits
init|=
operator|new
name|SearchHits
argument_list|(
operator|new
name|SearchHit
index|[]
block|{
name|hit1
block|,
name|hit2
block|}
argument_list|,
literal|2
argument_list|,
literal|1f
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|hits
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|InputStream
name|input
init|=
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|SearchHits
name|results
init|=
name|SearchHits
operator|.
name|readSearchHits
argument_list|(
operator|new
name|InputStreamStreamInput
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getShard
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getInnerHits
argument_list|()
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getShard
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getInnerHits
argument_list|()
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getInnerHits
argument_list|()
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getShard
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getInnerHits
argument_list|()
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|getShard
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getInnerHits
argument_list|()
operator|.
name|get
argument_list|(
literal|"2"
argument_list|)
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getShard
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|getShard
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNullSource
specifier|public
name|void
name|testNullSource
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchHit
name|searchHit
init|=
operator|new
name|SearchHit
argument_list|(
literal|0
argument_list|,
literal|"_id"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"_type"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|searchHit
operator|.
name|getSourceAsMap
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchHit
operator|.
name|getSourceRef
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchHit
operator|.
name|getSourceAsMap
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchHit
operator|.
name|getSourceAsString
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchHit
operator|.
name|getSourceAsMap
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchHit
operator|.
name|getSourceRef
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchHit
operator|.
name|getSourceAsString
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasSource
specifier|public
name|void
name|testHasSource
parameter_list|()
block|{
name|SearchHit
name|searchHit
init|=
operator|new
name|SearchHit
argument_list|(
name|randomInt
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|searchHit
operator|.
name|hasSource
argument_list|()
argument_list|)
expr_stmt|;
name|searchHit
operator|.
name|sourceRef
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|searchHit
operator|.
name|hasSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createExplanation
specifier|private
specifier|static
name|Explanation
name|createExplanation
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
name|String
name|description
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|float
name|value
init|=
name|randomFloat
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Explanation
argument_list|>
name|details
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|depth
operator|>
literal|0
condition|)
block|{
name|int
name|numberOfDetails
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfDetails
condition|;
name|i
operator|++
control|)
block|{
name|details
operator|.
name|add
argument_list|(
name|createExplanation
argument_list|(
name|depth
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Explanation
operator|.
name|match
argument_list|(
name|value
argument_list|,
name|description
argument_list|,
name|details
argument_list|)
return|;
block|}
block|}
end_class

end_unit

