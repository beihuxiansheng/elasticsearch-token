begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.fetch
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|fielddata
operator|.
name|FieldDataFieldsParseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|TestSearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|FieldDataFieldsTests
specifier|public
class|class
name|FieldDataFieldsTests
extends|extends
name|ESTestCase
block|{
DECL|method|testValidFieldDataFieldString
specifier|public
name|void
name|testValidFieldDataFieldString
parameter_list|()
throws|throws
name|Exception
block|{
name|FieldDataFieldsParseElement
name|parseElement
init|=
operator|new
name|FieldDataFieldsParseElement
argument_list|()
decl_stmt|;
name|BytesArray
name|data
init|=
operator|new
name|BytesArray
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"{\"fielddata_fields\": \"foobar\"}"
argument_list|)
argument_list|)
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|data
argument_list|)
operator|.
name|createParser
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|SearchContext
name|context
init|=
operator|new
name|TestSearchContext
argument_list|()
decl_stmt|;
name|parseElement
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|testValidFieldDataFieldArray
specifier|public
name|void
name|testValidFieldDataFieldArray
parameter_list|()
throws|throws
name|Exception
block|{
name|FieldDataFieldsParseElement
name|parseElement
init|=
operator|new
name|FieldDataFieldsParseElement
argument_list|()
decl_stmt|;
name|BytesArray
name|data
init|=
operator|new
name|BytesArray
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"{\"fielddata_fields\": [ \"foo\", \"bar\", \"baz\"]}}"
argument_list|)
argument_list|)
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|data
argument_list|)
operator|.
name|createParser
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|SearchContext
name|context
init|=
operator|new
name|TestSearchContext
argument_list|()
decl_stmt|;
name|parseElement
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|testInvalidFieldDataField
specifier|public
name|void
name|testInvalidFieldDataField
parameter_list|()
throws|throws
name|Exception
block|{
name|FieldDataFieldsParseElement
name|parseElement
init|=
operator|new
name|FieldDataFieldsParseElement
argument_list|()
decl_stmt|;
name|BytesArray
name|data
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|data
operator|=
operator|new
name|BytesArray
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"{\"fielddata_fields\": {}}}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
operator|=
operator|new
name|BytesArray
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"{\"fielddata_fields\": 1.0}}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|data
argument_list|)
operator|.
name|createParser
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|SearchContext
name|context
init|=
operator|new
name|TestSearchContext
argument_list|()
decl_stmt|;
name|parseElement
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

