begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.fetch.subphase.highlight
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|InvalidTokenOffsetsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|QueryScorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|search
operator|.
name|GeoPointDistanceQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|search
operator|.
name|GeoPointInBBoxQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|search
operator|.
name|GeoPointInPolygonQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|FieldNameAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|CustomQueryScorer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|PlainHighlighterTests
specifier|public
class|class
name|PlainHighlighterTests
extends|extends
name|LuceneTestCase
block|{
DECL|method|testHighlightPhrase
specifier|public
name|void
name|testHighlightPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
operator|new
name|PhraseQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|QueryScorer
name|queryScorer
init|=
operator|new
name|CustomQueryScorer
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Highlighter
name|highlighter
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Highlighter
argument_list|(
name|queryScorer
argument_list|)
decl_stmt|;
name|String
index|[]
name|frags
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
literal|"field"
argument_list|,
literal|"bar foo bar foo"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"bar<B>foo</B><B>bar</B> foo"
block|}
argument_list|,
name|frags
argument_list|)
expr_stmt|;
block|}
DECL|method|checkGeoQueryHighlighting
specifier|public
name|void
name|checkGeoQueryHighlighting
parameter_list|(
name|Query
name|geoQuery
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidTokenOffsetsException
block|{
name|Map
name|analysers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
argument_list|()
decl_stmt|;
name|analysers
operator|.
name|put
argument_list|(
literal|"text"
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
name|FieldNameAnalyzer
name|fieldNameAnalyzer
init|=
operator|new
name|FieldNameAnalyzer
argument_list|(
name|analysers
argument_list|)
decl_stmt|;
name|Query
name|termQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"text"
argument_list|,
literal|"failure"
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|boolQuery
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|geoQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|termQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Highlighter
name|highlighter
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Highlighter
argument_list|(
operator|new
name|CustomQueryScorer
argument_list|(
name|boolQuery
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|fragment
init|=
name|highlighter
operator|.
name|getBestFragment
argument_list|(
name|fieldNameAnalyzer
operator|.
name|tokenStream
argument_list|(
literal|"text"
argument_list|,
literal|"Arbitrary text field which should not cause "
operator|+
literal|"a failure"
argument_list|)
argument_list|,
literal|"Arbitrary text field which should not cause a failure"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fragment
argument_list|,
name|equalTo
argument_list|(
literal|"Arbitrary text field which should not cause a<B>failure</B>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: This test will fail if we pass in an instance of GeoPointInBBoxQueryImpl too. Should we also find a way to work around that
comment|// or can the query not be rewritten before it is passed into the highlighter?
block|}
DECL|method|testGeoPointInBBoxQueryHighlighting
specifier|public
name|void
name|testGeoPointInBBoxQueryHighlighting
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidTokenOffsetsException
block|{
name|Query
name|geoQuery
init|=
operator|new
name|GeoPointDistanceQuery
argument_list|(
literal|"geo_point"
argument_list|,
operator|-
literal|64.92354174306496
argument_list|,
operator|-
literal|170.15625
argument_list|,
literal|5576757
argument_list|)
decl_stmt|;
name|checkGeoQueryHighlighting
argument_list|(
name|geoQuery
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoPointDistanceQueryHighlighting
specifier|public
name|void
name|testGeoPointDistanceQueryHighlighting
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidTokenOffsetsException
block|{
name|Query
name|geoQuery
init|=
operator|new
name|GeoPointInBBoxQuery
argument_list|(
literal|"geo_point"
argument_list|,
operator|-
literal|64.92354174306496
argument_list|,
literal|61.10078883158897
argument_list|,
operator|-
literal|170.15625
argument_list|,
literal|118.47656249999999
argument_list|)
decl_stmt|;
name|checkGeoQueryHighlighting
argument_list|(
name|geoQuery
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoPointInPolygonQueryHighlighting
specifier|public
name|void
name|testGeoPointInPolygonQueryHighlighting
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidTokenOffsetsException
block|{
name|double
index|[]
name|polyLats
init|=
operator|new
name|double
index|[]
block|{
literal|0
block|,
literal|60
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|double
index|[]
name|polyLons
init|=
operator|new
name|double
index|[]
block|{
literal|0
block|,
literal|60
block|,
literal|90
block|,
literal|0
block|}
decl_stmt|;
name|Query
name|geoQuery
init|=
operator|new
name|GeoPointInPolygonQuery
argument_list|(
literal|"geo_point"
argument_list|,
name|polyLats
argument_list|,
name|polyLons
argument_list|)
decl_stmt|;
name|checkGeoQueryHighlighting
argument_list|(
name|geoQuery
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

