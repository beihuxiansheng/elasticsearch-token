begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.fetch.subphase
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSubPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|SearchLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|TestSearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|FetchSourceSubPhaseTests
specifier|public
class|class
name|FetchSourceSubPhaseTests
extends|extends
name|ESTestCase
block|{
DECL|method|testFetchSource
specifier|public
name|void
name|testFetchSource
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|source
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|FetchSubPhase
operator|.
name|HitContext
name|hitContext
init|=
name|hitExecute
argument_list|(
name|source
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|hitContext
operator|.
name|hit
argument_list|()
operator|.
name|getSourceAsMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasicFiltering
specifier|public
name|void
name|testBasicFiltering
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|source
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|FetchSubPhase
operator|.
name|HitContext
name|hitContext
init|=
name|hitExecute
argument_list|(
name|source
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|hitContext
operator|.
name|hit
argument_list|()
operator|.
name|getSourceAsMap
argument_list|()
argument_list|)
expr_stmt|;
name|hitContext
operator|=
name|hitExecute
argument_list|(
name|source
argument_list|,
literal|true
argument_list|,
literal|"field1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|hitContext
operator|.
name|hit
argument_list|()
operator|.
name|getSourceAsMap
argument_list|()
argument_list|)
expr_stmt|;
name|hitContext
operator|=
name|hitExecute
argument_list|(
name|source
argument_list|,
literal|true
argument_list|,
literal|"hello"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|hitContext
operator|.
name|hit
argument_list|()
operator|.
name|getSourceAsMap
argument_list|()
argument_list|)
expr_stmt|;
name|hitContext
operator|=
name|hitExecute
argument_list|(
name|source
argument_list|,
literal|true
argument_list|,
literal|"*"
argument_list|,
literal|"field2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|hitContext
operator|.
name|hit
argument_list|()
operator|.
name|getSourceAsMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultipleFiltering
specifier|public
name|void
name|testMultipleFiltering
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|source
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|FetchSubPhase
operator|.
name|HitContext
name|hitContext
init|=
name|hitExecuteMultiple
argument_list|(
name|source
argument_list|,
literal|true
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*.notexisting"
block|,
literal|"field"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|hitContext
operator|.
name|hit
argument_list|()
operator|.
name|getSourceAsMap
argument_list|()
argument_list|)
expr_stmt|;
name|hitContext
operator|=
name|hitExecuteMultiple
argument_list|(
name|source
argument_list|,
literal|true
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"field.notexisting.*"
block|,
literal|"field"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|hitContext
operator|.
name|hit
argument_list|()
operator|.
name|getSourceAsMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSourceDisabled
specifier|public
name|void
name|testSourceDisabled
parameter_list|()
throws|throws
name|IOException
block|{
name|FetchSubPhase
operator|.
name|HitContext
name|hitContext
init|=
name|hitExecute
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|hitContext
operator|.
name|hit
argument_list|()
operator|.
name|getSourceAsMap
argument_list|()
argument_list|)
expr_stmt|;
name|hitContext
operator|=
name|hitExecute
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|hitContext
operator|.
name|hit
argument_list|()
operator|.
name|getSourceAsMap
argument_list|()
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|exception
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|hitExecute
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|"field1"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"unable to fetch fields from _source field: _source is disabled in the mappings "
operator|+
literal|"for index [index]"
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|hitExecuteMultiple
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"field2"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unable to fetch fields from _source field: _source is disabled in the mappings "
operator|+
literal|"for index [index]"
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|hitExecute
specifier|private
name|FetchSubPhase
operator|.
name|HitContext
name|hitExecute
parameter_list|(
name|XContentBuilder
name|source
parameter_list|,
name|boolean
name|fetchSource
parameter_list|,
name|String
name|include
parameter_list|,
name|String
name|exclude
parameter_list|)
block|{
return|return
name|hitExecuteMultiple
argument_list|(
name|source
argument_list|,
name|fetchSource
argument_list|,
name|include
operator|==
literal|null
condition|?
name|Strings
operator|.
name|EMPTY_ARRAY
else|:
operator|new
name|String
index|[]
block|{
name|include
block|}
argument_list|,
name|exclude
operator|==
literal|null
condition|?
name|Strings
operator|.
name|EMPTY_ARRAY
else|:
operator|new
name|String
index|[]
block|{
name|exclude
block|}
argument_list|)
return|;
block|}
DECL|method|hitExecuteMultiple
specifier|private
name|FetchSubPhase
operator|.
name|HitContext
name|hitExecuteMultiple
parameter_list|(
name|XContentBuilder
name|source
parameter_list|,
name|boolean
name|fetchSource
parameter_list|,
name|String
index|[]
name|includes
parameter_list|,
name|String
index|[]
name|excludes
parameter_list|)
block|{
name|FetchSourceContext
name|fetchSourceContext
init|=
operator|new
name|FetchSourceContext
argument_list|(
name|fetchSource
argument_list|,
name|includes
argument_list|,
name|excludes
argument_list|)
decl_stmt|;
name|SearchContext
name|searchContext
init|=
operator|new
name|FetchSourceSubPhaseTestSearchContext
argument_list|(
name|fetchSourceContext
argument_list|,
name|source
operator|==
literal|null
condition|?
literal|null
else|:
name|source
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|FetchSubPhase
operator|.
name|HitContext
name|hitContext
init|=
operator|new
name|FetchSubPhase
operator|.
name|HitContext
argument_list|()
decl_stmt|;
name|hitContext
operator|.
name|reset
argument_list|(
operator|new
name|SearchHit
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FetchSourceSubPhase
name|phase
init|=
operator|new
name|FetchSourceSubPhase
argument_list|()
decl_stmt|;
name|phase
operator|.
name|hitExecute
argument_list|(
name|searchContext
argument_list|,
name|hitContext
argument_list|)
expr_stmt|;
return|return
name|hitContext
return|;
block|}
DECL|class|FetchSourceSubPhaseTestSearchContext
specifier|private
specifier|static
class|class
name|FetchSourceSubPhaseTestSearchContext
extends|extends
name|TestSearchContext
block|{
DECL|field|context
specifier|final
name|FetchSourceContext
name|context
decl_stmt|;
DECL|field|source
specifier|final
name|BytesReference
name|source
decl_stmt|;
DECL|field|indexShard
specifier|final
name|IndexShard
name|indexShard
decl_stmt|;
DECL|method|FetchSourceSubPhaseTestSearchContext
name|FetchSourceSubPhaseTestSearchContext
parameter_list|(
name|FetchSourceContext
name|context
parameter_list|,
name|BytesReference
name|source
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|indexShard
operator|=
name|mock
argument_list|(
name|IndexShard
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|indexShard
operator|.
name|shardId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"index"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sourceRequested
specifier|public
name|boolean
name|sourceRequested
parameter_list|()
block|{
return|return
name|context
operator|!=
literal|null
operator|&&
name|context
operator|.
name|fetchSource
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|fetchSourceContext
specifier|public
name|FetchSourceContext
name|fetchSourceContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|lookup
specifier|public
name|SearchLookup
name|lookup
parameter_list|()
block|{
name|SearchLookup
name|lookup
init|=
operator|new
name|SearchLookup
argument_list|(
name|this
operator|.
name|mapperService
argument_list|()
argument_list|,
name|this
operator|.
name|fieldData
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|lookup
operator|.
name|source
argument_list|()
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|lookup
return|;
block|}
annotation|@
name|Override
DECL|method|indexShard
specifier|public
name|IndexShard
name|indexShard
parameter_list|()
block|{
return|return
name|indexShard
return|;
block|}
block|}
block|}
end_class

end_unit

