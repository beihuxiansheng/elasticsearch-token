begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.fetch.subphase.highlight
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ContentPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|TextFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|IdsQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MatchAllQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|TermQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|query
operator|.
name|IndicesQueriesRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|HighlightBuilder
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|HighlightBuilder
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|SearchContextHighlight
operator|.
name|FieldOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|IndexSettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|EqualsHashCodeTestUtils
operator|.
name|checkEqualsAndHashCode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|HighlightBuilderTests
specifier|public
class|class
name|HighlightBuilderTests
extends|extends
name|ESTestCase
block|{
DECL|field|NUMBER_OF_TESTBUILDERS
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER_OF_TESTBUILDERS
init|=
literal|20
decl_stmt|;
DECL|field|namedWriteableRegistry
specifier|private
specifier|static
name|NamedWriteableRegistry
name|namedWriteableRegistry
decl_stmt|;
DECL|field|indicesQueriesRegistry
specifier|private
specifier|static
name|IndicesQueriesRegistry
name|indicesQueriesRegistry
decl_stmt|;
comment|/**      * setup for the whole base test class      */
annotation|@
name|BeforeClass
DECL|method|init
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
name|SearchModule
name|searchModule
init|=
operator|new
name|SearchModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|namedWriteableRegistry
operator|=
operator|new
name|NamedWriteableRegistry
argument_list|(
name|searchModule
operator|.
name|getNamedWriteables
argument_list|()
argument_list|)
expr_stmt|;
name|indicesQueriesRegistry
operator|=
name|searchModule
operator|.
name|getQueryParserRegistry
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|namedWriteableRegistry
operator|=
literal|null
expr_stmt|;
name|indicesQueriesRegistry
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Test serialization and deserialization of the highlighter builder      */
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_TESTBUILDERS
condition|;
name|runs
operator|++
control|)
block|{
name|HighlightBuilder
name|original
init|=
name|randomHighlighterBuilder
argument_list|()
decl_stmt|;
name|HighlightBuilder
name|deserialized
init|=
name|serializedCopy
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|deserialized
argument_list|,
name|original
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deserialized
operator|.
name|hashCode
argument_list|()
argument_list|,
name|original
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|deserialized
argument_list|,
name|original
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test equality and hashCode properties      */
DECL|method|testEqualsAndHashcode
specifier|public
name|void
name|testEqualsAndHashcode
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_TESTBUILDERS
condition|;
name|runs
operator|++
control|)
block|{
name|checkEqualsAndHashCode
argument_list|(
name|randomHighlighterBuilder
argument_list|()
argument_list|,
name|HighlightBuilderTests
operator|::
name|serializedCopy
argument_list|,
name|HighlightBuilderTests
operator|::
name|mutate
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  creates random highlighter, renders it to xContent and back to new instance that should be equal to original      */
DECL|method|testFromXContent
specifier|public
name|void
name|testFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_TESTBUILDERS
condition|;
name|runs
operator|++
control|)
block|{
name|HighlightBuilder
name|highlightBuilder
init|=
name|randomHighlighterBuilder
argument_list|()
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
block|}
name|highlightBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|XContentBuilder
name|shuffled
init|=
name|shuffleXContent
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|shuffled
argument_list|)
decl_stmt|;
name|QueryParseContext
name|context
init|=
operator|new
name|QueryParseContext
argument_list|(
name|indicesQueriesRegistry
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|HighlightBuilder
name|secondHighlightBuilder
decl_stmt|;
try|try
block|{
name|secondHighlightBuilder
operator|=
name|HighlightBuilder
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error parsing "
operator|+
name|highlightBuilder
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|assertNotSame
argument_list|(
name|highlightBuilder
argument_list|,
name|secondHighlightBuilder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|highlightBuilder
argument_list|,
name|secondHighlightBuilder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|highlightBuilder
operator|.
name|hashCode
argument_list|()
argument_list|,
name|secondHighlightBuilder
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * test that unknown array fields cause exception      */
DECL|method|testUnknownArrayNameExpection
specifier|public
name|void
name|testUnknownArrayNameExpection
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|IllegalArgumentException
name|e
init|=
name|expectParseThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
literal|"{\n"
operator|+
literal|"    \"bad_fieldname\" : [ \"field1\" 1 \"field2\" ]\n"
operator|+
literal|"}\n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[highlight] unknown field [bad_fieldname], parser not found"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|ParsingException
name|e
init|=
name|expectParseThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
literal|"{\n"
operator|+
literal|"  \"fields\" : {\n"
operator|+
literal|"     \"body\" : {\n"
operator|+
literal|"        \"bad_fieldname\" : [ \"field1\" , \"field2\" ]\n"
operator|+
literal|"     }\n"
operator|+
literal|"   }\n"
operator|+
literal|"}\n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[highlight] failed to parse field [fields]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[fields] failed to parse field [body]"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[highlight_field] unknown field [bad_fieldname], parser not found"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|expectParseThrows
specifier|private
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|T
name|expectParseThrows
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|exceptionClass
parameter_list|,
name|String
name|highlightElement
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
name|highlightElement
argument_list|)
decl_stmt|;
name|QueryParseContext
name|context
init|=
operator|new
name|QueryParseContext
argument_list|(
name|indicesQueriesRegistry
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
decl_stmt|;
return|return
name|expectThrows
argument_list|(
name|exceptionClass
argument_list|,
parameter_list|()
lambda|->
name|HighlightBuilder
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * test that unknown field name cause exception      */
DECL|method|testUnknownFieldnameExpection
specifier|public
name|void
name|testUnknownFieldnameExpection
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|IllegalArgumentException
name|e
init|=
name|expectParseThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
literal|"{\n"
operator|+
literal|"    \"bad_fieldname\" : \"value\"\n"
operator|+
literal|"}\n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[highlight] unknown field [bad_fieldname], parser not found"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|ParsingException
name|e
init|=
name|expectParseThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
literal|"{\n"
operator|+
literal|"  \"fields\" : {\n"
operator|+
literal|"     \"body\" : {\n"
operator|+
literal|"        \"bad_fieldname\" : \"value\"\n"
operator|+
literal|"     }\n"
operator|+
literal|"   }\n"
operator|+
literal|"}\n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[highlight] failed to parse field [fields]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[fields] failed to parse field [body]"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[highlight_field] unknown field [bad_fieldname], parser not found"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * test that unknown field name cause exception      */
DECL|method|testUnknownObjectFieldnameExpection
specifier|public
name|void
name|testUnknownObjectFieldnameExpection
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|IllegalArgumentException
name|e
init|=
name|expectParseThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
literal|"{\n"
operator|+
literal|"    \"bad_fieldname\" :  { \"field\" : \"value\" }\n \n"
operator|+
literal|"}\n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[highlight] unknown field [bad_fieldname], parser not found"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|ParsingException
name|e
init|=
name|expectParseThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
literal|"{\n"
operator|+
literal|"  \"fields\" : {\n"
operator|+
literal|"     \"body\" : {\n"
operator|+
literal|"        \"bad_fieldname\" : { \"field\" : \"value\" }\n"
operator|+
literal|"     }\n"
operator|+
literal|"   }\n"
operator|+
literal|"}\n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[highlight] failed to parse field [fields]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[fields] failed to parse field [body]"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[highlight_field] unknown field [bad_fieldname], parser not found"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testStringInFieldsArray
specifier|public
name|void
name|testStringInFieldsArray
parameter_list|()
throws|throws
name|IOException
block|{
name|ParsingException
name|e
init|=
name|expectParseThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
literal|"{\"fields\" : [ \"junk\" ]}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[highlight] failed to parse field [fields]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[fields] can be a single object with any number of fields or an array where each entry is an object with a single field"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoFieldsInObjectInFieldsArray
specifier|public
name|void
name|testNoFieldsInObjectInFieldsArray
parameter_list|()
throws|throws
name|IOException
block|{
name|ParsingException
name|e
init|=
name|expectParseThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
literal|"{\n"
operator|+
literal|"  \"fields\" : [ {\n"
operator|+
literal|"   }] \n"
operator|+
literal|"}\n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[highlight] failed to parse field [fields]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[fields] can be a single object with any number of fields or an array where each entry is an object with a single field"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTwoFieldsInObjectInFieldsArray
specifier|public
name|void
name|testTwoFieldsInObjectInFieldsArray
parameter_list|()
throws|throws
name|IOException
block|{
name|ParsingException
name|e
init|=
name|expectParseThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
literal|"{\n"
operator|+
literal|"  \"fields\" : [ {\n"
operator|+
literal|"     \"body\" : {},\n"
operator|+
literal|"     \"nope\" : {}\n"
operator|+
literal|"   }] \n"
operator|+
literal|"}\n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[highlight] failed to parse field [fields]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[fields] can be a single object with any number of fields or an array where each entry is an object with a single field"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * test that build() outputs a {@link SearchContextHighlight} that is has similar parameters      * than what we have in the random {@link HighlightBuilder}      */
DECL|method|testBuildSearchContextHighlight
specifier|public
name|void
name|testBuildSearchContextHighlight
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|"_na_"
argument_list|)
decl_stmt|;
name|IndexSettings
name|idxSettings
init|=
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
decl_stmt|;
comment|// shard context will only need indicesQueriesRegistry for building Query objects nested in highlighter
name|QueryShardContext
name|mockShardContext
init|=
operator|new
name|QueryShardContext
argument_list|(
literal|0
argument_list|,
name|idxSettings
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|indicesQueriesRegistry
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|System
operator|::
name|currentTimeMillis
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|MappedFieldType
name|fieldMapper
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|TextFieldMapper
operator|.
name|Builder
name|builder
init|=
operator|new
name|TextFieldMapper
operator|.
name|Builder
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|(
operator|new
name|Mapper
operator|.
name|BuilderContext
argument_list|(
name|idxSettings
operator|.
name|getSettings
argument_list|()
argument_list|,
operator|new
name|ContentPath
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|fieldType
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|mockShardContext
operator|.
name|setMapUnmappedFieldAsString
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_TESTBUILDERS
condition|;
name|runs
operator|++
control|)
block|{
name|HighlightBuilder
name|highlightBuilder
init|=
name|randomHighlighterBuilder
argument_list|()
decl_stmt|;
name|SearchContextHighlight
name|highlight
init|=
name|highlightBuilder
operator|.
name|build
argument_list|(
name|mockShardContext
argument_list|)
decl_stmt|;
for|for
control|(
name|SearchContextHighlight
operator|.
name|Field
name|field
range|:
name|highlight
operator|.
name|fields
argument_list|()
control|)
block|{
name|String
name|encoder
init|=
name|highlightBuilder
operator|.
name|encoder
argument_list|()
operator|!=
literal|null
condition|?
name|highlightBuilder
operator|.
name|encoder
argument_list|()
else|:
name|HighlightBuilder
operator|.
name|DEFAULT_ENCODER
decl_stmt|;
name|assertEquals
argument_list|(
name|encoder
argument_list|,
name|field
operator|.
name|fieldOptions
argument_list|()
operator|.
name|encoder
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Field
name|fieldBuilder
init|=
name|getFieldBuilderByName
argument_list|(
name|highlightBuilder
argument_list|,
name|field
operator|.
name|field
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expected a highlight builder for field "
operator|+
name|field
operator|.
name|field
argument_list|()
argument_list|,
name|fieldBuilder
argument_list|)
expr_stmt|;
name|FieldOptions
name|fieldOptions
init|=
name|field
operator|.
name|fieldOptions
argument_list|()
decl_stmt|;
name|BiConsumer
argument_list|<
name|Function
argument_list|<
name|AbstractHighlighterBuilder
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Function
argument_list|<
name|FieldOptions
argument_list|,
name|Object
argument_list|>
argument_list|>
name|checkSame
init|=
name|mergeBeforeChek
argument_list|(
name|highlightBuilder
argument_list|,
name|fieldBuilder
argument_list|,
name|fieldOptions
argument_list|)
decl_stmt|;
name|checkSame
operator|.
name|accept
argument_list|(
name|AbstractHighlighterBuilder
operator|::
name|boundaryChars
argument_list|,
name|FieldOptions
operator|::
name|boundaryChars
argument_list|)
expr_stmt|;
name|checkSame
operator|.
name|accept
argument_list|(
name|AbstractHighlighterBuilder
operator|::
name|boundaryMaxScan
argument_list|,
name|FieldOptions
operator|::
name|boundaryMaxScan
argument_list|)
expr_stmt|;
name|checkSame
operator|.
name|accept
argument_list|(
name|AbstractHighlighterBuilder
operator|::
name|fragmentSize
argument_list|,
name|FieldOptions
operator|::
name|fragmentCharSize
argument_list|)
expr_stmt|;
name|checkSame
operator|.
name|accept
argument_list|(
name|AbstractHighlighterBuilder
operator|::
name|fragmenter
argument_list|,
name|FieldOptions
operator|::
name|fragmenter
argument_list|)
expr_stmt|;
name|checkSame
operator|.
name|accept
argument_list|(
name|AbstractHighlighterBuilder
operator|::
name|requireFieldMatch
argument_list|,
name|FieldOptions
operator|::
name|requireFieldMatch
argument_list|)
expr_stmt|;
name|checkSame
operator|.
name|accept
argument_list|(
name|AbstractHighlighterBuilder
operator|::
name|noMatchSize
argument_list|,
name|FieldOptions
operator|::
name|noMatchSize
argument_list|)
expr_stmt|;
name|checkSame
operator|.
name|accept
argument_list|(
name|AbstractHighlighterBuilder
operator|::
name|numOfFragments
argument_list|,
name|FieldOptions
operator|::
name|numberOfFragments
argument_list|)
expr_stmt|;
name|checkSame
operator|.
name|accept
argument_list|(
name|AbstractHighlighterBuilder
operator|::
name|phraseLimit
argument_list|,
name|FieldOptions
operator|::
name|phraseLimit
argument_list|)
expr_stmt|;
name|checkSame
operator|.
name|accept
argument_list|(
name|AbstractHighlighterBuilder
operator|::
name|highlighterType
argument_list|,
name|FieldOptions
operator|::
name|highlighterType
argument_list|)
expr_stmt|;
name|checkSame
operator|.
name|accept
argument_list|(
name|AbstractHighlighterBuilder
operator|::
name|highlightFilter
argument_list|,
name|FieldOptions
operator|::
name|highlightFilter
argument_list|)
expr_stmt|;
name|checkSame
operator|.
name|accept
argument_list|(
name|AbstractHighlighterBuilder
operator|::
name|preTags
argument_list|,
name|FieldOptions
operator|::
name|preTags
argument_list|)
expr_stmt|;
name|checkSame
operator|.
name|accept
argument_list|(
name|AbstractHighlighterBuilder
operator|::
name|postTags
argument_list|,
name|FieldOptions
operator|::
name|postTags
argument_list|)
expr_stmt|;
name|checkSame
operator|.
name|accept
argument_list|(
name|AbstractHighlighterBuilder
operator|::
name|options
argument_list|,
name|FieldOptions
operator|::
name|options
argument_list|)
expr_stmt|;
name|checkSame
operator|.
name|accept
argument_list|(
name|AbstractHighlighterBuilder
operator|::
name|order
argument_list|,
name|op
lambda|->
name|op
operator|.
name|scoreOrdered
argument_list|()
condition|?
name|Order
operator|.
name|SCORE
else|:
name|Order
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldBuilder
operator|.
name|fragmentOffset
argument_list|,
name|fieldOptions
operator|.
name|fragmentOffset
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldBuilder
operator|.
name|matchedFields
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|copy
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|fieldBuilder
operator|.
name|matchedFields
argument_list|,
name|fieldBuilder
operator|.
name|matchedFields
operator|.
name|length
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|copy
argument_list|,
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|fieldOptions
operator|.
name|matchedFields
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|fieldOptions
operator|.
name|matchedFields
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|fieldOptions
operator|.
name|matchedFields
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Query
name|expectedValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fieldBuilder
operator|.
name|highlightQuery
operator|!=
literal|null
condition|)
block|{
name|expectedValue
operator|=
name|QueryBuilder
operator|.
name|rewriteQuery
argument_list|(
name|fieldBuilder
operator|.
name|highlightQuery
argument_list|,
name|mockShardContext
argument_list|)
operator|.
name|toQuery
argument_list|(
name|mockShardContext
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|highlightBuilder
operator|.
name|highlightQuery
operator|!=
literal|null
condition|)
block|{
name|expectedValue
operator|=
name|QueryBuilder
operator|.
name|rewriteQuery
argument_list|(
name|highlightBuilder
operator|.
name|highlightQuery
argument_list|,
name|mockShardContext
argument_list|)
operator|.
name|toQuery
argument_list|(
name|mockShardContext
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedValue
argument_list|,
name|fieldOptions
operator|.
name|highlightQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Create a generic helper function that performs all the work of merging the global highlight builder parameter,      * the (potential) overwrite on the field level and the default value from {@link HighlightBuilder#defaultOptions}      * before making the assertion that the value in the highlight builder and the actual value in the {@link FieldOptions}      * passed in is the same.      *      * @param highlightBuilder provides the (optional) global builder parameter      * @param fieldBuilder provides the (optional) field level parameter, if present this overwrites the global value      * @param options the target field options that are checked      */
DECL|method|mergeBeforeChek
specifier|private
specifier|static
name|BiConsumer
argument_list|<
name|Function
argument_list|<
name|AbstractHighlighterBuilder
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Function
argument_list|<
name|FieldOptions
argument_list|,
name|Object
argument_list|>
argument_list|>
name|mergeBeforeChek
parameter_list|(
name|HighlightBuilder
name|highlightBuilder
parameter_list|,
name|Field
name|fieldBuilder
parameter_list|,
name|FieldOptions
name|options
parameter_list|)
block|{
return|return
parameter_list|(
name|highlightBuilderParameterAccessor
parameter_list|,
name|fieldOptionsParameterAccessor
parameter_list|)
lambda|->
block|{
name|Object
name|expectedValue
init|=
literal|null
decl_stmt|;
name|Object
name|globalLevelValue
init|=
name|highlightBuilderParameterAccessor
operator|.
name|apply
argument_list|(
name|highlightBuilder
argument_list|)
decl_stmt|;
name|Object
name|fieldLevelValue
init|=
name|highlightBuilderParameterAccessor
operator|.
name|apply
argument_list|(
name|fieldBuilder
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldLevelValue
operator|!=
literal|null
condition|)
block|{
name|expectedValue
operator|=
name|fieldLevelValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|globalLevelValue
operator|!=
literal|null
condition|)
block|{
name|expectedValue
operator|=
name|globalLevelValue
expr_stmt|;
block|}
else|else
block|{
name|expectedValue
operator|=
name|fieldOptionsParameterAccessor
operator|.
name|apply
argument_list|(
name|HighlightBuilder
operator|.
name|defaultOptions
argument_list|)
expr_stmt|;
block|}
name|Object
name|actualValue
init|=
name|fieldOptionsParameterAccessor
operator|.
name|apply
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualValue
operator|instanceof
name|String
index|[]
condition|)
block|{
name|assertArrayEquals
argument_list|(
operator|(
name|String
index|[]
operator|)
name|expectedValue
argument_list|,
operator|(
name|String
index|[]
operator|)
name|actualValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|actualValue
operator|instanceof
name|Character
index|[]
condition|)
block|{
if|if
condition|(
name|expectedValue
operator|instanceof
name|char
index|[]
condition|)
block|{
name|assertArrayEquals
argument_list|(
name|HighlightBuilder
operator|.
name|convertCharArray
argument_list|(
operator|(
name|char
index|[]
operator|)
name|expectedValue
argument_list|)
argument_list|,
operator|(
name|Character
index|[]
operator|)
name|actualValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertArrayEquals
argument_list|(
operator|(
name|Character
index|[]
operator|)
name|expectedValue
argument_list|,
operator|(
name|Character
index|[]
operator|)
name|actualValue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expectedValue
argument_list|,
name|actualValue
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|getFieldBuilderByName
specifier|private
specifier|static
name|Field
name|getFieldBuilderByName
parameter_list|(
name|HighlightBuilder
name|highlightBuilder
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
for|for
control|(
name|Field
name|hbfield
range|:
name|highlightBuilder
operator|.
name|fields
argument_list|()
control|)
block|{
if|if
condition|(
name|hbfield
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
return|return
name|hbfield
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * `tags_schema` is not produced by toXContent in the builder but should be parseable, so this      * adds a simple json test for this.      */
DECL|method|testParsingTagsSchema
specifier|public
name|void
name|testParsingTagsSchema
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|highlightElement
init|=
literal|"{\n"
operator|+
literal|"    \"tags_schema\" : \"styled\"\n"
operator|+
literal|"}\n"
decl_stmt|;
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
name|highlightElement
argument_list|)
decl_stmt|;
name|QueryParseContext
name|context
init|=
operator|new
name|QueryParseContext
argument_list|(
name|indicesQueriesRegistry
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|HighlightBuilder
name|highlightBuilder
init|=
name|HighlightBuilder
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"setting tags_schema 'styled' should alter pre_tags"
argument_list|,
name|HighlightBuilder
operator|.
name|DEFAULT_STYLED_PRE_TAG
argument_list|,
name|highlightBuilder
operator|.
name|preTags
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"setting tags_schema 'styled' should alter post_tags"
argument_list|,
name|HighlightBuilder
operator|.
name|DEFAULT_STYLED_POST_TAGS
argument_list|,
name|highlightBuilder
operator|.
name|postTags
argument_list|()
argument_list|)
expr_stmt|;
name|highlightElement
operator|=
literal|"{\n"
operator|+
literal|"    \"tags_schema\" : \"default\"\n"
operator|+
literal|"}\n"
expr_stmt|;
name|parser
operator|=
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
name|highlightElement
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|QueryParseContext
argument_list|(
name|indicesQueriesRegistry
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|highlightBuilder
operator|=
name|HighlightBuilder
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"setting tags_schema 'default' should alter pre_tags"
argument_list|,
name|HighlightBuilder
operator|.
name|DEFAULT_PRE_TAGS
argument_list|,
name|highlightBuilder
operator|.
name|preTags
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"setting tags_schema 'default' should alter post_tags"
argument_list|,
name|HighlightBuilder
operator|.
name|DEFAULT_POST_TAGS
argument_list|,
name|highlightBuilder
operator|.
name|postTags
argument_list|()
argument_list|)
expr_stmt|;
name|ParsingException
name|e
init|=
name|expectParseThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
literal|"{\n"
operator|+
literal|"    \"tags_schema\" : \"somthing_else\"\n"
operator|+
literal|"}\n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[highlight] failed to parse field [tags_schema]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unknown tag schema [somthing_else]"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * test parsing empty highlight or empty fields blocks      */
DECL|method|testParsingEmptyStructure
specifier|public
name|void
name|testParsingEmptyStructure
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|highlightElement
init|=
literal|"{ }"
decl_stmt|;
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
name|highlightElement
argument_list|)
decl_stmt|;
name|QueryParseContext
name|context
init|=
operator|new
name|QueryParseContext
argument_list|(
name|indicesQueriesRegistry
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|HighlightBuilder
name|highlightBuilder
init|=
name|HighlightBuilder
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"expected plain HighlightBuilder"
argument_list|,
operator|new
name|HighlightBuilder
argument_list|()
argument_list|,
name|highlightBuilder
argument_list|)
expr_stmt|;
name|highlightElement
operator|=
literal|"{ \"fields\" : { } }"
expr_stmt|;
name|parser
operator|=
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
name|highlightElement
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|QueryParseContext
argument_list|(
name|indicesQueriesRegistry
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|highlightBuilder
operator|=
name|HighlightBuilder
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"defining no field should return plain HighlightBuilder"
argument_list|,
operator|new
name|HighlightBuilder
argument_list|()
argument_list|,
name|highlightBuilder
argument_list|)
expr_stmt|;
name|highlightElement
operator|=
literal|"{ \"fields\" : { \"foo\" : { } } }"
expr_stmt|;
name|parser
operator|=
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
name|highlightElement
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|QueryParseContext
argument_list|(
name|indicesQueriesRegistry
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|highlightBuilder
operator|=
name|HighlightBuilder
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected HighlightBuilder with field"
argument_list|,
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|Field
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|highlightBuilder
argument_list|)
expr_stmt|;
block|}
DECL|method|testPreTagsWithoutPostTags
specifier|public
name|void
name|testPreTagsWithoutPostTags
parameter_list|()
throws|throws
name|IOException
block|{
name|ParsingException
name|e
init|=
name|expectParseThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
literal|"{\n"
operator|+
literal|"    \"pre_tags\" : [\"<a>\"]\n"
operator|+
literal|"}\n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"pre_tags are set but post_tags are not set"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectParseThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
literal|"{\n"
operator|+
literal|"  \"fields\" : {\n"
operator|+
literal|"     \"body\" : {\n"
operator|+
literal|"        \"pre_tags\" : [\"<a>\"]\n"
operator|+
literal|"     }\n"
operator|+
literal|"   }\n"
operator|+
literal|"}\n"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[highlight] failed to parse field [fields]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[fields] failed to parse field [body]"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pre_tags are set but post_tags are not set"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * test ordinals of {@link Order}, since serialization depends on it      */
DECL|method|testValidOrderOrdinals
specifier|public
name|void
name|testValidOrderOrdinals
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Order
operator|.
name|NONE
operator|.
name|ordinal
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Order
operator|.
name|SCORE
operator|.
name|ordinal
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOrderSerialization
specifier|public
name|void
name|testOrderSerialization
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|Order
operator|.
name|NONE
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|in
operator|.
name|readVInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|Order
operator|.
name|SCORE
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|in
operator|.
name|readVInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|toXContent
specifier|protected
specifier|static
name|XContentBuilder
name|toXContent
parameter_list|(
name|HighlightBuilder
name|highlight
parameter_list|,
name|XContentType
name|contentType
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
block|}
name|highlight
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * create random highlight builder that is put under test      */
DECL|method|randomHighlighterBuilder
specifier|public
specifier|static
name|HighlightBuilder
name|randomHighlighterBuilder
parameter_list|()
block|{
name|HighlightBuilder
name|testHighlighter
init|=
operator|new
name|HighlightBuilder
argument_list|()
decl_stmt|;
name|setRandomCommonOptions
argument_list|(
name|testHighlighter
argument_list|)
expr_stmt|;
name|testHighlighter
operator|.
name|useExplicitFieldOrder
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|testHighlighter
operator|.
name|encoder
argument_list|(
name|randomFrom
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"default"
block|,
literal|"html"
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|numberOfFields
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfFields
condition|;
name|i
operator|++
control|)
block|{
name|Field
name|field
init|=
operator|new
name|Field
argument_list|(
name|i
operator|+
literal|"_"
operator|+
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|setRandomCommonOptions
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|field
operator|.
name|fragmentOffset
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|field
operator|.
name|matchedFields
argument_list|(
name|randomStringArray
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|testHighlighter
operator|.
name|field
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
return|return
name|testHighlighter
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|}
argument_list|)
DECL|method|setRandomCommonOptions
specifier|private
specifier|static
name|void
name|setRandomCommonOptions
parameter_list|(
name|AbstractHighlighterBuilder
name|highlightBuilder
parameter_list|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// need to set this together, otherwise parsing will complain
name|highlightBuilder
operator|.
name|preTags
argument_list|(
name|randomStringArray
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|highlightBuilder
operator|.
name|postTags
argument_list|(
name|randomStringArray
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|fragmentSize
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|numOfFragments
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|highlighterType
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|fragmenter
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|QueryBuilder
name|highlightQuery
decl_stmt|;
switch|switch
condition|(
name|randomInt
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|highlightQuery
operator|=
operator|new
name|MatchAllQueryBuilder
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|highlightQuery
operator|=
operator|new
name|IdsQueryBuilder
argument_list|()
expr_stmt|;
break|break;
default|default:
case|case
literal|2
case|:
name|highlightQuery
operator|=
operator|new
name|TermQueryBuilder
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|highlightQuery
operator|.
name|boost
argument_list|(
operator|(
name|float
operator|)
name|randomDoubleBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|highlightBuilder
operator|.
name|highlightQuery
argument_list|(
name|highlightQuery
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|order
argument_list|(
name|randomFrom
argument_list|(
name|Order
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// also test the string setter
name|highlightBuilder
operator|.
name|order
argument_list|(
name|randomFrom
argument_list|(
name|Order
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|highlightFilter
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|forceSource
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|boundaryMaxScan
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|boundaryChars
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|noMatchSize
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|phraseLimit
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|items
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|items
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|value
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|randomInt
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|value
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|value
operator|=
operator|new
name|Integer
argument_list|(
name|randomInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|value
operator|=
operator|new
name|Boolean
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|options
operator|.
name|put
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|highlightBuilder
operator|.
name|requireFieldMatch
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|mutateCommonOptions
specifier|private
specifier|static
name|void
name|mutateCommonOptions
parameter_list|(
name|AbstractHighlighterBuilder
name|highlightBuilder
parameter_list|)
block|{
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|16
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|highlightBuilder
operator|.
name|preTags
argument_list|(
name|randomStringArray
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|highlightBuilder
operator|.
name|postTags
argument_list|(
name|randomStringArray
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|highlightBuilder
operator|.
name|fragmentSize
argument_list|(
name|randomIntBetween
argument_list|(
literal|101
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|highlightBuilder
operator|.
name|numOfFragments
argument_list|(
name|randomIntBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|highlightBuilder
operator|.
name|highlighterType
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|highlightBuilder
operator|.
name|fragmenter
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|highlightBuilder
operator|.
name|highlightQuery
argument_list|(
operator|new
name|TermQueryBuilder
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
if|if
condition|(
name|highlightBuilder
operator|.
name|order
argument_list|()
operator|==
name|Order
operator|.
name|NONE
condition|)
block|{
name|highlightBuilder
operator|.
name|order
argument_list|(
name|Order
operator|.
name|SCORE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|highlightBuilder
operator|.
name|order
argument_list|(
name|Order
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
name|highlightBuilder
operator|.
name|highlightFilter
argument_list|(
name|toggleOrSet
argument_list|(
name|highlightBuilder
operator|.
name|highlightFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|10
case|:
name|highlightBuilder
operator|.
name|forceSource
argument_list|(
name|toggleOrSet
argument_list|(
name|highlightBuilder
operator|.
name|forceSource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
name|highlightBuilder
operator|.
name|boundaryMaxScan
argument_list|(
name|randomIntBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|12
case|:
name|highlightBuilder
operator|.
name|boundaryChars
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|13
case|:
name|highlightBuilder
operator|.
name|noMatchSize
argument_list|(
name|randomIntBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|14
case|:
name|highlightBuilder
operator|.
name|phraseLimit
argument_list|(
name|randomIntBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|15
case|:
name|int
name|items
init|=
literal|6
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|items
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
name|i
operator|++
control|)
block|{
name|options
operator|.
name|put
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|highlightBuilder
operator|.
name|options
argument_list|(
name|options
argument_list|)
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|highlightBuilder
operator|.
name|requireFieldMatch
argument_list|(
name|toggleOrSet
argument_list|(
name|highlightBuilder
operator|.
name|requireFieldMatch
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
DECL|method|toggleOrSet
specifier|private
specifier|static
name|Boolean
name|toggleOrSet
parameter_list|(
name|Boolean
name|flag
parameter_list|)
block|{
if|if
condition|(
name|flag
operator|==
literal|null
condition|)
block|{
return|return
name|randomBoolean
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|!
name|flag
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
comment|/**      * Create array of unique Strings. If not unique, e.g. duplicates field names      * would be dropped in {@link FieldOptions.Builder#matchedFields(Set)}, resulting in test glitches      */
DECL|method|randomStringArray
specifier|private
specifier|static
name|String
index|[]
name|randomStringArray
parameter_list|(
name|int
name|minSize
parameter_list|,
name|int
name|maxSize
parameter_list|)
block|{
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
name|minSize
argument_list|,
name|maxSize
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|randomStrings
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|size
condition|;
name|f
operator|++
control|)
block|{
name|randomStrings
operator|.
name|add
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|randomStrings
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|randomStrings
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * mutate the given highlighter builder so the returned one is different in one aspect      */
DECL|method|mutate
specifier|private
specifier|static
name|HighlightBuilder
name|mutate
parameter_list|(
name|HighlightBuilder
name|original
parameter_list|)
throws|throws
name|IOException
block|{
name|HighlightBuilder
name|mutation
init|=
name|serializedCopy
argument_list|(
name|original
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|mutateCommonOptions
argument_list|(
name|mutation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
condition|)
block|{
comment|// change settings that only exists on top level
case|case
literal|0
case|:
name|mutation
operator|.
name|useExplicitFieldOrder
argument_list|(
operator|!
name|original
operator|.
name|useExplicitFieldOrder
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|mutation
operator|.
name|encoder
argument_list|(
name|original
operator|.
name|encoder
argument_list|()
operator|+
name|randomAsciiOfLength
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// add another field
name|mutation
operator|.
name|field
argument_list|(
operator|new
name|Field
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// change existing fields
name|List
argument_list|<
name|Field
argument_list|>
name|originalFields
init|=
name|original
operator|.
name|fields
argument_list|()
decl_stmt|;
name|Field
name|fieldToChange
init|=
name|originalFields
operator|.
name|get
argument_list|(
name|randomInt
argument_list|(
name|originalFields
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|fieldToChange
operator|.
name|fragmentOffset
argument_list|(
name|randomIntBetween
argument_list|(
literal|101
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fieldToChange
operator|.
name|matchedFields
argument_list|(
name|randomStringArray
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
return|return
name|mutation
return|;
block|}
DECL|method|serializedCopy
specifier|private
specifier|static
name|HighlightBuilder
name|serializedCopy
parameter_list|(
name|HighlightBuilder
name|original
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ESTestCase
operator|.
name|copyWriteable
argument_list|(
name|original
argument_list|,
name|namedWriteableRegistry
argument_list|,
name|HighlightBuilder
operator|::
operator|new
argument_list|)
return|;
block|}
block|}
end_class

end_unit

